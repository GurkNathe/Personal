{"version":3,"sources":["../../src/components/algorithms.ts"],"sourcesContent":["import { createError } from '../errors.js'\nimport { TokenScore, BM25Params } from '../types.js'\nimport { InternalDocumentID } from './internal-document-id-store.js'\n\nexport function prioritizeTokenScores(\n  arrays: TokenScore[][],\n  boost: number,\n  threshold = 1,\n  keywordsCount: number,\n): TokenScore[] {\n  if (boost === 0) {\n    throw createError('INVALID_BOOST_VALUE')\n  }\n\n  const tokenScoresMap = new Map<InternalDocumentID, number>()\n  const tokenKeywordsCountMap = new Map<InternalDocumentID, number>()\n\n  const mapsLength = arrays.length\n  for (let i = 0; i < mapsLength; i++) {\n    const arr = arrays[i]\n\n    const entriesLength = arr.length\n    for (let j = 0; j < entriesLength; j++) {\n      const [token, score] = arr[j]\n      const boostScore = score * boost\n      const oldScore = tokenScoresMap.get(token)\n\n      if (oldScore !== undefined) {\n        tokenScoresMap.set(token, oldScore * 1.5 + boostScore)\n        tokenKeywordsCountMap.set(token, tokenKeywordsCountMap.get(token)! + 1)\n      } else {\n        tokenScoresMap.set(token, boostScore)\n        tokenKeywordsCountMap.set(token, 1)\n      }\n    }\n  }\n\n  const tokenScores: TokenScore[] = []\n\n  for (const tokenScoreEntry of tokenScoresMap.entries()) {\n    tokenScores.push(tokenScoreEntry)\n  }\n\n  const results = tokenScores.sort((a, b) => b[1] - a[1])\n\n  // If threshold is 1, it means we will return all the results with at least one search term,\n  // prioritizig the ones that contains more search terms (fuzzy match)\n  if (threshold === 1) {\n    return results\n  }\n\n  // Prepare keywords count tracking for threshold handling\n  const allResults = results.length\n  const tokenKeywordsCount: [InternalDocumentID, number][] = []\n\n  for (const tokenKeywordsCountEntry of tokenKeywordsCountMap.entries()) {\n    tokenKeywordsCount.push(tokenKeywordsCountEntry)\n  }\n\n  // Find the index of the last result with all keywords.\n  // Note that since score is multipled by 1.5 any time the token is encountered in results it means\n  // that tokenScores and tokenKeywordsCount should always have the same order.\n  const keywordsPerToken = tokenKeywordsCount.sort((a, b) => b[1] - a[1])\n\n  let lastTokenWithAllKeywords: number | undefined = undefined\n  for (let i = 0; i < allResults; i++) {\n    if (keywordsPerToken[i][1] === keywordsCount) {\n      lastTokenWithAllKeywords = i\n    } else {\n      break\n    }\n  }\n\n  // If no results had all the keywords, either bail out earlier or normalize\n  if (typeof lastTokenWithAllKeywords === 'undefined') {\n    if (threshold === 0) {\n      return []\n    }\n\n    lastTokenWithAllKeywords = 0\n  }\n\n  // If threshold is 0, it means we will only return all the results that contains ALL the search terms (exact match)\n  if (threshold === 0) {\n    return results.slice(0, lastTokenWithAllKeywords + 1)\n  }\n\n  // If the threshold is between 0 and 1, we will return all the results that contains at least the threshold of search terms\n  // For example, if threshold is 0.5, we will return all the results that contains at least 50% of the search terms\n  // (fuzzy match with a minimum threshold)\n  const thresholdLength =\n    lastTokenWithAllKeywords + Math.ceil((threshold * 100 * (results.length - lastTokenWithAllKeywords)) / 100)\n\n  return results.slice(0, results.length + thresholdLength)\n}\n\nexport function BM25(\n  tf: number,\n  matchingCount: number,\n  docsCount: number,\n  fieldLength: number,\n  averageFieldLength: number,\n  BM25Params: Required<BM25Params>,\n) {\n  const { k, b, d } = BM25Params\n  const idf = Math.log(1 + (docsCount - matchingCount + 0.5) / (matchingCount + 0.5))\n  return (idf * (d + tf * (k + 1))) / (tf + k * (1 - b + (b * fieldLength) / averageFieldLength))\n}\n"],"names":["createError","prioritizeTokenScores","arrays","boost","threshold","keywordsCount","tokenScoresMap","Map","tokenKeywordsCountMap","mapsLength","length","i","arr","entriesLength","j","token","score","boostScore","oldScore","get","undefined","set","tokenScores","tokenScoreEntry","entries","push","results","sort","a","b","allResults","tokenKeywordsCount","tokenKeywordsCountEntry","keywordsPerToken","lastTokenWithAllKeywords","slice","thresholdLength","Math","ceil","BM25","tf","matchingCount","docsCount","fieldLength","averageFieldLength","BM25Params","k","d","idf","log"],"mappings":"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"}