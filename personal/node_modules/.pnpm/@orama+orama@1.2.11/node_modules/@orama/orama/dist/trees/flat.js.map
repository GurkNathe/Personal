{"version":3,"sources":["../../src/trees/flat.ts"],"sourcesContent":["import { InternalDocumentID } from '../components/internal-document-id-store.js'\nimport { EnumArrComparisonOperator, EnumComparisonOperator, Nullable, ScalarSearchableValue } from '../types.js'\nimport { intersect, safeArrayPush } from '../utils.js'\n\nexport interface FlatTree {\n  numberToDocumentId: Map<ScalarSearchableValue, InternalDocumentID[]>\n}\n\nexport function create (): FlatTree {\n  return {\n    numberToDocumentId: new Map()\n  }\n}\n\nexport function insert (root: FlatTree, key: ScalarSearchableValue, value: InternalDocumentID): FlatTree {\n  if (root.numberToDocumentId.has(key)) {\n    root.numberToDocumentId.get(key)!.push(value)\n    return root\n  }\n  root.numberToDocumentId.set(key, [value])\n  return root\n}\n\nexport function find (root: FlatTree, key: ScalarSearchableValue): Nullable<InternalDocumentID[]> {\n  return root.numberToDocumentId.get(key) ?? null\n}\n\nexport function remove (root: Nullable<FlatTree>, key: ScalarSearchableValue): Nullable<FlatTree> {\n  if (root != null) {\n    root.numberToDocumentId.delete(key)\n  }\n  return root\n}\nexport function removeDocument (root: FlatTree, id: InternalDocumentID, key: ScalarSearchableValue): void {\n  root?.numberToDocumentId.set(key, root?.numberToDocumentId.get(key)?.filter((v) => v !== id) ?? [])\n  if (root?.numberToDocumentId.get(key)?.length === 0) {\n    root?.numberToDocumentId.delete(key)\n  }\n}\n\nexport function contains (node: FlatTree, key: ScalarSearchableValue): boolean {\n  return !(find(node, key) == null)\n}\n\nexport function getSize (root: Nullable<FlatTree>): number {\n  let size = 0\n  for (const [, value] of root?.numberToDocumentId ?? []) {\n    size += value.length\n  }\n  return size\n}\nexport function filter (root: FlatTree, operation: EnumComparisonOperator): InternalDocumentID[] {\n  const operationKeys = Object.keys(operation)\n\n  if (operationKeys.length !== 1) {\n    throw new Error('Invalid operation')\n  }\n\n  const operationType = operationKeys[0] as keyof EnumComparisonOperator\n  switch (operationType) {\n    case 'eq': {\n      const value = operation[operationType]!\n      return root.numberToDocumentId.get(value) ?? []\n    }\n    case 'in': {\n      const value = operation[operationType]!\n      const result: InternalDocumentID[] = []\n      for (const v of value) {\n        const ids = root.numberToDocumentId.get(v)\n        if (ids != null) {\n          safeArrayPush(result, ids)\n        }\n      }\n      return result\n    }\n    case 'nin': {\n      const value = operation[operationType]!\n      const result: InternalDocumentID[] = []\n\n      const keys = root.numberToDocumentId.keys()\n      for (const key of keys) {\n        if (value.includes(key)) {\n          continue\n        }\n        const ids = root.numberToDocumentId.get(key)\n        if (ids != null) {\n          safeArrayPush(result, ids)\n        }\n      }\n      return result\n    }\n  }\n\n  throw new Error('Invalid operation')\n}\n\nexport function filterArr (root: FlatTree, operation: EnumArrComparisonOperator): InternalDocumentID[] {\n  const operationKeys = Object.keys(operation)\n\n  if (operationKeys.length !== 1) {\n    throw new Error('Invalid operation')\n  }\n\n  const operationType = operationKeys[0] as keyof EnumArrComparisonOperator\n  switch (operationType) {\n    case 'containsAll': {\n      const values = operation[operationType]!\n      const ids = values.map((value) => root.numberToDocumentId.get(value) ?? [])\n      return intersect(ids)\n    }\n  }\n\n  throw new Error('Invalid operation')\n}\n"],"names":["intersect","safeArrayPush","create","numberToDocumentId","Map","insert","root","key","value","has","get","push","set","find","remove","delete","removeDocument","id","filter","v","length","contains","node","getSize","size","operation","operationKeys","Object","keys","Error","operationType","result","ids","includes","filterArr","values","map"],"mappings":"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"}