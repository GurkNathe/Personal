{"version":3,"sources":["../../src/trees/avl.ts"],"sourcesContent":["import { Nullable } from '../types.js'\nimport { safeArrayPush } from '../utils.js'\n\nexport interface Node<K, V> {\n  // Node key\n  k: K\n  // Node value\n  v: V\n  // Left child node\n  l: Nullable<Node<K, V>>\n  // Right child node\n  r: Nullable<Node<K, V>>\n  // Tree height from this node\n  h: number\n}\n\nconst BALANCE_STATE = {\n  UNBALANCED_RIGHT: -2,\n  SLIGHTLY_UNBALANCED_RIGHT: -1,\n  BALANCED: 0,\n  SLIGHTLY_UNBALANCED_LEFT: 1,\n  UNBALANCED_LEFT: 2\n}\n\nfunction getHeight<K, V> (node: Nullable<Node<K, V>>): number {\n  return (node != null) ? node.h : -1\n}\n\nfunction rotateLeft<K, V> (node: Node<K, V>): Node<K, V> {\n  const right = node.r as Node<K, V>\n  node.r = right.l\n  right.l = node\n  node.h = Math.max(getHeight(node.l), getHeight(node.r)) + 1\n  right.h = Math.max(getHeight(right.l), getHeight(right.r)) + 1\n  return right\n}\n\nfunction rotateRight<K, V> (node: Node<K, V>): Node<K, V> {\n  const left = node.l as Node<K, V>\n  node.l = left.r\n  left.r = node\n  node.h = Math.max(getHeight(node.l), getHeight(node.r)) + 1\n  left.h = Math.max(getHeight(left.l), getHeight(left.r)) + 1\n  return left\n}\n\nexport function contains<K, V> (node: Node<K, V>, key: K): boolean {\n  return !!find(node, key)\n}\n\nexport function getSize<K, V> (root: Nullable<Node<K, V>>): number {\n  let size = 0\n  const queue: Array<Node<K, V>> = []\n\n  if (root !== null) {\n    queue.push(root)\n  }\n\n  while (queue.length > 0) {\n    const node = queue.shift() as Node<K, V>\n    size++\n\n    if (node.l !== null) {\n      queue.push(node.l)\n    }\n\n    if (node.r !== null) {\n      queue.push(node.r)\n    }\n  }\n\n  return size\n}\n\nexport function isBalanced<K, V> (root: Nullable<Node<K, V>>): boolean {\n  if (root === null) return true\n\n  const stack: Array<Node<K, V>> = [root]\n\n  while (stack.length > 0) {\n    const node = stack.pop()\n\n    if (node === undefined) return true\n\n    const heightDiff = getHeight(node.l) - getHeight(node.r)\n\n    if (heightDiff > 1 || heightDiff < -1) {\n      return false\n    }\n\n    if (node.r !== null) {\n      stack.push(node.r)\n    }\n\n    if (node.l !== null) {\n      stack.push(node.l)\n    }\n  }\n\n  return true\n}\n\nexport function rangeSearch<K, V> (node: Node<K, V>, min: K, max: K): V {\n  if (!node) {\n    return [] as unknown as V\n  }\n\n  const result: V[] = []\n\n  function traverse (node: Node<K, V>) {\n    if (!node) {\n      return\n    }\n\n    if (node.k > min) {\n      traverse(node.l as Node<K, V>)\n    }\n\n    if (node.k >= min && node.k <= max) {\n      safeArrayPush(result, node.v as V[])\n    }\n\n    if (node.k < max) {\n      traverse(node.r as Node<K, V>)\n    }\n  }\n\n  traverse(node)\n\n  return result as V\n}\n\nexport function greaterThan<K, V> (node: Node<K, V>, key: K, inclusive = false): V {\n  if (!node) {\n    return [] as unknown as V\n  }\n\n  const result: V[] = []\n\n  function traverse (node: Node<K, V>) {\n    if (!node) {\n      return\n    }\n\n    if (inclusive && node.k >= key) {\n      safeArrayPush(result, node.v as V[])\n    }\n\n    if (!inclusive && node.k > key) {\n      safeArrayPush(result, node.v as V[])\n    }\n\n    traverse(node.l as Node<K, V>)\n    traverse(node.r as Node<K, V>)\n  }\n\n  traverse(node)\n\n  return result as V\n}\n\nexport function lessThan<K, V> (node: Node<K, V>, key: K, inclusive = false): V {\n  if (!node) {\n    return [] as unknown as V\n  }\n\n  const result: V[] = []\n\n  function traverse (node: Node<K, V>) {\n    if (!node) {\n      return\n    }\n\n    if (inclusive && node.k <= key) {\n      safeArrayPush(result, node.v as V[])\n    }\n\n    if (!inclusive && node.k < key) {\n      safeArrayPush(result, node.v as V[])\n    }\n\n    traverse(node.l as Node<K, V>)\n    traverse(node.r as Node<K, V>)\n  }\n\n  traverse(node)\n\n  return result as V\n}\n\nfunction getNodeByKey<K, V> (node: Nullable<Node<K, V>>, key: K): Nullable<Node<K, V>> {\n  while (node !== null) {\n    if (key < node.k) {\n      node = node.l\n    } else if (key > node.k) {\n      node = node.r\n    } else {\n      return node\n    }\n  }\n  return null\n}\n\nexport function create<K, V> (key: K, value: V): Node<K, V> {\n  return {\n    k: key,\n    v: value,\n    l: null,\n    r: null,\n    h: 0\n  }\n}\n\nexport function insert<K, V> (root: Node<K, V>, key: K, value: V): Node<K, V> {\n  let parent: Nullable<Node<K, V>> = null\n  let current: Nullable<Node<K, V>> = root\n\n  while (current !== null) {\n    parent = current\n    if (key < current.k) {\n      current = current.l\n    } else if (key > current.k) {\n      current = current.r\n    } else {\n      // assuming value is an array here\n      (current.v as string[]) = (current.v as string[]).concat(value as string)\n      return root\n    }\n  }\n\n  const newNode = create(key, value)\n\n  if (parent == null) {\n    root = newNode // tree was empty\n  } else if (key < parent.k) {\n    parent.l = newNode\n  } else {\n    parent.r = newNode\n  }\n\n  current = newNode\n\n  while (parent != null) {\n    const balanceFactor = getHeight(parent.l) - getHeight(parent.r)\n\n    if (balanceFactor === BALANCE_STATE.UNBALANCED_LEFT) {\n      if (key > (parent.l as Node<K, V>).k) {\n        parent.l = rotateLeft(parent.l as Node<K, V>)\n      }\n      parent = rotateRight(parent)\n    }\n\n    if (balanceFactor === BALANCE_STATE.UNBALANCED_RIGHT) {\n      if (key < (parent.r as Node<K, V>).k) {\n        parent.r = rotateRight(parent.r as Node<K, V>)\n      }\n      parent = rotateLeft(parent)\n    }\n\n    if (parent === root) {\n      break\n    }\n\n    current = parent\n    parent = getNodeParent(root, current.k)\n  }\n\n  return root\n}\n\nfunction getNodeParent<K, V> (root: Node<K, V>, key: K): Nullable<Node<K, V>> {\n  let current: Nullable<Node<K, V>> = root\n  let parent: Nullable<Node<K, V>> = null\n\n  while (current !== null) {\n    if (key < current.k) {\n      parent = current\n      current = current.l\n    } else if (key > current.k) {\n      parent = current\n      current = current.r\n    } else {\n      break\n    }\n  }\n\n  return parent\n}\n\nexport function find<K, V> (root: Node<K, V>, key: K): V | null {\n  const node = getNodeByKey(root, key)\n  if (node == null) {\n    return null\n  }\n  return node.v\n}\n\nexport function remove<K, V> (root: Nullable<Node<K, V>>, key: K): Nullable<Node<K, V>> {\n  let node = root\n  let parentNode: Nullable<Node<K, V>> = null\n\n  while ((node != null) && node.k !== key) {\n    parentNode = node\n    if (key < node.k) {\n      node = node.l as Node<K, V>\n    } else {\n      node = node.r as Node<K, V>\n    }\n  }\n\n  if (node == null) {\n    return null\n  }\n\n  if ((node.l == null) && (node.r == null)) {\n    if (parentNode == null) {\n      // Node to be deleted is root\n      root = null\n    } else {\n      if (parentNode.l === node) {\n        parentNode.l = null\n      } else {\n        parentNode.r = null\n      }\n    }\n  } else if ((node.l != null) && (node.r != null)) {\n    let minValueNode = node.r\n    let minValueParent = node\n\n    while (minValueNode.l != null) {\n      minValueParent = minValueNode\n      minValueNode = minValueNode.l\n    }\n\n    node.k = minValueNode.k\n\n    if (minValueParent === node) {\n      minValueParent.r = minValueNode.r\n    } else {\n      minValueParent.l = minValueNode.r\n    }\n  } else {\n    const childNode = (node.l != null) ? node.l : node.r\n\n    if (parentNode == null) {\n      root = childNode as Node<K, V>\n    } else {\n      if (parentNode.l === node) {\n        parentNode.l = childNode\n      } else {\n        parentNode.r = childNode\n      }\n    }\n  }\n\n  return root\n}\n\nexport function removeDocument<K, V> (root: Node<K, V[]>, id: V, key: K): void {\n  const node = getNodeByKey(root, key)!\n\n  if (!node) {\n    return\n  }\n\n  if (node.v.length === 1) {\n    remove(root, key)\n    return\n  }\n\n  node.v.splice(node.v.indexOf(id), 1)\n}\n"],"names":["safeArrayPush","BALANCE_STATE","UNBALANCED_RIGHT","SLIGHTLY_UNBALANCED_RIGHT","BALANCED","SLIGHTLY_UNBALANCED_LEFT","UNBALANCED_LEFT","getHeight","node","h","rotateLeft","right","r","l","Math","max","rotateRight","left","contains","key","find","getSize","root","size","queue","push","length","shift","isBalanced","stack","pop","undefined","heightDiff","rangeSearch","min","result","traverse","k","v","greaterThan","inclusive","lessThan","getNodeByKey","create","value","insert","parent","current","concat","newNode","balanceFactor","getNodeParent","remove","parentNode","minValueNode","minValueParent","childNode","removeDocument","id","splice","indexOf"],"mappings":"AACA,SAASA,aAAa,QAAQ,cAAa;AAe3C,MAAMC,gBAAgB;IACpBC,kBAAkB,CAAC;IACnBC,2BAA2B,CAAC;IAC5BC,UAAU;IACVC,0BAA0B;IAC1BC,iBAAiB;AACnB;AAEA,SAASC,UAAiBC,IAA0B,EAAU;IAC5D,OAAO,AAACA,QAAQ,IAAI,GAAIA,KAAKC,CAAC,GAAG,CAAC,CAAC;AACrC;AAEA,SAASC,WAAkBF,IAAgB,EAAc;IACvD,MAAMG,QAAQH,KAAKI,CAAC;IACpBJ,KAAKI,CAAC,GAAGD,MAAME,CAAC;IAChBF,MAAME,CAAC,GAAGL;IACVA,KAAKC,CAAC,GAAGK,KAAKC,GAAG,CAACR,UAAUC,KAAKK,CAAC,GAAGN,UAAUC,KAAKI,CAAC,KAAK;IAC1DD,MAAMF,CAAC,GAAGK,KAAKC,GAAG,CAACR,UAAUI,MAAME,CAAC,GAAGN,UAAUI,MAAMC,CAAC,KAAK;IAC7D,OAAOD;AACT;AAEA,SAASK,YAAmBR,IAAgB,EAAc;IACxD,MAAMS,OAAOT,KAAKK,CAAC;IACnBL,KAAKK,CAAC,GAAGI,KAAKL,CAAC;IACfK,KAAKL,CAAC,GAAGJ;IACTA,KAAKC,CAAC,GAAGK,KAAKC,GAAG,CAACR,UAAUC,KAAKK,CAAC,GAAGN,UAAUC,KAAKI,CAAC,KAAK;IAC1DK,KAAKR,CAAC,GAAGK,KAAKC,GAAG,CAACR,UAAUU,KAAKJ,CAAC,GAAGN,UAAUU,KAAKL,CAAC,KAAK;IAC1D,OAAOK;AACT;AAEA,OAAO,SAASC,SAAgBV,IAAgB,EAAEW,GAAM,EAAW;IACjE,OAAO,CAAC,CAACC,KAAKZ,MAAMW;AACtB,CAAC;AAED,OAAO,SAASE,QAAeC,IAA0B,EAAU;IACjE,IAAIC,OAAO;IACX,MAAMC,QAA2B,EAAE;IAEnC,IAAIF,SAAS,IAAI,EAAE;QACjBE,MAAMC,IAAI,CAACH;IACb,CAAC;IAED,MAAOE,MAAME,MAAM,GAAG,EAAG;QACvB,MAAMlB,OAAOgB,MAAMG,KAAK;QACxBJ;QAEA,IAAIf,KAAKK,CAAC,KAAK,IAAI,EAAE;YACnBW,MAAMC,IAAI,CAACjB,KAAKK,CAAC;QACnB,CAAC;QAED,IAAIL,KAAKI,CAAC,KAAK,IAAI,EAAE;YACnBY,MAAMC,IAAI,CAACjB,KAAKI,CAAC;QACnB,CAAC;IACH;IAEA,OAAOW;AACT,CAAC;AAED,OAAO,SAASK,WAAkBN,IAA0B,EAAW;IACrE,IAAIA,SAAS,IAAI,EAAE,OAAO,IAAI;IAE9B,MAAMO,QAA2B;QAACP;KAAK;IAEvC,MAAOO,MAAMH,MAAM,GAAG,EAAG;QACvB,MAAMlB,OAAOqB,MAAMC,GAAG;QAEtB,IAAItB,SAASuB,WAAW,OAAO,IAAI;QAEnC,MAAMC,aAAazB,UAAUC,KAAKK,CAAC,IAAIN,UAAUC,KAAKI,CAAC;QAEvD,IAAIoB,aAAa,KAAKA,aAAa,CAAC,GAAG;YACrC,OAAO,KAAK;QACd,CAAC;QAED,IAAIxB,KAAKI,CAAC,KAAK,IAAI,EAAE;YACnBiB,MAAMJ,IAAI,CAACjB,KAAKI,CAAC;QACnB,CAAC;QAED,IAAIJ,KAAKK,CAAC,KAAK,IAAI,EAAE;YACnBgB,MAAMJ,IAAI,CAACjB,KAAKK,CAAC;QACnB,CAAC;IACH;IAEA,OAAO,IAAI;AACb,CAAC;AAED,OAAO,SAASoB,YAAmBzB,IAAgB,EAAE0B,GAAM,EAAEnB,GAAM,EAAK;IACtE,IAAI,CAACP,MAAM;QACT,OAAO,EAAE;IACX,CAAC;IAED,MAAM2B,SAAc,EAAE;IAEtB,SAASC,SAAU5B,IAAgB,EAAE;QACnC,IAAI,CAACA,MAAM;YACT;QACF,CAAC;QAED,IAAIA,KAAK6B,CAAC,GAAGH,KAAK;YAChBE,SAAS5B,KAAKK,CAAC;QACjB,CAAC;QAED,IAAIL,KAAK6B,CAAC,IAAIH,OAAO1B,KAAK6B,CAAC,IAAItB,KAAK;YAClCf,cAAcmC,QAAQ3B,KAAK8B,CAAC;QAC9B,CAAC;QAED,IAAI9B,KAAK6B,CAAC,GAAGtB,KAAK;YAChBqB,SAAS5B,KAAKI,CAAC;QACjB,CAAC;IACH;IAEAwB,SAAS5B;IAET,OAAO2B;AACT,CAAC;AAED,OAAO,SAASI,YAAmB/B,IAAgB,EAAEW,GAAM,EAAEqB,YAAY,KAAK,EAAK;IACjF,IAAI,CAAChC,MAAM;QACT,OAAO,EAAE;IACX,CAAC;IAED,MAAM2B,SAAc,EAAE;IAEtB,SAASC,SAAU5B,IAAgB,EAAE;QACnC,IAAI,CAACA,MAAM;YACT;QACF,CAAC;QAED,IAAIgC,aAAahC,KAAK6B,CAAC,IAAIlB,KAAK;YAC9BnB,cAAcmC,QAAQ3B,KAAK8B,CAAC;QAC9B,CAAC;QAED,IAAI,CAACE,aAAahC,KAAK6B,CAAC,GAAGlB,KAAK;YAC9BnB,cAAcmC,QAAQ3B,KAAK8B,CAAC;QAC9B,CAAC;QAEDF,SAAS5B,KAAKK,CAAC;QACfuB,SAAS5B,KAAKI,CAAC;IACjB;IAEAwB,SAAS5B;IAET,OAAO2B;AACT,CAAC;AAED,OAAO,SAASM,SAAgBjC,IAAgB,EAAEW,GAAM,EAAEqB,YAAY,KAAK,EAAK;IAC9E,IAAI,CAAChC,MAAM;QACT,OAAO,EAAE;IACX,CAAC;IAED,MAAM2B,SAAc,EAAE;IAEtB,SAASC,SAAU5B,IAAgB,EAAE;QACnC,IAAI,CAACA,MAAM;YACT;QACF,CAAC;QAED,IAAIgC,aAAahC,KAAK6B,CAAC,IAAIlB,KAAK;YAC9BnB,cAAcmC,QAAQ3B,KAAK8B,CAAC;QAC9B,CAAC;QAED,IAAI,CAACE,aAAahC,KAAK6B,CAAC,GAAGlB,KAAK;YAC9BnB,cAAcmC,QAAQ3B,KAAK8B,CAAC;QAC9B,CAAC;QAEDF,SAAS5B,KAAKK,CAAC;QACfuB,SAAS5B,KAAKI,CAAC;IACjB;IAEAwB,SAAS5B;IAET,OAAO2B;AACT,CAAC;AAED,SAASO,aAAoBlC,IAA0B,EAAEW,GAAM,EAAwB;IACrF,MAAOX,SAAS,IAAI,CAAE;QACpB,IAAIW,MAAMX,KAAK6B,CAAC,EAAE;YAChB7B,OAAOA,KAAKK,CAAC;QACf,OAAO,IAAIM,MAAMX,KAAK6B,CAAC,EAAE;YACvB7B,OAAOA,KAAKI,CAAC;QACf,OAAO;YACL,OAAOJ;QACT,CAAC;IACH;IACA,OAAO,IAAI;AACb;AAEA,OAAO,SAASmC,OAAcxB,GAAM,EAAEyB,KAAQ,EAAc;IAC1D,OAAO;QACLP,GAAGlB;QACHmB,GAAGM;QACH/B,GAAG,IAAI;QACPD,GAAG,IAAI;QACPH,GAAG;IACL;AACF,CAAC;AAED,OAAO,SAASoC,OAAcvB,IAAgB,EAAEH,GAAM,EAAEyB,KAAQ,EAAc;IAC5E,IAAIE,SAA+B,IAAI;IACvC,IAAIC,UAAgCzB;IAEpC,MAAOyB,YAAY,IAAI,CAAE;QACvBD,SAASC;QACT,IAAI5B,MAAM4B,QAAQV,CAAC,EAAE;YACnBU,UAAUA,QAAQlC,CAAC;QACrB,OAAO,IAAIM,MAAM4B,QAAQV,CAAC,EAAE;YAC1BU,UAAUA,QAAQnC,CAAC;QACrB,OAAO;YACL,kCAAkC;YACjCmC,QAAQT,CAAC,GAAgB,AAACS,QAAQT,CAAC,CAAcU,MAAM,CAACJ;YACzD,OAAOtB;QACT,CAAC;IACH;IAEA,MAAM2B,UAAUN,OAAOxB,KAAKyB;IAE5B,IAAIE,UAAU,IAAI,EAAE;QAClBxB,OAAO2B,QAAQ,iBAAiB;;IAClC,OAAO,IAAI9B,MAAM2B,OAAOT,CAAC,EAAE;QACzBS,OAAOjC,CAAC,GAAGoC;IACb,OAAO;QACLH,OAAOlC,CAAC,GAAGqC;IACb,CAAC;IAEDF,UAAUE;IAEV,MAAOH,UAAU,IAAI,CAAE;QACrB,MAAMI,gBAAgB3C,UAAUuC,OAAOjC,CAAC,IAAIN,UAAUuC,OAAOlC,CAAC;QAE9D,IAAIsC,kBAAkBjD,cAAcK,eAAe,EAAE;YACnD,IAAIa,MAAM,AAAC2B,OAAOjC,CAAC,CAAgBwB,CAAC,EAAE;gBACpCS,OAAOjC,CAAC,GAAGH,WAAWoC,OAAOjC,CAAC;YAChC,CAAC;YACDiC,SAAS9B,YAAY8B;QACvB,CAAC;QAED,IAAII,kBAAkBjD,cAAcC,gBAAgB,EAAE;YACpD,IAAIiB,MAAM,AAAC2B,OAAOlC,CAAC,CAAgByB,CAAC,EAAE;gBACpCS,OAAOlC,CAAC,GAAGI,YAAY8B,OAAOlC,CAAC;YACjC,CAAC;YACDkC,SAASpC,WAAWoC;QACtB,CAAC;QAED,IAAIA,WAAWxB,MAAM;YACnB,KAAK;QACP,CAAC;QAEDyB,UAAUD;QACVA,SAASK,cAAc7B,MAAMyB,QAAQV,CAAC;IACxC;IAEA,OAAOf;AACT,CAAC;AAED,SAAS6B,cAAqB7B,IAAgB,EAAEH,GAAM,EAAwB;IAC5E,IAAI4B,UAAgCzB;IACpC,IAAIwB,SAA+B,IAAI;IAEvC,MAAOC,YAAY,IAAI,CAAE;QACvB,IAAI5B,MAAM4B,QAAQV,CAAC,EAAE;YACnBS,SAASC;YACTA,UAAUA,QAAQlC,CAAC;QACrB,OAAO,IAAIM,MAAM4B,QAAQV,CAAC,EAAE;YAC1BS,SAASC;YACTA,UAAUA,QAAQnC,CAAC;QACrB,OAAO;YACL,KAAK;QACP,CAAC;IACH;IAEA,OAAOkC;AACT;AAEA,OAAO,SAAS1B,KAAYE,IAAgB,EAAEH,GAAM,EAAY;IAC9D,MAAMX,OAAOkC,aAAapB,MAAMH;IAChC,IAAIX,QAAQ,IAAI,EAAE;QAChB,OAAO,IAAI;IACb,CAAC;IACD,OAAOA,KAAK8B,CAAC;AACf,CAAC;AAED,OAAO,SAASc,OAAc9B,IAA0B,EAAEH,GAAM,EAAwB;IACtF,IAAIX,OAAOc;IACX,IAAI+B,aAAmC,IAAI;IAE3C,MAAO,AAAC7C,QAAQ,IAAI,IAAKA,KAAK6B,CAAC,KAAKlB,IAAK;QACvCkC,aAAa7C;QACb,IAAIW,MAAMX,KAAK6B,CAAC,EAAE;YAChB7B,OAAOA,KAAKK,CAAC;QACf,OAAO;YACLL,OAAOA,KAAKI,CAAC;QACf,CAAC;IACH;IAEA,IAAIJ,QAAQ,IAAI,EAAE;QAChB,OAAO,IAAI;IACb,CAAC;IAED,IAAI,AAACA,KAAKK,CAAC,IAAI,IAAI,IAAML,KAAKI,CAAC,IAAI,IAAI,EAAG;QACxC,IAAIyC,cAAc,IAAI,EAAE;YACtB,6BAA6B;YAC7B/B,OAAO,IAAI;QACb,OAAO;YACL,IAAI+B,WAAWxC,CAAC,KAAKL,MAAM;gBACzB6C,WAAWxC,CAAC,GAAG,IAAI;YACrB,OAAO;gBACLwC,WAAWzC,CAAC,GAAG,IAAI;YACrB,CAAC;QACH,CAAC;IACH,OAAO,IAAI,AAACJ,KAAKK,CAAC,IAAI,IAAI,IAAML,KAAKI,CAAC,IAAI,IAAI,EAAG;QAC/C,IAAI0C,eAAe9C,KAAKI,CAAC;QACzB,IAAI2C,iBAAiB/C;QAErB,MAAO8C,aAAazC,CAAC,IAAI,IAAI,CAAE;YAC7B0C,iBAAiBD;YACjBA,eAAeA,aAAazC,CAAC;QAC/B;QAEAL,KAAK6B,CAAC,GAAGiB,aAAajB,CAAC;QAEvB,IAAIkB,mBAAmB/C,MAAM;YAC3B+C,eAAe3C,CAAC,GAAG0C,aAAa1C,CAAC;QACnC,OAAO;YACL2C,eAAe1C,CAAC,GAAGyC,aAAa1C,CAAC;QACnC,CAAC;IACH,OAAO;QACL,MAAM4C,YAAY,AAAChD,KAAKK,CAAC,IAAI,IAAI,GAAIL,KAAKK,CAAC,GAAGL,KAAKI,CAAC;QAEpD,IAAIyC,cAAc,IAAI,EAAE;YACtB/B,OAAOkC;QACT,OAAO;YACL,IAAIH,WAAWxC,CAAC,KAAKL,MAAM;gBACzB6C,WAAWxC,CAAC,GAAG2C;YACjB,OAAO;gBACLH,WAAWzC,CAAC,GAAG4C;YACjB,CAAC;QACH,CAAC;IACH,CAAC;IAED,OAAOlC;AACT,CAAC;AAED,OAAO,SAASmC,eAAsBnC,IAAkB,EAAEoC,EAAK,EAAEvC,GAAM,EAAQ;IAC7E,MAAMX,OAAOkC,aAAapB,MAAMH;IAEhC,IAAI,CAACX,MAAM;QACT;IACF,CAAC;IAED,IAAIA,KAAK8B,CAAC,CAACZ,MAAM,KAAK,GAAG;QACvB0B,OAAO9B,MAAMH;QACb;IACF,CAAC;IAEDX,KAAK8B,CAAC,CAACqB,MAAM,CAACnD,KAAK8B,CAAC,CAACsB,OAAO,CAACF,KAAK;AACpC,CAAC"}