{"version":3,"sources":["../../src/trees/zip.ts"],"sourcesContent":["import { Nullable } from '../types.js'\n\ninterface Node<V = unknown> {\n  // Left child\n  l: Nullable<Node<V>>\n  // Right child\n  r: Nullable<Node<V>>\n  // Parent node\n  p: Nullable<Node<V>>\n  // Node key\n  k: number\n  // Node value\n  v: V\n  // Node rank\n  n: number\n}\n\nfunction randomRank (): number {\n  const r = Math.random()\n  return Math.floor(Math.log(1 - r) / Math.log(1 - 0.5))\n}\n\nexport function create<V> (key: number, value: V): Node<V> {\n  return {\n    v: value,\n    k: key,\n    n: randomRank(),\n    l: null,\n    r: null,\n    p: null\n  }\n}\n\nexport function insert<V> (root: Node<V>, key: number, value: V): void {\n  const newNode = create(key, value)\n  if (!root) {\n    return\n  }\n\n  let currentNode: Nullable<Node<V>> = root\n  let parent: Nullable<Node<V>> = null\n\n  while (currentNode != null) {\n    parent = currentNode\n    if (key < currentNode.k) {\n      currentNode = currentNode.l\n    } else if (key > currentNode.k) {\n      currentNode = currentNode.r\n    } else {\n      currentNode.v = value\n      return\n    }\n  }\n\n  if ((parent != null) && key < parent.k) {\n    parent.l = newNode\n  } else {\n    if (parent != null) {\n      parent.r = newNode\n    }\n  }\n  newNode.p = parent\n}\n\nexport function remove<V> (root: Nullable<Node<V>>, key: number): Nullable<Node<V>> {\n  if (root === null) {\n    return null\n  }\n\n  const [left, mid] = split(root, key)\n  const [, right] = split(mid, key + 1)\n  const newRoot = merge(left, right)\n\n  return newRoot\n}\n\nexport function find<V> (root: Nullable<Node<V>>, key: number): Nullable<V> {\n  let currentNode: Nullable<Node<V>> = root\n\n  while (currentNode !== null) {\n    if (currentNode.k === key) {\n      return currentNode.v\n    }\n    currentNode = (currentNode.k < key) ? currentNode.r : currentNode.l\n  }\n\n  return null\n}\n\nexport function contains<V> (root: Nullable<Node<V>>, key: number): boolean {\n  return !!find(root, key)\n}\n\nexport function rangeSearch<V> (root: Nullable<Node<V>>, min: number, max: number): V[] {\n  const results: V[] = []\n  const stack: Array<Nullable<Node<V>>> = []\n  let currentNode = root\n\n  while (currentNode !== null || stack.length > 0) {\n    while (currentNode !== null) {\n      stack.push(currentNode)\n      currentNode = currentNode.l\n    }\n\n    currentNode = stack.pop()!\n    if (currentNode.k >= min && currentNode.k <= max) {\n      results.push(currentNode.v)\n    }\n\n    currentNode = currentNode.r\n  }\n\n  return results\n}\n\nexport function greaterThan<V> (root: Nullable<Node<V>>, key: number): V[] {\n  const results: V[] = []\n  const stack: Array<Nullable<Node<V>>> = []\n  let currentNode = root\n\n  while (currentNode !== null || stack.length > 0) {\n    while (currentNode !== null) {\n      stack.push(currentNode)\n      currentNode = currentNode.l\n    }\n\n    currentNode = stack.pop()!\n    if (currentNode.k > key) {\n      results.push(currentNode.v)\n    }\n\n    currentNode = currentNode.r\n  }\n\n  return results\n}\n\nexport function lessThan<V> (root: Nullable<Node<V>>, key: number): V[] {\n  const results: V[] = []\n  const stack: Array<Nullable<Node<V>>> = []\n  let currentNode = root\n\n  while (currentNode !== null || stack.length > 0) {\n    while (currentNode !== null) {\n      stack.push(currentNode)\n      currentNode = currentNode.l\n    }\n\n    currentNode = stack.pop()!\n    if (currentNode.k < key) {\n      results.push(currentNode.v)\n    }\n\n    currentNode = currentNode.r\n  }\n\n  return results\n}\n\nexport function getSize<V> (root: Nullable<Node<V>>): number {\n  const stack: Array<Nullable<Node<V>>> = []\n  let count = 0\n  let currentNode = root\n\n  while (currentNode !== null || stack.length > 0) {\n    while (currentNode !== null) {\n      stack.push(currentNode)\n      currentNode = currentNode.l\n    }\n\n    currentNode = stack.pop()!\n    count++\n    currentNode = currentNode.r\n  }\n\n  return count\n}\n\nfunction split<V> (root: Nullable<Node<V>>, key: number): [Nullable<Node<V>>, Nullable<Node<V>>] {\n  let left: Nullable<Node<V>> = null\n  let leftTail: Nullable<Node<V>> = null\n  let right: Nullable<Node<V>> = null\n  let rightTail: Nullable<Node<V>> = null\n  let currentNode = root\n\n  while (currentNode !== null) {\n    if (currentNode.k < key) {\n      if (leftTail != null) {\n        leftTail.r = currentNode\n        currentNode.p = leftTail\n      } else {\n        left = currentNode\n      }\n      leftTail = currentNode\n      currentNode = currentNode.r\n      leftTail.r = null\n    } else {\n      if (rightTail != null) {\n        rightTail.l = currentNode\n        currentNode.p = rightTail\n      } else {\n        right = currentNode\n      }\n      rightTail = currentNode\n      currentNode = currentNode.l\n      rightTail.l = null\n    }\n  }\n  return [left, right]\n}\n\nfunction merge<V> (left: Nullable<Node<V>>, right: Nullable<Node<V>>): Nullable<Node<V>> {\n  if (left == null) return right\n  if (right == null) return left\n\n  let currentNode: Nullable<Node<V>> = left\n  while (currentNode.r !== null) {\n    currentNode = currentNode.r\n  }\n\n  currentNode.r = right\n  right.p = currentNode\n\n  return left\n}\n\nexport function removeDocument<V> (root: Node<V[]>, id: V, key: number): void {\n  const node = getNodeByKey(root, key)\n\n  if (node == null) return\n\n  if (node.v.length === 1 && node.v[0] === id) {\n    remove(root, key)\n  } else {\n    const index = node.v.indexOf(id)\n    if (index !== -1) {\n      node.v.splice(index, 1)\n    }\n  }\n}\n\nfunction getNodeByKey<V> (root: Nullable<Node<V>>, key: number): Nullable<Node<V>> {\n  let currentNode: Nullable<Node<V>> = root\n\n  while (currentNode !== null) {\n    if (currentNode.k === key) {\n      return currentNode\n    }\n    currentNode = (currentNode.k < key) ? currentNode.r : currentNode.l\n  }\n\n  return null\n}\n"],"names":["randomRank","r","Math","random","floor","log","create","key","value","v","k","n","l","p","insert","root","newNode","currentNode","parent","remove","left","mid","split","right","newRoot","merge","find","contains","rangeSearch","min","max","results","stack","length","push","pop","greaterThan","lessThan","getSize","count","leftTail","rightTail","removeDocument","id","node","getNodeByKey","index","indexOf","splice"],"mappings":"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"}