{
  "version": 3,
  "sources": ["../../.pnpm/@orama+orama@1.0.3/node_modules/@orama/orama/src/components/tokenizer/languages.ts", "../../.pnpm/@orama+orama@1.0.3/node_modules/@orama/orama/src/utils.ts", "../../.pnpm/@orama+orama@1.0.3/node_modules/@orama/orama/src/errors.ts", "../../.pnpm/@orama+orama@1.0.3/node_modules/@orama/orama/src/components/defaults.ts", "../../.pnpm/@orama+orama@1.0.3/node_modules/@orama/orama/src/components/documents-store.ts", "../../.pnpm/@orama+orama@1.0.3/node_modules/@orama/orama/src/components/hooks.ts", "../../.pnpm/@orama+orama@1.0.3/node_modules/@orama/orama/src/components/index.ts", "../../.pnpm/@orama+orama@1.0.3/node_modules/@orama/orama/src/trees/avl.ts", "../../.pnpm/@orama+orama@1.0.3/node_modules/@orama/orama/src/trees/radix.ts", "../../.pnpm/@orama+orama@1.0.3/node_modules/@orama/orama/src/components/levenshtein.ts", "../../.pnpm/@orama+orama@1.0.3/node_modules/@orama/orama/src/components/algorithms.ts", "../../.pnpm/@orama+orama@1.0.3/node_modules/@orama/orama/src/components/tokenizer/index.ts", "../../.pnpm/@orama+orama@1.0.3/node_modules/@orama/orama/src/components/tokenizer/diacritics.ts", "../../.pnpm/@orama+orama@1.0.3/node_modules/@orama/orama/src/components/tokenizer/stop-words/en.ts", "../../.pnpm/@orama+orama@1.0.3/node_modules/@orama/orama/src/components/tokenizer/stop-words/it.ts", "../../.pnpm/@orama+orama@1.0.3/node_modules/@orama/orama/src/components/tokenizer/stop-words/fr.ts", "../../.pnpm/@orama+orama@1.0.3/node_modules/@orama/orama/src/components/tokenizer/stop-words/es.ts", "../../.pnpm/@orama+orama@1.0.3/node_modules/@orama/orama/src/components/tokenizer/stop-words/pt.ts", "../../.pnpm/@orama+orama@1.0.3/node_modules/@orama/orama/src/components/tokenizer/stop-words/nl.ts", "../../.pnpm/@orama+orama@1.0.3/node_modules/@orama/orama/src/components/tokenizer/stop-words/se.ts", "../../.pnpm/@orama+orama@1.0.3/node_modules/@orama/orama/src/components/tokenizer/stop-words/ru.ts", "../../.pnpm/@orama+orama@1.0.3/node_modules/@orama/orama/src/components/tokenizer/stop-words/no.ts", "../../.pnpm/@orama+orama@1.0.3/node_modules/@orama/orama/src/components/tokenizer/stop-words/de.ts", "../../.pnpm/@orama+orama@1.0.3/node_modules/@orama/orama/src/components/tokenizer/stop-words/dk.ts", "../../.pnpm/@orama+orama@1.0.3/node_modules/@orama/orama/src/components/tokenizer/stop-words/fi.ts", "../../.pnpm/@orama+orama@1.0.3/node_modules/@orama/orama/src/components/tokenizer/stop-words/index.ts", "../../.pnpm/@orama+orama@1.0.3/node_modules/@orama/orama/src/components/tokenizer/english-stemmer.ts", "../../.pnpm/@orama+orama@1.0.3/node_modules/@orama/orama/src/components/sorter.ts", "../../.pnpm/@orama+orama@1.0.3/node_modules/@orama/orama/src/methods/create.ts", "../../.pnpm/@orama+orama@1.0.3/node_modules/@orama/orama/src/methods/docs.ts", "../../.pnpm/@orama+orama@1.0.3/node_modules/@orama/orama/src/components.ts", "../../.pnpm/@orama+orama@1.0.3/node_modules/@orama/orama/src/types.ts", "../../.pnpm/@orama+orama@1.0.3/node_modules/@orama/orama/src/components/sync-blocking-checker.ts", "../../.pnpm/@orama+orama@1.0.3/node_modules/@orama/orama/src/methods/insert.ts", "../../.pnpm/@orama+orama@1.0.3/node_modules/@orama/orama/src/methods/remove.ts", "../../.pnpm/@orama+orama@1.0.3/node_modules/@orama/orama/src/components/facets.ts", "../../.pnpm/@orama+orama@1.0.3/node_modules/@orama/orama/src/components/filters.ts", "../../.pnpm/@orama+orama@1.0.3/node_modules/@orama/orama/src/components/groups.ts", "../../.pnpm/@orama+orama@1.0.3/node_modules/@orama/orama/src/methods/search.ts", "../../.pnpm/@orama+orama@1.0.3/node_modules/@orama/orama/src/methods/serialization.ts", "../../.pnpm/@orama+orama@1.0.3/node_modules/@orama/orama/src/methods/update.ts", "../../.pnpm/@orama+orama@1.0.3/node_modules/@orama/orama/src/internals.ts"],
  "sourcesContent": ["export const STEMMERS: Record<string, string> = {\n  arabic: 'ar',\n  armenian: 'am',\n  bulgarian: 'bg',\n  danish: 'dk',\n  dutch: 'nl',\n  english: 'en',\n  finnish: 'fi',\n  french: 'fr',\n  german: 'de',\n  greek: 'gr',\n  hungarian: 'hu',\n  indian: 'in',\n  indonesian: 'id',\n  irish: 'ie',\n  italian: 'it',\n  lithuanian: 'lt',\n  nepali: 'np',\n  norwegian: 'no',\n  portuguese: 'pt',\n  romanian: 'ro',\n  russian: 'ru',\n  serbian: 'rs',\n  slovenian: 'ru',\n  spanish: 'es',\n  swedish: 'se',\n  turkish: 'tr',\n  ukrainian: 'uk',\n}\n\nexport const SPLITTERS: Record<Language, RegExp> = {\n  dutch: /[^A-Za-zàèéìòóù0-9_'-]+/gim,\n  english: /[^A-Za-zàèéìòóù0-9_'-]+/gim,\n  french: /[^a-z0-9äâàéèëêïîöôùüûœç-]+/gim,\n  italian: /[^A-Za-zàèéìòóù0-9_'-]+/gim,\n  norwegian: /[^a-z0-9_æøåÆØÅäÄöÖüÜ]+/gim,\n  portuguese: /[^a-z0-9à-úÀ-Ú]/gim,\n  russian: /[^a-z0-9а-яА-ЯёЁ]+/gim,\n  spanish: /[^a-z0-9A-Zá-úÁ-ÚñÑüÜ]+/gim,\n  swedish: /[^a-z0-9_åÅäÄöÖüÜ-]+/gim,\n  german: /[^a-z0-9A-ZäöüÄÖÜß]+/gim,\n  finnish: /[^a-z0-9äöÄÖ]+/gim,\n  danish: /[^a-z0-9æøåÆØÅ]+/gim,\n  hungarian: /[^a-z0-9áéíóöőúüűÁÉÍÓÖŐÚÜŰ]+/gim,\n  romanian: /[^a-z0-9ăâîșțĂÂÎȘȚ]+/gim,\n  serbian: /[^a-z0-9čćžšđČĆŽŠĐ]+/gim,\n  turkish: /[^a-z0-9çÇğĞıİöÖşŞüÜ]+/gim,\n  lithuanian: /[^a-z0-9ąčęėįšųūžĄČĘĖĮŠŲŪŽ]+/gim,\n  arabic: /[^a-z0-9أ-ي]+/gim,\n  nepali: /[^a-z0-9अ-ह]+/gim,\n  irish: /[^a-z0-9áéíóúÁÉÍÓÚ]+/gim,\n  indian: /[^a-z0-9अ-ह]+/gim,\n  armenian: /[^a-z0-9ա-ֆ]+/gim,\n  greek: /[^a-z0-9α-ωά-ώ]+/gim,\n  indonesian: /[^a-z0-9]+/gim,\n  ukrainian: /[^a-z0-9а-яА-ЯіїєІЇЄ]+/gim,\n  slovenian: /[^a-z0-9čžšČŽŠ]+/gim,\n  bulgarian: /[^a-z0-9а-яА-Я]+/gim,\n}\n\nexport const SUPPORTED_LANGUAGES = Object.keys(STEMMERS)\n\nexport type Language = typeof SUPPORTED_LANGUAGES[number]\n", "import type { Document, SearchableValue, TokenScore } from './types.js'\n\nconst baseId = Date.now().toString().slice(5)\nlet lastId = 0\n\nconst k = 1024\nconst nano = BigInt(1e3)\nconst milli = BigInt(1e6)\nconst second = BigInt(1e9)\n\nexport const isServer = typeof window === 'undefined'\n\nexport function sprintf(template: string, ...args: (string | number)[]): string {\n  return template.replace(\n    /%(?:(?<position>\\d+)\\$)?(?<width>-?\\d*\\.?\\d*)(?<type>[dfs])/g,\n    function (...replaceArgs: Array<string | number | Record<string, string>>): string {\n      const groups = replaceArgs[replaceArgs.length - 1] as Record<string, string>\n      const { width: rawWidth, type, position } = groups\n\n      const replacement = position ? args[Number.parseInt(position) - 1]! : args.shift()!\n      const width = rawWidth === '' ? 0 : Number.parseInt(rawWidth)\n\n      switch (type) {\n        case 'd':\n          return replacement.toString().padStart(width, '0')\n        case 'f': {\n          let value = replacement\n          const [padding, precision] = rawWidth.split('.').map(w => Number.parseFloat(w))\n\n          if (typeof precision === 'number' && precision >= 0) {\n            value = (value as number).toFixed(precision)\n          }\n\n          return typeof padding === 'number' && padding >= 0 ? value.toString().padStart(width, '0') : value.toString()\n        }\n        case 's':\n          return width < 0\n            ? (replacement as string).toString().padEnd(-width, ' ')\n            : (replacement as string).toString().padStart(width, ' ')\n\n        default:\n          return replacement as string\n      }\n    },\n  )\n}\n\nexport async function formatBytes(bytes: number, decimals = 2): Promise<string> {\n  if (bytes === 0) {\n    return '0 Bytes'\n  }\n  const dm = decimals < 0 ? 0 : decimals\n  const sizes = ['Bytes', 'KB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB']\n  const i = Math.floor(Math.log(bytes) / Math.log(k))\n  return `${parseFloat((bytes / Math.pow(k, i)).toFixed(dm))} ${sizes[i]}`\n}\n\nexport async function formatNanoseconds(value: number | bigint): Promise<string> {\n  if (typeof value === 'number') {\n    value = BigInt(value)\n  }\n\n  if (value < nano) {\n    return `${value}ns`\n  } else if (value < milli) {\n    return `${value / nano}μs`\n  } else if (value < second) {\n    return `${value / milli}ms`\n  }\n\n  return `${value / second}s`\n}\n\nexport async function getNanosecondsTime(): Promise<bigint> {\n  if (typeof process !== 'undefined' && process.hrtime !== undefined) {\n    return process.hrtime.bigint()\n  }\n\n  if (typeof performance !== 'undefined') {\n    return BigInt(Math.floor(performance.now() * 1e6))\n  }\n\n  // @todo: fallback to V8 native method to get microtime\n  return BigInt(0)\n}\n\nexport async function uniqueId(): Promise<string> {\n  return `${baseId}-${lastId++}`\n}\n\n// This is only used internally, keep in sync with the previous one\nexport function syncUniqueId(): string {\n  return `${baseId}-${lastId++}`\n}\n\nexport function getOwnProperty<T = unknown>(object: Record<string, T>, property: string): T | undefined {\n  // Checks if `hasOwn` method is defined avoiding errors with older Node.js versions\n  if (Object.hasOwn === undefined) {\n    return Object.prototype.hasOwnProperty.call(object, property) ? object[property] : undefined\n  }\n\n  return Object.hasOwn(object, property) ? object[property] : undefined\n}\n\nexport function getTokenFrequency(token: string, tokens: string[]): number {\n  let count = 0\n\n  for (const t of tokens) {\n    if (t === token) {\n      count++\n    }\n  }\n\n  return count\n}\n\nexport function insertSortedValue(\n  arr: TokenScore[],\n  el: TokenScore,\n  compareFn = sortTokenScorePredicate,\n): TokenScore[] {\n  let low = 0\n  let high = arr.length\n  let mid\n\n  while (low < high) {\n    mid = (low + high) >>> 1\n    if (compareFn(el, arr[mid]) < 0) {\n      high = mid\n    } else {\n      low = mid + 1\n    }\n  }\n\n  arr.splice(low, 0, el)\n\n  return arr\n}\n\nexport function sortTokenScorePredicate(a: TokenScore, b: TokenScore): number {\n  if (b[1] === a[1]) {\n    return a[0].localeCompare(b[0])\n  }\n\n  return b[1] - a[1]\n}\n\n// Intersection function taken from https://github.com/lovasoa/fast_array_intersect.\n// MIT Licensed at the time of writing.\nexport function intersect<T>(arrays: ReadonlyArray<T>[]): T[] {\n  if (arrays.length === 0) {\n    return []\n  } else if (arrays.length === 1) {\n    return arrays[0] as T[]\n  }\n\n  for (let i = 1; i < arrays.length; i++) {\n    if (arrays[i].length < arrays[0].length) {\n      const tmp = arrays[0]\n      arrays[0] = arrays[i]\n      arrays[i] = tmp\n    }\n  }\n\n  const set = new Map()\n  for (const elem of arrays[0]) {\n    set.set(elem, 1)\n  }\n  for (let i = 1; i < arrays.length; i++) {\n    let found = 0\n    for (const elem of arrays[i]) {\n      const count = set.get(elem)\n      if (count === i) {\n        set.set(elem, count + 1)\n        found++\n      }\n    }\n    if (found === 0) return []\n  }\n\n  return arrays[0].filter(e => {\n    const count = set.get(e)\n    if (count !== undefined) set.set(e, 0)\n    return count === arrays.length\n  })\n}\n\nexport async function getDocumentProperties(doc: Document, paths: string[]): Promise<Record<string, SearchableValue>> {\n  const properties: Record<string, SearchableValue> = {}\n\n  const pathsLength = paths.length\n  for (let i = 0; i < pathsLength; i++) {\n    const path = paths[i]\n    const pathTokens = path.split('.')\n\n    let current: SearchableValue | Document | undefined = doc\n    const pathTokensLength = pathTokens.length\n    for (let j = 0; j < pathTokensLength; j++) {\n      current = (current as Document)[pathTokens[j]!] as Document | SearchableValue\n\n      // We found an object but we were supposed to be done\n      if (typeof current === 'object' && !Array.isArray(current) && current !== null && j === pathTokensLength - 1) {\n        current = undefined\n        break\n      } else if ((current === null || typeof current !== 'object') && j < pathTokensLength - 1) {\n        // We can't recurse anymore but we were supposed to\n        current = undefined\n        break\n      }\n    }\n\n    if (typeof current !== 'undefined') {\n      properties[path] = current as SearchableValue\n    }\n  }\n\n  return properties\n}\n\nexport async function getNested<T = SearchableValue>(obj: object, path: string): Promise<T | undefined> {\n  const props = await getDocumentProperties(obj as Document, [path])\n\n  return props[path] as T | undefined\n}\n\nexport function flattenObject(obj: object, prefix = ''): Document {\n  const result: Document = {}\n\n  for (const key in obj) {\n    const prop = `${prefix}${key}`\n    const objKey = (obj as Document)[key]\n\n    if (typeof objKey === 'object' && objKey !== null) {\n      Object.assign(result, flattenObject(objKey, `${prop}.`))\n    } else {\n      result[prop] = objKey\n    }\n  }\n  return result\n}\n", "import { SUPPORTED_LANGUAGES } from './components/tokenizer/languages.js'\nimport { sprintf } from './utils.js'\n\nconst allLanguages = SUPPORTED_LANGUAGES.join('\\n - ')\n\nconst errors = {\n  NO_LANGUAGE_WITH_CUSTOM_TOKENIZER: 'Do not pass the language option to create when using a custom tokenizer.',\n  LANGUAGE_NOT_SUPPORTED: `Language \"%s\" is not supported.\\nSupported languages are:\\n - ${allLanguages}`,\n  INVALID_STEMMER_FUNCTION_TYPE: `config.stemmer property must be a function.`,\n  MISSING_STEMMER: `As of version 1.0.0 @orama/orama does not ship non English stemmers by default. To solve this, please explicitly import and specify the \"%s\" stemmer from the package @orama/stemmers. See https://docs.oramasearch.com/text-analysis/stemming for more information.`,\n  CUSTOM_STOP_WORDS_MUST_BE_FUNCTION_OR_ARRAY: 'Custom stop words array must only contain strings.',\n  UNSUPPORTED_COMPONENT: `Unsupported component \"%s\".`,\n  COMPONENT_MUST_BE_FUNCTION: `The component \"%s\" must be a function.`,\n  COMPONENT_MUST_BE_FUNCTION_OR_ARRAY_FUNCTIONS: `The component \"%s\" must be a function or an array of functions.`,\n  INVALID_SCHEMA_TYPE: `Unsupported schema type \"%s\" at \"%s\". Expected \"string\", \"boolean\" or \"number\" or array of them.`,\n  DOCUMENT_ID_MUST_BE_STRING: `Document id must be of type \"string\". Got \"%s\" instead.`,\n  DOCUMENT_ALREADY_EXISTS: `A document with id \"%s\" already exists.`,\n  DOCUMENT_DOES_NOT_EXIST: `A document with id \"%s\" does not exists.`,\n  MISSING_DOCUMENT_PROPERTY: `Missing searchable property \"%s\".`,\n  INVALID_DOCUMENT_PROPERTY: `Invalid document property \"%s\": expected \"%s\", got \"%s\"`,\n  UNKNOWN_INDEX: `Invalid property name \"%s\". Expected a wildcard string (\"*\") or array containing one of the following properties: %s`,\n  INVALID_BOOST_VALUE: `Boost value must be a number greater than, or less than 0.`,\n  INVALID_FILTER_OPERATION: `You can only use one operation per filter, you requested %d.`,\n  SCHEMA_VALIDATION_FAILURE: `Cannot insert document due schema validation failure on \"%s\" property.`,\n  INVALID_SORT_SCHEMA_TYPE: `Unsupported sort schema type \"%s\" at \"%s\". Expected \"string\" or \"number\".`,\n  CANNOT_SORT_BY_ARRAY: `Cannot configure sort for \"%s\" because it is an array (%s).`,\n  UNABLE_TO_SORT_ON_UNKNOWN_FIELD: `Unable to sort on unknown field \"%s\". Allowed fields: %s`,\n  SORT_DISABLED: `Sort is disabled. Please read the documentation at https://docs.oramasearch for more information.`,\n  UNKNOWN_GROUP_BY_PROPERTY: `Unknown groupBy property \"%s\".`,\n  INVALID_GROUP_BY_PROPERTY: `Invalid groupBy property \"%s\". Allowed types: \"%s\", but given \"%s\".`,\n}\n\nexport type ErrorCode = keyof typeof errors\n\nexport interface OramaError extends Error {\n  code: string\n}\n\nexport function createError(code: ErrorCode, ...args: Array<string | number>): OramaError {\n  const error = new Error(sprintf(errors[code] ?? `Unsupported Orama Error code: ${code}`, ...args)) as OramaError\n  error.code = code\n  if ('captureStackTrace' in Error.prototype) {\n    Error.captureStackTrace(error)\n  }\n\n  return error\n}\n", "import { createError } from '../errors.js'\nimport { ArraySearchableType, Document, ElapsedTime, ScalarSearchableType, Schema, SearchableType } from '../types.js'\nimport { uniqueId, formatNanoseconds } from '../utils.js'\n\nexport { getDocumentProperties } from '../utils.js'\n\nexport async function formatElapsedTime(n: bigint): Promise<ElapsedTime> {\n  return {\n    raw: Number(n),\n    formatted: await formatNanoseconds(n),\n  }\n}\n\nexport async function getDocumentIndexId(doc: Document): Promise<string> {\n  if (doc.id) {\n    if (typeof doc.id !== 'string') {\n      throw createError('DOCUMENT_ID_MUST_BE_STRING', typeof doc.id)\n    }\n\n    return doc.id\n  }\n\n  return await uniqueId()\n}\n\nexport async function validateSchema<S extends Schema = Schema>(doc: Document, schema: S): Promise<string | undefined> {\n  for (const [prop, type] of Object.entries(schema)) {\n    const value = doc[prop]\n    const typeOfValue = typeof value\n\n    if (typeOfValue === 'undefined') {\n      continue\n    }\n\n    const typeOfType = typeof type\n\n    if (typeOfType === 'string' && isArrayType(type as SearchableType)) {\n      if (!Array.isArray(value)) {\n        return prop\n      }\n      const expectedType = getInnerType(type as ArraySearchableType)\n\n      const valueLength = value.length\n      for (let i = 0; i < valueLength; i++) {\n        if (typeof value[i] !== expectedType) {\n          return prop + '.' + i\n        }\n      }\n\n      continue\n    }\n\n    if (typeOfType === 'object') {\n      if (!value || typeOfValue !== 'object') {\n        return prop\n      }\n\n      const subProp = await validateSchema(value as Document, type as Schema)\n      if (subProp) {\n        return prop + '.' + subProp\n      }\n      continue\n    }\n\n    if (typeOfValue !== type) {\n      return prop\n    }\n  }\n\n  return undefined\n}\n\nconst IS_ARRAY_TYPE: Record<SearchableType, boolean> = {\n  string: false,\n  number: false,\n  boolean: false,\n  'string[]': true,\n  'number[]': true,\n  'boolean[]': true,\n}\nconst INNER_TYPE: Record<ArraySearchableType, ScalarSearchableType> = {\n  'string[]': 'string',\n  'number[]': 'number',\n  'boolean[]': 'boolean',\n}\nexport function isArrayType(type: SearchableType) {\n  return IS_ARRAY_TYPE[type]\n}\nexport function getInnerType(type: ArraySearchableType): ScalarSearchableType {\n  return INNER_TYPE[type]\n}\n", "import { Document, IDocumentsStore, OpaqueDocumentStore } from '../types.js'\n\nexport interface DocumentsStore extends OpaqueDocumentStore {\n  docs: Record<string, Document | undefined>\n  count: number\n}\n\nexport type DefaultDocumentsStore = IDocumentsStore<DocumentsStore>\n\nexport async function create(): Promise<DocumentsStore> {\n  return {\n    docs: {},\n    count: 0,\n  }\n}\n\nexport async function get(store: DocumentsStore, id: string): Promise<Document | undefined> {\n  return store.docs[id]\n}\n\nexport async function getMultiple(store: DocumentsStore, ids: string[]): Promise<(Document | undefined)[]> {\n  const found: (Document | undefined)[] = Array.from({ length: ids.length })\n\n  for (let i = 0; i < ids.length; i++) {\n    found[i] = store.docs[ids[i]]\n  }\n\n  return found\n}\n\nexport async function getAll(store: DocumentsStore): Promise<Record<string, Document>> {\n  return store.docs as Record<string, Document>\n}\n\nexport async function store(store: DocumentsStore, id: string, doc: Document): Promise<boolean> {\n  if (typeof store.docs[id] !== 'undefined') {\n    return false\n  }\n\n  store.docs[id] = doc\n  store.count++\n\n  return true\n}\n\nexport async function remove(store: DocumentsStore, id: string): Promise<boolean> {\n  if (typeof store.docs[id] === 'undefined') {\n    return false\n  }\n\n  delete store.docs[id]\n  store.count--\n\n  return true\n}\n\nexport async function count(store: DocumentsStore): Promise<number> {\n  return store.count\n}\n\nexport async function load<R = unknown>(raw: R): Promise<DocumentsStore> {\n  const rawDocument = raw as DocumentsStore\n\n  return {\n    docs: rawDocument.docs,\n    count: rawDocument.count,\n  }\n}\n\nexport async function save<R = unknown>(store: DocumentsStore): Promise<R> {\n  return {\n    docs: store.docs,\n    count: store.count,\n  } as R\n}\n\nexport async function createDocumentsStore(): Promise<DefaultDocumentsStore> {\n  return {\n    create,\n    get,\n    getMultiple,\n    getAll,\n    store,\n    remove,\n    count,\n    load,\n    save,\n  }\n}\n", "import { Document, MultipleCallbackComponent, Orama, ProvidedTypes, SingleCallbackComponent } from '../types.js'\n\nexport const OBJECT_COMPONENTS = ['tokenizer', 'index', 'documentsStore', 'sorter']\n\nexport const FUNCTION_COMPONENTS = [\n  'validateSchema',\n  'getDocumentIndexId',\n  'getDocumentProperties',\n  'formatElapsedTime',\n]\n\nexport const SINGLE_OR_ARRAY_COMPONENTS = [\n  'beforeInsert',\n  'afterInsert',\n  'beforeRemove',\n  'afterRemove',\n  'beforeUpdate',\n  'afterUpdate',\n  'beforeMultipleInsert',\n  'afterMultipleInsert',\n  'beforeMultipleRemove',\n  'afterMultipleRemove',\n  'beforeMultipleUpdate',\n  'afterMultipleUpdate',\n]\n\nexport async function runSingleHook<P extends ProvidedTypes>(\n  hooks: SingleCallbackComponent<P>[],\n  orama: Orama<P>,\n  id: string,\n  doc?: Document,\n): Promise<void> {\n  for (let i = 0; i < hooks.length; i++) {\n    await hooks[i](orama, id, doc)\n  }\n}\n\nexport async function runMultipleHook<P extends ProvidedTypes>(\n  hooks: MultipleCallbackComponent<P>[],\n  orama: Orama<P>,\n  docsOrIds: Document[] | string[],\n): Promise<void> {\n  for (let i = 0; i < hooks.length; i++) {\n    await hooks[i](orama, docsOrIds)\n  }\n}\n", "import { createError } from '../errors.js'\nimport {\n  create as avlCreate,\n  find as avlFind,\n  greaterThan as avlGreaterThan,\n  insert as avlInsert,\n  lessThan as avlLessThan,\n  Node as AVLNode,\n  rangeSearch as avlRangeSearch,\n  removeDocument as avlRemoveDocument,\n} from '../trees/avl.js'\nimport {\n  create as radixCreate,\n  find as radixFind,\n  insert as radixInsert,\n  Node as RadixNode,\n  removeDocumentByWord as radixRemoveDocument,\n} from '../trees/radix.js'\nimport {\n  ArraySearchableType,\n  BM25Params,\n  ComparisonOperator,\n  IIndex,\n  OpaqueDocumentStore,\n  OpaqueIndex,\n  Orama,\n  ScalarSearchableType,\n  Schema,\n  SearchableType,\n  SearchableValue,\n  SearchContext,\n  Tokenizer,\n  TokenScore,\n} from '../types.js'\nimport { intersect } from '../utils.js'\nimport { BM25 } from './algorithms.js'\nimport { getInnerType, isArrayType } from './defaults.js'\n\nexport type FrequencyMap = {\n  [property: string]: {\n    [documentID: string]:\n      | {\n          [token: string]: number\n        }\n      | undefined\n  }\n}\n\nexport type BooleanIndex = {\n  true: string[]\n  false: string[]\n}\n\nexport interface Index extends OpaqueIndex {\n  indexes: Record<string, RadixNode | AVLNode<number, string[]> | BooleanIndex>\n  searchableProperties: string[]\n  searchablePropertiesWithTypes: Record<string, SearchableType>\n  frequencies: FrequencyMap\n  tokenOccurrencies: Record<string, Record<string, number>>\n  avgFieldLength: Record<string, number>\n  fieldLengths: Record<string, Record<string, number | undefined>>\n}\n\nexport type DefaultIndex = IIndex<Index>\n\nexport async function insertDocumentScoreParameters(\n  index: Index,\n  prop: string,\n  id: string,\n  tokens: string[],\n  docsCount: number,\n): Promise<void> {\n  index.avgFieldLength[prop] = ((index.avgFieldLength[prop] ?? 0) * (docsCount - 1) + tokens.length) / docsCount\n  index.fieldLengths[prop][id] = tokens.length\n  index.frequencies[prop][id] = {}\n}\n\nexport async function insertTokenScoreParameters(\n  index: Index,\n  prop: string,\n  id: string,\n  tokens: string[],\n  token: string,\n): Promise<void> {\n  let tokenFrequency = 0\n\n  for (const t of tokens) {\n    if (t === token) {\n      tokenFrequency++\n    }\n  }\n\n  const tf = tokenFrequency / tokens.length\n\n  index.frequencies[prop][id]![token] = tf\n\n  if (!(token in index.tokenOccurrencies[prop])) {\n    index.tokenOccurrencies[prop][token] = 0\n  }\n\n  // increase a token counter that may not yet exist\n  index.tokenOccurrencies[prop][token] = (index.tokenOccurrencies[prop][token] ?? 0) + 1\n}\n\nexport async function removeDocumentScoreParameters(\n  index: Index,\n  prop: string,\n  id: string,\n  docsCount: number,\n): Promise<void> {\n  index.avgFieldLength[prop] =\n    (index.avgFieldLength[prop] * docsCount - index.fieldLengths[prop][id]!) / (docsCount - 1)\n  index.fieldLengths[prop][id] = undefined\n  index.frequencies[prop][id] = undefined\n}\n\nexport async function removeTokenScoreParameters(index: Index, prop: string, token: string): Promise<void> {\n  index.tokenOccurrencies[prop][token]--\n}\n\nexport async function calculateResultScores<I extends OpaqueIndex, D extends OpaqueDocumentStore, AggValue>(\n  context: SearchContext<I, D, AggValue>,\n  index: Index,\n  prop: string,\n  term: string,\n  ids: string[],\n): Promise<TokenScore[]> {\n  const documentIDs = Array.from(ids)\n\n  // Exact fields for TF-IDF\n  const avgFieldLength = index.avgFieldLength[prop]\n  const fieldLengths = index.fieldLengths[prop]\n  const oramaOccurrencies = index.tokenOccurrencies[prop]\n  const oramaFrequencies = index.frequencies[prop]\n\n  // oramaOccurrencies[term] can be undefined, 0, string, or { [k: string]: number }\n  const termOccurrencies = typeof oramaOccurrencies[term] === 'number' ? oramaOccurrencies[term] ?? 0 : 0\n\n  const scoreList: TokenScore[] = []\n\n  // Calculate TF-IDF value for each term, in each document, for each index.\n  const documentIDsLength = documentIDs.length\n  for (let k = 0; k < documentIDsLength; k++) {\n    const id = documentIDs[k]\n    const tf = oramaFrequencies?.[id]?.[term] ?? 0\n\n    const bm25 = BM25(\n      tf,\n      termOccurrencies,\n      context.docsCount,\n      fieldLengths[id]!,\n      avgFieldLength,\n      context.params.relevance! as Required<BM25Params>,\n    )\n\n    scoreList.push([id, bm25])\n  }\n  return scoreList\n}\n\nexport async function create(\n  orama: Orama<{ Index: DefaultIndex }>,\n  schema: Schema,\n  index?: Index,\n  prefix = '',\n): Promise<Index> {\n  if (!index) {\n    index = {\n      indexes: {},\n      searchableProperties: [],\n      searchablePropertiesWithTypes: {},\n      frequencies: {},\n      tokenOccurrencies: {},\n      avgFieldLength: {},\n      fieldLengths: {},\n    }\n  }\n\n  for (const [prop, type] of Object.entries(schema)) {\n    const typeActualType = typeof type\n    const path = `${prefix}${prefix ? '.' : ''}${prop}`\n\n    if (typeActualType === 'object' && !Array.isArray(type)) {\n      // Nested\n      create(orama, type as Schema, index, path)\n      continue\n    }\n\n    switch (type) {\n      case 'boolean':\n      case 'boolean[]':\n        index.indexes[path] = { true: [], false: [] }\n        break\n      case 'number':\n      case 'number[]':\n        index.indexes[path] = avlCreate<number, string[]>(0, [])\n        break\n      case 'string':\n      case 'string[]':\n        index.indexes[path] = radixCreate()\n        index.avgFieldLength[path] = 0\n        index.frequencies[path] = {}\n        index.tokenOccurrencies[path] = {}\n        index.fieldLengths[path] = {}\n        break\n      default:\n        throw createError('INVALID_SCHEMA_TYPE', Array.isArray(type) ? 'array' : (type as unknown as string), path)\n    }\n\n    index.searchableProperties.push(path)\n    index.searchablePropertiesWithTypes[path] = type\n  }\n\n  return index\n}\n\nasync function insertScalar(\n  implementation: IIndex<Index>,\n  index: Index,\n  prop: string,\n  id: string,\n  value: SearchableValue,\n  schemaType: ScalarSearchableType,\n  language: string | undefined,\n  tokenizer: Tokenizer,\n  docsCount: number,\n): Promise<void> {\n  switch (schemaType) {\n    case 'boolean': {\n      const booleanIndex = index.indexes[prop] as BooleanIndex\n      booleanIndex[value ? 'true' : 'false'].push(id)\n      break\n    }\n    case 'number':\n      avlInsert(index.indexes[prop] as AVLNode<number, string[]>, value as number, [id])\n      break\n    case 'string': {\n      const tokens = await tokenizer.tokenize(value as string, language, prop)\n      await implementation.insertDocumentScoreParameters(index, prop, id, tokens, docsCount)\n\n      for (const token of tokens) {\n        await implementation.insertTokenScoreParameters(index, prop, id, tokens, token)\n\n        radixInsert(index.indexes[prop] as RadixNode, token, id)\n      }\n\n      break\n    }\n  }\n}\n\nexport async function insert(\n  implementation: DefaultIndex,\n  index: Index,\n  prop: string,\n  id: string,\n  value: SearchableValue,\n  schemaType: SearchableType,\n  language: string | undefined,\n  tokenizer: Tokenizer,\n  docsCount: number,\n): Promise<void> {\n  if (!isArrayType(schemaType)) {\n    return insertScalar(\n      implementation,\n      index,\n      prop,\n      id,\n      value,\n      schemaType as ScalarSearchableType,\n      language,\n      tokenizer,\n      docsCount,\n    )\n  }\n\n  const innerSchemaType = getInnerType(schemaType as ArraySearchableType)\n\n  const elements = value as Array<string | number | boolean>\n  const elementsLength = elements.length\n  for (let i = 0; i < elementsLength; i++) {\n    await insertScalar(implementation, index, prop, id, elements[i], innerSchemaType, language, tokenizer, docsCount)\n  }\n}\n\nasync function removeScalar(\n  implementation: IIndex<Index>,\n  index: Index,\n  prop: string,\n  id: string,\n  value: SearchableValue,\n  schemaType: ScalarSearchableType,\n  language: string | undefined,\n  tokenizer: Tokenizer,\n  docsCount: number,\n): Promise<boolean> {\n  switch (schemaType) {\n    case 'number': {\n      avlRemoveDocument(index.indexes[prop] as AVLNode<number, string[]>, id, value)\n      return true\n    }\n    case 'boolean': {\n      const booleanKey = value ? 'true' : 'false'\n      const position = (index.indexes[prop] as BooleanIndex)[booleanKey].indexOf(id)\n\n      ;(index.indexes[prop] as BooleanIndex)[value ? 'true' : 'false'].splice(position, 1)\n      return true\n    }\n    case 'string': {\n      const tokens = await tokenizer.tokenize(value as string, language, prop)\n\n      await implementation.removeDocumentScoreParameters(index, prop, id, docsCount)\n\n      for (const token of tokens) {\n        await implementation.removeTokenScoreParameters(index, prop, token)\n        radixRemoveDocument(index.indexes[prop] as RadixNode, token, id)\n      }\n\n      return true\n    }\n  }\n}\n\nexport async function remove(\n  implementation: DefaultIndex,\n  index: Index,\n  prop: string,\n  id: string,\n  value: SearchableValue,\n  schemaType: SearchableType,\n  language: string | undefined,\n  tokenizer: Tokenizer,\n  docsCount: number,\n): Promise<boolean> {\n  if (!isArrayType(schemaType)) {\n    return removeScalar(\n      implementation,\n      index,\n      prop,\n      id,\n      value,\n      schemaType as ScalarSearchableType,\n      language,\n      tokenizer,\n      docsCount,\n    )\n  }\n\n  const innerSchemaType = getInnerType(schemaType as ArraySearchableType)\n\n  const elements = value as Array<string | number | boolean>\n  const elementsLength = elements.length\n  for (let i = 0; i < elementsLength; i++) {\n    await removeScalar(implementation, index, prop, id, elements[i], innerSchemaType, language, tokenizer, docsCount)\n  }\n\n  return true\n}\n\nexport async function search<D extends OpaqueDocumentStore, AggValue>(\n  context: SearchContext<Index, D, AggValue>,\n  index: Index,\n  prop: string,\n  term: string,\n): Promise<TokenScore[]> {\n  if (!(prop in index.tokenOccurrencies)) {\n    return []\n  }\n\n  // Performa the search\n  const rootNode = index.indexes[prop] as RadixNode\n  const { exact, tolerance } = context.params\n  const searchResult = radixFind(rootNode, { term, exact, tolerance })\n  const ids = new Set<string>()\n\n  for (const key in searchResult) {\n    for (const id of searchResult[key]) {\n      ids.add(id)\n    }\n  }\n\n  return context.index.calculateResultScores(context, index, prop, term, Array.from(ids))\n}\n\nexport async function searchByWhereClause<I extends OpaqueIndex, D extends OpaqueDocumentStore, AggValue>(\n  context: SearchContext<I, D, AggValue>,\n  index: Index,\n  filters: Record<string, boolean | ComparisonOperator>,\n): Promise<string[]> {\n  const filterKeys = Object.keys(filters)\n\n  const filtersMap: Record<string, string[]> = filterKeys.reduce(\n    (acc, key) => ({\n      [key]: [],\n      ...acc,\n    }),\n    {},\n  )\n\n  for (const param of filterKeys) {\n    const operation = filters[param]\n\n    if (typeof operation === 'boolean') {\n      const idx = index.indexes[param] as BooleanIndex\n      const filteredIDs = idx[operation.toString() as keyof BooleanIndex]\n      filtersMap[param].push(...filteredIDs)\n      continue\n    }\n\n    if (typeof operation === 'string' || Array.isArray(operation)) {\n      const idx = index.indexes[param] as RadixNode\n\n      for (const raw of [operation].flat()) {\n        const term = await context.tokenizer.tokenize(raw, context.language, param)\n        const filteredIDsResults = radixFind(idx, { term: term[0], exact: true })\n        filtersMap[param].push(...Object.values(filteredIDsResults).flat())\n      }\n\n      continue\n    }\n\n    const operationKeys = Object.keys(operation)\n\n    if (operationKeys.length > 1) {\n      throw createError('INVALID_FILTER_OPERATION', operationKeys.length)\n    }\n\n    const operationOpt = operationKeys[0] as keyof ComparisonOperator\n    const operationValue = operation[operationOpt]\n\n    const AVLNode = index.indexes[param] as AVLNode<number, string[]>\n\n    switch (operationOpt) {\n      case 'gt': {\n        const filteredIDs = avlGreaterThan(AVLNode, operationValue, false)\n        filtersMap[param].push(...filteredIDs)\n        break\n      }\n      case 'gte': {\n        const filteredIDs = avlGreaterThan(AVLNode, operationValue, true)\n        filtersMap[param].push(...filteredIDs)\n        break\n      }\n      case 'lt': {\n        const filteredIDs = avlLessThan(AVLNode, operationValue, false)\n        filtersMap[param].push(...filteredIDs)\n        break\n      }\n      case 'lte': {\n        const filteredIDs = avlLessThan(AVLNode, operationValue, true)\n        filtersMap[param].push(...filteredIDs)\n        break\n      }\n      case 'eq': {\n        const filteredIDs = avlFind(AVLNode, operationValue) ?? []\n        filtersMap[param].push(...filteredIDs)\n        break\n      }\n      case 'between': {\n        const [min, max] = operationValue as number[]\n        const filteredIDs = avlRangeSearch(AVLNode, min, max)\n        filtersMap[param].push(...filteredIDs)\n      }\n    }\n  }\n\n  // AND operation: calculate the intersection between all the IDs in filterMap\n  const result = intersect(Object.values(filtersMap)) as unknown as string[]\n\n  return result\n}\n\nexport async function getSearchableProperties(index: Index): Promise<string[]> {\n  return index.searchableProperties\n}\n\nexport async function getSearchablePropertiesWithTypes(index: Index): Promise<Record<string, SearchableType>> {\n  return index.searchablePropertiesWithTypes\n}\n\nexport async function load<R = unknown>(raw: R): Promise<Index> {\n  const {\n    indexes,\n    searchableProperties,\n    searchablePropertiesWithTypes,\n    frequencies,\n    tokenOccurrencies,\n    avgFieldLength,\n    fieldLengths,\n  } = raw as Index\n\n  return {\n    indexes,\n    searchableProperties,\n    searchablePropertiesWithTypes,\n    frequencies,\n    tokenOccurrencies,\n    avgFieldLength,\n    fieldLengths,\n  }\n}\n\nexport async function save<R = unknown>(index: Index): Promise<R> {\n  const {\n    indexes,\n    searchableProperties,\n    searchablePropertiesWithTypes,\n    frequencies,\n    tokenOccurrencies,\n    avgFieldLength,\n    fieldLengths,\n  } = index\n\n  return {\n    indexes,\n    searchableProperties,\n    searchablePropertiesWithTypes,\n    frequencies,\n    tokenOccurrencies,\n    avgFieldLength,\n    fieldLengths,\n  } as R\n}\n\nexport async function createIndex(): Promise<DefaultIndex> {\n  return {\n    create,\n    insert,\n    remove,\n    insertDocumentScoreParameters,\n    insertTokenScoreParameters,\n    removeDocumentScoreParameters,\n    removeTokenScoreParameters,\n    calculateResultScores,\n    search,\n    searchByWhereClause,\n    getSearchableProperties,\n    getSearchablePropertiesWithTypes,\n    load,\n    save,\n  }\n}\n", "export type Node<K, V> = {\n  key: K\n  value: V\n  left: Node<K, V> | null\n  right: Node<K, V> | null\n  height: number\n}\n\nconst BALANCE_STATE = {\n  UNBALANCED_RIGHT: -2,\n  SLIGHTLY_UNBALANCED_RIGHT: -1,\n  BALANCED: 0,\n  SLIGHTLY_UNBALANCED_LEFT: 1,\n  UNBALANCED_LEFT: 2,\n}\n\nfunction getHeight<K, V>(node: Node<K, V> | null): number {\n  return node ? node.height : -1\n}\n\nfunction rotateLeft<K, V>(node: Node<K, V>): Node<K, V> {\n  const right = node.right as Node<K, V>\n  node.right = right.left\n  right.left = node\n  node.height = Math.max(getHeight(node.left), getHeight(node.right)) + 1\n  right.height = Math.max(getHeight(right.left), getHeight(right.right)) + 1\n  return right\n}\n\nfunction rotateRight<K, V>(node: Node<K, V>): Node<K, V> {\n  const left = node.left as Node<K, V>\n  node.left = left.right\n  left.right = node\n  node.height = Math.max(getHeight(node.left), getHeight(node.right)) + 1\n  left.height = Math.max(getHeight(left.left), getHeight(left.right)) + 1\n  return left\n}\n\nexport function contains<K, V>(node: Node<K, V>, key: K): boolean {\n  return !!find(node, key)\n}\n\nexport function getSize<K, V>(root: Node<K, V> | null): number {\n  let size = 0;\n  const queue: Array<Node<K, V>> = [];\n\n  if (root !== null) {\n    queue.push(root);\n  }\n\n  while (queue.length > 0) {\n    const node = queue.shift() as Node<K, V>;\n    size++;\n\n    if (node.left !== null) {\n      queue.push(node.left);\n    }\n\n    if (node.right !== null) {\n      queue.push(node.right);\n    }\n  }\n\n  return size;\n}\n\nexport function isBalanced<K, V>(root: Node<K, V> | null): boolean {\n  if (root === null)\n    return true;\n\n  const stack: Node<K, V>[] = [root];\n\n  while (stack.length > 0) {\n    const node = stack.pop();\n\n    if (node === undefined)\n      return true;\n\n    const heightDiff = getHeight(node.left) - getHeight(node.right);\n\n    if (heightDiff > 1 || heightDiff < -1) {\n      return false;\n    }\n\n    if (node.right !== null) {\n      stack.push(node.right);\n    }\n\n    if (node.left !== null) {\n      stack.push(node.left);\n    }\n  }\n\n  return true;\n}\n\nexport function rangeSearch<K, V>(node: Node<K, V>, min: K, max: K): V {\n  if (!node) {\n    return [] as unknown as V\n  }\n\n  // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n  // @ts-ignore\n  const result: V[] = []\n\n  function traverse(node: Node<K, V>) {\n    if (!node) {\n      return\n    }\n\n    if (node.key > min) {\n      traverse(node.left as Node<K, V>)\n    }\n\n    if (node.key >= min && node.key <= max) {\n      result.push(...(node.value as V[]))\n    }\n\n    if (node.key < max) {\n      traverse(node.right as Node<K, V>)\n    }\n  }\n\n  traverse(node)\n\n  return result as V\n}\n\nexport function greaterThan<K, V>(node: Node<K, V>, key: K, inclusive = false): V {\n  if (!node) {\n    return [] as unknown as V\n  }\n\n  // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n  // @ts-ignore\n  const result: V[] = []\n\n  function traverse(node: Node<K, V>) {\n    if (!node) {\n      return\n    }\n\n    if (inclusive && node.key >= key) {\n      result.push(...(node.value as V[]))\n    }\n\n    if (!inclusive && node.key > key) {\n      result.push(...(node.value as V[]))\n    }\n\n    traverse(node.left as Node<K, V>)\n    traverse(node.right as Node<K, V>)\n  }\n\n  traverse(node)\n\n  return result as V\n}\n\nexport function lessThan<K, V>(node: Node<K, V>, key: K, inclusive = false): V {\n  if (!node) {\n    return [] as unknown as V\n  }\n\n  // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n  // @ts-ignore\n  const result: V[] = []\n\n  function traverse(node: Node<K, V>) {\n    if (!node) {\n      return\n    }\n\n    if (inclusive && node.key <= key) {\n      result.push(...(node.value as V[]))\n    }\n\n    if (!inclusive && node.key < key) {\n      result.push(...(node.value as V[]))\n    }\n\n    traverse(node.left as Node<K, V>)\n    traverse(node.right as Node<K, V>)\n  }\n\n  traverse(node)\n\n  return result as V\n}\n\nfunction getNodeByKey<K, V>(node: Node<K, V> | null, key: K): Node<K, V> | null {\n  while (node !== null) {\n    if (key < node.key) {\n      node = node.left;\n    } else if (key > node.key) {\n      node = node.right;\n    } else {\n      return node;\n    }\n  }\n  return null;\n}\n\nexport function create<K, V>(key: K, value: V): Node<K, V> {\n  return {\n    key,\n    value,\n    left: null,\n    right: null,\n    height: 0,\n  }\n}\n\nexport function insert<K, V>(root: Node<K, V>, key: K, value: V): Node<K, V> {\n  let parent = null;\n  let current = root;\n\n  while (current !== null) {\n    parent = current;\n    if (key < current.key) {\n        current = current.left as Node<K, V>;\n    } else if (key > current.key) {\n        current = current.right as Node<K, V>;\n    } else {\n      // assuming value is an array here\n      (current.value as string[]) = (current.value as string[]).concat(value as string);\n      return root;\n    }\n  }\n\n  const newNode = create(key, value);\n\n  if (!parent) {\n      root = newNode; // tree was empty\n  } else if (key < parent.key) {\n      parent.left = newNode;\n  } else {\n      parent.right = newNode;\n  }\n\n  current = newNode;\n\n  while (parent) {\n    const balanceFactor = getHeight(parent.left) - getHeight(parent.right)\n\n    if (balanceFactor === BALANCE_STATE.UNBALANCED_LEFT) {\n        if (key < (parent.left as Node<K, V>).key) {\n            parent = rotateRight(parent);\n        } else {\n            parent.left = rotateLeft(parent.left as Node<K, V>);\n            parent = rotateRight(parent);\n        }\n    }\n\n    if (balanceFactor === BALANCE_STATE.UNBALANCED_RIGHT) {\n        if (key > (parent.right as Node<K, V>).key) {\n            parent = rotateLeft(parent);\n        } else {\n            parent.right = rotateRight(parent.right as Node<K, V>);\n            parent = rotateLeft(parent);\n        }\n    }\n\n    if (parent == root) {\n        break;\n    }\n\n    current = parent;\n    parent = getNodeParent(root, current.key);\n  }\n\n  return root;\n}\n\nfunction getNodeParent<K, V>(root: Node<K, V>, key: K): Node<K, V> | null {\n    let current = root;\n    let parent = null;\n\n    while (current !== null) {\n        if (key < current.key) {\n            parent = current;\n            current = current.left as Node<K, V>;\n        } else if (key > current.key) {\n            parent = current;\n            current = current.right as Node<K, V>;\n        } else {\n            break;\n        }\n    }\n\n    return parent;\n}\n\nexport function find<K, V>(root: Node<K, V>, key: K): V | null {\n  const node = getNodeByKey(root, key)\n  if (!node) {\n    return null\n  }\n  return node.value\n}\n\nexport function remove<K, V>(root: Node<K, V> | null, key: K): Node<K, V> | null {\n  let node = root;\n  let parentNode: Node<K, V> | null = null;\n\n  while (node && node.key !== key) {\n    parentNode = node;\n    if (key < node.key) {\n      node = node.left as Node<K, V>;\n    } else {\n      node = node.right as Node<K, V>;\n    }\n  }\n\n  if (!node) {\n    return null;\n  }\n\n  if (!node.left && !node.right) {\n    if (!parentNode) {\n      // Node to be deleted is root\n      root = null;\n    } else {\n      if (parentNode.left === node) {\n        parentNode.left = null;\n      } else {\n        parentNode.right = null;\n      }\n    }\n  } else if (node.left && node.right) {\n    let minValueNode = node.right;\n    let minValueParent = node;\n\n    while (minValueNode.left) {\n      minValueParent = minValueNode;\n      minValueNode = minValueNode.left;\n    }\n\n    node.key = minValueNode.key;\n\n    if (minValueParent === node) {\n      minValueParent.right = minValueNode.right;\n    } else {\n      minValueParent.left = minValueNode.right;\n    }\n  } else {\n    const childNode = node.left ? node.left : node.right;\n\n    if (!parentNode) {\n      root = childNode as Node<K, V>;\n    } else {\n      if (parentNode.left === node) {\n        parentNode.left = childNode;\n      } else {\n        parentNode.right = childNode;\n      }\n    }\n  }\n\n  return root;\n}\n\nexport function removeDocument<K>(root: Node<K, string[]>, id: string, key: K): void {\n  const node = getNodeByKey(root, key)!\n\n  if (node.value.length === 1) {\n    remove(root, key)\n    return\n  }\n\n  node.value.splice(node.value.indexOf(id), 1)\n}\n", "import { syncBoundedLevenshtein } from '../components/levenshtein.js'\nimport { Nullable } from '../types.js'\nimport { getOwnProperty, syncUniqueId } from '../utils.js'\n\nexport interface Node {\n  id: string\n  key: string\n  subWord: string\n  parent: Nullable<string>\n  children: Record<string, Node>\n  docs: string[]\n  end: boolean\n  word: string\n}\n\ntype FindParams = {\n  term: string\n  exact?: boolean\n  tolerance?: number\n}\n\ntype FindResult = Record<string, string[]>\n\n/* c8 ignore next 5 */\nfunction serialize(this: Node): object {\n  const { word, subWord, children, docs, end } = this\n\n  return { word, subWord, children, docs, end }\n}\n\nfunction updateParent(node: Node, parent: Node): void {\n  node.parent = parent.id\n  node.word = parent.word + node.subWord\n}\n\nfunction addDocument(node: Node, docID: string): void {\n  node.docs.push(docID)\n}\n\nfunction removeDocument(node: Node, docID: string): boolean {\n  const index = node.docs.indexOf(docID)\n\n  /* c8 ignore next 3 */\n  if (index === -1) {\n    return false\n  }\n\n  node.docs.splice(index, 1)\n\n  return true\n}\n\nfunction findAllWords(node: Node, output: FindResult, term: string, exact?: boolean, tolerance?: number) {\n  if (node.end) {\n    const { word, docs: docIDs } = node\n\n    if (exact && word !== term) {\n      return {}\n    }\n\n    // always check in own property to prevent access to inherited properties\n    // fix https://github.com/OramaSearch/orama/issues/137\n    if (!getOwnProperty(output, word)) {\n      if (tolerance) {\n        // computing the absolute difference of letters between the term and the word\n        const difference = Math.abs(term.length - word.length)\n\n        // if the tolerance is set, check whether the edit distance is within tolerance.\n        // In that case, we don't need to add the word to the output\n        if (difference <= tolerance && syncBoundedLevenshtein(term, word, tolerance).isBounded) {\n          output[word] = []\n        }\n      } else {\n        // prevent default tolerance not set\n        output[word] = []\n      }\n    }\n\n    // check if _output[word] exists and then add the doc to it\n    // always check in own property to prevent access to inherited properties\n    // fix https://github.com/OramaSearch/orama/issues/137\n    if (getOwnProperty(output, word) && docIDs.length) {\n      const docs = new Set(output[word])\n\n      const docIDsLength = docIDs.length\n      for (let i = 0; i < docIDsLength; i++) {\n        docs.add(docIDs[i])\n      }\n      output[word] = Array.from(docs)\n    }\n  }\n\n  // recursively search the children\n  for (const character of Object.keys(node.children)) {\n    findAllWords(node.children[character], output, term, exact, tolerance)\n  }\n  return output\n}\n\nfunction getCommonPrefix(a: string, b: string) {\n  let commonPrefix = ''\n  const len = Math.min(a.length, b.length)\n  for (let i = 0; i < len; i++) {\n    if (a[i] !== b[i]) {\n      return commonPrefix\n    }\n    commonPrefix += a[i]\n  }\n  return commonPrefix\n}\n\nexport function create(end = false, subWord = '', key = ''): Node {\n  const node = {\n    id: syncUniqueId(),\n    key,\n    subWord,\n    parent: null,\n    children: {},\n    docs: [],\n    end,\n    word: '',\n  }\n\n  Object.defineProperty(node, 'toJSON', { value: serialize })\n  return node\n}\n\nexport function insert(root: Node, word: string, docId: string) {\n  for (let i = 0; i < word.length; i++) {\n    const currentCharacter = word[i]\n    const wordAtIndex = word.substring(i)\n    const rootChildCurrentChar = root.children[currentCharacter]\n\n    if (rootChildCurrentChar) {\n      const edgeLabel = rootChildCurrentChar.subWord\n      const edgeLabelLength = edgeLabel.length\n\n      const commonPrefix = getCommonPrefix(edgeLabel, wordAtIndex)\n      const commonPrefixLength = commonPrefix.length\n\n      // the wordAtIndex matches exactly with an existing child node\n      if (edgeLabel === wordAtIndex) {\n        addDocument(rootChildCurrentChar, docId)\n        rootChildCurrentChar.end = true\n        return\n      }\n\n      const edgeLabelAtCommonPrefix = edgeLabel[commonPrefixLength]\n      // the wordAtIndex is completely contained in the child node subword\n      if (commonPrefixLength < edgeLabelLength && commonPrefixLength === wordAtIndex.length) {\n        const newNode = create(true, wordAtIndex, currentCharacter) // Create a new node with end set to true\n        newNode.children[edgeLabelAtCommonPrefix] = rootChildCurrentChar\n\n        const newNodeChild = newNode.children[edgeLabelAtCommonPrefix]\n        newNodeChild.subWord = edgeLabel.substring(commonPrefixLength)\n        newNodeChild.key = edgeLabelAtCommonPrefix\n\n        root.children[currentCharacter] = newNode\n\n        updateParent(newNode, root)\n        updateParent(newNodeChild, newNode)\n        addDocument(newNode, docId)\n        return\n      }\n\n      // the wordAtIndex is partially contained in the child node subword\n      if (commonPrefixLength < edgeLabelLength && commonPrefixLength < wordAtIndex.length) {\n        const inbetweenNode = create(false, commonPrefix, currentCharacter)\n        inbetweenNode.children[edgeLabelAtCommonPrefix] = rootChildCurrentChar\n        root.children[currentCharacter] = inbetweenNode\n\n        const inbetweenNodeChild = inbetweenNode.children[edgeLabelAtCommonPrefix]\n        inbetweenNodeChild.subWord = edgeLabel.substring(commonPrefixLength)\n        inbetweenNodeChild.key = edgeLabelAtCommonPrefix\n\n        const wordAtCommonPrefix = wordAtIndex[commonPrefixLength]\n        const newNode = create(true, word.substring(i + commonPrefixLength), wordAtCommonPrefix)\n        addDocument(newNode, docId)\n\n        inbetweenNode.children[wordAtCommonPrefix] = newNode\n\n        updateParent(inbetweenNode, root)\n        updateParent(newNode, inbetweenNode)\n        updateParent(inbetweenNodeChild, inbetweenNode)\n        return\n      }\n\n      // skip to the next divergent character\n      i += edgeLabelLength - 1\n      // navigate in the child node\n      root = rootChildCurrentChar\n    } else {\n      // if the node for the current character doesn't exist create new node\n      const newNode = create(true, wordAtIndex, currentCharacter)\n      addDocument(newNode, docId)\n\n      root.children[currentCharacter] = newNode\n      updateParent(newNode, root)\n      return\n    }\n  }\n}\n\nexport function find(root: Node, { term, exact, tolerance }: FindParams): FindResult {\n  // find the closest node to the term\n  for (let i = 0; i < term.length; i++) {\n    const character = term[i]\n    if (character in root.children) {\n      const rootChildCurrentChar = root.children[character]\n      const edgeLabel = rootChildCurrentChar.subWord\n      const termSubstring = term.substring(i)\n\n      // find the common prefix between two words ex: prime and primate = prim\n      const commonPrefix = getCommonPrefix(edgeLabel, termSubstring)\n      const commonPrefixLength = commonPrefix.length\n      // if the common prefix lenght is equal to edgeLabel lenght (the node subword) it means they are a match\n      // if the common prefix is equal to the term means it is contained in the node\n      if (commonPrefixLength !== edgeLabel.length && commonPrefixLength !== termSubstring.length) {\n        // if tolerance is set we take the current node as the closest\n        if (tolerance) break\n        return {}\n      }\n\n      // skip the subword lenght and check the next divergent character\n      i += rootChildCurrentChar.subWord.length - 1\n      // navigate into the child node\n      root = rootChildCurrentChar\n    } else {\n      return {}\n    }\n  }\n\n  const output: FindResult = {}\n  // found the closest node we recursively search through children\n  findAllWords(root, output, term, exact, tolerance)\n\n  return output\n}\n\nexport function contains(root: Node, term: string): boolean {\n  for (let i = 0; i < term.length; i++) {\n    const character = term[i]\n\n    if (character in root.children) {\n      const rootChildrenChar = root.children[character]\n      const edgeLabel = rootChildrenChar.subWord\n      const termSubstring = term.substring(i)\n      const commonPrefix = getCommonPrefix(edgeLabel, termSubstring)\n      const commonPrefixLength = commonPrefix.length\n\n      if (commonPrefixLength !== edgeLabel.length && commonPrefixLength !== termSubstring.length) {\n        return false\n      }\n      i += rootChildrenChar.subWord.length - 1\n      root = rootChildrenChar\n    } else {\n      return false\n    }\n  }\n  return true\n}\n\nexport function removeWord(root: Node, term: string): boolean {\n  if (!term) {\n    return false\n  }\n\n  for (let i = 0; i < term.length; i++) {\n    const character = term[i]\n    const parent = root\n    if (character in root.children) {\n      i += root.children[character].subWord.length - 1\n      root = root.children[character]\n\n      if (Object.keys(root.children).length === 0) {\n        delete parent.children[root.key]\n        return true\n      }\n    } else {\n      return false\n    }\n  }\n\n  return false\n}\n\nexport function removeDocumentByWord(root: Node, term: string, docID: string, exact = true): boolean {\n  if (!term) {\n    return true\n  }\n\n  for (let i = 0; i < term.length; i++) {\n    const character = term[i]\n    if (character in root.children) {\n      const rootChildCurrentChar = root.children[character]\n      i += rootChildCurrentChar.subWord.length - 1\n      root = rootChildCurrentChar\n\n      if (exact && root.word !== term) {\n        // Do nothing if the exact condition is not met.\n      } else {\n        removeDocument(root, docID)\n      }\n    } else {\n      return false\n    }\n  }\n  return true\n}\n", "export type BoundedMetric = {\n  isBounded: boolean\n  distance: number\n}\n\n/**\n * Inspired by:\n * https://github.com/Yomguithereal/talisman/blob/86ae55cbd040ff021d05e282e0e6c71f2dde21f8/src/metrics/levenshtein.js#L218-L340\n */\nfunction _boundedLevenshtein(a: string, b: string, tolerance: number): number {\n  // the strings are the same\n  if (a === b) {\n    return 0\n  }\n\n  // a should be the shortest string\n  const swap = a\n  if (a.length > b.length) {\n    a = b\n    b = swap\n  }\n\n  let lenA = a.length\n  let lenB = b.length\n\n  // ignore common suffix\n  // note: `~-` decreases by a unit in a bitwise fashion\n  while (lenA > 0 && a.charCodeAt(~-lenA) === b.charCodeAt(~-lenB)) {\n    lenA--\n    lenB--\n  }\n\n  // early return when the smallest string is empty\n  if (!lenA) {\n    return lenB > tolerance ? -1 : lenB\n  }\n\n  // ignore common prefix\n  let startIdx = 0\n  while (startIdx < lenA && a.charCodeAt(startIdx) === b.charCodeAt(startIdx)) {\n    startIdx++\n  }\n  lenA -= startIdx\n  lenB -= startIdx\n\n  // early return when the smallest string is empty\n  if (lenA === 0) {\n    return lenB > tolerance ? -1 : lenB\n  }\n\n  const delta = lenB - lenA\n\n  if (tolerance > lenB) {\n    tolerance = lenB\n  } else if (delta > tolerance) {\n    return -1\n  }\n\n  let i = 0\n  const row = []\n  const characterCodeCache = []\n\n  while (i < tolerance) {\n    characterCodeCache[i] = b.charCodeAt(startIdx + i)\n    row[i] = ++i\n  }\n\n  while (i < lenB) {\n    characterCodeCache[i] = b.charCodeAt(startIdx + i)\n    row[i++] = tolerance + 1\n  }\n\n  const offset = tolerance - delta\n  const haveMax = tolerance < lenB\n\n  let jStart = 0\n  let jEnd = tolerance\n\n  let current = 0\n  let left = 0\n  let above = 0\n  let charA = 0\n  let j = 0\n\n  // Starting the nested loops\n  for (i = 0; i < lenA; i++) {\n    left = i\n    current = i + 1\n\n    charA = a.charCodeAt(startIdx + i)\n    jStart += i > offset ? 1 : 0\n    jEnd += jEnd < lenB ? 1 : 0\n\n    for (j = jStart; j < jEnd; j++) {\n      above = current\n\n      current = left\n      left = row[j]\n\n      if (charA !== characterCodeCache[j]) {\n        // insert current\n        if (left < current) {\n          current = left\n        }\n\n        // delete current\n        if (above < current) {\n          current = above\n        }\n\n        current++\n      }\n\n      row[j] = current\n    }\n\n    if (haveMax && row[i + delta] > tolerance) {\n      return -1\n    }\n  }\n\n  return current <= tolerance ? current : -1\n}\n\n/**\n * Computes the Levenshtein distance between two strings (a, b), returning early with -1 if the distance\n * is greater than the given tolerance.\n * It assumes that:\n * - tolerance >= ||a| - |b|| >= 0\n */\nexport async function boundedLevenshtein(a: string, b: string, tolerance: number): Promise<BoundedMetric> {\n  const distance = _boundedLevenshtein(a, b, tolerance)\n  return {\n    distance,\n    isBounded: distance >= 0,\n  }\n}\n\n// This is only used internally, keep in sync with the previous one\nexport function syncBoundedLevenshtein(a: string, b: string, tolerance: number): BoundedMetric {\n  const distance = _boundedLevenshtein(a, b, tolerance)\n  return {\n    distance,\n    isBounded: distance >= 0,\n  }\n}\n\nexport function levenshtein(a: string, b: string): number {\n  /* c8 ignore next 3 */\n  if (!a.length) {\n    return b.length\n  }\n\n  /* c8 ignore next 3 */\n  if (!b.length) {\n    return a.length\n  }\n\n  const swap = a\n  if (a.length > b.length) {\n    a = b\n    b = swap\n  }\n\n  const row = Array.from({ length: a.length + 1 }, (_, i) => i)\n  let val = 0\n\n  for (let i = 1; i <= b.length; i++) {\n    let prev = i\n\n    for (let j = 1; j <= a.length; j++) {\n      if (b[i - 1] === a[j - 1]) {\n        val = row[j - 1]\n      } else {\n        val = Math.min(row[j - 1] + 1, Math.min(prev + 1, row[j] + 1))\n      }\n\n      row[j - 1] = prev\n      prev = val\n    }\n    row[a.length] = prev\n  }\n\n  return row[a.length]\n}\n", "import { createError } from '../errors.js'\nimport { TokenScore, BM25Params } from '../types.js'\n\nexport function prioritizeTokenScores(arrays: TokenScore[][], boost: number, threshold = 1): TokenScore[] {\n  if (boost === 0) {\n    throw createError('INVALID_BOOST_VALUE')\n  }\n\n  const tokenMap: Record<string, number> = {}\n\n  const mapsLength = arrays.length\n  for (let i = 0; i < mapsLength; i++) {\n    const arr = arrays[i]\n\n    const entriesLength = arr.length\n    for (let j = 0; j < entriesLength; j++) {\n      const [token, score] = arr[j]\n      const boostScore = score * boost\n\n      if (token in tokenMap) {\n        tokenMap[token] *= 1.5 + boostScore\n      } else {\n        tokenMap[token] = boostScore\n      }\n    }\n  }\n\n  const results = Object.entries(tokenMap).sort((a, b) => b[1] - a[1])\n\n  // If threshold is 1, it means we will return all the results with at least one search term,\n  // prioritizig the ones that contains more search terms (fuzzy match)\n  if (threshold === 1) {\n    return results\n  }\n\n  // If threshold is 0, it means we will only return all the results that contains ALL the search terms (exact match)\n  if (threshold === 0) {\n    const shortestArrayLength = Math.min(...arrays.map(arr => arr.length))\n    return results.slice(0, shortestArrayLength)\n  }\n\n  // If the theshold is between 0 and 1, we will return all the results that contains at least the threshold of search terms\n  // For example, if threshold is 0.5, we will return all the results that contains at least 50% of the search terms\n  // (fuzzy match with a minimum threshold)\n  const thresholdLength = Math.ceil((threshold * 100 * results.length) / 100)\n\n  return results.slice(0, results.length + thresholdLength)\n}\n\nexport function BM25(\n  tf: number,\n  matchingCount: number,\n  docsCount: number,\n  fieldLength: number,\n  averageFieldLength: number,\n  BM25Params: Required<BM25Params>,\n) {\n  const { k, b, d } = BM25Params\n  const idf = Math.log(1 + (docsCount - matchingCount + 0.5) / (matchingCount + 0.5))\n  return (idf * (d + tf * (k + 1))) / (tf + k * (1 - b + (b * fieldLength) / averageFieldLength))\n}\n", "import { createError } from '../../errors.js'\nimport { Stemmer, Tokenizer, DefaultTokenizerConfig } from '../../types.js'\nimport { replaceDiacritics } from './diacritics.js'\nimport { Language, SPLITTERS, SUPPORTED_LANGUAGES } from './languages.js'\nimport { stopWords as defaultStopWords } from './stop-words/index.js'\nimport { stemmer as english } from './english-stemmer.js'\n\ninterface DefaultTokenizer extends Tokenizer {\n  language: Language\n  stemmer?: Stemmer\n  stemmerSkipProperties: Set<string>\n  stopWords?: string[]\n  allowDuplicates: boolean\n  normalizationCache: Map<string, string>\n  normalizeToken(this: DefaultTokenizer, token: string, prop: string | undefined): string\n}\n\nfunction normalizeToken(this: DefaultTokenizer, prop: string, token: string): string {\n  const key = `${this.language}:${prop}:${token}`\n\n  if (this.normalizationCache.has(key)) {\n    return this.normalizationCache.get(key)!\n  }\n\n  // Remove stopwords if enabled\n  if (this.stopWords?.includes(token)) {\n    this.normalizationCache.set(key, '')\n    return ''\n  }\n\n  // Apply stemming if enabled\n  if (this.stemmer && !this.stemmerSkipProperties.has(prop)) {\n    token = this.stemmer(token)\n  }\n\n  token = replaceDiacritics(token)\n  this.normalizationCache.set(key, token)\n  return token\n}\n\n/* c8 ignore next 10 */\nfunction trim(text: string[]): string[] {\n  while (text[text.length - 1] === '') {\n    text.pop()\n  }\n  while (text[0] === '') {\n    text.shift()\n  }\n  return text\n}\n\nfunction tokenize(this: DefaultTokenizer, input: string, language?: string, prop?: string): string[] {\n  if (language && language !== this.language) {\n    throw createError('LANGUAGE_NOT_SUPPORTED', language)\n  }\n\n  /* c8 ignore next 3 */\n  if (typeof input !== 'string') {\n    return [input]\n  }\n\n  const splitRule = SPLITTERS[this.language]\n  const tokens = input\n    .toLowerCase()\n    .split(splitRule)\n    .map(this.normalizeToken.bind(this, prop ?? ''))\n    .filter(Boolean)\n  const trimTokens = trim(tokens)\n\n  if (!this.allowDuplicates) {\n    return Array.from(new Set(trimTokens))\n  }\n\n  return trimTokens\n}\n\nexport async function createTokenizer(config: DefaultTokenizerConfig = {}): Promise<DefaultTokenizer> {\n  if (!config.language) {\n    config.language = 'english'\n  } else if (!SUPPORTED_LANGUAGES.includes(config.language)) {\n    throw createError('LANGUAGE_NOT_SUPPORTED', config.language)\n  }\n\n  // Handle stemming - It is disabled by default\n  let stemmer: Stemmer | undefined\n\n  if (config.stemming || (config.stemmer && !('stemming' in config))) {\n    if (config.stemmer) {\n      if (typeof config.stemmer !== 'function') {\n        throw createError('INVALID_STEMMER_FUNCTION_TYPE')\n      }\n\n      stemmer = config.stemmer\n    } else {\n      if (config.language === 'english') {\n        stemmer = english\n      } else {\n        throw createError('MISSING_STEMMER', config.language)\n      }\n    }\n  }\n\n  // Handle stopwords\n  let stopWords: string[] | undefined\n\n  if (config.stopWords !== false) {\n    stopWords = defaultStopWords[config.language] ?? []\n\n    if (Array.isArray(config.stopWords)) {\n      stopWords = config.stopWords\n    } else if (typeof config.stopWords === 'function') {\n      stopWords = await config.stopWords(stopWords)\n    } else if (config.stopWords) {\n      throw createError('CUSTOM_STOP_WORDS_MUST_BE_FUNCTION_OR_ARRAY')\n    }\n\n    // Make sure stopWords is just an array of strings\n    if (!Array.isArray(stopWords)) {\n      throw createError('CUSTOM_STOP_WORDS_MUST_BE_FUNCTION_OR_ARRAY')\n    }\n\n    for (const s of stopWords) {\n      if (typeof s !== 'string') {\n        throw createError('CUSTOM_STOP_WORDS_MUST_BE_FUNCTION_OR_ARRAY')\n      }\n    }\n  }\n\n  // Create the tokenizer\n  const tokenizer: DefaultTokenizer = {\n    tokenize,\n    language: config.language,\n    stemmer,\n    stemmerSkipProperties: new Set(config.stemmerSkipProperties ? [config.stemmerSkipProperties].flat() : []),\n    stopWords,\n    allowDuplicates: Boolean(config.allowDuplicates),\n    normalizeToken,\n    normalizationCache: new Map(),\n  }\n\n  tokenizer.tokenize = tokenize.bind(tokenizer)\n  tokenizer.normalizeToken = normalizeToken\n\n  return tokenizer\n}\n", "const DIACRITICS_CHARCODE_START = 192\nconst DIACRITICS_CHARCODE_END = 383\n\nconst CHARCODE_REPLACE_MAPPING = [\n  65,\n  65,\n  65,\n  65,\n  65,\n  65,\n  65,\n  67,\n  69,\n  69,\n  69,\n  69,\n  73,\n  73,\n  73,\n  73,\n  69,\n  78,\n  79,\n  79,\n  79,\n  79,\n  79,\n  null,\n  79,\n  85,\n  85,\n  85,\n  85,\n  89,\n  80,\n  115,\n  97,\n  97,\n  97,\n  97,\n  97,\n  97,\n  97,\n  99,\n  101,\n  101,\n  101,\n  101,\n  105,\n  105,\n  105,\n  105,\n  101,\n  110,\n  111,\n  111,\n  111,\n  111,\n  111,\n  null,\n  111,\n  117,\n  117,\n  117,\n  117,\n  121,\n  112,\n  121,\n  65,\n  97,\n  65,\n  97,\n  65,\n  97,\n  67,\n  99,\n  67,\n  99,\n  67,\n  99,\n  67,\n  99,\n  68,\n  100,\n  68,\n  100,\n  69,\n  101,\n  69,\n  101,\n  69,\n  101,\n  69,\n  101,\n  69,\n  101,\n  71,\n  103,\n  71,\n  103,\n  71,\n  103,\n  71,\n  103,\n  72,\n  104,\n  72,\n  104,\n  73,\n  105,\n  73,\n  105,\n  73,\n  105,\n  73,\n  105,\n  73,\n  105,\n  73,\n  105,\n  74,\n  106,\n  75,\n  107,\n  107,\n  76,\n  108,\n  76,\n  108,\n  76,\n  108,\n  76,\n  108,\n  76,\n  108,\n  78,\n  110,\n  78,\n  110,\n  78,\n  110,\n  110,\n  78,\n  110,\n  79,\n  111,\n  79,\n  111,\n  79,\n  111,\n  79,\n  111,\n  82,\n  114,\n  82,\n  114,\n  82,\n  114,\n  83,\n  115,\n  83,\n  115,\n  83,\n  115,\n  83,\n  115,\n  84,\n  116,\n  84,\n  116,\n  84,\n  116,\n  85,\n  117,\n  85,\n  117,\n  85,\n  117,\n  85,\n  117,\n  85,\n  117,\n  85,\n  117,\n  87,\n  119,\n  89,\n  121,\n  89,\n  90,\n  122,\n  90,\n  122,\n  90,\n  122,\n  115,\n]\n\nfunction replaceChar(charCode: number): number {\n  if (charCode < DIACRITICS_CHARCODE_START || charCode > DIACRITICS_CHARCODE_END) return charCode\n\n  /* c8 ignore next  */\n  return CHARCODE_REPLACE_MAPPING[charCode - DIACRITICS_CHARCODE_START] || charCode\n}\n\nexport function replaceDiacritics(str: string): string {\n  const stringCharCode = []\n  for (let idx = 0; idx < str.length; idx++) {\n    stringCharCode[idx] = replaceChar(str.charCodeAt(idx))\n  }\n  return String.fromCharCode(...stringCharCode)\n}\n", "export const en = [\n  'i',\n  'me',\n  'my',\n  'myself',\n  'we',\n  'us',\n  'our',\n  'ours',\n  'ourselves',\n\n  'you',\n  'your',\n  'yours',\n  'yourself',\n  'yourselves',\n\n  'he',\n  'him',\n  'his',\n  'himself',\n\n  'she',\n  'her',\n  'hers',\n  'herself',\n  'it',\n  'its',\n  'itself',\n\n  'they',\n  'them',\n  'their',\n  'theirs',\n  'themselves',\n\n  'what',\n  'which',\n  'who',\n  'whom',\n  'this',\n  'that',\n  'these',\n  'those',\n\n  'am',\n  'is',\n  'are',\n  'was',\n  'were',\n  'be',\n  'been',\n  'being',\n\n  'have',\n  'has',\n  'had',\n  'having',\n\n  'do',\n  'does',\n  'did',\n  'doing',\n\n  'will',\n  'would',\n\n  'shall',\n  'should',\n  'can',\n  'could',\n\n  'may',\n  'might',\n  'must',\n  'ought',\n\n  \"i'm\",\n  \"you're\",\n  \"he's\",\n  \"she's\",\n  \"it's\",\n  \"we're\",\n  \"they're\",\n  \"i've\",\n  \"you've\",\n  \"we've\",\n  \"they've\",\n  \"i'd\",\n  \"you'd\",\n  \"he'd\",\n  \"she'd\",\n  \"we'd\",\n  \"they'd\",\n  \"i'll\",\n  \"you'll\",\n  \"he'll\",\n  \"she'll\",\n  \"we'll\",\n  \"they'll\",\n\n  \"isn't\",\n  \"aren't\",\n  \"wasn't\",\n  \"weren't\",\n  \"hasn't\",\n  \"haven't\",\n  \"hadn't\",\n  \"doesn't\",\n  \"don't\",\n  \"didn't\",\n\n  \"won't\",\n  \"wouldn't\",\n  \"shan't\",\n  \"shouldn't\",\n  \"can't\",\n  'cannot',\n  \"couldn't\",\n  \"mustn't\",\n\n  \"let's\",\n  \"that's\",\n  \"who's\",\n  \"what's\",\n  \"here's\",\n  \"there's\",\n  \"when's\",\n  \"where's\",\n  \"why's\",\n  \"how's\",\n\n  'an',\n  'the',\n\n  'and',\n  'but',\n  'if',\n  'or',\n  'because',\n  'as',\n  'until',\n  'while',\n\n  'of',\n  'at',\n  'by',\n  'for',\n  'with',\n  'about',\n  'against',\n  'between',\n  'into',\n  'through',\n  'during',\n  'before',\n  'after',\n  'above',\n  'below',\n  'to',\n  'from',\n  'up',\n  'down',\n  'in',\n  'out',\n  'on',\n  'off',\n  'over',\n  'under',\n\n  'again',\n  'further',\n  'then',\n  'once',\n\n  'here',\n  'there',\n  'when',\n  'where',\n  'why',\n  'how',\n\n  'all',\n  'any',\n  'both',\n  'each',\n  'few',\n  'more',\n  'most',\n  'other',\n  'some',\n  'such',\n\n  'no',\n  'nor',\n  'not',\n  'only',\n  'own',\n  'same',\n  'so',\n  'than',\n  'too',\n  'very',\n]\n", "export const it = [\n  'ad',\n  'al',\n  'allo',\n  'ai',\n  'agli',\n  'all',\n  'agl',\n  'alla',\n  'alle',\n  'con',\n  'col',\n  'coi',\n  'da',\n  'dal',\n  'dallo',\n  'dai',\n  'dagli',\n  'dall',\n  'dagl',\n  'dalla',\n  'dalle',\n  'di',\n  'del',\n  'dello',\n  'dei',\n  'degli',\n  'dell',\n  'degl',\n  'della',\n  'delle',\n  'in',\n  'nel',\n  'nello',\n  'nei',\n  'negli',\n  'nell',\n  'negl',\n  'nella',\n  'nelle',\n  'su',\n  'sul',\n  'sullo',\n  'sui',\n  'sugli',\n  'sull',\n  'sugl',\n  'sulla',\n  'sulle',\n  'per',\n  'tra',\n  'contro',\n  'io',\n  'tu',\n  'lui',\n  'lei',\n  'noi',\n  'voi',\n  'loro',\n  'mio',\n  'mia',\n  'miei',\n  'mie',\n  'tuo',\n  'tua',\n  'tuoi',\n  'tue',\n  'suo',\n  'sua',\n  'suoi',\n  'sue',\n  'nostro',\n  'nostra',\n  'nostri',\n  'nostre',\n  'vostro',\n  'vostra',\n  'vostri',\n  'vostre',\n  'mi',\n  'ti',\n  'ci',\n  'vi',\n  'lo',\n  'la',\n  'li',\n  'le',\n  'gli',\n  'ne',\n  'il',\n  'un',\n  'uno',\n  'una',\n  'ma',\n  'ed',\n  'se',\n  'perché',\n  'anche',\n  'come',\n  'dov',\n  'dove',\n  'che',\n  'chi',\n  'cui',\n  'non',\n  'più',\n  'quale',\n  'quanto',\n  'quanti',\n  'quanta',\n  'quante',\n  'quello',\n  'quelli',\n  'quella',\n  'quelle',\n  'questo',\n  'questi',\n  'questa',\n  'queste',\n  'si',\n  'tutto',\n  'tutti',\n  'a',\n  'c',\n  'e',\n  'i',\n  'l',\n  'o',\n  'ho',\n  'hai',\n  'ha',\n  'abbiamo',\n  'avete',\n  'hanno',\n  'abbia',\n  'abbiate',\n  'abbiano',\n  'avrò',\n  'avrai',\n  'avrà',\n  'avremo',\n  'avrete',\n  'avranno',\n  'avrei',\n  'avresti',\n  'avrebbe',\n  'avremmo',\n  'avreste',\n  'avrebbero',\n  'avevo',\n  'avevi',\n  'aveva',\n  'avevamo',\n  'avevate',\n  'avevano',\n  'ebbi',\n  'avesti',\n  'ebbe',\n  'avemmo',\n  'aveste',\n  'ebbero',\n  'avessi',\n  'avesse',\n  'avessimo',\n  'avessero',\n  'avendo',\n  'avuto',\n  'avuta',\n  'avuti',\n  'avute',\n  'sono',\n  'sei',\n  'è',\n  'siamo',\n  'siete',\n  'sia',\n  'siate',\n  'siano',\n  'sarò',\n  'sarai',\n  'sarà',\n  'saremo',\n  'sarete',\n  'saranno',\n  'sarei',\n  'saresti',\n  'sarebbe',\n  'saremmo',\n  'sareste',\n  'sarebbero',\n  'ero',\n  'eri',\n  'era',\n  'eravamo',\n  'eravate',\n  'erano',\n  'fui',\n  'fosti',\n  'fu',\n  'fummo',\n  'foste',\n  'furono',\n  'fossi',\n  'fosse',\n  'fossimo',\n  'fossero',\n  'essendo',\n  'faccio',\n  'fai',\n  'facciamo',\n  'fanno',\n  'faccia',\n  'facciate',\n  'facciano',\n  'farò',\n  'farai',\n  'farà',\n  'faremo',\n  'farete',\n  'faranno',\n  'farei',\n  'faresti',\n  'farebbe',\n  'faremmo',\n  'fareste',\n  'farebbero',\n  'facevo',\n  'facevi',\n  'faceva',\n  'facevamo',\n  'facevate',\n  'facevano',\n  'feci',\n  'facesti',\n  'fece',\n  'facemmo',\n  'faceste',\n  'fecero',\n  'facessi',\n  'facesse',\n  'facessimo',\n  'facessero',\n  'facendo',\n  'sto',\n  'stai',\n  'sta',\n  'stiamo',\n  'stanno',\n  'stia',\n  'stiate',\n  'stiano',\n  'starò',\n  'starai',\n  'starà',\n  'staremo',\n  'starete',\n  'staranno',\n  'starei',\n  'staresti',\n  'starebbe',\n  'staremmo',\n  'stareste',\n  'starebbero',\n  'stavo',\n  'stavi',\n  'stava',\n  'stavamo',\n  'stavate',\n  'stavano',\n  'stetti',\n  'stesti',\n  'stette',\n  'stemmo',\n  'steste',\n  'stettero',\n  'stessi',\n  'stesse',\n  'stessimo',\n  'stessero',\n  'stando',\n]\n", "export const fr = [\n  'au',\n  'aux',\n  'avec',\n  'ce',\n  'ces',\n  'dans',\n  'de',\n  'des',\n  'du',\n  'elle',\n  'en',\n  'et',\n  'eux',\n  'il',\n  'je',\n  'la',\n  'le',\n  'leur',\n  'lui',\n  'ma',\n  'mais',\n  'me',\n  'même',\n  'mes',\n  'moi',\n  'mon',\n  'ne',\n  'nos',\n  'notre',\n  'nous',\n  'on',\n  'ou',\n  'par',\n  'pas',\n  'pour',\n  'qu',\n  'que',\n  'qui',\n  'sa',\n  'se',\n  'ses',\n  'son',\n  'sur',\n  'ta',\n  'te',\n  'tes',\n  'toi',\n  'ton',\n  'tu',\n  'un',\n  'une',\n  'vos',\n  'votre',\n  'vous',\n  'c',\n  'd',\n  'j',\n  'l',\n  'à',\n  'm',\n  'n',\n  's',\n  't',\n  'y',\n  '',\n  'été',\n  'étée',\n  'étées',\n  'étés',\n  'étant',\n  'suis',\n  'es',\n  'est',\n  'sommes',\n  'êtes',\n  'sont',\n  'serai',\n  'seras',\n  'sera',\n  'serons',\n  'serez',\n  'seront',\n  'serais',\n  'serait',\n  'serions',\n  'seriez',\n  'seraient',\n  'étais',\n  'était',\n  'étions',\n  'étiez',\n  'étaient',\n  'fus',\n  'fut',\n  'fûmes',\n  'fûtes',\n  'furent',\n  'sois',\n  'soit',\n  'soyons',\n  'soyez',\n  'soient',\n  'fusse',\n  'fusses',\n  'fût',\n  'fussions',\n  'fussiez',\n  'fussent',\n  'ayant',\n  'eu',\n  'eue',\n  'eues',\n  'eus',\n  'ai',\n  'as',\n  'avons',\n  'avez',\n  'ont',\n  'aurai',\n  'auras',\n  'aura',\n  'aurons',\n  'aurez',\n  'auront',\n  'aurais',\n  'aurait',\n  'aurions',\n  'auriez',\n  'auraient',\n  'avais',\n  'avait',\n  'avions',\n  'aviez',\n  'avaient',\n  'eut',\n  'eûmes',\n  'eûtes',\n  'eurent',\n  'aie',\n  'aies',\n  'ait',\n  'ayons',\n  'ayez',\n  'aient',\n  'eusse',\n  'eusses',\n  'eût',\n  'eussions',\n  'eussiez',\n  'eussent',\n  'ceci',\n  'cela',\n  'celà',\n  'cet',\n  'cette',\n  'ici',\n  'ils',\n  'les',\n  'leurs',\n  'quel',\n  'quels',\n  'quelle',\n  'quelles',\n  'sans',\n  'soi',\n]\n", "export const es = [\n  'de',\n  'la',\n  'que',\n  'el',\n  'en',\n  'y',\n  'a',\n  'los',\n  'del',\n  'se',\n  'las',\n  'por',\n  'un',\n  'para',\n  'con',\n  'no',\n  'una',\n  'su',\n  'al',\n  'lo',\n  'como',\n  'más',\n  'pero',\n  'sus',\n  'le',\n  'ya',\n  'o',\n  'este',\n  'sí',\n  'porque',\n  'esta',\n  'entre',\n  'cuando',\n  'muy',\n  'sin',\n  'sobre',\n  'también',\n  'me',\n  'hasta',\n  'hay',\n  'donde',\n  'quien',\n  'desde',\n  'todo',\n  'nos',\n  'durante',\n  'todos',\n  'uno',\n  'les',\n  'ni',\n  'contra',\n  'otros',\n  'ese',\n  'eso',\n  'ante',\n  'ellos',\n  'e',\n  'esto',\n  'mí',\n  'antes',\n  'algunos',\n  'qué',\n  'unos',\n  'yo',\n  'otro',\n  'otras',\n  'otra',\n  'él',\n  'tanto',\n  'esa',\n  'estos',\n  'mucho',\n  'quienes',\n  'nada',\n  'muchos',\n  'cual',\n  'poco',\n  'ella',\n  'estar',\n  'estas',\n  'algunas',\n  'algo',\n  'nosotros',\n  'mi',\n  'mis',\n  'tú',\n  'te',\n  'ti',\n  'tu',\n  'tus',\n  'ellas',\n  'nosotras',\n  'vosotros',\n  'vosotras',\n  'os',\n  'mío',\n  'mía',\n  'míos',\n  'mías',\n  'tuyo',\n  'tuya',\n  'tuyos',\n  'tuyas',\n  'suyo',\n  'suya',\n  'suyos',\n  'suyas',\n  'nuestro',\n  'nuestra',\n  'nuestros',\n  'nuestras',\n  'vuestro',\n  'vuestra',\n  'vuestros',\n  'vuestras',\n  'esos',\n  'esas',\n  'estoy',\n  'estás',\n  'está',\n  'estamos',\n  'estáis',\n  'están',\n  'esté',\n  'estés',\n  'estemos',\n  'estéis',\n  'estén',\n  'estaré',\n  'estarás',\n  'estará',\n  'estaremos',\n  'estaréis',\n  'estarán',\n  'estaría',\n  'estarías',\n  'estaríamos',\n  'estaríais',\n  'estarían',\n  'estaba',\n  'estabas',\n  'estábamos',\n  'estabais',\n  'estaban',\n  'estuve',\n  'estuviste',\n  'estuvo',\n  'estuvimos',\n  'estuvisteis',\n  'estuvieron',\n  'estuviera',\n  'estuvieras',\n  'estuviéramos',\n  'estuvierais',\n  'estuvieran',\n  'estuviese',\n  'estuvieses',\n  'estuviésemos',\n  'estuvieseis',\n  'estuviesen',\n  'estando',\n  'estado',\n  'estada',\n  'estados',\n  'estadas',\n  'estad',\n  'he',\n  'has',\n  'ha',\n  'hemos',\n  'habéis',\n  'han',\n  'haya',\n  'hayas',\n  'hayamos',\n  'hayáis',\n  'hayan',\n  'habré',\n  'habrás',\n  'habrá',\n  'habremos',\n  'habréis',\n  'habrán',\n  'habría',\n  'habrías',\n  'habríamos',\n  'habríais',\n  'habrían',\n  'había',\n  'habías',\n  'habíamos',\n  'habíais',\n  'habían',\n  'hube',\n  'hubiste',\n  'hubo',\n  'hubimos',\n  'hubisteis',\n  'hubieron',\n  'hubiera',\n  'hubieras',\n  'hubiéramos',\n  'hubierais',\n  'hubieran',\n  'hubiese',\n  'hubieses',\n  'hubiésemos',\n  'hubieseis',\n  'hubiesen',\n  'habiendo',\n  'habido',\n  'habida',\n  'habidos',\n  'habidas',\n  'soy',\n  'eres',\n  'es',\n  'somos',\n  'sois',\n  'son',\n  'sea',\n  'seas',\n  'seamos',\n  'seáis',\n  'sean',\n  'seré',\n  'serás',\n  'será',\n  'seremos',\n  'seréis',\n  'serán',\n  'sería',\n  'serías',\n  'seríamos',\n  'seríais',\n  'serían',\n  'era',\n  'eras',\n  'éramos',\n  'erais',\n  'eran',\n  'fui',\n  'fuiste',\n  'fue',\n  'fuimos',\n  'fuisteis',\n  'fueron',\n  'fuera',\n  'fueras',\n  'fuéramos',\n  'fuerais',\n  'fueran',\n  'fuese',\n  'fueses',\n  'fuésemos',\n  'fueseis',\n  'fuesen',\n  'siendo',\n  'sido',\n  'tengo',\n  'tienes',\n  'tiene',\n  'tenemos',\n  'tenéis',\n  'tienen',\n  'tenga',\n  'tengas',\n  'tengamos',\n  'tengáis',\n  'tengan',\n  'tendré',\n  'tendrás',\n  'tendrá',\n  'tendremos',\n  'tendréis',\n  'tendrán',\n  'tendría',\n  'tendrías',\n  'tendríamos',\n  'tendríais',\n  'tendrían',\n  'tenía',\n  'tenías',\n  'teníamos',\n  'teníais',\n  'tenían',\n  'tuve',\n  'tuviste',\n  'tuvo',\n  'tuvimos',\n  'tuvisteis',\n  'tuvieron',\n  'tuviera',\n  'tuvieras',\n  'tuviéramos',\n  'tuvierais',\n  'tuvieran',\n  'tuviese',\n  'tuvieses',\n  'tuviésemos',\n  'tuvieseis',\n  'tuviesen',\n  'teniendo',\n  'tenido',\n  'tenida',\n  'tenidos',\n  'tenidas',\n  'tened',\n]\n", "export const pt = [\n  'de',\n  'a',\n  'o',\n  'que',\n  'e',\n  'do',\n  'da',\n  'em',\n  'um',\n  'para',\n  'com',\n  'não',\n  'uma',\n  'os',\n  'no',\n  'se',\n  'na',\n  'por',\n  'mais',\n  'as',\n  'dos',\n  'como',\n  'mas',\n  'ao',\n  'ele',\n  'das',\n  'à',\n  'seu',\n  'sua',\n  'ou',\n  'quando',\n  'muito',\n  'nos',\n  'já',\n  'eu',\n  'também',\n  'só',\n  'pelo',\n  'pela',\n  'até',\n  'isso',\n  'ela',\n  'entre',\n  'depois',\n  'sem',\n  'mesmo',\n  'aos',\n  'seus',\n  'quem',\n  'nas',\n  'me',\n  'esse',\n  'eles',\n  'você',\n  'essa',\n  'num',\n  'nem',\n  'suas',\n  'meu',\n  'às',\n  'minha',\n  'numa',\n  'pelos',\n  'elas',\n  'qual',\n  'nós',\n  'lhe',\n  'deles',\n  'essas',\n  'esses',\n  'pelas',\n  'este',\n  'dele',\n  'tu',\n  'te',\n  'vocês',\n  'vos',\n  'lhes',\n  'meus',\n  'minhas',\n  'teu',\n  'tua',\n  'teus',\n  'tuas',\n  'nosso',\n  'nossa',\n  'nossos',\n  'nossas',\n  'dela',\n  'delas',\n  'esta',\n  'estes',\n  'estas',\n  'aquele',\n  'aquela',\n  'aqueles',\n  'aquelas',\n  'isto',\n  'aquilo',\n  'estou',\n  'está',\n  'estamos',\n  'estão',\n  'estive',\n  'esteve',\n  'estivemos',\n  'estiveram',\n  'estava',\n  'estávamos',\n  'estavam',\n  'estivera',\n  'estivéramos',\n  'esteja',\n  'estejamos',\n  'estejam',\n  'estivesse',\n  'estivéssemos',\n  'estivessem',\n  'estiver',\n  'estivermos',\n  'estiverem',\n  'hei',\n  'há',\n  'havemos',\n  'hão',\n  'houve',\n  'houvemos',\n  'houveram',\n  'houvera',\n  'houvéramos',\n  'haja',\n  'hajamos',\n  'hajam',\n  'houvesse',\n  'houvéssemos',\n  'houvessem',\n  'houver',\n  'houvermos',\n  'houverem',\n  'houverei',\n  'houverá',\n  'houveremos',\n  'houverão',\n  'houveria',\n  'houveríamos',\n  'houveriam',\n  'sou',\n  'somos',\n  'são',\n  'era',\n  'éramos',\n  'eram',\n  'fui',\n  'foi',\n  'fomos',\n  'foram',\n  'fora',\n  'fôramos',\n  'seja',\n  'sejamos',\n  'sejam',\n  'fosse',\n  'fôssemos',\n  'fossem',\n  'for',\n  'formos',\n  'forem',\n  'serei',\n  'será',\n  'seremos',\n  'serão',\n  'seria',\n  'seríamos',\n  'seriam',\n  'tenho',\n  'tem',\n  'temos',\n  'tém',\n  'tinha',\n  'tínhamos',\n  'tinham',\n  'tive',\n  'teve',\n  'tivemos',\n  'tiveram',\n  'tivera',\n  'tivéramos',\n  'tenha',\n  'tenhamos',\n  'tenham',\n  'tivesse',\n  'tivéssemos',\n  'tivessem',\n  'tiver',\n  'tivermos',\n  'tiverem',\n  'terei',\n  'terá',\n  'teremos',\n  'terão',\n  'teria',\n  'teríamos',\n  'teriam',\n]\n", "export const nl = [\n  'de',\n  'en',\n  'van',\n  'ik',\n  'te',\n  'dat',\n  'die',\n  'in',\n  'een',\n  'hij',\n  'het',\n  'niet',\n  'zijn',\n  'is',\n  'was',\n  'op',\n  'aan',\n  'met',\n  'als',\n  'voor',\n  'had',\n  'er',\n  'maar',\n  'om',\n  'hem',\n  'dan',\n  'zou',\n  'of',\n  'wat',\n  'mijn',\n  'men',\n  'dit',\n  'zo',\n  'door',\n  'over',\n  'ze',\n  'zich',\n  'bij',\n  'ook',\n  'tot',\n  'je',\n  'mij',\n  'uit',\n  'der',\n  'daar',\n  'haar',\n  'naar',\n  'heb',\n  'hoe',\n  'heeft',\n  'hebben',\n  'deze',\n  'u',\n  'want',\n  'nog',\n  'zal',\n  'me',\n  'zij',\n  'nu',\n  'ge',\n  'geen',\n  'omdat',\n  'iets',\n  'worden',\n  'toch',\n  'al',\n  'waren',\n  'veel',\n  'meer',\n  'doen',\n  'toen',\n  'moet',\n  'ben',\n  'zonder',\n  'kan',\n  'hun',\n  'dus',\n  'alles',\n  'onder',\n  'ja',\n  'eens',\n  'hier',\n  'wie',\n  'werd',\n  'altijd',\n  'doch',\n  'wordt',\n  'wezen',\n  'kunnen',\n  'ons',\n  'zelf',\n  'tegen',\n  'na',\n  'reeds',\n  'wil',\n  'kon',\n  'niets',\n  'uw',\n  'iemand',\n  'geweest',\n  'andere',\n]\n", "export const se = [\n  'och',\n  'det',\n  'att',\n  'i',\n  'en',\n  'jag',\n  'hon',\n  'som',\n  'han',\n  'på',\n  'den',\n  'med',\n  'var',\n  'sig',\n  'för',\n  'så',\n  'till',\n  'är',\n  'men',\n  'ett',\n  'om',\n  'hade',\n  'de',\n  'av',\n  'icke',\n  'mig',\n  'du',\n  'henne',\n  'då',\n  'sin',\n  'nu',\n  'har',\n  'inte',\n  'hans',\n  'honom',\n  'skulle',\n  'hennes',\n  'där',\n  'min',\n  'man',\n  'ej',\n  'vid',\n  'kunde',\n  'något',\n  'från',\n  'ut',\n  'när',\n  'efter',\n  'upp',\n  'vi',\n  'dem',\n  'vara',\n  'vad',\n  'över',\n  'än',\n  'dig',\n  'kan',\n  'sina',\n  'här',\n  'ha',\n  'mot',\n  'alla',\n  'under',\n  'någon',\n  'eller',\n  'allt',\n  'mycket',\n  'sedan',\n  'ju',\n  'denna',\n  'själv',\n  'detta',\n  'åt',\n  'utan',\n  'varit',\n  'hur',\n  'ingen',\n  'mitt',\n  'ni',\n  'bli',\n  'blev',\n  'oss',\n  'din',\n  'dessa',\n  'några',\n  'deras',\n  'blir',\n  'mina',\n  'samma',\n  'vilken',\n  'er',\n  'sådan',\n  'vår',\n  'blivit',\n  'dess',\n  'inom',\n  'mellan',\n  'sådant',\n  'varför',\n  'varje',\n  'vilka',\n  'ditt',\n  'vem',\n  'vilket',\n  'sitta',\n  'sådana',\n  'vart',\n  'dina',\n  'vars',\n  'vårt',\n  'våra',\n  'ert',\n  'era',\n  'vilkas',\n]\n", "export const ru = [\n  'и',\n  'в',\n  'во',\n  'не',\n  'что',\n  'он',\n  'на',\n  'я',\n  'с',\n  'со',\n  'как',\n  'а',\n  'то',\n  'все',\n  'она',\n  'так',\n  'его',\n  'но',\n  'да',\n  'ты',\n  'к',\n  'у',\n  'же',\n  'вы',\n  'за',\n  'бы',\n  'по',\n  'только',\n  'ее',\n  'мне',\n  'было',\n  'вот',\n  'от',\n  'меня',\n  'еще',\n  'нет',\n  'о',\n  'из',\n  'ему',\n  'теперь',\n  'когда',\n  'даже',\n  'ну',\n  'вдруг',\n  'ли',\n  'если',\n  'уже',\n  'или',\n  'ни',\n  'быть',\n  'был',\n  'него',\n  'до',\n  'вас',\n  'нибудь',\n  'опять',\n  'уж',\n  'вам',\n  'сказал',\n  'ведь',\n  'там',\n  'потом',\n  'себя',\n  'ничего',\n  'ей',\n  'может',\n  'они',\n  'тут',\n  'где',\n  'есть',\n  'надо',\n  'ней',\n  'для',\n  'мы',\n  'тебя',\n  'их',\n  'чем',\n  'была',\n  'сам',\n  'чтоб',\n  'без',\n  'будто',\n  'человек',\n  'чего',\n  'раз',\n  'тоже',\n  'себе',\n  'под',\n  'жизнь',\n  'будет',\n  'ж',\n  'тогда',\n  'кто',\n  'этот',\n  'говорил',\n  'того',\n  'потому',\n  'этого',\n  'какой',\n  'совсем',\n  'ним',\n  'здесь',\n  'этом',\n  'один',\n  'почти',\n  'мой',\n  'тем',\n  'чтобы',\n  'нее',\n  'кажется',\n  'сейчас',\n  'были',\n  'куда',\n  'зачем',\n  'сказать',\n  'всех',\n  'никогда',\n  'сегодня',\n  'можно',\n  'при',\n  'наконец',\n  'два',\n  'об',\n  'другой',\n  'хоть',\n  'после',\n  'над',\n  'больше',\n  'тот',\n  'через',\n  'эти',\n  'нас',\n  'про',\n  'всего',\n  'них',\n  'какая',\n  'много',\n  'разве',\n  'сказала',\n  'три',\n  'эту',\n  'моя',\n  'впрочем',\n  'хорошо',\n  'свою',\n  'этой',\n  'перед',\n  'иногда',\n  'лучше',\n  'чуть',\n  'том',\n  'нельзя',\n  'такой',\n  'им',\n  'более',\n  'всегда',\n  'конечно',\n  'всю',\n  'между',\n]\n", "export const no = [\n  'og',\n  'i',\n  'jeg',\n  'det',\n  'at',\n  'en',\n  'et',\n  'den',\n  'til',\n  'er',\n  'som',\n  'på',\n  'de',\n  'med',\n  'han',\n  'av',\n  'ikke',\n  'ikkje',\n  'der',\n  'så',\n  'var',\n  'meg',\n  'seg',\n  'men',\n  'ett',\n  'har',\n  'om',\n  'vi',\n  'min',\n  'mitt',\n  'ha',\n  'hadde',\n  'hun',\n  'nå',\n  'over',\n  'da',\n  'ved',\n  'fra',\n  'du',\n  'ut',\n  'sin',\n  'dem',\n  'oss',\n  'opp',\n  'man',\n  'kan',\n  'hans',\n  'hvor',\n  'eller',\n  'hva',\n  'skal',\n  'selv',\n  'sjøl',\n  'her',\n  'alle',\n  'vil',\n  'bli',\n  'ble',\n  'blei',\n  'blitt',\n  'kunne',\n  'inn',\n  'når',\n  'være',\n  'kom',\n  'noen',\n  'noe',\n  'ville',\n  'dere',\n  'som',\n  'deres',\n  'kun',\n  'ja',\n  'etter',\n  'ned',\n  'skulle',\n  'denne',\n  'for',\n  'deg',\n  'si',\n  'sine',\n  'sitt',\n  'mot',\n  'å',\n  'meget',\n  'hvorfor',\n  'dette',\n  'disse',\n  'uten',\n  'hvordan',\n  'ingen',\n  'din',\n  'ditt',\n  'blir',\n  'samme',\n  'hvilken',\n  'hvilke',\n  'sånn',\n  'inni',\n  'mellom',\n  'vår',\n  'hver',\n  'hvem',\n  'vors',\n  'hvis',\n  'både',\n  'bare',\n  'enn',\n  'fordi',\n  'før',\n  'mange',\n  'også',\n  'slik',\n  'vært',\n  'være',\n  'båe',\n  'begge',\n  'siden',\n  'dykk',\n  'dykkar',\n  'dei',\n  'deira',\n  'deires',\n  'deim',\n  'di',\n  'då',\n  'eg',\n  'ein',\n  'eit',\n  'eitt',\n  'elles',\n  'honom',\n  'hjå',\n  'ho',\n  'hoe',\n  'henne',\n  'hennar',\n  'hennes',\n  'hoss',\n  'hossen',\n  'ikkje',\n  'ingi',\n  'inkje',\n  'korleis',\n  'korso',\n  'kva',\n  'kvar',\n  'kvarhelst',\n  'kven',\n  'kvi',\n  'kvifor',\n  'me',\n  'medan',\n  'mi',\n  'mine',\n  'mykje',\n  'no',\n  'nokon',\n  'noka',\n  'nokor',\n  'noko',\n  'nokre',\n  'si',\n  'sia',\n  'sidan',\n  'so',\n  'somt',\n  'somme',\n  'um',\n  'upp',\n  'vere',\n  'vore',\n  'verte',\n  'vort',\n  'varte',\n  'vart',\n]\n", "export const de = [\n  'aber',\n  'alle',\n  'allem',\n  'allen',\n  'aller',\n  'alles',\n  'als',\n  'also',\n  'am',\n  'an',\n  'ander',\n  'andere',\n  'anderem',\n  'anderen',\n  'anderer',\n  'anderes',\n  'anderm',\n  'andern',\n  'anderr',\n  'anders',\n  'auch',\n  'auf',\n  'aus',\n  'bei',\n  'bin',\n  'bis',\n  'bist',\n  'da',\n  'damit',\n  'dann',\n  'der',\n  'den',\n  'des',\n  'dem',\n  'die',\n  'das',\n  'daß',\n  'derselbe',\n  'derselben',\n  'denselben',\n  'desselben',\n  'demselben',\n  'dieselbe',\n  'dieselben',\n  'dasselbe',\n  'dazu',\n  'dein',\n  'deine',\n  'deinem',\n  'deinen',\n  'deiner',\n  'deines',\n  'denn',\n  'derer',\n  'dessen',\n  'dich',\n  'dir',\n  'du',\n  'dies',\n  'diese',\n  'diesem',\n  'diesen',\n  'dieser',\n  'dieses',\n  'doch',\n  'dort',\n  'durch',\n  'ein',\n  'eine',\n  'einem',\n  'einen',\n  'einer',\n  'eines',\n  'einig',\n  'einige',\n  'einigem',\n  'einigen',\n  'einiger',\n  'einiges',\n  'einmal',\n  'er',\n  'ihn',\n  'ihm',\n  'es',\n  'etwas',\n  'euer',\n  'eure',\n  'eurem',\n  'euren',\n  'eurer',\n  'eures',\n  'für',\n  'gegen',\n  'gewesen',\n  'hab',\n  'habe',\n  'haben',\n  'hat',\n  'hatte',\n  'hatten',\n  'hier',\n  'hin',\n  'hinter',\n  'ich',\n  'mich',\n  'mir',\n  'ihr',\n  'ihre',\n  'ihrem',\n  'ihren',\n  'ihrer',\n  'ihres',\n  'euch',\n  'im',\n  'in',\n  'indem',\n  'ins',\n  'ist',\n  'jede',\n  'jedem',\n  'jeden',\n  'jeder',\n  'jedes',\n  'jene',\n  'jenem',\n  'jenen',\n  'jener',\n  'jenes',\n  'jetzt',\n  'kann',\n  'kein',\n  'keine',\n  'keinem',\n  'keinen',\n  'keiner',\n  'keines',\n  'können',\n  'könnte',\n  'machen',\n  'man',\n  'manche',\n  'manchem',\n  'manchen',\n  'mancher',\n  'manches',\n  'mein',\n  'meine',\n  'meinem',\n  'meinen',\n  'meiner',\n  'meines',\n  'mit',\n  'muss',\n  'musste',\n  'nach',\n  'nicht',\n  'nichts',\n  'noch',\n  'nun',\n  'nur',\n  'ob',\n  'oder',\n  'ohne',\n  'sehr',\n  'sein',\n  'seine',\n  'seinem',\n  'seinen',\n  'seiner',\n  'seines',\n  'selbst',\n  'sich',\n  'sie',\n  'ihnen',\n  'sind',\n  'so',\n  'solche',\n  'solchem',\n  'solchen',\n  'solcher',\n  'solches',\n  'soll',\n  'sollte',\n  'sondern',\n  'sonst',\n  'über',\n  'um',\n  'und',\n  'uns',\n  'unse',\n  'unsem',\n  'unsen',\n  'unser',\n  'unses',\n  'unter',\n  'viel',\n  'vom',\n  'von',\n  'vor',\n  'während',\n  'war',\n  'waren',\n  'warst',\n  'was',\n  'weg',\n  'weil',\n  'weiter',\n  'welche',\n  'welchem',\n  'welchen',\n  'welcher',\n  'welches',\n  'wenn',\n  'werde',\n  'werden',\n  'wie',\n  'wieder',\n  'will',\n  'wir',\n  'wird',\n  'wirst',\n  'wo',\n  'wollen',\n  'wollte',\n  'würde',\n  'würden',\n  'zu',\n  'zum',\n  'zur',\n  'zwar',\n  'zwischen',\n]\n", "export const dk = [\n  'og',\n  'i',\n  'jeg',\n  'det',\n  'at',\n  'en',\n  'den',\n  'til',\n  'er',\n  'som',\n  'på',\n  'de',\n  'med',\n  'han',\n  'af',\n  'for',\n  'ikke',\n  'der',\n  'var',\n  'mig',\n  'sig',\n  'men',\n  'et',\n  'har',\n  'om',\n  'vi',\n  'min',\n  'havde',\n  'ham',\n  'hun',\n  'nu',\n  'over',\n  'da',\n  'fra',\n  'du',\n  'ud',\n  'sin',\n  'dem',\n  'os',\n  'op',\n  'man',\n  'hans',\n  'hvor',\n  'eller',\n  'hvad',\n  'skal',\n  'selv',\n  'her',\n  'alle',\n  'vil',\n  'blev',\n  'kunne',\n  'ind',\n  'når',\n  'være',\n  'dog',\n  'noget',\n  'ville',\n  'jo',\n  'deres',\n  'efter',\n  'ned',\n  'skulle',\n  'denne',\n  'end',\n  'dette',\n  'mit',\n  'også',\n  'under',\n  'have',\n  'dig',\n  'anden',\n  'hende',\n  'mine',\n  'alt',\n  'meget',\n  'sit',\n  'sine',\n  'vor',\n  'mod',\n  'disse',\n  'hvis',\n  'din',\n  'nogle',\n  'hos',\n  'blive',\n  'mange',\n  'ad',\n  'bliver',\n  'hendes',\n  'været',\n  'thi',\n  'jer',\n  'sådan',\n]\n", "export const fi = [\n  'olla',\n  'olen',\n  'olet',\n  'on',\n  'olemme',\n  'olette',\n  'ovat',\n  'ole',\n  'oli',\n  'olisi',\n  'olisit',\n  'olisin',\n  'olisimme',\n  'olisitte',\n  'olisivat',\n  'olit',\n  'olin',\n  'olimme',\n  'olitte',\n  'olivat',\n  'ollut',\n  'olleet',\n  'en',\n  'et',\n  'ei',\n  'emme',\n  'ette',\n  'eivät',\n  'minä',\n  'minun',\n  'minut',\n  'minua',\n  'minussa',\n  'minusta',\n  'minuun',\n  'minulla',\n  'minulta',\n  'minulle',\n  'sinä',\n  'sinun',\n  'sinut',\n  'sinua',\n  'sinussa',\n  'sinusta',\n  'sinuun',\n  'sinulla',\n  'sinulta',\n  'sinulle',\n  'hän',\n  'hänen',\n  'hänet',\n  'häntä',\n  'hänessä',\n  'hänestä',\n  'häneen',\n  'hänellä',\n  'häneltä',\n  'hänelle',\n  'me',\n  'meidän',\n  'meidät',\n  'meitä',\n  'meissä',\n  'meistä',\n  'meihin',\n  'meillä',\n  'meiltä',\n  'meille',\n  'te',\n  'teidän',\n  'teidät',\n  'teitä',\n  'teissä',\n  'teistä',\n  'teihin',\n  'teillä',\n  'teiltä',\n  'teille',\n  'he',\n  'heidän',\n  'heidät',\n  'heitä',\n  'heissä',\n  'heistä',\n  'heihin',\n  'heillä',\n  'heiltä',\n  'heille',\n  'tämä',\n  'tämän',\n  'tätä',\n  'tässä',\n  'tästä',\n  'tähän',\n  'tällä',\n  'tältä',\n  'tälle',\n  'tänä',\n  'täksi',\n  'tuo',\n  'tuon',\n  'tuota',\n  'tuossa',\n  'tuosta',\n  'tuohon',\n  'tuolla',\n  'tuolta',\n  'tuolle',\n  'tuona',\n  'tuoksi',\n  'se',\n  'sen',\n  'sitä',\n  'siinä',\n  'siitä',\n  'siihen',\n  'sillä',\n  'siltä',\n  'sille',\n  'sinä',\n  'siksi',\n  'nämä',\n  'näiden',\n  'näitä',\n  'näissä',\n  'näistä',\n  'näihin',\n  'näillä',\n  'näiltä',\n  'näille',\n  'näinä',\n  'näiksi',\n  'nuo',\n  'noiden',\n  'noita',\n  'noissa',\n  'noista',\n  'noihin',\n  'noilla',\n  'noilta',\n  'noille',\n  'noina',\n  'noiksi',\n  'ne',\n  'niiden',\n  'niitä',\n  'niissä',\n  'niistä',\n  'niihin',\n  'niillä',\n  'niiltä',\n  'niille',\n  'niinä',\n  'niiksi',\n  'kuka',\n  'kenen',\n  'kenet',\n  'ketä',\n  'kenessä',\n  'kenestä',\n  'keneen',\n  'kenellä',\n  'keneltä',\n  'kenelle',\n  'kenenä',\n  'keneksi',\n  'ketkä',\n  'keiden',\n  'ketkä',\n  'keitä',\n  'keissä',\n  'keistä',\n  'keihin',\n  'keillä',\n  'keiltä',\n  'keille',\n  'keinä',\n  'keiksi',\n  'mikä',\n  'minkä',\n  'minkä',\n  'mitä',\n  'missä',\n  'mistä',\n  'mihin',\n  'millä',\n  'miltä',\n  'mille',\n  'minä',\n  'miksi',\n  'mitkä',\n  'joka',\n  'jonka',\n  'jota',\n  'jossa',\n  'josta',\n  'johon',\n  'jolla',\n  'jolta',\n  'jolle',\n  'jona',\n  'joksi',\n  'jotka',\n  'joiden',\n  'joita',\n  'joissa',\n  'joista',\n  'joihin',\n  'joilla',\n  'joilta',\n  'joille',\n  'joina',\n  'joiksi',\n  'että',\n  'ja',\n  'jos',\n  'koska',\n  'kuin',\n  'mutta',\n  'niin',\n  'sekä',\n  'sillä',\n  'tai',\n  'vaan',\n  'vai',\n  'vaikka',\n  'kanssa',\n  'mukaan',\n  'noin',\n  'poikki',\n  'yli',\n  'kun',\n  'niin',\n  'nyt',\n  'itse',\n]\n", "import type { Language } from '../languages.js'\nimport { en } from './en.js'\nimport { it } from './it.js'\nimport { fr } from './fr.js'\nimport { es } from './es.js'\nimport { pt } from './pt.js'\nimport { nl } from './nl.js'\nimport { se } from './se.js'\nimport { ru } from './ru.js'\nimport { no } from './no.js'\nimport { de } from './de.js'\nimport { dk } from './dk.js'\nimport { fi } from './fi.js'\n\ntype StopWordsMap = {\n  [key in Language]: string[]\n}\n\nexport const stopWords: Partial<StopWordsMap> = {\n  english: en,\n  italian: it,\n  french: fr,\n  spanish: es,\n  portuguese: pt,\n  dutch: nl,\n  swedish: se,\n  russian: ru,\n  norwegian: no,\n  german: de,\n  danish: dk,\n  finnish: fi,\n}\n\nexport const availableStopWords = Object.keys(stopWords)\n", "// eslint-disable-next-line @typescript-eslint/ban-ts-comment\n// @ts-nocheck\n\nconst step2List = {\n  ational: 'ate',\n  tional: 'tion',\n  enci: 'ence',\n  anci: 'ance',\n  izer: 'ize',\n  bli: 'ble',\n  alli: 'al',\n  entli: 'ent',\n  eli: 'e',\n  ousli: 'ous',\n  ization: 'ize',\n  ation: 'ate',\n  ator: 'ate',\n  alism: 'al',\n  iveness: 'ive',\n  fulness: 'ful',\n  ousness: 'ous',\n  aliti: 'al',\n  iviti: 'ive',\n  biliti: 'ble',\n  logi: 'log',\n}\n\nconst step3List = {\n  icate: 'ic',\n  ative: '',\n  alize: 'al',\n  iciti: 'ic',\n  ical: 'ic',\n  ful: '',\n  ness: '',\n}\n\n// Consonant\nconst c = '[^aeiou]'\n// Vowel\nconst v = '[aeiouy]'\n// Consonant sequence\nconst C = c + '[^aeiouy]*'\n// Vowel sequence\nconst V = v + '[aeiou]*'\n\n// [C]VC... is m>0\nconst mgr0 = '^(' + C + ')?' + V + C\n// [C]VC[V] is m=1\nconst meq1 = '^(' + C + ')?' + V + C + '(' + V + ')?$'\n// [C]VCVC... is m>1\nconst mgr1 = '^(' + C + ')?' + V + C + V + C\n// vowel in stem\nconst s_v = '^(' + C + ')?' + v\n\nexport function stemmer(w) {\n  let stem\n  let suffix\n  let re\n  let re2\n  let re3\n  let re4\n\n  if (w.length < 3) {\n    return w\n  }\n\n  const firstch = w.substring(0, 1)\n  if (firstch == 'y') {\n    w = firstch.toUpperCase() + w.substring(1)\n  }\n\n  re = /^(.+?)(ss|i)es$/\n  re2 = /^(.+?)([^s])s$/\n\n  if (re.test(w)) {\n    w = w.replace(re, '$1$2')\n  } else if (re2.test(w)) {\n    w = w.replace(re2, '$1$2')\n  }\n\n  re = /^(.+?)eed$/\n  re2 = /^(.+?)(ed|ing)$/\n  if (re.test(w)) {\n    const fp = re.exec(w)\n    re = new RegExp(mgr0)\n    if (re.test(fp[1])) {\n      re = /.$/\n      w = w.replace(re, '')\n    }\n  } else if (re2.test(w)) {\n    const fp = re2.exec(w)\n    stem = fp[1]\n    re2 = new RegExp(s_v)\n    if (re2.test(stem)) {\n      w = stem\n      re2 = /(at|bl|iz)$/\n      re3 = new RegExp('([^aeiouylsz])\\\\1$')\n      re4 = new RegExp('^' + C + v + '[^aeiouwxy]$')\n      if (re2.test(w)) {\n        w = w + 'e'\n      } else if (re3.test(w)) {\n        re = /.$/\n        w = w.replace(re, '')\n      } else if (re4.test(w)) {\n        w = w + 'e'\n      }\n    }\n  }\n\n  re = /^(.+?)y$/\n  if (re.test(w)) {\n    const fp = re.exec(w)\n    stem = fp?.[1]\n    re = new RegExp(s_v)\n    if (stem && re.test(stem)) {\n      w = stem + 'i'\n    }\n  }\n\n  re =\n    /^(.+?)(ational|tional|enci|anci|izer|bli|alli|entli|eli|ousli|ization|ation|ator|alism|iveness|fulness|ousness|aliti|iviti|biliti|logi)$/\n  if (re.test(w)) {\n    const fp = re.exec(w)\n    stem = fp?.[1]\n    suffix = fp?.[2]\n    re = new RegExp(mgr0)\n    if (stem && re.test(stem)) {\n      // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n      // @ts-ignore\n      w = stem + step2List[suffix]\n    }\n  }\n\n  re = /^(.+?)(icate|ative|alize|iciti|ical|ful|ness)$/\n  if (re.test(w)) {\n    const fp = re.exec(w)\n    stem = fp?.[1]\n    suffix = fp?.[2]\n    re = new RegExp(mgr0)\n    // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n    // @ts-ignore\n    if (stem && re.test(stem)) {\n      // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n      // @ts-ignore\n      w = stem + step3List[suffix]\n    }\n  }\n\n  re = /^(.+?)(al|ance|ence|er|ic|able|ible|ant|ement|ment|ent|ou|ism|ate|iti|ous|ive|ize)$/\n  re2 = /^(.+?)(s|t)(ion)$/\n  if (re.test(w)) {\n    const fp = re.exec(w)\n    stem = fp?.[1]\n    re = new RegExp(mgr1)\n    if (stem && re.test(stem)) {\n      w = stem\n    }\n  } else if (re2.test(w)) {\n    const fp = re2.exec(w)\n    stem = fp?.[1] ?? '' + fp?.[2] ?? ''\n    re2 = new RegExp(mgr1)\n    if (re2.test(stem)) {\n      w = stem\n    }\n  }\n\n  re = /^(.+?)e$/\n  if (re.test(w)) {\n    const fp = re.exec(w)\n    stem = fp?.[1]\n    re = new RegExp(mgr1)\n    re2 = new RegExp(meq1)\n    re3 = new RegExp('^' + C + v + '[^aeiouwxy]$')\n    if (stem && (re.test(stem) || (re2.test(stem) && !re3.test(stem)))) {\n      w = stem\n    }\n  }\n\n  re = /ll$/\n  re2 = new RegExp(mgr1)\n  if (re.test(w) && re2.test(w)) {\n    re = /.$/\n    w = w.replace(re, '')\n  }\n\n  if (firstch == 'y') {\n    w = firstch.toLowerCase() + w.substring(1)\n  }\n\n  return w\n}\n", "import { createError } from '../errors.js'\nimport { ISorter, OpaqueSorter, Orama, Schema, SorterConfig, SorterParams, SortType, SortValue } from '../types.js'\n\ninterface PropertySort<K> {\n  docs: Record<string, number>\n  orderedDocs: [string, K][]\n  type: SortType\n}\n\nexport interface Sorter extends OpaqueSorter {\n  enabled: boolean\n  sortableProperties: string[]\n  sortablePropertiesWithTypes: Record<string, SortType>\n  sorts: Record<string, PropertySort<number | string | boolean>>\n}\n\nexport type DefaultSorter = ISorter<Sorter>\n\nfunction innerCreate(schema: Schema, sortableDeniedProperties: string[], prefix: string): Sorter {\n  const sorter: Sorter = {\n    enabled: true,\n    sortableProperties: [],\n    sortablePropertiesWithTypes: {},\n    sorts: {},\n  }\n\n  for (const [prop, type] of Object.entries(schema)) {\n    const typeActualType = typeof type\n    const path = `${prefix}${prefix ? '.' : ''}${prop}`\n\n    if (sortableDeniedProperties.includes(path)) {\n      continue\n    }\n\n    if (typeActualType === 'object' && !Array.isArray(type)) {\n      // Nested\n      const ret = innerCreate(type as Schema, sortableDeniedProperties, path)\n      sorter.sortableProperties.push(...ret.sortableProperties)\n      sorter.sorts = {\n        ...sorter.sorts,\n        ...ret.sorts,\n      }\n      sorter.sortablePropertiesWithTypes = {\n        ...sorter.sortablePropertiesWithTypes,\n        ...ret.sortablePropertiesWithTypes,\n      }\n      continue\n    }\n\n    switch (type) {\n      case 'boolean':\n      case 'number':\n      case 'string':\n        sorter.sortableProperties.push(path)\n        sorter.sortablePropertiesWithTypes[path] = type\n        sorter.sorts[path] = {\n          docs: {},\n          orderedDocs: [],\n          type: type,\n        }\n        break\n      case 'boolean[]':\n      case 'number[]':\n      case 'string[]':\n        // We don't allow to sort by arrays\n        continue\n      default:\n        throw createError('INVALID_SORT_SCHEMA_TYPE', Array.isArray(type) ? 'array' : (type as unknown as string), path)\n    }\n  }\n\n  return sorter\n}\n\nasync function create(_: Orama, schema: Schema, config?: SorterConfig): Promise<Sorter> {\n  const isSortEnabled = config?.enabled !== false\n  if (!isSortEnabled) {\n    return {\n      disabled: true,\n    } as unknown as Sorter\n  }\n  return innerCreate(schema, (config || {}).unsortableProperties || [], '')\n}\n\nfunction stringSort(value: SortValue, language: string | undefined, d: [string, SortValue]): boolean {\n  return (d[1] as string).localeCompare(value as string, language) > 0\n}\nfunction numerSort(value: SortValue, d: [string, SortValue]): boolean {\n  return (d[1] as number) > (value as number)\n}\nfunction booleanSort(value: SortValue, d: [string, SortValue]): boolean {\n  return d[1] as boolean\n}\n\nasync function insert(\n  sorter: Sorter,\n  prop: string,\n  id: string,\n  value: SortValue,\n  schemaType: SortType,\n  language: string | undefined,\n): Promise<void> {\n  if (!sorter.enabled) {\n    return\n  }\n  const s = sorter.sorts[prop]\n\n  let predicate: (value: [string, SortValue]) => boolean\n  switch (schemaType) {\n    case 'string':\n      predicate = stringSort.bind(null, value, language)\n      break\n    case 'number':\n      predicate = numerSort.bind(null, value)\n      break\n    case 'boolean':\n      predicate = booleanSort.bind(null, value)\n      break\n  }\n\n  // Find the right position to insert the element\n  let index = s.orderedDocs.findIndex(predicate)\n  if (index === -1) {\n    index = s.orderedDocs.length\n    s.orderedDocs.push([id, value])\n  } else {\n    s.orderedDocs.splice(index, 0, [id, value])\n  }\n  s.docs[id] = index\n\n  // Increment position for the greather documents\n  const orderedDocsLength = s.orderedDocs.length\n  for (let i = index + 1; i < orderedDocsLength; i++) {\n    const docId = s.orderedDocs[i][0]\n    s.docs[docId]++\n  }\n}\n\nasync function remove(sorter: Sorter, prop: string, id: string) {\n  if (!sorter.enabled) {\n    return\n  }\n  const s = sorter.sorts[prop] as PropertySort<SortValue>\n\n  const index = s.docs[id]\n  delete s.docs[id]\n\n  // Decrement position for the greather documents\n  const orderedDocsLength = s.orderedDocs.length\n  for (let i = index + 1; i < orderedDocsLength; i++) {\n    const docId = s.orderedDocs[i][0]\n    s.docs[docId]--\n  }\n\n  s.orderedDocs.splice(index, 1)\n}\n\nasync function sortBy(sorter: Sorter, docIds: [string, number][], by: SorterParams): Promise<[string, number][]> {\n  if (!sorter.enabled) {\n    throw createError('SORT_DISABLED')\n  }\n\n  const property = by.property\n  const isDesc = by.order === 'DESC'\n\n  const s = sorter.sorts[property]\n  if (!s) {\n    throw createError('UNABLE_TO_SORT_ON_UNKNOWN_FIELD', property, sorter.sortableProperties.join(', '))\n  }\n\n  docIds.sort((a, b) => {\n    // This sort algorithm works leveraging on\n    // that s.docs is a map of docId -> position\n    // If a document is not indexed, it will be not present in the map\n    const indexOfA = s.docs[a[0]]\n    const indexOfB = s.docs[b[0]]\n    const isAIndexed = typeof indexOfA !== 'undefined'\n    const isBIndexed = typeof indexOfB !== 'undefined'\n\n    if (!isAIndexed && !isBIndexed) {\n      return 0\n    }\n    // unindexed documents are always at the end\n    if (!isAIndexed) {\n      return 1\n    }\n    if (!isBIndexed) {\n      return -1\n    }\n\n    return isDesc ? indexOfB - indexOfA : indexOfA - indexOfB\n  })\n\n  return docIds\n}\n\nasync function getSortableProperties(sorter: Sorter): Promise<string[]> {\n  if (!sorter.enabled) {\n    return []\n  }\n\n  return sorter.sortableProperties\n}\n\nasync function getSortablePropertiesWithTypes(sorter: Sorter): Promise<Record<string, SortType>> {\n  if (!sorter.enabled) {\n    return {}\n  }\n\n  return sorter.sortablePropertiesWithTypes\n}\n\nexport async function load<R = unknown>(raw: R): Promise<Sorter> {\n  const rawDocument = raw as Sorter\n  if (!rawDocument.enabled) {\n    return {\n      enabled: false,\n    } as unknown as Sorter\n  }\n\n  return {\n    sortableProperties: rawDocument.sortableProperties,\n    sortablePropertiesWithTypes: rawDocument.sortablePropertiesWithTypes,\n    sorts: rawDocument.sorts,\n    enabled: true,\n  }\n}\n\nexport async function save<R = unknown>(sorter: Sorter): Promise<R> {\n  if (!sorter.enabled) {\n    return {\n      enabled: false,\n    } as unknown as R\n  }\n\n  return {\n    sortableProperties: sorter.sortableProperties,\n    sortablePropertiesWithTypes: sorter.sortablePropertiesWithTypes,\n    sorts: sorter.sorts,\n    enabled: sorter.enabled,\n  } as R\n}\n\nexport async function createSorter(): Promise<DefaultSorter> {\n  return {\n    create,\n    insert,\n    remove,\n    save,\n    load,\n    sortBy,\n    getSortableProperties,\n    getSortablePropertiesWithTypes,\n  }\n}\n", "import { formatElapsedTime, getDocumentIndexId, getDocumentProperties, validateSchema } from '../components/defaults.js'\nimport { createDocumentsStore } from '../components/documents-store.js'\nimport { OBJECT_COMPONENTS, FUNCTION_COMPONENTS, SINGLE_OR_ARRAY_COMPONENTS } from '../components/hooks.js'\nimport { createIndex } from '../components/index.js'\nimport { createTokenizer } from '../components/tokenizer/index.js'\nimport { createError } from '../errors.js'\nimport { uniqueId } from '../utils.js'\nimport {\n  ArrayCallbackComponents,\n  Components,\n  Orama,\n  Schema,\n  FunctionComponents,\n  SingleOrArrayCallbackComponents,\n  Tokenizer,\n  SorterConfig,\n  OpaqueIndex,\n  OpaqueDocumentStore,\n  OpaqueSorter,\n  ProvidedTypes,\n} from '../types.js'\nimport { createSorter } from '../components/sorter.js'\n\ninterface CreateArguments<P extends ProvidedTypes> {\n  schema: Schema\n  sort?: SorterConfig\n  language?: string\n  components?: Components<P>\n  id?: string\n}\n\nfunction validateComponents<P extends ProvidedTypes>(components: Components<P>) {\n  const defaultComponents = {\n    formatElapsedTime,\n    getDocumentIndexId,\n    getDocumentProperties,\n    validateSchema,\n  }\n\n  for (const rawKey of FUNCTION_COMPONENTS) {\n    const key = rawKey as keyof FunctionComponents\n\n    if (components[key]) {\n      if (typeof components[key] !== 'function') {\n        throw createError('COMPONENT_MUST_BE_FUNCTION', key)\n      }\n    } else {\n      // @ts-expect-error TSC is unable to resolve this\n      components[key] = defaultComponents[key]\n    }\n  }\n\n  for (const rawKey of SINGLE_OR_ARRAY_COMPONENTS) {\n    const key = rawKey as keyof ArrayCallbackComponents<P>\n\n    if (!components[key]) {\n      components[key] = []\n    } else if (!Array.isArray(components[key])) {\n      // @ts-expect-error TSC is unable to resolve this\n      components[key] = [components[key]]\n    }\n\n    for (const fn of components[key] as unknown as SingleOrArrayCallbackComponents<P>[]) {\n      if (typeof fn !== 'function') {\n        throw createError('COMPONENT_MUST_BE_FUNCTION_OR_ARRAY_FUNCTIONS', key)\n      }\n    }\n  }\n\n  for (const rawKey of Object.keys(components)) {\n    if (\n      !OBJECT_COMPONENTS.includes(rawKey) &&\n      !FUNCTION_COMPONENTS.includes(rawKey) &&\n      !SINGLE_OR_ARRAY_COMPONENTS.includes(rawKey)\n    ) {\n      throw createError('UNSUPPORTED_COMPONENT', rawKey)\n    }\n  }\n}\n\nexport async function create<P extends ProvidedTypes>({\n  schema,\n  sort,\n  language,\n  components,\n  id,\n}: CreateArguments<P>): Promise<Orama<P>> {\n  if (!components) {\n    components = {}\n  }\n\n  if (!id) {\n    id = await uniqueId()\n  }\n\n  let tokenizer = components.tokenizer as Tokenizer\n  let index: OpaqueIndex | undefined = components.index\n  let documentsStore: OpaqueDocumentStore | undefined = components.documentsStore\n  let sorter: OpaqueSorter | undefined = components.sorter\n\n  if (!tokenizer) {\n    // Use the default tokenizer\n    tokenizer = await createTokenizer({ language: language ?? 'english' })\n  } else if (!tokenizer.tokenize) {\n    // If there is no tokenizer function, we assume this is a TokenizerConfig\n    tokenizer = await createTokenizer(tokenizer)\n  }\n\n  if (components.tokenizer && language) {\n    // Accept language only if a tokenizer is not provided\n    throw createError('NO_LANGUAGE_WITH_CUSTOM_TOKENIZER')\n  }\n\n  if (!index) {\n    index = await createIndex()\n  }\n\n  if (!sorter) {\n    sorter = await createSorter()\n  }\n\n  if (!documentsStore) {\n    documentsStore = await createDocumentsStore()\n  }\n\n  // Validate all other components\n  validateComponents(components)\n\n  // Assign only recognized components and hooks\n  const {\n    getDocumentProperties,\n    getDocumentIndexId,\n    validateSchema,\n    beforeInsert,\n    afterInsert,\n    beforeRemove,\n    afterRemove,\n    beforeUpdate,\n    afterUpdate,\n    beforeMultipleInsert,\n    afterMultipleInsert,\n    beforeMultipleRemove,\n    afterMultipleRemove,\n    beforeMultipleUpdate,\n    afterMultipleUpdate,\n    formatElapsedTime,\n  } = components\n\n  const orama = {\n    data: {},\n    caches: {},\n    schema,\n    tokenizer,\n    index,\n    sorter,\n    documentsStore,\n    getDocumentProperties,\n    getDocumentIndexId,\n    validateSchema,\n    beforeInsert,\n    afterInsert,\n    beforeRemove,\n    afterRemove,\n    beforeUpdate,\n    afterUpdate,\n    beforeMultipleInsert,\n    afterMultipleInsert,\n    beforeMultipleRemove,\n    afterMultipleRemove,\n    beforeMultipleUpdate,\n    afterMultipleUpdate,\n    formatElapsedTime,\n    id,\n  } as Orama\n\n  orama.data = {\n    index: await orama.index.create(orama, schema),\n    docs: await orama.documentsStore.create(orama),\n    sorting: await orama.sorter.create(orama, schema, sort),\n  }\n\n  return orama\n}\n", "import { Document, Orama } from '../types.js'\n\nexport function getByID(db: Orama, id: string): Promise<Document | undefined> {\n  return db.documentsStore.get(db.data.docs, id) as Promise<Document | undefined>\n}\n\nexport function count(db: Orama): Promise<number> {\n  return db.documentsStore.count(db.data.docs) as Promise<number>\n}\n", "export * from './components/defaults.js'\nexport * as documentsStore from './components/documents-store.js'\nexport * as index from './components/index.js'\nexport * as tokenizer from './components/tokenizer/index.js'\nexport * as sorter from './components/sorter.js'\n", "import { Language } from './components/tokenizer/languages.js'\n\nexport type Nullable<T> = T | null\n\nexport type SingleOrArray<T> = T | T[]\n\nexport type SyncOrAsyncValue<T = void> = T | Promise<T>\n\n// eslint-disable-next-line @typescript-eslint/no-empty-interface\nexport interface OpaqueIndex {}\n\n// eslint-disable-next-line @typescript-eslint/no-empty-interface\nexport interface OpaqueDocumentStore {}\n\n// eslint-disable-next-line @typescript-eslint/no-empty-interface\nexport interface OpaqueSorter {}\n\n// eslint-disable-next-line @typescript-eslint/no-empty-interface\nexport interface Schema extends Record<string, SearchableType | Schema> {}\n\n// eslint-disable-next-line @typescript-eslint/no-empty-interface\nexport interface Document extends Record<string, SearchableValue | Document | unknown> {}\n\nexport type ScalarSearchableType = 'string' | 'number' | 'boolean'\nexport type ArraySearchableType = 'string[]' | 'number[]' | 'boolean[]'\nexport type SearchableType = ScalarSearchableType | ArraySearchableType\n\nexport type ScalarSearchableValue = string | number | boolean\nexport type ArraySearchableValue = string[] | number[] | boolean[]\nexport type SearchableValue = ScalarSearchableValue | ArraySearchableValue\n\nexport type SortType = 'string' | 'number' | 'boolean'\nexport type SortValue = string | number | boolean\n\nexport type BM25Params = {\n  k?: number\n  b?: number\n  d?: number\n}\n\nexport type FacetSorting = 'asc' | 'desc' | 'ASC' | 'DESC'\n\nexport interface StringFacetDefinition {\n  limit?: number\n  offset?: number\n  sort?: FacetSorting\n}\n\nexport interface NumberFacetDefinition {\n  ranges: { from: number; to: number }[]\n}\n\nexport interface BooleanFacetDefinition {\n  true?: boolean\n  false?: boolean\n}\n\nexport type FacetsParams = Record<string, FacetDefinition>\n\nexport type FacetDefinition = StringFacetDefinition | NumberFacetDefinition | BooleanFacetDefinition\n\nexport type ReduceFunction<T, R extends Result = Result> =\n  (values: ScalarSearchableValue[], acc: T, value: R, index: number) => T\nexport type Reduce<T> = {\n  reducer: ReduceFunction<T>\n  getInitialValue: (elementCount: number) => T\n}\n\nexport type GroupByParams<T> = {\n  properties: string[]\n  maxResult?: number\n  reduce?: Reduce<T>\n}\n\nexport type ComparisonOperator = {\n  gt?: number\n  gte?: number\n  lt?: number\n  lte?: number\n  eq?: number\n  between?: [number, number]\n}\n\n/**\n * A custom sorter function item as [id, score, document].\n */\nexport type CustomSorterFunctionItem = [string, number, Document]\n\nexport type CustomSorterFunction = (a: CustomSorterFunctionItem, b: CustomSorterFunctionItem) => number\n/**\n * Define which properties to sort for.\n */\nexport type SorterParams = {\n  /**\n   * The key of the document used to sort the result.\n   */\n  property: string\n  /**\n   * Whether to sort the result in ascending or descending order.\n   */\n  order?: 'ASC' | 'DESC'\n}\n\nexport type SortByParams = SorterParams | CustomSorterFunction\n\nexport type SearchParams<T = Result[]> = {\n  /**\n   * The word to search.\n   */\n  term?: string\n  /**\n   * The properties of the document to search in.\n   */\n  properties?: '*' | string[]\n  /**\n   * The number of matched documents to return.\n   */\n  limit?: number\n  /**\n   * The number of matched documents to skip.\n   */\n  offset?: number\n  /**\n   * The key of the document used to sort the result.\n   */\n  sortBy?: SortByParams\n  /**\n   * Whether to match the term exactly.\n   */\n  exact?: boolean\n  /**\n   * The maximum [levenshtein distance](https://en.wikipedia.org/wiki/Levenshtein_distance)\n   * between the term and the searchable property.\n   */\n  tolerance?: number\n  /**\n   * The BM25 parameters to use.\n   *\n   * k: Term frequency saturation parameter.\n   * The higher the value, the more important the term frequency becomes.\n   * The default value is 1.2. It should be set to a value between 1.2 and 2.0.\n   *\n   * b: Document length saturation impact. The higher the value, the more\n   * important the document length becomes. The default value is 0.75.\n   *\n   * d: Frequency normalization lower bound. Default value is 0.5.\n   *\n   * Full documentation: https://docs.oramasearch.com/usage/search/BM25-algorithm\n   *\n   * @see https://en.wikipedia.org/wiki/Okapi_BM25\n   */\n  relevance?: BM25Params\n  /**\n   * The boost to apply to the properties.\n   *\n   * The boost is a number that is multiplied to the score of the property.\n   * It can be used to give more importance to some properties.\n   *\n   * Full documentation: https://docs.oramasearch.com/usage/search/fields-boosting\n   *\n   * @example\n   * // Give more importance to the 'title' property.\n   * const result = await search(db, {\n   *  term: 'Michael',\n   *  properties: ['title', 'author'],\n   *  boost: {\n   *   title: 2\n   *  }\n   * });\n   *\n   * // In that case, the score of the 'title' property will be multiplied by 2.\n   */\n  boost?: Record<string, number>\n  /**\n   * Facets configuration\n   * Full documentation: https://docs.oramasearch.com/usage/search/facets\n   *\n   * A facet is a feature that allows users to narrow down their search results by specific\n   * attributes or characteristics, such as category, price, or location.\n   * This can help users find more relevant and specific results for their search query.\n   *\n   * @example\n   *\n   * const results = await search(db, {\n   *  term: 'Personal Computer',\n   *  properties: ['title', 'description', 'category.primary', 'category.secondary'],\n   *  facets: {\n   *    'category.primary': {\n   *      size: 10,\n   *      sort: 'ASC',\n   *    }\n   *  }\n   * });\n   */\n  facets?: FacetsParams\n\n  /**\n   * Distinct configuration\n   * Full documentation: https://docs.oramasearch.com/usage/search/introduction#distinct\n   *\n   * @example\n   * const results = await search(db, {\n   *  term: 'Headphones',\n   *  distinctOn: 'category.primary',\n   * })\n   */\n  distinctOn?: string\n\n  /**\n   * Groups configuration\n   * Full documentation: https://docs.oramasearch.com/usage/search/grouping\n   *\n   * @example\n   * const results = await search(db, {\n   *  term: 'Headphones',\n   *  groupBy: {\n   *   properties: ['category.primary'],\n   *   maxResult: 10,\n   *  }\n   * })\n   */\n  groupBy?: GroupByParams<T>\n\n  /**\n   * Filter the search results.\n   * Full documentation: https://docs.oramasearch.com/usage/search/filters\n   *\n   * @example\n   * // Search for documents that contain 'Headphones' in the 'description' and 'title' fields and\n   * // have a price less than 100.\n   *\n   * const result = await search(db, {\n   *  term: 'Headphones',\n   *  properties: ['description', 'title'],\n   *  where: {\n   *    price: {\n   *      lt: 100\n   *    }\n   *  }\n   * });\n   */\n  where?: Record<string, boolean | string | string[] | ComparisonOperator>\n\n  /**\n   * Threshold to use for refining the search results.\n   * The threshold is a number between 0 and 1 that represents the minimum score of the documents to return.\n   * By default, the threshold is 1.\n   *\n   * Full documentation: https://docs.oramasearch.com/usage/search/threshold\n   *\n   * @example\n   *\n   * const result = await search(db, {\n   *  term: 'Red Headphones'\n   *  threshold: 0\n   * });\n   *\n   * // The result will contain all the documents that contain both 'Red' and 'Headphones' in their properties.\n   *\n   * const result2 = await search(db, {\n   *  term: 'Red Headphones'\n   *  threshold: 1\n   * });\n   *\n   * // The result will contain all the documents that contain either 'Red' and 'Headphones' in their properties.\n   */\n  threshold?: number\n\n  /**\n   * Preflight query.\n   * Will return just the facets (if needed) and the number of matched documents for the given query.\n   *\n   * Full documentation: https://docs.oramasearch.com/usage/search/preflight\n   *\n   * @example\n   *\n   * const result = await search(db, {\n   *  term: 'Red Headphones',\n   *  preflight: true\n   * });\n   *\n   * console.log(result);\n   *\n   * // {\n   * //   elapsed: {\n   * //     raw: 181208,\n   * //     formatted: '181μs'\n   * //   },\n   * //   count: 100,\n   * // }\n   */\n  preflight?: boolean\n}\n\nexport type Result = {\n  /**\n   * The id of the document.\n   */\n  id: string\n  /**\n   * The score of the document in the search.\n   */\n  score: number\n  /**\n   * The document\n   */\n  document: Document\n}\n\nexport type FacetResult = Record<\n  string,\n  {\n    count: number\n    values: Record<string, number>\n  }\n>\n\nexport type GroupResult<T = Result[]> =\n  | {\n      values: ScalarSearchableValue[]\n      result: T\n    }[]\n\nexport type TokenScore = [string, number]\n\nexport type TokenMap = Record<string, TokenScore[]>\n\nexport type IndexMap = Record<string, TokenMap>\n\nexport type SearchContext<I extends OpaqueIndex, D extends OpaqueDocumentStore, AggValue = Result[]> = {\n  timeStart: bigint\n  tokenizer: Tokenizer\n  index: IIndex<I>\n  documentsStore: IDocumentsStore<D>\n  language: string | undefined\n  params: SearchParams<AggValue>\n  docsCount: number\n  uniqueDocsIDs: Record<string, number>\n  indexMap: IndexMap\n  docsIntersection: TokenMap\n}\n\nexport type ElapsedTime = {\n  raw: number\n  formatted: string\n}\n\nexport type Results<AggValue = Result[]> = {\n  /**\n   * The number of all the matched documents.\n   */\n  count: number\n  /**\n   * An array of matched documents taking `limit` and `offset` into account.\n   */\n  hits: Result[]\n  /**\n   * The time taken to search.\n   */\n  elapsed: ElapsedTime\n  /**\n   * The facets results.\n   */\n  facets?: FacetResult\n\n  groups?: GroupResult<AggValue>\n}\n\nexport type SingleCallbackComponent<A extends ProvidedTypes> = (\n  orama: Orama<A>,\n  id: string,\n  doc?: Document,\n) => SyncOrAsyncValue\n\nexport type MultipleCallbackComponent<A extends ProvidedTypes> = (\n  orama: Orama<A>,\n  doc: Document[] | string[],\n) => SyncOrAsyncValue\n\nexport type IIndexInsertOrRemoveHookFunction<I extends OpaqueIndex = OpaqueIndex, R = void> = (\n  index: I,\n  prop: string,\n  id: string,\n  value: SearchableValue,\n  type: SearchableType,\n  language: string | undefined,\n  tokenizer: Tokenizer,\n  docsCount: number,\n) => SyncOrAsyncValue<R>\n\nexport interface IIndex<I extends OpaqueIndex = OpaqueIndex> {\n  create<S extends Schema, D extends OpaqueDocumentStore, So extends OpaqueSorter>(\n    orama: Orama<{ Schema: S; Index: I; DocumentStore: D; Sorter: So }>,\n    schema: Schema,\n  ): SyncOrAsyncValue<I>\n\n  beforeInsert?: IIndexInsertOrRemoveHookFunction<I>\n  insert: (\n    implementation: IIndex<I>,\n    index: I,\n    prop: string,\n    id: string,\n    value: SearchableValue,\n    schemaType: SearchableType,\n    language: string | undefined,\n    tokenizer: Tokenizer,\n    docsCount: number,\n  ) => SyncOrAsyncValue\n  afterInsert?: IIndexInsertOrRemoveHookFunction<I>\n\n  beforeRemove?: IIndexInsertOrRemoveHookFunction<I>\n  remove: (\n    implementation: IIndex<I>,\n    index: I,\n    prop: string,\n    id: string,\n    value: SearchableValue,\n    schemaType: SearchableType,\n    language: string | undefined,\n    tokenizer: Tokenizer,\n    docsCount: number,\n  ) => SyncOrAsyncValue<boolean>\n  afterRemove?: IIndexInsertOrRemoveHookFunction<I>\n\n  insertDocumentScoreParameters(\n    index: I,\n    prop: string,\n    id: string,\n    tokens: string[],\n    docsCount: number,\n  ): SyncOrAsyncValue\n  insertTokenScoreParameters(index: I, prop: string, id: string, tokens: string[], token: string): SyncOrAsyncValue\n  removeDocumentScoreParameters(index: I, prop: string, id: string, docsCount: number): SyncOrAsyncValue\n  removeTokenScoreParameters(index: I, prop: string, token: string): SyncOrAsyncValue\n  calculateResultScores<D extends OpaqueDocumentStore, AggValue = Result[]>(\n    context: SearchContext<I, D, AggValue>,\n    index: I,\n    prop: string,\n    term: string,\n    ids: string[],\n  ): SyncOrAsyncValue<TokenScore[]>\n\n  search<D extends OpaqueDocumentStore, AggValue = Result[]>(\n    context: SearchContext<I, D, AggValue>,\n    index: I,\n    prop: string,\n    term: string,\n  ): SyncOrAsyncValue<TokenScore[]>\n  searchByWhereClause<D extends OpaqueDocumentStore, AggValue = Result[]>(\n    context: SearchContext<I, D, AggValue>,\n    index: I,\n    filters: Record<string, boolean | string | string[] | ComparisonOperator>,\n  ): SyncOrAsyncValue<string[]>\n\n  getSearchableProperties(index: I): SyncOrAsyncValue<string[]>\n  getSearchablePropertiesWithTypes(index: I): SyncOrAsyncValue<Record<string, SearchableType>>\n\n  load<R = unknown>(raw: R): SyncOrAsyncValue<I>\n  save<R = unknown>(index: I): SyncOrAsyncValue<R>\n}\n\nexport interface IDocumentsStore<D extends OpaqueDocumentStore = OpaqueDocumentStore> {\n  create<S extends Schema, I extends OpaqueIndex, So extends OpaqueSorter>(\n    orama: Orama<{ Schema: S; Index: I; DocumentStore: D; Sorter: So }>,\n  ): SyncOrAsyncValue<D>\n  get(store: D, id: string): SyncOrAsyncValue<Document | undefined>\n  getMultiple(store: D, ids: string[]): SyncOrAsyncValue<(Document | undefined)[]>\n  getAll(store: D): SyncOrAsyncValue<Record<string, Document>>\n  store(store: D, id: string, doc: Document): SyncOrAsyncValue<boolean>\n  remove(store: D, id: string): SyncOrAsyncValue<boolean>\n  count(store: D): SyncOrAsyncValue<number>\n\n  load<R = unknown>(raw: R): SyncOrAsyncValue<D>\n  save<R = unknown>(store: D): SyncOrAsyncValue<R>\n}\n\nexport interface SorterConfig {\n  enabled?: boolean\n  unsortableProperties?: string[]\n}\n\nexport interface ISorter<So extends OpaqueSorter = OpaqueSorter> {\n  create<S extends Schema, I extends OpaqueIndex, D extends OpaqueDocumentStore>(\n    orama: Orama<{ Schema: S; Index: I; DocumentStore: D; Sorter: So }>,\n    schema: Schema,\n    sorterConfig?: SorterConfig,\n  ): SyncOrAsyncValue<So>\n  insert: (\n    sorter: So,\n    prop: string,\n    id: string,\n    value: SortValue,\n    schemaType: SortType,\n    language: string | undefined,\n  ) => SyncOrAsyncValue\n  remove: (sorter: So, prop: string, id: string) => SyncOrAsyncValue\n\n  load<R = unknown>(raw: R): SyncOrAsyncValue<So>\n  save<R = unknown>(sorter: So): SyncOrAsyncValue<R>\n\n  sortBy(sorter: So, docIds: [string, number][], by: SorterParams): Promise<[string, number][]>\n\n  getSortableProperties(sorter: So): SyncOrAsyncValue<string[]>\n  getSortablePropertiesWithTypes(sorter: So): SyncOrAsyncValue<Record<string, SortType>>\n}\n\nexport type Stemmer = (word: string) => string\n\nexport type DefaultTokenizerConfig = {\n  language?: Language\n  stemming?: boolean\n  stemmer?: Stemmer\n  stemmerSkipProperties?: string | string[]\n  stopWords?: boolean | string[] | ((stopWords: string[]) => string[] | Promise<string[]>)\n  allowDuplicates?: boolean\n}\n\nexport interface Tokenizer {\n  language: string\n  normalizationCache: Map<string, string>\n  tokenize: (raw: string, language?: string, prop?: string) => SyncOrAsyncValue<string[]>\n}\n\nexport interface ObjectComponents<I extends OpaqueIndex, D extends OpaqueDocumentStore, So extends OpaqueSorter> {\n  tokenizer: Tokenizer | DefaultTokenizerConfig\n  index: I\n  documentsStore: D\n  sorter: So\n}\n\nexport interface FunctionComponents<S extends Schema = Schema> {\n  validateSchema(doc: Document, schema: S): SyncOrAsyncValue<string | undefined>\n  getDocumentIndexId(doc: Document): SyncOrAsyncValue<string>\n  getDocumentProperties(doc: Document, paths: string[]): SyncOrAsyncValue<Record<string, string | number | boolean>>\n  formatElapsedTime(number: bigint): SyncOrAsyncValue<number | string | object | ElapsedTime>\n}\n\nexport interface SingleOrArrayCallbackComponents<A extends ProvidedTypes> {\n  beforeInsert: SingleOrArray<SingleCallbackComponent<A>>\n  afterInsert: SingleOrArray<SingleCallbackComponent<A>>\n  beforeRemove: SingleOrArray<SingleCallbackComponent<A>>\n  afterRemove: SingleOrArray<SingleCallbackComponent<A>>\n  beforeUpdate: SingleOrArray<SingleCallbackComponent<A>>\n  afterUpdate: SingleOrArray<SingleCallbackComponent<A>>\n  beforeMultipleInsert: SingleOrArray<MultipleCallbackComponent<A>>\n  afterMultipleInsert: SingleOrArray<MultipleCallbackComponent<A>>\n  beforeMultipleRemove: SingleOrArray<MultipleCallbackComponent<A>>\n  afterMultipleRemove: SingleOrArray<MultipleCallbackComponent<A>>\n  beforeMultipleUpdate: SingleOrArray<MultipleCallbackComponent<A>>\n  afterMultipleUpdate: SingleOrArray<MultipleCallbackComponent<A>>\n}\n\nexport interface ArrayCallbackComponents<A extends ProvidedTypes> {\n  beforeInsert: SingleCallbackComponent<A>[]\n  afterInsert: SingleCallbackComponent<A>[]\n  beforeRemove: SingleCallbackComponent<A>[]\n  afterRemove: SingleCallbackComponent<A>[]\n  beforeUpdate: SingleCallbackComponent<A>[]\n  afterUpdate: SingleCallbackComponent<A>[]\n  beforeMultipleInsert: MultipleCallbackComponent<A>[]\n  afterMultipleInsert: MultipleCallbackComponent<A>[]\n  beforeMultipleRemove: MultipleCallbackComponent<A>[]\n  afterMultipleRemove: MultipleCallbackComponent<A>[]\n  beforeMultipleUpdate: MultipleCallbackComponent<A>[]\n  afterMultipleUpdate: MultipleCallbackComponent<A>[]\n}\n\nexport type Components<A extends ProvidedTypes> = Partial<\n  ObjectComponents<A['Index'], A['DocumentStore'], A['Sorter']> &\n    FunctionComponents &\n    SingleOrArrayCallbackComponents<A>\n>\n\nexport const kInsertions = Symbol('orama.insertions')\nexport const kRemovals = Symbol('orama.removals')\n\ninterface Data<I extends OpaqueIndex, D extends OpaqueDocumentStore, S extends OpaqueSorter> {\n  index: I\n  docs: D\n  sorting: S\n}\n\ntype Internals<A extends ProvidedTypes> = {\n  schema: A['Schema']\n  tokenizer: Tokenizer\n  index: IIndex<A['Index']>\n  documentsStore: IDocumentsStore<A['DocumentStore']>\n  sorter: ISorter<A['Sorter']>\n  data: Data<A['Index'], A['DocumentStore'], A['Sorter']>\n  caches: Record<string, unknown>\n  [kInsertions]: number | undefined\n  [kRemovals]: number | undefined\n}\n\ntype OramaID = {\n  id: string\n}\n\nexport type ProvidedTypes = {\n  Schema: Schema\n  Index: OpaqueIndex\n  DocumentStore: OpaqueDocumentStore\n  Sorter: OpaqueSorter\n}\n\ntype RequiredInner<T extends Partial<ProvidedTypes>> = {\n  [Key in keyof ProvidedTypes]: Key extends keyof ProvidedTypes\n    ? ProvidedTypes[Key]\n    : Key extends keyof T\n    ? T[Key]\n    : never\n}\n\nexport type Orama<\n  A extends Partial<ProvidedTypes> = {\n    Schema: Schema\n    Index: OpaqueIndex\n    DocumentStore: OpaqueDocumentStore\n    Sorter: OpaqueSorter\n  },\n> = FunctionComponents & ArrayCallbackComponents<RequiredInner<A>> & Internals<RequiredInner<A>> & OramaID\n", "import { kInsertions, kRemovals, Orama } from '../types.js'\n\n// Web platforms don't have process. React-Native doesn't have process.emitWarning.\nconst warn =\n  globalThis.process?.emitWarning ??\n  function emitWarning(message: string, options: { code: string }) {\n    console.warn(`[WARNING] [${options.code}] ${message}`)\n  }\n\nexport function trackInsertion(orama: Orama): void {\n  if (typeof orama[kInsertions] !== 'number') {\n    queueMicrotask(() => {\n      orama[kInsertions] = undefined\n    })\n\n    orama[kInsertions] = 0\n  }\n\n  if (orama[kInsertions]! > 1000) {\n    warn(\n      \"Orama's insert operation is synchronous. Please avoid inserting a large number of document in a single operation in order not to block the main thread or, in alternative, please use insertMultiple.\",\n      { code: 'ORAMA0001' },\n    )\n\n    orama[kInsertions] = -1\n  } else if (orama[kInsertions] >= 0) {\n    orama[kInsertions]++\n  }\n}\n\nexport function trackRemoval(orama: Orama): void {\n  if (typeof orama[kRemovals] !== 'number') {\n    queueMicrotask(() => {\n      orama[kRemovals] = undefined\n    })\n\n    orama[kRemovals] = 0\n  }\n\n  if (orama[kRemovals]! > 1000) {\n    warn(\n      \"Orama's remove operation is synchronous. Please avoid removing a large number of document in a single operation in order not to block the main thread, in alternative, please use updateMultiple.\",\n      { code: 'ORAMA0002' },\n    )\n\n    orama[kRemovals] = -1\n  } else if (orama[kRemovals] >= 0) {\n    orama[kRemovals]++\n  }\n}\n", "import { isArrayType } from '../components.js'\nimport { runMultipleHook, runSingleHook } from '../components/hooks.js'\nimport { trackInsertion } from '../components/sync-blocking-checker.js'\nimport { createError } from '../errors.js'\nimport { Document, Orama, SortValue } from '../types.js'\n\nexport async function insert(orama: Orama, doc: Document, language?: string, skipHooks?: boolean): Promise<string> {\n  const errorProperty = await orama.validateSchema(doc, orama.schema)\n  if (errorProperty) {\n    throw createError('SCHEMA_VALIDATION_FAILURE', errorProperty)\n  }\n\n  return innerInsert(orama, doc, language, skipHooks)\n}\n\nasync function innerInsert(orama: Orama, doc: Document, language?: string, skipHooks?: boolean): Promise<string> {\n  const { index, docs } = orama.data\n\n  const id = await orama.getDocumentIndexId(doc)\n\n  if (typeof id !== 'string') {\n    throw createError('DOCUMENT_ID_MUST_BE_STRING', typeof id)\n  }\n\n  if (!(await orama.documentsStore.store(docs, id, doc))) {\n    throw createError('DOCUMENT_ALREADY_EXISTS', id)\n  }\n\n  const docsCount = await orama.documentsStore.count(docs)\n\n  if (!skipHooks) {\n    await runSingleHook(orama.beforeInsert, orama, id, doc)\n  }\n\n  const indexableProperties = await orama.index.getSearchableProperties(index)\n  const indexablePropertiesWithTypes = await orama.index.getSearchablePropertiesWithTypes(index)\n  const indexableValues = await orama.getDocumentProperties(doc, indexableProperties)\n\n  for (const [key, value] of Object.entries(indexableValues)) {\n    if (typeof value === 'undefined') {\n      continue\n    }\n\n    const actualType = typeof value\n    const expectedType = indexablePropertiesWithTypes[key]\n\n    if (isArrayType(expectedType) && Array.isArray(value)) {\n      continue\n    }\n\n    if (actualType !== expectedType) {\n      throw createError('INVALID_DOCUMENT_PROPERTY', key, expectedType, actualType)\n    }\n  }\n\n  for (const prop of indexableProperties) {\n    const value = indexableValues[prop]\n    if (typeof value === 'undefined') {\n      continue\n    }\n\n    const expectedType = indexablePropertiesWithTypes[prop]\n    await orama.index.beforeInsert?.(\n      orama.data.index,\n      prop,\n      id,\n      value,\n      expectedType,\n      language,\n      orama.tokenizer,\n      docsCount,\n    )\n    await orama.index.insert(\n      orama.index,\n      orama.data.index,\n      prop,\n      id,\n      value,\n      expectedType,\n      language,\n      orama.tokenizer,\n      docsCount,\n    )\n    await orama.index.afterInsert?.(\n      orama.data.index,\n      prop,\n      id,\n      value,\n      expectedType,\n      language,\n      orama.tokenizer,\n      docsCount,\n    )\n  }\n\n  const sortableProperties = await orama.sorter.getSortableProperties(orama.data.sorting)\n  const sortablePropertiesWithTypes = await orama.sorter.getSortablePropertiesWithTypes(orama.data.sorting)\n  const sortableValues = await orama.getDocumentProperties(doc, sortableProperties)\n  for (const prop of sortableProperties) {\n    const value = sortableValues[prop] as SortValue\n    if (typeof value === 'undefined') {\n      continue\n    }\n\n    const expectedType = sortablePropertiesWithTypes[prop]\n\n    await orama.sorter.insert(orama.data.sorting, prop, id, value, expectedType, language)\n  }\n\n  if (!skipHooks) {\n    await runSingleHook(orama.afterInsert, orama, id, doc)\n  }\n\n  trackInsertion(orama)\n\n  return id\n}\n\nexport async function insertMultiple(\n  orama: Orama,\n  docs: Document[],\n  batchSize?: number,\n  language?: string,\n  skipHooks?: boolean,\n): Promise<string[]> {\n  if (!skipHooks) {\n    await runMultipleHook(orama.beforeMultipleInsert, orama, docs)\n  }\n\n  // Validate all documents before the insertion\n  const docsLength = docs.length\n  for (let i = 0; i < docsLength; i++) {\n    const errorProperty = await orama.validateSchema(docs[i], orama.schema)\n    if (errorProperty) {\n      throw createError('SCHEMA_VALIDATION_FAILURE', errorProperty)\n    }\n  }\n\n  return innerInsertMultiple(orama, docs, batchSize, language, skipHooks)\n}\n\nexport async function innerInsertMultiple(\n  orama: Orama,\n  docs: Document[],\n  batchSize?: number,\n  language?: string,\n  skipHooks?: boolean,\n): Promise<string[]> {\n  if (!batchSize) {\n    batchSize = 1000\n  }\n\n  const ids: string[] = []\n  await new Promise<void>((resolve, reject) => {\n    let i = 0\n    async function _insertMultiple() {\n      const batch = docs.slice(i * batchSize!, (i + 1) * batchSize!)\n      i++\n\n      if (!batch.length) {\n        return resolve()\n      }\n\n      for (const doc of batch) {\n        try {\n          const id = await insert(orama, doc, language, skipHooks)\n          ids.push(id)\n        } catch (err) {\n          reject(err)\n        }\n      }\n\n      setTimeout(_insertMultiple, 0)\n    }\n\n    setTimeout(_insertMultiple, 0)\n  })\n\n  if (!skipHooks) {\n    await runMultipleHook(orama.afterMultipleInsert, orama, docs)\n  }\n\n  return ids\n}\n", "import { runMultipleHook, runSingleHook } from '../components/hooks.js'\nimport { trackRemoval } from '../components/sync-blocking-checker.js'\nimport { Orama } from '../types.js'\n\nexport async function remove(orama: Orama, id: string, language?: string, skipHooks?: boolean): Promise<boolean> {\n  let result = true\n  const { index, docs } = orama.data\n\n  const doc = await orama.documentsStore.get(docs, id)\n  if (!doc) {\n    return false\n  }\n\n  const docsCount = await orama.documentsStore.count(docs)\n\n  if (!skipHooks) {\n    await runSingleHook(orama.beforeRemove, orama, id)\n  }\n\n  const indexableProperties = await orama.index.getSearchableProperties(index)\n  const indexablePropertiesWithTypes = await orama.index.getSearchablePropertiesWithTypes(index)\n  const values = await orama.getDocumentProperties(doc, indexableProperties)\n\n  for (const prop of indexableProperties) {\n    const value = values[prop]\n    // The document doens't contain the key\n    if (typeof value === 'undefined') {\n      continue\n    }\n\n    const schemaType = indexablePropertiesWithTypes[prop]\n\n    await orama.index.beforeRemove?.(\n      orama.data.index,\n      prop,\n      id,\n      value,\n      schemaType,\n      language,\n      orama.tokenizer,\n      docsCount,\n    )\n    if (\n      !(await orama.index.remove(\n        orama.index,\n        orama.data.index,\n        prop,\n        id,\n        value,\n        schemaType,\n        language,\n        orama.tokenizer,\n        docsCount,\n      ))\n    ) {\n      result = false\n    }\n    await orama.index.afterRemove?.(orama.data.index, prop, id, value, schemaType, language, orama.tokenizer, docsCount)\n  }\n\n  const sortableProperties = await orama.sorter.getSortableProperties(orama.data.sorting)\n  const sortableValues = await orama.getDocumentProperties(doc, sortableProperties)\n  for (const prop of sortableProperties) {\n    // The document doens't contain the key\n    if (typeof sortableValues[prop] === 'undefined') {\n      continue\n    }\n\n    await orama.sorter.remove(orama.data.sorting, prop, id)\n  }\n\n  if (!skipHooks) {\n    await runSingleHook(orama.afterRemove, orama, id)\n  }\n\n  await orama.documentsStore.remove(orama.data.docs, id)\n\n  trackRemoval(orama)\n  return result\n}\n\nexport async function removeMultiple(\n  orama: Orama,\n  ids: string[],\n  batchSize?: number,\n  language?: string,\n  skipHooks?: boolean,\n): Promise<number> {\n  let result = 0\n\n  if (!batchSize) {\n    batchSize = 1000\n  }\n\n  if (!skipHooks) {\n    await runMultipleHook(orama.beforeMultipleRemove, orama, ids)\n  }\n\n  await new Promise<void>((resolve, reject) => {\n    let i = 0\n    async function _insertMultiple() {\n      const batch = ids.slice(i * batchSize!, (i + 1) * batchSize!)\n      i++\n\n      if (!batch.length) {\n        return resolve()\n      }\n\n      for (const doc of batch) {\n        try {\n          if (await remove(orama, doc, language, skipHooks)) {\n            result++\n          }\n        } catch (err) {\n          reject(err)\n        }\n      }\n\n      setTimeout(_insertMultiple, 0)\n    }\n\n    setTimeout(_insertMultiple, 0)\n  })\n\n  if (!skipHooks) {\n    await runMultipleHook(orama.afterMultipleRemove, orama, ids)\n  }\n\n  return result\n}\n", "import type {\n  FacetResult,\n  FacetSorting,\n  FacetsParams,\n  NumberFacetDefinition,\n  Orama,\n  Schema,\n  SearchableValue,\n  StringFacetDefinition,\n  TokenScore,\n} from '../types.js'\nimport { getNested } from '../utils.js'\n\nfunction sortingPredicate(order: FacetSorting = 'desc', a: [string, number], b: [string, number]) {\n  if (order.toLowerCase() === 'asc') {\n    return a[1] - b[1]\n  } else {\n    return b[1] - a[1]\n  }\n}\n\nexport async function getFacets<S extends Schema>(\n  orama: Orama<{ Schema: S }>,\n  results: TokenScore[],\n  facetsConfig: FacetsParams,\n): Promise<FacetResult> {\n  const facets: FacetResult = {}\n  const allIDs = results.map(([id]) => id)\n  const allDocs = await orama.documentsStore.getMultiple(orama.data.docs, allIDs)\n  const facetKeys = Object.keys(facetsConfig!)\n\n  const properties = await orama.index.getSearchablePropertiesWithTypes(orama.data.index)\n\n  for (const facet of facetKeys) {\n    let values = {}\n\n    // Hack to guarantee the same order of ranges as specified by the user\n    // TODO: Revisit this once components land\n    if (properties[facet] === 'number') {\n      const { ranges } = facetsConfig[facet] as NumberFacetDefinition\n      const tmp = []\n      for (const range of ranges) {\n        tmp.push([`${range.from}-${range.to}`, 0])\n      }\n      values = Object.fromEntries(tmp)\n    }\n\n    facets[facet] = {\n      count: 0,\n      values,\n    }\n  }\n\n  const allDocsLength = allDocs.length\n  for (let i = 0; i < allDocsLength; i++) {\n    const doc = allDocs[i]\n\n    for (const facet of facetKeys) {\n      const facetValue = facet.includes('.')\n        ? (await getNested<string>(doc!, facet))!\n        : (doc![facet] as SearchableValue)\n\n      const propertyType = properties[facet]\n      switch (propertyType) {\n        case 'number': {\n          const ranges = (facetsConfig[facet] as NumberFacetDefinition).ranges\n          calculateNumberFacet(ranges, facets[facet].values, facetValue as number)\n          break\n        }\n        case 'number[]': {\n          const alreadyInsertedValues = new Set<string>()\n          const ranges = (facetsConfig[facet] as NumberFacetDefinition).ranges\n          for (const v of facetValue as Array<number>) {\n            calculateNumberFacet(ranges, facets[facet].values, v, alreadyInsertedValues)\n          }\n          break\n        }\n        case 'boolean':\n        case 'string': {\n          calculateBooleanOrStringFacet(facets[facet].values, facetValue as string | boolean, propertyType)\n          break\n        }\n        case 'boolean[]':\n        case 'string[]': {\n          const alreadyInsertedValues = new Set<string>()\n          const innerType = propertyType === 'boolean[]' ? 'boolean' : 'string'\n          for (const v of facetValue as Array<string | boolean>) {\n            calculateBooleanOrStringFacet(facets[facet].values, v, innerType, alreadyInsertedValues)\n          }\n          break\n        }\n      }\n    }\n  }\n\n  for (const facet of facetKeys) {\n    // Count the number of values for each facet\n    facets[facet].count = Object.keys(facets[facet].values).length\n\n    // Sort only string-based facets\n    if (properties[facet] === 'string') {\n      const stringFacetDefinition = facetsConfig as StringFacetDefinition\n\n      facets[facet].values = Object.fromEntries(\n        Object.entries(facets[facet].values)\n          .sort((a, b) => sortingPredicate(stringFacetDefinition.sort, a, b))\n          .slice(stringFacetDefinition.offset ?? 0, stringFacetDefinition.limit ?? 10),\n      )\n    }\n  }\n\n  return facets\n}\n\nfunction calculateNumberFacet(\n  ranges: NumberFacetDefinition['ranges'],\n  values: Record<string, number>,\n  facetValue: number,\n  alreadyInsertedValues?: Set<string>,\n) {\n  for (const range of ranges) {\n    const value = `${range.from}-${range.to}`\n    if (alreadyInsertedValues && alreadyInsertedValues.has(value)) {\n      continue\n    }\n\n    if (facetValue >= range.from && facetValue <= range.to) {\n      if (values[value] === undefined) {\n        values[value] = 1\n      } else {\n        values[value]++\n\n        if (alreadyInsertedValues) {\n          alreadyInsertedValues.add(value)\n        }\n      }\n    }\n  }\n}\n\nfunction calculateBooleanOrStringFacet(\n  values: Record<string, number>,\n  facetValue: string | boolean,\n  propertyType: 'string' | 'boolean',\n  alreadyInsertedValues?: Set<string>,\n) {\n  // String or boolean based facets\n  const value = facetValue?.toString() ?? (propertyType === 'boolean' ? 'false' : '')\n  if (alreadyInsertedValues && alreadyInsertedValues.has(value)) {\n    return\n  }\n  values[value] = (values[value] ?? 0) + 1\n  if (alreadyInsertedValues) {\n    alreadyInsertedValues.add(value)\n  }\n}\n", "export function intersectFilteredIDs(filtered: string[], lookedUp: [string, number][]): [string, number][] {\n  const map = new Map<string, boolean>()\n  const result: [string, number][] = []\n\n  for (const id of filtered) {\n    map.set(id, true)\n  }\n\n  for (const [id, score] of lookedUp) {\n    if (map.has(id)) {\n      result.push([id, score])\n      map.delete(id)\n    }\n  }\n\n  return result\n}\n", "import type { Orama, ScalarSearchableValue, TokenScore, GroupByParams, GroupResult, Result, Reduce } from '../types.js'\nimport { createError } from '../errors.js'\nimport { getNested, intersect } from '../utils.js'\n\ninterface PropertyGroup {\n  property: string\n  perValue: Record<\n    string,\n    {\n      indexes: number[]\n      count: number\n    }\n  >\n}\n\ninterface Group {\n  values: ScalarSearchableValue[]\n  indexes: number[]\n}\n\nconst DEFAULT_REDUCE: Reduce<Result[]> = {\n  reducer: (_, acc, res, index) => {\n    acc[index] = res\n    return acc\n  },\n  getInitialValue: (length) => Array.from({ length }),\n}\n\nconst ALLOWED_TYPES = ['string', 'number', 'boolean']\n\nexport async function getGroups<AggValue>(orama: Orama, results: TokenScore[], groupBy: GroupByParams<AggValue>): Promise<GroupResult<AggValue>> {\n  const properties = groupBy.properties\n  const propertiesLength = properties.length\n\n  const schemaProperties = await orama.index.getSearchablePropertiesWithTypes(orama.data.index)\n  for (let i = 0; i < propertiesLength; i++) {\n    const property = properties[i]\n    if (typeof schemaProperties[property] === 'undefined') {\n      throw createError('UNKNOWN_GROUP_BY_PROPERTY', property)\n    }\n    if (!ALLOWED_TYPES.includes(schemaProperties[property])) {\n      throw createError('INVALID_GROUP_BY_PROPERTY', property, ALLOWED_TYPES.join(', '), schemaProperties[property])\n    }\n  }\n\n  const allIDs = results.map(([id]) => id)\n\n  // allDocs is already sorted by the sortBy algorithm\n  // We leverage on that to limit the number of documents returned\n  const allDocs = await orama.documentsStore.getMultiple(orama.data.docs, allIDs)\n  const allDocsLength = allDocs.length\n\n  const returnedCount = groupBy.maxResult || Number.MAX_SAFE_INTEGER\n\n  const listOfValues: ScalarSearchableValue[][] = []\n\n  // We want to understand which documents have which values\n  // and group them by the property and values\n  const g: Record<string, PropertyGroup> = {}\n  for (let i = 0; i < propertiesLength; i++) {\n    const groupByKey = properties[i]\n    const group: PropertyGroup = {\n      property: groupByKey,\n      perValue: {},\n    }\n\n    const values: Set<ScalarSearchableValue> = new Set()\n    for (let j = 0; j < allDocsLength; j++) {\n      const doc = allDocs[j]\n\n      const value = await getNested<ScalarSearchableValue>(doc as object, groupByKey)\n      // we don't want to consider undefined values\n      if (typeof value === 'undefined') {\n        continue\n      }\n      const keyValue = typeof value !== 'boolean' ? value : '' + value\n      if (typeof group.perValue[keyValue] === 'undefined') {\n        group.perValue[keyValue] = {\n          indexes: [],\n          count: 0,\n        }\n      }\n      if (group.perValue[keyValue].count >= returnedCount) {\n        // We stop early because for this value we react the limit\n        continue\n      }\n\n      // We use the index to keep track of the original order\n      group.perValue[keyValue].indexes.push(j)\n      group.perValue[keyValue].count++\n\n      values.add(value)\n    }\n\n    listOfValues.push(Array.from(values))\n\n    g[groupByKey] = group\n  }\n\n  const combinations = calculateCombination(listOfValues)\n  const combinationsLength = combinations.length\n\n  const groups: Group[] = []\n  for (let i = 0; i < combinationsLength; i++) {\n    const combination = combinations[i]\n    const combinationLength = combination.length\n\n    const group: Group = {\n      values: [],\n      indexes: [],\n    }\n    const indexes: number[][] = []\n    for (let j = 0; j < combinationLength; j++) {\n      const value = combination[j]\n      const property = properties[j]\n      indexes.push(g[property].perValue[typeof value !== 'boolean' ? value : '' + value].indexes)\n      group.values.push(value)\n    }\n    // We leverage on the index to sort the results by the original order\n    group.indexes = intersect(indexes).sort((a, b) => a - b)\n\n    // don't generate empty groups\n    if (group.indexes.length === 0) {\n      continue\n    }\n\n    groups.push(group)\n  }\n\n  const groupsLength = groups.length\n  const res: GroupResult<AggValue> = Array.from({ length: groupsLength })\n  for (let i = 0; i < groupsLength; i++) {\n    const group = groups[i]\n\n    const reduce = (groupBy.reduce || DEFAULT_REDUCE) as Reduce<AggValue>\n\n    const docs = group.indexes.map(index => {\n      return {\n        id: allIDs[index],\n        score: results[index][1],\n        document: allDocs[index]!,\n      }\n    })\n\n    const func = reduce.reducer.bind(null, group.values)\n    const initialValue = reduce.getInitialValue(group.indexes.length)\n    const aggregationValue = docs.reduce(func, initialValue)\n\n    res[i] = {\n      values: group.values,\n      result: aggregationValue,\n    }\n  }\n\n  return res\n}\n\nfunction calculateCombination(arrs: ScalarSearchableValue[][], index = 0): ScalarSearchableValue[][] {\n  if (index + 1 === arrs.length) return arrs[index].map(item => [item]);\n\n  const head = arrs[index];\n  const c = calculateCombination(arrs, index + 1);\n\n  const combinations = [];\n  for (const value of head) {\n    for (const combination of c) {\n      combinations.push([value, ...combination]);\n    }\n  }\n\n  return combinations;\n}\n", "import { prioritizeTokenScores } from '../components/algorithms.js'\nimport { getFacets } from '../components/facets.js'\nimport { intersectFilteredIDs } from '../components/filters.js'\nimport { getGroups } from '../components/groups.js'\nimport { createError } from '../errors.js'\nimport {\n  BM25Params,\n  IndexMap,\n  Orama,\n  Result,\n  Results,\n  SearchContext,\n  SearchParams,\n  TokenMap,\n  ElapsedTime,\n  IIndex,\n  Tokenizer,\n  IDocumentsStore,\n  CustomSorterFunctionItem,\n  OpaqueIndex,\n  OpaqueDocumentStore,\n  SearchableValue,\n} from '../types.js'\nimport { getNanosecondsTime, getNested, sortTokenScorePredicate } from '../utils.js'\n\nconst defaultBM25Params: BM25Params = {\n  k: 1.2,\n  b: 0.75,\n  d: 0.5,\n}\n\nasync function createSearchContext<I extends OpaqueIndex, D extends OpaqueDocumentStore, AggValue>(\n  tokenizer: Tokenizer,\n  index: IIndex<I>,\n  documentsStore: IDocumentsStore<D>,\n  language: string | undefined,\n  params: SearchParams<AggValue>,\n  properties: string[],\n  tokens: string[],\n  docsCount: number,\n): Promise<SearchContext<I, D, AggValue>> {\n  // If filters are enabled, we need to get the IDs of the documents that match the filters.\n  // const hasFilters = Object.keys(params.where ?? {}).length > 0;\n  // let whereFiltersIDs: string[] = [];\n\n  // if (hasFilters) {\n  //   whereFiltersIDs = getWhereFiltersIDs(params.where!, orama);\n  // }\n\n  // indexMap is an object containing all the indexes considered for the current search,\n  // and an array of doc IDs for each token in all the indices.\n  //\n  // Given the search term \"quick brown fox\" on the \"description\" index,\n  // indexMap will look like this:\n  //\n  // {\n  //   description: {\n  //     quick: [doc1, doc2, doc3],\n  //     brown: [doc2, doc4],\n  //     fox:   [doc2]\n  //   }\n  // }\n  const indexMap: IndexMap = {}\n\n  // After we create the indexMap, we need to calculate the intersection\n  // between all the postings lists for each token.\n  // Given the example above, docsIntersection will look like this:\n  //\n  // {\n  //   description: [doc2]\n  // }\n  //\n  // as doc2 is the only document present in all the postings lists for the \"description\" index.\n  const docsIntersection: TokenMap = {}\n\n  for (const prop of properties) {\n    const tokensMap: TokenMap = {}\n    for (const token of tokens) {\n      tokensMap[token] = []\n    }\n    indexMap[prop] = tokensMap\n    docsIntersection[prop] = []\n  }\n\n  return {\n    timeStart: await getNanosecondsTime(),\n    tokenizer,\n    index,\n    documentsStore,\n    language,\n    params,\n    docsCount,\n    uniqueDocsIDs: {},\n    indexMap,\n    docsIntersection,\n  }\n}\n\nexport async function search<AggValue = Result[]>(orama: Orama, params: SearchParams<AggValue>, language?: string): Promise<Results<AggValue>> {\n  params.relevance = Object.assign(params.relevance ?? {}, defaultBM25Params)\n\n  const shouldCalculateFacets = params.facets && Object.keys(params.facets).length > 0\n  const { limit = 10, offset = 0, term, properties, threshold = 1, distinctOn } = params\n  const isPreflight = params.preflight === true\n\n  const { index, docs } = orama.data\n  const tokens = await orama.tokenizer.tokenize(term ?? '', language)\n\n  // Get searchable string properties\n  let propertiesToSearch = orama.caches['propertiesToSearch'] as string[]\n  if (!propertiesToSearch) {\n    const propertiesToSearchWithTypes = await orama.index.getSearchablePropertiesWithTypes(index)\n\n    propertiesToSearch = await orama.index.getSearchableProperties(index)\n    propertiesToSearch = propertiesToSearch.filter((prop: string) =>\n      propertiesToSearchWithTypes[prop].startsWith('string'),\n    )\n\n    orama.caches['propertiesToSearch'] = propertiesToSearch\n  }\n\n  if (properties && properties !== '*') {\n    for (const prop of properties) {\n      if (!propertiesToSearch.includes(prop)) {\n        throw createError('UNKNOWN_INDEX', prop, propertiesToSearch.join(', '))\n      }\n    }\n\n    propertiesToSearch = propertiesToSearch.filter((prop: string) => properties.includes(prop))\n  }\n\n  // Create the search context and the results\n  const context = await createSearchContext(\n    orama.tokenizer,\n    orama.index,\n    orama.documentsStore,\n    language,\n    params,\n    propertiesToSearch,\n    tokens,\n    await orama.documentsStore.count(docs),\n  )\n\n  // If filters are enabled, we need to get the IDs of the documents that match the filters.\n  const hasFilters = Object.keys(params.where ?? {}).length > 0\n  let whereFiltersIDs: string[] = []\n\n  if (hasFilters) {\n    whereFiltersIDs = await orama.index.searchByWhereClause(context, index, params.where!)\n  }\n\n  if (tokens.length) {\n    // Now it's time to loop over all the indices and get the documents IDs for every single term\n    const indexesLength = propertiesToSearch.length\n    for (let i = 0; i < indexesLength; i++) {\n      const prop = propertiesToSearch[i]\n\n      const tokensLength = tokens.length\n      for (let j = 0; j < tokensLength; j++) {\n        const term = tokens[j]\n\n        // Lookup\n        const scoreList = await orama.index.search(context, index, prop, term)\n\n        context.indexMap[prop][term].push(...scoreList)\n      }\n\n      const docIds = context.indexMap[prop]\n      const vals = Object.values(docIds)\n      context.docsIntersection[prop] = prioritizeTokenScores(vals, params?.boost?.[prop] ?? 1, threshold)\n      const uniqueDocs = context.docsIntersection[prop]\n\n      const uniqueDocsLength = uniqueDocs.length\n      for (let i = 0; i < uniqueDocsLength; i++) {\n        const [id, score] = uniqueDocs[i]\n\n        const prevScore = context.uniqueDocsIDs[id]\n        if (prevScore) {\n          context.uniqueDocsIDs[id] = prevScore + score + 0.5\n        } else {\n          context.uniqueDocsIDs[id] = score\n        }\n      }\n    }\n  } else if (tokens.length === 0 && term) {\n    // This case is hard to handle correctly.\n    // For the time being, if tokenizer returns empty array but the term is not empty,\n    // we returns an empty result set\n    context.uniqueDocsIDs = {}\n  } else {\n    context.uniqueDocsIDs = Object.fromEntries(\n      Object.keys(await orama.documentsStore.getAll(orama.data.docs)).map(k => [k, 0]),\n    )\n  }\n\n  // Get unique doc IDs from uniqueDocsIDs map\n  let uniqueDocsArray = Object.entries(context.uniqueDocsIDs)\n\n  // If filters are enabled, we need to remove the IDs of the documents that don't match the filters.\n  if (hasFilters) {\n    uniqueDocsArray = intersectFilteredIDs(whereFiltersIDs, uniqueDocsArray)\n  }\n\n  if (params.sortBy) {\n    if (typeof params.sortBy === 'function') {\n      const ids: string[] = uniqueDocsArray.map(([id]) => id)\n      const docs = await orama.documentsStore.getMultiple(orama.data.docs, ids)\n      const docsWithIdAndScore: CustomSorterFunctionItem[] = docs.map((d, i) => [\n        uniqueDocsArray[i][0],\n        uniqueDocsArray[i][1],\n        d!,\n      ])\n      docsWithIdAndScore.sort(params.sortBy)\n      uniqueDocsArray = docsWithIdAndScore.map(([id, score]) => [id, score])\n    } else {\n      uniqueDocsArray = await orama.sorter.sortBy(orama.data.sorting, uniqueDocsArray, params.sortBy)\n    }\n  } else {\n    uniqueDocsArray = uniqueDocsArray.sort(sortTokenScorePredicate)\n  }\n\n  let results\n  if (!isPreflight && distinctOn) {\n    results = await fetchDocumentsWithDistinct(orama, uniqueDocsArray, offset, limit, distinctOn)\n  } else if (!isPreflight) {\n    results = await fetchDocuments(orama, uniqueDocsArray, offset, limit)\n  }\n\n  const searchResult: Results<AggValue> = {\n    elapsed: {\n      raw: 0,\n      formatted: '',\n    },\n    // We keep the hits array empty if it's a preflight request.\n    hits: [],\n    count: uniqueDocsArray.length,\n  }\n\n  if (typeof results !== 'undefined') {\n    searchResult.hits = results.filter(Boolean)\n  }\n\n  if (shouldCalculateFacets) {\n    // Populate facets if needed\n    const facets = await getFacets(orama, uniqueDocsArray, params.facets!)\n    searchResult.facets = facets\n  }\n\n  if (params.groupBy) {\n    searchResult.groups = await getGroups(orama, uniqueDocsArray, params.groupBy)\n  }\n\n  searchResult.elapsed = (await orama.formatElapsedTime(\n    (await getNanosecondsTime()) - context.timeStart,\n  )) as ElapsedTime\n\n  return searchResult\n}\n\nasync function fetchDocumentsWithDistinct(\n  orama: Orama,\n  uniqueDocsArray: [string, number][],\n  offset: number,\n  limit: number,\n  distinctOn: string,\n): Promise<Result[]> {\n  const docs = orama.data.docs\n\n  // Keep track which values we already seen\n  const values = new Map<SearchableValue, true>()\n\n  // We cannot know how many results we will have in the end,\n  // so we need cannot pre-allocate the array.\n  const results: Result[] = []\n\n  const resultIDs: Set<string> = new Set()\n  const uniqueDocsArrayLength = uniqueDocsArray.length\n  let count = 0\n  for (let i = 0; i < uniqueDocsArrayLength; i++) {\n    const idAndScore = uniqueDocsArray[i]\n\n    // If there are no more results, just break the loop\n    if (typeof idAndScore === 'undefined') {\n      continue\n    }\n\n    const [id, score] = idAndScore\n\n    if (resultIDs.has(id)) {\n      continue\n    }\n\n    const doc = await orama.documentsStore.get(docs, id)\n    const value = await getNested(doc as object, distinctOn)\n    if (typeof value === 'undefined' || values.has(value)) {\n      continue\n    }\n    values.set(value, true)\n\n    count++\n    // We shouldn't consider the document if it's not in the offset range\n    if (count <= offset) {\n      continue\n    }\n\n    results.push({ id, score, document: doc! })\n    resultIDs.add(id)\n\n    // reached the limit, break the loop\n    if (count >= offset + limit) {\n      break\n    }\n  }\n\n  return results\n}\n\nasync function fetchDocuments(\n  orama: Orama,\n  uniqueDocsArray: [string, number][],\n  offset: number,\n  limit: number,\n): Promise<Result[]> {\n  const docs = orama.data.docs\n\n  const results: Result[] = Array.from({\n    length: limit,\n  })\n\n  const resultIDs: Set<string> = new Set()\n\n  // We already have the list of ALL the document IDs containing the search terms.\n  // We loop over them starting from a positional value \"offset\" and ending at \"offset + limit\"\n  // to provide pagination capabilities to the search.\n  for (let i = offset; i < limit + offset; i++) {\n    const idAndScore = uniqueDocsArray[i]\n\n    // If there are no more results, just break the loop\n    if (typeof idAndScore === 'undefined') {\n      break\n    }\n\n    const [id, score] = idAndScore\n\n    if (!resultIDs.has(id)) {\n      // We retrieve the full document only AFTER making sure that we really want it.\n      // We never retrieve the full document preventively.\n      const fullDoc = await orama.documentsStore.get(docs, id)\n      results[i] = { id, score, document: fullDoc! }\n      resultIDs.add(id)\n    }\n  }\n  return results\n}", "import { Orama } from '../types.js'\n\nexport interface RawData {\n  index: unknown\n  docs: unknown\n  sorting: unknown\n}\n\nexport async function load(orama: Orama, raw: RawData): Promise<void> {\n  orama.data.index = await orama.index.load(raw.index)\n  orama.data.docs = await orama.documentsStore.load(raw.docs)\n  orama.data.sorting = await orama.sorter.load(raw.sorting)\n}\n\nexport async function save(orama: Orama): Promise<RawData> {\n  return {\n    index: await orama.index.save(orama.data.index),\n    docs: await orama.documentsStore.save(orama.data.docs),\n    sorting: await orama.sorter.save(orama.data.sorting),\n  }\n}\n", "import { runMultipleHook, runSingleHook } from '../components/hooks.js'\nimport { createError } from '../errors.js'\nimport { Document, Orama } from '../types.js'\nimport { innerInsertMultiple, insert } from './insert.js'\nimport { remove, removeMultiple } from './remove.js'\n\nexport async function update(\n  orama: Orama,\n  id: string,\n  doc: Document,\n  language?: string,\n  skipHooks?: boolean,\n): Promise<string> {\n  if (!skipHooks && orama.beforeUpdate) {\n    await runSingleHook(orama.beforeUpdate, orama, id)\n  }\n\n  await remove(orama, id, language, skipHooks)\n  const newId = await insert(orama, doc, language, skipHooks)\n\n  if (!skipHooks && orama.afterUpdate) {\n    await runSingleHook(orama.afterUpdate, orama, newId)\n  }\n\n  return newId\n}\n\nexport async function updateMultiple(\n  orama: Orama,\n  ids: string[],\n  docs: Document[],\n  batchSize?: number,\n  language?: string,\n  skipHooks?: boolean,\n): Promise<string[]> {\n  if (!skipHooks) {\n    await runMultipleHook(orama.beforeMultipleUpdate, orama, ids)\n  }\n\n  // Validate all documents before the insertion\n  const docsLength = docs.length\n  for (let i = 0; i < docsLength; i++) {\n    const errorProperty = await orama.validateSchema(docs[i], orama.schema)\n    if (errorProperty) {\n      throw createError('SCHEMA_VALIDATION_FAILURE', errorProperty)\n    }\n  }\n\n  await removeMultiple(orama, ids, batchSize, language, skipHooks)\n  const newIds = await innerInsertMultiple(orama, docs, batchSize, language, skipHooks)\n\n  if (!skipHooks) {\n    await runMultipleHook(orama.afterMultipleUpdate, orama, newIds)\n  }\n\n  return newIds\n}\n", "export { boundedLevenshtein } from './components/levenshtein.js'\nexport { formatBytes, formatNanoseconds, getNanosecondsTime, uniqueId } from './utils.js'\nexport * as radixTree from './trees/radix.js'\nexport * as avl from './trees/avl.js'\n"],
  "mappings": "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A;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;;;ACpTK,IAAMC,KAAK;EAChhrGK,IAAMC,KAAK;EAChlHK,IAAMC,KAAK;EAChhhLK,IAAMC,KAAK;EAChvOK,IAAMC,KAAK;EAChB;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;;;AC9FK,IAAMC,KAAK;EAChzNK,IAAMC,YAAmC;EAC9CC,SAASC;EACTC,SAASC;EACTC,QAAQC;EACRC,SAASC;EACTC,YAAYC;EACZC,OAAOC;EACPC,SAASC;EACTC,SAASC;EACTC,WAAWC;EACXC,QAAQC;EACRC,QAAQC;EACRC,SAASC;AACX;AAEO,IAAMC,qBAAqBC,OAAOC,KAAK3B,SAAAA;;;AC9B9C,IAAM4B,YAAY;EAChBC,SAAS;EACTC,QAAQ;EACRC,MAAM;EACNC,MAAM;EACNC,MAAM;EACNC,KAAK;EACLC,MAAM;EACNC,OAAO;EACPC,KAAK;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",
  "names": ["STEMMERS", "arabic", "armenian", "bulgarian", "danish", "dutch", "english", "finnish", "french", "german", "greek", "hungarian", "indian", "indonesian", "irish", "italian", "lithuanian", "nepali", "norwegian", "portuguese", "romanian", "russian", "serbian", "slovenian", "spanish", "swedish", "turkish", "ukrainian", "SPLITTERS", "SUPPORTED_LANGUAGES", "Object", "keys", "baseId", "Date", "now", "toString", "slice", "lastId", "k", "nano", "BigInt", "milli", "second", "sprintf", "template", "args", "replace", "replaceArgs", "groups", "length", "width", "rawWidth", "type", "position", "replacement", "Number", "parseInt", "shift", "toString", "padStart", "value", "padding", "precision", "split", "map", "w", "parseFloat", "toFixed", "padEnd", "formatBytes", "bytes", "decimals", "dm", "sizes", "i", "Math", "floor", "log", "k", "pow", "formatNanoseconds", "BigInt", "nano", "milli", "second", "getNanosecondsTime", "process", "hrtime", "undefined", "bigint", "performance", "now", "uniqueId", "baseId", "lastId", "syncUniqueId", "getOwnProperty", "object", "property", "Object", "hasOwn", "prototype", "hasOwnProperty", "call", "sortTokenScorePredicate", "a", "b", "localeCompare", "intersect", "arrays", "length", "i", "tmp", "set", "Map", "elem", "found", "count", "get", "filter", "e", "undefined", "getDocumentProperties", "doc", "paths", "properties", "pathsLength", "path", "pathTokens", "split", "current", "pathTokensLength", "j", "Array", "isArray", "getNested", "obj", "props", "allLanguages", "SUPPORTED_LANGUAGES", "join", "errors", "NO_LANGUAGE_WITH_CUSTOM_TOKENIZER", "LANGUAGE_NOT_SUPPORTED", "INVALID_STEMMER_FUNCTION_TYPE", "MISSING_STEMMER", "CUSTOM_STOP_WORDS_MUST_BE_FUNCTION_OR_ARRAY", "UNSUPPORTED_COMPONENT", "COMPONENT_MUST_BE_FUNCTION", "COMPONENT_MUST_BE_FUNCTION_OR_ARRAY_FUNCTIONS", "INVALID_SCHEMA_TYPE", "DOCUMENT_ID_MUST_BE_STRING", "DOCUMENT_ALREADY_EXISTS", "DOCUMENT_DOES_NOT_EXIST", "MISSING_DOCUMENT_PROPERTY", "INVALID_DOCUMENT_PROPERTY", "UNKNOWN_INDEX", "INVALID_BOOST_VALUE", "INVALID_FILTER_OPERATION", "SCHEMA_VALIDATION_FAILURE", "INVALID_SORT_SCHEMA_TYPE", "CANNOT_SORT_BY_ARRAY", "UNABLE_TO_SORT_ON_UNKNOWN_FIELD", "SORT_DISABLED", "UNKNOWN_GROUP_BY_PROPERTY", "INVALID_GROUP_BY_PROPERTY", "createError", "code", "args", "error", "Error", "sprintf", "prototype", "captureStackTrace", "formatElapsedTime", "n", "raw", "Number", "formatted", "formatNanoseconds", "getDocumentIndexId", "doc", "id", "createError", "uniqueId", "validateSchema", "schema", "prop", "type", "Object", "entries", "value", "typeOfValue", "typeOfType", "isArrayType", "Array", "isArray", "expectedType", "getInnerType", "valueLength", "length", "i", "subProp", "undefined", "IS_ARRAY_TYPE", "string", "number", "boolean", "INNER_TYPE", "create", "docs", "count", "get", "store", "id", "getMultiple", "ids", "found", "Array", "from", "length", "i", "getAll", "doc", "remove", "load", "raw", "rawDocument", "save", "createDocumentsStore", "OBJECT_COMPONENTS", "FUNCTION_COMPONENTS", "SINGLE_OR_ARRAY_COMPONENTS", "runSingleHook", "hooks", "orama", "id", "doc", "i", "length", "runMultipleHook", "docsOrIds", "create", "insert", "load", "remove", "save", "create", "remove", "BALANCE_STATE", "UNBALANCED_RIGHT", "SLIGHTLY_UNBALANCED_RIGHT", "BALANCED", "SLIGHTLY_UNBALANCED_LEFT", "UNBALANCED_LEFT", "getHeight", "node", "height", "rotateLeft", "right", "left", "Math", "max", "rotateRight", "contains", "key", "find", "getSize", "root", "size", "queue", "push", "length", "shift", "isBalanced", "stack", "pop", "undefined", "heightDiff", "rangeSearch", "min", "result", "traverse", "value", "greaterThan", "inclusive", "lessThan", "getNodeByKey", "insert", "parent", "current", "concat", "newNode", "balanceFactor", "getNodeParent", "parentNode", "minValueNode", "minValueParent", "childNode", "removeDocument", "id", "splice", "indexOf", "contains", "create", "find", "insert", "_boundedLevenshtein", "a", "b", "tolerance", "swap", "length", "lenA", "lenB", "charCodeAt", "startIdx", "delta", "i", "row", "characterCodeCache", "offset", "haveMax", "jStart", "jEnd", "current", "left", "above", "charA", "j", "boundedLevenshtein", "distance", "isBounded", "syncBoundedLevenshtein", "serialize", "word", "subWord", "children", "docs", "end", "updateParent", "node", "parent", "id", "addDocument", "docID", "push", "removeDocument", "index", "indexOf", "splice", "findAllWords", "output", "term", "exact", "tolerance", "docIDs", "getOwnProperty", "difference", "Math", "abs", "length", "syncBoundedLevenshtein", "isBounded", "Set", "docIDsLength", "i", "add", "Array", "from", "character", "Object", "keys", "getCommonPrefix", "a", "b", "commonPrefix", "len", "min", "create", "key", "syncUniqueId", "defineProperty", "value", "insert", "root", "docId", "currentCharacter", "wordAtIndex", "substring", "rootChildCurrentChar", "edgeLabel", "edgeLabelLength", "commonPrefixLength", "edgeLabelAtCommonPrefix", "newNode", "newNodeChild", "inbetweenNode", "inbetweenNodeChild", "wordAtCommonPrefix", "find", "termSubstring", "contains", "rootChildrenChar", "removeWord", "removeDocumentByWord", "prioritizeTokenScores", "arrays", "boost", "threshold", "createError", "tokenMap", "mapsLength", "length", "i", "arr", "entriesLength", "j", "token", "score", "boostScore", "results", "Object", "entries", "sort", "a", "b", "shortestArrayLength", "Math", "min", "map", "slice", "thresholdLength", "ceil", "BM25", "tf", "matchingCount", "docsCount", "fieldLength", "averageFieldLength", "BM25Params", "k", "d", "idf", "log", "insertDocumentScoreParameters", "index", "prop", "id", "tokens", "docsCount", "avgFieldLength", "length", "fieldLengths", "frequencies", "insertTokenScoreParameters", "token", "tokenFrequency", "t", "tf", "tokenOccurrencies", "removeDocumentScoreParameters", "undefined", "removeTokenScoreParameters", "calculateResultScores", "context", "term", "ids", "documentIDs", "Array", "from", "oramaOccurrencies", "oramaFrequencies", "termOccurrencies", "scoreList", "documentIDsLength", "k", "bm25", "BM25", "params", "relevance", "push", "create", "orama", "schema", "prefix", "indexes", "searchableProperties", "searchablePropertiesWithTypes", "type", "Object", "entries", "typeActualType", "path", "isArray", "true", "false", "avlCreate", "radixCreate", "createError", "insertScalar", "implementation", "value", "schemaType", "language", "tokenizer", "booleanIndex", "avlInsert", "tokenize", "radixInsert", "insert", "isArrayType", "innerSchemaType", "getInnerType", "elements", "elementsLength", "i", "removeScalar", "avlRemoveDocument", "booleanKey", "position", "indexOf", "splice", "radixRemoveDocument", "remove", "search", "rootNode", "exact", "tolerance", "searchResult", "radixFind", "Set", "key", "add", "searchByWhereClause", "filters", "filterKeys", "keys", "filtersMap", "reduce", "acc", "param", "operation", "idx", "filteredIDs", "toString", "raw", "flat", "filteredIDsResults", "values", "operationKeys", "operationOpt", "operationValue", "AVLNode", "avlGreaterThan", "avlLessThan", "avlFind", "min", "max", "avlRangeSearch", "result", "intersect", "getSearchableProperties", "getSearchablePropertiesWithTypes", "load", "save", "createIndex", "DIACRITICS_CHARCODE_START", "DIACRITICS_CHARCODE_END", "CHARCODE_REPLACE_MAPPING", "replaceChar", "charCode", "replaceDiacritics", "str", "stringCharCode", "idx", "length", "charCodeAt", "String", "fromCharCode", "en", "it", "fr", "es", "pt", "nl", "se", "ru", "no", "de", "dk", "fi", "stopWords", "english", "en", "italian", "it", "french", "fr", "spanish", "es", "portuguese", "pt", "dutch", "nl", "swedish", "se", "russian", "ru", "norwegian", "no", "german", "de", "danish", "dk", "finnish", "fi", "availableStopWords", "Object", "keys", "step2List", "ational", "tional", "enci", "anci", "izer", "bli", "alli", "entli", "eli", "ousli", "ization", "ation", "ator", "alism", "iveness", "fulness", "ousness", "aliti", "iviti", "biliti", "logi", "step3List", "icate", "ative", "alize", "iciti", "ical", "ful", "ness", "c", "v", "C", "V", "mgr0", "meq1", "mgr1", "s_v", "stemmer", "w", "stem", "suffix", "re", "re2", "re3", "re4", "length", "firstch", "substring", "toUpperCase", "test", "replace", "fp", "exec", "RegExp", "toLowerCase", "normalizeToken", "prop", "token", "key", "language", "normalizationCache", "has", "get", "stopWords", "includes", "set", "stemmer", "stemmerSkipProperties", "replaceDiacritics", "trim", "text", "length", "pop", "shift", "tokenize", "input", "createError", "splitRule", "SPLITTERS", "tokens", "toLowerCase", "split", "map", "bind", "filter", "Boolean", "trimTokens", "allowDuplicates", "Array", "from", "Set", "createTokenizer", "config", "SUPPORTED_LANGUAGES", "stemming", "english", "defaultStopWords", "isArray", "s", "tokenizer", "flat", "Map", "load", "save", "innerCreate", "schema", "sortableDeniedProperties", "prefix", "sorter", "enabled", "sortableProperties", "sortablePropertiesWithTypes", "sorts", "prop", "type", "Object", "entries", "typeActualType", "path", "includes", "Array", "isArray", "ret", "push", "docs", "orderedDocs", "createError", "create", "_", "config", "isSortEnabled", "disabled", "unsortableProperties", "stringSort", "value", "language", "d", "localeCompare", "numerSort", "booleanSort", "insert", "id", "schemaType", "s", "predicate", "bind", "index", "findIndex", "length", "splice", "orderedDocsLength", "i", "docId", "remove", "sortBy", "docIds", "by", "property", "isDesc", "order", "join", "sort", "a", "b", "indexOfA", "indexOfB", "isAIndexed", "isBIndexed", "getSortableProperties", "getSortablePropertiesWithTypes", "load", "raw", "rawDocument", "save", "createSorter", "validateComponents", "components", "defaultComponents", "formatElapsedTime", "getDocumentIndexId", "getDocumentProperties", "validateSchema", "rawKey", "FUNCTION_COMPONENTS", "key", "createError", "SINGLE_OR_ARRAY_COMPONENTS", "Array", "isArray", "fn", "Object", "keys", "OBJECT_COMPONENTS", "includes", "create", "schema", "sort", "language", "id", "uniqueId", "tokenizer", "index", "documentsStore", "sorter", "createTokenizer", "tokenize", "createIndex", "createSorter", "createDocumentsStore", "beforeInsert", "afterInsert", "beforeRemove", "afterRemove", "beforeUpdate", "afterUpdate", "beforeMultipleInsert", "afterMultipleInsert", "beforeMultipleRemove", "afterMultipleRemove", "beforeMultipleUpdate", "afterMultipleUpdate", "orama", "data", "caches", "docs", "sorting", "getByID", "db", "id", "documentsStore", "get", "data", "docs", "count", "components_exports", "kInsertions", "Symbol", "kRemovals", "globalThis", "warn", "process", "emitWarning", "message", "options", "console", "code", "trackInsertion", "orama", "kInsertions", "queueMicrotask", "undefined", "trackRemoval", "kRemovals", "insert", "orama", "doc", "language", "skipHooks", "errorProperty", "validateSchema", "schema", "createError", "innerInsert", "index", "docs", "data", "id", "getDocumentIndexId", "documentsStore", "store", "docsCount", "count", "runSingleHook", "beforeInsert", "indexableProperties", "getSearchableProperties", "indexablePropertiesWithTypes", "getSearchablePropertiesWithTypes", "indexableValues", "getDocumentProperties", "key", "value", "Object", "entries", "actualType", "expectedType", "isArrayType", "Array", "isArray", "prop", "tokenizer", "afterInsert", "sortableProperties", "sorter", "getSortableProperties", "sorting", "sortablePropertiesWithTypes", "getSortablePropertiesWithTypes", "sortableValues", "trackInsertion", "insertMultiple", "batchSize", "runMultipleHook", "beforeMultipleInsert", "docsLength", "length", "i", "innerInsertMultiple", "ids", "Promise", "resolve", "reject", "_insertMultiple", "batch", "slice", "push", "err", "setTimeout", "afterMultipleInsert", "remove", "orama", "id", "language", "skipHooks", "result", "index", "docs", "data", "doc", "documentsStore", "get", "docsCount", "count", "runSingleHook", "beforeRemove", "indexableProperties", "getSearchableProperties", "indexablePropertiesWithTypes", "getSearchablePropertiesWithTypes", "values", "getDocumentProperties", "prop", "value", "schemaType", "tokenizer", "afterRemove", "sortableProperties", "sorter", "getSortableProperties", "sorting", "sortableValues", "trackRemoval", "removeMultiple", "ids", "batchSize", "runMultipleHook", "beforeMultipleRemove", "Promise", "resolve", "reject", "i", "_insertMultiple", "batch", "slice", "length", "err", "setTimeout", "afterMultipleRemove", "sortingPredicate", "order", "a", "b", "toLowerCase", "getFacets", "orama", "results", "facetsConfig", "facets", "allIDs", "map", "id", "allDocs", "documentsStore", "getMultiple", "data", "docs", "facetKeys", "Object", "keys", "properties", "index", "getSearchablePropertiesWithTypes", "facet", "values", "ranges", "tmp", "range", "push", "from", "to", "fromEntries", "count", "allDocsLength", "length", "i", "doc", "facetValue", "includes", "getNested", "propertyType", "calculateNumberFacet", "alreadyInsertedValues", "Set", "v", "calculateBooleanOrStringFacet", "innerType", "stringFacetDefinition", "entries", "sort", "slice", "offset", "limit", "value", "has", "undefined", "add", "toString", "intersectFilteredIDs", "filtered", "lookedUp", "map", "Map", "result", "id", "set", "score", "has", "push", "delete", "DEFAULT_REDUCE", "reducer", "_", "acc", "res", "index", "getInitialValue", "length", "Array", "from", "ALLOWED_TYPES", "getGroups", "orama", "results", "groupBy", "properties", "propertiesLength", "schemaProperties", "getSearchablePropertiesWithTypes", "data", "i", "property", "createError", "includes", "join", "allIDs", "map", "id", "allDocs", "documentsStore", "getMultiple", "docs", "allDocsLength", "returnedCount", "maxResult", "Number", "MAX_SAFE_INTEGER", "listOfValues", "g", "groupByKey", "group", "perValue", "values", "Set", "j", "doc", "value", "getNested", "keyValue", "indexes", "count", "push", "add", "combinations", "calculateCombination", "combinationsLength", "groups", "combination", "combinationLength", "intersect", "sort", "a", "b", "groupsLength", "reduce", "score", "document", "func", "bind", "initialValue", "aggregationValue", "result", "arrs", "item", "head", "c", "defaultBM25Params", "k", "b", "d", "createSearchContext", "tokenizer", "index", "documentsStore", "language", "params", "properties", "tokens", "docsCount", "indexMap", "docsIntersection", "prop", "tokensMap", "token", "timeStart", "getNanosecondsTime", "uniqueDocsIDs", "search", "orama", "relevance", "Object", "assign", "shouldCalculateFacets", "facets", "keys", "length", "limit", "offset", "term", "threshold", "distinctOn", "isPreflight", "preflight", "docs", "data", "tokenize", "propertiesToSearch", "caches", "propertiesToSearchWithTypes", "getSearchablePropertiesWithTypes", "getSearchableProperties", "filter", "startsWith", "includes", "createError", "join", "context", "count", "hasFilters", "where", "whereFiltersIDs", "searchByWhereClause", "indexesLength", "i", "tokensLength", "j", "scoreList", "push", "docIds", "vals", "values", "prioritizeTokenScores", "boost", "uniqueDocs", "uniqueDocsLength", "id", "score", "prevScore", "fromEntries", "getAll", "map", "uniqueDocsArray", "entries", "intersectFilteredIDs", "sortBy", "ids", "getMultiple", "docsWithIdAndScore", "sort", "sorter", "sorting", "sortTokenScorePredicate", "results", "fetchDocumentsWithDistinct", "fetchDocuments", "searchResult", "elapsed", "raw", "formatted", "hits", "Boolean", "getFacets", "groupBy", "groups", "getGroups", "formatElapsedTime", "Map", "resultIDs", "Set", "uniqueDocsArrayLength", "idAndScore", "has", "doc", "get", "value", "getNested", "set", "document", "add", "Array", "from", "fullDoc", "load", "orama", "raw", "data", "index", "docs", "documentsStore", "sorting", "sorter", "save", "update", "orama", "id", "doc", "language", "skipHooks", "beforeUpdate", "runSingleHook", "remove", "newId", "insert", "afterUpdate", "updateMultiple", "ids", "docs", "batchSize", "runMultipleHook", "beforeMultipleUpdate", "docsLength", "length", "i", "errorProperty", "validateSchema", "schema", "createError", "removeMultiple", "newIds", "innerInsertMultiple", "afterMultipleUpdate"]
}
