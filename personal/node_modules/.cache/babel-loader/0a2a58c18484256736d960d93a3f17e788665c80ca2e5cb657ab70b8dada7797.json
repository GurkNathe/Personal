{"ast":null,"code":"import { Loader, LoaderUtils, FileLoader, Group, MeshPhongMaterial, DoubleSide, AdditiveBlending, BufferGeometry, Mesh, Float32BufferAttribute, Matrix4, TextureLoader, Color } from \"three\";\nclass TDSLoader extends Loader {\n  constructor(manager) {\n    super(manager);\n    this.debug = false;\n    this.group = null;\n    this.position = 0;\n    this.materials = [];\n    this.meshes = [];\n  }\n  /**\n   * Load 3ds file from url.\n   *\n   * @method load\n   * @param {[type]} url URL for the file.\n   * @param {Function} onLoad onLoad callback, receives group Object3D as argument.\n   * @param {Function} onProgress onProgress callback.\n   * @param {Function} onError onError callback.\n   */\n  load(url, onLoad, onProgress, onError) {\n    const scope = this;\n    const path = this.path === \"\" ? LoaderUtils.extractUrlBase(url) : this.path;\n    const loader = new FileLoader(this.manager);\n    loader.setPath(this.path);\n    loader.setResponseType(\"arraybuffer\");\n    loader.setRequestHeader(this.requestHeader);\n    loader.setWithCredentials(this.withCredentials);\n    loader.load(url, function (data) {\n      try {\n        onLoad(scope.parse(data, path));\n      } catch (e) {\n        if (onError) {\n          onError(e);\n        } else {\n          console.error(e);\n        }\n        scope.manager.itemError(url);\n      }\n    }, onProgress, onError);\n  }\n  /**\n   * Parse arraybuffer data and load 3ds file.\n   *\n   * @method parse\n   * @param {ArrayBuffer} arraybuffer Arraybuffer data to be loaded.\n   * @param {String} path Path for external resources.\n   * @return {Group} Group loaded from 3ds file.\n   */\n  parse(arraybuffer, path) {\n    this.group = new Group();\n    this.position = 0;\n    this.materials = [];\n    this.meshes = [];\n    this.readFile(arraybuffer, path);\n    for (let i = 0; i < this.meshes.length; i++) {\n      this.group.add(this.meshes[i]);\n    }\n    return this.group;\n  }\n  /**\n   * Decode file content to read 3ds data.\n   *\n   * @method readFile\n   * @param {ArrayBuffer} arraybuffer Arraybuffer data to be loaded.\n   * @param {String} path Path for external resources.\n   */\n  readFile(arraybuffer, path) {\n    const data = new DataView(arraybuffer);\n    const chunk = this.readChunk(data);\n    if (chunk.id === MLIBMAGIC || chunk.id === CMAGIC || chunk.id === M3DMAGIC) {\n      let next = this.nextChunk(data, chunk);\n      while (next !== 0) {\n        if (next === M3D_VERSION) {\n          const version = this.readDWord(data);\n          this.debugMessage(\"3DS file version: \" + version);\n        } else if (next === MDATA) {\n          this.resetPosition(data);\n          this.readMeshData(data, path);\n        } else {\n          this.debugMessage(\"Unknown main chunk: \" + next.toString(16));\n        }\n        next = this.nextChunk(data, chunk);\n      }\n    }\n    this.debugMessage(\"Parsed \" + this.meshes.length + \" meshes\");\n  }\n  /**\n   * Read mesh data chunk.\n   *\n   * @method readMeshData\n   * @param {Dataview} data Dataview in use.\n   * @param {String} path Path for external resources.\n   */\n  readMeshData(data, path) {\n    const chunk = this.readChunk(data);\n    let next = this.nextChunk(data, chunk);\n    while (next !== 0) {\n      if (next === MESH_VERSION) {\n        const version = +this.readDWord(data);\n        this.debugMessage(\"Mesh Version: \" + version);\n      } else if (next === MASTER_SCALE) {\n        const scale = this.readFloat(data);\n        this.debugMessage(\"Master scale: \" + scale);\n        this.group.scale.set(scale, scale, scale);\n      } else if (next === NAMED_OBJECT) {\n        this.debugMessage(\"Named Object\");\n        this.resetPosition(data);\n        this.readNamedObject(data);\n      } else if (next === MAT_ENTRY) {\n        this.debugMessage(\"Material\");\n        this.resetPosition(data);\n        this.readMaterialEntry(data, path);\n      } else {\n        this.debugMessage(\"Unknown MDATA chunk: \" + next.toString(16));\n      }\n      next = this.nextChunk(data, chunk);\n    }\n  }\n  /**\n   * Read named object chunk.\n   *\n   * @method readNamedObject\n   * @param {Dataview} data Dataview in use.\n   */\n  readNamedObject(data) {\n    const chunk = this.readChunk(data);\n    const name = this.readString(data, 64);\n    chunk.cur = this.position;\n    let next = this.nextChunk(data, chunk);\n    while (next !== 0) {\n      if (next === N_TRI_OBJECT) {\n        this.resetPosition(data);\n        const mesh = this.readMesh(data);\n        mesh.name = name;\n        this.meshes.push(mesh);\n      } else {\n        this.debugMessage(\"Unknown named object chunk: \" + next.toString(16));\n      }\n      next = this.nextChunk(data, chunk);\n    }\n    this.endChunk(chunk);\n  }\n  /**\n   * Read material data chunk and add it to the material list.\n   *\n   * @method readMaterialEntry\n   * @param {Dataview} data Dataview in use.\n   * @param {String} path Path for external resources.\n   */\n  readMaterialEntry(data, path) {\n    const chunk = this.readChunk(data);\n    let next = this.nextChunk(data, chunk);\n    const material = new MeshPhongMaterial();\n    while (next !== 0) {\n      if (next === MAT_NAME) {\n        material.name = this.readString(data, 64);\n        this.debugMessage(\"   Name: \" + material.name);\n      } else if (next === MAT_WIRE) {\n        this.debugMessage(\"   Wireframe\");\n        material.wireframe = true;\n      } else if (next === MAT_WIRE_SIZE) {\n        const value = this.readByte(data);\n        material.wireframeLinewidth = value;\n        this.debugMessage(\"   Wireframe Thickness: \" + value);\n      } else if (next === MAT_TWO_SIDE) {\n        material.side = DoubleSide;\n        this.debugMessage(\"   DoubleSided\");\n      } else if (next === MAT_ADDITIVE) {\n        this.debugMessage(\"   Additive Blending\");\n        material.blending = AdditiveBlending;\n      } else if (next === MAT_DIFFUSE) {\n        this.debugMessage(\"   Diffuse Color\");\n        material.color = this.readColor(data);\n      } else if (next === MAT_SPECULAR) {\n        this.debugMessage(\"   Specular Color\");\n        material.specular = this.readColor(data);\n      } else if (next === MAT_AMBIENT) {\n        this.debugMessage(\"   Ambient color\");\n        material.color = this.readColor(data);\n      } else if (next === MAT_SHININESS) {\n        const shininess = this.readPercentage(data);\n        material.shininess = shininess * 100;\n        this.debugMessage(\"   Shininess : \" + shininess);\n      } else if (next === MAT_TRANSPARENCY) {\n        const transparency = this.readPercentage(data);\n        material.opacity = 1 - transparency;\n        this.debugMessage(\"  Transparency : \" + transparency);\n        material.transparent = material.opacity < 1 ? true : false;\n      } else if (next === MAT_TEXMAP) {\n        this.debugMessage(\"   ColorMap\");\n        this.resetPosition(data);\n        material.map = this.readMap(data, path);\n      } else if (next === MAT_BUMPMAP) {\n        this.debugMessage(\"   BumpMap\");\n        this.resetPosition(data);\n        material.bumpMap = this.readMap(data, path);\n      } else if (next === MAT_OPACMAP) {\n        this.debugMessage(\"   OpacityMap\");\n        this.resetPosition(data);\n        material.alphaMap = this.readMap(data, path);\n      } else if (next === MAT_SPECMAP) {\n        this.debugMessage(\"   SpecularMap\");\n        this.resetPosition(data);\n        material.specularMap = this.readMap(data, path);\n      } else {\n        this.debugMessage(\"   Unknown material chunk: \" + next.toString(16));\n      }\n      next = this.nextChunk(data, chunk);\n    }\n    this.endChunk(chunk);\n    this.materials[material.name] = material;\n  }\n  /**\n   * Read mesh data chunk.\n   *\n   * @method readMesh\n   * @param {Dataview} data Dataview in use.\n   * @return {Mesh} The parsed mesh.\n   */\n  readMesh(data) {\n    const chunk = this.readChunk(data);\n    let next = this.nextChunk(data, chunk);\n    const geometry = new BufferGeometry();\n    const material = new MeshPhongMaterial();\n    const mesh = new Mesh(geometry, material);\n    mesh.name = \"mesh\";\n    while (next !== 0) {\n      if (next === POINT_ARRAY) {\n        const points = this.readWord(data);\n        this.debugMessage(\"   Vertex: \" + points);\n        const vertices = [];\n        for (let i = 0; i < points; i++) {\n          vertices.push(this.readFloat(data));\n          vertices.push(this.readFloat(data));\n          vertices.push(this.readFloat(data));\n        }\n        geometry.setAttribute(\"position\", new Float32BufferAttribute(vertices, 3));\n      } else if (next === FACE_ARRAY) {\n        this.resetPosition(data);\n        this.readFaceArray(data, mesh);\n      } else if (next === TEX_VERTS) {\n        const texels = this.readWord(data);\n        this.debugMessage(\"   UV: \" + texels);\n        const uvs = [];\n        for (let i = 0; i < texels; i++) {\n          uvs.push(this.readFloat(data));\n          uvs.push(this.readFloat(data));\n        }\n        geometry.setAttribute(\"uv\", new Float32BufferAttribute(uvs, 2));\n      } else if (next === MESH_MATRIX) {\n        this.debugMessage(\"   Tranformation Matrix (TODO)\");\n        const values = [];\n        for (let i = 0; i < 12; i++) {\n          values[i] = this.readFloat(data);\n        }\n        const matrix = new Matrix4();\n        matrix.elements[0] = values[0];\n        matrix.elements[1] = values[6];\n        matrix.elements[2] = values[3];\n        matrix.elements[3] = values[9];\n        matrix.elements[4] = values[2];\n        matrix.elements[5] = values[8];\n        matrix.elements[6] = values[5];\n        matrix.elements[7] = values[11];\n        matrix.elements[8] = values[1];\n        matrix.elements[9] = values[7];\n        matrix.elements[10] = values[4];\n        matrix.elements[11] = values[10];\n        matrix.elements[12] = 0;\n        matrix.elements[13] = 0;\n        matrix.elements[14] = 0;\n        matrix.elements[15] = 1;\n        matrix.transpose();\n        const inverse = new Matrix4();\n        inverse.copy(matrix).invert();\n        geometry.applyMatrix4(inverse);\n        matrix.decompose(mesh.position, mesh.quaternion, mesh.scale);\n      } else {\n        this.debugMessage(\"   Unknown mesh chunk: \" + next.toString(16));\n      }\n      next = this.nextChunk(data, chunk);\n    }\n    this.endChunk(chunk);\n    geometry.computeVertexNormals();\n    return mesh;\n  }\n  /**\n   * Read face array data chunk.\n   *\n   * @method readFaceArray\n   * @param {Dataview} data Dataview in use.\n   * @param {Mesh} mesh Mesh to be filled with the data read.\n   */\n  readFaceArray(data, mesh) {\n    const chunk = this.readChunk(data);\n    const faces = this.readWord(data);\n    this.debugMessage(\"   Faces: \" + faces);\n    const index = [];\n    for (let i = 0; i < faces; ++i) {\n      index.push(this.readWord(data), this.readWord(data), this.readWord(data));\n      this.readWord(data);\n    }\n    mesh.geometry.setIndex(index);\n    let materialIndex = 0;\n    let start = 0;\n    while (this.position < chunk.end) {\n      const subchunk = this.readChunk(data);\n      if (subchunk.id === MSH_MAT_GROUP) {\n        this.debugMessage(\"      Material Group\");\n        this.resetPosition(data);\n        const group = this.readMaterialGroup(data);\n        const count = group.index.length * 3;\n        mesh.geometry.addGroup(start, count, materialIndex);\n        start += count;\n        materialIndex++;\n        const material = this.materials[group.name];\n        if (Array.isArray(mesh.material) === false) mesh.material = [];\n        if (material !== void 0) {\n          mesh.material.push(material);\n        }\n      } else {\n        this.debugMessage(\"      Unknown face array chunk: \" + subchunk.toString(16));\n      }\n      this.endChunk(subchunk);\n    }\n    if (mesh.material.length === 1) mesh.material = mesh.material[0];\n    this.endChunk(chunk);\n  }\n  /**\n   * Read texture map data chunk.\n   *\n   * @method readMap\n   * @param {Dataview} data Dataview in use.\n   * @param {String} path Path for external resources.\n   * @return {Texture} Texture read from this data chunk.\n   */\n  readMap(data, path) {\n    const chunk = this.readChunk(data);\n    let next = this.nextChunk(data, chunk);\n    let texture = {};\n    const loader = new TextureLoader(this.manager);\n    loader.setPath(this.resourcePath || path).setCrossOrigin(this.crossOrigin);\n    while (next !== 0) {\n      if (next === MAT_MAPNAME) {\n        const name = this.readString(data, 128);\n        texture = loader.load(name);\n        this.debugMessage(\"      File: \" + path + name);\n      } else if (next === MAT_MAP_UOFFSET) {\n        texture.offset.x = this.readFloat(data);\n        this.debugMessage(\"      OffsetX: \" + texture.offset.x);\n      } else if (next === MAT_MAP_VOFFSET) {\n        texture.offset.y = this.readFloat(data);\n        this.debugMessage(\"      OffsetY: \" + texture.offset.y);\n      } else if (next === MAT_MAP_USCALE) {\n        texture.repeat.x = this.readFloat(data);\n        this.debugMessage(\"      RepeatX: \" + texture.repeat.x);\n      } else if (next === MAT_MAP_VSCALE) {\n        texture.repeat.y = this.readFloat(data);\n        this.debugMessage(\"      RepeatY: \" + texture.repeat.y);\n      } else {\n        this.debugMessage(\"      Unknown map chunk: \" + next.toString(16));\n      }\n      next = this.nextChunk(data, chunk);\n    }\n    this.endChunk(chunk);\n    return texture;\n  }\n  /**\n   * Read material group data chunk.\n   *\n   * @method readMaterialGroup\n   * @param {Dataview} data Dataview in use.\n   * @return {Object} Object with name and index of the object.\n   */\n  readMaterialGroup(data) {\n    this.readChunk(data);\n    const name = this.readString(data, 64);\n    const numFaces = this.readWord(data);\n    this.debugMessage(\"         Name: \" + name);\n    this.debugMessage(\"         Faces: \" + numFaces);\n    const index = [];\n    for (let i = 0; i < numFaces; ++i) {\n      index.push(this.readWord(data));\n    }\n    return {\n      name,\n      index\n    };\n  }\n  /**\n   * Read a color value.\n   *\n   * @method readColor\n   * @param {DataView} data Dataview.\n   * @return {Color} Color value read..\n   */\n  readColor(data) {\n    const chunk = this.readChunk(data);\n    const color = new Color();\n    if (chunk.id === COLOR_24 || chunk.id === LIN_COLOR_24) {\n      const r = this.readByte(data);\n      const g = this.readByte(data);\n      const b = this.readByte(data);\n      color.setRGB(r / 255, g / 255, b / 255);\n      this.debugMessage(\"      Color: \" + color.r + \", \" + color.g + \", \" + color.b);\n    } else if (chunk.id === COLOR_F || chunk.id === LIN_COLOR_F) {\n      const r = this.readFloat(data);\n      const g = this.readFloat(data);\n      const b = this.readFloat(data);\n      color.setRGB(r, g, b);\n      this.debugMessage(\"      Color: \" + color.r + \", \" + color.g + \", \" + color.b);\n    } else {\n      this.debugMessage(\"      Unknown color chunk: \" + chunk.toString(16));\n    }\n    this.endChunk(chunk);\n    return color;\n  }\n  /**\n   * Read next chunk of data.\n   *\n   * @method readChunk\n   * @param {DataView} data Dataview.\n   * @return {Object} Chunk of data read.\n   */\n  readChunk(data) {\n    const chunk = {};\n    chunk.cur = this.position;\n    chunk.id = this.readWord(data);\n    chunk.size = this.readDWord(data);\n    chunk.end = chunk.cur + chunk.size;\n    chunk.cur += 6;\n    return chunk;\n  }\n  /**\n   * Set position to the end of the current chunk of data.\n   *\n   * @method endChunk\n   * @param {Object} chunk Data chunk.\n   */\n  endChunk(chunk) {\n    this.position = chunk.end;\n  }\n  /**\n   * Move to the next data chunk.\n   *\n   * @method nextChunk\n   * @param {DataView} data Dataview.\n   * @param {Object} chunk Data chunk.\n   */\n  nextChunk(data, chunk) {\n    if (chunk.cur >= chunk.end) {\n      return 0;\n    }\n    this.position = chunk.cur;\n    try {\n      const next = this.readChunk(data);\n      chunk.cur += next.size;\n      return next.id;\n    } catch (e) {\n      this.debugMessage(\"Unable to read chunk at \" + this.position);\n      return 0;\n    }\n  }\n  /**\n   * Reset dataview position.\n   *\n   * @method resetPosition\n   */\n  resetPosition() {\n    this.position -= 6;\n  }\n  /**\n   * Read byte value.\n   *\n   * @method readByte\n   * @param {DataView} data Dataview to read data from.\n   * @return {Number} Data read from the dataview.\n   */\n  readByte(data) {\n    const v = data.getUint8(this.position, true);\n    this.position += 1;\n    return v;\n  }\n  /**\n   * Read 32 bit float value.\n   *\n   * @method readFloat\n   * @param {DataView} data Dataview to read data from.\n   * @return {Number} Data read from the dataview.\n   */\n  readFloat(data) {\n    try {\n      const v = data.getFloat32(this.position, true);\n      this.position += 4;\n      return v;\n    } catch (e) {\n      this.debugMessage(e + \" \" + this.position + \" \" + data.byteLength);\n    }\n  }\n  /**\n   * Read 32 bit signed integer value.\n   *\n   * @method readInt\n   * @param {DataView} data Dataview to read data from.\n   * @return {Number} Data read from the dataview.\n   */\n  readInt(data) {\n    const v = data.getInt32(this.position, true);\n    this.position += 4;\n    return v;\n  }\n  /**\n   * Read 16 bit signed integer value.\n   *\n   * @method readShort\n   * @param {DataView} data Dataview to read data from.\n   * @return {Number} Data read from the dataview.\n   */\n  readShort(data) {\n    const v = data.getInt16(this.position, true);\n    this.position += 2;\n    return v;\n  }\n  /**\n   * Read 64 bit unsigned integer value.\n   *\n   * @method readDWord\n   * @param {DataView} data Dataview to read data from.\n   * @return {Number} Data read from the dataview.\n   */\n  readDWord(data) {\n    const v = data.getUint32(this.position, true);\n    this.position += 4;\n    return v;\n  }\n  /**\n   * Read 32 bit unsigned integer value.\n   *\n   * @method readWord\n   * @param {DataView} data Dataview to read data from.\n   * @return {Number} Data read from the dataview.\n   */\n  readWord(data) {\n    const v = data.getUint16(this.position, true);\n    this.position += 2;\n    return v;\n  }\n  /**\n   * Read string value.\n   *\n   * @method readString\n   * @param {DataView} data Dataview to read data from.\n   * @param {Number} maxLength Max size of the string to be read.\n   * @return {String} Data read from the dataview.\n   */\n  readString(data, maxLength) {\n    let s = \"\";\n    for (let i = 0; i < maxLength; i++) {\n      const c = this.readByte(data);\n      if (!c) {\n        break;\n      }\n      s += String.fromCharCode(c);\n    }\n    return s;\n  }\n  /**\n   * Read percentage value.\n   *\n   * @method readPercentage\n   * @param {DataView} data Dataview to read data from.\n   * @return {Number} Data read from the dataview.\n   */\n  readPercentage(data) {\n    const chunk = this.readChunk(data);\n    let value;\n    switch (chunk.id) {\n      case INT_PERCENTAGE:\n        value = this.readShort(data) / 100;\n        break;\n      case FLOAT_PERCENTAGE:\n        value = this.readFloat(data);\n        break;\n      default:\n        this.debugMessage(\"      Unknown percentage chunk: \" + chunk.toString(16));\n    }\n    this.endChunk(chunk);\n    return value;\n  }\n  /**\n   * Print debug message to the console.\n   *\n   * Is controlled by a flag to show or hide debug messages.\n   *\n   * @method debugMessage\n   * @param {Object} message Debug message to print to the console.\n   */\n  debugMessage(message) {\n    if (this.debug) {\n      console.log(message);\n    }\n  }\n}\nconst M3DMAGIC = 19789;\nconst MLIBMAGIC = 15786;\nconst CMAGIC = 49725;\nconst M3D_VERSION = 2;\nconst COLOR_F = 16;\nconst COLOR_24 = 17;\nconst LIN_COLOR_24 = 18;\nconst LIN_COLOR_F = 19;\nconst INT_PERCENTAGE = 48;\nconst FLOAT_PERCENTAGE = 49;\nconst MDATA = 15677;\nconst MESH_VERSION = 15678;\nconst MASTER_SCALE = 256;\nconst MAT_ENTRY = 45055;\nconst MAT_NAME = 40960;\nconst MAT_AMBIENT = 40976;\nconst MAT_DIFFUSE = 40992;\nconst MAT_SPECULAR = 41008;\nconst MAT_SHININESS = 41024;\nconst MAT_TRANSPARENCY = 41040;\nconst MAT_TWO_SIDE = 41089;\nconst MAT_ADDITIVE = 41091;\nconst MAT_WIRE = 41093;\nconst MAT_WIRE_SIZE = 41095;\nconst MAT_TEXMAP = 41472;\nconst MAT_OPACMAP = 41488;\nconst MAT_BUMPMAP = 41520;\nconst MAT_SPECMAP = 41476;\nconst MAT_MAPNAME = 41728;\nconst MAT_MAP_USCALE = 41812;\nconst MAT_MAP_VSCALE = 41814;\nconst MAT_MAP_UOFFSET = 41816;\nconst MAT_MAP_VOFFSET = 41818;\nconst NAMED_OBJECT = 16384;\nconst N_TRI_OBJECT = 16640;\nconst POINT_ARRAY = 16656;\nconst FACE_ARRAY = 16672;\nconst MSH_MAT_GROUP = 16688;\nconst TEX_VERTS = 16704;\nconst MESH_MATRIX = 16736;\nexport { TDSLoader };","map":{"version":3,"names":["Loader","LoaderUtils","FileLoader","Group","MeshPhongMaterial","DoubleSide","AdditiveBlending","BufferGeometry","Mesh","Float32BufferAttribute","Matrix4","TextureLoader","Color","TDSLoader","constructor","manager","debug","group","position","materials","meshes","load","url","onLoad","onProgress","onError","scope","path","extractUrlBase","loader","setPath","setResponseType","setRequestHeader","requestHeader","setWithCredentials","withCredentials","data","parse","e","console","error","itemError","arraybuffer","readFile","i","length","add","DataView","chunk","readChunk","id","MLIBMAGIC","CMAGIC","M3DMAGIC","next","nextChunk","M3D_VERSION","version","readDWord","debugMessage","MDATA","resetPosition","readMeshData","toString","MESH_VERSION","MASTER_SCALE","scale","readFloat","set","NAMED_OBJECT","readNamedObject","MAT_ENTRY","readMaterialEntry","name","readString","cur","N_TRI_OBJECT","mesh","readMesh","push","endChunk","material","MAT_NAME","MAT_WIRE","wireframe","MAT_WIRE_SIZE","value","readByte","wireframeLinewidth","MAT_TWO_SIDE","side","MAT_ADDITIVE","blending","MAT_DIFFUSE","color","readColor","MAT_SPECULAR","specular","MAT_AMBIENT","MAT_SHININESS","shininess","readPercentage","MAT_TRANSPARENCY","transparency","opacity","transparent","MAT_TEXMAP","map","readMap","MAT_BUMPMAP","bumpMap","MAT_OPACMAP","alphaMap","MAT_SPECMAP","specularMap","geometry","POINT_ARRAY","points","readWord","vertices","setAttribute","FACE_ARRAY","readFaceArray","TEX_VERTS","texels","uvs","MESH_MATRIX","values","matrix","elements","transpose","inverse","copy","invert","applyMatrix4","decompose","quaternion","computeVertexNormals","faces","index","setIndex","materialIndex","start","end","subchunk","MSH_MAT_GROUP","readMaterialGroup","count","addGroup","Array","isArray","texture","resourcePath","setCrossOrigin","crossOrigin","MAT_MAPNAME","MAT_MAP_UOFFSET","offset","x","MAT_MAP_VOFFSET","y","MAT_MAP_USCALE","repeat","MAT_MAP_VSCALE","numFaces","COLOR_24","LIN_COLOR_24","r","g","b","setRGB","COLOR_F","LIN_COLOR_F","size","v","getUint8","getFloat32","byteLength","readInt","getInt32","readShort","getInt16","getUint32","getUint16","maxLength","s","c","String","fromCharCode","INT_PERCENTAGE","FLOAT_PERCENTAGE","message","log"],"sources":["/home/krug/Coding/JavaScript/Websites/Personal/personal/node_modules/.pnpm/three-stdlib@2.23.7_three@0.151.3/node_modules/three-stdlib/loaders/TDSLoader.js"],"sourcesContent":["import { Loader, LoaderUtils, FileLoader, Group, MeshPhongMaterial, DoubleSide, AdditiveBlending, BufferGeometry, Mesh, Float32BufferAttribute, Matrix4, TextureLoader, Color } from \"three\";\nclass TDSLoader extends Loader {\n  constructor(manager) {\n    super(manager);\n    this.debug = false;\n    this.group = null;\n    this.position = 0;\n    this.materials = [];\n    this.meshes = [];\n  }\n  /**\n   * Load 3ds file from url.\n   *\n   * @method load\n   * @param {[type]} url URL for the file.\n   * @param {Function} onLoad onLoad callback, receives group Object3D as argument.\n   * @param {Function} onProgress onProgress callback.\n   * @param {Function} onError onError callback.\n   */\n  load(url, onLoad, onProgress, onError) {\n    const scope = this;\n    const path = this.path === \"\" ? LoaderUtils.extractUrlBase(url) : this.path;\n    const loader = new FileLoader(this.manager);\n    loader.setPath(this.path);\n    loader.setResponseType(\"arraybuffer\");\n    loader.setRequestHeader(this.requestHeader);\n    loader.setWithCredentials(this.withCredentials);\n    loader.load(\n      url,\n      function(data) {\n        try {\n          onLoad(scope.parse(data, path));\n        } catch (e) {\n          if (onError) {\n            onError(e);\n          } else {\n            console.error(e);\n          }\n          scope.manager.itemError(url);\n        }\n      },\n      onProgress,\n      onError\n    );\n  }\n  /**\n   * Parse arraybuffer data and load 3ds file.\n   *\n   * @method parse\n   * @param {ArrayBuffer} arraybuffer Arraybuffer data to be loaded.\n   * @param {String} path Path for external resources.\n   * @return {Group} Group loaded from 3ds file.\n   */\n  parse(arraybuffer, path) {\n    this.group = new Group();\n    this.position = 0;\n    this.materials = [];\n    this.meshes = [];\n    this.readFile(arraybuffer, path);\n    for (let i = 0; i < this.meshes.length; i++) {\n      this.group.add(this.meshes[i]);\n    }\n    return this.group;\n  }\n  /**\n   * Decode file content to read 3ds data.\n   *\n   * @method readFile\n   * @param {ArrayBuffer} arraybuffer Arraybuffer data to be loaded.\n   * @param {String} path Path for external resources.\n   */\n  readFile(arraybuffer, path) {\n    const data = new DataView(arraybuffer);\n    const chunk = this.readChunk(data);\n    if (chunk.id === MLIBMAGIC || chunk.id === CMAGIC || chunk.id === M3DMAGIC) {\n      let next = this.nextChunk(data, chunk);\n      while (next !== 0) {\n        if (next === M3D_VERSION) {\n          const version = this.readDWord(data);\n          this.debugMessage(\"3DS file version: \" + version);\n        } else if (next === MDATA) {\n          this.resetPosition(data);\n          this.readMeshData(data, path);\n        } else {\n          this.debugMessage(\"Unknown main chunk: \" + next.toString(16));\n        }\n        next = this.nextChunk(data, chunk);\n      }\n    }\n    this.debugMessage(\"Parsed \" + this.meshes.length + \" meshes\");\n  }\n  /**\n   * Read mesh data chunk.\n   *\n   * @method readMeshData\n   * @param {Dataview} data Dataview in use.\n   * @param {String} path Path for external resources.\n   */\n  readMeshData(data, path) {\n    const chunk = this.readChunk(data);\n    let next = this.nextChunk(data, chunk);\n    while (next !== 0) {\n      if (next === MESH_VERSION) {\n        const version = +this.readDWord(data);\n        this.debugMessage(\"Mesh Version: \" + version);\n      } else if (next === MASTER_SCALE) {\n        const scale = this.readFloat(data);\n        this.debugMessage(\"Master scale: \" + scale);\n        this.group.scale.set(scale, scale, scale);\n      } else if (next === NAMED_OBJECT) {\n        this.debugMessage(\"Named Object\");\n        this.resetPosition(data);\n        this.readNamedObject(data);\n      } else if (next === MAT_ENTRY) {\n        this.debugMessage(\"Material\");\n        this.resetPosition(data);\n        this.readMaterialEntry(data, path);\n      } else {\n        this.debugMessage(\"Unknown MDATA chunk: \" + next.toString(16));\n      }\n      next = this.nextChunk(data, chunk);\n    }\n  }\n  /**\n   * Read named object chunk.\n   *\n   * @method readNamedObject\n   * @param {Dataview} data Dataview in use.\n   */\n  readNamedObject(data) {\n    const chunk = this.readChunk(data);\n    const name = this.readString(data, 64);\n    chunk.cur = this.position;\n    let next = this.nextChunk(data, chunk);\n    while (next !== 0) {\n      if (next === N_TRI_OBJECT) {\n        this.resetPosition(data);\n        const mesh = this.readMesh(data);\n        mesh.name = name;\n        this.meshes.push(mesh);\n      } else {\n        this.debugMessage(\"Unknown named object chunk: \" + next.toString(16));\n      }\n      next = this.nextChunk(data, chunk);\n    }\n    this.endChunk(chunk);\n  }\n  /**\n   * Read material data chunk and add it to the material list.\n   *\n   * @method readMaterialEntry\n   * @param {Dataview} data Dataview in use.\n   * @param {String} path Path for external resources.\n   */\n  readMaterialEntry(data, path) {\n    const chunk = this.readChunk(data);\n    let next = this.nextChunk(data, chunk);\n    const material = new MeshPhongMaterial();\n    while (next !== 0) {\n      if (next === MAT_NAME) {\n        material.name = this.readString(data, 64);\n        this.debugMessage(\"   Name: \" + material.name);\n      } else if (next === MAT_WIRE) {\n        this.debugMessage(\"   Wireframe\");\n        material.wireframe = true;\n      } else if (next === MAT_WIRE_SIZE) {\n        const value = this.readByte(data);\n        material.wireframeLinewidth = value;\n        this.debugMessage(\"   Wireframe Thickness: \" + value);\n      } else if (next === MAT_TWO_SIDE) {\n        material.side = DoubleSide;\n        this.debugMessage(\"   DoubleSided\");\n      } else if (next === MAT_ADDITIVE) {\n        this.debugMessage(\"   Additive Blending\");\n        material.blending = AdditiveBlending;\n      } else if (next === MAT_DIFFUSE) {\n        this.debugMessage(\"   Diffuse Color\");\n        material.color = this.readColor(data);\n      } else if (next === MAT_SPECULAR) {\n        this.debugMessage(\"   Specular Color\");\n        material.specular = this.readColor(data);\n      } else if (next === MAT_AMBIENT) {\n        this.debugMessage(\"   Ambient color\");\n        material.color = this.readColor(data);\n      } else if (next === MAT_SHININESS) {\n        const shininess = this.readPercentage(data);\n        material.shininess = shininess * 100;\n        this.debugMessage(\"   Shininess : \" + shininess);\n      } else if (next === MAT_TRANSPARENCY) {\n        const transparency = this.readPercentage(data);\n        material.opacity = 1 - transparency;\n        this.debugMessage(\"  Transparency : \" + transparency);\n        material.transparent = material.opacity < 1 ? true : false;\n      } else if (next === MAT_TEXMAP) {\n        this.debugMessage(\"   ColorMap\");\n        this.resetPosition(data);\n        material.map = this.readMap(data, path);\n      } else if (next === MAT_BUMPMAP) {\n        this.debugMessage(\"   BumpMap\");\n        this.resetPosition(data);\n        material.bumpMap = this.readMap(data, path);\n      } else if (next === MAT_OPACMAP) {\n        this.debugMessage(\"   OpacityMap\");\n        this.resetPosition(data);\n        material.alphaMap = this.readMap(data, path);\n      } else if (next === MAT_SPECMAP) {\n        this.debugMessage(\"   SpecularMap\");\n        this.resetPosition(data);\n        material.specularMap = this.readMap(data, path);\n      } else {\n        this.debugMessage(\"   Unknown material chunk: \" + next.toString(16));\n      }\n      next = this.nextChunk(data, chunk);\n    }\n    this.endChunk(chunk);\n    this.materials[material.name] = material;\n  }\n  /**\n   * Read mesh data chunk.\n   *\n   * @method readMesh\n   * @param {Dataview} data Dataview in use.\n   * @return {Mesh} The parsed mesh.\n   */\n  readMesh(data) {\n    const chunk = this.readChunk(data);\n    let next = this.nextChunk(data, chunk);\n    const geometry = new BufferGeometry();\n    const material = new MeshPhongMaterial();\n    const mesh = new Mesh(geometry, material);\n    mesh.name = \"mesh\";\n    while (next !== 0) {\n      if (next === POINT_ARRAY) {\n        const points = this.readWord(data);\n        this.debugMessage(\"   Vertex: \" + points);\n        const vertices = [];\n        for (let i = 0; i < points; i++) {\n          vertices.push(this.readFloat(data));\n          vertices.push(this.readFloat(data));\n          vertices.push(this.readFloat(data));\n        }\n        geometry.setAttribute(\"position\", new Float32BufferAttribute(vertices, 3));\n      } else if (next === FACE_ARRAY) {\n        this.resetPosition(data);\n        this.readFaceArray(data, mesh);\n      } else if (next === TEX_VERTS) {\n        const texels = this.readWord(data);\n        this.debugMessage(\"   UV: \" + texels);\n        const uvs = [];\n        for (let i = 0; i < texels; i++) {\n          uvs.push(this.readFloat(data));\n          uvs.push(this.readFloat(data));\n        }\n        geometry.setAttribute(\"uv\", new Float32BufferAttribute(uvs, 2));\n      } else if (next === MESH_MATRIX) {\n        this.debugMessage(\"   Tranformation Matrix (TODO)\");\n        const values = [];\n        for (let i = 0; i < 12; i++) {\n          values[i] = this.readFloat(data);\n        }\n        const matrix = new Matrix4();\n        matrix.elements[0] = values[0];\n        matrix.elements[1] = values[6];\n        matrix.elements[2] = values[3];\n        matrix.elements[3] = values[9];\n        matrix.elements[4] = values[2];\n        matrix.elements[5] = values[8];\n        matrix.elements[6] = values[5];\n        matrix.elements[7] = values[11];\n        matrix.elements[8] = values[1];\n        matrix.elements[9] = values[7];\n        matrix.elements[10] = values[4];\n        matrix.elements[11] = values[10];\n        matrix.elements[12] = 0;\n        matrix.elements[13] = 0;\n        matrix.elements[14] = 0;\n        matrix.elements[15] = 1;\n        matrix.transpose();\n        const inverse = new Matrix4();\n        inverse.copy(matrix).invert();\n        geometry.applyMatrix4(inverse);\n        matrix.decompose(mesh.position, mesh.quaternion, mesh.scale);\n      } else {\n        this.debugMessage(\"   Unknown mesh chunk: \" + next.toString(16));\n      }\n      next = this.nextChunk(data, chunk);\n    }\n    this.endChunk(chunk);\n    geometry.computeVertexNormals();\n    return mesh;\n  }\n  /**\n   * Read face array data chunk.\n   *\n   * @method readFaceArray\n   * @param {Dataview} data Dataview in use.\n   * @param {Mesh} mesh Mesh to be filled with the data read.\n   */\n  readFaceArray(data, mesh) {\n    const chunk = this.readChunk(data);\n    const faces = this.readWord(data);\n    this.debugMessage(\"   Faces: \" + faces);\n    const index = [];\n    for (let i = 0; i < faces; ++i) {\n      index.push(this.readWord(data), this.readWord(data), this.readWord(data));\n      this.readWord(data);\n    }\n    mesh.geometry.setIndex(index);\n    let materialIndex = 0;\n    let start = 0;\n    while (this.position < chunk.end) {\n      const subchunk = this.readChunk(data);\n      if (subchunk.id === MSH_MAT_GROUP) {\n        this.debugMessage(\"      Material Group\");\n        this.resetPosition(data);\n        const group = this.readMaterialGroup(data);\n        const count = group.index.length * 3;\n        mesh.geometry.addGroup(start, count, materialIndex);\n        start += count;\n        materialIndex++;\n        const material = this.materials[group.name];\n        if (Array.isArray(mesh.material) === false)\n          mesh.material = [];\n        if (material !== void 0) {\n          mesh.material.push(material);\n        }\n      } else {\n        this.debugMessage(\"      Unknown face array chunk: \" + subchunk.toString(16));\n      }\n      this.endChunk(subchunk);\n    }\n    if (mesh.material.length === 1)\n      mesh.material = mesh.material[0];\n    this.endChunk(chunk);\n  }\n  /**\n   * Read texture map data chunk.\n   *\n   * @method readMap\n   * @param {Dataview} data Dataview in use.\n   * @param {String} path Path for external resources.\n   * @return {Texture} Texture read from this data chunk.\n   */\n  readMap(data, path) {\n    const chunk = this.readChunk(data);\n    let next = this.nextChunk(data, chunk);\n    let texture = {};\n    const loader = new TextureLoader(this.manager);\n    loader.setPath(this.resourcePath || path).setCrossOrigin(this.crossOrigin);\n    while (next !== 0) {\n      if (next === MAT_MAPNAME) {\n        const name = this.readString(data, 128);\n        texture = loader.load(name);\n        this.debugMessage(\"      File: \" + path + name);\n      } else if (next === MAT_MAP_UOFFSET) {\n        texture.offset.x = this.readFloat(data);\n        this.debugMessage(\"      OffsetX: \" + texture.offset.x);\n      } else if (next === MAT_MAP_VOFFSET) {\n        texture.offset.y = this.readFloat(data);\n        this.debugMessage(\"      OffsetY: \" + texture.offset.y);\n      } else if (next === MAT_MAP_USCALE) {\n        texture.repeat.x = this.readFloat(data);\n        this.debugMessage(\"      RepeatX: \" + texture.repeat.x);\n      } else if (next === MAT_MAP_VSCALE) {\n        texture.repeat.y = this.readFloat(data);\n        this.debugMessage(\"      RepeatY: \" + texture.repeat.y);\n      } else {\n        this.debugMessage(\"      Unknown map chunk: \" + next.toString(16));\n      }\n      next = this.nextChunk(data, chunk);\n    }\n    this.endChunk(chunk);\n    return texture;\n  }\n  /**\n   * Read material group data chunk.\n   *\n   * @method readMaterialGroup\n   * @param {Dataview} data Dataview in use.\n   * @return {Object} Object with name and index of the object.\n   */\n  readMaterialGroup(data) {\n    this.readChunk(data);\n    const name = this.readString(data, 64);\n    const numFaces = this.readWord(data);\n    this.debugMessage(\"         Name: \" + name);\n    this.debugMessage(\"         Faces: \" + numFaces);\n    const index = [];\n    for (let i = 0; i < numFaces; ++i) {\n      index.push(this.readWord(data));\n    }\n    return { name, index };\n  }\n  /**\n   * Read a color value.\n   *\n   * @method readColor\n   * @param {DataView} data Dataview.\n   * @return {Color} Color value read..\n   */\n  readColor(data) {\n    const chunk = this.readChunk(data);\n    const color = new Color();\n    if (chunk.id === COLOR_24 || chunk.id === LIN_COLOR_24) {\n      const r = this.readByte(data);\n      const g = this.readByte(data);\n      const b = this.readByte(data);\n      color.setRGB(r / 255, g / 255, b / 255);\n      this.debugMessage(\"      Color: \" + color.r + \", \" + color.g + \", \" + color.b);\n    } else if (chunk.id === COLOR_F || chunk.id === LIN_COLOR_F) {\n      const r = this.readFloat(data);\n      const g = this.readFloat(data);\n      const b = this.readFloat(data);\n      color.setRGB(r, g, b);\n      this.debugMessage(\"      Color: \" + color.r + \", \" + color.g + \", \" + color.b);\n    } else {\n      this.debugMessage(\"      Unknown color chunk: \" + chunk.toString(16));\n    }\n    this.endChunk(chunk);\n    return color;\n  }\n  /**\n   * Read next chunk of data.\n   *\n   * @method readChunk\n   * @param {DataView} data Dataview.\n   * @return {Object} Chunk of data read.\n   */\n  readChunk(data) {\n    const chunk = {};\n    chunk.cur = this.position;\n    chunk.id = this.readWord(data);\n    chunk.size = this.readDWord(data);\n    chunk.end = chunk.cur + chunk.size;\n    chunk.cur += 6;\n    return chunk;\n  }\n  /**\n   * Set position to the end of the current chunk of data.\n   *\n   * @method endChunk\n   * @param {Object} chunk Data chunk.\n   */\n  endChunk(chunk) {\n    this.position = chunk.end;\n  }\n  /**\n   * Move to the next data chunk.\n   *\n   * @method nextChunk\n   * @param {DataView} data Dataview.\n   * @param {Object} chunk Data chunk.\n   */\n  nextChunk(data, chunk) {\n    if (chunk.cur >= chunk.end) {\n      return 0;\n    }\n    this.position = chunk.cur;\n    try {\n      const next = this.readChunk(data);\n      chunk.cur += next.size;\n      return next.id;\n    } catch (e) {\n      this.debugMessage(\"Unable to read chunk at \" + this.position);\n      return 0;\n    }\n  }\n  /**\n   * Reset dataview position.\n   *\n   * @method resetPosition\n   */\n  resetPosition() {\n    this.position -= 6;\n  }\n  /**\n   * Read byte value.\n   *\n   * @method readByte\n   * @param {DataView} data Dataview to read data from.\n   * @return {Number} Data read from the dataview.\n   */\n  readByte(data) {\n    const v = data.getUint8(this.position, true);\n    this.position += 1;\n    return v;\n  }\n  /**\n   * Read 32 bit float value.\n   *\n   * @method readFloat\n   * @param {DataView} data Dataview to read data from.\n   * @return {Number} Data read from the dataview.\n   */\n  readFloat(data) {\n    try {\n      const v = data.getFloat32(this.position, true);\n      this.position += 4;\n      return v;\n    } catch (e) {\n      this.debugMessage(e + \" \" + this.position + \" \" + data.byteLength);\n    }\n  }\n  /**\n   * Read 32 bit signed integer value.\n   *\n   * @method readInt\n   * @param {DataView} data Dataview to read data from.\n   * @return {Number} Data read from the dataview.\n   */\n  readInt(data) {\n    const v = data.getInt32(this.position, true);\n    this.position += 4;\n    return v;\n  }\n  /**\n   * Read 16 bit signed integer value.\n   *\n   * @method readShort\n   * @param {DataView} data Dataview to read data from.\n   * @return {Number} Data read from the dataview.\n   */\n  readShort(data) {\n    const v = data.getInt16(this.position, true);\n    this.position += 2;\n    return v;\n  }\n  /**\n   * Read 64 bit unsigned integer value.\n   *\n   * @method readDWord\n   * @param {DataView} data Dataview to read data from.\n   * @return {Number} Data read from the dataview.\n   */\n  readDWord(data) {\n    const v = data.getUint32(this.position, true);\n    this.position += 4;\n    return v;\n  }\n  /**\n   * Read 32 bit unsigned integer value.\n   *\n   * @method readWord\n   * @param {DataView} data Dataview to read data from.\n   * @return {Number} Data read from the dataview.\n   */\n  readWord(data) {\n    const v = data.getUint16(this.position, true);\n    this.position += 2;\n    return v;\n  }\n  /**\n   * Read string value.\n   *\n   * @method readString\n   * @param {DataView} data Dataview to read data from.\n   * @param {Number} maxLength Max size of the string to be read.\n   * @return {String} Data read from the dataview.\n   */\n  readString(data, maxLength) {\n    let s = \"\";\n    for (let i = 0; i < maxLength; i++) {\n      const c = this.readByte(data);\n      if (!c) {\n        break;\n      }\n      s += String.fromCharCode(c);\n    }\n    return s;\n  }\n  /**\n   * Read percentage value.\n   *\n   * @method readPercentage\n   * @param {DataView} data Dataview to read data from.\n   * @return {Number} Data read from the dataview.\n   */\n  readPercentage(data) {\n    const chunk = this.readChunk(data);\n    let value;\n    switch (chunk.id) {\n      case INT_PERCENTAGE:\n        value = this.readShort(data) / 100;\n        break;\n      case FLOAT_PERCENTAGE:\n        value = this.readFloat(data);\n        break;\n      default:\n        this.debugMessage(\"      Unknown percentage chunk: \" + chunk.toString(16));\n    }\n    this.endChunk(chunk);\n    return value;\n  }\n  /**\n   * Print debug message to the console.\n   *\n   * Is controlled by a flag to show or hide debug messages.\n   *\n   * @method debugMessage\n   * @param {Object} message Debug message to print to the console.\n   */\n  debugMessage(message) {\n    if (this.debug) {\n      console.log(message);\n    }\n  }\n}\nconst M3DMAGIC = 19789;\nconst MLIBMAGIC = 15786;\nconst CMAGIC = 49725;\nconst M3D_VERSION = 2;\nconst COLOR_F = 16;\nconst COLOR_24 = 17;\nconst LIN_COLOR_24 = 18;\nconst LIN_COLOR_F = 19;\nconst INT_PERCENTAGE = 48;\nconst FLOAT_PERCENTAGE = 49;\nconst MDATA = 15677;\nconst MESH_VERSION = 15678;\nconst MASTER_SCALE = 256;\nconst MAT_ENTRY = 45055;\nconst MAT_NAME = 40960;\nconst MAT_AMBIENT = 40976;\nconst MAT_DIFFUSE = 40992;\nconst MAT_SPECULAR = 41008;\nconst MAT_SHININESS = 41024;\nconst MAT_TRANSPARENCY = 41040;\nconst MAT_TWO_SIDE = 41089;\nconst MAT_ADDITIVE = 41091;\nconst MAT_WIRE = 41093;\nconst MAT_WIRE_SIZE = 41095;\nconst MAT_TEXMAP = 41472;\nconst MAT_OPACMAP = 41488;\nconst MAT_BUMPMAP = 41520;\nconst MAT_SPECMAP = 41476;\nconst MAT_MAPNAME = 41728;\nconst MAT_MAP_USCALE = 41812;\nconst MAT_MAP_VSCALE = 41814;\nconst MAT_MAP_UOFFSET = 41816;\nconst MAT_MAP_VOFFSET = 41818;\nconst NAMED_OBJECT = 16384;\nconst N_TRI_OBJECT = 16640;\nconst POINT_ARRAY = 16656;\nconst FACE_ARRAY = 16672;\nconst MSH_MAT_GROUP = 16688;\nconst TEX_VERTS = 16704;\nconst MESH_MATRIX = 16736;\nexport {\n  TDSLoader\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}