{"ast":null,"code":"var ParallaxShader = {\n  // Ordered from fastest to best quality.\n  modes: {\n    none: \"NO_PARALLAX\",\n    basic: \"USE_BASIC_PARALLAX\",\n    steep: \"USE_STEEP_PARALLAX\",\n    occlusion: \"USE_OCLUSION_PARALLAX\",\n    // a.k.a. POM\n    relief: \"USE_RELIEF_PARALLAX\"\n  },\n  uniforms: {\n    bumpMap: {\n      value: null\n    },\n    map: {\n      value: null\n    },\n    parallaxScale: {\n      value: null\n    },\n    parallaxMinLayers: {\n      value: null\n    },\n    parallaxMaxLayers: {\n      value: null\n    }\n  },\n  vertexShader: [\"varying vec2 vUv;\", \"varying vec3 vViewPosition;\", \"varying vec3 vNormal;\", \"void main() {\", \"\tvUv = uv;\", \"\tvec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );\", \"\tvViewPosition = -mvPosition.xyz;\", \"\tvNormal = normalize( normalMatrix * normal );\", \"\tgl_Position = projectionMatrix * mvPosition;\", \"}\"].join(\"\\n\"),\n  fragmentShader: [\"uniform sampler2D bumpMap;\", \"uniform sampler2D map;\", \"uniform float parallaxScale;\", \"uniform float parallaxMinLayers;\", \"uniform float parallaxMaxLayers;\", \"varying vec2 vUv;\", \"varying vec3 vViewPosition;\", \"varying vec3 vNormal;\", \"#ifdef USE_BASIC_PARALLAX\", \"\tvec2 parallaxMap( in vec3 V ) {\", \"\t\tfloat initialHeight = texture2D( bumpMap, vUv ).r;\",\n  // No Offset Limitting: messy, floating output at grazing angles.\n  //\"vec2 texCoordOffset = parallaxScale * V.xy / V.z * initialHeight;\",\n  // Offset Limiting\n  \"\t\tvec2 texCoordOffset = parallaxScale * V.xy * initialHeight;\", \"\t\treturn vUv - texCoordOffset;\", \"\t}\", \"#else\", \"\tvec2 parallaxMap( in vec3 V ) {\",\n  // Determine number of layers from angle between V and N\n  \"\t\tfloat numLayers = mix( parallaxMaxLayers, parallaxMinLayers, abs( dot( vec3( 0.0, 0.0, 1.0 ), V ) ) );\", \"\t\tfloat layerHeight = 1.0 / numLayers;\", \"\t\tfloat currentLayerHeight = 0.0;\",\n  // Shift of texture coordinates for each iteration\n  \"\t\tvec2 dtex = parallaxScale * V.xy / V.z / numLayers;\", \"\t\tvec2 currentTextureCoords = vUv;\", \"\t\tfloat heightFromTexture = texture2D( bumpMap, currentTextureCoords ).r;\",\n  // while ( heightFromTexture > currentLayerHeight )\n  // Infinite loops are not well supported. Do a \"large\" finite\n  // loop, but not too large, as it slows down some compilers.\n  \"\t\tfor ( int i = 0; i < 30; i += 1 ) {\", \"\t\t\tif ( heightFromTexture <= currentLayerHeight ) {\", \"\t\t\t\tbreak;\", \"\t\t\t}\", \"\t\t\tcurrentLayerHeight += layerHeight;\",\n  // Shift texture coordinates along vector V\n  \"\t\t\tcurrentTextureCoords -= dtex;\", \"\t\t\theightFromTexture = texture2D( bumpMap, currentTextureCoords ).r;\", \"\t\t}\", \"\t\t#ifdef USE_STEEP_PARALLAX\", \"\t\t\treturn currentTextureCoords;\", \"\t\t#elif defined( USE_RELIEF_PARALLAX )\", \"\t\t\tvec2 deltaTexCoord = dtex / 2.0;\", \"\t\t\tfloat deltaHeight = layerHeight / 2.0;\",\n  // Return to the mid point of previous layer\n  \"\t\t\tcurrentTextureCoords += deltaTexCoord;\", \"\t\t\tcurrentLayerHeight -= deltaHeight;\",\n  // Binary search to increase precision of Steep Parallax Mapping\n  \"\t\t\tconst int numSearches = 5;\", \"\t\t\tfor ( int i = 0; i < numSearches; i += 1 ) {\", \"\t\t\t\tdeltaTexCoord /= 2.0;\", \"\t\t\t\tdeltaHeight /= 2.0;\", \"\t\t\t\theightFromTexture = texture2D( bumpMap, currentTextureCoords ).r;\",\n  // Shift along or against vector V\n  \"\t\t\t\tif( heightFromTexture > currentLayerHeight ) {\",\n  // Below the surface\n  \"\t\t\t\t\tcurrentTextureCoords -= deltaTexCoord;\", \"\t\t\t\t\tcurrentLayerHeight += deltaHeight;\", \"\t\t\t\t} else {\",\n  // above the surface\n  \"\t\t\t\t\tcurrentTextureCoords += deltaTexCoord;\", \"\t\t\t\t\tcurrentLayerHeight -= deltaHeight;\", \"\t\t\t\t}\", \"\t\t\t}\", \"\t\t\treturn currentTextureCoords;\", \"\t\t#elif defined( USE_OCLUSION_PARALLAX )\", \"\t\t\tvec2 prevTCoords = currentTextureCoords + dtex;\",\n  // Heights for linear interpolation\n  \"\t\t\tfloat nextH = heightFromTexture - currentLayerHeight;\", \"\t\t\tfloat prevH = texture2D( bumpMap, prevTCoords ).r - currentLayerHeight + layerHeight;\",\n  // Proportions for linear interpolation\n  \"\t\t\tfloat weight = nextH / ( nextH - prevH );\",\n  // Interpolation of texture coordinates\n  \"\t\t\treturn prevTCoords * weight + currentTextureCoords * ( 1.0 - weight );\", \"\t\t#else\",\n  // NO_PARALLAX\n  \"\t\t\treturn vUv;\", \"\t\t#endif\", \"\t}\", \"#endif\", \"vec2 perturbUv( vec3 surfPosition, vec3 surfNormal, vec3 viewPosition ) {\", \"\tvec2 texDx = dFdx( vUv );\", \"\tvec2 texDy = dFdy( vUv );\", \"\tvec3 vSigmaX = dFdx( surfPosition );\", \"\tvec3 vSigmaY = dFdy( surfPosition );\", \"\tvec3 vR1 = cross( vSigmaY, surfNormal );\", \"\tvec3 vR2 = cross( surfNormal, vSigmaX );\", \"\tfloat fDet = dot( vSigmaX, vR1 );\", \"\tvec2 vProjVscr = ( 1.0 / fDet ) * vec2( dot( vR1, viewPosition ), dot( vR2, viewPosition ) );\", \"\tvec3 vProjVtex;\", \"\tvProjVtex.xy = texDx * vProjVscr.x + texDy * vProjVscr.y;\", \"\tvProjVtex.z = dot( surfNormal, viewPosition );\", \"\treturn parallaxMap( vProjVtex );\", \"}\", \"void main() {\", \"\tvec2 mapUv = perturbUv( -vViewPosition, normalize( vNormal ), normalize( vViewPosition ) );\", \"\tgl_FragColor = texture2D( map, mapUv );\", \"}\"].join(\"\\n\")\n};\nexport { ParallaxShader };","map":{"version":3,"names":["ParallaxShader","modes","none","basic","steep","occlusion","relief","uniforms","bumpMap","value","map","parallaxScale","parallaxMinLayers","parallaxMaxLayers","vertexShader","join","fragmentShader"],"sources":["/home/krug/Coding/JavaScript/Websites/Personal/personal/node_modules/.pnpm/three-stdlib@2.23.7_three@0.151.3/node_modules/three-stdlib/shaders/ParallaxShader.js"],"sourcesContent":["const ParallaxShader = {\n  // Ordered from fastest to best quality.\n  modes: {\n    none: \"NO_PARALLAX\",\n    basic: \"USE_BASIC_PARALLAX\",\n    steep: \"USE_STEEP_PARALLAX\",\n    occlusion: \"USE_OCLUSION_PARALLAX\",\n    // a.k.a. POM\n    relief: \"USE_RELIEF_PARALLAX\"\n  },\n  uniforms: {\n    bumpMap: { value: null },\n    map: { value: null },\n    parallaxScale: { value: null },\n    parallaxMinLayers: { value: null },\n    parallaxMaxLayers: { value: null }\n  },\n  vertexShader: [\n    \"varying vec2 vUv;\",\n    \"varying vec3 vViewPosition;\",\n    \"varying vec3 vNormal;\",\n    \"void main() {\",\n    \"\tvUv = uv;\",\n    \"\tvec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );\",\n    \"\tvViewPosition = -mvPosition.xyz;\",\n    \"\tvNormal = normalize( normalMatrix * normal );\",\n    \"\tgl_Position = projectionMatrix * mvPosition;\",\n    \"}\"\n  ].join(\"\\n\"),\n  fragmentShader: [\n    \"uniform sampler2D bumpMap;\",\n    \"uniform sampler2D map;\",\n    \"uniform float parallaxScale;\",\n    \"uniform float parallaxMinLayers;\",\n    \"uniform float parallaxMaxLayers;\",\n    \"varying vec2 vUv;\",\n    \"varying vec3 vViewPosition;\",\n    \"varying vec3 vNormal;\",\n    \"#ifdef USE_BASIC_PARALLAX\",\n    \"\tvec2 parallaxMap( in vec3 V ) {\",\n    \"\t\tfloat initialHeight = texture2D( bumpMap, vUv ).r;\",\n    // No Offset Limitting: messy, floating output at grazing angles.\n    //\"vec2 texCoordOffset = parallaxScale * V.xy / V.z * initialHeight;\",\n    // Offset Limiting\n    \"\t\tvec2 texCoordOffset = parallaxScale * V.xy * initialHeight;\",\n    \"\t\treturn vUv - texCoordOffset;\",\n    \"\t}\",\n    \"#else\",\n    \"\tvec2 parallaxMap( in vec3 V ) {\",\n    // Determine number of layers from angle between V and N\n    \"\t\tfloat numLayers = mix( parallaxMaxLayers, parallaxMinLayers, abs( dot( vec3( 0.0, 0.0, 1.0 ), V ) ) );\",\n    \"\t\tfloat layerHeight = 1.0 / numLayers;\",\n    \"\t\tfloat currentLayerHeight = 0.0;\",\n    // Shift of texture coordinates for each iteration\n    \"\t\tvec2 dtex = parallaxScale * V.xy / V.z / numLayers;\",\n    \"\t\tvec2 currentTextureCoords = vUv;\",\n    \"\t\tfloat heightFromTexture = texture2D( bumpMap, currentTextureCoords ).r;\",\n    // while ( heightFromTexture > currentLayerHeight )\n    // Infinite loops are not well supported. Do a \"large\" finite\n    // loop, but not too large, as it slows down some compilers.\n    \"\t\tfor ( int i = 0; i < 30; i += 1 ) {\",\n    \"\t\t\tif ( heightFromTexture <= currentLayerHeight ) {\",\n    \"\t\t\t\tbreak;\",\n    \"\t\t\t}\",\n    \"\t\t\tcurrentLayerHeight += layerHeight;\",\n    // Shift texture coordinates along vector V\n    \"\t\t\tcurrentTextureCoords -= dtex;\",\n    \"\t\t\theightFromTexture = texture2D( bumpMap, currentTextureCoords ).r;\",\n    \"\t\t}\",\n    \"\t\t#ifdef USE_STEEP_PARALLAX\",\n    \"\t\t\treturn currentTextureCoords;\",\n    \"\t\t#elif defined( USE_RELIEF_PARALLAX )\",\n    \"\t\t\tvec2 deltaTexCoord = dtex / 2.0;\",\n    \"\t\t\tfloat deltaHeight = layerHeight / 2.0;\",\n    // Return to the mid point of previous layer\n    \"\t\t\tcurrentTextureCoords += deltaTexCoord;\",\n    \"\t\t\tcurrentLayerHeight -= deltaHeight;\",\n    // Binary search to increase precision of Steep Parallax Mapping\n    \"\t\t\tconst int numSearches = 5;\",\n    \"\t\t\tfor ( int i = 0; i < numSearches; i += 1 ) {\",\n    \"\t\t\t\tdeltaTexCoord /= 2.0;\",\n    \"\t\t\t\tdeltaHeight /= 2.0;\",\n    \"\t\t\t\theightFromTexture = texture2D( bumpMap, currentTextureCoords ).r;\",\n    // Shift along or against vector V\n    \"\t\t\t\tif( heightFromTexture > currentLayerHeight ) {\",\n    // Below the surface\n    \"\t\t\t\t\tcurrentTextureCoords -= deltaTexCoord;\",\n    \"\t\t\t\t\tcurrentLayerHeight += deltaHeight;\",\n    \"\t\t\t\t} else {\",\n    // above the surface\n    \"\t\t\t\t\tcurrentTextureCoords += deltaTexCoord;\",\n    \"\t\t\t\t\tcurrentLayerHeight -= deltaHeight;\",\n    \"\t\t\t\t}\",\n    \"\t\t\t}\",\n    \"\t\t\treturn currentTextureCoords;\",\n    \"\t\t#elif defined( USE_OCLUSION_PARALLAX )\",\n    \"\t\t\tvec2 prevTCoords = currentTextureCoords + dtex;\",\n    // Heights for linear interpolation\n    \"\t\t\tfloat nextH = heightFromTexture - currentLayerHeight;\",\n    \"\t\t\tfloat prevH = texture2D( bumpMap, prevTCoords ).r - currentLayerHeight + layerHeight;\",\n    // Proportions for linear interpolation\n    \"\t\t\tfloat weight = nextH / ( nextH - prevH );\",\n    // Interpolation of texture coordinates\n    \"\t\t\treturn prevTCoords * weight + currentTextureCoords * ( 1.0 - weight );\",\n    \"\t\t#else\",\n    // NO_PARALLAX\n    \"\t\t\treturn vUv;\",\n    \"\t\t#endif\",\n    \"\t}\",\n    \"#endif\",\n    \"vec2 perturbUv( vec3 surfPosition, vec3 surfNormal, vec3 viewPosition ) {\",\n    \"\tvec2 texDx = dFdx( vUv );\",\n    \"\tvec2 texDy = dFdy( vUv );\",\n    \"\tvec3 vSigmaX = dFdx( surfPosition );\",\n    \"\tvec3 vSigmaY = dFdy( surfPosition );\",\n    \"\tvec3 vR1 = cross( vSigmaY, surfNormal );\",\n    \"\tvec3 vR2 = cross( surfNormal, vSigmaX );\",\n    \"\tfloat fDet = dot( vSigmaX, vR1 );\",\n    \"\tvec2 vProjVscr = ( 1.0 / fDet ) * vec2( dot( vR1, viewPosition ), dot( vR2, viewPosition ) );\",\n    \"\tvec3 vProjVtex;\",\n    \"\tvProjVtex.xy = texDx * vProjVscr.x + texDy * vProjVscr.y;\",\n    \"\tvProjVtex.z = dot( surfNormal, viewPosition );\",\n    \"\treturn parallaxMap( vProjVtex );\",\n    \"}\",\n    \"void main() {\",\n    \"\tvec2 mapUv = perturbUv( -vViewPosition, normalize( vNormal ), normalize( vViewPosition ) );\",\n    \"\tgl_FragColor = texture2D( map, mapUv );\",\n    \"}\"\n  ].join(\"\\n\")\n};\nexport {\n  ParallaxShader\n};\n"],"mappings":"AAAA,IAAMA,cAAc,GAAG;EACrB;EACAC,KAAK,EAAE;IACLC,IAAI,EAAE,aAAa;IACnBC,KAAK,EAAE,oBAAoB;IAC3BC,KAAK,EAAE,oBAAoB;IAC3BC,SAAS,EAAE,uBAAuB;IAClC;IACAC,MAAM,EAAE;EACV,CAAC;EACDC,QAAQ,EAAE;IACRC,OAAO,EAAE;MAAEC,KAAK,EAAE;IAAK,CAAC;IACxBC,GAAG,EAAE;MAAED,KAAK,EAAE;IAAK,CAAC;IACpBE,aAAa,EAAE;MAAEF,KAAK,EAAE;IAAK,CAAC;IAC9BG,iBAAiB,EAAE;MAAEH,KAAK,EAAE;IAAK,CAAC;IAClCI,iBAAiB,EAAE;MAAEJ,KAAK,EAAE;IAAK;EACnC,CAAC;EACDK,YAAY,EAAE,CACZ,mBAAmB,EACnB,6BAA6B,EAC7B,uBAAuB,EACvB,eAAe,EACf,YAAY,EACZ,6DAA6D,EAC7D,mCAAmC,EACnC,gDAAgD,EAChD,+CAA+C,EAC/C,GAAG,CACJ,CAACC,IAAI,CAAC,IAAI,CAAC;EACZC,cAAc,EAAE,CACd,4BAA4B,EAC5B,wBAAwB,EACxB,8BAA8B,EAC9B,kCAAkC,EAClC,kCAAkC,EAClC,mBAAmB,EACnB,6BAA6B,EAC7B,uBAAuB,EACvB,2BAA2B,EAC3B,kCAAkC,EAClC,sDAAsD;EACtD;EACA;EACA;EACA,+DAA+D,EAC/D,gCAAgC,EAChC,IAAI,EACJ,OAAO,EACP,kCAAkC;EAClC;EACA,0GAA0G,EAC1G,wCAAwC,EACxC,mCAAmC;EACnC;EACA,uDAAuD,EACvD,oCAAoC,EACpC,2EAA2E;EAC3E;EACA;EACA;EACA,uCAAuC,EACvC,qDAAqD,EACrD,YAAY,EACZ,MAAM,EACN,uCAAuC;EACvC;EACA,kCAAkC,EAClC,sEAAsE,EACtE,KAAK,EACL,6BAA6B,EAC7B,iCAAiC,EACjC,wCAAwC,EACxC,qCAAqC,EACrC,2CAA2C;EAC3C;EACA,2CAA2C,EAC3C,uCAAuC;EACvC;EACA,+BAA+B,EAC/B,iDAAiD,EACjD,2BAA2B,EAC3B,yBAAyB,EACzB,uEAAuE;EACvE;EACA,oDAAoD;EACpD;EACA,6CAA6C,EAC7C,yCAAyC,EACzC,cAAc;EACd;EACA,6CAA6C,EAC7C,yCAAyC,EACzC,OAAO,EACP,MAAM,EACN,iCAAiC,EACjC,0CAA0C,EAC1C,oDAAoD;EACpD;EACA,0DAA0D,EAC1D,0FAA0F;EAC1F;EACA,8CAA8C;EAC9C;EACA,2EAA2E,EAC3E,SAAS;EACT;EACA,gBAAgB,EAChB,UAAU,EACV,IAAI,EACJ,QAAQ,EACR,2EAA2E,EAC3E,4BAA4B,EAC5B,4BAA4B,EAC5B,uCAAuC,EACvC,uCAAuC,EACvC,2CAA2C,EAC3C,2CAA2C,EAC3C,oCAAoC,EACpC,gGAAgG,EAChG,kBAAkB,EAClB,4DAA4D,EAC5D,iDAAiD,EACjD,mCAAmC,EACnC,GAAG,EACH,eAAe,EACf,8FAA8F,EAC9F,0CAA0C,EAC1C,GAAG,CACJ,CAACD,IAAI,CAAC,IAAI;AACb,CAAC;AACD,SACEf,cAAc"},"metadata":{},"sourceType":"module","externalDependencies":[]}