{"ast":null,"code":"export function createInternalDocumentIDStore() {\n  return {\n    idToInternalId: new Map(),\n    internalIdToId: [],\n    save,\n    load\n  };\n}\nexport function save(store) {\n  return {\n    internalIdToId: store.internalIdToId\n  };\n}\nexport function load(orama, raw) {\n  const {\n    internalIdToId\n  } = raw;\n  orama.internalDocumentIDStore.idToInternalId.clear();\n  orama.internalDocumentIDStore.internalIdToId = [];\n  for (let i = 0; i < internalIdToId.length; i++) {\n    orama.internalDocumentIDStore.idToInternalId.set(internalIdToId[i], i + 1);\n    orama.internalDocumentIDStore.internalIdToId.push(internalIdToId[i]);\n  }\n}\nexport function getInternalDocumentId(store, id) {\n  if (typeof id === 'string') {\n    const internalId = store.idToInternalId.get(id);\n    if (internalId) {\n      return internalId;\n    }\n    const currentId = store.idToInternalId.size + 1;\n    store.idToInternalId.set(id, currentId);\n    store.internalIdToId.push(id);\n    return currentId;\n  }\n  if (id > store.internalIdToId.length) {\n    return getInternalDocumentId(store, id.toString());\n  }\n  return id;\n}\nexport function getDocumentIdFromInternalId(store, internalId) {\n  if (store.internalIdToId.length < internalId) {\n    throw new Error(\"Invalid internalId \".concat(internalId));\n  }\n  return store.internalIdToId[internalId - 1];\n}","map":{"version":3,"names":["createInternalDocumentIDStore","idToInternalId","Map","internalIdToId","save","load","store","orama","raw","internalDocumentIDStore","clear","i","length","set","push","getInternalDocumentId","id","internalId","get","currentId","size","toString","getDocumentIdFromInternalId","Error","concat"],"sources":["/home/krug/Coding/JavaScript/Websites/Personal/personal/node_modules/.pnpm/@orama+orama@1.2.11/node_modules/@orama/orama/src/components/internal-document-id-store.ts"],"sourcesContent":["import { AnyOrama } from '../types.js'\n\nexport type DocumentID = string | number\nexport type InternalDocumentID = number\n\nexport type InternalDocumentIDStore = {\n  idToInternalId: Map<string, number>\n  internalIdToId: string[]\n  save: (store: InternalDocumentIDStore) => unknown\n  load: <T extends AnyOrama>(orama: T, raw: unknown) => void\n}\n\nexport function createInternalDocumentIDStore(): InternalDocumentIDStore {\n  return {\n    idToInternalId: new Map(),\n    internalIdToId: [],\n    save,\n    load,\n  }\n}\n\nexport function save(store: InternalDocumentIDStore): unknown {\n  return {\n    internalIdToId: store.internalIdToId,\n  }\n}\n\nexport function load<T extends AnyOrama>(orama: T, raw: unknown): void {\n  const { internalIdToId } = raw as InternalDocumentIDStore\n\n  orama.internalDocumentIDStore.idToInternalId.clear()\n  orama.internalDocumentIDStore.internalIdToId = []\n\n  for (let i = 0; i < internalIdToId.length; i++) {\n    orama.internalDocumentIDStore.idToInternalId.set(internalIdToId[i], i + 1)\n    orama.internalDocumentIDStore.internalIdToId.push(internalIdToId[i])\n  }\n}\n\nexport function getInternalDocumentId(store: InternalDocumentIDStore, id: DocumentID): InternalDocumentID {\n  if (typeof id === 'string') {\n    const internalId = store.idToInternalId.get(id)\n\n    if (internalId) {\n      return internalId\n    }\n\n    const currentId = store.idToInternalId.size + 1\n\n    store.idToInternalId.set(id, currentId)\n    store.internalIdToId.push(id)\n\n    return currentId\n  }\n\n  if (id > store.internalIdToId.length) {\n    return getInternalDocumentId(store, id.toString())\n  }\n\n  return id\n}\n\nexport function getDocumentIdFromInternalId(store: InternalDocumentIDStore, internalId: InternalDocumentID): string {\n  if (store.internalIdToId.length < internalId) {\n    throw new Error(`Invalid internalId ${internalId}`)\n  }\n\n  return store.internalIdToId[internalId - 1]\n}\n"],"mappings":"AAYA,OAAO,SAASA,8BAAA,EAAyD;EACvE,OAAO;IACLC,cAAA,EAAgB,IAAIC,GAAA;IACpBC,cAAA,EAAgB,EAAE;IAClBC,IAAA;IACAC;EACF;AACF;AAEA,OAAO,SAASD,KAAKE,KAA8B,EAAW;EAC5D,OAAO;IACLH,cAAA,EAAgBG,KAAA,CAAMH;EACxB;AACF;AAEA,OAAO,SAASE,KAAyBE,KAAQ,EAAEC,GAAY,EAAQ;EACrE,MAAM;IAAEL;EAAc,CAAE,GAAGK,GAAA;EAE3BD,KAAA,CAAME,uBAAuB,CAACR,cAAc,CAACS,KAAK;EAClDH,KAAA,CAAME,uBAAuB,CAACN,cAAc,GAAG,EAAE;EAEjD,KAAK,IAAIQ,CAAA,GAAI,GAAGA,CAAA,GAAIR,cAAA,CAAeS,MAAM,EAAED,CAAA,IAAK;IAC9CJ,KAAA,CAAME,uBAAuB,CAACR,cAAc,CAACY,GAAG,CAACV,cAAc,CAACQ,CAAA,CAAE,EAAEA,CAAA,GAAI;IACxEJ,KAAA,CAAME,uBAAuB,CAACN,cAAc,CAACW,IAAI,CAACX,cAAc,CAACQ,CAAA,CAAE;EACrE;AACF;AAEA,OAAO,SAASI,sBAAsBT,KAA8B,EAAEU,EAAc,EAAsB;EACxG,IAAI,OAAOA,EAAA,KAAO,UAAU;IAC1B,MAAMC,UAAA,GAAaX,KAAA,CAAML,cAAc,CAACiB,GAAG,CAACF,EAAA;IAE5C,IAAIC,UAAA,EAAY;MACd,OAAOA,UAAA;IACT;IAEA,MAAME,SAAA,GAAYb,KAAA,CAAML,cAAc,CAACmB,IAAI,GAAG;IAE9Cd,KAAA,CAAML,cAAc,CAACY,GAAG,CAACG,EAAA,EAAIG,SAAA;IAC7Bb,KAAA,CAAMH,cAAc,CAACW,IAAI,CAACE,EAAA;IAE1B,OAAOG,SAAA;EACT;EAEA,IAAIH,EAAA,GAAKV,KAAA,CAAMH,cAAc,CAACS,MAAM,EAAE;IACpC,OAAOG,qBAAA,CAAsBT,KAAA,EAAOU,EAAA,CAAGK,QAAQ;EACjD;EAEA,OAAOL,EAAA;AACT;AAEA,OAAO,SAASM,4BAA4BhB,KAA8B,EAAEW,UAA8B,EAAU;EAClH,IAAIX,KAAA,CAAMH,cAAc,CAACS,MAAM,GAAGK,UAAA,EAAY;IAC5C,MAAM,IAAIM,KAAA,uBAAAC,MAAA,CAA4BP,UAAA,CAAY;EACpD;EAEA,OAAOX,KAAA,CAAMH,cAAc,CAACc,UAAA,GAAa,EAAE;AAC7C"},"metadata":{},"sourceType":"module","externalDependencies":[]}