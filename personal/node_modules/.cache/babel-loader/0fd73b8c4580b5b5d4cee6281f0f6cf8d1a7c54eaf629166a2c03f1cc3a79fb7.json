{"ast":null,"code":"import { Loader, LoaderUtils, FileLoader, Scene, Object3D, Group, Vector3, SphereGeometry, MeshBasicMaterial, BackSide, Mesh, PointsMaterial, Points, LineBasicMaterial, LineSegments, FrontSide, DoubleSide, MeshPhongMaterial, Color, RepeatWrapping, ClampToEdgeWrapping, DataTexture, Vector2, BufferGeometry, Float32BufferAttribute, BoxGeometry, ConeGeometry, CylinderGeometry, Quaternion, ShapeUtils, BufferAttribute, TextureLoader } from \"three\";\nimport { createToken, Lexer, CstParser } from \"chevrotain\";\nclass VRMLLoader extends Loader {\n  constructor(manager) {\n    super(manager);\n  }\n  load(url, onLoad, onProgress, onError) {\n    const scope = this;\n    const path = scope.path === \"\" ? LoaderUtils.extractUrlBase(url) : scope.path;\n    const loader = new FileLoader(scope.manager);\n    loader.setPath(scope.path);\n    loader.setRequestHeader(scope.requestHeader);\n    loader.setWithCredentials(scope.withCredentials);\n    loader.load(url, function (text) {\n      try {\n        onLoad(scope.parse(text, path));\n      } catch (e) {\n        if (onError) {\n          onError(e);\n        } else {\n          console.error(e);\n        }\n        scope.manager.itemError(url);\n      }\n    }, onProgress, onError);\n  }\n  parse(data, path) {\n    const nodeMap = {};\n    function generateVRMLTree(data2) {\n      const tokenData = createTokens();\n      const lexer = new VRMLLexer(tokenData.tokens);\n      const parser = new VRMLParser(tokenData.tokenVocabulary);\n      const visitor = createVisitor(parser.getBaseCstVisitorConstructor());\n      const lexingResult = lexer.lex(data2);\n      parser.input = lexingResult.tokens;\n      const cstOutput = parser.vrml();\n      if (parser.errors.length > 0) {\n        console.error(parser.errors);\n        throw Error(\"THREE.VRMLLoader: Parsing errors detected.\");\n      }\n      const ast = visitor.visit(cstOutput);\n      return ast;\n    }\n    function createTokens() {\n      const RouteIdentifier = createToken({\n        name: \"RouteIdentifier\",\n        pattern: /[^\\x30-\\x39\\0-\\x20\\x22\\x27\\x23\\x2b\\x2c\\x2d\\x2e\\x5b\\x5d\\x5c\\x7b\\x7d][^\\0-\\x20\\x22\\x27\\x23\\x2b\\x2c\\x2d\\x2e\\x5b\\x5d\\x5c\\x7b\\x7d]*[\\.][^\\x30-\\x39\\0-\\x20\\x22\\x27\\x23\\x2b\\x2c\\x2d\\x2e\\x5b\\x5d\\x5c\\x7b\\x7d][^\\0-\\x20\\x22\\x27\\x23\\x2b\\x2c\\x2d\\x2e\\x5b\\x5d\\x5c\\x7b\\x7d]*/\n      });\n      const Identifier = createToken({\n        name: \"Identifier\",\n        pattern: /[^\\x30-\\x39\\0-\\x20\\x22\\x27\\x23\\x2b\\x2c\\x2d\\x2e\\x5b\\x5d\\x5c\\x7b\\x7d][^\\0-\\x20\\x22\\x27\\x23\\x2b\\x2c\\x2d\\x2e\\x5b\\x5d\\x5c\\x7b\\x7d]*/,\n        longer_alt: RouteIdentifier\n      });\n      const nodeTypes = [\"Anchor\", \"Billboard\", \"Collision\", \"Group\", \"Transform\",\n      // grouping nodes\n      \"Inline\", \"LOD\", \"Switch\",\n      // special groups\n      \"AudioClip\", \"DirectionalLight\", \"PointLight\", \"Script\", \"Shape\", \"Sound\", \"SpotLight\", \"WorldInfo\",\n      // common nodes\n      \"CylinderSensor\", \"PlaneSensor\", \"ProximitySensor\", \"SphereSensor\", \"TimeSensor\", \"TouchSensor\", \"VisibilitySensor\",\n      // sensors\n      \"Box\", \"Cone\", \"Cylinder\", \"ElevationGrid\", \"Extrusion\", \"IndexedFaceSet\", \"IndexedLineSet\", \"PointSet\", \"Sphere\",\n      // geometries\n      \"Color\", \"Coordinate\", \"Normal\", \"TextureCoordinate\",\n      // geometric properties\n      \"Appearance\", \"FontStyle\", \"ImageTexture\", \"Material\", \"MovieTexture\", \"PixelTexture\", \"TextureTransform\",\n      // appearance\n      \"ColorInterpolator\", \"CoordinateInterpolator\", \"NormalInterpolator\", \"OrientationInterpolator\", \"PositionInterpolator\", \"ScalarInterpolator\",\n      // interpolators\n      \"Background\", \"Fog\", \"NavigationInfo\", \"Viewpoint\",\n      // bindable nodes\n      \"Text\"\n      // Text must be placed at the end of the regex so there are no matches for TextureTransform and TextureCoordinate\n      ];\n\n      const Version = createToken({\n        name: \"Version\",\n        pattern: /#VRML.*/,\n        longer_alt: Identifier\n      });\n      const NodeName = createToken({\n        name: \"NodeName\",\n        pattern: new RegExp(nodeTypes.join(\"|\")),\n        longer_alt: Identifier\n      });\n      const DEF = createToken({\n        name: \"DEF\",\n        pattern: /DEF/,\n        longer_alt: Identifier\n      });\n      const USE = createToken({\n        name: \"USE\",\n        pattern: /USE/,\n        longer_alt: Identifier\n      });\n      const ROUTE = createToken({\n        name: \"ROUTE\",\n        pattern: /ROUTE/,\n        longer_alt: Identifier\n      });\n      const TO = createToken({\n        name: \"TO\",\n        pattern: /TO/,\n        longer_alt: Identifier\n      });\n      const StringLiteral = createToken({\n        name: \"StringLiteral\",\n        pattern: /\"(?:[^\\\\\"\\n\\r]|\\\\[bfnrtv\"\\\\/]|\\\\u[0-9a-fA-F][0-9a-fA-F][0-9a-fA-F][0-9a-fA-F])*\"/\n      });\n      const HexLiteral = createToken({\n        name: \"HexLiteral\",\n        pattern: /0[xX][0-9a-fA-F]+/\n      });\n      const NumberLiteral = createToken({\n        name: \"NumberLiteral\",\n        pattern: /[-+]?[0-9]*\\.?[0-9]+([eE][-+]?[0-9]+)?/\n      });\n      const TrueLiteral = createToken({\n        name: \"TrueLiteral\",\n        pattern: /TRUE/\n      });\n      const FalseLiteral = createToken({\n        name: \"FalseLiteral\",\n        pattern: /FALSE/\n      });\n      const NullLiteral = createToken({\n        name: \"NullLiteral\",\n        pattern: /NULL/\n      });\n      const LSquare = createToken({\n        name: \"LSquare\",\n        pattern: /\\[/\n      });\n      const RSquare = createToken({\n        name: \"RSquare\",\n        pattern: /]/\n      });\n      const LCurly = createToken({\n        name: \"LCurly\",\n        pattern: /{/\n      });\n      const RCurly = createToken({\n        name: \"RCurly\",\n        pattern: /}/\n      });\n      const Comment = createToken({\n        name: \"Comment\",\n        pattern: /#.*/,\n        group: Lexer.SKIPPED\n      });\n      const WhiteSpace = createToken({\n        name: \"WhiteSpace\",\n        pattern: /[ ,\\s]/,\n        group: Lexer.SKIPPED\n      });\n      const tokens = [WhiteSpace,\n      // keywords appear before the Identifier\n      NodeName, DEF, USE, ROUTE, TO, TrueLiteral, FalseLiteral, NullLiteral,\n      // the Identifier must appear after the keywords because all keywords are valid identifiers\n      Version, Identifier, RouteIdentifier, StringLiteral, HexLiteral, NumberLiteral, LSquare, RSquare, LCurly, RCurly, Comment];\n      const tokenVocabulary = {};\n      for (let i = 0, l = tokens.length; i < l; i++) {\n        const token = tokens[i];\n        tokenVocabulary[token.name] = token;\n      }\n      return {\n        tokens,\n        tokenVocabulary\n      };\n    }\n    function createVisitor(BaseVRMLVisitor) {\n      function VRMLToASTVisitor() {\n        BaseVRMLVisitor.call(this);\n        this.validateVisitor();\n      }\n      VRMLToASTVisitor.prototype = Object.assign(Object.create(BaseVRMLVisitor.prototype), {\n        constructor: VRMLToASTVisitor,\n        vrml: function (ctx) {\n          const data2 = {\n            version: this.visit(ctx.version),\n            nodes: [],\n            routes: []\n          };\n          for (let i = 0, l = ctx.node.length; i < l; i++) {\n            const node = ctx.node[i];\n            data2.nodes.push(this.visit(node));\n          }\n          if (ctx.route) {\n            for (let i = 0, l = ctx.route.length; i < l; i++) {\n              const route = ctx.route[i];\n              data2.routes.push(this.visit(route));\n            }\n          }\n          return data2;\n        },\n        version: function (ctx) {\n          return ctx.Version[0].image;\n        },\n        node: function (ctx) {\n          const data2 = {\n            name: ctx.NodeName[0].image,\n            fields: []\n          };\n          if (ctx.field) {\n            for (let i = 0, l = ctx.field.length; i < l; i++) {\n              const field = ctx.field[i];\n              data2.fields.push(this.visit(field));\n            }\n          }\n          if (ctx.def) {\n            data2.DEF = this.visit(ctx.def[0]);\n          }\n          return data2;\n        },\n        field: function (ctx) {\n          const data2 = {\n            name: ctx.Identifier[0].image,\n            type: null,\n            values: null\n          };\n          let result;\n          if (ctx.singleFieldValue) {\n            result = this.visit(ctx.singleFieldValue[0]);\n          }\n          if (ctx.multiFieldValue) {\n            result = this.visit(ctx.multiFieldValue[0]);\n          }\n          data2.type = result.type;\n          data2.values = result.values;\n          return data2;\n        },\n        def: function (ctx) {\n          return (ctx.Identifier || ctx.NodeName)[0].image;\n        },\n        use: function (ctx) {\n          return {\n            USE: (ctx.Identifier || ctx.NodeName)[0].image\n          };\n        },\n        singleFieldValue: function (ctx) {\n          return processField(this, ctx);\n        },\n        multiFieldValue: function (ctx) {\n          return processField(this, ctx);\n        },\n        route: function (ctx) {\n          const data2 = {\n            FROM: ctx.RouteIdentifier[0].image,\n            TO: ctx.RouteIdentifier[1].image\n          };\n          return data2;\n        }\n      });\n      function processField(scope, ctx) {\n        const field = {\n          type: null,\n          values: []\n        };\n        if (ctx.node) {\n          field.type = \"node\";\n          for (let i = 0, l = ctx.node.length; i < l; i++) {\n            const node = ctx.node[i];\n            field.values.push(scope.visit(node));\n          }\n        }\n        if (ctx.use) {\n          field.type = \"use\";\n          for (let i = 0, l = ctx.use.length; i < l; i++) {\n            const use = ctx.use[i];\n            field.values.push(scope.visit(use));\n          }\n        }\n        if (ctx.StringLiteral) {\n          field.type = \"string\";\n          for (let i = 0, l = ctx.StringLiteral.length; i < l; i++) {\n            const stringLiteral = ctx.StringLiteral[i];\n            field.values.push(stringLiteral.image.replace(/'|\"/g, \"\"));\n          }\n        }\n        if (ctx.NumberLiteral) {\n          field.type = \"number\";\n          for (let i = 0, l = ctx.NumberLiteral.length; i < l; i++) {\n            const numberLiteral = ctx.NumberLiteral[i];\n            field.values.push(parseFloat(numberLiteral.image));\n          }\n        }\n        if (ctx.HexLiteral) {\n          field.type = \"hex\";\n          for (let i = 0, l = ctx.HexLiteral.length; i < l; i++) {\n            const hexLiteral = ctx.HexLiteral[i];\n            field.values.push(hexLiteral.image);\n          }\n        }\n        if (ctx.TrueLiteral) {\n          field.type = \"boolean\";\n          for (let i = 0, l = ctx.TrueLiteral.length; i < l; i++) {\n            const trueLiteral = ctx.TrueLiteral[i];\n            if (trueLiteral.image === \"TRUE\") field.values.push(true);\n          }\n        }\n        if (ctx.FalseLiteral) {\n          field.type = \"boolean\";\n          for (let i = 0, l = ctx.FalseLiteral.length; i < l; i++) {\n            const falseLiteral = ctx.FalseLiteral[i];\n            if (falseLiteral.image === \"FALSE\") field.values.push(false);\n          }\n        }\n        if (ctx.NullLiteral) {\n          field.type = \"null\";\n          ctx.NullLiteral.forEach(function () {\n            field.values.push(null);\n          });\n        }\n        return field;\n      }\n      return new VRMLToASTVisitor();\n    }\n    function parseTree(tree2) {\n      const nodes = tree2.nodes;\n      const scene2 = new Scene();\n      for (let i = 0, l = nodes.length; i < l; i++) {\n        const node = nodes[i];\n        buildNodeMap(node);\n      }\n      for (let i = 0, l = nodes.length; i < l; i++) {\n        const node = nodes[i];\n        const object = getNode(node);\n        if (object instanceof Object3D) scene2.add(object);\n        if (node.name === \"WorldInfo\") scene2.userData.worldInfo = object;\n      }\n      return scene2;\n    }\n    function buildNodeMap(node) {\n      if (node.DEF) {\n        nodeMap[node.DEF] = node;\n      }\n      const fields = node.fields;\n      for (let i = 0, l = fields.length; i < l; i++) {\n        const field = fields[i];\n        if (field.type === \"node\") {\n          const fieldValues = field.values;\n          for (let j = 0, jl = fieldValues.length; j < jl; j++) {\n            buildNodeMap(fieldValues[j]);\n          }\n        }\n      }\n    }\n    function getNode(node) {\n      if (node.USE) {\n        return resolveUSE(node.USE);\n      }\n      if (node.build !== void 0) return node.build;\n      node.build = buildNode(node);\n      return node.build;\n    }\n    function buildNode(node) {\n      const nodeName = node.name;\n      let build;\n      switch (nodeName) {\n        case \"Group\":\n        case \"Transform\":\n        case \"Collision\":\n          build = buildGroupingNode(node);\n          break;\n        case \"Background\":\n          build = buildBackgroundNode(node);\n          break;\n        case \"Shape\":\n          build = buildShapeNode(node);\n          break;\n        case \"Appearance\":\n          build = buildAppearanceNode(node);\n          break;\n        case \"Material\":\n          build = buildMaterialNode(node);\n          break;\n        case \"ImageTexture\":\n          build = buildImageTextureNode(node);\n          break;\n        case \"PixelTexture\":\n          build = buildPixelTextureNode(node);\n          break;\n        case \"TextureTransform\":\n          build = buildTextureTransformNode(node);\n          break;\n        case \"IndexedFaceSet\":\n          build = buildIndexedFaceSetNode(node);\n          break;\n        case \"IndexedLineSet\":\n          build = buildIndexedLineSetNode(node);\n          break;\n        case \"PointSet\":\n          build = buildPointSetNode(node);\n          break;\n        case \"Box\":\n          build = buildBoxNode(node);\n          break;\n        case \"Cone\":\n          build = buildConeNode(node);\n          break;\n        case \"Cylinder\":\n          build = buildCylinderNode(node);\n          break;\n        case \"Sphere\":\n          build = buildSphereNode(node);\n          break;\n        case \"ElevationGrid\":\n          build = buildElevationGridNode(node);\n          break;\n        case \"Extrusion\":\n          build = buildExtrusionNode(node);\n          break;\n        case \"Color\":\n        case \"Coordinate\":\n        case \"Normal\":\n        case \"TextureCoordinate\":\n          build = buildGeometricNode(node);\n          break;\n        case \"WorldInfo\":\n          build = buildWorldInfoNode(node);\n          break;\n        case \"Anchor\":\n        case \"Billboard\":\n        case \"Inline\":\n        case \"LOD\":\n        case \"Switch\":\n        case \"AudioClip\":\n        case \"DirectionalLight\":\n        case \"PointLight\":\n        case \"Script\":\n        case \"Sound\":\n        case \"SpotLight\":\n        case \"CylinderSensor\":\n        case \"PlaneSensor\":\n        case \"ProximitySensor\":\n        case \"SphereSensor\":\n        case \"TimeSensor\":\n        case \"TouchSensor\":\n        case \"VisibilitySensor\":\n        case \"Text\":\n        case \"FontStyle\":\n        case \"MovieTexture\":\n        case \"ColorInterpolator\":\n        case \"CoordinateInterpolator\":\n        case \"NormalInterpolator\":\n        case \"OrientationInterpolator\":\n        case \"PositionInterpolator\":\n        case \"ScalarInterpolator\":\n        case \"Fog\":\n        case \"NavigationInfo\":\n        case \"Viewpoint\":\n          break;\n        default:\n          console.warn(\"THREE.VRMLLoader: Unknown node:\", nodeName);\n          break;\n      }\n      if (build !== void 0 && node.DEF !== void 0 && build.hasOwnProperty(\"name\") === true) {\n        build.name = node.DEF;\n      }\n      return build;\n    }\n    function buildGroupingNode(node) {\n      const object = new Group();\n      const fields = node.fields;\n      for (let i = 0, l = fields.length; i < l; i++) {\n        const field = fields[i];\n        const fieldName = field.name;\n        const fieldValues = field.values;\n        switch (fieldName) {\n          case \"bboxCenter\":\n            break;\n          case \"bboxSize\":\n            break;\n          case \"center\":\n            break;\n          case \"children\":\n            parseFieldChildren(fieldValues, object);\n            break;\n          case \"collide\":\n            break;\n          case \"rotation\":\n            const axis = new Vector3(fieldValues[0], fieldValues[1], fieldValues[2]);\n            const angle = fieldValues[3];\n            object.quaternion.setFromAxisAngle(axis, angle);\n            break;\n          case \"scale\":\n            object.scale.set(fieldValues[0], fieldValues[1], fieldValues[2]);\n            break;\n          case \"scaleOrientation\":\n            break;\n          case \"translation\":\n            object.position.set(fieldValues[0], fieldValues[1], fieldValues[2]);\n            break;\n          case \"proxy\":\n            break;\n          default:\n            console.warn(\"THREE.VRMLLoader: Unknown field:\", fieldName);\n            break;\n        }\n      }\n      return object;\n    }\n    function buildBackgroundNode(node) {\n      const group = new Group();\n      let groundAngle, groundColor;\n      let skyAngle, skyColor;\n      const fields = node.fields;\n      for (let i = 0, l = fields.length; i < l; i++) {\n        const field = fields[i];\n        const fieldName = field.name;\n        const fieldValues = field.values;\n        switch (fieldName) {\n          case \"groundAngle\":\n            groundAngle = fieldValues;\n            break;\n          case \"groundColor\":\n            groundColor = fieldValues;\n            break;\n          case \"backUrl\":\n            break;\n          case \"bottomUrl\":\n            break;\n          case \"frontUrl\":\n            break;\n          case \"leftUrl\":\n            break;\n          case \"rightUrl\":\n            break;\n          case \"topUrl\":\n            break;\n          case \"skyAngle\":\n            skyAngle = fieldValues;\n            break;\n          case \"skyColor\":\n            skyColor = fieldValues;\n            break;\n          default:\n            console.warn(\"THREE.VRMLLoader: Unknown field:\", fieldName);\n            break;\n        }\n      }\n      const radius = 1e4;\n      if (skyColor) {\n        const skyGeometry = new SphereGeometry(radius, 32, 16);\n        const skyMaterial = new MeshBasicMaterial({\n          fog: false,\n          side: BackSide,\n          depthWrite: false,\n          depthTest: false\n        });\n        if (skyColor.length > 3) {\n          paintFaces(skyGeometry, radius, skyAngle, toColorArray(skyColor), true);\n          skyMaterial.vertexColors = true;\n        } else {\n          skyMaterial.color.setRGB(skyColor[0], skyColor[1], skyColor[2]);\n        }\n        const sky = new Mesh(skyGeometry, skyMaterial);\n        group.add(sky);\n      }\n      if (groundColor) {\n        if (groundColor.length > 0) {\n          const groundGeometry = new SphereGeometry(radius, 32, 16, 0, 2 * Math.PI, 0.5 * Math.PI, 1.5 * Math.PI);\n          const groundMaterial = new MeshBasicMaterial({\n            fog: false,\n            side: BackSide,\n            vertexColors: true,\n            depthWrite: false,\n            depthTest: false\n          });\n          paintFaces(groundGeometry, radius, groundAngle, toColorArray(groundColor), false);\n          const ground = new Mesh(groundGeometry, groundMaterial);\n          group.add(ground);\n        }\n      }\n      group.renderOrder = -Infinity;\n      return group;\n    }\n    function buildShapeNode(node) {\n      const fields = node.fields;\n      let material = new MeshBasicMaterial({\n        color: 0\n      });\n      let geometry;\n      for (let i = 0, l = fields.length; i < l; i++) {\n        const field = fields[i];\n        const fieldName = field.name;\n        const fieldValues = field.values;\n        switch (fieldName) {\n          case \"appearance\":\n            if (fieldValues[0] !== null) {\n              material = getNode(fieldValues[0]);\n            }\n            break;\n          case \"geometry\":\n            if (fieldValues[0] !== null) {\n              geometry = getNode(fieldValues[0]);\n            }\n            break;\n          default:\n            console.warn(\"THREE.VRMLLoader: Unknown field:\", fieldName);\n            break;\n        }\n      }\n      let object;\n      if (geometry && geometry.attributes.position) {\n        const type = geometry._type;\n        if (type === \"points\") {\n          const pointsMaterial = new PointsMaterial({\n            color: 16777215\n          });\n          if (geometry.attributes.color !== void 0) {\n            pointsMaterial.vertexColors = true;\n          } else {\n            if (material.isMeshPhongMaterial) {\n              pointsMaterial.color.copy(material.emissive);\n            }\n          }\n          object = new Points(geometry, pointsMaterial);\n        } else if (type === \"line\") {\n          const lineMaterial = new LineBasicMaterial({\n            color: 16777215\n          });\n          if (geometry.attributes.color !== void 0) {\n            lineMaterial.vertexColors = true;\n          } else {\n            if (material.isMeshPhongMaterial) {\n              lineMaterial.color.copy(material.emissive);\n            }\n          }\n          object = new LineSegments(geometry, lineMaterial);\n        } else {\n          if (geometry._solid !== void 0) {\n            material.side = geometry._solid ? FrontSide : DoubleSide;\n          }\n          if (geometry.attributes.color !== void 0) {\n            material.vertexColors = true;\n          }\n          object = new Mesh(geometry, material);\n        }\n      } else {\n        object = new Object3D();\n        object.visible = false;\n      }\n      return object;\n    }\n    function buildAppearanceNode(node) {\n      let material = new MeshPhongMaterial();\n      let transformData;\n      const fields = node.fields;\n      for (let i = 0, l = fields.length; i < l; i++) {\n        const field = fields[i];\n        const fieldName = field.name;\n        const fieldValues = field.values;\n        switch (fieldName) {\n          case \"material\":\n            if (fieldValues[0] !== null) {\n              const materialData = getNode(fieldValues[0]);\n              if (materialData.diffuseColor) material.color.copy(materialData.diffuseColor);\n              if (materialData.emissiveColor) material.emissive.copy(materialData.emissiveColor);\n              if (materialData.shininess) material.shininess = materialData.shininess;\n              if (materialData.specularColor) material.specular.copy(materialData.specularColor);\n              if (materialData.transparency) material.opacity = 1 - materialData.transparency;\n              if (materialData.transparency > 0) material.transparent = true;\n            } else {\n              material = new MeshBasicMaterial({\n                color: 0\n              });\n            }\n            break;\n          case \"texture\":\n            const textureNode = fieldValues[0];\n            if (textureNode !== null) {\n              if (textureNode.name === \"ImageTexture\" || textureNode.name === \"PixelTexture\") {\n                material.map = getNode(textureNode);\n              } else {}\n            }\n            break;\n          case \"textureTransform\":\n            if (fieldValues[0] !== null) {\n              transformData = getNode(fieldValues[0]);\n            }\n            break;\n          default:\n            console.warn(\"THREE.VRMLLoader: Unknown field:\", fieldName);\n            break;\n        }\n      }\n      if (material.map) {\n        if (material.map.__type) {\n          switch (material.map.__type) {\n            case TEXTURE_TYPE.INTENSITY_ALPHA:\n              material.opacity = 1;\n              break;\n            case TEXTURE_TYPE.RGB:\n              material.color.set(16777215);\n              break;\n            case TEXTURE_TYPE.RGBA:\n              material.color.set(16777215);\n              material.opacity = 1;\n              break;\n            default:\n          }\n          delete material.map.__type;\n        }\n        if (transformData) {\n          material.map.center.copy(transformData.center);\n          material.map.rotation = transformData.rotation;\n          material.map.repeat.copy(transformData.scale);\n          material.map.offset.copy(transformData.translation);\n        }\n      }\n      return material;\n    }\n    function buildMaterialNode(node) {\n      const materialData = {};\n      const fields = node.fields;\n      for (let i = 0, l = fields.length; i < l; i++) {\n        const field = fields[i];\n        const fieldName = field.name;\n        const fieldValues = field.values;\n        switch (fieldName) {\n          case \"ambientIntensity\":\n            break;\n          case \"diffuseColor\":\n            materialData.diffuseColor = new Color(fieldValues[0], fieldValues[1], fieldValues[2]);\n            break;\n          case \"emissiveColor\":\n            materialData.emissiveColor = new Color(fieldValues[0], fieldValues[1], fieldValues[2]);\n            break;\n          case \"shininess\":\n            materialData.shininess = fieldValues[0];\n            break;\n          case \"specularColor\":\n            materialData.emissiveColor = new Color(fieldValues[0], fieldValues[1], fieldValues[2]);\n            break;\n          case \"transparency\":\n            materialData.transparency = fieldValues[0];\n            break;\n          default:\n            console.warn(\"THREE.VRMLLoader: Unknown field:\", fieldName);\n            break;\n        }\n      }\n      return materialData;\n    }\n    function parseHexColor(hex, textureType, color) {\n      let value;\n      switch (textureType) {\n        case TEXTURE_TYPE.INTENSITY:\n          value = parseInt(hex);\n          color.r = value;\n          color.g = value;\n          color.b = value;\n          color.a = 1;\n          break;\n        case TEXTURE_TYPE.INTENSITY_ALPHA:\n          value = parseInt(\"0x\" + hex.substring(2, 4));\n          color.r = value;\n          color.g = value;\n          color.b = value;\n          color.a = parseInt(\"0x\" + hex.substring(4, 6));\n          break;\n        case TEXTURE_TYPE.RGB:\n          color.r = parseInt(\"0x\" + hex.substring(2, 4));\n          color.g = parseInt(\"0x\" + hex.substring(4, 6));\n          color.b = parseInt(\"0x\" + hex.substring(6, 8));\n          color.a = 1;\n          break;\n        case TEXTURE_TYPE.RGBA:\n          color.r = parseInt(\"0x\" + hex.substring(2, 4));\n          color.g = parseInt(\"0x\" + hex.substring(4, 6));\n          color.b = parseInt(\"0x\" + hex.substring(6, 8));\n          color.a = parseInt(\"0x\" + hex.substring(8, 10));\n          break;\n        default:\n      }\n    }\n    function getTextureType(num_components) {\n      let type;\n      switch (num_components) {\n        case 1:\n          type = TEXTURE_TYPE.INTENSITY;\n          break;\n        case 2:\n          type = TEXTURE_TYPE.INTENSITY_ALPHA;\n          break;\n        case 3:\n          type = TEXTURE_TYPE.RGB;\n          break;\n        case 4:\n          type = TEXTURE_TYPE.RGBA;\n          break;\n        default:\n      }\n      return type;\n    }\n    function buildPixelTextureNode(node) {\n      let texture;\n      let wrapS = RepeatWrapping;\n      let wrapT = RepeatWrapping;\n      const fields = node.fields;\n      for (let i = 0, l = fields.length; i < l; i++) {\n        const field = fields[i];\n        const fieldName = field.name;\n        const fieldValues = field.values;\n        switch (fieldName) {\n          case \"image\":\n            const width = fieldValues[0];\n            const height = fieldValues[1];\n            const num_components = fieldValues[2];\n            const textureType = getTextureType(num_components);\n            const data2 = new Uint8Array(4 * width * height);\n            const color = {\n              r: 0,\n              g: 0,\n              b: 0,\n              a: 0\n            };\n            for (let j = 3, k = 0, jl = fieldValues.length; j < jl; j++, k++) {\n              parseHexColor(fieldValues[j], textureType, color);\n              const stride = k * 4;\n              data2[stride + 0] = color.r;\n              data2[stride + 1] = color.g;\n              data2[stride + 2] = color.b;\n              data2[stride + 3] = color.a;\n            }\n            texture = new DataTexture(data2, width, height);\n            texture.needsUpdate = true;\n            texture.__type = textureType;\n            break;\n          case \"repeatS\":\n            if (fieldValues[0] === false) wrapS = ClampToEdgeWrapping;\n            break;\n          case \"repeatT\":\n            if (fieldValues[0] === false) wrapT = ClampToEdgeWrapping;\n            break;\n          default:\n            console.warn(\"THREE.VRMLLoader: Unknown field:\", fieldName);\n            break;\n        }\n      }\n      if (texture) {\n        texture.wrapS = wrapS;\n        texture.wrapT = wrapT;\n      }\n      return texture;\n    }\n    function buildImageTextureNode(node) {\n      let texture;\n      let wrapS = RepeatWrapping;\n      let wrapT = RepeatWrapping;\n      const fields = node.fields;\n      for (let i = 0, l = fields.length; i < l; i++) {\n        const field = fields[i];\n        const fieldName = field.name;\n        const fieldValues = field.values;\n        switch (fieldName) {\n          case \"url\":\n            const url = fieldValues[0];\n            if (url) texture = textureLoader.load(url);\n            break;\n          case \"repeatS\":\n            if (fieldValues[0] === false) wrapS = ClampToEdgeWrapping;\n            break;\n          case \"repeatT\":\n            if (fieldValues[0] === false) wrapT = ClampToEdgeWrapping;\n            break;\n          default:\n            console.warn(\"THREE.VRMLLoader: Unknown field:\", fieldName);\n            break;\n        }\n      }\n      if (texture) {\n        texture.wrapS = wrapS;\n        texture.wrapT = wrapT;\n      }\n      return texture;\n    }\n    function buildTextureTransformNode(node) {\n      const transformData = {\n        center: new Vector2(),\n        rotation: new Vector2(),\n        scale: new Vector2(),\n        translation: new Vector2()\n      };\n      const fields = node.fields;\n      for (let i = 0, l = fields.length; i < l; i++) {\n        const field = fields[i];\n        const fieldName = field.name;\n        const fieldValues = field.values;\n        switch (fieldName) {\n          case \"center\":\n            transformData.center.set(fieldValues[0], fieldValues[1]);\n            break;\n          case \"rotation\":\n            transformData.rotation = fieldValues[0];\n            break;\n          case \"scale\":\n            transformData.scale.set(fieldValues[0], fieldValues[1]);\n            break;\n          case \"translation\":\n            transformData.translation.set(fieldValues[0], fieldValues[1]);\n            break;\n          default:\n            console.warn(\"THREE.VRMLLoader: Unknown field:\", fieldName);\n            break;\n        }\n      }\n      return transformData;\n    }\n    function buildGeometricNode(node) {\n      return node.fields[0].values;\n    }\n    function buildWorldInfoNode(node) {\n      const worldInfo = {};\n      const fields = node.fields;\n      for (let i = 0, l = fields.length; i < l; i++) {\n        const field = fields[i];\n        const fieldName = field.name;\n        const fieldValues = field.values;\n        switch (fieldName) {\n          case \"title\":\n            worldInfo.title = fieldValues[0];\n            break;\n          case \"info\":\n            worldInfo.info = fieldValues;\n            break;\n          default:\n            console.warn(\"THREE.VRMLLoader: Unknown field:\", fieldName);\n            break;\n        }\n      }\n      return worldInfo;\n    }\n    function buildIndexedFaceSetNode(node) {\n      let color, coord, normal, texCoord;\n      let ccw = true,\n        solid = true,\n        creaseAngle = 0;\n      let colorIndex, coordIndex, normalIndex, texCoordIndex;\n      let colorPerVertex = true,\n        normalPerVertex = true;\n      const fields = node.fields;\n      for (let i = 0, l = fields.length; i < l; i++) {\n        const field = fields[i];\n        const fieldName = field.name;\n        const fieldValues = field.values;\n        switch (fieldName) {\n          case \"color\":\n            const colorNode = fieldValues[0];\n            if (colorNode !== null) {\n              color = getNode(colorNode);\n            }\n            break;\n          case \"coord\":\n            const coordNode = fieldValues[0];\n            if (coordNode !== null) {\n              coord = getNode(coordNode);\n            }\n            break;\n          case \"normal\":\n            const normalNode = fieldValues[0];\n            if (normalNode !== null) {\n              normal = getNode(normalNode);\n            }\n            break;\n          case \"texCoord\":\n            const texCoordNode = fieldValues[0];\n            if (texCoordNode !== null) {\n              texCoord = getNode(texCoordNode);\n            }\n            break;\n          case \"ccw\":\n            ccw = fieldValues[0];\n            break;\n          case \"colorIndex\":\n            colorIndex = fieldValues;\n            break;\n          case \"colorPerVertex\":\n            colorPerVertex = fieldValues[0];\n            break;\n          case \"convex\":\n            break;\n          case \"coordIndex\":\n            coordIndex = fieldValues;\n            break;\n          case \"creaseAngle\":\n            creaseAngle = fieldValues[0];\n            break;\n          case \"normalIndex\":\n            normalIndex = fieldValues;\n            break;\n          case \"normalPerVertex\":\n            normalPerVertex = fieldValues[0];\n            break;\n          case \"solid\":\n            solid = fieldValues[0];\n            break;\n          case \"texCoordIndex\":\n            texCoordIndex = fieldValues;\n            break;\n          default:\n            console.warn(\"THREE.VRMLLoader: Unknown field:\", fieldName);\n            break;\n        }\n      }\n      if (coordIndex === void 0) {\n        console.warn(\"THREE.VRMLLoader: Missing coordIndex.\");\n        return new BufferGeometry();\n      }\n      const triangulatedCoordIndex = triangulateFaceIndex(coordIndex, ccw);\n      let colorAttribute;\n      let normalAttribute;\n      let uvAttribute;\n      if (color) {\n        if (colorPerVertex === true) {\n          if (colorIndex && colorIndex.length > 0) {\n            const triangulatedColorIndex = triangulateFaceIndex(colorIndex, ccw);\n            colorAttribute = computeAttributeFromIndexedData(triangulatedCoordIndex, triangulatedColorIndex, color, 3);\n          } else {\n            colorAttribute = toNonIndexedAttribute(triangulatedCoordIndex, new Float32BufferAttribute(color, 3));\n          }\n        } else {\n          if (colorIndex && colorIndex.length > 0) {\n            const flattenFaceColors = flattenData(color, colorIndex);\n            const triangulatedFaceColors = triangulateFaceData(flattenFaceColors, coordIndex);\n            colorAttribute = computeAttributeFromFaceData(triangulatedCoordIndex, triangulatedFaceColors);\n          } else {\n            const triangulatedFaceColors = triangulateFaceData(color, coordIndex);\n            colorAttribute = computeAttributeFromFaceData(triangulatedCoordIndex, triangulatedFaceColors);\n          }\n        }\n      }\n      if (normal) {\n        if (normalPerVertex === true) {\n          if (normalIndex && normalIndex.length > 0) {\n            const triangulatedNormalIndex = triangulateFaceIndex(normalIndex, ccw);\n            normalAttribute = computeAttributeFromIndexedData(triangulatedCoordIndex, triangulatedNormalIndex, normal, 3);\n          } else {\n            normalAttribute = toNonIndexedAttribute(triangulatedCoordIndex, new Float32BufferAttribute(normal, 3));\n          }\n        } else {\n          if (normalIndex && normalIndex.length > 0) {\n            const flattenFaceNormals = flattenData(normal, normalIndex);\n            const triangulatedFaceNormals = triangulateFaceData(flattenFaceNormals, coordIndex);\n            normalAttribute = computeAttributeFromFaceData(triangulatedCoordIndex, triangulatedFaceNormals);\n          } else {\n            const triangulatedFaceNormals = triangulateFaceData(normal, coordIndex);\n            normalAttribute = computeAttributeFromFaceData(triangulatedCoordIndex, triangulatedFaceNormals);\n          }\n        }\n      } else {\n        normalAttribute = computeNormalAttribute(triangulatedCoordIndex, coord, creaseAngle);\n      }\n      if (texCoord) {\n        if (texCoordIndex && texCoordIndex.length > 0) {\n          const triangulatedTexCoordIndex = triangulateFaceIndex(texCoordIndex, ccw);\n          uvAttribute = computeAttributeFromIndexedData(triangulatedCoordIndex, triangulatedTexCoordIndex, texCoord, 2);\n        } else {\n          uvAttribute = toNonIndexedAttribute(triangulatedCoordIndex, new Float32BufferAttribute(texCoord, 2));\n        }\n      }\n      const geometry = new BufferGeometry();\n      const positionAttribute = toNonIndexedAttribute(triangulatedCoordIndex, new Float32BufferAttribute(coord, 3));\n      geometry.setAttribute(\"position\", positionAttribute);\n      geometry.setAttribute(\"normal\", normalAttribute);\n      if (colorAttribute) geometry.setAttribute(\"color\", colorAttribute);\n      if (uvAttribute) geometry.setAttribute(\"uv\", uvAttribute);\n      geometry._solid = solid;\n      geometry._type = \"mesh\";\n      return geometry;\n    }\n    function buildIndexedLineSetNode(node) {\n      let color, coord;\n      let colorIndex, coordIndex;\n      let colorPerVertex = true;\n      const fields = node.fields;\n      for (let i = 0, l = fields.length; i < l; i++) {\n        const field = fields[i];\n        const fieldName = field.name;\n        const fieldValues = field.values;\n        switch (fieldName) {\n          case \"color\":\n            const colorNode = fieldValues[0];\n            if (colorNode !== null) {\n              color = getNode(colorNode);\n            }\n            break;\n          case \"coord\":\n            const coordNode = fieldValues[0];\n            if (coordNode !== null) {\n              coord = getNode(coordNode);\n            }\n            break;\n          case \"colorIndex\":\n            colorIndex = fieldValues;\n            break;\n          case \"colorPerVertex\":\n            colorPerVertex = fieldValues[0];\n            break;\n          case \"coordIndex\":\n            coordIndex = fieldValues;\n            break;\n          default:\n            console.warn(\"THREE.VRMLLoader: Unknown field:\", fieldName);\n            break;\n        }\n      }\n      let colorAttribute;\n      const expandedLineIndex = expandLineIndex(coordIndex);\n      if (color) {\n        if (colorPerVertex === true) {\n          if (colorIndex.length > 0) {\n            const expandedColorIndex = expandLineIndex(colorIndex);\n            colorAttribute = computeAttributeFromIndexedData(expandedLineIndex, expandedColorIndex, color, 3);\n          } else {\n            colorAttribute = toNonIndexedAttribute(expandedLineIndex, new Float32BufferAttribute(color, 3));\n          }\n        } else {\n          if (colorIndex.length > 0) {\n            const flattenLineColors = flattenData(color, colorIndex);\n            const expandedLineColors = expandLineData(flattenLineColors, coordIndex);\n            colorAttribute = computeAttributeFromLineData(expandedLineIndex, expandedLineColors);\n          } else {\n            const expandedLineColors = expandLineData(color, coordIndex);\n            colorAttribute = computeAttributeFromLineData(expandedLineIndex, expandedLineColors);\n          }\n        }\n      }\n      const geometry = new BufferGeometry();\n      const positionAttribute = toNonIndexedAttribute(expandedLineIndex, new Float32BufferAttribute(coord, 3));\n      geometry.setAttribute(\"position\", positionAttribute);\n      if (colorAttribute) geometry.setAttribute(\"color\", colorAttribute);\n      geometry._type = \"line\";\n      return geometry;\n    }\n    function buildPointSetNode(node) {\n      let color, coord;\n      const fields = node.fields;\n      for (let i = 0, l = fields.length; i < l; i++) {\n        const field = fields[i];\n        const fieldName = field.name;\n        const fieldValues = field.values;\n        switch (fieldName) {\n          case \"color\":\n            const colorNode = fieldValues[0];\n            if (colorNode !== null) {\n              color = getNode(colorNode);\n            }\n            break;\n          case \"coord\":\n            const coordNode = fieldValues[0];\n            if (coordNode !== null) {\n              coord = getNode(coordNode);\n            }\n            break;\n          default:\n            console.warn(\"THREE.VRMLLoader: Unknown field:\", fieldName);\n            break;\n        }\n      }\n      const geometry = new BufferGeometry();\n      geometry.setAttribute(\"position\", new Float32BufferAttribute(coord, 3));\n      if (color) geometry.setAttribute(\"color\", new Float32BufferAttribute(color, 3));\n      geometry._type = \"points\";\n      return geometry;\n    }\n    function buildBoxNode(node) {\n      const size = new Vector3(2, 2, 2);\n      const fields = node.fields;\n      for (let i = 0, l = fields.length; i < l; i++) {\n        const field = fields[i];\n        const fieldName = field.name;\n        const fieldValues = field.values;\n        switch (fieldName) {\n          case \"size\":\n            size.x = fieldValues[0];\n            size.y = fieldValues[1];\n            size.z = fieldValues[2];\n            break;\n          default:\n            console.warn(\"THREE.VRMLLoader: Unknown field:\", fieldName);\n            break;\n        }\n      }\n      const geometry = new BoxGeometry(size.x, size.y, size.z);\n      return geometry;\n    }\n    function buildConeNode(node) {\n      let radius = 1,\n        height = 2,\n        openEnded = false;\n      const fields = node.fields;\n      for (let i = 0, l = fields.length; i < l; i++) {\n        const field = fields[i];\n        const fieldName = field.name;\n        const fieldValues = field.values;\n        switch (fieldName) {\n          case \"bottom\":\n            openEnded = !fieldValues[0];\n            break;\n          case \"bottomRadius\":\n            radius = fieldValues[0];\n            break;\n          case \"height\":\n            height = fieldValues[0];\n            break;\n          case \"side\":\n            break;\n          default:\n            console.warn(\"THREE.VRMLLoader: Unknown field:\", fieldName);\n            break;\n        }\n      }\n      const geometry = new ConeGeometry(radius, height, 16, 1, openEnded);\n      return geometry;\n    }\n    function buildCylinderNode(node) {\n      let radius = 1,\n        height = 2;\n      const fields = node.fields;\n      for (let i = 0, l = fields.length; i < l; i++) {\n        const field = fields[i];\n        const fieldName = field.name;\n        const fieldValues = field.values;\n        switch (fieldName) {\n          case \"bottom\":\n            break;\n          case \"radius\":\n            radius = fieldValues[0];\n            break;\n          case \"height\":\n            height = fieldValues[0];\n            break;\n          case \"side\":\n            break;\n          case \"top\":\n            break;\n          default:\n            console.warn(\"THREE.VRMLLoader: Unknown field:\", fieldName);\n            break;\n        }\n      }\n      const geometry = new CylinderGeometry(radius, radius, height, 16, 1);\n      return geometry;\n    }\n    function buildSphereNode(node) {\n      let radius = 1;\n      const fields = node.fields;\n      for (let i = 0, l = fields.length; i < l; i++) {\n        const field = fields[i];\n        const fieldName = field.name;\n        const fieldValues = field.values;\n        switch (fieldName) {\n          case \"radius\":\n            radius = fieldValues[0];\n            break;\n          default:\n            console.warn(\"THREE.VRMLLoader: Unknown field:\", fieldName);\n            break;\n        }\n      }\n      const geometry = new SphereGeometry(radius, 16, 16);\n      return geometry;\n    }\n    function buildElevationGridNode(node) {\n      let color;\n      let normal;\n      let texCoord;\n      let height;\n      let colorPerVertex = true;\n      let normalPerVertex = true;\n      let solid = true;\n      let ccw = true;\n      let creaseAngle = 0;\n      let xDimension = 2;\n      let zDimension = 2;\n      let xSpacing = 1;\n      let zSpacing = 1;\n      const fields = node.fields;\n      for (let i = 0, l = fields.length; i < l; i++) {\n        const field = fields[i];\n        const fieldName = field.name;\n        const fieldValues = field.values;\n        switch (fieldName) {\n          case \"color\":\n            const colorNode = fieldValues[0];\n            if (colorNode !== null) {\n              color = getNode(colorNode);\n            }\n            break;\n          case \"normal\":\n            const normalNode = fieldValues[0];\n            if (normalNode !== null) {\n              normal = getNode(normalNode);\n            }\n            break;\n          case \"texCoord\":\n            const texCoordNode = fieldValues[0];\n            if (texCoordNode !== null) {\n              texCoord = getNode(texCoordNode);\n            }\n            break;\n          case \"height\":\n            height = fieldValues;\n            break;\n          case \"ccw\":\n            ccw = fieldValues[0];\n            break;\n          case \"colorPerVertex\":\n            colorPerVertex = fieldValues[0];\n            break;\n          case \"creaseAngle\":\n            creaseAngle = fieldValues[0];\n            break;\n          case \"normalPerVertex\":\n            normalPerVertex = fieldValues[0];\n            break;\n          case \"solid\":\n            solid = fieldValues[0];\n            break;\n          case \"xDimension\":\n            xDimension = fieldValues[0];\n            break;\n          case \"xSpacing\":\n            xSpacing = fieldValues[0];\n            break;\n          case \"zDimension\":\n            zDimension = fieldValues[0];\n            break;\n          case \"zSpacing\":\n            zSpacing = fieldValues[0];\n            break;\n          default:\n            console.warn(\"THREE.VRMLLoader: Unknown field:\", fieldName);\n            break;\n        }\n      }\n      const vertices = [];\n      const normals = [];\n      const colors = [];\n      const uvs = [];\n      for (let i = 0; i < zDimension; i++) {\n        for (let j = 0; j < xDimension; j++) {\n          const index = i * xDimension + j;\n          const x = xSpacing * i;\n          const y = height[index];\n          const z = zSpacing * j;\n          vertices.push(x, y, z);\n          if (color && colorPerVertex === true) {\n            const r = color[index * 3 + 0];\n            const g = color[index * 3 + 1];\n            const b = color[index * 3 + 2];\n            colors.push(r, g, b);\n          }\n          if (normal && normalPerVertex === true) {\n            const xn = normal[index * 3 + 0];\n            const yn = normal[index * 3 + 1];\n            const zn = normal[index * 3 + 2];\n            normals.push(xn, yn, zn);\n          }\n          if (texCoord) {\n            const s = texCoord[index * 2 + 0];\n            const t = texCoord[index * 2 + 1];\n            uvs.push(s, t);\n          } else {\n            uvs.push(i / (xDimension - 1), j / (zDimension - 1));\n          }\n        }\n      }\n      const indices = [];\n      for (let i = 0; i < xDimension - 1; i++) {\n        for (let j = 0; j < zDimension - 1; j++) {\n          const a = i + j * xDimension;\n          const b = i + (j + 1) * xDimension;\n          const c = i + 1 + (j + 1) * xDimension;\n          const d = i + 1 + j * xDimension;\n          if (ccw === true) {\n            indices.push(a, c, b);\n            indices.push(c, a, d);\n          } else {\n            indices.push(a, b, c);\n            indices.push(c, d, a);\n          }\n        }\n      }\n      const positionAttribute = toNonIndexedAttribute(indices, new Float32BufferAttribute(vertices, 3));\n      const uvAttribute = toNonIndexedAttribute(indices, new Float32BufferAttribute(uvs, 2));\n      let colorAttribute;\n      let normalAttribute;\n      if (color) {\n        if (colorPerVertex === false) {\n          for (let i = 0; i < xDimension - 1; i++) {\n            for (let j = 0; j < zDimension - 1; j++) {\n              const index = i + j * (xDimension - 1);\n              const r = color[index * 3 + 0];\n              const g = color[index * 3 + 1];\n              const b = color[index * 3 + 2];\n              colors.push(r, g, b);\n              colors.push(r, g, b);\n              colors.push(r, g, b);\n              colors.push(r, g, b);\n              colors.push(r, g, b);\n              colors.push(r, g, b);\n            }\n          }\n          colorAttribute = new Float32BufferAttribute(colors, 3);\n        } else {\n          colorAttribute = toNonIndexedAttribute(indices, new Float32BufferAttribute(colors, 3));\n        }\n      }\n      if (normal) {\n        if (normalPerVertex === false) {\n          for (let i = 0; i < xDimension - 1; i++) {\n            for (let j = 0; j < zDimension - 1; j++) {\n              const index = i + j * (xDimension - 1);\n              const xn = normal[index * 3 + 0];\n              const yn = normal[index * 3 + 1];\n              const zn = normal[index * 3 + 2];\n              normals.push(xn, yn, zn);\n              normals.push(xn, yn, zn);\n              normals.push(xn, yn, zn);\n              normals.push(xn, yn, zn);\n              normals.push(xn, yn, zn);\n              normals.push(xn, yn, zn);\n            }\n          }\n          normalAttribute = new Float32BufferAttribute(normals, 3);\n        } else {\n          normalAttribute = toNonIndexedAttribute(indices, new Float32BufferAttribute(normals, 3));\n        }\n      } else {\n        normalAttribute = computeNormalAttribute(indices, vertices, creaseAngle);\n      }\n      const geometry = new BufferGeometry();\n      geometry.setAttribute(\"position\", positionAttribute);\n      geometry.setAttribute(\"normal\", normalAttribute);\n      geometry.setAttribute(\"uv\", uvAttribute);\n      if (colorAttribute) geometry.setAttribute(\"color\", colorAttribute);\n      geometry._solid = solid;\n      geometry._type = \"mesh\";\n      return geometry;\n    }\n    function buildExtrusionNode(node) {\n      let crossSection = [1, 1, 1, -1, -1, -1, -1, 1, 1, 1];\n      let spine = [0, 0, 0, 0, 1, 0];\n      let scale;\n      let orientation;\n      let beginCap = true;\n      let ccw = true;\n      let creaseAngle = 0;\n      let endCap = true;\n      let solid = true;\n      const fields = node.fields;\n      for (let i = 0, l = fields.length; i < l; i++) {\n        const field = fields[i];\n        const fieldName = field.name;\n        const fieldValues = field.values;\n        switch (fieldName) {\n          case \"beginCap\":\n            beginCap = fieldValues[0];\n            break;\n          case \"ccw\":\n            ccw = fieldValues[0];\n            break;\n          case \"convex\":\n            break;\n          case \"creaseAngle\":\n            creaseAngle = fieldValues[0];\n            break;\n          case \"crossSection\":\n            crossSection = fieldValues;\n            break;\n          case \"endCap\":\n            endCap = fieldValues[0];\n            break;\n          case \"orientation\":\n            orientation = fieldValues;\n            break;\n          case \"scale\":\n            scale = fieldValues;\n            break;\n          case \"solid\":\n            solid = fieldValues[0];\n            break;\n          case \"spine\":\n            spine = fieldValues;\n            break;\n          default:\n            console.warn(\"THREE.VRMLLoader: Unknown field:\", fieldName);\n            break;\n        }\n      }\n      const crossSectionClosed = crossSection[0] === crossSection[crossSection.length - 2] && crossSection[1] === crossSection[crossSection.length - 1];\n      const vertices = [];\n      const spineVector = new Vector3();\n      const scaling = new Vector3();\n      const axis = new Vector3();\n      const vertex = new Vector3();\n      const quaternion = new Quaternion();\n      for (let i = 0, j = 0, o = 0, il = spine.length; i < il; i += 3, j += 2, o += 4) {\n        spineVector.fromArray(spine, i);\n        scaling.x = scale ? scale[j + 0] : 1;\n        scaling.y = 1;\n        scaling.z = scale ? scale[j + 1] : 1;\n        axis.x = orientation ? orientation[o + 0] : 0;\n        axis.y = orientation ? orientation[o + 1] : 0;\n        axis.z = orientation ? orientation[o + 2] : 1;\n        const angle = orientation ? orientation[o + 3] : 0;\n        for (let k = 0, kl = crossSection.length; k < kl; k += 2) {\n          vertex.x = crossSection[k + 0];\n          vertex.y = 0;\n          vertex.z = crossSection[k + 1];\n          vertex.multiply(scaling);\n          quaternion.setFromAxisAngle(axis, angle);\n          vertex.applyQuaternion(quaternion);\n          vertex.add(spineVector);\n          vertices.push(vertex.x, vertex.y, vertex.z);\n        }\n      }\n      const indices = [];\n      const spineCount = spine.length / 3;\n      const crossSectionCount = crossSection.length / 2;\n      for (let i = 0; i < spineCount - 1; i++) {\n        for (let j = 0; j < crossSectionCount - 1; j++) {\n          const a = j + i * crossSectionCount;\n          let b = j + 1 + i * crossSectionCount;\n          const c = j + (i + 1) * crossSectionCount;\n          let d = j + 1 + (i + 1) * crossSectionCount;\n          if (j === crossSectionCount - 2 && crossSectionClosed === true) {\n            b = i * crossSectionCount;\n            d = (i + 1) * crossSectionCount;\n          }\n          if (ccw === true) {\n            indices.push(a, b, c);\n            indices.push(c, b, d);\n          } else {\n            indices.push(a, c, b);\n            indices.push(c, d, b);\n          }\n        }\n      }\n      if (beginCap === true || endCap === true) {\n        const contour = [];\n        for (let i = 0, l = crossSection.length; i < l; i += 2) {\n          contour.push(new Vector2(crossSection[i], crossSection[i + 1]));\n        }\n        const faces = ShapeUtils.triangulateShape(contour, []);\n        const capIndices = [];\n        for (let i = 0, l = faces.length; i < l; i++) {\n          const face = faces[i];\n          capIndices.push(face[0], face[1], face[2]);\n        }\n        if (beginCap === true) {\n          for (let i = 0, l = capIndices.length; i < l; i += 3) {\n            if (ccw === true) {\n              indices.push(capIndices[i + 0], capIndices[i + 1], capIndices[i + 2]);\n            } else {\n              indices.push(capIndices[i + 0], capIndices[i + 2], capIndices[i + 1]);\n            }\n          }\n        }\n        if (endCap === true) {\n          const indexOffset = crossSectionCount * (spineCount - 1);\n          for (let i = 0, l = capIndices.length; i < l; i += 3) {\n            if (ccw === true) {\n              indices.push(indexOffset + capIndices[i + 0], indexOffset + capIndices[i + 2], indexOffset + capIndices[i + 1]);\n            } else {\n              indices.push(indexOffset + capIndices[i + 0], indexOffset + capIndices[i + 1], indexOffset + capIndices[i + 2]);\n            }\n          }\n        }\n      }\n      const positionAttribute = toNonIndexedAttribute(indices, new Float32BufferAttribute(vertices, 3));\n      const normalAttribute = computeNormalAttribute(indices, vertices, creaseAngle);\n      const geometry = new BufferGeometry();\n      geometry.setAttribute(\"position\", positionAttribute);\n      geometry.setAttribute(\"normal\", normalAttribute);\n      geometry._solid = solid;\n      geometry._type = \"mesh\";\n      return geometry;\n    }\n    function resolveUSE(identifier) {\n      const node = nodeMap[identifier];\n      const build = getNode(node);\n      return build.isObject3D || build.isMaterial ? build.clone() : build;\n    }\n    function parseFieldChildren(children, owner) {\n      for (let i = 0, l = children.length; i < l; i++) {\n        const object = getNode(children[i]);\n        if (object instanceof Object3D) owner.add(object);\n      }\n    }\n    function triangulateFaceIndex(index, ccw) {\n      const indices = [];\n      let start = 0;\n      for (let i = 0, l = index.length; i < l; i++) {\n        const i1 = index[start];\n        const i2 = index[i + (ccw ? 1 : 2)];\n        const i3 = index[i + (ccw ? 2 : 1)];\n        indices.push(i1, i2, i3);\n        if (index[i + 3] === -1 || i + 3 >= l) {\n          i += 3;\n          start = i + 1;\n        }\n      }\n      return indices;\n    }\n    function triangulateFaceData(data2, index) {\n      const triangulatedData = [];\n      let start = 0;\n      for (let i = 0, l = index.length; i < l; i++) {\n        const stride = start * 3;\n        const x = data2[stride];\n        const y = data2[stride + 1];\n        const z = data2[stride + 2];\n        triangulatedData.push(x, y, z);\n        if (index[i + 3] === -1 || i + 3 >= l) {\n          i += 3;\n          start++;\n        }\n      }\n      return triangulatedData;\n    }\n    function flattenData(data2, index) {\n      const flattenData2 = [];\n      for (let i = 0, l = index.length; i < l; i++) {\n        const i1 = index[i];\n        const stride = i1 * 3;\n        const x = data2[stride];\n        const y = data2[stride + 1];\n        const z = data2[stride + 2];\n        flattenData2.push(x, y, z);\n      }\n      return flattenData2;\n    }\n    function expandLineIndex(index) {\n      const indices = [];\n      for (let i = 0, l = index.length; i < l; i++) {\n        const i1 = index[i];\n        const i2 = index[i + 1];\n        indices.push(i1, i2);\n        if (index[i + 2] === -1 || i + 2 >= l) {\n          i += 2;\n        }\n      }\n      return indices;\n    }\n    function expandLineData(data2, index) {\n      const triangulatedData = [];\n      let start = 0;\n      for (let i = 0, l = index.length; i < l; i++) {\n        const stride = start * 3;\n        const x = data2[stride];\n        const y = data2[stride + 1];\n        const z = data2[stride + 2];\n        triangulatedData.push(x, y, z);\n        if (index[i + 2] === -1 || i + 2 >= l) {\n          i += 2;\n          start++;\n        }\n      }\n      return triangulatedData;\n    }\n    const vA = new Vector3();\n    const vB = new Vector3();\n    const vC = new Vector3();\n    const uvA = new Vector2();\n    const uvB = new Vector2();\n    const uvC = new Vector2();\n    function computeAttributeFromIndexedData(coordIndex, index, data2, itemSize) {\n      const array = [];\n      for (let i = 0, l = coordIndex.length; i < l; i += 3) {\n        const a = index[i];\n        const b = index[i + 1];\n        const c = index[i + 2];\n        if (itemSize === 2) {\n          uvA.fromArray(data2, a * itemSize);\n          uvB.fromArray(data2, b * itemSize);\n          uvC.fromArray(data2, c * itemSize);\n          array.push(uvA.x, uvA.y);\n          array.push(uvB.x, uvB.y);\n          array.push(uvC.x, uvC.y);\n        } else {\n          vA.fromArray(data2, a * itemSize);\n          vB.fromArray(data2, b * itemSize);\n          vC.fromArray(data2, c * itemSize);\n          array.push(vA.x, vA.y, vA.z);\n          array.push(vB.x, vB.y, vB.z);\n          array.push(vC.x, vC.y, vC.z);\n        }\n      }\n      return new Float32BufferAttribute(array, itemSize);\n    }\n    function computeAttributeFromFaceData(index, faceData) {\n      const array = [];\n      for (let i = 0, j = 0, l = index.length; i < l; i += 3, j++) {\n        vA.fromArray(faceData, j * 3);\n        array.push(vA.x, vA.y, vA.z);\n        array.push(vA.x, vA.y, vA.z);\n        array.push(vA.x, vA.y, vA.z);\n      }\n      return new Float32BufferAttribute(array, 3);\n    }\n    function computeAttributeFromLineData(index, lineData) {\n      const array = [];\n      for (let i = 0, j = 0, l = index.length; i < l; i += 2, j++) {\n        vA.fromArray(lineData, j * 3);\n        array.push(vA.x, vA.y, vA.z);\n        array.push(vA.x, vA.y, vA.z);\n      }\n      return new Float32BufferAttribute(array, 3);\n    }\n    function toNonIndexedAttribute(indices, attribute) {\n      const array = attribute.array;\n      const itemSize = attribute.itemSize;\n      const array2 = new array.constructor(indices.length * itemSize);\n      let index = 0,\n        index2 = 0;\n      for (let i = 0, l = indices.length; i < l; i++) {\n        index = indices[i] * itemSize;\n        for (let j = 0; j < itemSize; j++) {\n          array2[index2++] = array[index++];\n        }\n      }\n      return new Float32BufferAttribute(array2, itemSize);\n    }\n    const ab = new Vector3();\n    const cb = new Vector3();\n    function computeNormalAttribute(index, coord, creaseAngle) {\n      const faces = [];\n      const vertexNormals = {};\n      for (let i = 0, l = index.length; i < l; i += 3) {\n        const a = index[i];\n        const b = index[i + 1];\n        const c = index[i + 2];\n        const face = new Face(a, b, c);\n        vA.fromArray(coord, a * 3);\n        vB.fromArray(coord, b * 3);\n        vC.fromArray(coord, c * 3);\n        cb.subVectors(vC, vB);\n        ab.subVectors(vA, vB);\n        cb.cross(ab);\n        cb.normalize();\n        face.normal.copy(cb);\n        if (vertexNormals[a] === void 0) vertexNormals[a] = [];\n        if (vertexNormals[b] === void 0) vertexNormals[b] = [];\n        if (vertexNormals[c] === void 0) vertexNormals[c] = [];\n        vertexNormals[a].push(face.normal);\n        vertexNormals[b].push(face.normal);\n        vertexNormals[c].push(face.normal);\n        faces.push(face);\n      }\n      const normals = [];\n      for (let i = 0, l = faces.length; i < l; i++) {\n        const face = faces[i];\n        const nA = weightedNormal(vertexNormals[face.a], face.normal, creaseAngle);\n        const nB = weightedNormal(vertexNormals[face.b], face.normal, creaseAngle);\n        const nC = weightedNormal(vertexNormals[face.c], face.normal, creaseAngle);\n        vA.fromArray(coord, face.a * 3);\n        vB.fromArray(coord, face.b * 3);\n        vC.fromArray(coord, face.c * 3);\n        normals.push(nA.x, nA.y, nA.z);\n        normals.push(nB.x, nB.y, nB.z);\n        normals.push(nC.x, nC.y, nC.z);\n      }\n      return new Float32BufferAttribute(normals, 3);\n    }\n    function weightedNormal(normals, vector, creaseAngle) {\n      const normal = new Vector3();\n      if (creaseAngle === 0) {\n        normal.copy(vector);\n      } else {\n        for (let i = 0, l = normals.length; i < l; i++) {\n          if (normals[i].angleTo(vector) < creaseAngle) {\n            normal.add(normals[i]);\n          }\n        }\n      }\n      return normal.normalize();\n    }\n    function toColorArray(colors) {\n      const array = [];\n      for (let i = 0, l = colors.length; i < l; i += 3) {\n        array.push(new Color(colors[i], colors[i + 1], colors[i + 2]));\n      }\n      return array;\n    }\n    function paintFaces(geometry, radius, angles, colors, topDown) {\n      const thresholds = [];\n      const startAngle = topDown === true ? 0 : Math.PI;\n      for (let i = 0, l = colors.length; i < l; i++) {\n        let angle = i === 0 ? 0 : angles[i - 1];\n        angle = topDown === true ? angle : startAngle - angle;\n        const point = new Vector3();\n        point.setFromSphericalCoords(radius, angle, 0);\n        thresholds.push(point);\n      }\n      const indices = geometry.index;\n      const positionAttribute = geometry.attributes.position;\n      const colorAttribute = new BufferAttribute(new Float32Array(geometry.attributes.position.count * 3), 3);\n      const position = new Vector3();\n      const color = new Color();\n      for (let i = 0; i < indices.count; i++) {\n        const index = indices.getX(i);\n        position.fromBufferAttribute(positionAttribute, index);\n        let thresholdIndexA, thresholdIndexB;\n        let t = 1;\n        for (let j = 1; j < thresholds.length; j++) {\n          thresholdIndexA = j - 1;\n          thresholdIndexB = j;\n          const thresholdA = thresholds[thresholdIndexA];\n          const thresholdB = thresholds[thresholdIndexB];\n          if (topDown === true) {\n            if (position.y <= thresholdA.y && position.y > thresholdB.y) {\n              t = Math.abs(thresholdA.y - position.y) / Math.abs(thresholdA.y - thresholdB.y);\n              break;\n            }\n          } else {\n            if (position.y >= thresholdA.y && position.y < thresholdB.y) {\n              t = Math.abs(thresholdA.y - position.y) / Math.abs(thresholdA.y - thresholdB.y);\n              break;\n            }\n          }\n        }\n        const colorA = colors[thresholdIndexA];\n        const colorB = colors[thresholdIndexB];\n        color.copy(colorA).lerp(colorB, t);\n        colorAttribute.setXYZ(index, color.r, color.g, color.b);\n      }\n      geometry.setAttribute(\"color\", colorAttribute);\n    }\n    const textureLoader = new TextureLoader(this.manager);\n    textureLoader.setPath(this.resourcePath || path).setCrossOrigin(this.crossOrigin);\n    if (data.indexOf(\"#VRML V2.0\") === -1) {\n      throw Error(\"THREE.VRMLLexer: Version of VRML asset not supported.\");\n    }\n    const tree = generateVRMLTree(data);\n    const scene = parseTree(tree);\n    return scene;\n  }\n}\nclass VRMLLexer {\n  constructor(tokens) {\n    this.lexer = new Lexer(tokens);\n  }\n  lex(inputText) {\n    const lexingResult = this.lexer.tokenize(inputText);\n    if (lexingResult.errors.length > 0) {\n      console.error(lexingResult.errors);\n      throw Error(\"THREE.VRMLLexer: Lexing errors detected.\");\n    }\n    return lexingResult;\n  }\n}\nclass VRMLParser extends CstParser {\n  constructor(tokenVocabulary) {\n    super(tokenVocabulary);\n    const $ = this;\n    const Version = tokenVocabulary[\"Version\"];\n    const LCurly = tokenVocabulary[\"LCurly\"];\n    const RCurly = tokenVocabulary[\"RCurly\"];\n    const LSquare = tokenVocabulary[\"LSquare\"];\n    const RSquare = tokenVocabulary[\"RSquare\"];\n    const Identifier = tokenVocabulary[\"Identifier\"];\n    const RouteIdentifier = tokenVocabulary[\"RouteIdentifier\"];\n    const StringLiteral = tokenVocabulary[\"StringLiteral\"];\n    const HexLiteral = tokenVocabulary[\"HexLiteral\"];\n    const NumberLiteral = tokenVocabulary[\"NumberLiteral\"];\n    const TrueLiteral = tokenVocabulary[\"TrueLiteral\"];\n    const FalseLiteral = tokenVocabulary[\"FalseLiteral\"];\n    const NullLiteral = tokenVocabulary[\"NullLiteral\"];\n    const DEF = tokenVocabulary[\"DEF\"];\n    const USE = tokenVocabulary[\"USE\"];\n    const ROUTE = tokenVocabulary[\"ROUTE\"];\n    const TO = tokenVocabulary[\"TO\"];\n    const NodeName = tokenVocabulary[\"NodeName\"];\n    $.RULE(\"vrml\", function () {\n      $.SUBRULE($.version);\n      $.AT_LEAST_ONE(function () {\n        $.SUBRULE($.node);\n      });\n      $.MANY(function () {\n        $.SUBRULE($.route);\n      });\n    });\n    $.RULE(\"version\", function () {\n      $.CONSUME(Version);\n    });\n    $.RULE(\"node\", function () {\n      $.OPTION(function () {\n        $.SUBRULE($.def);\n      });\n      $.CONSUME(NodeName);\n      $.CONSUME(LCurly);\n      $.MANY(function () {\n        $.SUBRULE($.field);\n      });\n      $.CONSUME(RCurly);\n    });\n    $.RULE(\"field\", function () {\n      $.CONSUME(Identifier);\n      $.OR2([{\n        ALT: function () {\n          $.SUBRULE($.singleFieldValue);\n        }\n      }, {\n        ALT: function () {\n          $.SUBRULE($.multiFieldValue);\n        }\n      }]);\n    });\n    $.RULE(\"def\", function () {\n      $.CONSUME(DEF);\n      $.OR([{\n        ALT: function () {\n          $.CONSUME(Identifier);\n        }\n      }, {\n        ALT: function () {\n          $.CONSUME(NodeName);\n        }\n      }]);\n    });\n    $.RULE(\"use\", function () {\n      $.CONSUME(USE);\n      $.OR([{\n        ALT: function () {\n          $.CONSUME(Identifier);\n        }\n      }, {\n        ALT: function () {\n          $.CONSUME(NodeName);\n        }\n      }]);\n    });\n    $.RULE(\"singleFieldValue\", function () {\n      $.AT_LEAST_ONE(function () {\n        $.OR([{\n          ALT: function () {\n            $.SUBRULE($.node);\n          }\n        }, {\n          ALT: function () {\n            $.SUBRULE($.use);\n          }\n        }, {\n          ALT: function () {\n            $.CONSUME(StringLiteral);\n          }\n        }, {\n          ALT: function () {\n            $.CONSUME(HexLiteral);\n          }\n        }, {\n          ALT: function () {\n            $.CONSUME(NumberLiteral);\n          }\n        }, {\n          ALT: function () {\n            $.CONSUME(TrueLiteral);\n          }\n        }, {\n          ALT: function () {\n            $.CONSUME(FalseLiteral);\n          }\n        }, {\n          ALT: function () {\n            $.CONSUME(NullLiteral);\n          }\n        }]);\n      });\n    });\n    $.RULE(\"multiFieldValue\", function () {\n      $.CONSUME(LSquare);\n      $.MANY(function () {\n        $.OR([{\n          ALT: function () {\n            $.SUBRULE($.node);\n          }\n        }, {\n          ALT: function () {\n            $.SUBRULE($.use);\n          }\n        }, {\n          ALT: function () {\n            $.CONSUME(StringLiteral);\n          }\n        }, {\n          ALT: function () {\n            $.CONSUME(HexLiteral);\n          }\n        }, {\n          ALT: function () {\n            $.CONSUME(NumberLiteral);\n          }\n        }, {\n          ALT: function () {\n            $.CONSUME(NullLiteral);\n          }\n        }]);\n      });\n      $.CONSUME(RSquare);\n    });\n    $.RULE(\"route\", function () {\n      $.CONSUME(ROUTE);\n      $.CONSUME(RouteIdentifier);\n      $.CONSUME(TO);\n      $.CONSUME2(RouteIdentifier);\n    });\n    this.performSelfAnalysis();\n  }\n}\nclass Face {\n  constructor(a, b, c) {\n    this.a = a;\n    this.b = b;\n    this.c = c;\n    this.normal = new Vector3();\n  }\n}\nconst TEXTURE_TYPE = {\n  INTENSITY: 1,\n  INTENSITY_ALPHA: 2,\n  RGB: 3,\n  RGBA: 4\n};\nexport { VRMLLoader };","map":{"version":3,"names":["Loader","LoaderUtils","FileLoader","Scene","Object3D","Group","Vector3","SphereGeometry","MeshBasicMaterial","BackSide","Mesh","PointsMaterial","Points","LineBasicMaterial","LineSegments","FrontSide","DoubleSide","MeshPhongMaterial","Color","RepeatWrapping","ClampToEdgeWrapping","DataTexture","Vector2","BufferGeometry","Float32BufferAttribute","BoxGeometry","ConeGeometry","CylinderGeometry","Quaternion","ShapeUtils","BufferAttribute","TextureLoader","createToken","Lexer","CstParser","VRMLLoader","constructor","manager","load","url","onLoad","onProgress","onError","scope","path","extractUrlBase","loader","setPath","setRequestHeader","requestHeader","setWithCredentials","withCredentials","text","parse","e","console","error","itemError","data","nodeMap","generateVRMLTree","data2","tokenData","createTokens","lexer","VRMLLexer","tokens","parser","VRMLParser","tokenVocabulary","visitor","createVisitor","getBaseCstVisitorConstructor","lexingResult","lex","input","cstOutput","vrml","errors","length","Error","ast","visit","RouteIdentifier","name","pattern","Identifier","longer_alt","nodeTypes","Version","NodeName","RegExp","join","DEF","USE","ROUTE","TO","StringLiteral","HexLiteral","NumberLiteral","TrueLiteral","FalseLiteral","NullLiteral","LSquare","RSquare","LCurly","RCurly","Comment","group","SKIPPED","WhiteSpace","i","l","token","BaseVRMLVisitor","VRMLToASTVisitor","call","validateVisitor","prototype","Object","assign","create","ctx","version","nodes","routes","node","push","route","image","fields","field","def","type","values","result","singleFieldValue","multiFieldValue","use","processField","FROM","stringLiteral","replace","numberLiteral","parseFloat","hexLiteral","trueLiteral","falseLiteral","forEach","parseTree","tree2","scene2","buildNodeMap","object","getNode","add","userData","worldInfo","fieldValues","j","jl","resolveUSE","build","buildNode","nodeName","buildGroupingNode","buildBackgroundNode","buildShapeNode","buildAppearanceNode","buildMaterialNode","buildImageTextureNode","buildPixelTextureNode","buildTextureTransformNode","buildIndexedFaceSetNode","buildIndexedLineSetNode","buildPointSetNode","buildBoxNode","buildConeNode","buildCylinderNode","buildSphereNode","buildElevationGridNode","buildExtrusionNode","buildGeometricNode","buildWorldInfoNode","warn","hasOwnProperty","fieldName","parseFieldChildren","axis","angle","quaternion","setFromAxisAngle","scale","set","position","groundAngle","groundColor","skyAngle","skyColor","radius","skyGeometry","skyMaterial","fog","side","depthWrite","depthTest","paintFaces","toColorArray","vertexColors","color","setRGB","sky","groundGeometry","Math","PI","groundMaterial","ground","renderOrder","Infinity","material","geometry","attributes","_type","pointsMaterial","isMeshPhongMaterial","copy","emissive","lineMaterial","_solid","visible","transformData","materialData","diffuseColor","emissiveColor","shininess","specularColor","specular","transparency","opacity","transparent","textureNode","map","__type","TEXTURE_TYPE","INTENSITY_ALPHA","RGB","RGBA","center","rotation","repeat","offset","translation","parseHexColor","hex","textureType","value","INTENSITY","parseInt","r","g","b","a","substring","getTextureType","num_components","texture","wrapS","wrapT","width","height","Uint8Array","k","stride","needsUpdate","textureLoader","title","info","coord","normal","texCoord","ccw","solid","creaseAngle","colorIndex","coordIndex","normalIndex","texCoordIndex","colorPerVertex","normalPerVertex","colorNode","coordNode","normalNode","texCoordNode","triangulatedCoordIndex","triangulateFaceIndex","colorAttribute","normalAttribute","uvAttribute","triangulatedColorIndex","computeAttributeFromIndexedData","toNonIndexedAttribute","flattenFaceColors","flattenData","triangulatedFaceColors","triangulateFaceData","computeAttributeFromFaceData","triangulatedNormalIndex","flattenFaceNormals","triangulatedFaceNormals","computeNormalAttribute","triangulatedTexCoordIndex","positionAttribute","setAttribute","expandedLineIndex","expandLineIndex","expandedColorIndex","flattenLineColors","expandedLineColors","expandLineData","computeAttributeFromLineData","size","x","y","z","openEnded","xDimension","zDimension","xSpacing","zSpacing","vertices","normals","colors","uvs","index","xn","yn","zn","s","t","indices","c","d","crossSection","spine","orientation","beginCap","endCap","crossSectionClosed","spineVector","scaling","vertex","o","il","fromArray","kl","multiply","applyQuaternion","spineCount","crossSectionCount","contour","faces","triangulateShape","capIndices","face","indexOffset","identifier","isObject3D","isMaterial","clone","children","owner","start","i1","i2","i3","triangulatedData","flattenData2","vA","vB","vC","uvA","uvB","uvC","itemSize","array","faceData","lineData","attribute","array2","index2","ab","cb","vertexNormals","Face","subVectors","cross","normalize","nA","weightedNormal","nB","nC","vector","angleTo","angles","topDown","thresholds","startAngle","point","setFromSphericalCoords","Float32Array","count","getX","fromBufferAttribute","thresholdIndexA","thresholdIndexB","thresholdA","thresholdB","abs","colorA","colorB","lerp","setXYZ","resourcePath","setCrossOrigin","crossOrigin","indexOf","tree","scene","inputText","tokenize","$","RULE","SUBRULE","AT_LEAST_ONE","MANY","CONSUME","OPTION","OR2","ALT","OR","CONSUME2","performSelfAnalysis"],"sources":["/home/krug/Coding/JavaScript/Websites/Personal/personal/node_modules/.pnpm/three-stdlib@2.23.7_three@0.151.3/node_modules/three-stdlib/loaders/VRMLLoader.js"],"sourcesContent":["import { Loader, LoaderUtils, FileLoader, Scene, Object3D, Group, Vector3, SphereGeometry, MeshBasicMaterial, BackSide, Mesh, PointsMaterial, Points, LineBasicMaterial, LineSegments, FrontSide, DoubleSide, MeshPhongMaterial, Color, RepeatWrapping, ClampToEdgeWrapping, DataTexture, Vector2, BufferGeometry, Float32BufferAttribute, BoxGeometry, ConeGeometry, CylinderGeometry, Quaternion, ShapeUtils, BufferAttribute, TextureLoader } from \"three\";\nimport { createToken, Lexer, CstParser } from \"chevrotain\";\nclass VRMLLoader extends Loader {\n  constructor(manager) {\n    super(manager);\n  }\n  load(url, onLoad, onProgress, onError) {\n    const scope = this;\n    const path = scope.path === \"\" ? LoaderUtils.extractUrlBase(url) : scope.path;\n    const loader = new FileLoader(scope.manager);\n    loader.setPath(scope.path);\n    loader.setRequestHeader(scope.requestHeader);\n    loader.setWithCredentials(scope.withCredentials);\n    loader.load(\n      url,\n      function(text) {\n        try {\n          onLoad(scope.parse(text, path));\n        } catch (e) {\n          if (onError) {\n            onError(e);\n          } else {\n            console.error(e);\n          }\n          scope.manager.itemError(url);\n        }\n      },\n      onProgress,\n      onError\n    );\n  }\n  parse(data, path) {\n    const nodeMap = {};\n    function generateVRMLTree(data2) {\n      const tokenData = createTokens();\n      const lexer = new VRMLLexer(tokenData.tokens);\n      const parser = new VRMLParser(tokenData.tokenVocabulary);\n      const visitor = createVisitor(parser.getBaseCstVisitorConstructor());\n      const lexingResult = lexer.lex(data2);\n      parser.input = lexingResult.tokens;\n      const cstOutput = parser.vrml();\n      if (parser.errors.length > 0) {\n        console.error(parser.errors);\n        throw Error(\"THREE.VRMLLoader: Parsing errors detected.\");\n      }\n      const ast = visitor.visit(cstOutput);\n      return ast;\n    }\n    function createTokens() {\n      const RouteIdentifier = createToken({\n        name: \"RouteIdentifier\",\n        pattern: /[^\\x30-\\x39\\0-\\x20\\x22\\x27\\x23\\x2b\\x2c\\x2d\\x2e\\x5b\\x5d\\x5c\\x7b\\x7d][^\\0-\\x20\\x22\\x27\\x23\\x2b\\x2c\\x2d\\x2e\\x5b\\x5d\\x5c\\x7b\\x7d]*[\\.][^\\x30-\\x39\\0-\\x20\\x22\\x27\\x23\\x2b\\x2c\\x2d\\x2e\\x5b\\x5d\\x5c\\x7b\\x7d][^\\0-\\x20\\x22\\x27\\x23\\x2b\\x2c\\x2d\\x2e\\x5b\\x5d\\x5c\\x7b\\x7d]*/\n      });\n      const Identifier = createToken({\n        name: \"Identifier\",\n        pattern: /[^\\x30-\\x39\\0-\\x20\\x22\\x27\\x23\\x2b\\x2c\\x2d\\x2e\\x5b\\x5d\\x5c\\x7b\\x7d][^\\0-\\x20\\x22\\x27\\x23\\x2b\\x2c\\x2d\\x2e\\x5b\\x5d\\x5c\\x7b\\x7d]*/,\n        longer_alt: RouteIdentifier\n      });\n      const nodeTypes = [\n        \"Anchor\",\n        \"Billboard\",\n        \"Collision\",\n        \"Group\",\n        \"Transform\",\n        // grouping nodes\n        \"Inline\",\n        \"LOD\",\n        \"Switch\",\n        // special groups\n        \"AudioClip\",\n        \"DirectionalLight\",\n        \"PointLight\",\n        \"Script\",\n        \"Shape\",\n        \"Sound\",\n        \"SpotLight\",\n        \"WorldInfo\",\n        // common nodes\n        \"CylinderSensor\",\n        \"PlaneSensor\",\n        \"ProximitySensor\",\n        \"SphereSensor\",\n        \"TimeSensor\",\n        \"TouchSensor\",\n        \"VisibilitySensor\",\n        // sensors\n        \"Box\",\n        \"Cone\",\n        \"Cylinder\",\n        \"ElevationGrid\",\n        \"Extrusion\",\n        \"IndexedFaceSet\",\n        \"IndexedLineSet\",\n        \"PointSet\",\n        \"Sphere\",\n        // geometries\n        \"Color\",\n        \"Coordinate\",\n        \"Normal\",\n        \"TextureCoordinate\",\n        // geometric properties\n        \"Appearance\",\n        \"FontStyle\",\n        \"ImageTexture\",\n        \"Material\",\n        \"MovieTexture\",\n        \"PixelTexture\",\n        \"TextureTransform\",\n        // appearance\n        \"ColorInterpolator\",\n        \"CoordinateInterpolator\",\n        \"NormalInterpolator\",\n        \"OrientationInterpolator\",\n        \"PositionInterpolator\",\n        \"ScalarInterpolator\",\n        // interpolators\n        \"Background\",\n        \"Fog\",\n        \"NavigationInfo\",\n        \"Viewpoint\",\n        // bindable nodes\n        \"Text\"\n        // Text must be placed at the end of the regex so there are no matches for TextureTransform and TextureCoordinate\n      ];\n      const Version = createToken({\n        name: \"Version\",\n        pattern: /#VRML.*/,\n        longer_alt: Identifier\n      });\n      const NodeName = createToken({\n        name: \"NodeName\",\n        pattern: new RegExp(nodeTypes.join(\"|\")),\n        longer_alt: Identifier\n      });\n      const DEF = createToken({\n        name: \"DEF\",\n        pattern: /DEF/,\n        longer_alt: Identifier\n      });\n      const USE = createToken({\n        name: \"USE\",\n        pattern: /USE/,\n        longer_alt: Identifier\n      });\n      const ROUTE = createToken({\n        name: \"ROUTE\",\n        pattern: /ROUTE/,\n        longer_alt: Identifier\n      });\n      const TO = createToken({\n        name: \"TO\",\n        pattern: /TO/,\n        longer_alt: Identifier\n      });\n      const StringLiteral = createToken({\n        name: \"StringLiteral\",\n        pattern: /\"(?:[^\\\\\"\\n\\r]|\\\\[bfnrtv\"\\\\/]|\\\\u[0-9a-fA-F][0-9a-fA-F][0-9a-fA-F][0-9a-fA-F])*\"/\n      });\n      const HexLiteral = createToken({ name: \"HexLiteral\", pattern: /0[xX][0-9a-fA-F]+/ });\n      const NumberLiteral = createToken({ name: \"NumberLiteral\", pattern: /[-+]?[0-9]*\\.?[0-9]+([eE][-+]?[0-9]+)?/ });\n      const TrueLiteral = createToken({ name: \"TrueLiteral\", pattern: /TRUE/ });\n      const FalseLiteral = createToken({ name: \"FalseLiteral\", pattern: /FALSE/ });\n      const NullLiteral = createToken({ name: \"NullLiteral\", pattern: /NULL/ });\n      const LSquare = createToken({ name: \"LSquare\", pattern: /\\[/ });\n      const RSquare = createToken({ name: \"RSquare\", pattern: /]/ });\n      const LCurly = createToken({ name: \"LCurly\", pattern: /{/ });\n      const RCurly = createToken({ name: \"RCurly\", pattern: /}/ });\n      const Comment = createToken({\n        name: \"Comment\",\n        pattern: /#.*/,\n        group: Lexer.SKIPPED\n      });\n      const WhiteSpace = createToken({\n        name: \"WhiteSpace\",\n        pattern: /[ ,\\s]/,\n        group: Lexer.SKIPPED\n      });\n      const tokens = [\n        WhiteSpace,\n        // keywords appear before the Identifier\n        NodeName,\n        DEF,\n        USE,\n        ROUTE,\n        TO,\n        TrueLiteral,\n        FalseLiteral,\n        NullLiteral,\n        // the Identifier must appear after the keywords because all keywords are valid identifiers\n        Version,\n        Identifier,\n        RouteIdentifier,\n        StringLiteral,\n        HexLiteral,\n        NumberLiteral,\n        LSquare,\n        RSquare,\n        LCurly,\n        RCurly,\n        Comment\n      ];\n      const tokenVocabulary = {};\n      for (let i = 0, l = tokens.length; i < l; i++) {\n        const token = tokens[i];\n        tokenVocabulary[token.name] = token;\n      }\n      return { tokens, tokenVocabulary };\n    }\n    function createVisitor(BaseVRMLVisitor) {\n      function VRMLToASTVisitor() {\n        BaseVRMLVisitor.call(this);\n        this.validateVisitor();\n      }\n      VRMLToASTVisitor.prototype = Object.assign(Object.create(BaseVRMLVisitor.prototype), {\n        constructor: VRMLToASTVisitor,\n        vrml: function(ctx) {\n          const data2 = {\n            version: this.visit(ctx.version),\n            nodes: [],\n            routes: []\n          };\n          for (let i = 0, l = ctx.node.length; i < l; i++) {\n            const node = ctx.node[i];\n            data2.nodes.push(this.visit(node));\n          }\n          if (ctx.route) {\n            for (let i = 0, l = ctx.route.length; i < l; i++) {\n              const route = ctx.route[i];\n              data2.routes.push(this.visit(route));\n            }\n          }\n          return data2;\n        },\n        version: function(ctx) {\n          return ctx.Version[0].image;\n        },\n        node: function(ctx) {\n          const data2 = {\n            name: ctx.NodeName[0].image,\n            fields: []\n          };\n          if (ctx.field) {\n            for (let i = 0, l = ctx.field.length; i < l; i++) {\n              const field = ctx.field[i];\n              data2.fields.push(this.visit(field));\n            }\n          }\n          if (ctx.def) {\n            data2.DEF = this.visit(ctx.def[0]);\n          }\n          return data2;\n        },\n        field: function(ctx) {\n          const data2 = {\n            name: ctx.Identifier[0].image,\n            type: null,\n            values: null\n          };\n          let result;\n          if (ctx.singleFieldValue) {\n            result = this.visit(ctx.singleFieldValue[0]);\n          }\n          if (ctx.multiFieldValue) {\n            result = this.visit(ctx.multiFieldValue[0]);\n          }\n          data2.type = result.type;\n          data2.values = result.values;\n          return data2;\n        },\n        def: function(ctx) {\n          return (ctx.Identifier || ctx.NodeName)[0].image;\n        },\n        use: function(ctx) {\n          return { USE: (ctx.Identifier || ctx.NodeName)[0].image };\n        },\n        singleFieldValue: function(ctx) {\n          return processField(this, ctx);\n        },\n        multiFieldValue: function(ctx) {\n          return processField(this, ctx);\n        },\n        route: function(ctx) {\n          const data2 = {\n            FROM: ctx.RouteIdentifier[0].image,\n            TO: ctx.RouteIdentifier[1].image\n          };\n          return data2;\n        }\n      });\n      function processField(scope, ctx) {\n        const field = {\n          type: null,\n          values: []\n        };\n        if (ctx.node) {\n          field.type = \"node\";\n          for (let i = 0, l = ctx.node.length; i < l; i++) {\n            const node = ctx.node[i];\n            field.values.push(scope.visit(node));\n          }\n        }\n        if (ctx.use) {\n          field.type = \"use\";\n          for (let i = 0, l = ctx.use.length; i < l; i++) {\n            const use = ctx.use[i];\n            field.values.push(scope.visit(use));\n          }\n        }\n        if (ctx.StringLiteral) {\n          field.type = \"string\";\n          for (let i = 0, l = ctx.StringLiteral.length; i < l; i++) {\n            const stringLiteral = ctx.StringLiteral[i];\n            field.values.push(stringLiteral.image.replace(/'|\"/g, \"\"));\n          }\n        }\n        if (ctx.NumberLiteral) {\n          field.type = \"number\";\n          for (let i = 0, l = ctx.NumberLiteral.length; i < l; i++) {\n            const numberLiteral = ctx.NumberLiteral[i];\n            field.values.push(parseFloat(numberLiteral.image));\n          }\n        }\n        if (ctx.HexLiteral) {\n          field.type = \"hex\";\n          for (let i = 0, l = ctx.HexLiteral.length; i < l; i++) {\n            const hexLiteral = ctx.HexLiteral[i];\n            field.values.push(hexLiteral.image);\n          }\n        }\n        if (ctx.TrueLiteral) {\n          field.type = \"boolean\";\n          for (let i = 0, l = ctx.TrueLiteral.length; i < l; i++) {\n            const trueLiteral = ctx.TrueLiteral[i];\n            if (trueLiteral.image === \"TRUE\")\n              field.values.push(true);\n          }\n        }\n        if (ctx.FalseLiteral) {\n          field.type = \"boolean\";\n          for (let i = 0, l = ctx.FalseLiteral.length; i < l; i++) {\n            const falseLiteral = ctx.FalseLiteral[i];\n            if (falseLiteral.image === \"FALSE\")\n              field.values.push(false);\n          }\n        }\n        if (ctx.NullLiteral) {\n          field.type = \"null\";\n          ctx.NullLiteral.forEach(function() {\n            field.values.push(null);\n          });\n        }\n        return field;\n      }\n      return new VRMLToASTVisitor();\n    }\n    function parseTree(tree2) {\n      const nodes = tree2.nodes;\n      const scene2 = new Scene();\n      for (let i = 0, l = nodes.length; i < l; i++) {\n        const node = nodes[i];\n        buildNodeMap(node);\n      }\n      for (let i = 0, l = nodes.length; i < l; i++) {\n        const node = nodes[i];\n        const object = getNode(node);\n        if (object instanceof Object3D)\n          scene2.add(object);\n        if (node.name === \"WorldInfo\")\n          scene2.userData.worldInfo = object;\n      }\n      return scene2;\n    }\n    function buildNodeMap(node) {\n      if (node.DEF) {\n        nodeMap[node.DEF] = node;\n      }\n      const fields = node.fields;\n      for (let i = 0, l = fields.length; i < l; i++) {\n        const field = fields[i];\n        if (field.type === \"node\") {\n          const fieldValues = field.values;\n          for (let j = 0, jl = fieldValues.length; j < jl; j++) {\n            buildNodeMap(fieldValues[j]);\n          }\n        }\n      }\n    }\n    function getNode(node) {\n      if (node.USE) {\n        return resolveUSE(node.USE);\n      }\n      if (node.build !== void 0)\n        return node.build;\n      node.build = buildNode(node);\n      return node.build;\n    }\n    function buildNode(node) {\n      const nodeName = node.name;\n      let build;\n      switch (nodeName) {\n        case \"Group\":\n        case \"Transform\":\n        case \"Collision\":\n          build = buildGroupingNode(node);\n          break;\n        case \"Background\":\n          build = buildBackgroundNode(node);\n          break;\n        case \"Shape\":\n          build = buildShapeNode(node);\n          break;\n        case \"Appearance\":\n          build = buildAppearanceNode(node);\n          break;\n        case \"Material\":\n          build = buildMaterialNode(node);\n          break;\n        case \"ImageTexture\":\n          build = buildImageTextureNode(node);\n          break;\n        case \"PixelTexture\":\n          build = buildPixelTextureNode(node);\n          break;\n        case \"TextureTransform\":\n          build = buildTextureTransformNode(node);\n          break;\n        case \"IndexedFaceSet\":\n          build = buildIndexedFaceSetNode(node);\n          break;\n        case \"IndexedLineSet\":\n          build = buildIndexedLineSetNode(node);\n          break;\n        case \"PointSet\":\n          build = buildPointSetNode(node);\n          break;\n        case \"Box\":\n          build = buildBoxNode(node);\n          break;\n        case \"Cone\":\n          build = buildConeNode(node);\n          break;\n        case \"Cylinder\":\n          build = buildCylinderNode(node);\n          break;\n        case \"Sphere\":\n          build = buildSphereNode(node);\n          break;\n        case \"ElevationGrid\":\n          build = buildElevationGridNode(node);\n          break;\n        case \"Extrusion\":\n          build = buildExtrusionNode(node);\n          break;\n        case \"Color\":\n        case \"Coordinate\":\n        case \"Normal\":\n        case \"TextureCoordinate\":\n          build = buildGeometricNode(node);\n          break;\n        case \"WorldInfo\":\n          build = buildWorldInfoNode(node);\n          break;\n        case \"Anchor\":\n        case \"Billboard\":\n        case \"Inline\":\n        case \"LOD\":\n        case \"Switch\":\n        case \"AudioClip\":\n        case \"DirectionalLight\":\n        case \"PointLight\":\n        case \"Script\":\n        case \"Sound\":\n        case \"SpotLight\":\n        case \"CylinderSensor\":\n        case \"PlaneSensor\":\n        case \"ProximitySensor\":\n        case \"SphereSensor\":\n        case \"TimeSensor\":\n        case \"TouchSensor\":\n        case \"VisibilitySensor\":\n        case \"Text\":\n        case \"FontStyle\":\n        case \"MovieTexture\":\n        case \"ColorInterpolator\":\n        case \"CoordinateInterpolator\":\n        case \"NormalInterpolator\":\n        case \"OrientationInterpolator\":\n        case \"PositionInterpolator\":\n        case \"ScalarInterpolator\":\n        case \"Fog\":\n        case \"NavigationInfo\":\n        case \"Viewpoint\":\n          break;\n        default:\n          console.warn(\"THREE.VRMLLoader: Unknown node:\", nodeName);\n          break;\n      }\n      if (build !== void 0 && node.DEF !== void 0 && build.hasOwnProperty(\"name\") === true) {\n        build.name = node.DEF;\n      }\n      return build;\n    }\n    function buildGroupingNode(node) {\n      const object = new Group();\n      const fields = node.fields;\n      for (let i = 0, l = fields.length; i < l; i++) {\n        const field = fields[i];\n        const fieldName = field.name;\n        const fieldValues = field.values;\n        switch (fieldName) {\n          case \"bboxCenter\":\n            break;\n          case \"bboxSize\":\n            break;\n          case \"center\":\n            break;\n          case \"children\":\n            parseFieldChildren(fieldValues, object);\n            break;\n          case \"collide\":\n            break;\n          case \"rotation\":\n            const axis = new Vector3(fieldValues[0], fieldValues[1], fieldValues[2]);\n            const angle = fieldValues[3];\n            object.quaternion.setFromAxisAngle(axis, angle);\n            break;\n          case \"scale\":\n            object.scale.set(fieldValues[0], fieldValues[1], fieldValues[2]);\n            break;\n          case \"scaleOrientation\":\n            break;\n          case \"translation\":\n            object.position.set(fieldValues[0], fieldValues[1], fieldValues[2]);\n            break;\n          case \"proxy\":\n            break;\n          default:\n            console.warn(\"THREE.VRMLLoader: Unknown field:\", fieldName);\n            break;\n        }\n      }\n      return object;\n    }\n    function buildBackgroundNode(node) {\n      const group = new Group();\n      let groundAngle, groundColor;\n      let skyAngle, skyColor;\n      const fields = node.fields;\n      for (let i = 0, l = fields.length; i < l; i++) {\n        const field = fields[i];\n        const fieldName = field.name;\n        const fieldValues = field.values;\n        switch (fieldName) {\n          case \"groundAngle\":\n            groundAngle = fieldValues;\n            break;\n          case \"groundColor\":\n            groundColor = fieldValues;\n            break;\n          case \"backUrl\":\n            break;\n          case \"bottomUrl\":\n            break;\n          case \"frontUrl\":\n            break;\n          case \"leftUrl\":\n            break;\n          case \"rightUrl\":\n            break;\n          case \"topUrl\":\n            break;\n          case \"skyAngle\":\n            skyAngle = fieldValues;\n            break;\n          case \"skyColor\":\n            skyColor = fieldValues;\n            break;\n          default:\n            console.warn(\"THREE.VRMLLoader: Unknown field:\", fieldName);\n            break;\n        }\n      }\n      const radius = 1e4;\n      if (skyColor) {\n        const skyGeometry = new SphereGeometry(radius, 32, 16);\n        const skyMaterial = new MeshBasicMaterial({ fog: false, side: BackSide, depthWrite: false, depthTest: false });\n        if (skyColor.length > 3) {\n          paintFaces(skyGeometry, radius, skyAngle, toColorArray(skyColor), true);\n          skyMaterial.vertexColors = true;\n        } else {\n          skyMaterial.color.setRGB(skyColor[0], skyColor[1], skyColor[2]);\n        }\n        const sky = new Mesh(skyGeometry, skyMaterial);\n        group.add(sky);\n      }\n      if (groundColor) {\n        if (groundColor.length > 0) {\n          const groundGeometry = new SphereGeometry(radius, 32, 16, 0, 2 * Math.PI, 0.5 * Math.PI, 1.5 * Math.PI);\n          const groundMaterial = new MeshBasicMaterial({\n            fog: false,\n            side: BackSide,\n            vertexColors: true,\n            depthWrite: false,\n            depthTest: false\n          });\n          paintFaces(groundGeometry, radius, groundAngle, toColorArray(groundColor), false);\n          const ground = new Mesh(groundGeometry, groundMaterial);\n          group.add(ground);\n        }\n      }\n      group.renderOrder = -Infinity;\n      return group;\n    }\n    function buildShapeNode(node) {\n      const fields = node.fields;\n      let material = new MeshBasicMaterial({ color: 0 });\n      let geometry;\n      for (let i = 0, l = fields.length; i < l; i++) {\n        const field = fields[i];\n        const fieldName = field.name;\n        const fieldValues = field.values;\n        switch (fieldName) {\n          case \"appearance\":\n            if (fieldValues[0] !== null) {\n              material = getNode(fieldValues[0]);\n            }\n            break;\n          case \"geometry\":\n            if (fieldValues[0] !== null) {\n              geometry = getNode(fieldValues[0]);\n            }\n            break;\n          default:\n            console.warn(\"THREE.VRMLLoader: Unknown field:\", fieldName);\n            break;\n        }\n      }\n      let object;\n      if (geometry && geometry.attributes.position) {\n        const type = geometry._type;\n        if (type === \"points\") {\n          const pointsMaterial = new PointsMaterial({ color: 16777215 });\n          if (geometry.attributes.color !== void 0) {\n            pointsMaterial.vertexColors = true;\n          } else {\n            if (material.isMeshPhongMaterial) {\n              pointsMaterial.color.copy(material.emissive);\n            }\n          }\n          object = new Points(geometry, pointsMaterial);\n        } else if (type === \"line\") {\n          const lineMaterial = new LineBasicMaterial({ color: 16777215 });\n          if (geometry.attributes.color !== void 0) {\n            lineMaterial.vertexColors = true;\n          } else {\n            if (material.isMeshPhongMaterial) {\n              lineMaterial.color.copy(material.emissive);\n            }\n          }\n          object = new LineSegments(geometry, lineMaterial);\n        } else {\n          if (geometry._solid !== void 0) {\n            material.side = geometry._solid ? FrontSide : DoubleSide;\n          }\n          if (geometry.attributes.color !== void 0) {\n            material.vertexColors = true;\n          }\n          object = new Mesh(geometry, material);\n        }\n      } else {\n        object = new Object3D();\n        object.visible = false;\n      }\n      return object;\n    }\n    function buildAppearanceNode(node) {\n      let material = new MeshPhongMaterial();\n      let transformData;\n      const fields = node.fields;\n      for (let i = 0, l = fields.length; i < l; i++) {\n        const field = fields[i];\n        const fieldName = field.name;\n        const fieldValues = field.values;\n        switch (fieldName) {\n          case \"material\":\n            if (fieldValues[0] !== null) {\n              const materialData = getNode(fieldValues[0]);\n              if (materialData.diffuseColor)\n                material.color.copy(materialData.diffuseColor);\n              if (materialData.emissiveColor)\n                material.emissive.copy(materialData.emissiveColor);\n              if (materialData.shininess)\n                material.shininess = materialData.shininess;\n              if (materialData.specularColor)\n                material.specular.copy(materialData.specularColor);\n              if (materialData.transparency)\n                material.opacity = 1 - materialData.transparency;\n              if (materialData.transparency > 0)\n                material.transparent = true;\n            } else {\n              material = new MeshBasicMaterial({ color: 0 });\n            }\n            break;\n          case \"texture\":\n            const textureNode = fieldValues[0];\n            if (textureNode !== null) {\n              if (textureNode.name === \"ImageTexture\" || textureNode.name === \"PixelTexture\") {\n                material.map = getNode(textureNode);\n              } else {\n              }\n            }\n            break;\n          case \"textureTransform\":\n            if (fieldValues[0] !== null) {\n              transformData = getNode(fieldValues[0]);\n            }\n            break;\n          default:\n            console.warn(\"THREE.VRMLLoader: Unknown field:\", fieldName);\n            break;\n        }\n      }\n      if (material.map) {\n        if (material.map.__type) {\n          switch (material.map.__type) {\n            case TEXTURE_TYPE.INTENSITY_ALPHA:\n              material.opacity = 1;\n              break;\n            case TEXTURE_TYPE.RGB:\n              material.color.set(16777215);\n              break;\n            case TEXTURE_TYPE.RGBA:\n              material.color.set(16777215);\n              material.opacity = 1;\n              break;\n            default:\n          }\n          delete material.map.__type;\n        }\n        if (transformData) {\n          material.map.center.copy(transformData.center);\n          material.map.rotation = transformData.rotation;\n          material.map.repeat.copy(transformData.scale);\n          material.map.offset.copy(transformData.translation);\n        }\n      }\n      return material;\n    }\n    function buildMaterialNode(node) {\n      const materialData = {};\n      const fields = node.fields;\n      for (let i = 0, l = fields.length; i < l; i++) {\n        const field = fields[i];\n        const fieldName = field.name;\n        const fieldValues = field.values;\n        switch (fieldName) {\n          case \"ambientIntensity\":\n            break;\n          case \"diffuseColor\":\n            materialData.diffuseColor = new Color(fieldValues[0], fieldValues[1], fieldValues[2]);\n            break;\n          case \"emissiveColor\":\n            materialData.emissiveColor = new Color(fieldValues[0], fieldValues[1], fieldValues[2]);\n            break;\n          case \"shininess\":\n            materialData.shininess = fieldValues[0];\n            break;\n          case \"specularColor\":\n            materialData.emissiveColor = new Color(fieldValues[0], fieldValues[1], fieldValues[2]);\n            break;\n          case \"transparency\":\n            materialData.transparency = fieldValues[0];\n            break;\n          default:\n            console.warn(\"THREE.VRMLLoader: Unknown field:\", fieldName);\n            break;\n        }\n      }\n      return materialData;\n    }\n    function parseHexColor(hex, textureType, color) {\n      let value;\n      switch (textureType) {\n        case TEXTURE_TYPE.INTENSITY:\n          value = parseInt(hex);\n          color.r = value;\n          color.g = value;\n          color.b = value;\n          color.a = 1;\n          break;\n        case TEXTURE_TYPE.INTENSITY_ALPHA:\n          value = parseInt(\"0x\" + hex.substring(2, 4));\n          color.r = value;\n          color.g = value;\n          color.b = value;\n          color.a = parseInt(\"0x\" + hex.substring(4, 6));\n          break;\n        case TEXTURE_TYPE.RGB:\n          color.r = parseInt(\"0x\" + hex.substring(2, 4));\n          color.g = parseInt(\"0x\" + hex.substring(4, 6));\n          color.b = parseInt(\"0x\" + hex.substring(6, 8));\n          color.a = 1;\n          break;\n        case TEXTURE_TYPE.RGBA:\n          color.r = parseInt(\"0x\" + hex.substring(2, 4));\n          color.g = parseInt(\"0x\" + hex.substring(4, 6));\n          color.b = parseInt(\"0x\" + hex.substring(6, 8));\n          color.a = parseInt(\"0x\" + hex.substring(8, 10));\n          break;\n        default:\n      }\n    }\n    function getTextureType(num_components) {\n      let type;\n      switch (num_components) {\n        case 1:\n          type = TEXTURE_TYPE.INTENSITY;\n          break;\n        case 2:\n          type = TEXTURE_TYPE.INTENSITY_ALPHA;\n          break;\n        case 3:\n          type = TEXTURE_TYPE.RGB;\n          break;\n        case 4:\n          type = TEXTURE_TYPE.RGBA;\n          break;\n        default:\n      }\n      return type;\n    }\n    function buildPixelTextureNode(node) {\n      let texture;\n      let wrapS = RepeatWrapping;\n      let wrapT = RepeatWrapping;\n      const fields = node.fields;\n      for (let i = 0, l = fields.length; i < l; i++) {\n        const field = fields[i];\n        const fieldName = field.name;\n        const fieldValues = field.values;\n        switch (fieldName) {\n          case \"image\":\n            const width = fieldValues[0];\n            const height = fieldValues[1];\n            const num_components = fieldValues[2];\n            const textureType = getTextureType(num_components);\n            const data2 = new Uint8Array(4 * width * height);\n            const color = { r: 0, g: 0, b: 0, a: 0 };\n            for (let j = 3, k = 0, jl = fieldValues.length; j < jl; j++, k++) {\n              parseHexColor(fieldValues[j], textureType, color);\n              const stride = k * 4;\n              data2[stride + 0] = color.r;\n              data2[stride + 1] = color.g;\n              data2[stride + 2] = color.b;\n              data2[stride + 3] = color.a;\n            }\n            texture = new DataTexture(data2, width, height);\n            texture.needsUpdate = true;\n            texture.__type = textureType;\n            break;\n          case \"repeatS\":\n            if (fieldValues[0] === false)\n              wrapS = ClampToEdgeWrapping;\n            break;\n          case \"repeatT\":\n            if (fieldValues[0] === false)\n              wrapT = ClampToEdgeWrapping;\n            break;\n          default:\n            console.warn(\"THREE.VRMLLoader: Unknown field:\", fieldName);\n            break;\n        }\n      }\n      if (texture) {\n        texture.wrapS = wrapS;\n        texture.wrapT = wrapT;\n      }\n      return texture;\n    }\n    function buildImageTextureNode(node) {\n      let texture;\n      let wrapS = RepeatWrapping;\n      let wrapT = RepeatWrapping;\n      const fields = node.fields;\n      for (let i = 0, l = fields.length; i < l; i++) {\n        const field = fields[i];\n        const fieldName = field.name;\n        const fieldValues = field.values;\n        switch (fieldName) {\n          case \"url\":\n            const url = fieldValues[0];\n            if (url)\n              texture = textureLoader.load(url);\n            break;\n          case \"repeatS\":\n            if (fieldValues[0] === false)\n              wrapS = ClampToEdgeWrapping;\n            break;\n          case \"repeatT\":\n            if (fieldValues[0] === false)\n              wrapT = ClampToEdgeWrapping;\n            break;\n          default:\n            console.warn(\"THREE.VRMLLoader: Unknown field:\", fieldName);\n            break;\n        }\n      }\n      if (texture) {\n        texture.wrapS = wrapS;\n        texture.wrapT = wrapT;\n      }\n      return texture;\n    }\n    function buildTextureTransformNode(node) {\n      const transformData = {\n        center: new Vector2(),\n        rotation: new Vector2(),\n        scale: new Vector2(),\n        translation: new Vector2()\n      };\n      const fields = node.fields;\n      for (let i = 0, l = fields.length; i < l; i++) {\n        const field = fields[i];\n        const fieldName = field.name;\n        const fieldValues = field.values;\n        switch (fieldName) {\n          case \"center\":\n            transformData.center.set(fieldValues[0], fieldValues[1]);\n            break;\n          case \"rotation\":\n            transformData.rotation = fieldValues[0];\n            break;\n          case \"scale\":\n            transformData.scale.set(fieldValues[0], fieldValues[1]);\n            break;\n          case \"translation\":\n            transformData.translation.set(fieldValues[0], fieldValues[1]);\n            break;\n          default:\n            console.warn(\"THREE.VRMLLoader: Unknown field:\", fieldName);\n            break;\n        }\n      }\n      return transformData;\n    }\n    function buildGeometricNode(node) {\n      return node.fields[0].values;\n    }\n    function buildWorldInfoNode(node) {\n      const worldInfo = {};\n      const fields = node.fields;\n      for (let i = 0, l = fields.length; i < l; i++) {\n        const field = fields[i];\n        const fieldName = field.name;\n        const fieldValues = field.values;\n        switch (fieldName) {\n          case \"title\":\n            worldInfo.title = fieldValues[0];\n            break;\n          case \"info\":\n            worldInfo.info = fieldValues;\n            break;\n          default:\n            console.warn(\"THREE.VRMLLoader: Unknown field:\", fieldName);\n            break;\n        }\n      }\n      return worldInfo;\n    }\n    function buildIndexedFaceSetNode(node) {\n      let color, coord, normal, texCoord;\n      let ccw = true, solid = true, creaseAngle = 0;\n      let colorIndex, coordIndex, normalIndex, texCoordIndex;\n      let colorPerVertex = true, normalPerVertex = true;\n      const fields = node.fields;\n      for (let i = 0, l = fields.length; i < l; i++) {\n        const field = fields[i];\n        const fieldName = field.name;\n        const fieldValues = field.values;\n        switch (fieldName) {\n          case \"color\":\n            const colorNode = fieldValues[0];\n            if (colorNode !== null) {\n              color = getNode(colorNode);\n            }\n            break;\n          case \"coord\":\n            const coordNode = fieldValues[0];\n            if (coordNode !== null) {\n              coord = getNode(coordNode);\n            }\n            break;\n          case \"normal\":\n            const normalNode = fieldValues[0];\n            if (normalNode !== null) {\n              normal = getNode(normalNode);\n            }\n            break;\n          case \"texCoord\":\n            const texCoordNode = fieldValues[0];\n            if (texCoordNode !== null) {\n              texCoord = getNode(texCoordNode);\n            }\n            break;\n          case \"ccw\":\n            ccw = fieldValues[0];\n            break;\n          case \"colorIndex\":\n            colorIndex = fieldValues;\n            break;\n          case \"colorPerVertex\":\n            colorPerVertex = fieldValues[0];\n            break;\n          case \"convex\":\n            break;\n          case \"coordIndex\":\n            coordIndex = fieldValues;\n            break;\n          case \"creaseAngle\":\n            creaseAngle = fieldValues[0];\n            break;\n          case \"normalIndex\":\n            normalIndex = fieldValues;\n            break;\n          case \"normalPerVertex\":\n            normalPerVertex = fieldValues[0];\n            break;\n          case \"solid\":\n            solid = fieldValues[0];\n            break;\n          case \"texCoordIndex\":\n            texCoordIndex = fieldValues;\n            break;\n          default:\n            console.warn(\"THREE.VRMLLoader: Unknown field:\", fieldName);\n            break;\n        }\n      }\n      if (coordIndex === void 0) {\n        console.warn(\"THREE.VRMLLoader: Missing coordIndex.\");\n        return new BufferGeometry();\n      }\n      const triangulatedCoordIndex = triangulateFaceIndex(coordIndex, ccw);\n      let colorAttribute;\n      let normalAttribute;\n      let uvAttribute;\n      if (color) {\n        if (colorPerVertex === true) {\n          if (colorIndex && colorIndex.length > 0) {\n            const triangulatedColorIndex = triangulateFaceIndex(colorIndex, ccw);\n            colorAttribute = computeAttributeFromIndexedData(triangulatedCoordIndex, triangulatedColorIndex, color, 3);\n          } else {\n            colorAttribute = toNonIndexedAttribute(triangulatedCoordIndex, new Float32BufferAttribute(color, 3));\n          }\n        } else {\n          if (colorIndex && colorIndex.length > 0) {\n            const flattenFaceColors = flattenData(color, colorIndex);\n            const triangulatedFaceColors = triangulateFaceData(flattenFaceColors, coordIndex);\n            colorAttribute = computeAttributeFromFaceData(triangulatedCoordIndex, triangulatedFaceColors);\n          } else {\n            const triangulatedFaceColors = triangulateFaceData(color, coordIndex);\n            colorAttribute = computeAttributeFromFaceData(triangulatedCoordIndex, triangulatedFaceColors);\n          }\n        }\n      }\n      if (normal) {\n        if (normalPerVertex === true) {\n          if (normalIndex && normalIndex.length > 0) {\n            const triangulatedNormalIndex = triangulateFaceIndex(normalIndex, ccw);\n            normalAttribute = computeAttributeFromIndexedData(\n              triangulatedCoordIndex,\n              triangulatedNormalIndex,\n              normal,\n              3\n            );\n          } else {\n            normalAttribute = toNonIndexedAttribute(triangulatedCoordIndex, new Float32BufferAttribute(normal, 3));\n          }\n        } else {\n          if (normalIndex && normalIndex.length > 0) {\n            const flattenFaceNormals = flattenData(normal, normalIndex);\n            const triangulatedFaceNormals = triangulateFaceData(flattenFaceNormals, coordIndex);\n            normalAttribute = computeAttributeFromFaceData(triangulatedCoordIndex, triangulatedFaceNormals);\n          } else {\n            const triangulatedFaceNormals = triangulateFaceData(normal, coordIndex);\n            normalAttribute = computeAttributeFromFaceData(triangulatedCoordIndex, triangulatedFaceNormals);\n          }\n        }\n      } else {\n        normalAttribute = computeNormalAttribute(triangulatedCoordIndex, coord, creaseAngle);\n      }\n      if (texCoord) {\n        if (texCoordIndex && texCoordIndex.length > 0) {\n          const triangulatedTexCoordIndex = triangulateFaceIndex(texCoordIndex, ccw);\n          uvAttribute = computeAttributeFromIndexedData(triangulatedCoordIndex, triangulatedTexCoordIndex, texCoord, 2);\n        } else {\n          uvAttribute = toNonIndexedAttribute(triangulatedCoordIndex, new Float32BufferAttribute(texCoord, 2));\n        }\n      }\n      const geometry = new BufferGeometry();\n      const positionAttribute = toNonIndexedAttribute(triangulatedCoordIndex, new Float32BufferAttribute(coord, 3));\n      geometry.setAttribute(\"position\", positionAttribute);\n      geometry.setAttribute(\"normal\", normalAttribute);\n      if (colorAttribute)\n        geometry.setAttribute(\"color\", colorAttribute);\n      if (uvAttribute)\n        geometry.setAttribute(\"uv\", uvAttribute);\n      geometry._solid = solid;\n      geometry._type = \"mesh\";\n      return geometry;\n    }\n    function buildIndexedLineSetNode(node) {\n      let color, coord;\n      let colorIndex, coordIndex;\n      let colorPerVertex = true;\n      const fields = node.fields;\n      for (let i = 0, l = fields.length; i < l; i++) {\n        const field = fields[i];\n        const fieldName = field.name;\n        const fieldValues = field.values;\n        switch (fieldName) {\n          case \"color\":\n            const colorNode = fieldValues[0];\n            if (colorNode !== null) {\n              color = getNode(colorNode);\n            }\n            break;\n          case \"coord\":\n            const coordNode = fieldValues[0];\n            if (coordNode !== null) {\n              coord = getNode(coordNode);\n            }\n            break;\n          case \"colorIndex\":\n            colorIndex = fieldValues;\n            break;\n          case \"colorPerVertex\":\n            colorPerVertex = fieldValues[0];\n            break;\n          case \"coordIndex\":\n            coordIndex = fieldValues;\n            break;\n          default:\n            console.warn(\"THREE.VRMLLoader: Unknown field:\", fieldName);\n            break;\n        }\n      }\n      let colorAttribute;\n      const expandedLineIndex = expandLineIndex(coordIndex);\n      if (color) {\n        if (colorPerVertex === true) {\n          if (colorIndex.length > 0) {\n            const expandedColorIndex = expandLineIndex(colorIndex);\n            colorAttribute = computeAttributeFromIndexedData(expandedLineIndex, expandedColorIndex, color, 3);\n          } else {\n            colorAttribute = toNonIndexedAttribute(expandedLineIndex, new Float32BufferAttribute(color, 3));\n          }\n        } else {\n          if (colorIndex.length > 0) {\n            const flattenLineColors = flattenData(color, colorIndex);\n            const expandedLineColors = expandLineData(flattenLineColors, coordIndex);\n            colorAttribute = computeAttributeFromLineData(expandedLineIndex, expandedLineColors);\n          } else {\n            const expandedLineColors = expandLineData(color, coordIndex);\n            colorAttribute = computeAttributeFromLineData(expandedLineIndex, expandedLineColors);\n          }\n        }\n      }\n      const geometry = new BufferGeometry();\n      const positionAttribute = toNonIndexedAttribute(expandedLineIndex, new Float32BufferAttribute(coord, 3));\n      geometry.setAttribute(\"position\", positionAttribute);\n      if (colorAttribute)\n        geometry.setAttribute(\"color\", colorAttribute);\n      geometry._type = \"line\";\n      return geometry;\n    }\n    function buildPointSetNode(node) {\n      let color, coord;\n      const fields = node.fields;\n      for (let i = 0, l = fields.length; i < l; i++) {\n        const field = fields[i];\n        const fieldName = field.name;\n        const fieldValues = field.values;\n        switch (fieldName) {\n          case \"color\":\n            const colorNode = fieldValues[0];\n            if (colorNode !== null) {\n              color = getNode(colorNode);\n            }\n            break;\n          case \"coord\":\n            const coordNode = fieldValues[0];\n            if (coordNode !== null) {\n              coord = getNode(coordNode);\n            }\n            break;\n          default:\n            console.warn(\"THREE.VRMLLoader: Unknown field:\", fieldName);\n            break;\n        }\n      }\n      const geometry = new BufferGeometry();\n      geometry.setAttribute(\"position\", new Float32BufferAttribute(coord, 3));\n      if (color)\n        geometry.setAttribute(\"color\", new Float32BufferAttribute(color, 3));\n      geometry._type = \"points\";\n      return geometry;\n    }\n    function buildBoxNode(node) {\n      const size = new Vector3(2, 2, 2);\n      const fields = node.fields;\n      for (let i = 0, l = fields.length; i < l; i++) {\n        const field = fields[i];\n        const fieldName = field.name;\n        const fieldValues = field.values;\n        switch (fieldName) {\n          case \"size\":\n            size.x = fieldValues[0];\n            size.y = fieldValues[1];\n            size.z = fieldValues[2];\n            break;\n          default:\n            console.warn(\"THREE.VRMLLoader: Unknown field:\", fieldName);\n            break;\n        }\n      }\n      const geometry = new BoxGeometry(size.x, size.y, size.z);\n      return geometry;\n    }\n    function buildConeNode(node) {\n      let radius = 1, height = 2, openEnded = false;\n      const fields = node.fields;\n      for (let i = 0, l = fields.length; i < l; i++) {\n        const field = fields[i];\n        const fieldName = field.name;\n        const fieldValues = field.values;\n        switch (fieldName) {\n          case \"bottom\":\n            openEnded = !fieldValues[0];\n            break;\n          case \"bottomRadius\":\n            radius = fieldValues[0];\n            break;\n          case \"height\":\n            height = fieldValues[0];\n            break;\n          case \"side\":\n            break;\n          default:\n            console.warn(\"THREE.VRMLLoader: Unknown field:\", fieldName);\n            break;\n        }\n      }\n      const geometry = new ConeGeometry(radius, height, 16, 1, openEnded);\n      return geometry;\n    }\n    function buildCylinderNode(node) {\n      let radius = 1, height = 2;\n      const fields = node.fields;\n      for (let i = 0, l = fields.length; i < l; i++) {\n        const field = fields[i];\n        const fieldName = field.name;\n        const fieldValues = field.values;\n        switch (fieldName) {\n          case \"bottom\":\n            break;\n          case \"radius\":\n            radius = fieldValues[0];\n            break;\n          case \"height\":\n            height = fieldValues[0];\n            break;\n          case \"side\":\n            break;\n          case \"top\":\n            break;\n          default:\n            console.warn(\"THREE.VRMLLoader: Unknown field:\", fieldName);\n            break;\n        }\n      }\n      const geometry = new CylinderGeometry(radius, radius, height, 16, 1);\n      return geometry;\n    }\n    function buildSphereNode(node) {\n      let radius = 1;\n      const fields = node.fields;\n      for (let i = 0, l = fields.length; i < l; i++) {\n        const field = fields[i];\n        const fieldName = field.name;\n        const fieldValues = field.values;\n        switch (fieldName) {\n          case \"radius\":\n            radius = fieldValues[0];\n            break;\n          default:\n            console.warn(\"THREE.VRMLLoader: Unknown field:\", fieldName);\n            break;\n        }\n      }\n      const geometry = new SphereGeometry(radius, 16, 16);\n      return geometry;\n    }\n    function buildElevationGridNode(node) {\n      let color;\n      let normal;\n      let texCoord;\n      let height;\n      let colorPerVertex = true;\n      let normalPerVertex = true;\n      let solid = true;\n      let ccw = true;\n      let creaseAngle = 0;\n      let xDimension = 2;\n      let zDimension = 2;\n      let xSpacing = 1;\n      let zSpacing = 1;\n      const fields = node.fields;\n      for (let i = 0, l = fields.length; i < l; i++) {\n        const field = fields[i];\n        const fieldName = field.name;\n        const fieldValues = field.values;\n        switch (fieldName) {\n          case \"color\":\n            const colorNode = fieldValues[0];\n            if (colorNode !== null) {\n              color = getNode(colorNode);\n            }\n            break;\n          case \"normal\":\n            const normalNode = fieldValues[0];\n            if (normalNode !== null) {\n              normal = getNode(normalNode);\n            }\n            break;\n          case \"texCoord\":\n            const texCoordNode = fieldValues[0];\n            if (texCoordNode !== null) {\n              texCoord = getNode(texCoordNode);\n            }\n            break;\n          case \"height\":\n            height = fieldValues;\n            break;\n          case \"ccw\":\n            ccw = fieldValues[0];\n            break;\n          case \"colorPerVertex\":\n            colorPerVertex = fieldValues[0];\n            break;\n          case \"creaseAngle\":\n            creaseAngle = fieldValues[0];\n            break;\n          case \"normalPerVertex\":\n            normalPerVertex = fieldValues[0];\n            break;\n          case \"solid\":\n            solid = fieldValues[0];\n            break;\n          case \"xDimension\":\n            xDimension = fieldValues[0];\n            break;\n          case \"xSpacing\":\n            xSpacing = fieldValues[0];\n            break;\n          case \"zDimension\":\n            zDimension = fieldValues[0];\n            break;\n          case \"zSpacing\":\n            zSpacing = fieldValues[0];\n            break;\n          default:\n            console.warn(\"THREE.VRMLLoader: Unknown field:\", fieldName);\n            break;\n        }\n      }\n      const vertices = [];\n      const normals = [];\n      const colors = [];\n      const uvs = [];\n      for (let i = 0; i < zDimension; i++) {\n        for (let j = 0; j < xDimension; j++) {\n          const index = i * xDimension + j;\n          const x = xSpacing * i;\n          const y = height[index];\n          const z = zSpacing * j;\n          vertices.push(x, y, z);\n          if (color && colorPerVertex === true) {\n            const r = color[index * 3 + 0];\n            const g = color[index * 3 + 1];\n            const b = color[index * 3 + 2];\n            colors.push(r, g, b);\n          }\n          if (normal && normalPerVertex === true) {\n            const xn = normal[index * 3 + 0];\n            const yn = normal[index * 3 + 1];\n            const zn = normal[index * 3 + 2];\n            normals.push(xn, yn, zn);\n          }\n          if (texCoord) {\n            const s = texCoord[index * 2 + 0];\n            const t = texCoord[index * 2 + 1];\n            uvs.push(s, t);\n          } else {\n            uvs.push(i / (xDimension - 1), j / (zDimension - 1));\n          }\n        }\n      }\n      const indices = [];\n      for (let i = 0; i < xDimension - 1; i++) {\n        for (let j = 0; j < zDimension - 1; j++) {\n          const a = i + j * xDimension;\n          const b = i + (j + 1) * xDimension;\n          const c = i + 1 + (j + 1) * xDimension;\n          const d = i + 1 + j * xDimension;\n          if (ccw === true) {\n            indices.push(a, c, b);\n            indices.push(c, a, d);\n          } else {\n            indices.push(a, b, c);\n            indices.push(c, d, a);\n          }\n        }\n      }\n      const positionAttribute = toNonIndexedAttribute(indices, new Float32BufferAttribute(vertices, 3));\n      const uvAttribute = toNonIndexedAttribute(indices, new Float32BufferAttribute(uvs, 2));\n      let colorAttribute;\n      let normalAttribute;\n      if (color) {\n        if (colorPerVertex === false) {\n          for (let i = 0; i < xDimension - 1; i++) {\n            for (let j = 0; j < zDimension - 1; j++) {\n              const index = i + j * (xDimension - 1);\n              const r = color[index * 3 + 0];\n              const g = color[index * 3 + 1];\n              const b = color[index * 3 + 2];\n              colors.push(r, g, b);\n              colors.push(r, g, b);\n              colors.push(r, g, b);\n              colors.push(r, g, b);\n              colors.push(r, g, b);\n              colors.push(r, g, b);\n            }\n          }\n          colorAttribute = new Float32BufferAttribute(colors, 3);\n        } else {\n          colorAttribute = toNonIndexedAttribute(indices, new Float32BufferAttribute(colors, 3));\n        }\n      }\n      if (normal) {\n        if (normalPerVertex === false) {\n          for (let i = 0; i < xDimension - 1; i++) {\n            for (let j = 0; j < zDimension - 1; j++) {\n              const index = i + j * (xDimension - 1);\n              const xn = normal[index * 3 + 0];\n              const yn = normal[index * 3 + 1];\n              const zn = normal[index * 3 + 2];\n              normals.push(xn, yn, zn);\n              normals.push(xn, yn, zn);\n              normals.push(xn, yn, zn);\n              normals.push(xn, yn, zn);\n              normals.push(xn, yn, zn);\n              normals.push(xn, yn, zn);\n            }\n          }\n          normalAttribute = new Float32BufferAttribute(normals, 3);\n        } else {\n          normalAttribute = toNonIndexedAttribute(indices, new Float32BufferAttribute(normals, 3));\n        }\n      } else {\n        normalAttribute = computeNormalAttribute(indices, vertices, creaseAngle);\n      }\n      const geometry = new BufferGeometry();\n      geometry.setAttribute(\"position\", positionAttribute);\n      geometry.setAttribute(\"normal\", normalAttribute);\n      geometry.setAttribute(\"uv\", uvAttribute);\n      if (colorAttribute)\n        geometry.setAttribute(\"color\", colorAttribute);\n      geometry._solid = solid;\n      geometry._type = \"mesh\";\n      return geometry;\n    }\n    function buildExtrusionNode(node) {\n      let crossSection = [1, 1, 1, -1, -1, -1, -1, 1, 1, 1];\n      let spine = [0, 0, 0, 0, 1, 0];\n      let scale;\n      let orientation;\n      let beginCap = true;\n      let ccw = true;\n      let creaseAngle = 0;\n      let endCap = true;\n      let solid = true;\n      const fields = node.fields;\n      for (let i = 0, l = fields.length; i < l; i++) {\n        const field = fields[i];\n        const fieldName = field.name;\n        const fieldValues = field.values;\n        switch (fieldName) {\n          case \"beginCap\":\n            beginCap = fieldValues[0];\n            break;\n          case \"ccw\":\n            ccw = fieldValues[0];\n            break;\n          case \"convex\":\n            break;\n          case \"creaseAngle\":\n            creaseAngle = fieldValues[0];\n            break;\n          case \"crossSection\":\n            crossSection = fieldValues;\n            break;\n          case \"endCap\":\n            endCap = fieldValues[0];\n            break;\n          case \"orientation\":\n            orientation = fieldValues;\n            break;\n          case \"scale\":\n            scale = fieldValues;\n            break;\n          case \"solid\":\n            solid = fieldValues[0];\n            break;\n          case \"spine\":\n            spine = fieldValues;\n            break;\n          default:\n            console.warn(\"THREE.VRMLLoader: Unknown field:\", fieldName);\n            break;\n        }\n      }\n      const crossSectionClosed = crossSection[0] === crossSection[crossSection.length - 2] && crossSection[1] === crossSection[crossSection.length - 1];\n      const vertices = [];\n      const spineVector = new Vector3();\n      const scaling = new Vector3();\n      const axis = new Vector3();\n      const vertex = new Vector3();\n      const quaternion = new Quaternion();\n      for (let i = 0, j = 0, o = 0, il = spine.length; i < il; i += 3, j += 2, o += 4) {\n        spineVector.fromArray(spine, i);\n        scaling.x = scale ? scale[j + 0] : 1;\n        scaling.y = 1;\n        scaling.z = scale ? scale[j + 1] : 1;\n        axis.x = orientation ? orientation[o + 0] : 0;\n        axis.y = orientation ? orientation[o + 1] : 0;\n        axis.z = orientation ? orientation[o + 2] : 1;\n        const angle = orientation ? orientation[o + 3] : 0;\n        for (let k = 0, kl = crossSection.length; k < kl; k += 2) {\n          vertex.x = crossSection[k + 0];\n          vertex.y = 0;\n          vertex.z = crossSection[k + 1];\n          vertex.multiply(scaling);\n          quaternion.setFromAxisAngle(axis, angle);\n          vertex.applyQuaternion(quaternion);\n          vertex.add(spineVector);\n          vertices.push(vertex.x, vertex.y, vertex.z);\n        }\n      }\n      const indices = [];\n      const spineCount = spine.length / 3;\n      const crossSectionCount = crossSection.length / 2;\n      for (let i = 0; i < spineCount - 1; i++) {\n        for (let j = 0; j < crossSectionCount - 1; j++) {\n          const a = j + i * crossSectionCount;\n          let b = j + 1 + i * crossSectionCount;\n          const c = j + (i + 1) * crossSectionCount;\n          let d = j + 1 + (i + 1) * crossSectionCount;\n          if (j === crossSectionCount - 2 && crossSectionClosed === true) {\n            b = i * crossSectionCount;\n            d = (i + 1) * crossSectionCount;\n          }\n          if (ccw === true) {\n            indices.push(a, b, c);\n            indices.push(c, b, d);\n          } else {\n            indices.push(a, c, b);\n            indices.push(c, d, b);\n          }\n        }\n      }\n      if (beginCap === true || endCap === true) {\n        const contour = [];\n        for (let i = 0, l = crossSection.length; i < l; i += 2) {\n          contour.push(new Vector2(crossSection[i], crossSection[i + 1]));\n        }\n        const faces = ShapeUtils.triangulateShape(contour, []);\n        const capIndices = [];\n        for (let i = 0, l = faces.length; i < l; i++) {\n          const face = faces[i];\n          capIndices.push(face[0], face[1], face[2]);\n        }\n        if (beginCap === true) {\n          for (let i = 0, l = capIndices.length; i < l; i += 3) {\n            if (ccw === true) {\n              indices.push(capIndices[i + 0], capIndices[i + 1], capIndices[i + 2]);\n            } else {\n              indices.push(capIndices[i + 0], capIndices[i + 2], capIndices[i + 1]);\n            }\n          }\n        }\n        if (endCap === true) {\n          const indexOffset = crossSectionCount * (spineCount - 1);\n          for (let i = 0, l = capIndices.length; i < l; i += 3) {\n            if (ccw === true) {\n              indices.push(\n                indexOffset + capIndices[i + 0],\n                indexOffset + capIndices[i + 2],\n                indexOffset + capIndices[i + 1]\n              );\n            } else {\n              indices.push(\n                indexOffset + capIndices[i + 0],\n                indexOffset + capIndices[i + 1],\n                indexOffset + capIndices[i + 2]\n              );\n            }\n          }\n        }\n      }\n      const positionAttribute = toNonIndexedAttribute(indices, new Float32BufferAttribute(vertices, 3));\n      const normalAttribute = computeNormalAttribute(indices, vertices, creaseAngle);\n      const geometry = new BufferGeometry();\n      geometry.setAttribute(\"position\", positionAttribute);\n      geometry.setAttribute(\"normal\", normalAttribute);\n      geometry._solid = solid;\n      geometry._type = \"mesh\";\n      return geometry;\n    }\n    function resolveUSE(identifier) {\n      const node = nodeMap[identifier];\n      const build = getNode(node);\n      return build.isObject3D || build.isMaterial ? build.clone() : build;\n    }\n    function parseFieldChildren(children, owner) {\n      for (let i = 0, l = children.length; i < l; i++) {\n        const object = getNode(children[i]);\n        if (object instanceof Object3D)\n          owner.add(object);\n      }\n    }\n    function triangulateFaceIndex(index, ccw) {\n      const indices = [];\n      let start = 0;\n      for (let i = 0, l = index.length; i < l; i++) {\n        const i1 = index[start];\n        const i2 = index[i + (ccw ? 1 : 2)];\n        const i3 = index[i + (ccw ? 2 : 1)];\n        indices.push(i1, i2, i3);\n        if (index[i + 3] === -1 || i + 3 >= l) {\n          i += 3;\n          start = i + 1;\n        }\n      }\n      return indices;\n    }\n    function triangulateFaceData(data2, index) {\n      const triangulatedData = [];\n      let start = 0;\n      for (let i = 0, l = index.length; i < l; i++) {\n        const stride = start * 3;\n        const x = data2[stride];\n        const y = data2[stride + 1];\n        const z = data2[stride + 2];\n        triangulatedData.push(x, y, z);\n        if (index[i + 3] === -1 || i + 3 >= l) {\n          i += 3;\n          start++;\n        }\n      }\n      return triangulatedData;\n    }\n    function flattenData(data2, index) {\n      const flattenData2 = [];\n      for (let i = 0, l = index.length; i < l; i++) {\n        const i1 = index[i];\n        const stride = i1 * 3;\n        const x = data2[stride];\n        const y = data2[stride + 1];\n        const z = data2[stride + 2];\n        flattenData2.push(x, y, z);\n      }\n      return flattenData2;\n    }\n    function expandLineIndex(index) {\n      const indices = [];\n      for (let i = 0, l = index.length; i < l; i++) {\n        const i1 = index[i];\n        const i2 = index[i + 1];\n        indices.push(i1, i2);\n        if (index[i + 2] === -1 || i + 2 >= l) {\n          i += 2;\n        }\n      }\n      return indices;\n    }\n    function expandLineData(data2, index) {\n      const triangulatedData = [];\n      let start = 0;\n      for (let i = 0, l = index.length; i < l; i++) {\n        const stride = start * 3;\n        const x = data2[stride];\n        const y = data2[stride + 1];\n        const z = data2[stride + 2];\n        triangulatedData.push(x, y, z);\n        if (index[i + 2] === -1 || i + 2 >= l) {\n          i += 2;\n          start++;\n        }\n      }\n      return triangulatedData;\n    }\n    const vA = new Vector3();\n    const vB = new Vector3();\n    const vC = new Vector3();\n    const uvA = new Vector2();\n    const uvB = new Vector2();\n    const uvC = new Vector2();\n    function computeAttributeFromIndexedData(coordIndex, index, data2, itemSize) {\n      const array = [];\n      for (let i = 0, l = coordIndex.length; i < l; i += 3) {\n        const a = index[i];\n        const b = index[i + 1];\n        const c = index[i + 2];\n        if (itemSize === 2) {\n          uvA.fromArray(data2, a * itemSize);\n          uvB.fromArray(data2, b * itemSize);\n          uvC.fromArray(data2, c * itemSize);\n          array.push(uvA.x, uvA.y);\n          array.push(uvB.x, uvB.y);\n          array.push(uvC.x, uvC.y);\n        } else {\n          vA.fromArray(data2, a * itemSize);\n          vB.fromArray(data2, b * itemSize);\n          vC.fromArray(data2, c * itemSize);\n          array.push(vA.x, vA.y, vA.z);\n          array.push(vB.x, vB.y, vB.z);\n          array.push(vC.x, vC.y, vC.z);\n        }\n      }\n      return new Float32BufferAttribute(array, itemSize);\n    }\n    function computeAttributeFromFaceData(index, faceData) {\n      const array = [];\n      for (let i = 0, j = 0, l = index.length; i < l; i += 3, j++) {\n        vA.fromArray(faceData, j * 3);\n        array.push(vA.x, vA.y, vA.z);\n        array.push(vA.x, vA.y, vA.z);\n        array.push(vA.x, vA.y, vA.z);\n      }\n      return new Float32BufferAttribute(array, 3);\n    }\n    function computeAttributeFromLineData(index, lineData) {\n      const array = [];\n      for (let i = 0, j = 0, l = index.length; i < l; i += 2, j++) {\n        vA.fromArray(lineData, j * 3);\n        array.push(vA.x, vA.y, vA.z);\n        array.push(vA.x, vA.y, vA.z);\n      }\n      return new Float32BufferAttribute(array, 3);\n    }\n    function toNonIndexedAttribute(indices, attribute) {\n      const array = attribute.array;\n      const itemSize = attribute.itemSize;\n      const array2 = new array.constructor(indices.length * itemSize);\n      let index = 0, index2 = 0;\n      for (let i = 0, l = indices.length; i < l; i++) {\n        index = indices[i] * itemSize;\n        for (let j = 0; j < itemSize; j++) {\n          array2[index2++] = array[index++];\n        }\n      }\n      return new Float32BufferAttribute(array2, itemSize);\n    }\n    const ab = new Vector3();\n    const cb = new Vector3();\n    function computeNormalAttribute(index, coord, creaseAngle) {\n      const faces = [];\n      const vertexNormals = {};\n      for (let i = 0, l = index.length; i < l; i += 3) {\n        const a = index[i];\n        const b = index[i + 1];\n        const c = index[i + 2];\n        const face = new Face(a, b, c);\n        vA.fromArray(coord, a * 3);\n        vB.fromArray(coord, b * 3);\n        vC.fromArray(coord, c * 3);\n        cb.subVectors(vC, vB);\n        ab.subVectors(vA, vB);\n        cb.cross(ab);\n        cb.normalize();\n        face.normal.copy(cb);\n        if (vertexNormals[a] === void 0)\n          vertexNormals[a] = [];\n        if (vertexNormals[b] === void 0)\n          vertexNormals[b] = [];\n        if (vertexNormals[c] === void 0)\n          vertexNormals[c] = [];\n        vertexNormals[a].push(face.normal);\n        vertexNormals[b].push(face.normal);\n        vertexNormals[c].push(face.normal);\n        faces.push(face);\n      }\n      const normals = [];\n      for (let i = 0, l = faces.length; i < l; i++) {\n        const face = faces[i];\n        const nA = weightedNormal(vertexNormals[face.a], face.normal, creaseAngle);\n        const nB = weightedNormal(vertexNormals[face.b], face.normal, creaseAngle);\n        const nC = weightedNormal(vertexNormals[face.c], face.normal, creaseAngle);\n        vA.fromArray(coord, face.a * 3);\n        vB.fromArray(coord, face.b * 3);\n        vC.fromArray(coord, face.c * 3);\n        normals.push(nA.x, nA.y, nA.z);\n        normals.push(nB.x, nB.y, nB.z);\n        normals.push(nC.x, nC.y, nC.z);\n      }\n      return new Float32BufferAttribute(normals, 3);\n    }\n    function weightedNormal(normals, vector, creaseAngle) {\n      const normal = new Vector3();\n      if (creaseAngle === 0) {\n        normal.copy(vector);\n      } else {\n        for (let i = 0, l = normals.length; i < l; i++) {\n          if (normals[i].angleTo(vector) < creaseAngle) {\n            normal.add(normals[i]);\n          }\n        }\n      }\n      return normal.normalize();\n    }\n    function toColorArray(colors) {\n      const array = [];\n      for (let i = 0, l = colors.length; i < l; i += 3) {\n        array.push(new Color(colors[i], colors[i + 1], colors[i + 2]));\n      }\n      return array;\n    }\n    function paintFaces(geometry, radius, angles, colors, topDown) {\n      const thresholds = [];\n      const startAngle = topDown === true ? 0 : Math.PI;\n      for (let i = 0, l = colors.length; i < l; i++) {\n        let angle = i === 0 ? 0 : angles[i - 1];\n        angle = topDown === true ? angle : startAngle - angle;\n        const point = new Vector3();\n        point.setFromSphericalCoords(radius, angle, 0);\n        thresholds.push(point);\n      }\n      const indices = geometry.index;\n      const positionAttribute = geometry.attributes.position;\n      const colorAttribute = new BufferAttribute(new Float32Array(geometry.attributes.position.count * 3), 3);\n      const position = new Vector3();\n      const color = new Color();\n      for (let i = 0; i < indices.count; i++) {\n        const index = indices.getX(i);\n        position.fromBufferAttribute(positionAttribute, index);\n        let thresholdIndexA, thresholdIndexB;\n        let t = 1;\n        for (let j = 1; j < thresholds.length; j++) {\n          thresholdIndexA = j - 1;\n          thresholdIndexB = j;\n          const thresholdA = thresholds[thresholdIndexA];\n          const thresholdB = thresholds[thresholdIndexB];\n          if (topDown === true) {\n            if (position.y <= thresholdA.y && position.y > thresholdB.y) {\n              t = Math.abs(thresholdA.y - position.y) / Math.abs(thresholdA.y - thresholdB.y);\n              break;\n            }\n          } else {\n            if (position.y >= thresholdA.y && position.y < thresholdB.y) {\n              t = Math.abs(thresholdA.y - position.y) / Math.abs(thresholdA.y - thresholdB.y);\n              break;\n            }\n          }\n        }\n        const colorA = colors[thresholdIndexA];\n        const colorB = colors[thresholdIndexB];\n        color.copy(colorA).lerp(colorB, t);\n        colorAttribute.setXYZ(index, color.r, color.g, color.b);\n      }\n      geometry.setAttribute(\"color\", colorAttribute);\n    }\n    const textureLoader = new TextureLoader(this.manager);\n    textureLoader.setPath(this.resourcePath || path).setCrossOrigin(this.crossOrigin);\n    if (data.indexOf(\"#VRML V2.0\") === -1) {\n      throw Error(\"THREE.VRMLLexer: Version of VRML asset not supported.\");\n    }\n    const tree = generateVRMLTree(data);\n    const scene = parseTree(tree);\n    return scene;\n  }\n}\nclass VRMLLexer {\n  constructor(tokens) {\n    this.lexer = new Lexer(tokens);\n  }\n  lex(inputText) {\n    const lexingResult = this.lexer.tokenize(inputText);\n    if (lexingResult.errors.length > 0) {\n      console.error(lexingResult.errors);\n      throw Error(\"THREE.VRMLLexer: Lexing errors detected.\");\n    }\n    return lexingResult;\n  }\n}\nclass VRMLParser extends CstParser {\n  constructor(tokenVocabulary) {\n    super(tokenVocabulary);\n    const $ = this;\n    const Version = tokenVocabulary[\"Version\"];\n    const LCurly = tokenVocabulary[\"LCurly\"];\n    const RCurly = tokenVocabulary[\"RCurly\"];\n    const LSquare = tokenVocabulary[\"LSquare\"];\n    const RSquare = tokenVocabulary[\"RSquare\"];\n    const Identifier = tokenVocabulary[\"Identifier\"];\n    const RouteIdentifier = tokenVocabulary[\"RouteIdentifier\"];\n    const StringLiteral = tokenVocabulary[\"StringLiteral\"];\n    const HexLiteral = tokenVocabulary[\"HexLiteral\"];\n    const NumberLiteral = tokenVocabulary[\"NumberLiteral\"];\n    const TrueLiteral = tokenVocabulary[\"TrueLiteral\"];\n    const FalseLiteral = tokenVocabulary[\"FalseLiteral\"];\n    const NullLiteral = tokenVocabulary[\"NullLiteral\"];\n    const DEF = tokenVocabulary[\"DEF\"];\n    const USE = tokenVocabulary[\"USE\"];\n    const ROUTE = tokenVocabulary[\"ROUTE\"];\n    const TO = tokenVocabulary[\"TO\"];\n    const NodeName = tokenVocabulary[\"NodeName\"];\n    $.RULE(\"vrml\", function() {\n      $.SUBRULE($.version);\n      $.AT_LEAST_ONE(function() {\n        $.SUBRULE($.node);\n      });\n      $.MANY(function() {\n        $.SUBRULE($.route);\n      });\n    });\n    $.RULE(\"version\", function() {\n      $.CONSUME(Version);\n    });\n    $.RULE(\"node\", function() {\n      $.OPTION(function() {\n        $.SUBRULE($.def);\n      });\n      $.CONSUME(NodeName);\n      $.CONSUME(LCurly);\n      $.MANY(function() {\n        $.SUBRULE($.field);\n      });\n      $.CONSUME(RCurly);\n    });\n    $.RULE(\"field\", function() {\n      $.CONSUME(Identifier);\n      $.OR2([\n        {\n          ALT: function() {\n            $.SUBRULE($.singleFieldValue);\n          }\n        },\n        {\n          ALT: function() {\n            $.SUBRULE($.multiFieldValue);\n          }\n        }\n      ]);\n    });\n    $.RULE(\"def\", function() {\n      $.CONSUME(DEF);\n      $.OR([\n        {\n          ALT: function() {\n            $.CONSUME(Identifier);\n          }\n        },\n        {\n          ALT: function() {\n            $.CONSUME(NodeName);\n          }\n        }\n      ]);\n    });\n    $.RULE(\"use\", function() {\n      $.CONSUME(USE);\n      $.OR([\n        {\n          ALT: function() {\n            $.CONSUME(Identifier);\n          }\n        },\n        {\n          ALT: function() {\n            $.CONSUME(NodeName);\n          }\n        }\n      ]);\n    });\n    $.RULE(\"singleFieldValue\", function() {\n      $.AT_LEAST_ONE(function() {\n        $.OR([\n          {\n            ALT: function() {\n              $.SUBRULE($.node);\n            }\n          },\n          {\n            ALT: function() {\n              $.SUBRULE($.use);\n            }\n          },\n          {\n            ALT: function() {\n              $.CONSUME(StringLiteral);\n            }\n          },\n          {\n            ALT: function() {\n              $.CONSUME(HexLiteral);\n            }\n          },\n          {\n            ALT: function() {\n              $.CONSUME(NumberLiteral);\n            }\n          },\n          {\n            ALT: function() {\n              $.CONSUME(TrueLiteral);\n            }\n          },\n          {\n            ALT: function() {\n              $.CONSUME(FalseLiteral);\n            }\n          },\n          {\n            ALT: function() {\n              $.CONSUME(NullLiteral);\n            }\n          }\n        ]);\n      });\n    });\n    $.RULE(\"multiFieldValue\", function() {\n      $.CONSUME(LSquare);\n      $.MANY(function() {\n        $.OR([\n          {\n            ALT: function() {\n              $.SUBRULE($.node);\n            }\n          },\n          {\n            ALT: function() {\n              $.SUBRULE($.use);\n            }\n          },\n          {\n            ALT: function() {\n              $.CONSUME(StringLiteral);\n            }\n          },\n          {\n            ALT: function() {\n              $.CONSUME(HexLiteral);\n            }\n          },\n          {\n            ALT: function() {\n              $.CONSUME(NumberLiteral);\n            }\n          },\n          {\n            ALT: function() {\n              $.CONSUME(NullLiteral);\n            }\n          }\n        ]);\n      });\n      $.CONSUME(RSquare);\n    });\n    $.RULE(\"route\", function() {\n      $.CONSUME(ROUTE);\n      $.CONSUME(RouteIdentifier);\n      $.CONSUME(TO);\n      $.CONSUME2(RouteIdentifier);\n    });\n    this.performSelfAnalysis();\n  }\n}\nclass Face {\n  constructor(a, b, c) {\n    this.a = a;\n    this.b = b;\n    this.c = c;\n    this.normal = new Vector3();\n  }\n}\nconst TEXTURE_TYPE = {\n  INTENSITY: 1,\n  INTENSITY_ALPHA: 2,\n  RGB: 3,\n  RGBA: 4\n};\nexport {\n  VRMLLoader\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}