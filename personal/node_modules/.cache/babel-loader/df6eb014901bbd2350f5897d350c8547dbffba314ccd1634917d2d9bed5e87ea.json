{"ast":null,"code":"const WaterRefractionShader = {\n  uniforms: {\n    color: {\n      value: null\n    },\n    time: {\n      value: 0\n    },\n    tDiffuse: {\n      value: null\n    },\n    tDudv: {\n      value: null\n    },\n    textureMatrix: {\n      value: null\n    }\n  },\n  vertexShader: [\"uniform mat4 textureMatrix;\", \"varying vec2 vUv;\", \"varying vec4 vUvRefraction;\", \"void main() {\", \"\tvUv = uv;\", \"\tvUvRefraction = textureMatrix * vec4( position, 1.0 );\", \"\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\", \"}\"].join(\"\\n\"),\n  fragmentShader: [\"uniform vec3 color;\", \"uniform float time;\", \"uniform sampler2D tDiffuse;\", \"uniform sampler2D tDudv;\", \"varying vec2 vUv;\", \"varying vec4 vUvRefraction;\", \"float blendOverlay( float base, float blend ) {\", \"\treturn( base < 0.5 ? ( 2.0 * base * blend ) : ( 1.0 - 2.0 * ( 1.0 - base ) * ( 1.0 - blend ) ) );\", \"}\", \"vec3 blendOverlay( vec3 base, vec3 blend ) {\", \"\treturn vec3( blendOverlay( base.r, blend.r ), blendOverlay( base.g, blend.g ),blendOverlay( base.b, blend.b ) );\", \"}\", \"void main() {\", \" float waveStrength = 0.1;\", \" float waveSpeed = 0.03;\",\n  // simple distortion (ripple) via dudv map (see https://www.youtube.com/watch?v=6B7IF6GOu7s)\n  \"\tvec2 distortedUv = texture2D( tDudv, vec2( vUv.x + time * waveSpeed, vUv.y ) ).rg * waveStrength;\", \"\tdistortedUv = vUv.xy + vec2( distortedUv.x, distortedUv.y + time * waveSpeed );\", \"\tvec2 distortion = ( texture2D( tDudv, distortedUv ).rg * 2.0 - 1.0 ) * waveStrength;\",\n  // new uv coords\n  \" vec4 uv = vec4( vUvRefraction );\", \" uv.xy += distortion;\", \"\tvec4 base = texture2DProj( tDiffuse, uv );\", \"\tgl_FragColor = vec4( blendOverlay( base.rgb, color ), 1.0 );\", \"}\"].join(\"\\n\")\n};\nexport { WaterRefractionShader };","map":{"version":3,"names":["WaterRefractionShader","uniforms","color","value","time","tDiffuse","tDudv","textureMatrix","vertexShader","join","fragmentShader"],"sources":["/home/krug/Coding/JavaScript/Websites/Personal/personal/node_modules/.pnpm/three-stdlib@2.23.7_three@0.151.3/node_modules/three-stdlib/shaders/WaterRefractionShader.js"],"sourcesContent":["const WaterRefractionShader = {\n  uniforms: {\n    color: {\n      value: null\n    },\n    time: {\n      value: 0\n    },\n    tDiffuse: {\n      value: null\n    },\n    tDudv: {\n      value: null\n    },\n    textureMatrix: {\n      value: null\n    }\n  },\n  vertexShader: [\n    \"uniform mat4 textureMatrix;\",\n    \"varying vec2 vUv;\",\n    \"varying vec4 vUvRefraction;\",\n    \"void main() {\",\n    \"\tvUv = uv;\",\n    \"\tvUvRefraction = textureMatrix * vec4( position, 1.0 );\",\n    \"\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\",\n    \"}\"\n  ].join(\"\\n\"),\n  fragmentShader: [\n    \"uniform vec3 color;\",\n    \"uniform float time;\",\n    \"uniform sampler2D tDiffuse;\",\n    \"uniform sampler2D tDudv;\",\n    \"varying vec2 vUv;\",\n    \"varying vec4 vUvRefraction;\",\n    \"float blendOverlay( float base, float blend ) {\",\n    \"\treturn( base < 0.5 ? ( 2.0 * base * blend ) : ( 1.0 - 2.0 * ( 1.0 - base ) * ( 1.0 - blend ) ) );\",\n    \"}\",\n    \"vec3 blendOverlay( vec3 base, vec3 blend ) {\",\n    \"\treturn vec3( blendOverlay( base.r, blend.r ), blendOverlay( base.g, blend.g ),blendOverlay( base.b, blend.b ) );\",\n    \"}\",\n    \"void main() {\",\n    \" float waveStrength = 0.1;\",\n    \" float waveSpeed = 0.03;\",\n    // simple distortion (ripple) via dudv map (see https://www.youtube.com/watch?v=6B7IF6GOu7s)\n    \"\tvec2 distortedUv = texture2D( tDudv, vec2( vUv.x + time * waveSpeed, vUv.y ) ).rg * waveStrength;\",\n    \"\tdistortedUv = vUv.xy + vec2( distortedUv.x, distortedUv.y + time * waveSpeed );\",\n    \"\tvec2 distortion = ( texture2D( tDudv, distortedUv ).rg * 2.0 - 1.0 ) * waveStrength;\",\n    // new uv coords\n    \" vec4 uv = vec4( vUvRefraction );\",\n    \" uv.xy += distortion;\",\n    \"\tvec4 base = texture2DProj( tDiffuse, uv );\",\n    \"\tgl_FragColor = vec4( blendOverlay( base.rgb, color ), 1.0 );\",\n    \"}\"\n  ].join(\"\\n\")\n};\nexport {\n  WaterRefractionShader\n};\n"],"mappings":"AAAA,MAAMA,qBAAqB,GAAG;EAC5BC,QAAQ,EAAE;IACRC,KAAK,EAAE;MACLC,KAAK,EAAE;IACT,CAAC;IACDC,IAAI,EAAE;MACJD,KAAK,EAAE;IACT,CAAC;IACDE,QAAQ,EAAE;MACRF,KAAK,EAAE;IACT,CAAC;IACDG,KAAK,EAAE;MACLH,KAAK,EAAE;IACT,CAAC;IACDI,aAAa,EAAE;MACbJ,KAAK,EAAE;IACT;EACF,CAAC;EACDK,YAAY,EAAE,CACZ,6BAA6B,EAC7B,mBAAmB,EACnB,6BAA6B,EAC7B,eAAe,EACf,YAAY,EACZ,yDAAyD,EACzD,4EAA4E,EAC5E,GAAG,CACJ,CAACC,IAAI,CAAC,IAAI,CAAC;EACZC,cAAc,EAAE,CACd,qBAAqB,EACrB,qBAAqB,EACrB,6BAA6B,EAC7B,0BAA0B,EAC1B,mBAAmB,EACnB,6BAA6B,EAC7B,iDAAiD,EACjD,oGAAoG,EACpG,GAAG,EACH,8CAA8C,EAC9C,mHAAmH,EACnH,GAAG,EACH,eAAe,EACf,4BAA4B,EAC5B,0BAA0B;EAC1B;EACA,oGAAoG,EACpG,kFAAkF,EAClF,uFAAuF;EACvF;EACA,mCAAmC,EACnC,uBAAuB,EACvB,6CAA6C,EAC7C,+DAA+D,EAC/D,GAAG,CACJ,CAACD,IAAI,CAAC,IAAI;AACb,CAAC;AACD,SACET,qBAAqB"},"metadata":{},"sourceType":"module","externalDependencies":[]}