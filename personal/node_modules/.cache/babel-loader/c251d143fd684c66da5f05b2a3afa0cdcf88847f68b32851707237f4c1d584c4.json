{"ast":null,"code":"import _classCallCheck from \"/home/krug/Coding/JavaScript/Websites/Personal/personal/node_modules/.pnpm/@babel+runtime@7.22.3/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/home/krug/Coding/JavaScript/Websites/Personal/personal/node_modules/.pnpm/@babel+runtime@7.22.3/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nvar __defProp = Object.defineProperty;\nvar __defNormalProp = function __defNormalProp(obj, key, value) {\n  return key in obj ? __defProp(obj, key, {\n    enumerable: true,\n    configurable: true,\n    writable: true,\n    value: value\n  }) : obj[key] = value;\n};\nvar __publicField = function __publicField(obj, key, value) {\n  __defNormalProp(obj, typeof key !== \"symbol\" ? key + \"\" : key, value);\n  return value;\n};\nimport { BufferGeometry, Mesh, Points } from \"three\";\nvar _DRACOExporter = /*#__PURE__*/function () {\n  function _DRACOExporter() {\n    _classCallCheck(this, _DRACOExporter);\n  }\n  _createClass(_DRACOExporter, [{\n    key: \"parse\",\n    value: function parse(object) {\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {\n        decodeSpeed: 5,\n        encodeSpeed: 5,\n        encoderMethod: _DRACOExporter.MESH_EDGEBREAKER_ENCODING,\n        quantization: [16, 8, 8, 8, 8],\n        exportUvs: true,\n        exportNormals: true,\n        exportColor: false\n      };\n      if (object instanceof BufferGeometry && object.isBufferGeometry) {\n        throw new Error(\"DRACOExporter: The first parameter of parse() is now an instance of Mesh or Points.\");\n      }\n      if (DracoEncoderModule === void 0) {\n        throw new Error(\"THREE.DRACOExporter: required the draco_encoder to work.\");\n      }\n      var geometry = object.geometry;\n      var dracoEncoder = DracoEncoderModule();\n      var encoder = new dracoEncoder.Encoder();\n      var builder;\n      var dracoObject;\n      if (!geometry.isBufferGeometry) {\n        throw new Error(\"THREE.DRACOExporter.parse(geometry, options): geometry is not a THREE.BufferGeometry instance.\");\n      }\n      if (object instanceof Mesh && object.isMesh) {\n        builder = new dracoEncoder.MeshBuilder();\n        dracoObject = new dracoEncoder.Mesh();\n        var vertices = geometry.getAttribute(\"position\");\n        builder.AddFloatAttributeToMesh(dracoObject, dracoEncoder.POSITION, vertices.count, vertices.itemSize, vertices.array);\n        var faces = geometry.getIndex();\n        if (faces !== null) {\n          builder.AddFacesToMesh(dracoObject, faces.count / 3, faces.array);\n        } else {\n          var faces2 = new (vertices.count > 65535 ? Uint32Array : Uint16Array)(vertices.count);\n          for (var i = 0; i < faces2.length; i++) {\n            faces2[i] = i;\n          }\n          builder.AddFacesToMesh(dracoObject, vertices.count, faces2);\n        }\n        if (options.exportNormals) {\n          var normals = geometry.getAttribute(\"normal\");\n          if (normals !== void 0) {\n            builder.AddFloatAttributeToMesh(dracoObject, dracoEncoder.NORMAL, normals.count, normals.itemSize, normals.array);\n          }\n        }\n        if (options.exportUvs) {\n          var uvs = geometry.getAttribute(\"uv\");\n          if (uvs !== void 0) {\n            builder.AddFloatAttributeToMesh(dracoObject, dracoEncoder.TEX_COORD, uvs.count, uvs.itemSize, uvs.array);\n          }\n        }\n        if (options.exportColor) {\n          var colors = geometry.getAttribute(\"color\");\n          if (colors !== void 0) {\n            builder.AddFloatAttributeToMesh(dracoObject, dracoEncoder.COLOR, colors.count, colors.itemSize, colors.array);\n          }\n        }\n      } else if (object instanceof Points && object.isPoints) {\n        builder = new dracoEncoder.PointCloudBuilder();\n        dracoObject = new dracoEncoder.PointCloud();\n        var _vertices = geometry.getAttribute(\"position\");\n        builder.AddFloatAttribute(dracoObject, dracoEncoder.POSITION, _vertices.count, _vertices.itemSize, _vertices.array);\n        if (options.exportColor) {\n          var _colors = geometry.getAttribute(\"color\");\n          if (_colors !== void 0) {\n            builder.AddFloatAttribute(dracoObject, dracoEncoder.COLOR, _colors.count, _colors.itemSize, _colors.array);\n          }\n        }\n      } else {\n        throw new Error(\"DRACOExporter: Unsupported object type.\");\n      }\n      var encodedData = new dracoEncoder.DracoInt8Array();\n      var encodeSpeed = options.encodeSpeed !== void 0 ? options.encodeSpeed : 5;\n      var decodeSpeed = options.decodeSpeed !== void 0 ? options.decodeSpeed : 5;\n      encoder.SetSpeedOptions(encodeSpeed, decodeSpeed);\n      if (options.encoderMethod !== void 0) {\n        encoder.SetEncodingMethod(options.encoderMethod);\n      }\n      if (options.quantization !== void 0) {\n        for (var _i = 0; _i < 5; _i++) {\n          if (options.quantization[_i] !== void 0) {\n            encoder.SetAttributeQuantization(_i, options.quantization[_i]);\n          }\n        }\n      }\n      var length;\n      if (object instanceof Mesh && object.isMesh) {\n        length = encoder.EncodeMeshToDracoBuffer(dracoObject, encodedData);\n      } else {\n        length = encoder.EncodePointCloudToDracoBuffer(dracoObject, true, encodedData);\n      }\n      dracoEncoder.destroy(dracoObject);\n      if (length === 0) {\n        throw new Error(\"THREE.DRACOExporter: Draco encoding failed.\");\n      }\n      var outputData = new Int8Array(new ArrayBuffer(length));\n      for (var _i2 = 0; _i2 < length; _i2++) {\n        outputData[_i2] = encodedData.GetValue(_i2);\n      }\n      dracoEncoder.destroy(encodedData);\n      dracoEncoder.destroy(encoder);\n      dracoEncoder.destroy(builder);\n      return outputData;\n    }\n  }]);\n  return _DRACOExporter;\n}();\nvar DRACOExporter = _DRACOExporter;\n// Encoder methods\n__publicField(DRACOExporter, \"MESH_EDGEBREAKER_ENCODING\", 1);\n__publicField(DRACOExporter, \"MESH_SEQUENTIAL_ENCODING\", 0);\n// Geometry type\n__publicField(DRACOExporter, \"POINT_CLOUD\", 0);\n__publicField(DRACOExporter, \"TRIANGULAR_MESH\", 1);\n// Attribute type\n__publicField(DRACOExporter, \"INVALID\", -1);\n__publicField(DRACOExporter, \"POSITION\", 0);\n__publicField(DRACOExporter, \"NORMAL\", 1);\n__publicField(DRACOExporter, \"COLOR\", 2);\n__publicField(DRACOExporter, \"TEX_COORD\", 3);\n__publicField(DRACOExporter, \"GENERIC\", 4);\nexport { DRACOExporter };","map":{"version":3,"names":["__defProp","Object","defineProperty","__defNormalProp","obj","key","value","enumerable","configurable","writable","__publicField","BufferGeometry","Mesh","Points","_DRACOExporter","_classCallCheck","_createClass","parse","object","options","arguments","length","undefined","decodeSpeed","encodeSpeed","encoderMethod","MESH_EDGEBREAKER_ENCODING","quantization","exportUvs","exportNormals","exportColor","isBufferGeometry","Error","DracoEncoderModule","geometry","dracoEncoder","encoder","Encoder","builder","dracoObject","isMesh","MeshBuilder","vertices","getAttribute","AddFloatAttributeToMesh","POSITION","count","itemSize","array","faces","getIndex","AddFacesToMesh","faces2","Uint32Array","Uint16Array","i","normals","NORMAL","uvs","TEX_COORD","colors","COLOR","isPoints","PointCloudBuilder","PointCloud","AddFloatAttribute","encodedData","DracoInt8Array","SetSpeedOptions","SetEncodingMethod","SetAttributeQuantization","EncodeMeshToDracoBuffer","EncodePointCloudToDracoBuffer","destroy","outputData","Int8Array","ArrayBuffer","GetValue","DRACOExporter"],"sources":["/home/krug/Coding/JavaScript/Websites/Personal/personal/node_modules/.pnpm/three-stdlib@2.23.7_three@0.151.3/node_modules/three-stdlib/exporters/DRACOExporter.js"],"sourcesContent":["var __defProp = Object.defineProperty;\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;\nvar __publicField = (obj, key, value) => {\n  __defNormalProp(obj, typeof key !== \"symbol\" ? key + \"\" : key, value);\n  return value;\n};\nimport { BufferGeometry, Mesh, Points } from \"three\";\nconst _DRACOExporter = class {\n  parse(object, options = {\n    decodeSpeed: 5,\n    encodeSpeed: 5,\n    encoderMethod: _DRACOExporter.MESH_EDGEBREAKER_ENCODING,\n    quantization: [16, 8, 8, 8, 8],\n    exportUvs: true,\n    exportNormals: true,\n    exportColor: false\n  }) {\n    if (object instanceof BufferGeometry && object.isBufferGeometry) {\n      throw new Error(\"DRACOExporter: The first parameter of parse() is now an instance of Mesh or Points.\");\n    }\n    if (DracoEncoderModule === void 0) {\n      throw new Error(\"THREE.DRACOExporter: required the draco_encoder to work.\");\n    }\n    const geometry = object.geometry;\n    const dracoEncoder = DracoEncoderModule();\n    const encoder = new dracoEncoder.Encoder();\n    let builder;\n    let dracoObject;\n    if (!geometry.isBufferGeometry) {\n      throw new Error(\"THREE.DRACOExporter.parse(geometry, options): geometry is not a THREE.BufferGeometry instance.\");\n    }\n    if (object instanceof Mesh && object.isMesh) {\n      builder = new dracoEncoder.MeshBuilder();\n      dracoObject = new dracoEncoder.Mesh();\n      const vertices = geometry.getAttribute(\"position\");\n      builder.AddFloatAttributeToMesh(\n        dracoObject,\n        dracoEncoder.POSITION,\n        vertices.count,\n        vertices.itemSize,\n        vertices.array\n      );\n      const faces = geometry.getIndex();\n      if (faces !== null) {\n        builder.AddFacesToMesh(dracoObject, faces.count / 3, faces.array);\n      } else {\n        const faces2 = new (vertices.count > 65535 ? Uint32Array : Uint16Array)(vertices.count);\n        for (let i = 0; i < faces2.length; i++) {\n          faces2[i] = i;\n        }\n        builder.AddFacesToMesh(dracoObject, vertices.count, faces2);\n      }\n      if (options.exportNormals) {\n        const normals = geometry.getAttribute(\"normal\");\n        if (normals !== void 0) {\n          builder.AddFloatAttributeToMesh(\n            dracoObject,\n            dracoEncoder.NORMAL,\n            normals.count,\n            normals.itemSize,\n            normals.array\n          );\n        }\n      }\n      if (options.exportUvs) {\n        const uvs = geometry.getAttribute(\"uv\");\n        if (uvs !== void 0) {\n          builder.AddFloatAttributeToMesh(dracoObject, dracoEncoder.TEX_COORD, uvs.count, uvs.itemSize, uvs.array);\n        }\n      }\n      if (options.exportColor) {\n        const colors = geometry.getAttribute(\"color\");\n        if (colors !== void 0) {\n          builder.AddFloatAttributeToMesh(dracoObject, dracoEncoder.COLOR, colors.count, colors.itemSize, colors.array);\n        }\n      }\n    } else if (object instanceof Points && object.isPoints) {\n      builder = new dracoEncoder.PointCloudBuilder();\n      dracoObject = new dracoEncoder.PointCloud();\n      const vertices = geometry.getAttribute(\"position\");\n      builder.AddFloatAttribute(dracoObject, dracoEncoder.POSITION, vertices.count, vertices.itemSize, vertices.array);\n      if (options.exportColor) {\n        const colors = geometry.getAttribute(\"color\");\n        if (colors !== void 0) {\n          builder.AddFloatAttribute(dracoObject, dracoEncoder.COLOR, colors.count, colors.itemSize, colors.array);\n        }\n      }\n    } else {\n      throw new Error(\"DRACOExporter: Unsupported object type.\");\n    }\n    const encodedData = new dracoEncoder.DracoInt8Array();\n    const encodeSpeed = options.encodeSpeed !== void 0 ? options.encodeSpeed : 5;\n    const decodeSpeed = options.decodeSpeed !== void 0 ? options.decodeSpeed : 5;\n    encoder.SetSpeedOptions(encodeSpeed, decodeSpeed);\n    if (options.encoderMethod !== void 0) {\n      encoder.SetEncodingMethod(options.encoderMethod);\n    }\n    if (options.quantization !== void 0) {\n      for (let i = 0; i < 5; i++) {\n        if (options.quantization[i] !== void 0) {\n          encoder.SetAttributeQuantization(i, options.quantization[i]);\n        }\n      }\n    }\n    let length;\n    if (object instanceof Mesh && object.isMesh) {\n      length = encoder.EncodeMeshToDracoBuffer(dracoObject, encodedData);\n    } else {\n      length = encoder.EncodePointCloudToDracoBuffer(dracoObject, true, encodedData);\n    }\n    dracoEncoder.destroy(dracoObject);\n    if (length === 0) {\n      throw new Error(\"THREE.DRACOExporter: Draco encoding failed.\");\n    }\n    const outputData = new Int8Array(new ArrayBuffer(length));\n    for (let i = 0; i < length; i++) {\n      outputData[i] = encodedData.GetValue(i);\n    }\n    dracoEncoder.destroy(encodedData);\n    dracoEncoder.destroy(encoder);\n    dracoEncoder.destroy(builder);\n    return outputData;\n  }\n};\nlet DRACOExporter = _DRACOExporter;\n// Encoder methods\n__publicField(DRACOExporter, \"MESH_EDGEBREAKER_ENCODING\", 1);\n__publicField(DRACOExporter, \"MESH_SEQUENTIAL_ENCODING\", 0);\n// Geometry type\n__publicField(DRACOExporter, \"POINT_CLOUD\", 0);\n__publicField(DRACOExporter, \"TRIANGULAR_MESH\", 1);\n// Attribute type\n__publicField(DRACOExporter, \"INVALID\", -1);\n__publicField(DRACOExporter, \"POSITION\", 0);\n__publicField(DRACOExporter, \"NORMAL\", 1);\n__publicField(DRACOExporter, \"COLOR\", 2);\n__publicField(DRACOExporter, \"TEX_COORD\", 3);\n__publicField(DRACOExporter, \"GENERIC\", 4);\nexport {\n  DRACOExporter\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}