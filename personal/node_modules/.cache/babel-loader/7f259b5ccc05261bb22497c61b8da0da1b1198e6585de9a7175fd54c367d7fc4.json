{"ast":null,"code":"var __defProp = Object.defineProperty;\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value\n}) : obj[key] = value;\nvar __publicField = (obj, key, value) => {\n  __defNormalProp(obj, typeof key !== \"symbol\" ? key + \"\" : key, value);\n  return value;\n};\nimport { Matrix4, EventDispatcher, Vector2, Vector3, Quaternion, Group, EllipseCurve, BufferGeometry, PerspectiveCamera, MathUtils, OrthographicCamera, Box3, Sphere, GridHelper, LineBasicMaterial, Line, Raycaster } from \"three\";\nconst STATE = {\n  IDLE: Symbol(),\n  ROTATE: Symbol(),\n  PAN: Symbol(),\n  SCALE: Symbol(),\n  FOV: Symbol(),\n  FOCUS: Symbol(),\n  ZROTATE: Symbol(),\n  TOUCH_MULTI: Symbol(),\n  ANIMATION_FOCUS: Symbol(),\n  ANIMATION_ROTATE: Symbol()\n};\nconst INPUT = {\n  NONE: Symbol(),\n  ONE_FINGER: Symbol(),\n  ONE_FINGER_SWITCHED: Symbol(),\n  TWO_FINGER: Symbol(),\n  MULT_FINGER: Symbol(),\n  CURSOR: Symbol()\n};\nconst _center = {\n  x: 0,\n  y: 0\n};\nconst _transformation = {\n  camera: /* @__PURE__ */new Matrix4(),\n  gizmos: /* @__PURE__ */new Matrix4()\n};\nconst _changeEvent = {\n  type: \"change\"\n};\nconst _startEvent = {\n  type: \"start\"\n};\nconst _endEvent = {\n  type: \"end\"\n};\nclass ArcballControls extends EventDispatcher {\n  constructor(camera) {\n    var _this;\n    let domElement = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n    let scene = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n    super();\n    _this = this;\n    __publicField(this, \"camera\");\n    __publicField(this, \"domElement\");\n    __publicField(this, \"scene\");\n    __publicField(this, \"mouseActions\");\n    __publicField(this, \"_mouseOp\");\n    __publicField(this, \"_v2_1\");\n    __publicField(this, \"_v3_1\");\n    __publicField(this, \"_v3_2\");\n    __publicField(this, \"_m4_1\");\n    __publicField(this, \"_m4_2\");\n    __publicField(this, \"_quat\");\n    __publicField(this, \"_translationMatrix\");\n    __publicField(this, \"_rotationMatrix\");\n    __publicField(this, \"_scaleMatrix\");\n    __publicField(this, \"_rotationAxis\");\n    __publicField(this, \"_cameraMatrixState\");\n    __publicField(this, \"_cameraProjectionState\");\n    __publicField(this, \"_fovState\");\n    __publicField(this, \"_upState\");\n    __publicField(this, \"_zoomState\");\n    __publicField(this, \"_nearPos\");\n    __publicField(this, \"_farPos\");\n    __publicField(this, \"_gizmoMatrixState\");\n    __publicField(this, \"_up0\");\n    __publicField(this, \"_zoom0\");\n    __publicField(this, \"_fov0\");\n    __publicField(this, \"_initialNear\");\n    __publicField(this, \"_nearPos0\");\n    __publicField(this, \"_initialFar\");\n    __publicField(this, \"_farPos0\");\n    __publicField(this, \"_cameraMatrixState0\");\n    __publicField(this, \"_gizmoMatrixState0\");\n    __publicField(this, \"_button\");\n    __publicField(this, \"_touchStart\");\n    __publicField(this, \"_touchCurrent\");\n    __publicField(this, \"_input\");\n    __publicField(this, \"_switchSensibility\");\n    __publicField(this, \"_startFingerDistance\");\n    __publicField(this, \"_currentFingerDistance\");\n    __publicField(this, \"_startFingerRotation\");\n    __publicField(this, \"_currentFingerRotation\");\n    __publicField(this, \"_devPxRatio\");\n    __publicField(this, \"_downValid\");\n    __publicField(this, \"_nclicks\");\n    __publicField(this, \"_downEvents\");\n    __publicField(this, \"_clickStart\");\n    __publicField(this, \"_maxDownTime\");\n    __publicField(this, \"_maxInterval\");\n    __publicField(this, \"_posThreshold\");\n    __publicField(this, \"_movementThreshold\");\n    __publicField(this, \"_currentCursorPosition\");\n    __publicField(this, \"_startCursorPosition\");\n    __publicField(this, \"_grid\");\n    __publicField(this, \"_gridPosition\");\n    __publicField(this, \"_gizmos\");\n    __publicField(this, \"_curvePts\");\n    __publicField(this, \"_timeStart\");\n    __publicField(this, \"_animationId\");\n    __publicField(this, \"focusAnimationTime\");\n    __publicField(this, \"_timePrev\");\n    __publicField(this, \"_timeCurrent\");\n    __publicField(this, \"_anglePrev\");\n    __publicField(this, \"_angleCurrent\");\n    __publicField(this, \"_cursorPosPrev\");\n    __publicField(this, \"_cursorPosCurr\");\n    __publicField(this, \"_wPrev\");\n    __publicField(this, \"_wCurr\");\n    __publicField(this, \"adjustNearFar\");\n    __publicField(this, \"scaleFactor\");\n    __publicField(this, \"dampingFactor\");\n    __publicField(this, \"wMax\");\n    __publicField(this, \"enableAnimations\");\n    __publicField(this, \"enableGrid\");\n    __publicField(this, \"cursorZoom\");\n    __publicField(this, \"minFov\");\n    __publicField(this, \"maxFov\");\n    __publicField(this, \"enabled\");\n    __publicField(this, \"enablePan\");\n    __publicField(this, \"enableRotate\");\n    __publicField(this, \"enableZoom\");\n    __publicField(this, \"minDistance\");\n    __publicField(this, \"maxDistance\");\n    __publicField(this, \"minZoom\");\n    __publicField(this, \"maxZoom\");\n    __publicField(this, \"target\");\n    __publicField(this, \"_currentTarget\");\n    __publicField(this, \"_tbRadius\");\n    __publicField(this, \"_state\");\n    //listeners\n    __publicField(this, \"onWindowResize\", () => {\n      const scale = (this._gizmos.scale.x + this._gizmos.scale.y + this._gizmos.scale.z) / 3;\n      if (this.camera) {\n        const tbRadius = this.calculateTbRadius(this.camera);\n        if (tbRadius !== void 0) {\n          this._tbRadius = tbRadius;\n        }\n      }\n      const newRadius = this._tbRadius / scale;\n      const curve = new EllipseCurve(0, 0, newRadius, newRadius);\n      const points = curve.getPoints(this._curvePts);\n      const curveGeometry = new BufferGeometry().setFromPoints(points);\n      for (const gizmo in this._gizmos.children) {\n        const child = this._gizmos.children[gizmo];\n        child.geometry = curveGeometry;\n      }\n      this.dispatchEvent(_changeEvent);\n    });\n    __publicField(this, \"onContextMenu\", event => {\n      if (!this.enabled) {\n        return;\n      }\n      for (let i = 0; i < this.mouseActions.length; i++) {\n        if (this.mouseActions[i].mouse == 2) {\n          event.preventDefault();\n          break;\n        }\n      }\n    });\n    __publicField(this, \"onPointerCancel\", () => {\n      this._touchStart.splice(0, this._touchStart.length);\n      this._touchCurrent.splice(0, this._touchCurrent.length);\n      this._input = INPUT.NONE;\n    });\n    __publicField(this, \"onPointerDown\", event => {\n      if (event.button == 0 && event.isPrimary) {\n        this._downValid = true;\n        this._downEvents.push(event);\n      } else {\n        this._downValid = false;\n      }\n      if (event.pointerType == \"touch\" && this._input != INPUT.CURSOR) {\n        this._touchStart.push(event);\n        this._touchCurrent.push(event);\n        switch (this._input) {\n          case INPUT.NONE:\n            this._input = INPUT.ONE_FINGER;\n            this.onSinglePanStart(event, \"ROTATE\");\n            window.addEventListener(\"pointermove\", this.onPointerMove);\n            window.addEventListener(\"pointerup\", this.onPointerUp);\n            break;\n          case INPUT.ONE_FINGER:\n          case INPUT.ONE_FINGER_SWITCHED:\n            this._input = INPUT.TWO_FINGER;\n            this.onRotateStart();\n            this.onPinchStart();\n            this.onDoublePanStart();\n            break;\n          case INPUT.TWO_FINGER:\n            this._input = INPUT.MULT_FINGER;\n            this.onTriplePanStart();\n            break;\n        }\n      } else if (event.pointerType != \"touch\" && this._input == INPUT.NONE) {\n        let modifier = null;\n        if (event.ctrlKey || event.metaKey) {\n          modifier = \"CTRL\";\n        } else if (event.shiftKey) {\n          modifier = \"SHIFT\";\n        }\n        this._mouseOp = this.getOpFromAction(event.button, modifier);\n        if (this._mouseOp) {\n          window.addEventListener(\"pointermove\", this.onPointerMove);\n          window.addEventListener(\"pointerup\", this.onPointerUp);\n          this._input = INPUT.CURSOR;\n          this._button = event.button;\n          this.onSinglePanStart(event, this._mouseOp);\n        }\n      }\n    });\n    __publicField(this, \"onPointerMove\", event => {\n      if (event.pointerType == \"touch\" && this._input != INPUT.CURSOR) {\n        switch (this._input) {\n          case INPUT.ONE_FINGER:\n            this.updateTouchEvent(event);\n            this.onSinglePanMove(event, STATE.ROTATE);\n            break;\n          case INPUT.ONE_FINGER_SWITCHED:\n            const movement = this.calculatePointersDistance(this._touchCurrent[0], event) * this._devPxRatio;\n            if (movement >= this._switchSensibility) {\n              this._input = INPUT.ONE_FINGER;\n              this.updateTouchEvent(event);\n              this.onSinglePanStart(event, \"ROTATE\");\n              break;\n            }\n            break;\n          case INPUT.TWO_FINGER:\n            this.updateTouchEvent(event);\n            this.onRotateMove();\n            this.onPinchMove();\n            this.onDoublePanMove();\n            break;\n          case INPUT.MULT_FINGER:\n            this.updateTouchEvent(event);\n            this.onTriplePanMove();\n            break;\n        }\n      } else if (event.pointerType != \"touch\" && this._input == INPUT.CURSOR) {\n        let modifier = null;\n        if (event.ctrlKey || event.metaKey) {\n          modifier = \"CTRL\";\n        } else if (event.shiftKey) {\n          modifier = \"SHIFT\";\n        }\n        const mouseOpState = this.getOpStateFromAction(this._button, modifier);\n        if (mouseOpState) {\n          this.onSinglePanMove(event, mouseOpState);\n        }\n      }\n      if (this._downValid) {\n        const movement = this.calculatePointersDistance(this._downEvents[this._downEvents.length - 1], event) * this._devPxRatio;\n        if (movement > this._movementThreshold) {\n          this._downValid = false;\n        }\n      }\n    });\n    __publicField(this, \"onPointerUp\", event => {\n      if (event.pointerType == \"touch\" && this._input != INPUT.CURSOR) {\n        const nTouch = this._touchCurrent.length;\n        for (let i = 0; i < nTouch; i++) {\n          if (this._touchCurrent[i].pointerId == event.pointerId) {\n            this._touchCurrent.splice(i, 1);\n            this._touchStart.splice(i, 1);\n            break;\n          }\n        }\n        switch (this._input) {\n          case INPUT.ONE_FINGER:\n          case INPUT.ONE_FINGER_SWITCHED:\n            window.removeEventListener(\"pointermove\", this.onPointerMove);\n            window.removeEventListener(\"pointerup\", this.onPointerUp);\n            this._input = INPUT.NONE;\n            this.onSinglePanEnd();\n            break;\n          case INPUT.TWO_FINGER:\n            this.onDoublePanEnd();\n            this.onPinchEnd();\n            this.onRotateEnd();\n            this._input = INPUT.ONE_FINGER_SWITCHED;\n            break;\n          case INPUT.MULT_FINGER:\n            if (this._touchCurrent.length == 0) {\n              window.removeEventListener(\"pointermove\", this.onPointerMove);\n              window.removeEventListener(\"pointerup\", this.onPointerUp);\n              this._input = INPUT.NONE;\n              this.onTriplePanEnd();\n            }\n            break;\n        }\n      } else if (event.pointerType != \"touch\" && this._input == INPUT.CURSOR) {\n        window.removeEventListener(\"pointermove\", this.onPointerMove);\n        window.removeEventListener(\"pointerup\", this.onPointerUp);\n        this._input = INPUT.NONE;\n        this.onSinglePanEnd();\n        this._button = -1;\n      }\n      if (event.isPrimary) {\n        if (this._downValid) {\n          const downTime = event.timeStamp - this._downEvents[this._downEvents.length - 1].timeStamp;\n          if (downTime <= this._maxDownTime) {\n            if (this._nclicks == 0) {\n              this._nclicks = 1;\n              this._clickStart = performance.now();\n            } else {\n              const clickInterval = event.timeStamp - this._clickStart;\n              const movement = this.calculatePointersDistance(this._downEvents[1], this._downEvents[0]) * this._devPxRatio;\n              if (clickInterval <= this._maxInterval && movement <= this._posThreshold) {\n                this._nclicks = 0;\n                this._downEvents.splice(0, this._downEvents.length);\n                this.onDoubleTap(event);\n              } else {\n                this._nclicks = 1;\n                this._downEvents.shift();\n                this._clickStart = performance.now();\n              }\n            }\n          } else {\n            this._downValid = false;\n            this._nclicks = 0;\n            this._downEvents.splice(0, this._downEvents.length);\n          }\n        } else {\n          this._nclicks = 0;\n          this._downEvents.splice(0, this._downEvents.length);\n        }\n      }\n    });\n    __publicField(this, \"onWheel\", event => {\n      var _a, _b;\n      if (this.enabled && this.enableZoom && this.domElement) {\n        let modifier = null;\n        if (event.ctrlKey || event.metaKey) {\n          modifier = \"CTRL\";\n        } else if (event.shiftKey) {\n          modifier = \"SHIFT\";\n        }\n        const mouseOp = this.getOpFromAction(\"WHEEL\", modifier);\n        if (mouseOp) {\n          event.preventDefault();\n          this.dispatchEvent(_startEvent);\n          const notchDeltaY = 125;\n          let sgn = event.deltaY / notchDeltaY;\n          let size = 1;\n          if (sgn > 0) {\n            size = 1 / this.scaleFactor;\n          } else if (sgn < 0) {\n            size = this.scaleFactor;\n          }\n          switch (mouseOp) {\n            case \"ZOOM\":\n              this.updateTbState(STATE.SCALE, true);\n              if (sgn > 0) {\n                size = 1 / Math.pow(this.scaleFactor, sgn);\n              } else if (sgn < 0) {\n                size = Math.pow(this.scaleFactor, -sgn);\n              }\n              if (this.cursorZoom && this.enablePan) {\n                let scalePoint;\n                if (this.camera instanceof OrthographicCamera) {\n                  scalePoint = (_a = this.unprojectOnTbPlane(this.camera, event.clientX, event.clientY, this.domElement)) == null ? void 0 : _a.applyQuaternion(this.camera.quaternion).multiplyScalar(1 / this.camera.zoom).add(this._gizmos.position);\n                }\n                if (this.camera instanceof PerspectiveCamera) {\n                  scalePoint = (_b = this.unprojectOnTbPlane(this.camera, event.clientX, event.clientY, this.domElement)) == null ? void 0 : _b.applyQuaternion(this.camera.quaternion).add(this._gizmos.position);\n                }\n                if (scalePoint !== void 0) this.applyTransformMatrix(this.applyScale(size, scalePoint));\n              } else {\n                this.applyTransformMatrix(this.applyScale(size, this._gizmos.position));\n              }\n              if (this._grid) {\n                this.disposeGrid();\n                this.drawGrid();\n              }\n              this.updateTbState(STATE.IDLE, false);\n              this.dispatchEvent(_changeEvent);\n              this.dispatchEvent(_endEvent);\n              break;\n            case \"FOV\":\n              if (this.camera instanceof PerspectiveCamera) {\n                this.updateTbState(STATE.FOV, true);\n                if (event.deltaX != 0) {\n                  sgn = event.deltaX / notchDeltaY;\n                  size = 1;\n                  if (sgn > 0) {\n                    size = 1 / Math.pow(this.scaleFactor, sgn);\n                  } else if (sgn < 0) {\n                    size = Math.pow(this.scaleFactor, -sgn);\n                  }\n                }\n                this._v3_1.setFromMatrixPosition(this._cameraMatrixState);\n                const x = this._v3_1.distanceTo(this._gizmos.position);\n                let xNew = x / size;\n                xNew = MathUtils.clamp(xNew, this.minDistance, this.maxDistance);\n                const y = x * Math.tan(MathUtils.DEG2RAD * this.camera.fov * 0.5);\n                let newFov = MathUtils.RAD2DEG * (Math.atan(y / xNew) * 2);\n                if (newFov > this.maxFov) {\n                  newFov = this.maxFov;\n                } else if (newFov < this.minFov) {\n                  newFov = this.minFov;\n                }\n                const newDistance = y / Math.tan(MathUtils.DEG2RAD * (newFov / 2));\n                size = x / newDistance;\n                this.setFov(newFov);\n                this.applyTransformMatrix(this.applyScale(size, this._gizmos.position, false));\n              }\n              if (this._grid) {\n                this.disposeGrid();\n                this.drawGrid();\n              }\n              this.updateTbState(STATE.IDLE, false);\n              this.dispatchEvent(_changeEvent);\n              this.dispatchEvent(_endEvent);\n              break;\n          }\n        }\n      }\n    });\n    __publicField(this, \"onSinglePanStart\", (event, operation) => {\n      if (this.enabled && this.domElement) {\n        this.dispatchEvent(_startEvent);\n        this.setCenter(event.clientX, event.clientY);\n        switch (operation) {\n          case \"PAN\":\n            if (!this.enablePan) return;\n            if (this._animationId != -1) {\n              cancelAnimationFrame(this._animationId);\n              this._animationId = -1;\n              this._timeStart = -1;\n              this.activateGizmos(false);\n              this.dispatchEvent(_changeEvent);\n            }\n            if (this.camera) {\n              this.updateTbState(STATE.PAN, true);\n              const rayDir = this.unprojectOnTbPlane(this.camera, _center.x, _center.y, this.domElement);\n              if (rayDir !== void 0) {\n                this._startCursorPosition.copy(rayDir);\n              }\n              if (this.enableGrid) {\n                this.drawGrid();\n                this.dispatchEvent(_changeEvent);\n              }\n            }\n            break;\n          case \"ROTATE\":\n            if (!this.enableRotate) return;\n            if (this._animationId != -1) {\n              cancelAnimationFrame(this._animationId);\n              this._animationId = -1;\n              this._timeStart = -1;\n            }\n            if (this.camera) {\n              this.updateTbState(STATE.ROTATE, true);\n              const rayDir = this.unprojectOnTbSurface(this.camera, _center.x, _center.y, this.domElement, this._tbRadius);\n              if (rayDir !== void 0) {\n                this._startCursorPosition.copy(rayDir);\n              }\n              this.activateGizmos(true);\n              if (this.enableAnimations) {\n                this._timePrev = this._timeCurrent = performance.now();\n                this._angleCurrent = this._anglePrev = 0;\n                this._cursorPosPrev.copy(this._startCursorPosition);\n                this._cursorPosCurr.copy(this._cursorPosPrev);\n                this._wCurr = 0;\n                this._wPrev = this._wCurr;\n              }\n            }\n            this.dispatchEvent(_changeEvent);\n            break;\n          case \"FOV\":\n            if (!this.enableZoom) return;\n            if (this.camera instanceof PerspectiveCamera) {\n              if (this._animationId != -1) {\n                cancelAnimationFrame(this._animationId);\n                this._animationId = -1;\n                this._timeStart = -1;\n                this.activateGizmos(false);\n                this.dispatchEvent(_changeEvent);\n              }\n              this.updateTbState(STATE.FOV, true);\n              this._startCursorPosition.setY(this.getCursorNDC(_center.x, _center.y, this.domElement).y * 0.5);\n              this._currentCursorPosition.copy(this._startCursorPosition);\n            }\n            break;\n          case \"ZOOM\":\n            if (!this.enableZoom) return;\n            if (this._animationId != -1) {\n              cancelAnimationFrame(this._animationId);\n              this._animationId = -1;\n              this._timeStart = -1;\n              this.activateGizmos(false);\n              this.dispatchEvent(_changeEvent);\n            }\n            this.updateTbState(STATE.SCALE, true);\n            this._startCursorPosition.setY(this.getCursorNDC(_center.x, _center.y, this.domElement).y * 0.5);\n            this._currentCursorPosition.copy(this._startCursorPosition);\n            break;\n        }\n      }\n    });\n    __publicField(this, \"onSinglePanMove\", (event, opState) => {\n      if (this.enabled && this.domElement) {\n        const restart = opState != this._state;\n        this.setCenter(event.clientX, event.clientY);\n        switch (opState) {\n          case STATE.PAN:\n            if (this.enablePan && this.camera) {\n              if (restart) {\n                this.dispatchEvent(_endEvent);\n                this.dispatchEvent(_startEvent);\n                this.updateTbState(opState, true);\n                const rayDir = this.unprojectOnTbPlane(this.camera, _center.x, _center.y, this.domElement);\n                if (rayDir !== void 0) {\n                  this._startCursorPosition.copy(rayDir);\n                }\n                if (this.enableGrid) {\n                  this.drawGrid();\n                }\n                this.activateGizmos(false);\n              } else {\n                const rayDir = this.unprojectOnTbPlane(this.camera, _center.x, _center.y, this.domElement);\n                if (rayDir !== void 0) {\n                  this._currentCursorPosition.copy(rayDir);\n                }\n                this.applyTransformMatrix(this.pan(this._startCursorPosition, this._currentCursorPosition));\n              }\n            }\n            break;\n          case STATE.ROTATE:\n            if (this.enableRotate && this.camera) {\n              if (restart) {\n                this.dispatchEvent(_endEvent);\n                this.dispatchEvent(_startEvent);\n                this.updateTbState(opState, true);\n                const rayDir = this.unprojectOnTbSurface(this.camera, _center.x, _center.y, this.domElement, this._tbRadius);\n                if (rayDir !== void 0) {\n                  this._startCursorPosition.copy(rayDir);\n                }\n                if (this.enableGrid) {\n                  this.disposeGrid();\n                }\n                this.activateGizmos(true);\n              } else {\n                const rayDir = this.unprojectOnTbSurface(this.camera, _center.x, _center.y, this.domElement, this._tbRadius);\n                if (rayDir !== void 0) {\n                  this._currentCursorPosition.copy(rayDir);\n                }\n                const distance = this._startCursorPosition.distanceTo(this._currentCursorPosition);\n                const angle = this._startCursorPosition.angleTo(this._currentCursorPosition);\n                const amount = Math.max(distance / this._tbRadius, angle);\n                this.applyTransformMatrix(this.rotate(this.calculateRotationAxis(this._startCursorPosition, this._currentCursorPosition), amount));\n                if (this.enableAnimations) {\n                  this._timePrev = this._timeCurrent;\n                  this._timeCurrent = performance.now();\n                  this._anglePrev = this._angleCurrent;\n                  this._angleCurrent = amount;\n                  this._cursorPosPrev.copy(this._cursorPosCurr);\n                  this._cursorPosCurr.copy(this._currentCursorPosition);\n                  this._wPrev = this._wCurr;\n                  this._wCurr = this.calculateAngularSpeed(this._anglePrev, this._angleCurrent, this._timePrev, this._timeCurrent);\n                }\n              }\n            }\n            break;\n          case STATE.SCALE:\n            if (this.enableZoom) {\n              if (restart) {\n                this.dispatchEvent(_endEvent);\n                this.dispatchEvent(_startEvent);\n                this.updateTbState(opState, true);\n                this._startCursorPosition.setY(this.getCursorNDC(_center.x, _center.y, this.domElement).y * 0.5);\n                this._currentCursorPosition.copy(this._startCursorPosition);\n                if (this.enableGrid) {\n                  this.disposeGrid();\n                }\n                this.activateGizmos(false);\n              } else {\n                const screenNotches = 8;\n                this._currentCursorPosition.setY(this.getCursorNDC(_center.x, _center.y, this.domElement).y * 0.5);\n                const movement = this._currentCursorPosition.y - this._startCursorPosition.y;\n                let size = 1;\n                if (movement < 0) {\n                  size = 1 / Math.pow(this.scaleFactor, -movement * screenNotches);\n                } else if (movement > 0) {\n                  size = Math.pow(this.scaleFactor, movement * screenNotches);\n                }\n                this.applyTransformMatrix(this.applyScale(size, this._gizmos.position));\n              }\n            }\n            break;\n          case STATE.FOV:\n            if (this.enableZoom && this.camera instanceof PerspectiveCamera) {\n              if (restart) {\n                this.dispatchEvent(_endEvent);\n                this.dispatchEvent(_startEvent);\n                this.updateTbState(opState, true);\n                this._startCursorPosition.setY(this.getCursorNDC(_center.x, _center.y, this.domElement).y * 0.5);\n                this._currentCursorPosition.copy(this._startCursorPosition);\n                if (this.enableGrid) {\n                  this.disposeGrid();\n                }\n                this.activateGizmos(false);\n              } else {\n                const screenNotches = 8;\n                this._currentCursorPosition.setY(this.getCursorNDC(_center.x, _center.y, this.domElement).y * 0.5);\n                const movement = this._currentCursorPosition.y - this._startCursorPosition.y;\n                let size = 1;\n                if (movement < 0) {\n                  size = 1 / Math.pow(this.scaleFactor, -movement * screenNotches);\n                } else if (movement > 0) {\n                  size = Math.pow(this.scaleFactor, movement * screenNotches);\n                }\n                this._v3_1.setFromMatrixPosition(this._cameraMatrixState);\n                const x = this._v3_1.distanceTo(this._gizmos.position);\n                let xNew = x / size;\n                xNew = MathUtils.clamp(xNew, this.minDistance, this.maxDistance);\n                const y = x * Math.tan(MathUtils.DEG2RAD * this._fovState * 0.5);\n                let newFov = MathUtils.RAD2DEG * (Math.atan(y / xNew) * 2);\n                newFov = MathUtils.clamp(newFov, this.minFov, this.maxFov);\n                const newDistance = y / Math.tan(MathUtils.DEG2RAD * (newFov / 2));\n                size = x / newDistance;\n                this._v3_2.setFromMatrixPosition(this._gizmoMatrixState);\n                this.setFov(newFov);\n                this.applyTransformMatrix(this.applyScale(size, this._v3_2, false));\n                const direction = this._gizmos.position.clone().sub(this.camera.position).normalize().multiplyScalar(newDistance / x);\n                this._m4_1.makeTranslation(direction.x, direction.y, direction.z);\n              }\n            }\n            break;\n        }\n        this.dispatchEvent(_changeEvent);\n      }\n    });\n    __publicField(this, \"onSinglePanEnd\", () => {\n      if (this._state == STATE.ROTATE) {\n        if (!this.enableRotate) {\n          return;\n        }\n        if (this.enableAnimations) {\n          const deltaTime = performance.now() - this._timeCurrent;\n          if (deltaTime < 120) {\n            const w = Math.abs((this._wPrev + this._wCurr) / 2);\n            const self = this;\n            this._animationId = window.requestAnimationFrame(function (t) {\n              self.updateTbState(STATE.ANIMATION_ROTATE, true);\n              const rotationAxis = self.calculateRotationAxis(self._cursorPosPrev, self._cursorPosCurr);\n              self.onRotationAnim(t, rotationAxis, Math.min(w, self.wMax));\n            });\n          } else {\n            this.updateTbState(STATE.IDLE, false);\n            this.activateGizmos(false);\n            this.dispatchEvent(_changeEvent);\n          }\n        } else {\n          this.updateTbState(STATE.IDLE, false);\n          this.activateGizmos(false);\n          this.dispatchEvent(_changeEvent);\n        }\n      } else if (this._state == STATE.PAN || this._state == STATE.IDLE) {\n        this.updateTbState(STATE.IDLE, false);\n        if (this.enableGrid) {\n          this.disposeGrid();\n        }\n        this.activateGizmos(false);\n        this.dispatchEvent(_changeEvent);\n      }\n      this.dispatchEvent(_endEvent);\n    });\n    __publicField(this, \"onDoubleTap\", event => {\n      if (this.enabled && this.enablePan && this.scene && this.camera && this.domElement) {\n        this.dispatchEvent(_startEvent);\n        this.setCenter(event.clientX, event.clientY);\n        const hitP = this.unprojectOnObj(this.getCursorNDC(_center.x, _center.y, this.domElement), this.camera);\n        if (hitP && this.enableAnimations) {\n          const self = this;\n          if (this._animationId != -1) {\n            window.cancelAnimationFrame(this._animationId);\n          }\n          this._timeStart = -1;\n          this._animationId = window.requestAnimationFrame(function (t) {\n            self.updateTbState(STATE.ANIMATION_FOCUS, true);\n            self.onFocusAnim(t, hitP, self._cameraMatrixState, self._gizmoMatrixState);\n          });\n        } else if (hitP && !this.enableAnimations) {\n          this.updateTbState(STATE.FOCUS, true);\n          this.focus(hitP, this.scaleFactor);\n          this.updateTbState(STATE.IDLE, false);\n          this.dispatchEvent(_changeEvent);\n        }\n      }\n      this.dispatchEvent(_endEvent);\n    });\n    __publicField(this, \"onDoublePanStart\", () => {\n      if (this.enabled && this.enablePan && this.camera && this.domElement) {\n        this.dispatchEvent(_startEvent);\n        this.updateTbState(STATE.PAN, true);\n        this.setCenter((this._touchCurrent[0].clientX + this._touchCurrent[1].clientX) / 2, (this._touchCurrent[0].clientY + this._touchCurrent[1].clientY) / 2);\n        const rayDir = this.unprojectOnTbPlane(this.camera, _center.x, _center.y, this.domElement, true);\n        if (rayDir !== void 0) {\n          this._startCursorPosition.copy(rayDir);\n        }\n        this._currentCursorPosition.copy(this._startCursorPosition);\n        this.activateGizmos(false);\n      }\n    });\n    __publicField(this, \"onDoublePanMove\", () => {\n      if (this.enabled && this.enablePan && this.camera && this.domElement) {\n        this.setCenter((this._touchCurrent[0].clientX + this._touchCurrent[1].clientX) / 2, (this._touchCurrent[0].clientY + this._touchCurrent[1].clientY) / 2);\n        if (this._state != STATE.PAN) {\n          this.updateTbState(STATE.PAN, true);\n          this._startCursorPosition.copy(this._currentCursorPosition);\n        }\n        const rayDir = this.unprojectOnTbPlane(this.camera, _center.x, _center.y, this.domElement, true);\n        if (rayDir !== void 0) this._currentCursorPosition.copy(rayDir);\n        this.applyTransformMatrix(this.pan(this._startCursorPosition, this._currentCursorPosition, true));\n        this.dispatchEvent(_changeEvent);\n      }\n    });\n    __publicField(this, \"onDoublePanEnd\", () => {\n      this.updateTbState(STATE.IDLE, false);\n      this.dispatchEvent(_endEvent);\n    });\n    __publicField(this, \"onRotateStart\", () => {\n      var _a;\n      if (this.enabled && this.enableRotate) {\n        this.dispatchEvent(_startEvent);\n        this.updateTbState(STATE.ZROTATE, true);\n        this._startFingerRotation = this.getAngle(this._touchCurrent[1], this._touchCurrent[0]) + this.getAngle(this._touchStart[1], this._touchStart[0]);\n        this._currentFingerRotation = this._startFingerRotation;\n        (_a = this.camera) == null ? void 0 : _a.getWorldDirection(this._rotationAxis);\n        if (!this.enablePan && !this.enableZoom) {\n          this.activateGizmos(true);\n        }\n      }\n    });\n    __publicField(this, \"onRotateMove\", () => {\n      var _a;\n      if (this.enabled && this.enableRotate && this.camera && this.domElement) {\n        this.setCenter((this._touchCurrent[0].clientX + this._touchCurrent[1].clientX) / 2, (this._touchCurrent[0].clientY + this._touchCurrent[1].clientY) / 2);\n        let rotationPoint;\n        if (this._state != STATE.ZROTATE) {\n          this.updateTbState(STATE.ZROTATE, true);\n          this._startFingerRotation = this._currentFingerRotation;\n        }\n        this._currentFingerRotation = this.getAngle(this._touchCurrent[1], this._touchCurrent[0]) + this.getAngle(this._touchStart[1], this._touchStart[0]);\n        if (!this.enablePan) {\n          rotationPoint = new Vector3().setFromMatrixPosition(this._gizmoMatrixState);\n        } else if (this.camera) {\n          this._v3_2.setFromMatrixPosition(this._gizmoMatrixState);\n          rotationPoint = (_a = this.unprojectOnTbPlane(this.camera, _center.x, _center.y, this.domElement)) == null ? void 0 : _a.applyQuaternion(this.camera.quaternion).multiplyScalar(1 / this.camera.zoom).add(this._v3_2);\n        }\n        const amount = MathUtils.DEG2RAD * (this._startFingerRotation - this._currentFingerRotation);\n        if (rotationPoint !== void 0) {\n          this.applyTransformMatrix(this.zRotate(rotationPoint, amount));\n        }\n        this.dispatchEvent(_changeEvent);\n      }\n    });\n    __publicField(this, \"onRotateEnd\", () => {\n      this.updateTbState(STATE.IDLE, false);\n      this.activateGizmos(false);\n      this.dispatchEvent(_endEvent);\n    });\n    __publicField(this, \"onPinchStart\", () => {\n      if (this.enabled && this.enableZoom) {\n        this.dispatchEvent(_startEvent);\n        this.updateTbState(STATE.SCALE, true);\n        this._startFingerDistance = this.calculatePointersDistance(this._touchCurrent[0], this._touchCurrent[1]);\n        this._currentFingerDistance = this._startFingerDistance;\n        this.activateGizmos(false);\n      }\n    });\n    __publicField(this, \"onPinchMove\", () => {\n      var _a, _b;\n      if (this.enabled && this.enableZoom && this.domElement) {\n        this.setCenter((this._touchCurrent[0].clientX + this._touchCurrent[1].clientX) / 2, (this._touchCurrent[0].clientY + this._touchCurrent[1].clientY) / 2);\n        const minDistance = 12;\n        if (this._state != STATE.SCALE) {\n          this._startFingerDistance = this._currentFingerDistance;\n          this.updateTbState(STATE.SCALE, true);\n        }\n        this._currentFingerDistance = Math.max(this.calculatePointersDistance(this._touchCurrent[0], this._touchCurrent[1]), minDistance * this._devPxRatio);\n        const amount = this._currentFingerDistance / this._startFingerDistance;\n        let scalePoint;\n        if (!this.enablePan) {\n          scalePoint = this._gizmos.position;\n        } else {\n          if (this.camera instanceof OrthographicCamera) {\n            scalePoint = (_a = this.unprojectOnTbPlane(this.camera, _center.x, _center.y, this.domElement)) == null ? void 0 : _a.applyQuaternion(this.camera.quaternion).multiplyScalar(1 / this.camera.zoom).add(this._gizmos.position);\n          } else if (this.camera instanceof PerspectiveCamera) {\n            scalePoint = (_b = this.unprojectOnTbPlane(this.camera, _center.x, _center.y, this.domElement)) == null ? void 0 : _b.applyQuaternion(this.camera.quaternion).add(this._gizmos.position);\n          }\n        }\n        if (scalePoint !== void 0) {\n          this.applyTransformMatrix(this.applyScale(amount, scalePoint));\n        }\n        this.dispatchEvent(_changeEvent);\n      }\n    });\n    __publicField(this, \"onPinchEnd\", () => {\n      this.updateTbState(STATE.IDLE, false);\n      this.dispatchEvent(_endEvent);\n    });\n    __publicField(this, \"onTriplePanStart\", () => {\n      if (this.enabled && this.enableZoom && this.domElement) {\n        this.dispatchEvent(_startEvent);\n        this.updateTbState(STATE.SCALE, true);\n        let clientX = 0;\n        let clientY = 0;\n        const nFingers = this._touchCurrent.length;\n        for (let i = 0; i < nFingers; i++) {\n          clientX += this._touchCurrent[i].clientX;\n          clientY += this._touchCurrent[i].clientY;\n        }\n        this.setCenter(clientX / nFingers, clientY / nFingers);\n        this._startCursorPosition.setY(this.getCursorNDC(_center.x, _center.y, this.domElement).y * 0.5);\n        this._currentCursorPosition.copy(this._startCursorPosition);\n      }\n    });\n    __publicField(this, \"onTriplePanMove\", () => {\n      if (this.enabled && this.enableZoom && this.camera && this.domElement) {\n        let clientX = 0;\n        let clientY = 0;\n        const nFingers = this._touchCurrent.length;\n        for (let i = 0; i < nFingers; i++) {\n          clientX += this._touchCurrent[i].clientX;\n          clientY += this._touchCurrent[i].clientY;\n        }\n        this.setCenter(clientX / nFingers, clientY / nFingers);\n        const screenNotches = 8;\n        this._currentCursorPosition.setY(this.getCursorNDC(_center.x, _center.y, this.domElement).y * 0.5);\n        const movement = this._currentCursorPosition.y - this._startCursorPosition.y;\n        let size = 1;\n        if (movement < 0) {\n          size = 1 / Math.pow(this.scaleFactor, -movement * screenNotches);\n        } else if (movement > 0) {\n          size = Math.pow(this.scaleFactor, movement * screenNotches);\n        }\n        this._v3_1.setFromMatrixPosition(this._cameraMatrixState);\n        const x = this._v3_1.distanceTo(this._gizmos.position);\n        let xNew = x / size;\n        xNew = MathUtils.clamp(xNew, this.minDistance, this.maxDistance);\n        const y = x * Math.tan(MathUtils.DEG2RAD * this._fovState * 0.5);\n        let newFov = MathUtils.RAD2DEG * (Math.atan(y / xNew) * 2);\n        newFov = MathUtils.clamp(newFov, this.minFov, this.maxFov);\n        const newDistance = y / Math.tan(MathUtils.DEG2RAD * (newFov / 2));\n        size = x / newDistance;\n        this._v3_2.setFromMatrixPosition(this._gizmoMatrixState);\n        this.setFov(newFov);\n        this.applyTransformMatrix(this.applyScale(size, this._v3_2, false));\n        const direction = this._gizmos.position.clone().sub(this.camera.position).normalize().multiplyScalar(newDistance / x);\n        this._m4_1.makeTranslation(direction.x, direction.y, direction.z);\n        this.dispatchEvent(_changeEvent);\n      }\n    });\n    __publicField(this, \"onTriplePanEnd\", () => {\n      this.updateTbState(STATE.IDLE, false);\n      this.dispatchEvent(_endEvent);\n    });\n    /**\n     * Set _center's x/y coordinates\n     * @param {Number} clientX\n     * @param {Number} clientY\n     */\n    __publicField(this, \"setCenter\", (clientX, clientY) => {\n      _center.x = clientX;\n      _center.y = clientY;\n    });\n    /**\n     * Set default mouse actions\n     */\n    __publicField(this, \"initializeMouseActions\", () => {\n      this.setMouseAction(\"PAN\", 0, \"CTRL\");\n      this.setMouseAction(\"PAN\", 2);\n      this.setMouseAction(\"ROTATE\", 0);\n      this.setMouseAction(\"ZOOM\", \"WHEEL\");\n      this.setMouseAction(\"ZOOM\", 1);\n      this.setMouseAction(\"FOV\", \"WHEEL\", \"SHIFT\");\n      this.setMouseAction(\"FOV\", 1, \"SHIFT\");\n    });\n    /**\n     * Set a new mouse action by specifying the operation to be performed and a mouse/key combination. In case of conflict, replaces the existing one\n     * @param {String} operation The operation to be performed ('PAN', 'ROTATE', 'ZOOM', 'FOV)\n     * @param {*} mouse A mouse button (0, 1, 2) or 'WHEEL' for wheel notches\n     * @param {*} key The keyboard modifier ('CTRL', 'SHIFT') or null if key is not needed\n     * @returns {Boolean} True if the mouse action has been successfully added, false otherwise\n     */\n    __publicField(this, \"setMouseAction\", function (operation, mouse) {\n      let key = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n      const operationInput = [\"PAN\", \"ROTATE\", \"ZOOM\", \"FOV\"];\n      const mouseInput = [0, 1, 2, \"WHEEL\"];\n      const keyInput = [\"CTRL\", \"SHIFT\", null];\n      let state;\n      if (!operationInput.includes(operation) || !mouseInput.includes(mouse) || !keyInput.includes(key)) {\n        return false;\n      }\n      if (mouse == \"WHEEL\") {\n        if (operation != \"ZOOM\" && operation != \"FOV\") {\n          return false;\n        }\n      }\n      switch (operation) {\n        case \"PAN\":\n          state = STATE.PAN;\n          break;\n        case \"ROTATE\":\n          state = STATE.ROTATE;\n          break;\n        case \"ZOOM\":\n          state = STATE.SCALE;\n          break;\n        case \"FOV\":\n          state = STATE.FOV;\n          break;\n      }\n      const action = {\n        operation,\n        mouse,\n        key,\n        state\n      };\n      for (let i = 0; i < _this.mouseActions.length; i++) {\n        if (_this.mouseActions[i].mouse == action.mouse && _this.mouseActions[i].key == action.key) {\n          _this.mouseActions.splice(i, 1, action);\n          return true;\n        }\n      }\n      _this.mouseActions.push(action);\n      return true;\n    });\n    /**\n     * Return the operation associated to a mouse/keyboard combination\n     * @param {*} mouse A mouse button (0, 1, 2) or 'WHEEL' for wheel notches\n     * @param {*} key The keyboard modifier ('CTRL', 'SHIFT') or null if key is not needed\n     * @returns The operation if it has been found, null otherwise\n     */\n    __publicField(this, \"getOpFromAction\", (mouse, key) => {\n      let action;\n      for (let i = 0; i < this.mouseActions.length; i++) {\n        action = this.mouseActions[i];\n        if (action.mouse == mouse && action.key == key) {\n          return action.operation;\n        }\n      }\n      if (key) {\n        for (let i = 0; i < this.mouseActions.length; i++) {\n          action = this.mouseActions[i];\n          if (action.mouse == mouse && action.key == null) {\n            return action.operation;\n          }\n        }\n      }\n      return null;\n    });\n    /**\n     * Get the operation associated to mouse and key combination and returns the corresponding FSA state\n     * @param {Number} mouse Mouse button\n     * @param {String} key Keyboard modifier\n     * @returns The FSA state obtained from the operation associated to mouse/keyboard combination\n     */\n    __publicField(this, \"getOpStateFromAction\", (mouse, key) => {\n      let action;\n      for (let i = 0; i < this.mouseActions.length; i++) {\n        action = this.mouseActions[i];\n        if (action.mouse == mouse && action.key == key) {\n          return action.state;\n        }\n      }\n      if (key) {\n        for (let i = 0; i < this.mouseActions.length; i++) {\n          action = this.mouseActions[i];\n          if (action.mouse == mouse && action.key == null) {\n            return action.state;\n          }\n        }\n      }\n      return null;\n    });\n    /**\n     * Calculate the angle between two pointers\n     * @param {PointerEvent} p1\n     * @param {PointerEvent} p2\n     * @returns {Number} The angle between two pointers in degrees\n     */\n    __publicField(this, \"getAngle\", (p1, p2) => {\n      return Math.atan2(p2.clientY - p1.clientY, p2.clientX - p1.clientX) * 180 / Math.PI;\n    });\n    /**\n     * Update a PointerEvent inside current pointerevents array\n     * @param {PointerEvent} event\n     */\n    __publicField(this, \"updateTouchEvent\", event => {\n      for (let i = 0; i < this._touchCurrent.length; i++) {\n        if (this._touchCurrent[i].pointerId == event.pointerId) {\n          this._touchCurrent.splice(i, 1, event);\n          break;\n        }\n      }\n    });\n    /**\n     * Calculate the angular speed\n     * @param {Number} p0 Position at t0\n     * @param {Number} p1 Position at t1\n     * @param {Number} t0 Initial time in milliseconds\n     * @param {Number} t1 Ending time in milliseconds\n     */\n    __publicField(this, \"calculateAngularSpeed\", (p0, p1, t0, t1) => {\n      const s = p1 - p0;\n      const t = (t1 - t0) / 1e3;\n      if (t == 0) {\n        return 0;\n      }\n      return s / t;\n    });\n    /**\n     * Calculate the distance between two pointers\n     * @param {PointerEvent} p0 The first pointer\n     * @param {PointerEvent} p1 The second pointer\n     * @returns {number} The distance between the two pointers\n     */\n    __publicField(this, \"calculatePointersDistance\", (p0, p1) => {\n      return Math.sqrt(Math.pow(p1.clientX - p0.clientX, 2) + Math.pow(p1.clientY - p0.clientY, 2));\n    });\n    /**\n     * Calculate the rotation axis as the vector perpendicular between two vectors\n     * @param {Vector3} vec1 The first vector\n     * @param {Vector3} vec2 The second vector\n     * @returns {Vector3} The normalized rotation axis\n     */\n    __publicField(this, \"calculateRotationAxis\", (vec1, vec2) => {\n      this._rotationMatrix.extractRotation(this._cameraMatrixState);\n      this._quat.setFromRotationMatrix(this._rotationMatrix);\n      this._rotationAxis.crossVectors(vec1, vec2).applyQuaternion(this._quat);\n      return this._rotationAxis.normalize().clone();\n    });\n    /**\n     * Calculate the trackball radius so that gizmo's diamater will be 2/3 of the minimum side of the camera frustum\n     * @param {Camera} camera\n     * @returns {Number} The trackball radius\n     */\n    __publicField(this, \"calculateTbRadius\", camera => {\n      const factor = 0.67;\n      const distance = camera.position.distanceTo(this._gizmos.position);\n      if (camera instanceof PerspectiveCamera) {\n        const halfFovV = MathUtils.DEG2RAD * camera.fov * 0.5;\n        const halfFovH = Math.atan(camera.aspect * Math.tan(halfFovV));\n        return Math.tan(Math.min(halfFovV, halfFovH)) * distance * factor;\n      } else if (camera instanceof OrthographicCamera) {\n        return Math.min(camera.top, camera.right) * factor;\n      }\n    });\n    /**\n     * Focus operation consist of positioning the point of interest in front of the camera and a slightly zoom in\n     * @param {Vector3} point The point of interest\n     * @param {Number} size Scale factor\n     * @param {Number} amount Amount of operation to be completed (used for focus animations, default is complete full operation)\n     */\n    __publicField(this, \"focus\", function (point, size) {\n      let amount = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;\n      if (_this.camera) {\n        const focusPoint = point.clone();\n        focusPoint.sub(_this._gizmos.position).multiplyScalar(amount);\n        _this._translationMatrix.makeTranslation(focusPoint.x, focusPoint.y, focusPoint.z);\n        const gizmoStateTemp = _this._gizmoMatrixState.clone();\n        _this._gizmoMatrixState.premultiply(_this._translationMatrix);\n        _this._gizmoMatrixState.decompose(_this._gizmos.position, _this._gizmos.quaternion, _this._gizmos.scale);\n        const cameraStateTemp = _this._cameraMatrixState.clone();\n        _this._cameraMatrixState.premultiply(_this._translationMatrix);\n        _this._cameraMatrixState.decompose(_this.camera.position, _this.camera.quaternion, _this.camera.scale);\n        if (_this.enableZoom) {\n          _this.applyTransformMatrix(_this.applyScale(size, _this._gizmos.position));\n        }\n        _this._gizmoMatrixState.copy(gizmoStateTemp);\n        _this._cameraMatrixState.copy(cameraStateTemp);\n      }\n    });\n    /**\n     * Draw a grid and add it to the scene\n     */\n    __publicField(this, \"drawGrid\", () => {\n      if (this.scene) {\n        const color = 8947848;\n        const multiplier = 3;\n        let size, divisions, maxLength, tick;\n        if (this.camera instanceof OrthographicCamera) {\n          const width = this.camera.right - this.camera.left;\n          const height = this.camera.bottom - this.camera.top;\n          maxLength = Math.max(width, height);\n          tick = maxLength / 20;\n          size = maxLength / this.camera.zoom * multiplier;\n          divisions = size / tick * this.camera.zoom;\n        } else if (this.camera instanceof PerspectiveCamera) {\n          const distance = this.camera.position.distanceTo(this._gizmos.position);\n          const halfFovV = MathUtils.DEG2RAD * this.camera.fov * 0.5;\n          const halfFovH = Math.atan(this.camera.aspect * Math.tan(halfFovV));\n          maxLength = Math.tan(Math.max(halfFovV, halfFovH)) * distance * 2;\n          tick = maxLength / 20;\n          size = maxLength * multiplier;\n          divisions = size / tick;\n        }\n        if (this._grid == null && this.camera) {\n          this._grid = new GridHelper(size, divisions, color, color);\n          this._grid.position.copy(this._gizmos.position);\n          this._gridPosition.copy(this._grid.position);\n          this._grid.quaternion.copy(this.camera.quaternion);\n          this._grid.rotateX(Math.PI * 0.5);\n          this.scene.add(this._grid);\n        }\n      }\n    });\n    __publicField(this, \"connect\", domElement => {\n      if (domElement === document) {\n        console.error('THREE.ArcballControls: \"document\" should not be used as the target \"domElement\". Please use \"renderer.domElement\" instead.');\n      }\n      this.domElement = domElement;\n      this.domElement.style.touchAction = \"none\";\n      this.domElement.addEventListener(\"contextmenu\", this.onContextMenu);\n      this.domElement.addEventListener(\"pointerdown\", this.onPointerDown);\n      this.domElement.addEventListener(\"pointercancel\", this.onPointerCancel);\n      this.domElement.addEventListener(\"wheel\", this.onWheel);\n    });\n    /**\n     * Remove all listeners, stop animations and clean scene\n     */\n    __publicField(this, \"dispose\", () => {\n      var _a, _b, _c, _d, _e;\n      if (this._animationId != -1) {\n        window.cancelAnimationFrame(this._animationId);\n      }\n      (_a = this.domElement) == null ? void 0 : _a.removeEventListener(\"pointerdown\", this.onPointerDown);\n      (_b = this.domElement) == null ? void 0 : _b.removeEventListener(\"pointercancel\", this.onPointerCancel);\n      (_c = this.domElement) == null ? void 0 : _c.removeEventListener(\"wheel\", this.onWheel);\n      (_d = this.domElement) == null ? void 0 : _d.removeEventListener(\"contextmenu\", this.onContextMenu);\n      window.removeEventListener(\"pointermove\", this.onPointerMove);\n      window.removeEventListener(\"pointerup\", this.onPointerUp);\n      window.removeEventListener(\"resize\", this.onWindowResize);\n      (_e = this.scene) == null ? void 0 : _e.remove(this._gizmos);\n      this.disposeGrid();\n    });\n    /**\n     * remove the grid from the scene\n     */\n    __publicField(this, \"disposeGrid\", () => {\n      if (this._grid && this.scene) {\n        this.scene.remove(this._grid);\n        this._grid = null;\n      }\n    });\n    /**\n     * Compute the easing out cubic function for ease out effect in animation\n     * @param {Number} t The absolute progress of the animation in the bound of 0 (beginning of the) and 1 (ending of animation)\n     * @returns {Number} Result of easing out cubic at time t\n     */\n    __publicField(this, \"easeOutCubic\", t => {\n      return 1 - Math.pow(1 - t, 3);\n    });\n    /**\n     * Make rotation gizmos more or less visible\n     * @param {Boolean} isActive If true, make gizmos more visible\n     */\n    __publicField(this, \"activateGizmos\", isActive => {\n      for (const gizmo of this._gizmos.children) {\n        ;\n        gizmo.material.setValues({\n          opacity: isActive ? 1 : 0.6\n        });\n      }\n    });\n    /**\n     * Calculate the cursor position in NDC\n     * @param {number} x Cursor horizontal coordinate within the canvas\n     * @param {number} y Cursor vertical coordinate within the canvas\n     * @param {HTMLElement} canvas The canvas where the renderer draws its output\n     * @returns {Vector2} Cursor normalized position inside the canvas\n     */\n    __publicField(this, \"getCursorNDC\", (cursorX, cursorY, canvas) => {\n      const canvasRect = canvas.getBoundingClientRect();\n      this._v2_1.setX((cursorX - canvasRect.left) / canvasRect.width * 2 - 1);\n      this._v2_1.setY((canvasRect.bottom - cursorY) / canvasRect.height * 2 - 1);\n      return this._v2_1.clone();\n    });\n    /**\n     * Calculate the cursor position inside the canvas x/y coordinates with the origin being in the center of the canvas\n     * @param {Number} x Cursor horizontal coordinate within the canvas\n     * @param {Number} y Cursor vertical coordinate within the canvas\n     * @param {HTMLElement} canvas The canvas where the renderer draws its output\n     * @returns {Vector2} Cursor position inside the canvas\n     */\n    __publicField(this, \"getCursorPosition\", (cursorX, cursorY, canvas) => {\n      this._v2_1.copy(this.getCursorNDC(cursorX, cursorY, canvas));\n      if (this.camera instanceof OrthographicCamera) {\n        this._v2_1.x *= (this.camera.right - this.camera.left) * 0.5;\n        this._v2_1.y *= (this.camera.top - this.camera.bottom) * 0.5;\n      }\n      return this._v2_1.clone();\n    });\n    /**\n     * Set the camera to be controlled\n     * @param {Camera} camera The virtual camera to be controlled\n     */\n    __publicField(this, \"setCamera\", camera => {\n      if (camera) {\n        camera.lookAt(this.target);\n        camera.updateMatrix();\n        if (camera instanceof PerspectiveCamera) {\n          this._fov0 = camera.fov;\n          this._fovState = camera.fov;\n        }\n        this._cameraMatrixState0.copy(camera.matrix);\n        this._cameraMatrixState.copy(this._cameraMatrixState0);\n        this._cameraProjectionState.copy(camera.projectionMatrix);\n        this._zoom0 = camera.zoom;\n        this._zoomState = this._zoom0;\n        this._initialNear = camera.near;\n        this._nearPos0 = camera.position.distanceTo(this.target) - camera.near;\n        this._nearPos = this._initialNear;\n        this._initialFar = camera.far;\n        this._farPos0 = camera.position.distanceTo(this.target) - camera.far;\n        this._farPos = this._initialFar;\n        this._up0.copy(camera.up);\n        this._upState.copy(camera.up);\n        this.camera = camera;\n        this.camera.updateProjectionMatrix();\n        const tbRadius = this.calculateTbRadius(camera);\n        if (tbRadius !== void 0) {\n          this._tbRadius = tbRadius;\n        }\n        this.makeGizmos(this.target, this._tbRadius);\n      }\n    });\n    /**\n     * Creates the rotation gizmos matching trackball center and radius\n     * @param {Vector3} tbCenter The trackball center\n     * @param {number} tbRadius The trackball radius\n     */\n    __publicField(this, \"makeGizmos\", (tbCenter, tbRadius) => {\n      const curve = new EllipseCurve(0, 0, tbRadius, tbRadius);\n      const points = curve.getPoints(this._curvePts);\n      const curveGeometry = new BufferGeometry().setFromPoints(points);\n      const curveMaterialX = new LineBasicMaterial({\n        color: 16744576,\n        fog: false,\n        transparent: true,\n        opacity: 0.6\n      });\n      const curveMaterialY = new LineBasicMaterial({\n        color: 8454016,\n        fog: false,\n        transparent: true,\n        opacity: 0.6\n      });\n      const curveMaterialZ = new LineBasicMaterial({\n        color: 8421631,\n        fog: false,\n        transparent: true,\n        opacity: 0.6\n      });\n      const gizmoX = new Line(curveGeometry, curveMaterialX);\n      const gizmoY = new Line(curveGeometry, curveMaterialY);\n      const gizmoZ = new Line(curveGeometry, curveMaterialZ);\n      const rotation = Math.PI * 0.5;\n      gizmoX.rotation.x = rotation;\n      gizmoY.rotation.y = rotation;\n      this._gizmoMatrixState0.identity().setPosition(tbCenter);\n      this._gizmoMatrixState.copy(this._gizmoMatrixState0);\n      if (this.camera && this.camera.zoom != 1) {\n        const size = 1 / this.camera.zoom;\n        this._scaleMatrix.makeScale(size, size, size);\n        this._translationMatrix.makeTranslation(-tbCenter.x, -tbCenter.y, -tbCenter.z);\n        this._gizmoMatrixState.premultiply(this._translationMatrix).premultiply(this._scaleMatrix);\n        this._translationMatrix.makeTranslation(tbCenter.x, tbCenter.y, tbCenter.z);\n        this._gizmoMatrixState.premultiply(this._translationMatrix);\n      }\n      this._gizmoMatrixState.decompose(this._gizmos.position, this._gizmos.quaternion, this._gizmos.scale);\n      this._gizmos.clear();\n      this._gizmos.add(gizmoX);\n      this._gizmos.add(gizmoY);\n      this._gizmos.add(gizmoZ);\n    });\n    /**\n     * Perform animation for focus operation\n     * @param {Number} time Instant in which this function is called as performance.now()\n     * @param {Vector3} point Point of interest for focus operation\n     * @param {Matrix4} cameraMatrix Camera matrix\n     * @param {Matrix4} gizmoMatrix Gizmos matrix\n     */\n    __publicField(this, \"onFocusAnim\", (time, point, cameraMatrix, gizmoMatrix) => {\n      if (this._timeStart == -1) {\n        this._timeStart = time;\n      }\n      if (this._state == STATE.ANIMATION_FOCUS) {\n        const deltaTime = time - this._timeStart;\n        const animTime = deltaTime / this.focusAnimationTime;\n        this._gizmoMatrixState.copy(gizmoMatrix);\n        if (animTime >= 1) {\n          this._gizmoMatrixState.decompose(this._gizmos.position, this._gizmos.quaternion, this._gizmos.scale);\n          this.focus(point, this.scaleFactor);\n          this._timeStart = -1;\n          this.updateTbState(STATE.IDLE, false);\n          this.activateGizmos(false);\n          this.dispatchEvent(_changeEvent);\n        } else {\n          const amount = this.easeOutCubic(animTime);\n          const size = 1 - amount + this.scaleFactor * amount;\n          this._gizmoMatrixState.decompose(this._gizmos.position, this._gizmos.quaternion, this._gizmos.scale);\n          this.focus(point, size, amount);\n          this.dispatchEvent(_changeEvent);\n          const self = this;\n          this._animationId = window.requestAnimationFrame(function (t) {\n            self.onFocusAnim(t, point, cameraMatrix, gizmoMatrix.clone());\n          });\n        }\n      } else {\n        this._animationId = -1;\n        this._timeStart = -1;\n      }\n    });\n    /**\n     * Perform animation for rotation operation\n     * @param {Number} time Instant in which this function is called as performance.now()\n     * @param {Vector3} rotationAxis Rotation axis\n     * @param {number} w0 Initial angular velocity\n     */\n    __publicField(this, \"onRotationAnim\", (time, rotationAxis, w0) => {\n      if (this._timeStart == -1) {\n        this._anglePrev = 0;\n        this._angleCurrent = 0;\n        this._timeStart = time;\n      }\n      if (this._state == STATE.ANIMATION_ROTATE) {\n        const deltaTime = (time - this._timeStart) / 1e3;\n        const w = w0 + -this.dampingFactor * deltaTime;\n        if (w > 0) {\n          this._angleCurrent = 0.5 * -this.dampingFactor * Math.pow(deltaTime, 2) + w0 * deltaTime + 0;\n          this.applyTransformMatrix(this.rotate(rotationAxis, this._angleCurrent));\n          this.dispatchEvent(_changeEvent);\n          const self = this;\n          this._animationId = window.requestAnimationFrame(function (t) {\n            self.onRotationAnim(t, rotationAxis, w0);\n          });\n        } else {\n          this._animationId = -1;\n          this._timeStart = -1;\n          this.updateTbState(STATE.IDLE, false);\n          this.activateGizmos(false);\n          this.dispatchEvent(_changeEvent);\n        }\n      } else {\n        this._animationId = -1;\n        this._timeStart = -1;\n        if (this._state != STATE.ROTATE) {\n          this.activateGizmos(false);\n          this.dispatchEvent(_changeEvent);\n        }\n      }\n    });\n    /**\n     * Perform pan operation moving camera between two points\n     * @param {Vector3} p0 Initial point\n     * @param {Vector3} p1 Ending point\n     * @param {Boolean} adjust If movement should be adjusted considering camera distance (Perspective only)\n     */\n    __publicField(this, \"pan\", function (p0, p1) {\n      let adjust = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n      if (_this.camera) {\n        const movement = p0.clone().sub(p1);\n        if (_this.camera instanceof OrthographicCamera) {\n          movement.multiplyScalar(1 / _this.camera.zoom);\n        }\n        if (_this.camera instanceof PerspectiveCamera && adjust) {\n          _this._v3_1.setFromMatrixPosition(_this._cameraMatrixState0);\n          _this._v3_2.setFromMatrixPosition(_this._gizmoMatrixState0);\n          const distanceFactor = _this._v3_1.distanceTo(_this._v3_2) / _this.camera.position.distanceTo(_this._gizmos.position);\n          movement.multiplyScalar(1 / distanceFactor);\n        }\n        _this._v3_1.set(movement.x, movement.y, 0).applyQuaternion(_this.camera.quaternion);\n        _this._m4_1.makeTranslation(_this._v3_1.x, _this._v3_1.y, _this._v3_1.z);\n        _this.setTransformationMatrices(_this._m4_1, _this._m4_1);\n      }\n      return _transformation;\n    });\n    /**\n     * Reset trackball\n     */\n    __publicField(this, \"reset\", () => {\n      if (this.camera) {\n        this.camera.zoom = this._zoom0;\n        if (this.camera instanceof PerspectiveCamera) {\n          this.camera.fov = this._fov0;\n        }\n        this.camera.near = this._nearPos;\n        this.camera.far = this._farPos;\n        this._cameraMatrixState.copy(this._cameraMatrixState0);\n        this._cameraMatrixState.decompose(this.camera.position, this.camera.quaternion, this.camera.scale);\n        this.camera.up.copy(this._up0);\n        this.camera.updateMatrix();\n        this.camera.updateProjectionMatrix();\n        this._gizmoMatrixState.copy(this._gizmoMatrixState0);\n        this._gizmoMatrixState0.decompose(this._gizmos.position, this._gizmos.quaternion, this._gizmos.scale);\n        this._gizmos.updateMatrix();\n        const tbRadius = this.calculateTbRadius(this.camera);\n        if (tbRadius !== void 0) {\n          this._tbRadius = tbRadius;\n        }\n        this.makeGizmos(this._gizmos.position, this._tbRadius);\n        this.camera.lookAt(this._gizmos.position);\n        this.updateTbState(STATE.IDLE, false);\n        this.dispatchEvent(_changeEvent);\n      }\n    });\n    /**\n     * Rotate the camera around an axis passing by trackball's center\n     * @param {Vector3} axis Rotation axis\n     * @param {number} angle Angle in radians\n     * @returns {Object} Object with 'camera' field containing transformation matrix resulting from the operation to be applied to the camera\n     */\n    __publicField(this, \"rotate\", (axis, angle) => {\n      const point = this._gizmos.position;\n      this._translationMatrix.makeTranslation(-point.x, -point.y, -point.z);\n      this._rotationMatrix.makeRotationAxis(axis, -angle);\n      this._m4_1.makeTranslation(point.x, point.y, point.z);\n      this._m4_1.multiply(this._rotationMatrix);\n      this._m4_1.multiply(this._translationMatrix);\n      this.setTransformationMatrices(this._m4_1);\n      return _transformation;\n    });\n    __publicField(this, \"copyState\", () => {\n      if (this.camera) {\n        const state = JSON.stringify(this.camera instanceof OrthographicCamera ? {\n          arcballState: {\n            cameraFar: this.camera.far,\n            cameraMatrix: this.camera.matrix,\n            cameraNear: this.camera.near,\n            cameraUp: this.camera.up,\n            cameraZoom: this.camera.zoom,\n            gizmoMatrix: this._gizmos.matrix\n          }\n        } : {\n          arcballState: {\n            cameraFar: this.camera.far,\n            cameraFov: this.camera.fov,\n            cameraMatrix: this.camera.matrix,\n            cameraNear: this.camera.near,\n            cameraUp: this.camera.up,\n            cameraZoom: this.camera.zoom,\n            gizmoMatrix: this._gizmos.matrix\n          }\n        });\n        navigator.clipboard.writeText(state);\n      }\n    });\n    __publicField(this, \"pasteState\", () => {\n      const self = this;\n      navigator.clipboard.readText().then(function resolved(value) {\n        self.setStateFromJSON(value);\n      });\n    });\n    /**\n     * Save the current state of the control. This can later be recovered with .reset\n     */\n    __publicField(this, \"saveState\", () => {\n      if (!this.camera) return;\n      this._cameraMatrixState0.copy(this.camera.matrix);\n      this._gizmoMatrixState0.copy(this._gizmos.matrix);\n      this._nearPos = this.camera.near;\n      this._farPos = this.camera.far;\n      this._zoom0 = this.camera.zoom;\n      this._up0.copy(this.camera.up);\n      if (this.camera instanceof PerspectiveCamera) {\n        this._fov0 = this.camera.fov;\n      }\n    });\n    /**\n     * Perform uniform scale operation around a given point\n     * @param {Number} size Scale factor\n     * @param {Vector3} point Point around which scale\n     * @param {Boolean} scaleGizmos If gizmos should be scaled (Perspective only)\n     * @returns {Object} Object with 'camera' and 'gizmo' fields containing transformation matrices resulting from the operation to be applied to the camera and gizmos\n     */\n    __publicField(this, \"applyScale\", function (size, point) {\n      let scaleGizmos = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n      if (!_this.camera) return;\n      const scalePoint = point.clone();\n      let sizeInverse = 1 / size;\n      if (_this.camera instanceof OrthographicCamera) {\n        _this.camera.zoom = _this._zoomState;\n        _this.camera.zoom *= size;\n        if (_this.camera.zoom > _this.maxZoom) {\n          _this.camera.zoom = _this.maxZoom;\n          sizeInverse = _this._zoomState / _this.maxZoom;\n        } else if (_this.camera.zoom < _this.minZoom) {\n          _this.camera.zoom = _this.minZoom;\n          sizeInverse = _this._zoomState / _this.minZoom;\n        }\n        _this.camera.updateProjectionMatrix();\n        _this._v3_1.setFromMatrixPosition(_this._gizmoMatrixState);\n        _this._scaleMatrix.makeScale(sizeInverse, sizeInverse, sizeInverse);\n        _this._translationMatrix.makeTranslation(-_this._v3_1.x, -_this._v3_1.y, -_this._v3_1.z);\n        _this._m4_2.makeTranslation(_this._v3_1.x, _this._v3_1.y, _this._v3_1.z).multiply(_this._scaleMatrix);\n        _this._m4_2.multiply(_this._translationMatrix);\n        scalePoint.sub(_this._v3_1);\n        const amount = scalePoint.clone().multiplyScalar(sizeInverse);\n        scalePoint.sub(amount);\n        _this._m4_1.makeTranslation(scalePoint.x, scalePoint.y, scalePoint.z);\n        _this._m4_2.premultiply(_this._m4_1);\n        _this.setTransformationMatrices(_this._m4_1, _this._m4_2);\n        return _transformation;\n      }\n      if (_this.camera instanceof PerspectiveCamera) {\n        _this._v3_1.setFromMatrixPosition(_this._cameraMatrixState);\n        _this._v3_2.setFromMatrixPosition(_this._gizmoMatrixState);\n        let distance = _this._v3_1.distanceTo(scalePoint);\n        let amount = distance - distance * sizeInverse;\n        const newDistance = distance - amount;\n        if (newDistance < _this.minDistance) {\n          sizeInverse = _this.minDistance / distance;\n          amount = distance - distance * sizeInverse;\n        } else if (newDistance > _this.maxDistance) {\n          sizeInverse = _this.maxDistance / distance;\n          amount = distance - distance * sizeInverse;\n        }\n        let direction = scalePoint.clone().sub(_this._v3_1).normalize().multiplyScalar(amount);\n        _this._m4_1.makeTranslation(direction.x, direction.y, direction.z);\n        if (scaleGizmos) {\n          const pos = _this._v3_2;\n          distance = pos.distanceTo(scalePoint);\n          amount = distance - distance * sizeInverse;\n          direction = scalePoint.clone().sub(_this._v3_2).normalize().multiplyScalar(amount);\n          _this._translationMatrix.makeTranslation(pos.x, pos.y, pos.z);\n          _this._scaleMatrix.makeScale(sizeInverse, sizeInverse, sizeInverse);\n          _this._m4_2.makeTranslation(direction.x, direction.y, direction.z).multiply(_this._translationMatrix);\n          _this._m4_2.multiply(_this._scaleMatrix);\n          _this._translationMatrix.makeTranslation(-pos.x, -pos.y, -pos.z);\n          _this._m4_2.multiply(_this._translationMatrix);\n          _this.setTransformationMatrices(_this._m4_1, _this._m4_2);\n        } else {\n          _this.setTransformationMatrices(_this._m4_1);\n        }\n        return _transformation;\n      }\n    });\n    /**\n     * Set camera fov\n     * @param {Number} value fov to be setted\n     */\n    __publicField(this, \"setFov\", value => {\n      if (this.camera instanceof PerspectiveCamera) {\n        this.camera.fov = MathUtils.clamp(value, this.minFov, this.maxFov);\n        this.camera.updateProjectionMatrix();\n      }\n    });\n    /**\n     * Set the trackball's center point\n     * @param {Number} x X coordinate\n     * @param {Number} y Y coordinate\n     * @param {Number} z Z coordinate\n     */\n    __publicField(this, \"setTarget\", (x, y, z) => {\n      if (this.camera) {\n        this.target.set(x, y, z);\n        this._gizmos.position.set(x, y, z);\n        const tbRadius = this.calculateTbRadius(this.camera);\n        if (tbRadius !== void 0) {\n          this._tbRadius = tbRadius;\n        }\n        this.makeGizmos(this.target, this._tbRadius);\n        this.camera.lookAt(this.target);\n      }\n    });\n    /**\n     * Rotate camera around its direction axis passing by a given point by a given angle\n     * @param {Vector3} point The point where the rotation axis is passing trough\n     * @param {Number} angle Angle in radians\n     * @returns The computed transormation matix\n     */\n    __publicField(this, \"zRotate\", (point, angle) => {\n      this._rotationMatrix.makeRotationAxis(this._rotationAxis, angle);\n      this._translationMatrix.makeTranslation(-point.x, -point.y, -point.z);\n      this._m4_1.makeTranslation(point.x, point.y, point.z);\n      this._m4_1.multiply(this._rotationMatrix);\n      this._m4_1.multiply(this._translationMatrix);\n      this._v3_1.setFromMatrixPosition(this._gizmoMatrixState).sub(point);\n      this._v3_2.copy(this._v3_1).applyAxisAngle(this._rotationAxis, angle);\n      this._v3_2.sub(this._v3_1);\n      this._m4_2.makeTranslation(this._v3_2.x, this._v3_2.y, this._v3_2.z);\n      this.setTransformationMatrices(this._m4_1, this._m4_2);\n      return _transformation;\n    });\n    /**\n     * Unproject the cursor on the 3D object surface\n     * @param {Vector2} cursor Cursor coordinates in NDC\n     * @param {Camera} camera Virtual camera\n     * @returns {Vector3} The point of intersection with the model, if exist, null otherwise\n     */\n    __publicField(this, \"unprojectOnObj\", (cursor, camera) => {\n      if (!this.scene) return null;\n      const raycaster = new Raycaster();\n      raycaster.near = camera.near;\n      raycaster.far = camera.far;\n      raycaster.setFromCamera(cursor, camera);\n      const intersect = raycaster.intersectObjects(this.scene.children, true);\n      for (let i = 0; i < intersect.length; i++) {\n        if (intersect[i].object.uuid != this._gizmos.uuid && intersect[i].face) {\n          return intersect[i].point.clone();\n        }\n      }\n      return null;\n    });\n    /**\n     * Unproject the cursor on the trackball surface\n     * @param {Camera} camera The virtual camera\n     * @param {Number} cursorX Cursor horizontal coordinate on screen\n     * @param {Number} cursorY Cursor vertical coordinate on screen\n     * @param {HTMLElement} canvas The canvas where the renderer draws its output\n     * @param {number} tbRadius The trackball radius\n     * @returns {Vector3} The unprojected point on the trackball surface\n     */\n    __publicField(this, \"unprojectOnTbSurface\", (camera, cursorX, cursorY, canvas, tbRadius) => {\n      if (camera instanceof OrthographicCamera) {\n        this._v2_1.copy(this.getCursorPosition(cursorX, cursorY, canvas));\n        this._v3_1.set(this._v2_1.x, this._v2_1.y, 0);\n        const x2 = Math.pow(this._v2_1.x, 2);\n        const y2 = Math.pow(this._v2_1.y, 2);\n        const r2 = Math.pow(this._tbRadius, 2);\n        if (x2 + y2 <= r2 * 0.5) {\n          this._v3_1.setZ(Math.sqrt(r2 - (x2 + y2)));\n        } else {\n          this._v3_1.setZ(r2 * 0.5 / Math.sqrt(x2 + y2));\n        }\n        return this._v3_1;\n      }\n      if (camera instanceof PerspectiveCamera) {\n        this._v2_1.copy(this.getCursorNDC(cursorX, cursorY, canvas));\n        this._v3_1.set(this._v2_1.x, this._v2_1.y, -1);\n        this._v3_1.applyMatrix4(camera.projectionMatrixInverse);\n        const rayDir = this._v3_1.clone().normalize();\n        const cameraGizmoDistance = camera.position.distanceTo(this._gizmos.position);\n        const radius2 = Math.pow(tbRadius, 2);\n        const h = this._v3_1.z;\n        const l = Math.sqrt(Math.pow(this._v3_1.x, 2) + Math.pow(this._v3_1.y, 2));\n        if (l == 0) {\n          rayDir.set(this._v3_1.x, this._v3_1.y, tbRadius);\n          return rayDir;\n        }\n        const m = h / l;\n        const q = cameraGizmoDistance;\n        let a = Math.pow(m, 2) + 1;\n        let b = 2 * m * q;\n        let c = Math.pow(q, 2) - radius2;\n        let delta = Math.pow(b, 2) - 4 * a * c;\n        if (delta >= 0) {\n          this._v2_1.setX((-b - Math.sqrt(delta)) / (2 * a));\n          this._v2_1.setY(m * this._v2_1.x + q);\n          const angle = MathUtils.RAD2DEG * this._v2_1.angle();\n          if (angle >= 45) {\n            const rayLength2 = Math.sqrt(Math.pow(this._v2_1.x, 2) + Math.pow(cameraGizmoDistance - this._v2_1.y, 2));\n            rayDir.multiplyScalar(rayLength2);\n            rayDir.z += cameraGizmoDistance;\n            return rayDir;\n          }\n        }\n        a = m;\n        b = q;\n        c = -radius2 * 0.5;\n        delta = Math.pow(b, 2) - 4 * a * c;\n        this._v2_1.setX((-b - Math.sqrt(delta)) / (2 * a));\n        this._v2_1.setY(m * this._v2_1.x + q);\n        const rayLength = Math.sqrt(Math.pow(this._v2_1.x, 2) + Math.pow(cameraGizmoDistance - this._v2_1.y, 2));\n        rayDir.multiplyScalar(rayLength);\n        rayDir.z += cameraGizmoDistance;\n        return rayDir;\n      }\n    });\n    /**\n     * Unproject the cursor on the plane passing through the center of the trackball orthogonal to the camera\n     * @param {Camera} camera The virtual camera\n     * @param {Number} cursorX Cursor horizontal coordinate on screen\n     * @param {Number} cursorY Cursor vertical coordinate on screen\n     * @param {HTMLElement} canvas The canvas where the renderer draws its output\n     * @param {Boolean} initialDistance If initial distance between camera and gizmos should be used for calculations instead of current (Perspective only)\n     * @returns {Vector3} The unprojected point on the trackball plane\n     */\n    __publicField(this, \"unprojectOnTbPlane\", function (camera, cursorX, cursorY, canvas) {\n      let initialDistance = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;\n      if (camera instanceof OrthographicCamera) {\n        _this._v2_1.copy(_this.getCursorPosition(cursorX, cursorY, canvas));\n        _this._v3_1.set(_this._v2_1.x, _this._v2_1.y, 0);\n        return _this._v3_1.clone();\n      }\n      if (camera instanceof PerspectiveCamera) {\n        _this._v2_1.copy(_this.getCursorNDC(cursorX, cursorY, canvas));\n        _this._v3_1.set(_this._v2_1.x, _this._v2_1.y, -1);\n        _this._v3_1.applyMatrix4(camera.projectionMatrixInverse);\n        const rayDir = _this._v3_1.clone().normalize();\n        const h = _this._v3_1.z;\n        const l = Math.sqrt(Math.pow(_this._v3_1.x, 2) + Math.pow(_this._v3_1.y, 2));\n        let cameraGizmoDistance;\n        if (initialDistance) {\n          cameraGizmoDistance = _this._v3_1.setFromMatrixPosition(_this._cameraMatrixState0).distanceTo(_this._v3_2.setFromMatrixPosition(_this._gizmoMatrixState0));\n        } else {\n          cameraGizmoDistance = camera.position.distanceTo(_this._gizmos.position);\n        }\n        if (l == 0) {\n          rayDir.set(0, 0, 0);\n          return rayDir;\n        }\n        const m = h / l;\n        const q = cameraGizmoDistance;\n        const x = -q / m;\n        const rayLength = Math.sqrt(Math.pow(q, 2) + Math.pow(x, 2));\n        rayDir.multiplyScalar(rayLength);\n        rayDir.z = 0;\n        return rayDir;\n      }\n    });\n    /**\n     * Update camera and gizmos state\n     */\n    __publicField(this, \"updateMatrixState\", () => {\n      if (!this.camera) return;\n      this._cameraMatrixState.copy(this.camera.matrix);\n      this._gizmoMatrixState.copy(this._gizmos.matrix);\n      if (this.camera instanceof OrthographicCamera) {\n        this._cameraProjectionState.copy(this.camera.projectionMatrix);\n        this.camera.updateProjectionMatrix();\n        this._zoomState = this.camera.zoom;\n      }\n      if (this.camera instanceof PerspectiveCamera) {\n        this._fovState = this.camera.fov;\n      }\n    });\n    /**\n     * Update the trackball FSA\n     * @param {STATE} newState New state of the FSA\n     * @param {Boolean} updateMatrices If matriices state should be updated\n     */\n    __publicField(this, \"updateTbState\", (newState, updateMatrices) => {\n      this._state = newState;\n      if (updateMatrices) {\n        this.updateMatrixState();\n      }\n    });\n    __publicField(this, \"update\", () => {\n      const EPS = 1e-6;\n      if (!this.target.equals(this._currentTarget) && this.camera) {\n        this._gizmos.position.set(this.target.x, this.target.y, this.target.z);\n        const tbRadius = this.calculateTbRadius(this.camera);\n        if (tbRadius !== void 0) {\n          this._tbRadius = tbRadius;\n        }\n        this.makeGizmos(this.target, this._tbRadius);\n        this._currentTarget.copy(this.target);\n      }\n      if (!this.camera) return;\n      if (this.camera instanceof OrthographicCamera) {\n        if (this.camera.zoom > this.maxZoom || this.camera.zoom < this.minZoom) {\n          const newZoom = MathUtils.clamp(this.camera.zoom, this.minZoom, this.maxZoom);\n          this.applyTransformMatrix(this.applyScale(newZoom / this.camera.zoom, this._gizmos.position, true));\n        }\n      }\n      if (this.camera instanceof PerspectiveCamera) {\n        const distance = this.camera.position.distanceTo(this._gizmos.position);\n        if (distance > this.maxDistance + EPS || distance < this.minDistance - EPS) {\n          const newDistance = MathUtils.clamp(distance, this.minDistance, this.maxDistance);\n          this.applyTransformMatrix(this.applyScale(newDistance / distance, this._gizmos.position));\n          this.updateMatrixState();\n        }\n        if (this.camera.fov < this.minFov || this.camera.fov > this.maxFov) {\n          this.camera.fov = MathUtils.clamp(this.camera.fov, this.minFov, this.maxFov);\n          this.camera.updateProjectionMatrix();\n        }\n        const oldRadius = this._tbRadius;\n        const tbRadius = this.calculateTbRadius(this.camera);\n        if (tbRadius !== void 0) {\n          this._tbRadius = tbRadius;\n        }\n        if (oldRadius < this._tbRadius - EPS || oldRadius > this._tbRadius + EPS) {\n          const scale = (this._gizmos.scale.x + this._gizmos.scale.y + this._gizmos.scale.z) / 3;\n          const newRadius = this._tbRadius / scale;\n          const curve = new EllipseCurve(0, 0, newRadius, newRadius);\n          const points = curve.getPoints(this._curvePts);\n          const curveGeometry = new BufferGeometry().setFromPoints(points);\n          for (const gizmo in this._gizmos.children) {\n            const child = this._gizmos.children[gizmo];\n            child.geometry = curveGeometry;\n          }\n        }\n      }\n      this.camera.lookAt(this._gizmos.position);\n    });\n    __publicField(this, \"setStateFromJSON\", json => {\n      const state = JSON.parse(json);\n      if (state.arcballState && this.camera) {\n        this._cameraMatrixState.fromArray(state.arcballState.cameraMatrix.elements);\n        this._cameraMatrixState.decompose(this.camera.position, this.camera.quaternion, this.camera.scale);\n        this.camera.up.copy(state.arcballState.cameraUp);\n        this.camera.near = state.arcballState.cameraNear;\n        this.camera.far = state.arcballState.cameraFar;\n        this.camera.zoom = state.arcballState.cameraZoom;\n        if (this.camera instanceof PerspectiveCamera) {\n          this.camera.fov = state.arcballState.cameraFov;\n        }\n        this._gizmoMatrixState.fromArray(state.arcballState.gizmoMatrix.elements);\n        this._gizmoMatrixState.decompose(this._gizmos.position, this._gizmos.quaternion, this._gizmos.scale);\n        this.camera.updateMatrix();\n        this.camera.updateProjectionMatrix();\n        this._gizmos.updateMatrix();\n        const tbRadius = this.calculateTbRadius(this.camera);\n        if (tbRadius !== void 0) {\n          this._tbRadius = tbRadius;\n        }\n        const gizmoTmp = new Matrix4().copy(this._gizmoMatrixState0);\n        this.makeGizmos(this._gizmos.position, this._tbRadius);\n        this._gizmoMatrixState0.copy(gizmoTmp);\n        this.camera.lookAt(this._gizmos.position);\n        this.updateTbState(STATE.IDLE, false);\n        this.dispatchEvent(_changeEvent);\n      }\n    });\n    this.camera = null;\n    this.domElement = domElement;\n    this.scene = scene;\n    this.mouseActions = [];\n    this._mouseOp = null;\n    this._v2_1 = new Vector2();\n    this._v3_1 = new Vector3();\n    this._v3_2 = new Vector3();\n    this._m4_1 = new Matrix4();\n    this._m4_2 = new Matrix4();\n    this._quat = new Quaternion();\n    this._translationMatrix = new Matrix4();\n    this._rotationMatrix = new Matrix4();\n    this._scaleMatrix = new Matrix4();\n    this._rotationAxis = new Vector3();\n    this._cameraMatrixState = new Matrix4();\n    this._cameraProjectionState = new Matrix4();\n    this._fovState = 1;\n    this._upState = new Vector3();\n    this._zoomState = 1;\n    this._nearPos = 0;\n    this._farPos = 0;\n    this._gizmoMatrixState = new Matrix4();\n    this._up0 = new Vector3();\n    this._zoom0 = 1;\n    this._fov0 = 0;\n    this._initialNear = 0;\n    this._nearPos0 = 0;\n    this._initialFar = 0;\n    this._farPos0 = 0;\n    this._cameraMatrixState0 = new Matrix4();\n    this._gizmoMatrixState0 = new Matrix4();\n    this._button = -1;\n    this._touchStart = [];\n    this._touchCurrent = [];\n    this._input = INPUT.NONE;\n    this._switchSensibility = 32;\n    this._startFingerDistance = 0;\n    this._currentFingerDistance = 0;\n    this._startFingerRotation = 0;\n    this._currentFingerRotation = 0;\n    this._devPxRatio = 0;\n    this._downValid = true;\n    this._nclicks = 0;\n    this._downEvents = [];\n    this._clickStart = 0;\n    this._maxDownTime = 250;\n    this._maxInterval = 300;\n    this._posThreshold = 24;\n    this._movementThreshold = 24;\n    this._currentCursorPosition = new Vector3();\n    this._startCursorPosition = new Vector3();\n    this._grid = null;\n    this._gridPosition = new Vector3();\n    this._gizmos = new Group();\n    this._curvePts = 128;\n    this._timeStart = -1;\n    this._animationId = -1;\n    this.focusAnimationTime = 500;\n    this._timePrev = 0;\n    this._timeCurrent = 0;\n    this._anglePrev = 0;\n    this._angleCurrent = 0;\n    this._cursorPosPrev = new Vector3();\n    this._cursorPosCurr = new Vector3();\n    this._wPrev = 0;\n    this._wCurr = 0;\n    this.adjustNearFar = false;\n    this.scaleFactor = 1.1;\n    this.dampingFactor = 25;\n    this.wMax = 20;\n    this.enableAnimations = true;\n    this.enableGrid = false;\n    this.cursorZoom = false;\n    this.minFov = 5;\n    this.maxFov = 90;\n    this.enabled = true;\n    this.enablePan = true;\n    this.enableRotate = true;\n    this.enableZoom = true;\n    this.minDistance = 0;\n    this.maxDistance = Infinity;\n    this.minZoom = 0;\n    this.maxZoom = Infinity;\n    this.target = new Vector3(0, 0, 0);\n    this._currentTarget = new Vector3(0, 0, 0);\n    this._tbRadius = 1;\n    this._state = STATE.IDLE;\n    this.setCamera(camera);\n    if (this.scene) {\n      this.scene.add(this._gizmos);\n    }\n    this._devPxRatio = window.devicePixelRatio;\n    this.initializeMouseActions();\n    if (this.domElement) this.connect(this.domElement);\n    window.addEventListener(\"resize\", this.onWindowResize);\n  }\n  /**\n   * Apply a transformation matrix, to the camera and gizmos\n   * @param {Object} transformation Object containing matrices to apply to camera and gizmos\n   */\n  applyTransformMatrix(transformation) {\n    if ((transformation == null ? void 0 : transformation.camera) && this.camera) {\n      this._m4_1.copy(this._cameraMatrixState).premultiply(transformation.camera);\n      this._m4_1.decompose(this.camera.position, this.camera.quaternion, this.camera.scale);\n      this.camera.updateMatrix();\n      if (this._state == STATE.ROTATE || this._state == STATE.ZROTATE || this._state == STATE.ANIMATION_ROTATE) {\n        this.camera.up.copy(this._upState).applyQuaternion(this.camera.quaternion);\n      }\n    }\n    if (transformation == null ? void 0 : transformation.gizmos) {\n      this._m4_1.copy(this._gizmoMatrixState).premultiply(transformation.gizmos);\n      this._m4_1.decompose(this._gizmos.position, this._gizmos.quaternion, this._gizmos.scale);\n      this._gizmos.updateMatrix();\n    }\n    if ((this._state == STATE.SCALE || this._state == STATE.FOCUS || this._state == STATE.ANIMATION_FOCUS) && this.camera) {\n      const tbRadius = this.calculateTbRadius(this.camera);\n      if (tbRadius !== void 0) {\n        this._tbRadius = tbRadius;\n      }\n      if (this.adjustNearFar) {\n        const cameraDistance = this.camera.position.distanceTo(this._gizmos.position);\n        const bb = new Box3();\n        bb.setFromObject(this._gizmos);\n        const sphere = new Sphere();\n        bb.getBoundingSphere(sphere);\n        const adjustedNearPosition = Math.max(this._nearPos0, sphere.radius + sphere.center.length());\n        const regularNearPosition = cameraDistance - this._initialNear;\n        const minNearPos = Math.min(adjustedNearPosition, regularNearPosition);\n        this.camera.near = cameraDistance - minNearPos;\n        const adjustedFarPosition = Math.min(this._farPos0, -sphere.radius + sphere.center.length());\n        const regularFarPosition = cameraDistance - this._initialFar;\n        const minFarPos = Math.min(adjustedFarPosition, regularFarPosition);\n        this.camera.far = cameraDistance - minFarPos;\n        this.camera.updateProjectionMatrix();\n      } else {\n        let update = false;\n        if (this.camera.near != this._initialNear) {\n          this.camera.near = this._initialNear;\n          update = true;\n        }\n        if (this.camera.far != this._initialFar) {\n          this.camera.far = this._initialFar;\n          update = true;\n        }\n        if (update) {\n          this.camera.updateProjectionMatrix();\n        }\n      }\n    }\n  }\n  /**\n   * Set gizmos visibility\n   * @param {Boolean} value Value of gizmos visibility\n   */\n  setGizmosVisible(value) {\n    this._gizmos.visible = value;\n    this.dispatchEvent(_changeEvent);\n  }\n  /**\n   * Set values in transformation object\n   * @param {Matrix4} camera Transformation to be applied to the camera\n   * @param {Matrix4} gizmos Transformation to be applied to gizmos\n   */\n  setTransformationMatrices() {\n    let camera = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n    let gizmos = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n    if (camera) {\n      if (_transformation.camera) {\n        _transformation.camera.copy(camera);\n      } else {\n        _transformation.camera = camera.clone();\n      }\n    } else {\n      _transformation.camera = null;\n    }\n    if (gizmos) {\n      if (_transformation.gizmos) {\n        _transformation.gizmos.copy(gizmos);\n      } else {\n        _transformation.gizmos = gizmos.clone();\n      }\n    } else {\n      _transformation.gizmos = null;\n    }\n  }\n}\nexport { ArcballControls };","map":{"version":3,"names":["__defProp","Object","defineProperty","__defNormalProp","obj","key","value","enumerable","configurable","writable","__publicField","Matrix4","EventDispatcher","Vector2","Vector3","Quaternion","Group","EllipseCurve","BufferGeometry","PerspectiveCamera","MathUtils","OrthographicCamera","Box3","Sphere","GridHelper","LineBasicMaterial","Line","Raycaster","STATE","IDLE","Symbol","ROTATE","PAN","SCALE","FOV","FOCUS","ZROTATE","TOUCH_MULTI","ANIMATION_FOCUS","ANIMATION_ROTATE","INPUT","NONE","ONE_FINGER","ONE_FINGER_SWITCHED","TWO_FINGER","MULT_FINGER","CURSOR","_center","x","y","_transformation","camera","gizmos","_changeEvent","type","_startEvent","_endEvent","ArcballControls","constructor","_this","domElement","arguments","length","undefined","scene","this","scale","_gizmos","z","tbRadius","calculateTbRadius","_tbRadius","newRadius","curve","points","getPoints","_curvePts","curveGeometry","setFromPoints","gizmo","children","child","geometry","dispatchEvent","event","enabled","i","mouseActions","mouse","preventDefault","_touchStart","splice","_touchCurrent","_input","button","isPrimary","_downValid","_downEvents","push","pointerType","onSinglePanStart","window","addEventListener","onPointerMove","onPointerUp","onRotateStart","onPinchStart","onDoublePanStart","onTriplePanStart","modifier","ctrlKey","metaKey","shiftKey","_mouseOp","getOpFromAction","_button","updateTouchEvent","onSinglePanMove","movement","calculatePointersDistance","_devPxRatio","_switchSensibility","onRotateMove","onPinchMove","onDoublePanMove","onTriplePanMove","mouseOpState","getOpStateFromAction","_movementThreshold","nTouch","pointerId","removeEventListener","onSinglePanEnd","onDoublePanEnd","onPinchEnd","onRotateEnd","onTriplePanEnd","downTime","timeStamp","_maxDownTime","_nclicks","_clickStart","performance","now","clickInterval","_maxInterval","_posThreshold","onDoubleTap","shift","_a","_b","enableZoom","mouseOp","notchDeltaY","sgn","deltaY","size","scaleFactor","updateTbState","Math","pow","cursorZoom","enablePan","scalePoint","unprojectOnTbPlane","clientX","clientY","applyQuaternion","quaternion","multiplyScalar","zoom","add","position","applyTransformMatrix","applyScale","_grid","disposeGrid","drawGrid","deltaX","_v3_1","setFromMatrixPosition","_cameraMatrixState","distanceTo","xNew","clamp","minDistance","maxDistance","tan","DEG2RAD","fov","newFov","RAD2DEG","atan","maxFov","minFov","newDistance","setFov","operation","setCenter","_animationId","cancelAnimationFrame","_timeStart","activateGizmos","rayDir","_startCursorPosition","copy","enableGrid","enableRotate","unprojectOnTbSurface","enableAnimations","_timePrev","_timeCurrent","_angleCurrent","_anglePrev","_cursorPosPrev","_cursorPosCurr","_wCurr","_wPrev","setY","getCursorNDC","_currentCursorPosition","opState","restart","_state","pan","distance","angle","angleTo","amount","max","rotate","calculateRotationAxis","calculateAngularSpeed","screenNotches","_fovState","_v3_2","_gizmoMatrixState","direction","clone","sub","normalize","_m4_1","makeTranslation","deltaTime","w","abs","self","requestAnimationFrame","t","rotationAxis","onRotationAnim","min","wMax","hitP","unprojectOnObj","onFocusAnim","focus","_startFingerRotation","getAngle","_currentFingerRotation","getWorldDirection","_rotationAxis","rotationPoint","zRotate","_startFingerDistance","_currentFingerDistance","nFingers","setMouseAction","operationInput","mouseInput","keyInput","state","includes","action","p1","p2","atan2","PI","p0","t0","t1","s","sqrt","vec1","vec2","_rotationMatrix","extractRotation","_quat","setFromRotationMatrix","crossVectors","factor","halfFovV","halfFovH","aspect","top","right","point","focusPoint","_translationMatrix","gizmoStateTemp","premultiply","decompose","cameraStateTemp","color","multiplier","divisions","maxLength","tick","width","left","height","bottom","_gridPosition","rotateX","document","console","error","style","touchAction","onContextMenu","onPointerDown","onPointerCancel","onWheel","_c","_d","_e","onWindowResize","remove","isActive","material","setValues","opacity","cursorX","cursorY","canvas","canvasRect","getBoundingClientRect","_v2_1","setX","lookAt","target","updateMatrix","_fov0","_cameraMatrixState0","matrix","_cameraProjectionState","projectionMatrix","_zoom0","_zoomState","_initialNear","near","_nearPos0","_nearPos","_initialFar","far","_farPos0","_farPos","_up0","up","_upState","updateProjectionMatrix","makeGizmos","tbCenter","curveMaterialX","fog","transparent","curveMaterialY","curveMaterialZ","gizmoX","gizmoY","gizmoZ","rotation","_gizmoMatrixState0","identity","setPosition","_scaleMatrix","makeScale","clear","time","cameraMatrix","gizmoMatrix","animTime","focusAnimationTime","easeOutCubic","w0","dampingFactor","adjust","distanceFactor","set","setTransformationMatrices","axis","makeRotationAxis","multiply","JSON","stringify","arcballState","cameraFar","cameraNear","cameraUp","cameraZoom","cameraFov","navigator","clipboard","writeText","readText","then","resolved","setStateFromJSON","scaleGizmos","sizeInverse","maxZoom","minZoom","_m4_2","pos","applyAxisAngle","cursor","raycaster","setFromCamera","intersect","intersectObjects","object","uuid","face","getCursorPosition","x2","y2","r2","setZ","applyMatrix4","projectionMatrixInverse","cameraGizmoDistance","radius2","h","l","m","q","a","b","c","delta","rayLength2","rayLength","initialDistance","newState","updateMatrices","updateMatrixState","EPS","equals","_currentTarget","newZoom","oldRadius","json","parse","fromArray","elements","gizmoTmp","adjustNearFar","Infinity","setCamera","devicePixelRatio","initializeMouseActions","connect","transformation","cameraDistance","bb","setFromObject","sphere","getBoundingSphere","adjustedNearPosition","radius","center","regularNearPosition","minNearPos","adjustedFarPosition","regularFarPosition","minFarPos","update","setGizmosVisible","visible"],"sources":["/home/krug/Coding/JavaScript/Websites/Personal/personal/node_modules/.pnpm/three-stdlib@2.23.7_three@0.151.3/node_modules/three-stdlib/controls/ArcballControls.js"],"sourcesContent":["var __defProp = Object.defineProperty;\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;\nvar __publicField = (obj, key, value) => {\n  __defNormalProp(obj, typeof key !== \"symbol\" ? key + \"\" : key, value);\n  return value;\n};\nimport { Matrix4, EventDispatcher, Vector2, Vector3, Quaternion, Group, EllipseCurve, BufferGeometry, PerspectiveCamera, MathUtils, OrthographicCamera, Box3, Sphere, GridHelper, LineBasicMaterial, Line, Raycaster } from \"three\";\nconst STATE = {\n  IDLE: Symbol(),\n  ROTATE: Symbol(),\n  PAN: Symbol(),\n  SCALE: Symbol(),\n  FOV: Symbol(),\n  FOCUS: Symbol(),\n  ZROTATE: Symbol(),\n  TOUCH_MULTI: Symbol(),\n  ANIMATION_FOCUS: Symbol(),\n  ANIMATION_ROTATE: Symbol()\n};\nconst INPUT = {\n  NONE: Symbol(),\n  ONE_FINGER: Symbol(),\n  ONE_FINGER_SWITCHED: Symbol(),\n  TWO_FINGER: Symbol(),\n  MULT_FINGER: Symbol(),\n  CURSOR: Symbol()\n};\nconst _center = {\n  x: 0,\n  y: 0\n};\nconst _transformation = {\n  camera: /* @__PURE__ */ new Matrix4(),\n  gizmos: /* @__PURE__ */ new Matrix4()\n};\nconst _changeEvent = { type: \"change\" };\nconst _startEvent = { type: \"start\" };\nconst _endEvent = { type: \"end\" };\nclass ArcballControls extends EventDispatcher {\n  constructor(camera, domElement = null, scene = null) {\n    super();\n    __publicField(this, \"camera\");\n    __publicField(this, \"domElement\");\n    __publicField(this, \"scene\");\n    __publicField(this, \"mouseActions\");\n    __publicField(this, \"_mouseOp\");\n    __publicField(this, \"_v2_1\");\n    __publicField(this, \"_v3_1\");\n    __publicField(this, \"_v3_2\");\n    __publicField(this, \"_m4_1\");\n    __publicField(this, \"_m4_2\");\n    __publicField(this, \"_quat\");\n    __publicField(this, \"_translationMatrix\");\n    __publicField(this, \"_rotationMatrix\");\n    __publicField(this, \"_scaleMatrix\");\n    __publicField(this, \"_rotationAxis\");\n    __publicField(this, \"_cameraMatrixState\");\n    __publicField(this, \"_cameraProjectionState\");\n    __publicField(this, \"_fovState\");\n    __publicField(this, \"_upState\");\n    __publicField(this, \"_zoomState\");\n    __publicField(this, \"_nearPos\");\n    __publicField(this, \"_farPos\");\n    __publicField(this, \"_gizmoMatrixState\");\n    __publicField(this, \"_up0\");\n    __publicField(this, \"_zoom0\");\n    __publicField(this, \"_fov0\");\n    __publicField(this, \"_initialNear\");\n    __publicField(this, \"_nearPos0\");\n    __publicField(this, \"_initialFar\");\n    __publicField(this, \"_farPos0\");\n    __publicField(this, \"_cameraMatrixState0\");\n    __publicField(this, \"_gizmoMatrixState0\");\n    __publicField(this, \"_button\");\n    __publicField(this, \"_touchStart\");\n    __publicField(this, \"_touchCurrent\");\n    __publicField(this, \"_input\");\n    __publicField(this, \"_switchSensibility\");\n    __publicField(this, \"_startFingerDistance\");\n    __publicField(this, \"_currentFingerDistance\");\n    __publicField(this, \"_startFingerRotation\");\n    __publicField(this, \"_currentFingerRotation\");\n    __publicField(this, \"_devPxRatio\");\n    __publicField(this, \"_downValid\");\n    __publicField(this, \"_nclicks\");\n    __publicField(this, \"_downEvents\");\n    __publicField(this, \"_clickStart\");\n    __publicField(this, \"_maxDownTime\");\n    __publicField(this, \"_maxInterval\");\n    __publicField(this, \"_posThreshold\");\n    __publicField(this, \"_movementThreshold\");\n    __publicField(this, \"_currentCursorPosition\");\n    __publicField(this, \"_startCursorPosition\");\n    __publicField(this, \"_grid\");\n    __publicField(this, \"_gridPosition\");\n    __publicField(this, \"_gizmos\");\n    __publicField(this, \"_curvePts\");\n    __publicField(this, \"_timeStart\");\n    __publicField(this, \"_animationId\");\n    __publicField(this, \"focusAnimationTime\");\n    __publicField(this, \"_timePrev\");\n    __publicField(this, \"_timeCurrent\");\n    __publicField(this, \"_anglePrev\");\n    __publicField(this, \"_angleCurrent\");\n    __publicField(this, \"_cursorPosPrev\");\n    __publicField(this, \"_cursorPosCurr\");\n    __publicField(this, \"_wPrev\");\n    __publicField(this, \"_wCurr\");\n    __publicField(this, \"adjustNearFar\");\n    __publicField(this, \"scaleFactor\");\n    __publicField(this, \"dampingFactor\");\n    __publicField(this, \"wMax\");\n    __publicField(this, \"enableAnimations\");\n    __publicField(this, \"enableGrid\");\n    __publicField(this, \"cursorZoom\");\n    __publicField(this, \"minFov\");\n    __publicField(this, \"maxFov\");\n    __publicField(this, \"enabled\");\n    __publicField(this, \"enablePan\");\n    __publicField(this, \"enableRotate\");\n    __publicField(this, \"enableZoom\");\n    __publicField(this, \"minDistance\");\n    __publicField(this, \"maxDistance\");\n    __publicField(this, \"minZoom\");\n    __publicField(this, \"maxZoom\");\n    __publicField(this, \"target\");\n    __publicField(this, \"_currentTarget\");\n    __publicField(this, \"_tbRadius\");\n    __publicField(this, \"_state\");\n    //listeners\n    __publicField(this, \"onWindowResize\", () => {\n      const scale = (this._gizmos.scale.x + this._gizmos.scale.y + this._gizmos.scale.z) / 3;\n      if (this.camera) {\n        const tbRadius = this.calculateTbRadius(this.camera);\n        if (tbRadius !== void 0) {\n          this._tbRadius = tbRadius;\n        }\n      }\n      const newRadius = this._tbRadius / scale;\n      const curve = new EllipseCurve(0, 0, newRadius, newRadius);\n      const points = curve.getPoints(this._curvePts);\n      const curveGeometry = new BufferGeometry().setFromPoints(points);\n      for (const gizmo in this._gizmos.children) {\n        const child = this._gizmos.children[gizmo];\n        child.geometry = curveGeometry;\n      }\n      this.dispatchEvent(_changeEvent);\n    });\n    __publicField(this, \"onContextMenu\", (event) => {\n      if (!this.enabled) {\n        return;\n      }\n      for (let i = 0; i < this.mouseActions.length; i++) {\n        if (this.mouseActions[i].mouse == 2) {\n          event.preventDefault();\n          break;\n        }\n      }\n    });\n    __publicField(this, \"onPointerCancel\", () => {\n      this._touchStart.splice(0, this._touchStart.length);\n      this._touchCurrent.splice(0, this._touchCurrent.length);\n      this._input = INPUT.NONE;\n    });\n    __publicField(this, \"onPointerDown\", (event) => {\n      if (event.button == 0 && event.isPrimary) {\n        this._downValid = true;\n        this._downEvents.push(event);\n      } else {\n        this._downValid = false;\n      }\n      if (event.pointerType == \"touch\" && this._input != INPUT.CURSOR) {\n        this._touchStart.push(event);\n        this._touchCurrent.push(event);\n        switch (this._input) {\n          case INPUT.NONE:\n            this._input = INPUT.ONE_FINGER;\n            this.onSinglePanStart(event, \"ROTATE\");\n            window.addEventListener(\"pointermove\", this.onPointerMove);\n            window.addEventListener(\"pointerup\", this.onPointerUp);\n            break;\n          case INPUT.ONE_FINGER:\n          case INPUT.ONE_FINGER_SWITCHED:\n            this._input = INPUT.TWO_FINGER;\n            this.onRotateStart();\n            this.onPinchStart();\n            this.onDoublePanStart();\n            break;\n          case INPUT.TWO_FINGER:\n            this._input = INPUT.MULT_FINGER;\n            this.onTriplePanStart();\n            break;\n        }\n      } else if (event.pointerType != \"touch\" && this._input == INPUT.NONE) {\n        let modifier = null;\n        if (event.ctrlKey || event.metaKey) {\n          modifier = \"CTRL\";\n        } else if (event.shiftKey) {\n          modifier = \"SHIFT\";\n        }\n        this._mouseOp = this.getOpFromAction(event.button, modifier);\n        if (this._mouseOp) {\n          window.addEventListener(\"pointermove\", this.onPointerMove);\n          window.addEventListener(\"pointerup\", this.onPointerUp);\n          this._input = INPUT.CURSOR;\n          this._button = event.button;\n          this.onSinglePanStart(event, this._mouseOp);\n        }\n      }\n    });\n    __publicField(this, \"onPointerMove\", (event) => {\n      if (event.pointerType == \"touch\" && this._input != INPUT.CURSOR) {\n        switch (this._input) {\n          case INPUT.ONE_FINGER:\n            this.updateTouchEvent(event);\n            this.onSinglePanMove(event, STATE.ROTATE);\n            break;\n          case INPUT.ONE_FINGER_SWITCHED:\n            const movement = this.calculatePointersDistance(this._touchCurrent[0], event) * this._devPxRatio;\n            if (movement >= this._switchSensibility) {\n              this._input = INPUT.ONE_FINGER;\n              this.updateTouchEvent(event);\n              this.onSinglePanStart(event, \"ROTATE\");\n              break;\n            }\n            break;\n          case INPUT.TWO_FINGER:\n            this.updateTouchEvent(event);\n            this.onRotateMove();\n            this.onPinchMove();\n            this.onDoublePanMove();\n            break;\n          case INPUT.MULT_FINGER:\n            this.updateTouchEvent(event);\n            this.onTriplePanMove();\n            break;\n        }\n      } else if (event.pointerType != \"touch\" && this._input == INPUT.CURSOR) {\n        let modifier = null;\n        if (event.ctrlKey || event.metaKey) {\n          modifier = \"CTRL\";\n        } else if (event.shiftKey) {\n          modifier = \"SHIFT\";\n        }\n        const mouseOpState = this.getOpStateFromAction(this._button, modifier);\n        if (mouseOpState) {\n          this.onSinglePanMove(event, mouseOpState);\n        }\n      }\n      if (this._downValid) {\n        const movement = this.calculatePointersDistance(this._downEvents[this._downEvents.length - 1], event) * this._devPxRatio;\n        if (movement > this._movementThreshold) {\n          this._downValid = false;\n        }\n      }\n    });\n    __publicField(this, \"onPointerUp\", (event) => {\n      if (event.pointerType == \"touch\" && this._input != INPUT.CURSOR) {\n        const nTouch = this._touchCurrent.length;\n        for (let i = 0; i < nTouch; i++) {\n          if (this._touchCurrent[i].pointerId == event.pointerId) {\n            this._touchCurrent.splice(i, 1);\n            this._touchStart.splice(i, 1);\n            break;\n          }\n        }\n        switch (this._input) {\n          case INPUT.ONE_FINGER:\n          case INPUT.ONE_FINGER_SWITCHED:\n            window.removeEventListener(\"pointermove\", this.onPointerMove);\n            window.removeEventListener(\"pointerup\", this.onPointerUp);\n            this._input = INPUT.NONE;\n            this.onSinglePanEnd();\n            break;\n          case INPUT.TWO_FINGER:\n            this.onDoublePanEnd();\n            this.onPinchEnd();\n            this.onRotateEnd();\n            this._input = INPUT.ONE_FINGER_SWITCHED;\n            break;\n          case INPUT.MULT_FINGER:\n            if (this._touchCurrent.length == 0) {\n              window.removeEventListener(\"pointermove\", this.onPointerMove);\n              window.removeEventListener(\"pointerup\", this.onPointerUp);\n              this._input = INPUT.NONE;\n              this.onTriplePanEnd();\n            }\n            break;\n        }\n      } else if (event.pointerType != \"touch\" && this._input == INPUT.CURSOR) {\n        window.removeEventListener(\"pointermove\", this.onPointerMove);\n        window.removeEventListener(\"pointerup\", this.onPointerUp);\n        this._input = INPUT.NONE;\n        this.onSinglePanEnd();\n        this._button = -1;\n      }\n      if (event.isPrimary) {\n        if (this._downValid) {\n          const downTime = event.timeStamp - this._downEvents[this._downEvents.length - 1].timeStamp;\n          if (downTime <= this._maxDownTime) {\n            if (this._nclicks == 0) {\n              this._nclicks = 1;\n              this._clickStart = performance.now();\n            } else {\n              const clickInterval = event.timeStamp - this._clickStart;\n              const movement = this.calculatePointersDistance(this._downEvents[1], this._downEvents[0]) * this._devPxRatio;\n              if (clickInterval <= this._maxInterval && movement <= this._posThreshold) {\n                this._nclicks = 0;\n                this._downEvents.splice(0, this._downEvents.length);\n                this.onDoubleTap(event);\n              } else {\n                this._nclicks = 1;\n                this._downEvents.shift();\n                this._clickStart = performance.now();\n              }\n            }\n          } else {\n            this._downValid = false;\n            this._nclicks = 0;\n            this._downEvents.splice(0, this._downEvents.length);\n          }\n        } else {\n          this._nclicks = 0;\n          this._downEvents.splice(0, this._downEvents.length);\n        }\n      }\n    });\n    __publicField(this, \"onWheel\", (event) => {\n      var _a, _b;\n      if (this.enabled && this.enableZoom && this.domElement) {\n        let modifier = null;\n        if (event.ctrlKey || event.metaKey) {\n          modifier = \"CTRL\";\n        } else if (event.shiftKey) {\n          modifier = \"SHIFT\";\n        }\n        const mouseOp = this.getOpFromAction(\"WHEEL\", modifier);\n        if (mouseOp) {\n          event.preventDefault();\n          this.dispatchEvent(_startEvent);\n          const notchDeltaY = 125;\n          let sgn = event.deltaY / notchDeltaY;\n          let size = 1;\n          if (sgn > 0) {\n            size = 1 / this.scaleFactor;\n          } else if (sgn < 0) {\n            size = this.scaleFactor;\n          }\n          switch (mouseOp) {\n            case \"ZOOM\":\n              this.updateTbState(STATE.SCALE, true);\n              if (sgn > 0) {\n                size = 1 / Math.pow(this.scaleFactor, sgn);\n              } else if (sgn < 0) {\n                size = Math.pow(this.scaleFactor, -sgn);\n              }\n              if (this.cursorZoom && this.enablePan) {\n                let scalePoint;\n                if (this.camera instanceof OrthographicCamera) {\n                  scalePoint = (_a = this.unprojectOnTbPlane(this.camera, event.clientX, event.clientY, this.domElement)) == null ? void 0 : _a.applyQuaternion(this.camera.quaternion).multiplyScalar(1 / this.camera.zoom).add(this._gizmos.position);\n                }\n                if (this.camera instanceof PerspectiveCamera) {\n                  scalePoint = (_b = this.unprojectOnTbPlane(this.camera, event.clientX, event.clientY, this.domElement)) == null ? void 0 : _b.applyQuaternion(this.camera.quaternion).add(this._gizmos.position);\n                }\n                if (scalePoint !== void 0)\n                  this.applyTransformMatrix(this.applyScale(size, scalePoint));\n              } else {\n                this.applyTransformMatrix(this.applyScale(size, this._gizmos.position));\n              }\n              if (this._grid) {\n                this.disposeGrid();\n                this.drawGrid();\n              }\n              this.updateTbState(STATE.IDLE, false);\n              this.dispatchEvent(_changeEvent);\n              this.dispatchEvent(_endEvent);\n              break;\n            case \"FOV\":\n              if (this.camera instanceof PerspectiveCamera) {\n                this.updateTbState(STATE.FOV, true);\n                if (event.deltaX != 0) {\n                  sgn = event.deltaX / notchDeltaY;\n                  size = 1;\n                  if (sgn > 0) {\n                    size = 1 / Math.pow(this.scaleFactor, sgn);\n                  } else if (sgn < 0) {\n                    size = Math.pow(this.scaleFactor, -sgn);\n                  }\n                }\n                this._v3_1.setFromMatrixPosition(this._cameraMatrixState);\n                const x = this._v3_1.distanceTo(this._gizmos.position);\n                let xNew = x / size;\n                xNew = MathUtils.clamp(xNew, this.minDistance, this.maxDistance);\n                const y = x * Math.tan(MathUtils.DEG2RAD * this.camera.fov * 0.5);\n                let newFov = MathUtils.RAD2DEG * (Math.atan(y / xNew) * 2);\n                if (newFov > this.maxFov) {\n                  newFov = this.maxFov;\n                } else if (newFov < this.minFov) {\n                  newFov = this.minFov;\n                }\n                const newDistance = y / Math.tan(MathUtils.DEG2RAD * (newFov / 2));\n                size = x / newDistance;\n                this.setFov(newFov);\n                this.applyTransformMatrix(this.applyScale(size, this._gizmos.position, false));\n              }\n              if (this._grid) {\n                this.disposeGrid();\n                this.drawGrid();\n              }\n              this.updateTbState(STATE.IDLE, false);\n              this.dispatchEvent(_changeEvent);\n              this.dispatchEvent(_endEvent);\n              break;\n          }\n        }\n      }\n    });\n    __publicField(this, \"onSinglePanStart\", (event, operation) => {\n      if (this.enabled && this.domElement) {\n        this.dispatchEvent(_startEvent);\n        this.setCenter(event.clientX, event.clientY);\n        switch (operation) {\n          case \"PAN\":\n            if (!this.enablePan)\n              return;\n            if (this._animationId != -1) {\n              cancelAnimationFrame(this._animationId);\n              this._animationId = -1;\n              this._timeStart = -1;\n              this.activateGizmos(false);\n              this.dispatchEvent(_changeEvent);\n            }\n            if (this.camera) {\n              this.updateTbState(STATE.PAN, true);\n              const rayDir = this.unprojectOnTbPlane(this.camera, _center.x, _center.y, this.domElement);\n              if (rayDir !== void 0) {\n                this._startCursorPosition.copy(rayDir);\n              }\n              if (this.enableGrid) {\n                this.drawGrid();\n                this.dispatchEvent(_changeEvent);\n              }\n            }\n            break;\n          case \"ROTATE\":\n            if (!this.enableRotate)\n              return;\n            if (this._animationId != -1) {\n              cancelAnimationFrame(this._animationId);\n              this._animationId = -1;\n              this._timeStart = -1;\n            }\n            if (this.camera) {\n              this.updateTbState(STATE.ROTATE, true);\n              const rayDir = this.unprojectOnTbSurface(this.camera, _center.x, _center.y, this.domElement, this._tbRadius);\n              if (rayDir !== void 0) {\n                this._startCursorPosition.copy(rayDir);\n              }\n              this.activateGizmos(true);\n              if (this.enableAnimations) {\n                this._timePrev = this._timeCurrent = performance.now();\n                this._angleCurrent = this._anglePrev = 0;\n                this._cursorPosPrev.copy(this._startCursorPosition);\n                this._cursorPosCurr.copy(this._cursorPosPrev);\n                this._wCurr = 0;\n                this._wPrev = this._wCurr;\n              }\n            }\n            this.dispatchEvent(_changeEvent);\n            break;\n          case \"FOV\":\n            if (!this.enableZoom)\n              return;\n            if (this.camera instanceof PerspectiveCamera) {\n              if (this._animationId != -1) {\n                cancelAnimationFrame(this._animationId);\n                this._animationId = -1;\n                this._timeStart = -1;\n                this.activateGizmos(false);\n                this.dispatchEvent(_changeEvent);\n              }\n              this.updateTbState(STATE.FOV, true);\n              this._startCursorPosition.setY(this.getCursorNDC(_center.x, _center.y, this.domElement).y * 0.5);\n              this._currentCursorPosition.copy(this._startCursorPosition);\n            }\n            break;\n          case \"ZOOM\":\n            if (!this.enableZoom)\n              return;\n            if (this._animationId != -1) {\n              cancelAnimationFrame(this._animationId);\n              this._animationId = -1;\n              this._timeStart = -1;\n              this.activateGizmos(false);\n              this.dispatchEvent(_changeEvent);\n            }\n            this.updateTbState(STATE.SCALE, true);\n            this._startCursorPosition.setY(this.getCursorNDC(_center.x, _center.y, this.domElement).y * 0.5);\n            this._currentCursorPosition.copy(this._startCursorPosition);\n            break;\n        }\n      }\n    });\n    __publicField(this, \"onSinglePanMove\", (event, opState) => {\n      if (this.enabled && this.domElement) {\n        const restart = opState != this._state;\n        this.setCenter(event.clientX, event.clientY);\n        switch (opState) {\n          case STATE.PAN:\n            if (this.enablePan && this.camera) {\n              if (restart) {\n                this.dispatchEvent(_endEvent);\n                this.dispatchEvent(_startEvent);\n                this.updateTbState(opState, true);\n                const rayDir = this.unprojectOnTbPlane(this.camera, _center.x, _center.y, this.domElement);\n                if (rayDir !== void 0) {\n                  this._startCursorPosition.copy(rayDir);\n                }\n                if (this.enableGrid) {\n                  this.drawGrid();\n                }\n                this.activateGizmos(false);\n              } else {\n                const rayDir = this.unprojectOnTbPlane(this.camera, _center.x, _center.y, this.domElement);\n                if (rayDir !== void 0) {\n                  this._currentCursorPosition.copy(rayDir);\n                }\n                this.applyTransformMatrix(this.pan(this._startCursorPosition, this._currentCursorPosition));\n              }\n            }\n            break;\n          case STATE.ROTATE:\n            if (this.enableRotate && this.camera) {\n              if (restart) {\n                this.dispatchEvent(_endEvent);\n                this.dispatchEvent(_startEvent);\n                this.updateTbState(opState, true);\n                const rayDir = this.unprojectOnTbSurface(\n                  this.camera,\n                  _center.x,\n                  _center.y,\n                  this.domElement,\n                  this._tbRadius\n                );\n                if (rayDir !== void 0) {\n                  this._startCursorPosition.copy(rayDir);\n                }\n                if (this.enableGrid) {\n                  this.disposeGrid();\n                }\n                this.activateGizmos(true);\n              } else {\n                const rayDir = this.unprojectOnTbSurface(\n                  this.camera,\n                  _center.x,\n                  _center.y,\n                  this.domElement,\n                  this._tbRadius\n                );\n                if (rayDir !== void 0) {\n                  this._currentCursorPosition.copy(rayDir);\n                }\n                const distance = this._startCursorPosition.distanceTo(this._currentCursorPosition);\n                const angle = this._startCursorPosition.angleTo(this._currentCursorPosition);\n                const amount = Math.max(distance / this._tbRadius, angle);\n                this.applyTransformMatrix(\n                  this.rotate(this.calculateRotationAxis(this._startCursorPosition, this._currentCursorPosition), amount)\n                );\n                if (this.enableAnimations) {\n                  this._timePrev = this._timeCurrent;\n                  this._timeCurrent = performance.now();\n                  this._anglePrev = this._angleCurrent;\n                  this._angleCurrent = amount;\n                  this._cursorPosPrev.copy(this._cursorPosCurr);\n                  this._cursorPosCurr.copy(this._currentCursorPosition);\n                  this._wPrev = this._wCurr;\n                  this._wCurr = this.calculateAngularSpeed(\n                    this._anglePrev,\n                    this._angleCurrent,\n                    this._timePrev,\n                    this._timeCurrent\n                  );\n                }\n              }\n            }\n            break;\n          case STATE.SCALE:\n            if (this.enableZoom) {\n              if (restart) {\n                this.dispatchEvent(_endEvent);\n                this.dispatchEvent(_startEvent);\n                this.updateTbState(opState, true);\n                this._startCursorPosition.setY(this.getCursorNDC(_center.x, _center.y, this.domElement).y * 0.5);\n                this._currentCursorPosition.copy(this._startCursorPosition);\n                if (this.enableGrid) {\n                  this.disposeGrid();\n                }\n                this.activateGizmos(false);\n              } else {\n                const screenNotches = 8;\n                this._currentCursorPosition.setY(this.getCursorNDC(_center.x, _center.y, this.domElement).y * 0.5);\n                const movement = this._currentCursorPosition.y - this._startCursorPosition.y;\n                let size = 1;\n                if (movement < 0) {\n                  size = 1 / Math.pow(this.scaleFactor, -movement * screenNotches);\n                } else if (movement > 0) {\n                  size = Math.pow(this.scaleFactor, movement * screenNotches);\n                }\n                this.applyTransformMatrix(this.applyScale(size, this._gizmos.position));\n              }\n            }\n            break;\n          case STATE.FOV:\n            if (this.enableZoom && this.camera instanceof PerspectiveCamera) {\n              if (restart) {\n                this.dispatchEvent(_endEvent);\n                this.dispatchEvent(_startEvent);\n                this.updateTbState(opState, true);\n                this._startCursorPosition.setY(this.getCursorNDC(_center.x, _center.y, this.domElement).y * 0.5);\n                this._currentCursorPosition.copy(this._startCursorPosition);\n                if (this.enableGrid) {\n                  this.disposeGrid();\n                }\n                this.activateGizmos(false);\n              } else {\n                const screenNotches = 8;\n                this._currentCursorPosition.setY(this.getCursorNDC(_center.x, _center.y, this.domElement).y * 0.5);\n                const movement = this._currentCursorPosition.y - this._startCursorPosition.y;\n                let size = 1;\n                if (movement < 0) {\n                  size = 1 / Math.pow(this.scaleFactor, -movement * screenNotches);\n                } else if (movement > 0) {\n                  size = Math.pow(this.scaleFactor, movement * screenNotches);\n                }\n                this._v3_1.setFromMatrixPosition(this._cameraMatrixState);\n                const x = this._v3_1.distanceTo(this._gizmos.position);\n                let xNew = x / size;\n                xNew = MathUtils.clamp(xNew, this.minDistance, this.maxDistance);\n                const y = x * Math.tan(MathUtils.DEG2RAD * this._fovState * 0.5);\n                let newFov = MathUtils.RAD2DEG * (Math.atan(y / xNew) * 2);\n                newFov = MathUtils.clamp(newFov, this.minFov, this.maxFov);\n                const newDistance = y / Math.tan(MathUtils.DEG2RAD * (newFov / 2));\n                size = x / newDistance;\n                this._v3_2.setFromMatrixPosition(this._gizmoMatrixState);\n                this.setFov(newFov);\n                this.applyTransformMatrix(this.applyScale(size, this._v3_2, false));\n                const direction = this._gizmos.position.clone().sub(this.camera.position).normalize().multiplyScalar(newDistance / x);\n                this._m4_1.makeTranslation(direction.x, direction.y, direction.z);\n              }\n            }\n            break;\n        }\n        this.dispatchEvent(_changeEvent);\n      }\n    });\n    __publicField(this, \"onSinglePanEnd\", () => {\n      if (this._state == STATE.ROTATE) {\n        if (!this.enableRotate) {\n          return;\n        }\n        if (this.enableAnimations) {\n          const deltaTime = performance.now() - this._timeCurrent;\n          if (deltaTime < 120) {\n            const w = Math.abs((this._wPrev + this._wCurr) / 2);\n            const self = this;\n            this._animationId = window.requestAnimationFrame(function(t) {\n              self.updateTbState(STATE.ANIMATION_ROTATE, true);\n              const rotationAxis = self.calculateRotationAxis(self._cursorPosPrev, self._cursorPosCurr);\n              self.onRotationAnim(t, rotationAxis, Math.min(w, self.wMax));\n            });\n          } else {\n            this.updateTbState(STATE.IDLE, false);\n            this.activateGizmos(false);\n            this.dispatchEvent(_changeEvent);\n          }\n        } else {\n          this.updateTbState(STATE.IDLE, false);\n          this.activateGizmos(false);\n          this.dispatchEvent(_changeEvent);\n        }\n      } else if (this._state == STATE.PAN || this._state == STATE.IDLE) {\n        this.updateTbState(STATE.IDLE, false);\n        if (this.enableGrid) {\n          this.disposeGrid();\n        }\n        this.activateGizmos(false);\n        this.dispatchEvent(_changeEvent);\n      }\n      this.dispatchEvent(_endEvent);\n    });\n    __publicField(this, \"onDoubleTap\", (event) => {\n      if (this.enabled && this.enablePan && this.scene && this.camera && this.domElement) {\n        this.dispatchEvent(_startEvent);\n        this.setCenter(event.clientX, event.clientY);\n        const hitP = this.unprojectOnObj(this.getCursorNDC(_center.x, _center.y, this.domElement), this.camera);\n        if (hitP && this.enableAnimations) {\n          const self = this;\n          if (this._animationId != -1) {\n            window.cancelAnimationFrame(this._animationId);\n          }\n          this._timeStart = -1;\n          this._animationId = window.requestAnimationFrame(function(t) {\n            self.updateTbState(STATE.ANIMATION_FOCUS, true);\n            self.onFocusAnim(t, hitP, self._cameraMatrixState, self._gizmoMatrixState);\n          });\n        } else if (hitP && !this.enableAnimations) {\n          this.updateTbState(STATE.FOCUS, true);\n          this.focus(hitP, this.scaleFactor);\n          this.updateTbState(STATE.IDLE, false);\n          this.dispatchEvent(_changeEvent);\n        }\n      }\n      this.dispatchEvent(_endEvent);\n    });\n    __publicField(this, \"onDoublePanStart\", () => {\n      if (this.enabled && this.enablePan && this.camera && this.domElement) {\n        this.dispatchEvent(_startEvent);\n        this.updateTbState(STATE.PAN, true);\n        this.setCenter(\n          (this._touchCurrent[0].clientX + this._touchCurrent[1].clientX) / 2,\n          (this._touchCurrent[0].clientY + this._touchCurrent[1].clientY) / 2\n        );\n        const rayDir = this.unprojectOnTbPlane(this.camera, _center.x, _center.y, this.domElement, true);\n        if (rayDir !== void 0) {\n          this._startCursorPosition.copy(rayDir);\n        }\n        this._currentCursorPosition.copy(this._startCursorPosition);\n        this.activateGizmos(false);\n      }\n    });\n    __publicField(this, \"onDoublePanMove\", () => {\n      if (this.enabled && this.enablePan && this.camera && this.domElement) {\n        this.setCenter(\n          (this._touchCurrent[0].clientX + this._touchCurrent[1].clientX) / 2,\n          (this._touchCurrent[0].clientY + this._touchCurrent[1].clientY) / 2\n        );\n        if (this._state != STATE.PAN) {\n          this.updateTbState(STATE.PAN, true);\n          this._startCursorPosition.copy(this._currentCursorPosition);\n        }\n        const rayDir = this.unprojectOnTbPlane(this.camera, _center.x, _center.y, this.domElement, true);\n        if (rayDir !== void 0)\n          this._currentCursorPosition.copy(rayDir);\n        this.applyTransformMatrix(this.pan(this._startCursorPosition, this._currentCursorPosition, true));\n        this.dispatchEvent(_changeEvent);\n      }\n    });\n    __publicField(this, \"onDoublePanEnd\", () => {\n      this.updateTbState(STATE.IDLE, false);\n      this.dispatchEvent(_endEvent);\n    });\n    __publicField(this, \"onRotateStart\", () => {\n      var _a;\n      if (this.enabled && this.enableRotate) {\n        this.dispatchEvent(_startEvent);\n        this.updateTbState(STATE.ZROTATE, true);\n        this._startFingerRotation = this.getAngle(this._touchCurrent[1], this._touchCurrent[0]) + this.getAngle(this._touchStart[1], this._touchStart[0]);\n        this._currentFingerRotation = this._startFingerRotation;\n        (_a = this.camera) == null ? void 0 : _a.getWorldDirection(this._rotationAxis);\n        if (!this.enablePan && !this.enableZoom) {\n          this.activateGizmos(true);\n        }\n      }\n    });\n    __publicField(this, \"onRotateMove\", () => {\n      var _a;\n      if (this.enabled && this.enableRotate && this.camera && this.domElement) {\n        this.setCenter(\n          (this._touchCurrent[0].clientX + this._touchCurrent[1].clientX) / 2,\n          (this._touchCurrent[0].clientY + this._touchCurrent[1].clientY) / 2\n        );\n        let rotationPoint;\n        if (this._state != STATE.ZROTATE) {\n          this.updateTbState(STATE.ZROTATE, true);\n          this._startFingerRotation = this._currentFingerRotation;\n        }\n        this._currentFingerRotation = this.getAngle(this._touchCurrent[1], this._touchCurrent[0]) + this.getAngle(this._touchStart[1], this._touchStart[0]);\n        if (!this.enablePan) {\n          rotationPoint = new Vector3().setFromMatrixPosition(this._gizmoMatrixState);\n        } else if (this.camera) {\n          this._v3_2.setFromMatrixPosition(this._gizmoMatrixState);\n          rotationPoint = (_a = this.unprojectOnTbPlane(this.camera, _center.x, _center.y, this.domElement)) == null ? void 0 : _a.applyQuaternion(this.camera.quaternion).multiplyScalar(1 / this.camera.zoom).add(this._v3_2);\n        }\n        const amount = MathUtils.DEG2RAD * (this._startFingerRotation - this._currentFingerRotation);\n        if (rotationPoint !== void 0) {\n          this.applyTransformMatrix(this.zRotate(rotationPoint, amount));\n        }\n        this.dispatchEvent(_changeEvent);\n      }\n    });\n    __publicField(this, \"onRotateEnd\", () => {\n      this.updateTbState(STATE.IDLE, false);\n      this.activateGizmos(false);\n      this.dispatchEvent(_endEvent);\n    });\n    __publicField(this, \"onPinchStart\", () => {\n      if (this.enabled && this.enableZoom) {\n        this.dispatchEvent(_startEvent);\n        this.updateTbState(STATE.SCALE, true);\n        this._startFingerDistance = this.calculatePointersDistance(this._touchCurrent[0], this._touchCurrent[1]);\n        this._currentFingerDistance = this._startFingerDistance;\n        this.activateGizmos(false);\n      }\n    });\n    __publicField(this, \"onPinchMove\", () => {\n      var _a, _b;\n      if (this.enabled && this.enableZoom && this.domElement) {\n        this.setCenter(\n          (this._touchCurrent[0].clientX + this._touchCurrent[1].clientX) / 2,\n          (this._touchCurrent[0].clientY + this._touchCurrent[1].clientY) / 2\n        );\n        const minDistance = 12;\n        if (this._state != STATE.SCALE) {\n          this._startFingerDistance = this._currentFingerDistance;\n          this.updateTbState(STATE.SCALE, true);\n        }\n        this._currentFingerDistance = Math.max(\n          this.calculatePointersDistance(this._touchCurrent[0], this._touchCurrent[1]),\n          minDistance * this._devPxRatio\n        );\n        const amount = this._currentFingerDistance / this._startFingerDistance;\n        let scalePoint;\n        if (!this.enablePan) {\n          scalePoint = this._gizmos.position;\n        } else {\n          if (this.camera instanceof OrthographicCamera) {\n            scalePoint = (_a = this.unprojectOnTbPlane(this.camera, _center.x, _center.y, this.domElement)) == null ? void 0 : _a.applyQuaternion(this.camera.quaternion).multiplyScalar(1 / this.camera.zoom).add(this._gizmos.position);\n          } else if (this.camera instanceof PerspectiveCamera) {\n            scalePoint = (_b = this.unprojectOnTbPlane(this.camera, _center.x, _center.y, this.domElement)) == null ? void 0 : _b.applyQuaternion(this.camera.quaternion).add(this._gizmos.position);\n          }\n        }\n        if (scalePoint !== void 0) {\n          this.applyTransformMatrix(this.applyScale(amount, scalePoint));\n        }\n        this.dispatchEvent(_changeEvent);\n      }\n    });\n    __publicField(this, \"onPinchEnd\", () => {\n      this.updateTbState(STATE.IDLE, false);\n      this.dispatchEvent(_endEvent);\n    });\n    __publicField(this, \"onTriplePanStart\", () => {\n      if (this.enabled && this.enableZoom && this.domElement) {\n        this.dispatchEvent(_startEvent);\n        this.updateTbState(STATE.SCALE, true);\n        let clientX = 0;\n        let clientY = 0;\n        const nFingers = this._touchCurrent.length;\n        for (let i = 0; i < nFingers; i++) {\n          clientX += this._touchCurrent[i].clientX;\n          clientY += this._touchCurrent[i].clientY;\n        }\n        this.setCenter(clientX / nFingers, clientY / nFingers);\n        this._startCursorPosition.setY(this.getCursorNDC(_center.x, _center.y, this.domElement).y * 0.5);\n        this._currentCursorPosition.copy(this._startCursorPosition);\n      }\n    });\n    __publicField(this, \"onTriplePanMove\", () => {\n      if (this.enabled && this.enableZoom && this.camera && this.domElement) {\n        let clientX = 0;\n        let clientY = 0;\n        const nFingers = this._touchCurrent.length;\n        for (let i = 0; i < nFingers; i++) {\n          clientX += this._touchCurrent[i].clientX;\n          clientY += this._touchCurrent[i].clientY;\n        }\n        this.setCenter(clientX / nFingers, clientY / nFingers);\n        const screenNotches = 8;\n        this._currentCursorPosition.setY(this.getCursorNDC(_center.x, _center.y, this.domElement).y * 0.5);\n        const movement = this._currentCursorPosition.y - this._startCursorPosition.y;\n        let size = 1;\n        if (movement < 0) {\n          size = 1 / Math.pow(this.scaleFactor, -movement * screenNotches);\n        } else if (movement > 0) {\n          size = Math.pow(this.scaleFactor, movement * screenNotches);\n        }\n        this._v3_1.setFromMatrixPosition(this._cameraMatrixState);\n        const x = this._v3_1.distanceTo(this._gizmos.position);\n        let xNew = x / size;\n        xNew = MathUtils.clamp(xNew, this.minDistance, this.maxDistance);\n        const y = x * Math.tan(MathUtils.DEG2RAD * this._fovState * 0.5);\n        let newFov = MathUtils.RAD2DEG * (Math.atan(y / xNew) * 2);\n        newFov = MathUtils.clamp(newFov, this.minFov, this.maxFov);\n        const newDistance = y / Math.tan(MathUtils.DEG2RAD * (newFov / 2));\n        size = x / newDistance;\n        this._v3_2.setFromMatrixPosition(this._gizmoMatrixState);\n        this.setFov(newFov);\n        this.applyTransformMatrix(this.applyScale(size, this._v3_2, false));\n        const direction = this._gizmos.position.clone().sub(this.camera.position).normalize().multiplyScalar(newDistance / x);\n        this._m4_1.makeTranslation(direction.x, direction.y, direction.z);\n        this.dispatchEvent(_changeEvent);\n      }\n    });\n    __publicField(this, \"onTriplePanEnd\", () => {\n      this.updateTbState(STATE.IDLE, false);\n      this.dispatchEvent(_endEvent);\n    });\n    /**\n     * Set _center's x/y coordinates\n     * @param {Number} clientX\n     * @param {Number} clientY\n     */\n    __publicField(this, \"setCenter\", (clientX, clientY) => {\n      _center.x = clientX;\n      _center.y = clientY;\n    });\n    /**\n     * Set default mouse actions\n     */\n    __publicField(this, \"initializeMouseActions\", () => {\n      this.setMouseAction(\"PAN\", 0, \"CTRL\");\n      this.setMouseAction(\"PAN\", 2);\n      this.setMouseAction(\"ROTATE\", 0);\n      this.setMouseAction(\"ZOOM\", \"WHEEL\");\n      this.setMouseAction(\"ZOOM\", 1);\n      this.setMouseAction(\"FOV\", \"WHEEL\", \"SHIFT\");\n      this.setMouseAction(\"FOV\", 1, \"SHIFT\");\n    });\n    /**\n     * Set a new mouse action by specifying the operation to be performed and a mouse/key combination. In case of conflict, replaces the existing one\n     * @param {String} operation The operation to be performed ('PAN', 'ROTATE', 'ZOOM', 'FOV)\n     * @param {*} mouse A mouse button (0, 1, 2) or 'WHEEL' for wheel notches\n     * @param {*} key The keyboard modifier ('CTRL', 'SHIFT') or null if key is not needed\n     * @returns {Boolean} True if the mouse action has been successfully added, false otherwise\n     */\n    __publicField(this, \"setMouseAction\", (operation, mouse, key = null) => {\n      const operationInput = [\"PAN\", \"ROTATE\", \"ZOOM\", \"FOV\"];\n      const mouseInput = [0, 1, 2, \"WHEEL\"];\n      const keyInput = [\"CTRL\", \"SHIFT\", null];\n      let state;\n      if (!operationInput.includes(operation) || !mouseInput.includes(mouse) || !keyInput.includes(key)) {\n        return false;\n      }\n      if (mouse == \"WHEEL\") {\n        if (operation != \"ZOOM\" && operation != \"FOV\") {\n          return false;\n        }\n      }\n      switch (operation) {\n        case \"PAN\":\n          state = STATE.PAN;\n          break;\n        case \"ROTATE\":\n          state = STATE.ROTATE;\n          break;\n        case \"ZOOM\":\n          state = STATE.SCALE;\n          break;\n        case \"FOV\":\n          state = STATE.FOV;\n          break;\n      }\n      const action = {\n        operation,\n        mouse,\n        key,\n        state\n      };\n      for (let i = 0; i < this.mouseActions.length; i++) {\n        if (this.mouseActions[i].mouse == action.mouse && this.mouseActions[i].key == action.key) {\n          this.mouseActions.splice(i, 1, action);\n          return true;\n        }\n      }\n      this.mouseActions.push(action);\n      return true;\n    });\n    /**\n     * Return the operation associated to a mouse/keyboard combination\n     * @param {*} mouse A mouse button (0, 1, 2) or 'WHEEL' for wheel notches\n     * @param {*} key The keyboard modifier ('CTRL', 'SHIFT') or null if key is not needed\n     * @returns The operation if it has been found, null otherwise\n     */\n    __publicField(this, \"getOpFromAction\", (mouse, key) => {\n      let action;\n      for (let i = 0; i < this.mouseActions.length; i++) {\n        action = this.mouseActions[i];\n        if (action.mouse == mouse && action.key == key) {\n          return action.operation;\n        }\n      }\n      if (key) {\n        for (let i = 0; i < this.mouseActions.length; i++) {\n          action = this.mouseActions[i];\n          if (action.mouse == mouse && action.key == null) {\n            return action.operation;\n          }\n        }\n      }\n      return null;\n    });\n    /**\n     * Get the operation associated to mouse and key combination and returns the corresponding FSA state\n     * @param {Number} mouse Mouse button\n     * @param {String} key Keyboard modifier\n     * @returns The FSA state obtained from the operation associated to mouse/keyboard combination\n     */\n    __publicField(this, \"getOpStateFromAction\", (mouse, key) => {\n      let action;\n      for (let i = 0; i < this.mouseActions.length; i++) {\n        action = this.mouseActions[i];\n        if (action.mouse == mouse && action.key == key) {\n          return action.state;\n        }\n      }\n      if (key) {\n        for (let i = 0; i < this.mouseActions.length; i++) {\n          action = this.mouseActions[i];\n          if (action.mouse == mouse && action.key == null) {\n            return action.state;\n          }\n        }\n      }\n      return null;\n    });\n    /**\n     * Calculate the angle between two pointers\n     * @param {PointerEvent} p1\n     * @param {PointerEvent} p2\n     * @returns {Number} The angle between two pointers in degrees\n     */\n    __publicField(this, \"getAngle\", (p1, p2) => {\n      return Math.atan2(p2.clientY - p1.clientY, p2.clientX - p1.clientX) * 180 / Math.PI;\n    });\n    /**\n     * Update a PointerEvent inside current pointerevents array\n     * @param {PointerEvent} event\n     */\n    __publicField(this, \"updateTouchEvent\", (event) => {\n      for (let i = 0; i < this._touchCurrent.length; i++) {\n        if (this._touchCurrent[i].pointerId == event.pointerId) {\n          this._touchCurrent.splice(i, 1, event);\n          break;\n        }\n      }\n    });\n    /**\n     * Calculate the angular speed\n     * @param {Number} p0 Position at t0\n     * @param {Number} p1 Position at t1\n     * @param {Number} t0 Initial time in milliseconds\n     * @param {Number} t1 Ending time in milliseconds\n     */\n    __publicField(this, \"calculateAngularSpeed\", (p0, p1, t0, t1) => {\n      const s = p1 - p0;\n      const t = (t1 - t0) / 1e3;\n      if (t == 0) {\n        return 0;\n      }\n      return s / t;\n    });\n    /**\n     * Calculate the distance between two pointers\n     * @param {PointerEvent} p0 The first pointer\n     * @param {PointerEvent} p1 The second pointer\n     * @returns {number} The distance between the two pointers\n     */\n    __publicField(this, \"calculatePointersDistance\", (p0, p1) => {\n      return Math.sqrt(Math.pow(p1.clientX - p0.clientX, 2) + Math.pow(p1.clientY - p0.clientY, 2));\n    });\n    /**\n     * Calculate the rotation axis as the vector perpendicular between two vectors\n     * @param {Vector3} vec1 The first vector\n     * @param {Vector3} vec2 The second vector\n     * @returns {Vector3} The normalized rotation axis\n     */\n    __publicField(this, \"calculateRotationAxis\", (vec1, vec2) => {\n      this._rotationMatrix.extractRotation(this._cameraMatrixState);\n      this._quat.setFromRotationMatrix(this._rotationMatrix);\n      this._rotationAxis.crossVectors(vec1, vec2).applyQuaternion(this._quat);\n      return this._rotationAxis.normalize().clone();\n    });\n    /**\n     * Calculate the trackball radius so that gizmo's diamater will be 2/3 of the minimum side of the camera frustum\n     * @param {Camera} camera\n     * @returns {Number} The trackball radius\n     */\n    __publicField(this, \"calculateTbRadius\", (camera) => {\n      const factor = 0.67;\n      const distance = camera.position.distanceTo(this._gizmos.position);\n      if (camera instanceof PerspectiveCamera) {\n        const halfFovV = MathUtils.DEG2RAD * camera.fov * 0.5;\n        const halfFovH = Math.atan(camera.aspect * Math.tan(halfFovV));\n        return Math.tan(Math.min(halfFovV, halfFovH)) * distance * factor;\n      } else if (camera instanceof OrthographicCamera) {\n        return Math.min(camera.top, camera.right) * factor;\n      }\n    });\n    /**\n     * Focus operation consist of positioning the point of interest in front of the camera and a slightly zoom in\n     * @param {Vector3} point The point of interest\n     * @param {Number} size Scale factor\n     * @param {Number} amount Amount of operation to be completed (used for focus animations, default is complete full operation)\n     */\n    __publicField(this, \"focus\", (point, size, amount = 1) => {\n      if (this.camera) {\n        const focusPoint = point.clone();\n        focusPoint.sub(this._gizmos.position).multiplyScalar(amount);\n        this._translationMatrix.makeTranslation(focusPoint.x, focusPoint.y, focusPoint.z);\n        const gizmoStateTemp = this._gizmoMatrixState.clone();\n        this._gizmoMatrixState.premultiply(this._translationMatrix);\n        this._gizmoMatrixState.decompose(this._gizmos.position, this._gizmos.quaternion, this._gizmos.scale);\n        const cameraStateTemp = this._cameraMatrixState.clone();\n        this._cameraMatrixState.premultiply(this._translationMatrix);\n        this._cameraMatrixState.decompose(this.camera.position, this.camera.quaternion, this.camera.scale);\n        if (this.enableZoom) {\n          this.applyTransformMatrix(this.applyScale(size, this._gizmos.position));\n        }\n        this._gizmoMatrixState.copy(gizmoStateTemp);\n        this._cameraMatrixState.copy(cameraStateTemp);\n      }\n    });\n    /**\n     * Draw a grid and add it to the scene\n     */\n    __publicField(this, \"drawGrid\", () => {\n      if (this.scene) {\n        const color = 8947848;\n        const multiplier = 3;\n        let size, divisions, maxLength, tick;\n        if (this.camera instanceof OrthographicCamera) {\n          const width = this.camera.right - this.camera.left;\n          const height = this.camera.bottom - this.camera.top;\n          maxLength = Math.max(width, height);\n          tick = maxLength / 20;\n          size = maxLength / this.camera.zoom * multiplier;\n          divisions = size / tick * this.camera.zoom;\n        } else if (this.camera instanceof PerspectiveCamera) {\n          const distance = this.camera.position.distanceTo(this._gizmos.position);\n          const halfFovV = MathUtils.DEG2RAD * this.camera.fov * 0.5;\n          const halfFovH = Math.atan(this.camera.aspect * Math.tan(halfFovV));\n          maxLength = Math.tan(Math.max(halfFovV, halfFovH)) * distance * 2;\n          tick = maxLength / 20;\n          size = maxLength * multiplier;\n          divisions = size / tick;\n        }\n        if (this._grid == null && this.camera) {\n          this._grid = new GridHelper(size, divisions, color, color);\n          this._grid.position.copy(this._gizmos.position);\n          this._gridPosition.copy(this._grid.position);\n          this._grid.quaternion.copy(this.camera.quaternion);\n          this._grid.rotateX(Math.PI * 0.5);\n          this.scene.add(this._grid);\n        }\n      }\n    });\n    __publicField(this, \"connect\", (domElement) => {\n      if (domElement === document) {\n        console.error(\n          'THREE.ArcballControls: \"document\" should not be used as the target \"domElement\". Please use \"renderer.domElement\" instead.'\n        );\n      }\n      this.domElement = domElement;\n      this.domElement.style.touchAction = \"none\";\n      this.domElement.addEventListener(\"contextmenu\", this.onContextMenu);\n      this.domElement.addEventListener(\"pointerdown\", this.onPointerDown);\n      this.domElement.addEventListener(\"pointercancel\", this.onPointerCancel);\n      this.domElement.addEventListener(\"wheel\", this.onWheel);\n    });\n    /**\n     * Remove all listeners, stop animations and clean scene\n     */\n    __publicField(this, \"dispose\", () => {\n      var _a, _b, _c, _d, _e;\n      if (this._animationId != -1) {\n        window.cancelAnimationFrame(this._animationId);\n      }\n      (_a = this.domElement) == null ? void 0 : _a.removeEventListener(\"pointerdown\", this.onPointerDown);\n      (_b = this.domElement) == null ? void 0 : _b.removeEventListener(\"pointercancel\", this.onPointerCancel);\n      (_c = this.domElement) == null ? void 0 : _c.removeEventListener(\"wheel\", this.onWheel);\n      (_d = this.domElement) == null ? void 0 : _d.removeEventListener(\"contextmenu\", this.onContextMenu);\n      window.removeEventListener(\"pointermove\", this.onPointerMove);\n      window.removeEventListener(\"pointerup\", this.onPointerUp);\n      window.removeEventListener(\"resize\", this.onWindowResize);\n      (_e = this.scene) == null ? void 0 : _e.remove(this._gizmos);\n      this.disposeGrid();\n    });\n    /**\n     * remove the grid from the scene\n     */\n    __publicField(this, \"disposeGrid\", () => {\n      if (this._grid && this.scene) {\n        this.scene.remove(this._grid);\n        this._grid = null;\n      }\n    });\n    /**\n     * Compute the easing out cubic function for ease out effect in animation\n     * @param {Number} t The absolute progress of the animation in the bound of 0 (beginning of the) and 1 (ending of animation)\n     * @returns {Number} Result of easing out cubic at time t\n     */\n    __publicField(this, \"easeOutCubic\", (t) => {\n      return 1 - Math.pow(1 - t, 3);\n    });\n    /**\n     * Make rotation gizmos more or less visible\n     * @param {Boolean} isActive If true, make gizmos more visible\n     */\n    __publicField(this, \"activateGizmos\", (isActive) => {\n      for (const gizmo of this._gizmos.children) {\n        ;\n        gizmo.material.setValues({ opacity: isActive ? 1 : 0.6 });\n      }\n    });\n    /**\n     * Calculate the cursor position in NDC\n     * @param {number} x Cursor horizontal coordinate within the canvas\n     * @param {number} y Cursor vertical coordinate within the canvas\n     * @param {HTMLElement} canvas The canvas where the renderer draws its output\n     * @returns {Vector2} Cursor normalized position inside the canvas\n     */\n    __publicField(this, \"getCursorNDC\", (cursorX, cursorY, canvas) => {\n      const canvasRect = canvas.getBoundingClientRect();\n      this._v2_1.setX((cursorX - canvasRect.left) / canvasRect.width * 2 - 1);\n      this._v2_1.setY((canvasRect.bottom - cursorY) / canvasRect.height * 2 - 1);\n      return this._v2_1.clone();\n    });\n    /**\n     * Calculate the cursor position inside the canvas x/y coordinates with the origin being in the center of the canvas\n     * @param {Number} x Cursor horizontal coordinate within the canvas\n     * @param {Number} y Cursor vertical coordinate within the canvas\n     * @param {HTMLElement} canvas The canvas where the renderer draws its output\n     * @returns {Vector2} Cursor position inside the canvas\n     */\n    __publicField(this, \"getCursorPosition\", (cursorX, cursorY, canvas) => {\n      this._v2_1.copy(this.getCursorNDC(cursorX, cursorY, canvas));\n      if (this.camera instanceof OrthographicCamera) {\n        this._v2_1.x *= (this.camera.right - this.camera.left) * 0.5;\n        this._v2_1.y *= (this.camera.top - this.camera.bottom) * 0.5;\n      }\n      return this._v2_1.clone();\n    });\n    /**\n     * Set the camera to be controlled\n     * @param {Camera} camera The virtual camera to be controlled\n     */\n    __publicField(this, \"setCamera\", (camera) => {\n      if (camera) {\n        camera.lookAt(this.target);\n        camera.updateMatrix();\n        if (camera instanceof PerspectiveCamera) {\n          this._fov0 = camera.fov;\n          this._fovState = camera.fov;\n        }\n        this._cameraMatrixState0.copy(camera.matrix);\n        this._cameraMatrixState.copy(this._cameraMatrixState0);\n        this._cameraProjectionState.copy(camera.projectionMatrix);\n        this._zoom0 = camera.zoom;\n        this._zoomState = this._zoom0;\n        this._initialNear = camera.near;\n        this._nearPos0 = camera.position.distanceTo(this.target) - camera.near;\n        this._nearPos = this._initialNear;\n        this._initialFar = camera.far;\n        this._farPos0 = camera.position.distanceTo(this.target) - camera.far;\n        this._farPos = this._initialFar;\n        this._up0.copy(camera.up);\n        this._upState.copy(camera.up);\n        this.camera = camera;\n        this.camera.updateProjectionMatrix();\n        const tbRadius = this.calculateTbRadius(camera);\n        if (tbRadius !== void 0) {\n          this._tbRadius = tbRadius;\n        }\n        this.makeGizmos(this.target, this._tbRadius);\n      }\n    });\n    /**\n     * Creates the rotation gizmos matching trackball center and radius\n     * @param {Vector3} tbCenter The trackball center\n     * @param {number} tbRadius The trackball radius\n     */\n    __publicField(this, \"makeGizmos\", (tbCenter, tbRadius) => {\n      const curve = new EllipseCurve(0, 0, tbRadius, tbRadius);\n      const points = curve.getPoints(this._curvePts);\n      const curveGeometry = new BufferGeometry().setFromPoints(points);\n      const curveMaterialX = new LineBasicMaterial({ color: 16744576, fog: false, transparent: true, opacity: 0.6 });\n      const curveMaterialY = new LineBasicMaterial({ color: 8454016, fog: false, transparent: true, opacity: 0.6 });\n      const curveMaterialZ = new LineBasicMaterial({ color: 8421631, fog: false, transparent: true, opacity: 0.6 });\n      const gizmoX = new Line(curveGeometry, curveMaterialX);\n      const gizmoY = new Line(curveGeometry, curveMaterialY);\n      const gizmoZ = new Line(curveGeometry, curveMaterialZ);\n      const rotation = Math.PI * 0.5;\n      gizmoX.rotation.x = rotation;\n      gizmoY.rotation.y = rotation;\n      this._gizmoMatrixState0.identity().setPosition(tbCenter);\n      this._gizmoMatrixState.copy(this._gizmoMatrixState0);\n      if (this.camera && this.camera.zoom != 1) {\n        const size = 1 / this.camera.zoom;\n        this._scaleMatrix.makeScale(size, size, size);\n        this._translationMatrix.makeTranslation(-tbCenter.x, -tbCenter.y, -tbCenter.z);\n        this._gizmoMatrixState.premultiply(this._translationMatrix).premultiply(this._scaleMatrix);\n        this._translationMatrix.makeTranslation(tbCenter.x, tbCenter.y, tbCenter.z);\n        this._gizmoMatrixState.premultiply(this._translationMatrix);\n      }\n      this._gizmoMatrixState.decompose(this._gizmos.position, this._gizmos.quaternion, this._gizmos.scale);\n      this._gizmos.clear();\n      this._gizmos.add(gizmoX);\n      this._gizmos.add(gizmoY);\n      this._gizmos.add(gizmoZ);\n    });\n    /**\n     * Perform animation for focus operation\n     * @param {Number} time Instant in which this function is called as performance.now()\n     * @param {Vector3} point Point of interest for focus operation\n     * @param {Matrix4} cameraMatrix Camera matrix\n     * @param {Matrix4} gizmoMatrix Gizmos matrix\n     */\n    __publicField(this, \"onFocusAnim\", (time, point, cameraMatrix, gizmoMatrix) => {\n      if (this._timeStart == -1) {\n        this._timeStart = time;\n      }\n      if (this._state == STATE.ANIMATION_FOCUS) {\n        const deltaTime = time - this._timeStart;\n        const animTime = deltaTime / this.focusAnimationTime;\n        this._gizmoMatrixState.copy(gizmoMatrix);\n        if (animTime >= 1) {\n          this._gizmoMatrixState.decompose(this._gizmos.position, this._gizmos.quaternion, this._gizmos.scale);\n          this.focus(point, this.scaleFactor);\n          this._timeStart = -1;\n          this.updateTbState(STATE.IDLE, false);\n          this.activateGizmos(false);\n          this.dispatchEvent(_changeEvent);\n        } else {\n          const amount = this.easeOutCubic(animTime);\n          const size = 1 - amount + this.scaleFactor * amount;\n          this._gizmoMatrixState.decompose(this._gizmos.position, this._gizmos.quaternion, this._gizmos.scale);\n          this.focus(point, size, amount);\n          this.dispatchEvent(_changeEvent);\n          const self = this;\n          this._animationId = window.requestAnimationFrame(function(t) {\n            self.onFocusAnim(t, point, cameraMatrix, gizmoMatrix.clone());\n          });\n        }\n      } else {\n        this._animationId = -1;\n        this._timeStart = -1;\n      }\n    });\n    /**\n     * Perform animation for rotation operation\n     * @param {Number} time Instant in which this function is called as performance.now()\n     * @param {Vector3} rotationAxis Rotation axis\n     * @param {number} w0 Initial angular velocity\n     */\n    __publicField(this, \"onRotationAnim\", (time, rotationAxis, w0) => {\n      if (this._timeStart == -1) {\n        this._anglePrev = 0;\n        this._angleCurrent = 0;\n        this._timeStart = time;\n      }\n      if (this._state == STATE.ANIMATION_ROTATE) {\n        const deltaTime = (time - this._timeStart) / 1e3;\n        const w = w0 + -this.dampingFactor * deltaTime;\n        if (w > 0) {\n          this._angleCurrent = 0.5 * -this.dampingFactor * Math.pow(deltaTime, 2) + w0 * deltaTime + 0;\n          this.applyTransformMatrix(this.rotate(rotationAxis, this._angleCurrent));\n          this.dispatchEvent(_changeEvent);\n          const self = this;\n          this._animationId = window.requestAnimationFrame(function(t) {\n            self.onRotationAnim(t, rotationAxis, w0);\n          });\n        } else {\n          this._animationId = -1;\n          this._timeStart = -1;\n          this.updateTbState(STATE.IDLE, false);\n          this.activateGizmos(false);\n          this.dispatchEvent(_changeEvent);\n        }\n      } else {\n        this._animationId = -1;\n        this._timeStart = -1;\n        if (this._state != STATE.ROTATE) {\n          this.activateGizmos(false);\n          this.dispatchEvent(_changeEvent);\n        }\n      }\n    });\n    /**\n     * Perform pan operation moving camera between two points\n     * @param {Vector3} p0 Initial point\n     * @param {Vector3} p1 Ending point\n     * @param {Boolean} adjust If movement should be adjusted considering camera distance (Perspective only)\n     */\n    __publicField(this, \"pan\", (p0, p1, adjust = false) => {\n      if (this.camera) {\n        const movement = p0.clone().sub(p1);\n        if (this.camera instanceof OrthographicCamera) {\n          movement.multiplyScalar(1 / this.camera.zoom);\n        }\n        if (this.camera instanceof PerspectiveCamera && adjust) {\n          this._v3_1.setFromMatrixPosition(this._cameraMatrixState0);\n          this._v3_2.setFromMatrixPosition(this._gizmoMatrixState0);\n          const distanceFactor = this._v3_1.distanceTo(this._v3_2) / this.camera.position.distanceTo(this._gizmos.position);\n          movement.multiplyScalar(1 / distanceFactor);\n        }\n        this._v3_1.set(movement.x, movement.y, 0).applyQuaternion(this.camera.quaternion);\n        this._m4_1.makeTranslation(this._v3_1.x, this._v3_1.y, this._v3_1.z);\n        this.setTransformationMatrices(this._m4_1, this._m4_1);\n      }\n      return _transformation;\n    });\n    /**\n     * Reset trackball\n     */\n    __publicField(this, \"reset\", () => {\n      if (this.camera) {\n        this.camera.zoom = this._zoom0;\n        if (this.camera instanceof PerspectiveCamera) {\n          this.camera.fov = this._fov0;\n        }\n        this.camera.near = this._nearPos;\n        this.camera.far = this._farPos;\n        this._cameraMatrixState.copy(this._cameraMatrixState0);\n        this._cameraMatrixState.decompose(this.camera.position, this.camera.quaternion, this.camera.scale);\n        this.camera.up.copy(this._up0);\n        this.camera.updateMatrix();\n        this.camera.updateProjectionMatrix();\n        this._gizmoMatrixState.copy(this._gizmoMatrixState0);\n        this._gizmoMatrixState0.decompose(this._gizmos.position, this._gizmos.quaternion, this._gizmos.scale);\n        this._gizmos.updateMatrix();\n        const tbRadius = this.calculateTbRadius(this.camera);\n        if (tbRadius !== void 0) {\n          this._tbRadius = tbRadius;\n        }\n        this.makeGizmos(this._gizmos.position, this._tbRadius);\n        this.camera.lookAt(this._gizmos.position);\n        this.updateTbState(STATE.IDLE, false);\n        this.dispatchEvent(_changeEvent);\n      }\n    });\n    /**\n     * Rotate the camera around an axis passing by trackball's center\n     * @param {Vector3} axis Rotation axis\n     * @param {number} angle Angle in radians\n     * @returns {Object} Object with 'camera' field containing transformation matrix resulting from the operation to be applied to the camera\n     */\n    __publicField(this, \"rotate\", (axis, angle) => {\n      const point = this._gizmos.position;\n      this._translationMatrix.makeTranslation(-point.x, -point.y, -point.z);\n      this._rotationMatrix.makeRotationAxis(axis, -angle);\n      this._m4_1.makeTranslation(point.x, point.y, point.z);\n      this._m4_1.multiply(this._rotationMatrix);\n      this._m4_1.multiply(this._translationMatrix);\n      this.setTransformationMatrices(this._m4_1);\n      return _transformation;\n    });\n    __publicField(this, \"copyState\", () => {\n      if (this.camera) {\n        const state = JSON.stringify(\n          this.camera instanceof OrthographicCamera ? {\n            arcballState: {\n              cameraFar: this.camera.far,\n              cameraMatrix: this.camera.matrix,\n              cameraNear: this.camera.near,\n              cameraUp: this.camera.up,\n              cameraZoom: this.camera.zoom,\n              gizmoMatrix: this._gizmos.matrix\n            }\n          } : {\n            arcballState: {\n              cameraFar: this.camera.far,\n              cameraFov: this.camera.fov,\n              cameraMatrix: this.camera.matrix,\n              cameraNear: this.camera.near,\n              cameraUp: this.camera.up,\n              cameraZoom: this.camera.zoom,\n              gizmoMatrix: this._gizmos.matrix\n            }\n          }\n        );\n        navigator.clipboard.writeText(state);\n      }\n    });\n    __publicField(this, \"pasteState\", () => {\n      const self = this;\n      navigator.clipboard.readText().then(function resolved(value) {\n        self.setStateFromJSON(value);\n      });\n    });\n    /**\n     * Save the current state of the control. This can later be recovered with .reset\n     */\n    __publicField(this, \"saveState\", () => {\n      if (!this.camera)\n        return;\n      this._cameraMatrixState0.copy(this.camera.matrix);\n      this._gizmoMatrixState0.copy(this._gizmos.matrix);\n      this._nearPos = this.camera.near;\n      this._farPos = this.camera.far;\n      this._zoom0 = this.camera.zoom;\n      this._up0.copy(this.camera.up);\n      if (this.camera instanceof PerspectiveCamera) {\n        this._fov0 = this.camera.fov;\n      }\n    });\n    /**\n     * Perform uniform scale operation around a given point\n     * @param {Number} size Scale factor\n     * @param {Vector3} point Point around which scale\n     * @param {Boolean} scaleGizmos If gizmos should be scaled (Perspective only)\n     * @returns {Object} Object with 'camera' and 'gizmo' fields containing transformation matrices resulting from the operation to be applied to the camera and gizmos\n     */\n    __publicField(this, \"applyScale\", (size, point, scaleGizmos = true) => {\n      if (!this.camera)\n        return;\n      const scalePoint = point.clone();\n      let sizeInverse = 1 / size;\n      if (this.camera instanceof OrthographicCamera) {\n        this.camera.zoom = this._zoomState;\n        this.camera.zoom *= size;\n        if (this.camera.zoom > this.maxZoom) {\n          this.camera.zoom = this.maxZoom;\n          sizeInverse = this._zoomState / this.maxZoom;\n        } else if (this.camera.zoom < this.minZoom) {\n          this.camera.zoom = this.minZoom;\n          sizeInverse = this._zoomState / this.minZoom;\n        }\n        this.camera.updateProjectionMatrix();\n        this._v3_1.setFromMatrixPosition(this._gizmoMatrixState);\n        this._scaleMatrix.makeScale(sizeInverse, sizeInverse, sizeInverse);\n        this._translationMatrix.makeTranslation(-this._v3_1.x, -this._v3_1.y, -this._v3_1.z);\n        this._m4_2.makeTranslation(this._v3_1.x, this._v3_1.y, this._v3_1.z).multiply(this._scaleMatrix);\n        this._m4_2.multiply(this._translationMatrix);\n        scalePoint.sub(this._v3_1);\n        const amount = scalePoint.clone().multiplyScalar(sizeInverse);\n        scalePoint.sub(amount);\n        this._m4_1.makeTranslation(scalePoint.x, scalePoint.y, scalePoint.z);\n        this._m4_2.premultiply(this._m4_1);\n        this.setTransformationMatrices(this._m4_1, this._m4_2);\n        return _transformation;\n      }\n      if (this.camera instanceof PerspectiveCamera) {\n        this._v3_1.setFromMatrixPosition(this._cameraMatrixState);\n        this._v3_2.setFromMatrixPosition(this._gizmoMatrixState);\n        let distance = this._v3_1.distanceTo(scalePoint);\n        let amount = distance - distance * sizeInverse;\n        const newDistance = distance - amount;\n        if (newDistance < this.minDistance) {\n          sizeInverse = this.minDistance / distance;\n          amount = distance - distance * sizeInverse;\n        } else if (newDistance > this.maxDistance) {\n          sizeInverse = this.maxDistance / distance;\n          amount = distance - distance * sizeInverse;\n        }\n        let direction = scalePoint.clone().sub(this._v3_1).normalize().multiplyScalar(amount);\n        this._m4_1.makeTranslation(direction.x, direction.y, direction.z);\n        if (scaleGizmos) {\n          const pos = this._v3_2;\n          distance = pos.distanceTo(scalePoint);\n          amount = distance - distance * sizeInverse;\n          direction = scalePoint.clone().sub(this._v3_2).normalize().multiplyScalar(amount);\n          this._translationMatrix.makeTranslation(pos.x, pos.y, pos.z);\n          this._scaleMatrix.makeScale(sizeInverse, sizeInverse, sizeInverse);\n          this._m4_2.makeTranslation(direction.x, direction.y, direction.z).multiply(this._translationMatrix);\n          this._m4_2.multiply(this._scaleMatrix);\n          this._translationMatrix.makeTranslation(-pos.x, -pos.y, -pos.z);\n          this._m4_2.multiply(this._translationMatrix);\n          this.setTransformationMatrices(this._m4_1, this._m4_2);\n        } else {\n          this.setTransformationMatrices(this._m4_1);\n        }\n        return _transformation;\n      }\n    });\n    /**\n     * Set camera fov\n     * @param {Number} value fov to be setted\n     */\n    __publicField(this, \"setFov\", (value) => {\n      if (this.camera instanceof PerspectiveCamera) {\n        this.camera.fov = MathUtils.clamp(value, this.minFov, this.maxFov);\n        this.camera.updateProjectionMatrix();\n      }\n    });\n    /**\n     * Set the trackball's center point\n     * @param {Number} x X coordinate\n     * @param {Number} y Y coordinate\n     * @param {Number} z Z coordinate\n     */\n    __publicField(this, \"setTarget\", (x, y, z) => {\n      if (this.camera) {\n        this.target.set(x, y, z);\n        this._gizmos.position.set(x, y, z);\n        const tbRadius = this.calculateTbRadius(this.camera);\n        if (tbRadius !== void 0) {\n          this._tbRadius = tbRadius;\n        }\n        this.makeGizmos(this.target, this._tbRadius);\n        this.camera.lookAt(this.target);\n      }\n    });\n    /**\n     * Rotate camera around its direction axis passing by a given point by a given angle\n     * @param {Vector3} point The point where the rotation axis is passing trough\n     * @param {Number} angle Angle in radians\n     * @returns The computed transormation matix\n     */\n    __publicField(this, \"zRotate\", (point, angle) => {\n      this._rotationMatrix.makeRotationAxis(this._rotationAxis, angle);\n      this._translationMatrix.makeTranslation(-point.x, -point.y, -point.z);\n      this._m4_1.makeTranslation(point.x, point.y, point.z);\n      this._m4_1.multiply(this._rotationMatrix);\n      this._m4_1.multiply(this._translationMatrix);\n      this._v3_1.setFromMatrixPosition(this._gizmoMatrixState).sub(point);\n      this._v3_2.copy(this._v3_1).applyAxisAngle(this._rotationAxis, angle);\n      this._v3_2.sub(this._v3_1);\n      this._m4_2.makeTranslation(this._v3_2.x, this._v3_2.y, this._v3_2.z);\n      this.setTransformationMatrices(this._m4_1, this._m4_2);\n      return _transformation;\n    });\n    /**\n     * Unproject the cursor on the 3D object surface\n     * @param {Vector2} cursor Cursor coordinates in NDC\n     * @param {Camera} camera Virtual camera\n     * @returns {Vector3} The point of intersection with the model, if exist, null otherwise\n     */\n    __publicField(this, \"unprojectOnObj\", (cursor, camera) => {\n      if (!this.scene)\n        return null;\n      const raycaster = new Raycaster();\n      raycaster.near = camera.near;\n      raycaster.far = camera.far;\n      raycaster.setFromCamera(cursor, camera);\n      const intersect = raycaster.intersectObjects(this.scene.children, true);\n      for (let i = 0; i < intersect.length; i++) {\n        if (intersect[i].object.uuid != this._gizmos.uuid && intersect[i].face) {\n          return intersect[i].point.clone();\n        }\n      }\n      return null;\n    });\n    /**\n     * Unproject the cursor on the trackball surface\n     * @param {Camera} camera The virtual camera\n     * @param {Number} cursorX Cursor horizontal coordinate on screen\n     * @param {Number} cursorY Cursor vertical coordinate on screen\n     * @param {HTMLElement} canvas The canvas where the renderer draws its output\n     * @param {number} tbRadius The trackball radius\n     * @returns {Vector3} The unprojected point on the trackball surface\n     */\n    __publicField(this, \"unprojectOnTbSurface\", (camera, cursorX, cursorY, canvas, tbRadius) => {\n      if (camera instanceof OrthographicCamera) {\n        this._v2_1.copy(this.getCursorPosition(cursorX, cursorY, canvas));\n        this._v3_1.set(this._v2_1.x, this._v2_1.y, 0);\n        const x2 = Math.pow(this._v2_1.x, 2);\n        const y2 = Math.pow(this._v2_1.y, 2);\n        const r2 = Math.pow(this._tbRadius, 2);\n        if (x2 + y2 <= r2 * 0.5) {\n          this._v3_1.setZ(Math.sqrt(r2 - (x2 + y2)));\n        } else {\n          this._v3_1.setZ(r2 * 0.5 / Math.sqrt(x2 + y2));\n        }\n        return this._v3_1;\n      }\n      if (camera instanceof PerspectiveCamera) {\n        this._v2_1.copy(this.getCursorNDC(cursorX, cursorY, canvas));\n        this._v3_1.set(this._v2_1.x, this._v2_1.y, -1);\n        this._v3_1.applyMatrix4(camera.projectionMatrixInverse);\n        const rayDir = this._v3_1.clone().normalize();\n        const cameraGizmoDistance = camera.position.distanceTo(this._gizmos.position);\n        const radius2 = Math.pow(tbRadius, 2);\n        const h = this._v3_1.z;\n        const l = Math.sqrt(Math.pow(this._v3_1.x, 2) + Math.pow(this._v3_1.y, 2));\n        if (l == 0) {\n          rayDir.set(this._v3_1.x, this._v3_1.y, tbRadius);\n          return rayDir;\n        }\n        const m = h / l;\n        const q = cameraGizmoDistance;\n        let a = Math.pow(m, 2) + 1;\n        let b = 2 * m * q;\n        let c = Math.pow(q, 2) - radius2;\n        let delta = Math.pow(b, 2) - 4 * a * c;\n        if (delta >= 0) {\n          this._v2_1.setX((-b - Math.sqrt(delta)) / (2 * a));\n          this._v2_1.setY(m * this._v2_1.x + q);\n          const angle = MathUtils.RAD2DEG * this._v2_1.angle();\n          if (angle >= 45) {\n            const rayLength2 = Math.sqrt(Math.pow(this._v2_1.x, 2) + Math.pow(cameraGizmoDistance - this._v2_1.y, 2));\n            rayDir.multiplyScalar(rayLength2);\n            rayDir.z += cameraGizmoDistance;\n            return rayDir;\n          }\n        }\n        a = m;\n        b = q;\n        c = -radius2 * 0.5;\n        delta = Math.pow(b, 2) - 4 * a * c;\n        this._v2_1.setX((-b - Math.sqrt(delta)) / (2 * a));\n        this._v2_1.setY(m * this._v2_1.x + q);\n        const rayLength = Math.sqrt(Math.pow(this._v2_1.x, 2) + Math.pow(cameraGizmoDistance - this._v2_1.y, 2));\n        rayDir.multiplyScalar(rayLength);\n        rayDir.z += cameraGizmoDistance;\n        return rayDir;\n      }\n    });\n    /**\n     * Unproject the cursor on the plane passing through the center of the trackball orthogonal to the camera\n     * @param {Camera} camera The virtual camera\n     * @param {Number} cursorX Cursor horizontal coordinate on screen\n     * @param {Number} cursorY Cursor vertical coordinate on screen\n     * @param {HTMLElement} canvas The canvas where the renderer draws its output\n     * @param {Boolean} initialDistance If initial distance between camera and gizmos should be used for calculations instead of current (Perspective only)\n     * @returns {Vector3} The unprojected point on the trackball plane\n     */\n    __publicField(this, \"unprojectOnTbPlane\", (camera, cursorX, cursorY, canvas, initialDistance = false) => {\n      if (camera instanceof OrthographicCamera) {\n        this._v2_1.copy(this.getCursorPosition(cursorX, cursorY, canvas));\n        this._v3_1.set(this._v2_1.x, this._v2_1.y, 0);\n        return this._v3_1.clone();\n      }\n      if (camera instanceof PerspectiveCamera) {\n        this._v2_1.copy(this.getCursorNDC(cursorX, cursorY, canvas));\n        this._v3_1.set(this._v2_1.x, this._v2_1.y, -1);\n        this._v3_1.applyMatrix4(camera.projectionMatrixInverse);\n        const rayDir = this._v3_1.clone().normalize();\n        const h = this._v3_1.z;\n        const l = Math.sqrt(Math.pow(this._v3_1.x, 2) + Math.pow(this._v3_1.y, 2));\n        let cameraGizmoDistance;\n        if (initialDistance) {\n          cameraGizmoDistance = this._v3_1.setFromMatrixPosition(this._cameraMatrixState0).distanceTo(this._v3_2.setFromMatrixPosition(this._gizmoMatrixState0));\n        } else {\n          cameraGizmoDistance = camera.position.distanceTo(this._gizmos.position);\n        }\n        if (l == 0) {\n          rayDir.set(0, 0, 0);\n          return rayDir;\n        }\n        const m = h / l;\n        const q = cameraGizmoDistance;\n        const x = -q / m;\n        const rayLength = Math.sqrt(Math.pow(q, 2) + Math.pow(x, 2));\n        rayDir.multiplyScalar(rayLength);\n        rayDir.z = 0;\n        return rayDir;\n      }\n    });\n    /**\n     * Update camera and gizmos state\n     */\n    __publicField(this, \"updateMatrixState\", () => {\n      if (!this.camera)\n        return;\n      this._cameraMatrixState.copy(this.camera.matrix);\n      this._gizmoMatrixState.copy(this._gizmos.matrix);\n      if (this.camera instanceof OrthographicCamera) {\n        this._cameraProjectionState.copy(this.camera.projectionMatrix);\n        this.camera.updateProjectionMatrix();\n        this._zoomState = this.camera.zoom;\n      }\n      if (this.camera instanceof PerspectiveCamera) {\n        this._fovState = this.camera.fov;\n      }\n    });\n    /**\n     * Update the trackball FSA\n     * @param {STATE} newState New state of the FSA\n     * @param {Boolean} updateMatrices If matriices state should be updated\n     */\n    __publicField(this, \"updateTbState\", (newState, updateMatrices) => {\n      this._state = newState;\n      if (updateMatrices) {\n        this.updateMatrixState();\n      }\n    });\n    __publicField(this, \"update\", () => {\n      const EPS = 1e-6;\n      if (!this.target.equals(this._currentTarget) && this.camera) {\n        this._gizmos.position.set(this.target.x, this.target.y, this.target.z);\n        const tbRadius = this.calculateTbRadius(this.camera);\n        if (tbRadius !== void 0) {\n          this._tbRadius = tbRadius;\n        }\n        this.makeGizmos(this.target, this._tbRadius);\n        this._currentTarget.copy(this.target);\n      }\n      if (!this.camera)\n        return;\n      if (this.camera instanceof OrthographicCamera) {\n        if (this.camera.zoom > this.maxZoom || this.camera.zoom < this.minZoom) {\n          const newZoom = MathUtils.clamp(this.camera.zoom, this.minZoom, this.maxZoom);\n          this.applyTransformMatrix(this.applyScale(newZoom / this.camera.zoom, this._gizmos.position, true));\n        }\n      }\n      if (this.camera instanceof PerspectiveCamera) {\n        const distance = this.camera.position.distanceTo(this._gizmos.position);\n        if (distance > this.maxDistance + EPS || distance < this.minDistance - EPS) {\n          const newDistance = MathUtils.clamp(distance, this.minDistance, this.maxDistance);\n          this.applyTransformMatrix(this.applyScale(newDistance / distance, this._gizmos.position));\n          this.updateMatrixState();\n        }\n        if (this.camera.fov < this.minFov || this.camera.fov > this.maxFov) {\n          this.camera.fov = MathUtils.clamp(this.camera.fov, this.minFov, this.maxFov);\n          this.camera.updateProjectionMatrix();\n        }\n        const oldRadius = this._tbRadius;\n        const tbRadius = this.calculateTbRadius(this.camera);\n        if (tbRadius !== void 0) {\n          this._tbRadius = tbRadius;\n        }\n        if (oldRadius < this._tbRadius - EPS || oldRadius > this._tbRadius + EPS) {\n          const scale = (this._gizmos.scale.x + this._gizmos.scale.y + this._gizmos.scale.z) / 3;\n          const newRadius = this._tbRadius / scale;\n          const curve = new EllipseCurve(0, 0, newRadius, newRadius);\n          const points = curve.getPoints(this._curvePts);\n          const curveGeometry = new BufferGeometry().setFromPoints(points);\n          for (const gizmo in this._gizmos.children) {\n            const child = this._gizmos.children[gizmo];\n            child.geometry = curveGeometry;\n          }\n        }\n      }\n      this.camera.lookAt(this._gizmos.position);\n    });\n    __publicField(this, \"setStateFromJSON\", (json) => {\n      const state = JSON.parse(json);\n      if (state.arcballState && this.camera) {\n        this._cameraMatrixState.fromArray(state.arcballState.cameraMatrix.elements);\n        this._cameraMatrixState.decompose(this.camera.position, this.camera.quaternion, this.camera.scale);\n        this.camera.up.copy(state.arcballState.cameraUp);\n        this.camera.near = state.arcballState.cameraNear;\n        this.camera.far = state.arcballState.cameraFar;\n        this.camera.zoom = state.arcballState.cameraZoom;\n        if (this.camera instanceof PerspectiveCamera) {\n          this.camera.fov = state.arcballState.cameraFov;\n        }\n        this._gizmoMatrixState.fromArray(state.arcballState.gizmoMatrix.elements);\n        this._gizmoMatrixState.decompose(this._gizmos.position, this._gizmos.quaternion, this._gizmos.scale);\n        this.camera.updateMatrix();\n        this.camera.updateProjectionMatrix();\n        this._gizmos.updateMatrix();\n        const tbRadius = this.calculateTbRadius(this.camera);\n        if (tbRadius !== void 0) {\n          this._tbRadius = tbRadius;\n        }\n        const gizmoTmp = new Matrix4().copy(this._gizmoMatrixState0);\n        this.makeGizmos(this._gizmos.position, this._tbRadius);\n        this._gizmoMatrixState0.copy(gizmoTmp);\n        this.camera.lookAt(this._gizmos.position);\n        this.updateTbState(STATE.IDLE, false);\n        this.dispatchEvent(_changeEvent);\n      }\n    });\n    this.camera = null;\n    this.domElement = domElement;\n    this.scene = scene;\n    this.mouseActions = [];\n    this._mouseOp = null;\n    this._v2_1 = new Vector2();\n    this._v3_1 = new Vector3();\n    this._v3_2 = new Vector3();\n    this._m4_1 = new Matrix4();\n    this._m4_2 = new Matrix4();\n    this._quat = new Quaternion();\n    this._translationMatrix = new Matrix4();\n    this._rotationMatrix = new Matrix4();\n    this._scaleMatrix = new Matrix4();\n    this._rotationAxis = new Vector3();\n    this._cameraMatrixState = new Matrix4();\n    this._cameraProjectionState = new Matrix4();\n    this._fovState = 1;\n    this._upState = new Vector3();\n    this._zoomState = 1;\n    this._nearPos = 0;\n    this._farPos = 0;\n    this._gizmoMatrixState = new Matrix4();\n    this._up0 = new Vector3();\n    this._zoom0 = 1;\n    this._fov0 = 0;\n    this._initialNear = 0;\n    this._nearPos0 = 0;\n    this._initialFar = 0;\n    this._farPos0 = 0;\n    this._cameraMatrixState0 = new Matrix4();\n    this._gizmoMatrixState0 = new Matrix4();\n    this._button = -1;\n    this._touchStart = [];\n    this._touchCurrent = [];\n    this._input = INPUT.NONE;\n    this._switchSensibility = 32;\n    this._startFingerDistance = 0;\n    this._currentFingerDistance = 0;\n    this._startFingerRotation = 0;\n    this._currentFingerRotation = 0;\n    this._devPxRatio = 0;\n    this._downValid = true;\n    this._nclicks = 0;\n    this._downEvents = [];\n    this._clickStart = 0;\n    this._maxDownTime = 250;\n    this._maxInterval = 300;\n    this._posThreshold = 24;\n    this._movementThreshold = 24;\n    this._currentCursorPosition = new Vector3();\n    this._startCursorPosition = new Vector3();\n    this._grid = null;\n    this._gridPosition = new Vector3();\n    this._gizmos = new Group();\n    this._curvePts = 128;\n    this._timeStart = -1;\n    this._animationId = -1;\n    this.focusAnimationTime = 500;\n    this._timePrev = 0;\n    this._timeCurrent = 0;\n    this._anglePrev = 0;\n    this._angleCurrent = 0;\n    this._cursorPosPrev = new Vector3();\n    this._cursorPosCurr = new Vector3();\n    this._wPrev = 0;\n    this._wCurr = 0;\n    this.adjustNearFar = false;\n    this.scaleFactor = 1.1;\n    this.dampingFactor = 25;\n    this.wMax = 20;\n    this.enableAnimations = true;\n    this.enableGrid = false;\n    this.cursorZoom = false;\n    this.minFov = 5;\n    this.maxFov = 90;\n    this.enabled = true;\n    this.enablePan = true;\n    this.enableRotate = true;\n    this.enableZoom = true;\n    this.minDistance = 0;\n    this.maxDistance = Infinity;\n    this.minZoom = 0;\n    this.maxZoom = Infinity;\n    this.target = new Vector3(0, 0, 0);\n    this._currentTarget = new Vector3(0, 0, 0);\n    this._tbRadius = 1;\n    this._state = STATE.IDLE;\n    this.setCamera(camera);\n    if (this.scene) {\n      this.scene.add(this._gizmos);\n    }\n    this._devPxRatio = window.devicePixelRatio;\n    this.initializeMouseActions();\n    if (this.domElement)\n      this.connect(this.domElement);\n    window.addEventListener(\"resize\", this.onWindowResize);\n  }\n  /**\n   * Apply a transformation matrix, to the camera and gizmos\n   * @param {Object} transformation Object containing matrices to apply to camera and gizmos\n   */\n  applyTransformMatrix(transformation) {\n    if ((transformation == null ? void 0 : transformation.camera) && this.camera) {\n      this._m4_1.copy(this._cameraMatrixState).premultiply(transformation.camera);\n      this._m4_1.decompose(this.camera.position, this.camera.quaternion, this.camera.scale);\n      this.camera.updateMatrix();\n      if (this._state == STATE.ROTATE || this._state == STATE.ZROTATE || this._state == STATE.ANIMATION_ROTATE) {\n        this.camera.up.copy(this._upState).applyQuaternion(this.camera.quaternion);\n      }\n    }\n    if (transformation == null ? void 0 : transformation.gizmos) {\n      this._m4_1.copy(this._gizmoMatrixState).premultiply(transformation.gizmos);\n      this._m4_1.decompose(this._gizmos.position, this._gizmos.quaternion, this._gizmos.scale);\n      this._gizmos.updateMatrix();\n    }\n    if ((this._state == STATE.SCALE || this._state == STATE.FOCUS || this._state == STATE.ANIMATION_FOCUS) && this.camera) {\n      const tbRadius = this.calculateTbRadius(this.camera);\n      if (tbRadius !== void 0) {\n        this._tbRadius = tbRadius;\n      }\n      if (this.adjustNearFar) {\n        const cameraDistance = this.camera.position.distanceTo(this._gizmos.position);\n        const bb = new Box3();\n        bb.setFromObject(this._gizmos);\n        const sphere = new Sphere();\n        bb.getBoundingSphere(sphere);\n        const adjustedNearPosition = Math.max(this._nearPos0, sphere.radius + sphere.center.length());\n        const regularNearPosition = cameraDistance - this._initialNear;\n        const minNearPos = Math.min(adjustedNearPosition, regularNearPosition);\n        this.camera.near = cameraDistance - minNearPos;\n        const adjustedFarPosition = Math.min(this._farPos0, -sphere.radius + sphere.center.length());\n        const regularFarPosition = cameraDistance - this._initialFar;\n        const minFarPos = Math.min(adjustedFarPosition, regularFarPosition);\n        this.camera.far = cameraDistance - minFarPos;\n        this.camera.updateProjectionMatrix();\n      } else {\n        let update = false;\n        if (this.camera.near != this._initialNear) {\n          this.camera.near = this._initialNear;\n          update = true;\n        }\n        if (this.camera.far != this._initialFar) {\n          this.camera.far = this._initialFar;\n          update = true;\n        }\n        if (update) {\n          this.camera.updateProjectionMatrix();\n        }\n      }\n    }\n  }\n  /**\n   * Set gizmos visibility\n   * @param {Boolean} value Value of gizmos visibility\n   */\n  setGizmosVisible(value) {\n    this._gizmos.visible = value;\n    this.dispatchEvent(_changeEvent);\n  }\n  /**\n   * Set values in transformation object\n   * @param {Matrix4} camera Transformation to be applied to the camera\n   * @param {Matrix4} gizmos Transformation to be applied to gizmos\n   */\n  setTransformationMatrices(camera = null, gizmos = null) {\n    if (camera) {\n      if (_transformation.camera) {\n        _transformation.camera.copy(camera);\n      } else {\n        _transformation.camera = camera.clone();\n      }\n    } else {\n      _transformation.camera = null;\n    }\n    if (gizmos) {\n      if (_transformation.gizmos) {\n        _transformation.gizmos.copy(gizmos);\n      } else {\n        _transformation.gizmos = gizmos.clone();\n      }\n    } else {\n      _transformation.gizmos = null;\n    }\n  }\n}\nexport {\n  ArcballControls\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}