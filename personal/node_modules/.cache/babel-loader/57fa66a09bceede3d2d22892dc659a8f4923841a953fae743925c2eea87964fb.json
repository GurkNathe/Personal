{"ast":null,"code":"import _toConsumableArray from \"/home/krug/Coding/JavaScript/Websites/Personal/personal/node_modules/.pnpm/@babel+runtime@7.22.3/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nvar BALANCE_STATE = {\n  UNBALANCED_RIGHT: -2,\n  SLIGHTLY_UNBALANCED_RIGHT: -1,\n  BALANCED: 0,\n  SLIGHTLY_UNBALANCED_LEFT: 1,\n  UNBALANCED_LEFT: 2\n};\nfunction getHeight(node) {\n  return node ? node.height : -1;\n}\nfunction rotateLeft(node) {\n  var right = node.right;\n  node.right = right.left;\n  right.left = node;\n  node.height = Math.max(getHeight(node.left), getHeight(node.right)) + 1;\n  right.height = Math.max(getHeight(right.left), getHeight(right.right)) + 1;\n  return right;\n}\nfunction rotateRight(node) {\n  var left = node.left;\n  node.left = left.right;\n  left.right = node;\n  node.height = Math.max(getHeight(node.left), getHeight(node.right)) + 1;\n  left.height = Math.max(getHeight(left.left), getHeight(left.right)) + 1;\n  return left;\n}\nexport function contains(node, key) {\n  return !!find(node, key);\n}\nexport function getSize(root) {\n  var size = 0;\n  var queue = [];\n  if (root !== null) {\n    queue.push(root);\n  }\n  while (queue.length > 0) {\n    var node = queue.shift();\n    size++;\n    if (node.left !== null) {\n      queue.push(node.left);\n    }\n    if (node.right !== null) {\n      queue.push(node.right);\n    }\n  }\n  return size;\n}\nexport function isBalanced(root) {\n  if (root === null) return true;\n  var stack = [root];\n  while (stack.length > 0) {\n    var node = stack.pop();\n    if (node === undefined) return true;\n    var heightDiff = getHeight(node.left) - getHeight(node.right);\n    if (heightDiff > 1 || heightDiff < -1) {\n      return false;\n    }\n    if (node.right !== null) {\n      stack.push(node.right);\n    }\n    if (node.left !== null) {\n      stack.push(node.left);\n    }\n  }\n  return true;\n}\nexport function rangeSearch(node, min, max) {\n  if (!node) {\n    return [];\n  }\n  // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n  // @ts-ignore\n  var result = [];\n  function traverse(node) {\n    if (!node) {\n      return;\n    }\n    if (node.key > min) {\n      traverse(node.left);\n    }\n    if (node.key >= min && node.key <= max) {\n      result.push.apply(result, _toConsumableArray(node.value));\n    }\n    if (node.key < max) {\n      traverse(node.right);\n    }\n  }\n  traverse(node);\n  return result;\n}\nexport function greaterThan(node, key) {\n  var inclusive = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n  if (!node) {\n    return [];\n  }\n  // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n  // @ts-ignore\n  var result = [];\n  function traverse(node) {\n    if (!node) {\n      return;\n    }\n    if (inclusive && node.key >= key) {\n      result.push.apply(result, _toConsumableArray(node.value));\n    }\n    if (!inclusive && node.key > key) {\n      result.push.apply(result, _toConsumableArray(node.value));\n    }\n    traverse(node.left);\n    traverse(node.right);\n  }\n  traverse(node);\n  return result;\n}\nexport function lessThan(node, key) {\n  var inclusive = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n  if (!node) {\n    return [];\n  }\n  // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n  // @ts-ignore\n  var result = [];\n  function traverse(node) {\n    if (!node) {\n      return;\n    }\n    if (inclusive && node.key <= key) {\n      result.push.apply(result, _toConsumableArray(node.value));\n    }\n    if (!inclusive && node.key < key) {\n      result.push.apply(result, _toConsumableArray(node.value));\n    }\n    traverse(node.left);\n    traverse(node.right);\n  }\n  traverse(node);\n  return result;\n}\nfunction getNodeByKey(node, key) {\n  while (node !== null) {\n    if (key < node.key) {\n      node = node.left;\n    } else if (key > node.key) {\n      node = node.right;\n    } else {\n      return node;\n    }\n  }\n  return null;\n}\nexport function create(key, value) {\n  return {\n    key: key,\n    value: value,\n    left: null,\n    right: null,\n    height: 0\n  };\n}\nexport function insert(root, key, value) {\n  var parent = null;\n  var current = root;\n  while (current !== null) {\n    parent = current;\n    if (key < current.key) {\n      current = current.left;\n    } else if (key > current.key) {\n      current = current.right;\n    } else {\n      // assuming value is an array here\n      current.value = current.value.concat(value);\n      return root;\n    }\n  }\n  var newNode = create(key, value);\n  if (!parent) {\n    root = newNode; // tree was empty\n  } else if (key < parent.key) {\n    parent.left = newNode;\n  } else {\n    parent.right = newNode;\n  }\n  current = newNode;\n  while (parent) {\n    var balanceFactor = getHeight(parent.left) - getHeight(parent.right);\n    if (balanceFactor === BALANCE_STATE.UNBALANCED_LEFT) {\n      if (key < parent.left.key) {\n        parent = rotateRight(parent);\n      } else {\n        parent.left = rotateLeft(parent.left);\n        parent = rotateRight(parent);\n      }\n    }\n    if (balanceFactor === BALANCE_STATE.UNBALANCED_RIGHT) {\n      if (key > parent.right.key) {\n        parent = rotateLeft(parent);\n      } else {\n        parent.right = rotateRight(parent.right);\n        parent = rotateLeft(parent);\n      }\n    }\n    if (parent == root) {\n      break;\n    }\n    current = parent;\n    parent = getNodeParent(root, current.key);\n  }\n  return root;\n}\nfunction getNodeParent(root, key) {\n  var current = root;\n  var parent = null;\n  while (current !== null) {\n    if (key < current.key) {\n      parent = current;\n      current = current.left;\n    } else if (key > current.key) {\n      parent = current;\n      current = current.right;\n    } else {\n      break;\n    }\n  }\n  return parent;\n}\nexport function find(root, key) {\n  var node = getNodeByKey(root, key);\n  if (!node) {\n    return null;\n  }\n  return node.value;\n}\nexport function remove(root, key) {\n  var node = root;\n  var parentNode = null;\n  while (node && node.key !== key) {\n    parentNode = node;\n    if (key < node.key) {\n      node = node.left;\n    } else {\n      node = node.right;\n    }\n  }\n  if (!node) {\n    return null;\n  }\n  if (!node.left && !node.right) {\n    if (!parentNode) {\n      // Node to be deleted is root\n      root = null;\n    } else {\n      if (parentNode.left === node) {\n        parentNode.left = null;\n      } else {\n        parentNode.right = null;\n      }\n    }\n  } else if (node.left && node.right) {\n    var minValueNode = node.right;\n    var minValueParent = node;\n    while (minValueNode.left) {\n      minValueParent = minValueNode;\n      minValueNode = minValueNode.left;\n    }\n    node.key = minValueNode.key;\n    if (minValueParent === node) {\n      minValueParent.right = minValueNode.right;\n    } else {\n      minValueParent.left = minValueNode.right;\n    }\n  } else {\n    var childNode = node.left ? node.left : node.right;\n    if (!parentNode) {\n      root = childNode;\n    } else {\n      if (parentNode.left === node) {\n        parentNode.left = childNode;\n      } else {\n        parentNode.right = childNode;\n      }\n    }\n  }\n  return root;\n}\nexport function removeDocument(root, id, key) {\n  var node = getNodeByKey(root, key);\n  if (node.value.length === 1) {\n    remove(root, key);\n    return;\n  }\n  node.value.splice(node.value.indexOf(id), 1);\n}","map":{"version":3,"names":["BALANCE_STATE","UNBALANCED_RIGHT","SLIGHTLY_UNBALANCED_RIGHT","BALANCED","SLIGHTLY_UNBALANCED_LEFT","UNBALANCED_LEFT","getHeight","node","height","rotateLeft","right","left","Math","max","rotateRight","contains","key","find","getSize","root","size","queue","push","length","shift","isBalanced","stack","pop","undefined","heightDiff","rangeSearch","min","result","traverse","apply","_toConsumableArray","value","greaterThan","inclusive","arguments","lessThan","getNodeByKey","create","insert","parent","current","concat","newNode","balanceFactor","getNodeParent","remove","parentNode","minValueNode","minValueParent","childNode","removeDocument","id","splice","indexOf"],"sources":["/home/krug/Coding/JavaScript/Websites/Personal/personal/node_modules/.pnpm/@orama+orama@1.0.3/node_modules/@orama/orama/src/trees/avl.ts"],"sourcesContent":["export type Node<K, V> = {\n  key: K\n  value: V\n  left: Node<K, V> | null\n  right: Node<K, V> | null\n  height: number\n}\n\nconst BALANCE_STATE = {\n  UNBALANCED_RIGHT: -2,\n  SLIGHTLY_UNBALANCED_RIGHT: -1,\n  BALANCED: 0,\n  SLIGHTLY_UNBALANCED_LEFT: 1,\n  UNBALANCED_LEFT: 2,\n}\n\nfunction getHeight<K, V>(node: Node<K, V> | null): number {\n  return node ? node.height : -1\n}\n\nfunction rotateLeft<K, V>(node: Node<K, V>): Node<K, V> {\n  const right = node.right as Node<K, V>\n  node.right = right.left\n  right.left = node\n  node.height = Math.max(getHeight(node.left), getHeight(node.right)) + 1\n  right.height = Math.max(getHeight(right.left), getHeight(right.right)) + 1\n  return right\n}\n\nfunction rotateRight<K, V>(node: Node<K, V>): Node<K, V> {\n  const left = node.left as Node<K, V>\n  node.left = left.right\n  left.right = node\n  node.height = Math.max(getHeight(node.left), getHeight(node.right)) + 1\n  left.height = Math.max(getHeight(left.left), getHeight(left.right)) + 1\n  return left\n}\n\nexport function contains<K, V>(node: Node<K, V>, key: K): boolean {\n  return !!find(node, key)\n}\n\nexport function getSize<K, V>(root: Node<K, V> | null): number {\n  let size = 0;\n  const queue: Array<Node<K, V>> = [];\n\n  if (root !== null) {\n    queue.push(root);\n  }\n\n  while (queue.length > 0) {\n    const node = queue.shift() as Node<K, V>;\n    size++;\n\n    if (node.left !== null) {\n      queue.push(node.left);\n    }\n\n    if (node.right !== null) {\n      queue.push(node.right);\n    }\n  }\n\n  return size;\n}\n\nexport function isBalanced<K, V>(root: Node<K, V> | null): boolean {\n  if (root === null)\n    return true;\n\n  const stack: Node<K, V>[] = [root];\n\n  while (stack.length > 0) {\n    const node = stack.pop();\n\n    if (node === undefined)\n      return true;\n\n    const heightDiff = getHeight(node.left) - getHeight(node.right);\n\n    if (heightDiff > 1 || heightDiff < -1) {\n      return false;\n    }\n\n    if (node.right !== null) {\n      stack.push(node.right);\n    }\n\n    if (node.left !== null) {\n      stack.push(node.left);\n    }\n  }\n\n  return true;\n}\n\nexport function rangeSearch<K, V>(node: Node<K, V>, min: K, max: K): V {\n  if (!node) {\n    return [] as unknown as V\n  }\n\n  // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n  // @ts-ignore\n  const result: V[] = []\n\n  function traverse(node: Node<K, V>) {\n    if (!node) {\n      return\n    }\n\n    if (node.key > min) {\n      traverse(node.left as Node<K, V>)\n    }\n\n    if (node.key >= min && node.key <= max) {\n      result.push(...(node.value as V[]))\n    }\n\n    if (node.key < max) {\n      traverse(node.right as Node<K, V>)\n    }\n  }\n\n  traverse(node)\n\n  return result as V\n}\n\nexport function greaterThan<K, V>(node: Node<K, V>, key: K, inclusive = false): V {\n  if (!node) {\n    return [] as unknown as V\n  }\n\n  // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n  // @ts-ignore\n  const result: V[] = []\n\n  function traverse(node: Node<K, V>) {\n    if (!node) {\n      return\n    }\n\n    if (inclusive && node.key >= key) {\n      result.push(...(node.value as V[]))\n    }\n\n    if (!inclusive && node.key > key) {\n      result.push(...(node.value as V[]))\n    }\n\n    traverse(node.left as Node<K, V>)\n    traverse(node.right as Node<K, V>)\n  }\n\n  traverse(node)\n\n  return result as V\n}\n\nexport function lessThan<K, V>(node: Node<K, V>, key: K, inclusive = false): V {\n  if (!node) {\n    return [] as unknown as V\n  }\n\n  // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n  // @ts-ignore\n  const result: V[] = []\n\n  function traverse(node: Node<K, V>) {\n    if (!node) {\n      return\n    }\n\n    if (inclusive && node.key <= key) {\n      result.push(...(node.value as V[]))\n    }\n\n    if (!inclusive && node.key < key) {\n      result.push(...(node.value as V[]))\n    }\n\n    traverse(node.left as Node<K, V>)\n    traverse(node.right as Node<K, V>)\n  }\n\n  traverse(node)\n\n  return result as V\n}\n\nfunction getNodeByKey<K, V>(node: Node<K, V> | null, key: K): Node<K, V> | null {\n  while (node !== null) {\n    if (key < node.key) {\n      node = node.left;\n    } else if (key > node.key) {\n      node = node.right;\n    } else {\n      return node;\n    }\n  }\n  return null;\n}\n\nexport function create<K, V>(key: K, value: V): Node<K, V> {\n  return {\n    key,\n    value,\n    left: null,\n    right: null,\n    height: 0,\n  }\n}\n\nexport function insert<K, V>(root: Node<K, V>, key: K, value: V): Node<K, V> {\n  let parent = null;\n  let current = root;\n\n  while (current !== null) {\n    parent = current;\n    if (key < current.key) {\n        current = current.left as Node<K, V>;\n    } else if (key > current.key) {\n        current = current.right as Node<K, V>;\n    } else {\n      // assuming value is an array here\n      (current.value as string[]) = (current.value as string[]).concat(value as string);\n      return root;\n    }\n  }\n\n  const newNode = create(key, value);\n\n  if (!parent) {\n      root = newNode; // tree was empty\n  } else if (key < parent.key) {\n      parent.left = newNode;\n  } else {\n      parent.right = newNode;\n  }\n\n  current = newNode;\n\n  while (parent) {\n    const balanceFactor = getHeight(parent.left) - getHeight(parent.right)\n\n    if (balanceFactor === BALANCE_STATE.UNBALANCED_LEFT) {\n        if (key < (parent.left as Node<K, V>).key) {\n            parent = rotateRight(parent);\n        } else {\n            parent.left = rotateLeft(parent.left as Node<K, V>);\n            parent = rotateRight(parent);\n        }\n    }\n\n    if (balanceFactor === BALANCE_STATE.UNBALANCED_RIGHT) {\n        if (key > (parent.right as Node<K, V>).key) {\n            parent = rotateLeft(parent);\n        } else {\n            parent.right = rotateRight(parent.right as Node<K, V>);\n            parent = rotateLeft(parent);\n        }\n    }\n\n    if (parent == root) {\n        break;\n    }\n\n    current = parent;\n    parent = getNodeParent(root, current.key);\n  }\n\n  return root;\n}\n\nfunction getNodeParent<K, V>(root: Node<K, V>, key: K): Node<K, V> | null {\n    let current = root;\n    let parent = null;\n\n    while (current !== null) {\n        if (key < current.key) {\n            parent = current;\n            current = current.left as Node<K, V>;\n        } else if (key > current.key) {\n            parent = current;\n            current = current.right as Node<K, V>;\n        } else {\n            break;\n        }\n    }\n\n    return parent;\n}\n\nexport function find<K, V>(root: Node<K, V>, key: K): V | null {\n  const node = getNodeByKey(root, key)\n  if (!node) {\n    return null\n  }\n  return node.value\n}\n\nexport function remove<K, V>(root: Node<K, V> | null, key: K): Node<K, V> | null {\n  let node = root;\n  let parentNode: Node<K, V> | null = null;\n\n  while (node && node.key !== key) {\n    parentNode = node;\n    if (key < node.key) {\n      node = node.left as Node<K, V>;\n    } else {\n      node = node.right as Node<K, V>;\n    }\n  }\n\n  if (!node) {\n    return null;\n  }\n\n  if (!node.left && !node.right) {\n    if (!parentNode) {\n      // Node to be deleted is root\n      root = null;\n    } else {\n      if (parentNode.left === node) {\n        parentNode.left = null;\n      } else {\n        parentNode.right = null;\n      }\n    }\n  } else if (node.left && node.right) {\n    let minValueNode = node.right;\n    let minValueParent = node;\n\n    while (minValueNode.left) {\n      minValueParent = minValueNode;\n      minValueNode = minValueNode.left;\n    }\n\n    node.key = minValueNode.key;\n\n    if (minValueParent === node) {\n      minValueParent.right = minValueNode.right;\n    } else {\n      minValueParent.left = minValueNode.right;\n    }\n  } else {\n    const childNode = node.left ? node.left : node.right;\n\n    if (!parentNode) {\n      root = childNode as Node<K, V>;\n    } else {\n      if (parentNode.left === node) {\n        parentNode.left = childNode;\n      } else {\n        parentNode.right = childNode;\n      }\n    }\n  }\n\n  return root;\n}\n\nexport function removeDocument<K>(root: Node<K, string[]>, id: string, key: K): void {\n  const node = getNodeByKey(root, key)!\n\n  if (node.value.length === 1) {\n    remove(root, key)\n    return\n  }\n\n  node.value.splice(node.value.indexOf(id), 1)\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}