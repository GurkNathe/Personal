{"ast":null,"code":"import _classCallCheck from \"/home/krug/Coding/JavaScript/Websites/Personal/personal/node_modules/.pnpm/@babel+runtime@7.22.3/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/home/krug/Coding/JavaScript/Websites/Personal/personal/node_modules/.pnpm/@babel+runtime@7.22.3/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _assertThisInitialized from \"/home/krug/Coding/JavaScript/Websites/Personal/personal/node_modules/.pnpm/@babel+runtime@7.22.3/node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js\";\nimport _get from \"/home/krug/Coding/JavaScript/Websites/Personal/personal/node_modules/.pnpm/@babel+runtime@7.22.3/node_modules/@babel/runtime/helpers/esm/get.js\";\nimport _getPrototypeOf from \"/home/krug/Coding/JavaScript/Websites/Personal/personal/node_modules/.pnpm/@babel+runtime@7.22.3/node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js\";\nimport _inherits from \"/home/krug/Coding/JavaScript/Websites/Personal/personal/node_modules/.pnpm/@babel+runtime@7.22.3/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/home/krug/Coding/JavaScript/Websites/Personal/personal/node_modules/.pnpm/@babel+runtime@7.22.3/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nvar __defProp = Object.defineProperty;\nvar __defNormalProp = function __defNormalProp(obj, key, value) {\n  return key in obj ? __defProp(obj, key, {\n    enumerable: true,\n    configurable: true,\n    writable: true,\n    value: value\n  }) : obj[key] = value;\n};\nvar __publicField = function __publicField(obj, key, value) {\n  __defNormalProp(obj, typeof key !== \"symbol\" ? key + \"\" : key, value);\n  return value;\n};\nimport { Mesh, Object3D, SphereGeometry, MeshBasicMaterial } from \"three\";\nimport { GLTFLoader } from \"../loaders/GLTFLoader.js\";\nimport { MotionControllerConstants, fetchProfile, MotionController } from \"../libs/MotionControllers.js\";\nvar DEFAULT_PROFILES_PATH = \"https://cdn.jsdelivr.net/npm/@webxr-input-profiles/assets@1.0/dist/profiles\";\nvar DEFAULT_PROFILE = \"generic-trigger\";\nvar applyEnvironmentMap = function applyEnvironmentMap(envMap, obj) {\n  obj.traverse(function (child) {\n    if (child instanceof Mesh && \"envMap\" in child.material) {\n      child.material.envMap = envMap;\n      child.material.needsUpdate = true;\n    }\n  });\n};\nvar XRControllerModel = /*#__PURE__*/function (_Object3D) {\n  _inherits(XRControllerModel, _Object3D);\n  var _super = _createSuper(XRControllerModel);\n  function XRControllerModel() {\n    var _this;\n    _classCallCheck(this, XRControllerModel);\n    _this = _super.call(this);\n    __publicField(_assertThisInitialized(_this), \"envMap\");\n    __publicField(_assertThisInitialized(_this), \"motionController\");\n    _this.motionController = null;\n    _this.envMap = null;\n    return _this;\n  }\n  _createClass(XRControllerModel, [{\n    key: \"setEnvironmentMap\",\n    value: function setEnvironmentMap(envMap) {\n      if (this.envMap == envMap) {\n        return this;\n      }\n      this.envMap = envMap;\n      applyEnvironmentMap(this.envMap, this);\n      return this;\n    }\n    /**\n     * Polls data from the XRInputSource and updates the model's components to match\n     * the real world data\n     */\n  }, {\n    key: \"updateMatrixWorld\",\n    value: function updateMatrixWorld(force) {\n      _get(_getPrototypeOf(XRControllerModel.prototype), \"updateMatrixWorld\", this).call(this, force);\n      if (!this.motionController) return;\n      this.motionController.updateFromGamepad();\n      Object.values(this.motionController.components).forEach(function (component) {\n        Object.values(component.visualResponses).forEach(function (visualResponse) {\n          var valueNode = visualResponse.valueNode,\n            minNode = visualResponse.minNode,\n            maxNode = visualResponse.maxNode,\n            value = visualResponse.value,\n            valueNodeProperty = visualResponse.valueNodeProperty;\n          if (!valueNode) return;\n          if (valueNodeProperty === MotionControllerConstants.VisualResponseProperty.VISIBILITY && typeof value === \"boolean\") {\n            valueNode.visible = value;\n          } else if (valueNodeProperty === MotionControllerConstants.VisualResponseProperty.TRANSFORM && minNode && maxNode && typeof value === \"number\") {\n            valueNode.quaternion.slerpQuaternions(minNode.quaternion, maxNode.quaternion, value);\n            valueNode.position.lerpVectors(minNode.position, maxNode.position, value);\n          }\n        });\n      });\n    }\n  }]);\n  return XRControllerModel;\n}(Object3D);\nfunction findNodes(motionController, scene) {\n  Object.values(motionController.components).forEach(function (component) {\n    var type = component.type,\n      touchPointNodeName = component.touchPointNodeName,\n      visualResponses = component.visualResponses;\n    if (type === MotionControllerConstants.ComponentType.TOUCHPAD && touchPointNodeName) {\n      component.touchPointNode = scene.getObjectByName(touchPointNodeName);\n      if (component.touchPointNode) {\n        var sphereGeometry = new SphereGeometry(1e-3);\n        var material = new MeshBasicMaterial({\n          color: 255\n        });\n        var sphere = new Mesh(sphereGeometry, material);\n        component.touchPointNode.add(sphere);\n      } else {\n        console.warn(\"Could not find touch dot, \".concat(component.touchPointNodeName, \", in touchpad component \").concat(component.id));\n      }\n    }\n    Object.values(visualResponses).forEach(function (visualResponse) {\n      var valueNodeName = visualResponse.valueNodeName,\n        minNodeName = visualResponse.minNodeName,\n        maxNodeName = visualResponse.maxNodeName,\n        valueNodeProperty = visualResponse.valueNodeProperty;\n      if (valueNodeProperty === MotionControllerConstants.VisualResponseProperty.TRANSFORM && minNodeName && maxNodeName) {\n        visualResponse.minNode = scene.getObjectByName(minNodeName);\n        visualResponse.maxNode = scene.getObjectByName(maxNodeName);\n        if (!visualResponse.minNode) {\n          console.warn(\"Could not find \".concat(minNodeName, \" in the model\"));\n          return;\n        }\n        if (!visualResponse.maxNode) {\n          console.warn(\"Could not find \".concat(maxNodeName, \" in the model\"));\n          return;\n        }\n      }\n      visualResponse.valueNode = scene.getObjectByName(valueNodeName);\n      if (!visualResponse.valueNode) {\n        console.warn(\"Could not find \".concat(valueNodeName, \" in the model\"));\n      }\n    });\n  });\n}\nfunction addAssetSceneToControllerModel(controllerModel, scene) {\n  findNodes(controllerModel.motionController, scene);\n  if (controllerModel.envMap) {\n    applyEnvironmentMap(controllerModel.envMap, scene);\n  }\n  controllerModel.add(scene);\n}\nvar XRControllerModelFactory = /*#__PURE__*/function () {\n  function XRControllerModelFactory() {\n    var gltfLoader = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n    _classCallCheck(this, XRControllerModelFactory);\n    __publicField(this, \"gltfLoader\");\n    __publicField(this, \"path\");\n    __publicField(this, \"_assetCache\");\n    this.gltfLoader = gltfLoader;\n    this.path = DEFAULT_PROFILES_PATH;\n    this._assetCache = {};\n    if (!this.gltfLoader) {\n      this.gltfLoader = new GLTFLoader();\n    }\n  }\n  _createClass(XRControllerModelFactory, [{\n    key: \"createControllerModel\",\n    value: function createControllerModel(controller) {\n      var _this2 = this;\n      var controllerModel = new XRControllerModel();\n      var scene = null;\n      var onConnected = function onConnected(event) {\n        var xrInputSource = event.data;\n        if (xrInputSource.targetRayMode !== \"tracked-pointer\" || !xrInputSource.gamepad) return;\n        fetchProfile(xrInputSource, _this2.path, DEFAULT_PROFILE).then(function (_ref) {\n          var profile = _ref.profile,\n            assetPath = _ref.assetPath;\n          if (!assetPath) {\n            throw new Error(\"no asset path\");\n          }\n          controllerModel.motionController = new MotionController(xrInputSource, profile, assetPath);\n          var assetUrl = controllerModel.motionController.assetUrl;\n          var cachedAsset = _this2._assetCache[assetUrl];\n          if (cachedAsset) {\n            scene = cachedAsset.scene.clone();\n            addAssetSceneToControllerModel(controllerModel, scene);\n          } else {\n            if (!_this2.gltfLoader) {\n              throw new Error(\"GLTFLoader not set.\");\n            }\n            _this2.gltfLoader.setPath(\"\");\n            _this2.gltfLoader.load(controllerModel.motionController.assetUrl, function (asset) {\n              if (!controllerModel.motionController) {\n                console.warn(\"motionController gone while gltf load, bailing...\");\n                return;\n              }\n              _this2._assetCache[assetUrl] = asset;\n              scene = asset.scene.clone();\n              addAssetSceneToControllerModel(controllerModel, scene);\n            }, function () {}, function () {\n              throw new Error(\"Asset \".concat(assetUrl, \" missing or malformed.\"));\n            });\n          }\n        }).catch(function (err) {\n          console.warn(err);\n        });\n      };\n      controller.addEventListener(\"connected\", onConnected);\n      var onDisconnected = function onDisconnected() {\n        controller.removeEventListener(\"connected\", onConnected);\n        controller.removeEventListener(\"disconnected\", onDisconnected);\n        controllerModel.motionController = null;\n        if (scene) {\n          controllerModel.remove(scene);\n        }\n        scene = null;\n      };\n      controller.addEventListener(\"disconnected\", onDisconnected);\n      return controllerModel;\n    }\n  }]);\n  return XRControllerModelFactory;\n}();\nexport { XRControllerModelFactory };","map":{"version":3,"names":["__defProp","Object","defineProperty","__defNormalProp","obj","key","value","enumerable","configurable","writable","__publicField","Mesh","Object3D","SphereGeometry","MeshBasicMaterial","GLTFLoader","MotionControllerConstants","fetchProfile","MotionController","DEFAULT_PROFILES_PATH","DEFAULT_PROFILE","applyEnvironmentMap","envMap","traverse","child","material","needsUpdate","XRControllerModel","_Object3D","_inherits","_super","_createSuper","_this","_classCallCheck","call","_assertThisInitialized","motionController","_createClass","setEnvironmentMap","updateMatrixWorld","force","_get","_getPrototypeOf","prototype","updateFromGamepad","values","components","forEach","component","visualResponses","visualResponse","valueNode","minNode","maxNode","valueNodeProperty","VisualResponseProperty","VISIBILITY","visible","TRANSFORM","quaternion","slerpQuaternions","position","lerpVectors","findNodes","scene","type","touchPointNodeName","ComponentType","TOUCHPAD","touchPointNode","getObjectByName","sphereGeometry","color","sphere","add","console","warn","concat","id","valueNodeName","minNodeName","maxNodeName","addAssetSceneToControllerModel","controllerModel","XRControllerModelFactory","gltfLoader","arguments","length","undefined","path","_assetCache","createControllerModel","controller","_this2","onConnected","event","xrInputSource","data","targetRayMode","gamepad","then","_ref","profile","assetPath","Error","assetUrl","cachedAsset","clone","setPath","load","asset","catch","err","addEventListener","onDisconnected","removeEventListener","remove"],"sources":["/home/krug/Coding/JavaScript/Websites/Personal/personal/node_modules/.pnpm/three-stdlib@2.23.7_three@0.151.3/node_modules/three-stdlib/webxr/XRControllerModelFactory.js"],"sourcesContent":["var __defProp = Object.defineProperty;\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;\nvar __publicField = (obj, key, value) => {\n  __defNormalProp(obj, typeof key !== \"symbol\" ? key + \"\" : key, value);\n  return value;\n};\nimport { Mesh, Object3D, SphereGeometry, MeshBasicMaterial } from \"three\";\nimport { GLTFLoader } from \"../loaders/GLTFLoader.js\";\nimport { MotionControllerConstants, fetchProfile, MotionController } from \"../libs/MotionControllers.js\";\nconst DEFAULT_PROFILES_PATH = \"https://cdn.jsdelivr.net/npm/@webxr-input-profiles/assets@1.0/dist/profiles\";\nconst DEFAULT_PROFILE = \"generic-trigger\";\nconst applyEnvironmentMap = (envMap, obj) => {\n  obj.traverse((child) => {\n    if (child instanceof Mesh && \"envMap\" in child.material) {\n      child.material.envMap = envMap;\n      child.material.needsUpdate = true;\n    }\n  });\n};\nclass XRControllerModel extends Object3D {\n  constructor() {\n    super();\n    __publicField(this, \"envMap\");\n    __publicField(this, \"motionController\");\n    this.motionController = null;\n    this.envMap = null;\n  }\n  setEnvironmentMap(envMap) {\n    if (this.envMap == envMap) {\n      return this;\n    }\n    this.envMap = envMap;\n    applyEnvironmentMap(this.envMap, this);\n    return this;\n  }\n  /**\n   * Polls data from the XRInputSource and updates the model's components to match\n   * the real world data\n   */\n  updateMatrixWorld(force) {\n    super.updateMatrixWorld(force);\n    if (!this.motionController)\n      return;\n    this.motionController.updateFromGamepad();\n    Object.values(this.motionController.components).forEach((component) => {\n      Object.values(component.visualResponses).forEach((visualResponse) => {\n        const { valueNode, minNode, maxNode, value, valueNodeProperty } = visualResponse;\n        if (!valueNode)\n          return;\n        if (valueNodeProperty === MotionControllerConstants.VisualResponseProperty.VISIBILITY && typeof value === \"boolean\") {\n          valueNode.visible = value;\n        } else if (valueNodeProperty === MotionControllerConstants.VisualResponseProperty.TRANSFORM && minNode && maxNode && typeof value === \"number\") {\n          valueNode.quaternion.slerpQuaternions(minNode.quaternion, maxNode.quaternion, value);\n          valueNode.position.lerpVectors(minNode.position, maxNode.position, value);\n        }\n      });\n    });\n  }\n}\nfunction findNodes(motionController, scene) {\n  Object.values(motionController.components).forEach((component) => {\n    const { type, touchPointNodeName, visualResponses } = component;\n    if (type === MotionControllerConstants.ComponentType.TOUCHPAD && touchPointNodeName) {\n      component.touchPointNode = scene.getObjectByName(touchPointNodeName);\n      if (component.touchPointNode) {\n        const sphereGeometry = new SphereGeometry(1e-3);\n        const material = new MeshBasicMaterial({ color: 255 });\n        const sphere = new Mesh(sphereGeometry, material);\n        component.touchPointNode.add(sphere);\n      } else {\n        console.warn(`Could not find touch dot, ${component.touchPointNodeName}, in touchpad component ${component.id}`);\n      }\n    }\n    Object.values(visualResponses).forEach((visualResponse) => {\n      const { valueNodeName, minNodeName, maxNodeName, valueNodeProperty } = visualResponse;\n      if (valueNodeProperty === MotionControllerConstants.VisualResponseProperty.TRANSFORM && minNodeName && maxNodeName) {\n        visualResponse.minNode = scene.getObjectByName(minNodeName);\n        visualResponse.maxNode = scene.getObjectByName(maxNodeName);\n        if (!visualResponse.minNode) {\n          console.warn(`Could not find ${minNodeName} in the model`);\n          return;\n        }\n        if (!visualResponse.maxNode) {\n          console.warn(`Could not find ${maxNodeName} in the model`);\n          return;\n        }\n      }\n      visualResponse.valueNode = scene.getObjectByName(valueNodeName);\n      if (!visualResponse.valueNode) {\n        console.warn(`Could not find ${valueNodeName} in the model`);\n      }\n    });\n  });\n}\nfunction addAssetSceneToControllerModel(controllerModel, scene) {\n  findNodes(controllerModel.motionController, scene);\n  if (controllerModel.envMap) {\n    applyEnvironmentMap(controllerModel.envMap, scene);\n  }\n  controllerModel.add(scene);\n}\nclass XRControllerModelFactory {\n  constructor(gltfLoader = null) {\n    __publicField(this, \"gltfLoader\");\n    __publicField(this, \"path\");\n    __publicField(this, \"_assetCache\");\n    this.gltfLoader = gltfLoader;\n    this.path = DEFAULT_PROFILES_PATH;\n    this._assetCache = {};\n    if (!this.gltfLoader) {\n      this.gltfLoader = new GLTFLoader();\n    }\n  }\n  createControllerModel(controller) {\n    const controllerModel = new XRControllerModel();\n    let scene = null;\n    const onConnected = (event) => {\n      const xrInputSource = event.data;\n      if (xrInputSource.targetRayMode !== \"tracked-pointer\" || !xrInputSource.gamepad)\n        return;\n      fetchProfile(xrInputSource, this.path, DEFAULT_PROFILE).then(({ profile, assetPath }) => {\n        if (!assetPath) {\n          throw new Error(\"no asset path\");\n        }\n        controllerModel.motionController = new MotionController(xrInputSource, profile, assetPath);\n        const assetUrl = controllerModel.motionController.assetUrl;\n        const cachedAsset = this._assetCache[assetUrl];\n        if (cachedAsset) {\n          scene = cachedAsset.scene.clone();\n          addAssetSceneToControllerModel(controllerModel, scene);\n        } else {\n          if (!this.gltfLoader) {\n            throw new Error(\"GLTFLoader not set.\");\n          }\n          this.gltfLoader.setPath(\"\");\n          this.gltfLoader.load(\n            controllerModel.motionController.assetUrl,\n            (asset) => {\n              if (!controllerModel.motionController) {\n                console.warn(\"motionController gone while gltf load, bailing...\");\n                return;\n              }\n              this._assetCache[assetUrl] = asset;\n              scene = asset.scene.clone();\n              addAssetSceneToControllerModel(controllerModel, scene);\n            },\n            () => {\n            },\n            () => {\n              throw new Error(`Asset ${assetUrl} missing or malformed.`);\n            }\n          );\n        }\n      }).catch((err) => {\n        console.warn(err);\n      });\n    };\n    controller.addEventListener(\"connected\", onConnected);\n    const onDisconnected = () => {\n      controller.removeEventListener(\"connected\", onConnected);\n      controller.removeEventListener(\"disconnected\", onDisconnected);\n      controllerModel.motionController = null;\n      if (scene) {\n        controllerModel.remove(scene);\n      }\n      scene = null;\n    };\n    controller.addEventListener(\"disconnected\", onDisconnected);\n    return controllerModel;\n  }\n}\nexport {\n  XRControllerModelFactory\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}