{"ast":null,"code":"import _classCallCheck from \"/home/krug/Coding/JavaScript/Websites/Personal/personal/node_modules/.pnpm/@babel+runtime@7.22.3/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/home/krug/Coding/JavaScript/Websites/Personal/personal/node_modules/.pnpm/@babel+runtime@7.22.3/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"/home/krug/Coding/JavaScript/Websites/Personal/personal/node_modules/.pnpm/@babel+runtime@7.22.3/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/home/krug/Coding/JavaScript/Websites/Personal/personal/node_modules/.pnpm/@babel+runtime@7.22.3/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nvar __defProp = Object.defineProperty;\nvar __defNormalProp = function __defNormalProp(obj, key, value) {\n  return key in obj ? __defProp(obj, key, {\n    enumerable: true,\n    configurable: true,\n    writable: true,\n    value: value\n  }) : obj[key] = value;\n};\nvar __publicField = function __publicField(obj, key, value) {\n  __defNormalProp(obj, typeof key !== \"symbol\" ? key + \"\" : key, value);\n  return value;\n};\nimport { Color, Vector2, WebGLRenderTarget, HalfFloatType, NearestFilter, DepthTexture, UnsignedShortType, MeshDepthMaterial, RGBADepthPacking, NoBlending, MeshNormalMaterial, ShaderMaterial, UniformsUtils, CustomBlending, DstColorFactor, ZeroFactor, AddEquation, DstAlphaFactor } from \"three\";\nimport { Pass, FullScreenQuad } from \"./Pass.js\";\nimport { SAOShader } from \"../shaders/SAOShader.js\";\nimport { DepthLimitedBlurShader, BlurShaderUtils } from \"../shaders/DepthLimitedBlurShader.js\";\nimport { CopyShader } from \"../shaders/CopyShader.js\";\nimport { UnpackDepthRGBAShader } from \"../shaders/UnpackDepthRGBAShader.js\";\nvar SAOPass = /*#__PURE__*/function (_Pass) {\n  _inherits(SAOPass, _Pass);\n  var _super = _createSuper(SAOPass);\n  function SAOPass(scene, camera) {\n    var _this;\n    var useDepthTexture = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n    var useNormals = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n    var resolution = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : new Vector2(256, 256);\n    _classCallCheck(this, SAOPass);\n    _this = _super.call(this);\n    _this.scene = scene;\n    _this.camera = camera;\n    _this.clear = true;\n    _this.needsSwap = false;\n    _this.supportsDepthTextureExtension = useDepthTexture;\n    _this.supportsNormalTexture = useNormals;\n    _this.originalClearColor = new Color();\n    _this._oldClearColor = new Color();\n    _this.oldClearAlpha = 1;\n    _this.params = {\n      output: 0,\n      saoBias: 0.5,\n      saoIntensity: 0.18,\n      saoScale: 1,\n      saoKernelRadius: 100,\n      saoMinResolution: 0,\n      saoBlur: true,\n      saoBlurRadius: 8,\n      saoBlurStdDev: 4,\n      saoBlurDepthCutoff: 0.01\n    };\n    _this.resolution = new Vector2(resolution.x, resolution.y);\n    _this.saoRenderTarget = new WebGLRenderTarget(_this.resolution.x, _this.resolution.y, {\n      type: HalfFloatType\n    });\n    _this.blurIntermediateRenderTarget = _this.saoRenderTarget.clone();\n    _this.beautyRenderTarget = _this.saoRenderTarget.clone();\n    _this.normalRenderTarget = new WebGLRenderTarget(_this.resolution.x, _this.resolution.y, {\n      minFilter: NearestFilter,\n      magFilter: NearestFilter,\n      type: HalfFloatType\n    });\n    _this.depthRenderTarget = _this.normalRenderTarget.clone();\n    var depthTexture;\n    if (_this.supportsDepthTextureExtension) {\n      depthTexture = new DepthTexture();\n      depthTexture.type = UnsignedShortType;\n      _this.beautyRenderTarget.depthTexture = depthTexture;\n      _this.beautyRenderTarget.depthBuffer = true;\n    }\n    _this.depthMaterial = new MeshDepthMaterial();\n    _this.depthMaterial.depthPacking = RGBADepthPacking;\n    _this.depthMaterial.blending = NoBlending;\n    _this.normalMaterial = new MeshNormalMaterial();\n    _this.normalMaterial.blending = NoBlending;\n    _this.saoMaterial = new ShaderMaterial({\n      defines: Object.assign({}, SAOShader.defines),\n      fragmentShader: SAOShader.fragmentShader,\n      vertexShader: SAOShader.vertexShader,\n      uniforms: UniformsUtils.clone(SAOShader.uniforms)\n    });\n    _this.saoMaterial.extensions.derivatives = true;\n    _this.saoMaterial.defines[\"DEPTH_PACKING\"] = _this.supportsDepthTextureExtension ? 0 : 1;\n    _this.saoMaterial.defines[\"NORMAL_TEXTURE\"] = _this.supportsNormalTexture ? 1 : 0;\n    _this.saoMaterial.defines[\"PERSPECTIVE_CAMERA\"] = _this.camera.isPerspectiveCamera ? 1 : 0;\n    _this.saoMaterial.uniforms[\"tDepth\"].value = _this.supportsDepthTextureExtension ? depthTexture : _this.depthRenderTarget.texture;\n    _this.saoMaterial.uniforms[\"tNormal\"].value = _this.normalRenderTarget.texture;\n    _this.saoMaterial.uniforms[\"size\"].value.set(_this.resolution.x, _this.resolution.y);\n    _this.saoMaterial.uniforms[\"cameraInverseProjectionMatrix\"].value.copy(_this.camera.projectionMatrixInverse);\n    _this.saoMaterial.uniforms[\"cameraProjectionMatrix\"].value = _this.camera.projectionMatrix;\n    _this.saoMaterial.blending = NoBlending;\n    _this.vBlurMaterial = new ShaderMaterial({\n      uniforms: UniformsUtils.clone(DepthLimitedBlurShader.uniforms),\n      defines: Object.assign({}, DepthLimitedBlurShader.defines),\n      vertexShader: DepthLimitedBlurShader.vertexShader,\n      fragmentShader: DepthLimitedBlurShader.fragmentShader\n    });\n    _this.vBlurMaterial.defines[\"DEPTH_PACKING\"] = _this.supportsDepthTextureExtension ? 0 : 1;\n    _this.vBlurMaterial.defines[\"PERSPECTIVE_CAMERA\"] = _this.camera.isPerspectiveCamera ? 1 : 0;\n    _this.vBlurMaterial.uniforms[\"tDiffuse\"].value = _this.saoRenderTarget.texture;\n    _this.vBlurMaterial.uniforms[\"tDepth\"].value = _this.supportsDepthTextureExtension ? depthTexture : _this.depthRenderTarget.texture;\n    _this.vBlurMaterial.uniforms[\"size\"].value.set(_this.resolution.x, _this.resolution.y);\n    _this.vBlurMaterial.blending = NoBlending;\n    _this.hBlurMaterial = new ShaderMaterial({\n      uniforms: UniformsUtils.clone(DepthLimitedBlurShader.uniforms),\n      defines: Object.assign({}, DepthLimitedBlurShader.defines),\n      vertexShader: DepthLimitedBlurShader.vertexShader,\n      fragmentShader: DepthLimitedBlurShader.fragmentShader\n    });\n    _this.hBlurMaterial.defines[\"DEPTH_PACKING\"] = _this.supportsDepthTextureExtension ? 0 : 1;\n    _this.hBlurMaterial.defines[\"PERSPECTIVE_CAMERA\"] = _this.camera.isPerspectiveCamera ? 1 : 0;\n    _this.hBlurMaterial.uniforms[\"tDiffuse\"].value = _this.blurIntermediateRenderTarget.texture;\n    _this.hBlurMaterial.uniforms[\"tDepth\"].value = _this.supportsDepthTextureExtension ? depthTexture : _this.depthRenderTarget.texture;\n    _this.hBlurMaterial.uniforms[\"size\"].value.set(_this.resolution.x, _this.resolution.y);\n    _this.hBlurMaterial.blending = NoBlending;\n    _this.materialCopy = new ShaderMaterial({\n      uniforms: UniformsUtils.clone(CopyShader.uniforms),\n      vertexShader: CopyShader.vertexShader,\n      fragmentShader: CopyShader.fragmentShader,\n      blending: NoBlending\n    });\n    _this.materialCopy.transparent = true;\n    _this.materialCopy.depthTest = false;\n    _this.materialCopy.depthWrite = false;\n    _this.materialCopy.blending = CustomBlending;\n    _this.materialCopy.blendSrc = DstColorFactor;\n    _this.materialCopy.blendDst = ZeroFactor;\n    _this.materialCopy.blendEquation = AddEquation;\n    _this.materialCopy.blendSrcAlpha = DstAlphaFactor;\n    _this.materialCopy.blendDstAlpha = ZeroFactor;\n    _this.materialCopy.blendEquationAlpha = AddEquation;\n    _this.depthCopy = new ShaderMaterial({\n      uniforms: UniformsUtils.clone(UnpackDepthRGBAShader.uniforms),\n      vertexShader: UnpackDepthRGBAShader.vertexShader,\n      fragmentShader: UnpackDepthRGBAShader.fragmentShader,\n      blending: NoBlending\n    });\n    _this.fsQuad = new FullScreenQuad(null);\n    return _this;\n  }\n  _createClass(SAOPass, [{\n    key: \"render\",\n    value: function render(renderer, writeBuffer, readBuffer) {\n      if (this.renderToScreen) {\n        this.materialCopy.blending = NoBlending;\n        this.materialCopy.uniforms[\"tDiffuse\"].value = readBuffer.texture;\n        this.materialCopy.needsUpdate = true;\n        this.renderPass(renderer, this.materialCopy, null);\n      }\n      if (this.params.output === 1) {\n        return;\n      }\n      renderer.getClearColor(this._oldClearColor);\n      this.oldClearAlpha = renderer.getClearAlpha();\n      var oldAutoClear = renderer.autoClear;\n      renderer.autoClear = false;\n      renderer.setRenderTarget(this.depthRenderTarget);\n      renderer.clear();\n      this.saoMaterial.uniforms[\"bias\"].value = this.params.saoBias;\n      this.saoMaterial.uniforms[\"intensity\"].value = this.params.saoIntensity;\n      this.saoMaterial.uniforms[\"scale\"].value = this.params.saoScale;\n      this.saoMaterial.uniforms[\"kernelRadius\"].value = this.params.saoKernelRadius;\n      this.saoMaterial.uniforms[\"minResolution\"].value = this.params.saoMinResolution;\n      this.saoMaterial.uniforms[\"cameraNear\"].value = this.camera.near;\n      this.saoMaterial.uniforms[\"cameraFar\"].value = this.camera.far;\n      var depthCutoff = this.params.saoBlurDepthCutoff * (this.camera.far - this.camera.near);\n      this.vBlurMaterial.uniforms[\"depthCutoff\"].value = depthCutoff;\n      this.hBlurMaterial.uniforms[\"depthCutoff\"].value = depthCutoff;\n      this.vBlurMaterial.uniforms[\"cameraNear\"].value = this.camera.near;\n      this.vBlurMaterial.uniforms[\"cameraFar\"].value = this.camera.far;\n      this.hBlurMaterial.uniforms[\"cameraNear\"].value = this.camera.near;\n      this.hBlurMaterial.uniforms[\"cameraFar\"].value = this.camera.far;\n      this.params.saoBlurRadius = Math.floor(this.params.saoBlurRadius);\n      if (this.prevStdDev !== this.params.saoBlurStdDev || this.prevNumSamples !== this.params.saoBlurRadius) {\n        BlurShaderUtils.configure(this.vBlurMaterial, this.params.saoBlurRadius, this.params.saoBlurStdDev, new Vector2(0, 1));\n        BlurShaderUtils.configure(this.hBlurMaterial, this.params.saoBlurRadius, this.params.saoBlurStdDev, new Vector2(1, 0));\n        this.prevStdDev = this.params.saoBlurStdDev;\n        this.prevNumSamples = this.params.saoBlurRadius;\n      }\n      renderer.setClearColor(0);\n      renderer.setRenderTarget(this.beautyRenderTarget);\n      renderer.clear();\n      renderer.render(this.scene, this.camera);\n      if (!this.supportsDepthTextureExtension) {\n        this.renderOverride(renderer, this.depthMaterial, this.depthRenderTarget, 0, 1);\n      }\n      if (this.supportsNormalTexture) {\n        this.renderOverride(renderer, this.normalMaterial, this.normalRenderTarget, 7829503, 1);\n      }\n      this.renderPass(renderer, this.saoMaterial, this.saoRenderTarget, 16777215, 1);\n      if (this.params.saoBlur) {\n        this.renderPass(renderer, this.vBlurMaterial, this.blurIntermediateRenderTarget, 16777215, 1);\n        this.renderPass(renderer, this.hBlurMaterial, this.saoRenderTarget, 16777215, 1);\n      }\n      var outputMaterial = this.materialCopy;\n      if (this.params.output === 3) {\n        if (this.supportsDepthTextureExtension) {\n          this.materialCopy.uniforms[\"tDiffuse\"].value = this.beautyRenderTarget.depthTexture;\n          this.materialCopy.needsUpdate = true;\n        } else {\n          this.depthCopy.uniforms[\"tDiffuse\"].value = this.depthRenderTarget.texture;\n          this.depthCopy.needsUpdate = true;\n          outputMaterial = this.depthCopy;\n        }\n      } else if (this.params.output === 4) {\n        this.materialCopy.uniforms[\"tDiffuse\"].value = this.normalRenderTarget.texture;\n        this.materialCopy.needsUpdate = true;\n      } else {\n        this.materialCopy.uniforms[\"tDiffuse\"].value = this.saoRenderTarget.texture;\n        this.materialCopy.needsUpdate = true;\n      }\n      if (this.params.output === 0) {\n        outputMaterial.blending = CustomBlending;\n      } else {\n        outputMaterial.blending = NoBlending;\n      }\n      this.renderPass(renderer, outputMaterial, this.renderToScreen ? null : readBuffer);\n      renderer.setClearColor(this._oldClearColor, this.oldClearAlpha);\n      renderer.autoClear = oldAutoClear;\n    }\n  }, {\n    key: \"renderPass\",\n    value: function renderPass(renderer, passMaterial, renderTarget, clearColor, clearAlpha) {\n      renderer.getClearColor(this.originalClearColor);\n      var originalClearAlpha = renderer.getClearAlpha();\n      var originalAutoClear = renderer.autoClear;\n      renderer.setRenderTarget(renderTarget);\n      renderer.autoClear = false;\n      if (clearColor !== void 0 && clearColor !== null) {\n        renderer.setClearColor(clearColor);\n        renderer.setClearAlpha(clearAlpha || 0);\n        renderer.clear();\n      }\n      this.fsQuad.material = passMaterial;\n      this.fsQuad.render(renderer);\n      renderer.autoClear = originalAutoClear;\n      renderer.setClearColor(this.originalClearColor);\n      renderer.setClearAlpha(originalClearAlpha);\n    }\n  }, {\n    key: \"renderOverride\",\n    value: function renderOverride(renderer, overrideMaterial, renderTarget, clearColor, clearAlpha) {\n      renderer.getClearColor(this.originalClearColor);\n      var originalClearAlpha = renderer.getClearAlpha();\n      var originalAutoClear = renderer.autoClear;\n      renderer.setRenderTarget(renderTarget);\n      renderer.autoClear = false;\n      clearColor = overrideMaterial.clearColor || clearColor;\n      clearAlpha = overrideMaterial.clearAlpha || clearAlpha;\n      if (clearColor !== void 0 && clearColor !== null) {\n        renderer.setClearColor(clearColor);\n        renderer.setClearAlpha(clearAlpha || 0);\n        renderer.clear();\n      }\n      this.scene.overrideMaterial = overrideMaterial;\n      renderer.render(this.scene, this.camera);\n      this.scene.overrideMaterial = null;\n      renderer.autoClear = originalAutoClear;\n      renderer.setClearColor(this.originalClearColor);\n      renderer.setClearAlpha(originalClearAlpha);\n    }\n  }, {\n    key: \"setSize\",\n    value: function setSize(width, height) {\n      this.beautyRenderTarget.setSize(width, height);\n      this.saoRenderTarget.setSize(width, height);\n      this.blurIntermediateRenderTarget.setSize(width, height);\n      this.normalRenderTarget.setSize(width, height);\n      this.depthRenderTarget.setSize(width, height);\n      this.saoMaterial.uniforms[\"size\"].value.set(width, height);\n      this.saoMaterial.uniforms[\"cameraInverseProjectionMatrix\"].value.copy(this.camera.projectionMatrixInverse);\n      this.saoMaterial.uniforms[\"cameraProjectionMatrix\"].value = this.camera.projectionMatrix;\n      this.saoMaterial.needsUpdate = true;\n      this.vBlurMaterial.uniforms[\"size\"].value.set(width, height);\n      this.vBlurMaterial.needsUpdate = true;\n      this.hBlurMaterial.uniforms[\"size\"].value.set(width, height);\n      this.hBlurMaterial.needsUpdate = true;\n    }\n  }, {\n    key: \"dispose\",\n    value: function dispose() {\n      this.saoRenderTarget.dispose();\n      this.blurIntermediateRenderTarget.dispose();\n      this.beautyRenderTarget.dispose();\n      this.normalRenderTarget.dispose();\n      this.depthRenderTarget.dispose();\n      this.depthMaterial.dispose();\n      this.normalMaterial.dispose();\n      this.saoMaterial.dispose();\n      this.vBlurMaterial.dispose();\n      this.hBlurMaterial.dispose();\n      this.materialCopy.dispose();\n      this.depthCopy.dispose();\n      this.fsQuad.dispose();\n    }\n  }]);\n  return SAOPass;\n}(Pass);\n__publicField(SAOPass, \"OUTPUT\", {\n  Beauty: 1,\n  Default: 0,\n  SAO: 2,\n  Depth: 3,\n  Normal: 4\n});\nexport { SAOPass };","map":{"version":3,"names":["__defProp","Object","defineProperty","__defNormalProp","obj","key","value","enumerable","configurable","writable","__publicField","Color","Vector2","WebGLRenderTarget","HalfFloatType","NearestFilter","DepthTexture","UnsignedShortType","MeshDepthMaterial","RGBADepthPacking","NoBlending","MeshNormalMaterial","ShaderMaterial","UniformsUtils","CustomBlending","DstColorFactor","ZeroFactor","AddEquation","DstAlphaFactor","Pass","FullScreenQuad","SAOShader","DepthLimitedBlurShader","BlurShaderUtils","CopyShader","UnpackDepthRGBAShader","SAOPass","_Pass","_inherits","_super","_createSuper","scene","camera","_this","useDepthTexture","arguments","length","undefined","useNormals","resolution","_classCallCheck","call","clear","needsSwap","supportsDepthTextureExtension","supportsNormalTexture","originalClearColor","_oldClearColor","oldClearAlpha","params","output","saoBias","saoIntensity","saoScale","saoKernelRadius","saoMinResolution","saoBlur","saoBlurRadius","saoBlurStdDev","saoBlurDepthCutoff","x","y","saoRenderTarget","type","blurIntermediateRenderTarget","clone","beautyRenderTarget","normalRenderTarget","minFilter","magFilter","depthRenderTarget","depthTexture","depthBuffer","depthMaterial","depthPacking","blending","normalMaterial","saoMaterial","defines","assign","fragmentShader","vertexShader","uniforms","extensions","derivatives","isPerspectiveCamera","texture","set","copy","projectionMatrixInverse","projectionMatrix","vBlurMaterial","hBlurMaterial","materialCopy","transparent","depthTest","depthWrite","blendSrc","blendDst","blendEquation","blendSrcAlpha","blendDstAlpha","blendEquationAlpha","depthCopy","fsQuad","_createClass","render","renderer","writeBuffer","readBuffer","renderToScreen","needsUpdate","renderPass","getClearColor","getClearAlpha","oldAutoClear","autoClear","setRenderTarget","near","far","depthCutoff","Math","floor","prevStdDev","prevNumSamples","configure","setClearColor","renderOverride","outputMaterial","passMaterial","renderTarget","clearColor","clearAlpha","originalClearAlpha","originalAutoClear","setClearAlpha","material","overrideMaterial","setSize","width","height","dispose","Beauty","Default","SAO","Depth","Normal"],"sources":["/home/krug/Coding/JavaScript/Websites/Personal/personal/node_modules/.pnpm/three-stdlib@2.23.7_three@0.151.3/node_modules/three-stdlib/postprocessing/SAOPass.js"],"sourcesContent":["var __defProp = Object.defineProperty;\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;\nvar __publicField = (obj, key, value) => {\n  __defNormalProp(obj, typeof key !== \"symbol\" ? key + \"\" : key, value);\n  return value;\n};\nimport { Color, Vector2, WebGLRenderTarget, HalfFloatType, NearestFilter, DepthTexture, UnsignedShortType, MeshDepthMaterial, RGBADepthPacking, NoBlending, MeshNormalMaterial, ShaderMaterial, UniformsUtils, CustomBlending, DstColorFactor, ZeroFactor, AddEquation, DstAlphaFactor } from \"three\";\nimport { Pass, FullScreenQuad } from \"./Pass.js\";\nimport { SAOShader } from \"../shaders/SAOShader.js\";\nimport { DepthLimitedBlurShader, BlurShaderUtils } from \"../shaders/DepthLimitedBlurShader.js\";\nimport { CopyShader } from \"../shaders/CopyShader.js\";\nimport { UnpackDepthRGBAShader } from \"../shaders/UnpackDepthRGBAShader.js\";\nclass SAOPass extends Pass {\n  constructor(scene, camera, useDepthTexture = false, useNormals = false, resolution = new Vector2(256, 256)) {\n    super();\n    this.scene = scene;\n    this.camera = camera;\n    this.clear = true;\n    this.needsSwap = false;\n    this.supportsDepthTextureExtension = useDepthTexture;\n    this.supportsNormalTexture = useNormals;\n    this.originalClearColor = new Color();\n    this._oldClearColor = new Color();\n    this.oldClearAlpha = 1;\n    this.params = {\n      output: 0,\n      saoBias: 0.5,\n      saoIntensity: 0.18,\n      saoScale: 1,\n      saoKernelRadius: 100,\n      saoMinResolution: 0,\n      saoBlur: true,\n      saoBlurRadius: 8,\n      saoBlurStdDev: 4,\n      saoBlurDepthCutoff: 0.01\n    };\n    this.resolution = new Vector2(resolution.x, resolution.y);\n    this.saoRenderTarget = new WebGLRenderTarget(this.resolution.x, this.resolution.y, { type: HalfFloatType });\n    this.blurIntermediateRenderTarget = this.saoRenderTarget.clone();\n    this.beautyRenderTarget = this.saoRenderTarget.clone();\n    this.normalRenderTarget = new WebGLRenderTarget(this.resolution.x, this.resolution.y, {\n      minFilter: NearestFilter,\n      magFilter: NearestFilter,\n      type: HalfFloatType\n    });\n    this.depthRenderTarget = this.normalRenderTarget.clone();\n    let depthTexture;\n    if (this.supportsDepthTextureExtension) {\n      depthTexture = new DepthTexture();\n      depthTexture.type = UnsignedShortType;\n      this.beautyRenderTarget.depthTexture = depthTexture;\n      this.beautyRenderTarget.depthBuffer = true;\n    }\n    this.depthMaterial = new MeshDepthMaterial();\n    this.depthMaterial.depthPacking = RGBADepthPacking;\n    this.depthMaterial.blending = NoBlending;\n    this.normalMaterial = new MeshNormalMaterial();\n    this.normalMaterial.blending = NoBlending;\n    this.saoMaterial = new ShaderMaterial({\n      defines: Object.assign({}, SAOShader.defines),\n      fragmentShader: SAOShader.fragmentShader,\n      vertexShader: SAOShader.vertexShader,\n      uniforms: UniformsUtils.clone(SAOShader.uniforms)\n    });\n    this.saoMaterial.extensions.derivatives = true;\n    this.saoMaterial.defines[\"DEPTH_PACKING\"] = this.supportsDepthTextureExtension ? 0 : 1;\n    this.saoMaterial.defines[\"NORMAL_TEXTURE\"] = this.supportsNormalTexture ? 1 : 0;\n    this.saoMaterial.defines[\"PERSPECTIVE_CAMERA\"] = this.camera.isPerspectiveCamera ? 1 : 0;\n    this.saoMaterial.uniforms[\"tDepth\"].value = this.supportsDepthTextureExtension ? depthTexture : this.depthRenderTarget.texture;\n    this.saoMaterial.uniforms[\"tNormal\"].value = this.normalRenderTarget.texture;\n    this.saoMaterial.uniforms[\"size\"].value.set(this.resolution.x, this.resolution.y);\n    this.saoMaterial.uniforms[\"cameraInverseProjectionMatrix\"].value.copy(this.camera.projectionMatrixInverse);\n    this.saoMaterial.uniforms[\"cameraProjectionMatrix\"].value = this.camera.projectionMatrix;\n    this.saoMaterial.blending = NoBlending;\n    this.vBlurMaterial = new ShaderMaterial({\n      uniforms: UniformsUtils.clone(DepthLimitedBlurShader.uniforms),\n      defines: Object.assign({}, DepthLimitedBlurShader.defines),\n      vertexShader: DepthLimitedBlurShader.vertexShader,\n      fragmentShader: DepthLimitedBlurShader.fragmentShader\n    });\n    this.vBlurMaterial.defines[\"DEPTH_PACKING\"] = this.supportsDepthTextureExtension ? 0 : 1;\n    this.vBlurMaterial.defines[\"PERSPECTIVE_CAMERA\"] = this.camera.isPerspectiveCamera ? 1 : 0;\n    this.vBlurMaterial.uniforms[\"tDiffuse\"].value = this.saoRenderTarget.texture;\n    this.vBlurMaterial.uniforms[\"tDepth\"].value = this.supportsDepthTextureExtension ? depthTexture : this.depthRenderTarget.texture;\n    this.vBlurMaterial.uniforms[\"size\"].value.set(this.resolution.x, this.resolution.y);\n    this.vBlurMaterial.blending = NoBlending;\n    this.hBlurMaterial = new ShaderMaterial({\n      uniforms: UniformsUtils.clone(DepthLimitedBlurShader.uniforms),\n      defines: Object.assign({}, DepthLimitedBlurShader.defines),\n      vertexShader: DepthLimitedBlurShader.vertexShader,\n      fragmentShader: DepthLimitedBlurShader.fragmentShader\n    });\n    this.hBlurMaterial.defines[\"DEPTH_PACKING\"] = this.supportsDepthTextureExtension ? 0 : 1;\n    this.hBlurMaterial.defines[\"PERSPECTIVE_CAMERA\"] = this.camera.isPerspectiveCamera ? 1 : 0;\n    this.hBlurMaterial.uniforms[\"tDiffuse\"].value = this.blurIntermediateRenderTarget.texture;\n    this.hBlurMaterial.uniforms[\"tDepth\"].value = this.supportsDepthTextureExtension ? depthTexture : this.depthRenderTarget.texture;\n    this.hBlurMaterial.uniforms[\"size\"].value.set(this.resolution.x, this.resolution.y);\n    this.hBlurMaterial.blending = NoBlending;\n    this.materialCopy = new ShaderMaterial({\n      uniforms: UniformsUtils.clone(CopyShader.uniforms),\n      vertexShader: CopyShader.vertexShader,\n      fragmentShader: CopyShader.fragmentShader,\n      blending: NoBlending\n    });\n    this.materialCopy.transparent = true;\n    this.materialCopy.depthTest = false;\n    this.materialCopy.depthWrite = false;\n    this.materialCopy.blending = CustomBlending;\n    this.materialCopy.blendSrc = DstColorFactor;\n    this.materialCopy.blendDst = ZeroFactor;\n    this.materialCopy.blendEquation = AddEquation;\n    this.materialCopy.blendSrcAlpha = DstAlphaFactor;\n    this.materialCopy.blendDstAlpha = ZeroFactor;\n    this.materialCopy.blendEquationAlpha = AddEquation;\n    this.depthCopy = new ShaderMaterial({\n      uniforms: UniformsUtils.clone(UnpackDepthRGBAShader.uniforms),\n      vertexShader: UnpackDepthRGBAShader.vertexShader,\n      fragmentShader: UnpackDepthRGBAShader.fragmentShader,\n      blending: NoBlending\n    });\n    this.fsQuad = new FullScreenQuad(null);\n  }\n  render(renderer, writeBuffer, readBuffer) {\n    if (this.renderToScreen) {\n      this.materialCopy.blending = NoBlending;\n      this.materialCopy.uniforms[\"tDiffuse\"].value = readBuffer.texture;\n      this.materialCopy.needsUpdate = true;\n      this.renderPass(renderer, this.materialCopy, null);\n    }\n    if (this.params.output === 1) {\n      return;\n    }\n    renderer.getClearColor(this._oldClearColor);\n    this.oldClearAlpha = renderer.getClearAlpha();\n    const oldAutoClear = renderer.autoClear;\n    renderer.autoClear = false;\n    renderer.setRenderTarget(this.depthRenderTarget);\n    renderer.clear();\n    this.saoMaterial.uniforms[\"bias\"].value = this.params.saoBias;\n    this.saoMaterial.uniforms[\"intensity\"].value = this.params.saoIntensity;\n    this.saoMaterial.uniforms[\"scale\"].value = this.params.saoScale;\n    this.saoMaterial.uniforms[\"kernelRadius\"].value = this.params.saoKernelRadius;\n    this.saoMaterial.uniforms[\"minResolution\"].value = this.params.saoMinResolution;\n    this.saoMaterial.uniforms[\"cameraNear\"].value = this.camera.near;\n    this.saoMaterial.uniforms[\"cameraFar\"].value = this.camera.far;\n    const depthCutoff = this.params.saoBlurDepthCutoff * (this.camera.far - this.camera.near);\n    this.vBlurMaterial.uniforms[\"depthCutoff\"].value = depthCutoff;\n    this.hBlurMaterial.uniforms[\"depthCutoff\"].value = depthCutoff;\n    this.vBlurMaterial.uniforms[\"cameraNear\"].value = this.camera.near;\n    this.vBlurMaterial.uniforms[\"cameraFar\"].value = this.camera.far;\n    this.hBlurMaterial.uniforms[\"cameraNear\"].value = this.camera.near;\n    this.hBlurMaterial.uniforms[\"cameraFar\"].value = this.camera.far;\n    this.params.saoBlurRadius = Math.floor(this.params.saoBlurRadius);\n    if (this.prevStdDev !== this.params.saoBlurStdDev || this.prevNumSamples !== this.params.saoBlurRadius) {\n      BlurShaderUtils.configure(\n        this.vBlurMaterial,\n        this.params.saoBlurRadius,\n        this.params.saoBlurStdDev,\n        new Vector2(0, 1)\n      );\n      BlurShaderUtils.configure(\n        this.hBlurMaterial,\n        this.params.saoBlurRadius,\n        this.params.saoBlurStdDev,\n        new Vector2(1, 0)\n      );\n      this.prevStdDev = this.params.saoBlurStdDev;\n      this.prevNumSamples = this.params.saoBlurRadius;\n    }\n    renderer.setClearColor(0);\n    renderer.setRenderTarget(this.beautyRenderTarget);\n    renderer.clear();\n    renderer.render(this.scene, this.camera);\n    if (!this.supportsDepthTextureExtension) {\n      this.renderOverride(renderer, this.depthMaterial, this.depthRenderTarget, 0, 1);\n    }\n    if (this.supportsNormalTexture) {\n      this.renderOverride(renderer, this.normalMaterial, this.normalRenderTarget, 7829503, 1);\n    }\n    this.renderPass(renderer, this.saoMaterial, this.saoRenderTarget, 16777215, 1);\n    if (this.params.saoBlur) {\n      this.renderPass(renderer, this.vBlurMaterial, this.blurIntermediateRenderTarget, 16777215, 1);\n      this.renderPass(renderer, this.hBlurMaterial, this.saoRenderTarget, 16777215, 1);\n    }\n    let outputMaterial = this.materialCopy;\n    if (this.params.output === 3) {\n      if (this.supportsDepthTextureExtension) {\n        this.materialCopy.uniforms[\"tDiffuse\"].value = this.beautyRenderTarget.depthTexture;\n        this.materialCopy.needsUpdate = true;\n      } else {\n        this.depthCopy.uniforms[\"tDiffuse\"].value = this.depthRenderTarget.texture;\n        this.depthCopy.needsUpdate = true;\n        outputMaterial = this.depthCopy;\n      }\n    } else if (this.params.output === 4) {\n      this.materialCopy.uniforms[\"tDiffuse\"].value = this.normalRenderTarget.texture;\n      this.materialCopy.needsUpdate = true;\n    } else {\n      this.materialCopy.uniforms[\"tDiffuse\"].value = this.saoRenderTarget.texture;\n      this.materialCopy.needsUpdate = true;\n    }\n    if (this.params.output === 0) {\n      outputMaterial.blending = CustomBlending;\n    } else {\n      outputMaterial.blending = NoBlending;\n    }\n    this.renderPass(renderer, outputMaterial, this.renderToScreen ? null : readBuffer);\n    renderer.setClearColor(this._oldClearColor, this.oldClearAlpha);\n    renderer.autoClear = oldAutoClear;\n  }\n  renderPass(renderer, passMaterial, renderTarget, clearColor, clearAlpha) {\n    renderer.getClearColor(this.originalClearColor);\n    const originalClearAlpha = renderer.getClearAlpha();\n    const originalAutoClear = renderer.autoClear;\n    renderer.setRenderTarget(renderTarget);\n    renderer.autoClear = false;\n    if (clearColor !== void 0 && clearColor !== null) {\n      renderer.setClearColor(clearColor);\n      renderer.setClearAlpha(clearAlpha || 0);\n      renderer.clear();\n    }\n    this.fsQuad.material = passMaterial;\n    this.fsQuad.render(renderer);\n    renderer.autoClear = originalAutoClear;\n    renderer.setClearColor(this.originalClearColor);\n    renderer.setClearAlpha(originalClearAlpha);\n  }\n  renderOverride(renderer, overrideMaterial, renderTarget, clearColor, clearAlpha) {\n    renderer.getClearColor(this.originalClearColor);\n    const originalClearAlpha = renderer.getClearAlpha();\n    const originalAutoClear = renderer.autoClear;\n    renderer.setRenderTarget(renderTarget);\n    renderer.autoClear = false;\n    clearColor = overrideMaterial.clearColor || clearColor;\n    clearAlpha = overrideMaterial.clearAlpha || clearAlpha;\n    if (clearColor !== void 0 && clearColor !== null) {\n      renderer.setClearColor(clearColor);\n      renderer.setClearAlpha(clearAlpha || 0);\n      renderer.clear();\n    }\n    this.scene.overrideMaterial = overrideMaterial;\n    renderer.render(this.scene, this.camera);\n    this.scene.overrideMaterial = null;\n    renderer.autoClear = originalAutoClear;\n    renderer.setClearColor(this.originalClearColor);\n    renderer.setClearAlpha(originalClearAlpha);\n  }\n  setSize(width, height) {\n    this.beautyRenderTarget.setSize(width, height);\n    this.saoRenderTarget.setSize(width, height);\n    this.blurIntermediateRenderTarget.setSize(width, height);\n    this.normalRenderTarget.setSize(width, height);\n    this.depthRenderTarget.setSize(width, height);\n    this.saoMaterial.uniforms[\"size\"].value.set(width, height);\n    this.saoMaterial.uniforms[\"cameraInverseProjectionMatrix\"].value.copy(this.camera.projectionMatrixInverse);\n    this.saoMaterial.uniforms[\"cameraProjectionMatrix\"].value = this.camera.projectionMatrix;\n    this.saoMaterial.needsUpdate = true;\n    this.vBlurMaterial.uniforms[\"size\"].value.set(width, height);\n    this.vBlurMaterial.needsUpdate = true;\n    this.hBlurMaterial.uniforms[\"size\"].value.set(width, height);\n    this.hBlurMaterial.needsUpdate = true;\n  }\n  dispose() {\n    this.saoRenderTarget.dispose();\n    this.blurIntermediateRenderTarget.dispose();\n    this.beautyRenderTarget.dispose();\n    this.normalRenderTarget.dispose();\n    this.depthRenderTarget.dispose();\n    this.depthMaterial.dispose();\n    this.normalMaterial.dispose();\n    this.saoMaterial.dispose();\n    this.vBlurMaterial.dispose();\n    this.hBlurMaterial.dispose();\n    this.materialCopy.dispose();\n    this.depthCopy.dispose();\n    this.fsQuad.dispose();\n  }\n}\n__publicField(SAOPass, \"OUTPUT\", {\n  Beauty: 1,\n  Default: 0,\n  SAO: 2,\n  Depth: 3,\n  Normal: 4\n});\nexport {\n  SAOPass\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}