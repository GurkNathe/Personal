{"ast":null,"code":"import _createClass from \"/home/krug/Coding/JavaScript/Websites/Personal/personal/node_modules/.pnpm/@babel+runtime@7.22.3/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _classCallCheck from \"/home/krug/Coding/JavaScript/Websites/Personal/personal/node_modules/.pnpm/@babel+runtime@7.22.3/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _inherits from \"/home/krug/Coding/JavaScript/Websites/Personal/personal/node_modules/.pnpm/@babel+runtime@7.22.3/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/home/krug/Coding/JavaScript/Websites/Personal/personal/node_modules/.pnpm/@babel+runtime@7.22.3/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { BufferGeometry, Vector3, Quaternion, BufferAttribute, Raycaster, Color } from \"three\";\nvar RollerCoasterGeometry = /*#__PURE__*/function (_BufferGeometry) {\n  _inherits(RollerCoasterGeometry, _BufferGeometry);\n  var _super = _createSuper(RollerCoasterGeometry);\n  function RollerCoasterGeometry(curve, divisions) {\n    var _this;\n    _classCallCheck(this, RollerCoasterGeometry);\n    _this = _super.call(this);\n    var vertices = [];\n    var normals = [];\n    var colors = [];\n    var color1 = [1, 1, 1];\n    var color2 = [1, 1, 0];\n    var up = new Vector3(0, 1, 0);\n    var forward = new Vector3();\n    var right = new Vector3();\n    var quaternion = new Quaternion();\n    var prevQuaternion = new Quaternion();\n    prevQuaternion.setFromAxisAngle(up, Math.PI / 2);\n    var point = new Vector3();\n    var prevPoint = new Vector3();\n    prevPoint.copy(curve.getPointAt(0));\n    var step = [new Vector3(-0.225, 0, 0), new Vector3(0, -0.05, 0), new Vector3(0, -0.175, 0), new Vector3(0, -0.05, 0), new Vector3(0.225, 0, 0), new Vector3(0, -0.175, 0)];\n    var PI2 = Math.PI * 2;\n    var sides = 5;\n    var tube1 = [];\n    for (var i = 0; i < sides; i++) {\n      var angle = i / sides * PI2;\n      tube1.push(new Vector3(Math.sin(angle) * 0.06, Math.cos(angle) * 0.06, 0));\n    }\n    sides = 6;\n    var tube2 = [];\n    for (var _i = 0; _i < sides; _i++) {\n      var _angle = _i / sides * PI2;\n      tube2.push(new Vector3(Math.sin(_angle) * 0.025, Math.cos(_angle) * 0.025, 0));\n    }\n    var vector = new Vector3();\n    var normal = new Vector3();\n    function drawShape(shape, color) {\n      normal.set(0, 0, -1).applyQuaternion(quaternion);\n      for (var j = 0; j < shape.length; j++) {\n        vector.copy(shape[j]);\n        vector.applyQuaternion(quaternion);\n        vector.add(point);\n        vertices.push(vector.x, vector.y, vector.z);\n        normals.push(normal.x, normal.y, normal.z);\n        colors.push(color[0], color[1], color[2]);\n      }\n      normal.set(0, 0, 1).applyQuaternion(quaternion);\n      for (var _j = shape.length - 1; _j >= 0; _j--) {\n        vector.copy(shape[_j]);\n        vector.applyQuaternion(quaternion);\n        vector.add(point);\n        vertices.push(vector.x, vector.y, vector.z);\n        normals.push(normal.x, normal.y, normal.z);\n        colors.push(color[0], color[1], color[2]);\n      }\n    }\n    var vector1 = new Vector3();\n    var vector2 = new Vector3();\n    var vector3 = new Vector3();\n    var vector4 = new Vector3();\n    var normal1 = new Vector3();\n    var normal2 = new Vector3();\n    var normal3 = new Vector3();\n    var normal4 = new Vector3();\n    function extrudeShape(shape, offset2, color) {\n      for (var j = 0, jl = shape.length; j < jl; j++) {\n        var point1 = shape[j];\n        var point2 = shape[(j + 1) % jl];\n        vector1.copy(point1).add(offset2);\n        vector1.applyQuaternion(quaternion);\n        vector1.add(point);\n        vector2.copy(point2).add(offset2);\n        vector2.applyQuaternion(quaternion);\n        vector2.add(point);\n        vector3.copy(point2).add(offset2);\n        vector3.applyQuaternion(prevQuaternion);\n        vector3.add(prevPoint);\n        vector4.copy(point1).add(offset2);\n        vector4.applyQuaternion(prevQuaternion);\n        vector4.add(prevPoint);\n        vertices.push(vector1.x, vector1.y, vector1.z);\n        vertices.push(vector2.x, vector2.y, vector2.z);\n        vertices.push(vector4.x, vector4.y, vector4.z);\n        vertices.push(vector2.x, vector2.y, vector2.z);\n        vertices.push(vector3.x, vector3.y, vector3.z);\n        vertices.push(vector4.x, vector4.y, vector4.z);\n        normal1.copy(point1);\n        normal1.applyQuaternion(quaternion);\n        normal1.normalize();\n        normal2.copy(point2);\n        normal2.applyQuaternion(quaternion);\n        normal2.normalize();\n        normal3.copy(point2);\n        normal3.applyQuaternion(prevQuaternion);\n        normal3.normalize();\n        normal4.copy(point1);\n        normal4.applyQuaternion(prevQuaternion);\n        normal4.normalize();\n        normals.push(normal1.x, normal1.y, normal1.z);\n        normals.push(normal2.x, normal2.y, normal2.z);\n        normals.push(normal4.x, normal4.y, normal4.z);\n        normals.push(normal2.x, normal2.y, normal2.z);\n        normals.push(normal3.x, normal3.y, normal3.z);\n        normals.push(normal4.x, normal4.y, normal4.z);\n        colors.push(color[0], color[1], color[2]);\n        colors.push(color[0], color[1], color[2]);\n        colors.push(color[0], color[1], color[2]);\n        colors.push(color[0], color[1], color[2]);\n        colors.push(color[0], color[1], color[2]);\n        colors.push(color[0], color[1], color[2]);\n      }\n    }\n    var offset = new Vector3();\n    for (var _i2 = 1; _i2 <= divisions; _i2++) {\n      point.copy(curve.getPointAt(_i2 / divisions));\n      up.set(0, 1, 0);\n      forward.subVectors(point, prevPoint).normalize();\n      right.crossVectors(up, forward).normalize();\n      up.crossVectors(forward, right);\n      var _angle2 = Math.atan2(forward.x, forward.z);\n      quaternion.setFromAxisAngle(up, _angle2);\n      if (_i2 % 2 === 0) {\n        drawShape(step, color2);\n      }\n      extrudeShape(tube1, offset.set(0, -0.125, 0), color2);\n      extrudeShape(tube2, offset.set(0.2, 0, 0), color1);\n      extrudeShape(tube2, offset.set(-0.2, 0, 0), color1);\n      prevPoint.copy(point);\n      prevQuaternion.copy(quaternion);\n    }\n    _this.setAttribute(\"position\", new BufferAttribute(new Float32Array(vertices), 3));\n    _this.setAttribute(\"normal\", new BufferAttribute(new Float32Array(normals), 3));\n    _this.setAttribute(\"color\", new BufferAttribute(new Float32Array(colors), 3));\n    return _this;\n  }\n  return _createClass(RollerCoasterGeometry);\n}(BufferGeometry);\nvar RollerCoasterLiftersGeometry = /*#__PURE__*/function (_BufferGeometry2) {\n  _inherits(RollerCoasterLiftersGeometry, _BufferGeometry2);\n  var _super2 = _createSuper(RollerCoasterLiftersGeometry);\n  function RollerCoasterLiftersGeometry(curve, divisions) {\n    var _this2;\n    _classCallCheck(this, RollerCoasterLiftersGeometry);\n    _this2 = _super2.call(this);\n    var vertices = [];\n    var normals = [];\n    var quaternion = new Quaternion();\n    var up = new Vector3(0, 1, 0);\n    var point = new Vector3();\n    var tangent = new Vector3();\n    var tube1 = [new Vector3(0, 0.05, -0.05), new Vector3(0, 0.05, 0.05), new Vector3(0, -0.05, 0)];\n    var tube2 = [new Vector3(-0.05, 0, 0.05), new Vector3(-0.05, 0, -0.05), new Vector3(0.05, 0, 0)];\n    var tube3 = [new Vector3(0.05, 0, -0.05), new Vector3(0.05, 0, 0.05), new Vector3(-0.05, 0, 0)];\n    var vector1 = new Vector3();\n    var vector2 = new Vector3();\n    var vector3 = new Vector3();\n    var vector4 = new Vector3();\n    var normal1 = new Vector3();\n    var normal2 = new Vector3();\n    var normal3 = new Vector3();\n    var normal4 = new Vector3();\n    function extrudeShape(shape, fromPoint2, toPoint2) {\n      for (var j = 0, jl = shape.length; j < jl; j++) {\n        var point1 = shape[j];\n        var point2 = shape[(j + 1) % jl];\n        vector1.copy(point1);\n        vector1.applyQuaternion(quaternion);\n        vector1.add(fromPoint2);\n        vector2.copy(point2);\n        vector2.applyQuaternion(quaternion);\n        vector2.add(fromPoint2);\n        vector3.copy(point2);\n        vector3.applyQuaternion(quaternion);\n        vector3.add(toPoint2);\n        vector4.copy(point1);\n        vector4.applyQuaternion(quaternion);\n        vector4.add(toPoint2);\n        vertices.push(vector1.x, vector1.y, vector1.z);\n        vertices.push(vector2.x, vector2.y, vector2.z);\n        vertices.push(vector4.x, vector4.y, vector4.z);\n        vertices.push(vector2.x, vector2.y, vector2.z);\n        vertices.push(vector3.x, vector3.y, vector3.z);\n        vertices.push(vector4.x, vector4.y, vector4.z);\n        normal1.copy(point1);\n        normal1.applyQuaternion(quaternion);\n        normal1.normalize();\n        normal2.copy(point2);\n        normal2.applyQuaternion(quaternion);\n        normal2.normalize();\n        normal3.copy(point2);\n        normal3.applyQuaternion(quaternion);\n        normal3.normalize();\n        normal4.copy(point1);\n        normal4.applyQuaternion(quaternion);\n        normal4.normalize();\n        normals.push(normal1.x, normal1.y, normal1.z);\n        normals.push(normal2.x, normal2.y, normal2.z);\n        normals.push(normal4.x, normal4.y, normal4.z);\n        normals.push(normal2.x, normal2.y, normal2.z);\n        normals.push(normal3.x, normal3.y, normal3.z);\n        normals.push(normal4.x, normal4.y, normal4.z);\n      }\n    }\n    var fromPoint = new Vector3();\n    var toPoint = new Vector3();\n    for (var i = 1; i <= divisions; i++) {\n      point.copy(curve.getPointAt(i / divisions));\n      tangent.copy(curve.getTangentAt(i / divisions));\n      var angle = Math.atan2(tangent.x, tangent.z);\n      quaternion.setFromAxisAngle(up, angle);\n      if (point.y > 10) {\n        fromPoint.set(-0.75, -0.35, 0);\n        fromPoint.applyQuaternion(quaternion);\n        fromPoint.add(point);\n        toPoint.set(0.75, -0.35, 0);\n        toPoint.applyQuaternion(quaternion);\n        toPoint.add(point);\n        extrudeShape(tube1, fromPoint, toPoint);\n        fromPoint.set(-0.7, -0.3, 0);\n        fromPoint.applyQuaternion(quaternion);\n        fromPoint.add(point);\n        toPoint.set(-0.7, -point.y, 0);\n        toPoint.applyQuaternion(quaternion);\n        toPoint.add(point);\n        extrudeShape(tube2, fromPoint, toPoint);\n        fromPoint.set(0.7, -0.3, 0);\n        fromPoint.applyQuaternion(quaternion);\n        fromPoint.add(point);\n        toPoint.set(0.7, -point.y, 0);\n        toPoint.applyQuaternion(quaternion);\n        toPoint.add(point);\n        extrudeShape(tube3, fromPoint, toPoint);\n      } else {\n        fromPoint.set(0, -0.2, 0);\n        fromPoint.applyQuaternion(quaternion);\n        fromPoint.add(point);\n        toPoint.set(0, -point.y, 0);\n        toPoint.applyQuaternion(quaternion);\n        toPoint.add(point);\n        extrudeShape(tube3, fromPoint, toPoint);\n      }\n    }\n    _this2.setAttribute(\"position\", new BufferAttribute(new Float32Array(vertices), 3));\n    _this2.setAttribute(\"normal\", new BufferAttribute(new Float32Array(normals), 3));\n    return _this2;\n  }\n  return _createClass(RollerCoasterLiftersGeometry);\n}(BufferGeometry);\nvar RollerCoasterShadowGeometry = /*#__PURE__*/function (_BufferGeometry3) {\n  _inherits(RollerCoasterShadowGeometry, _BufferGeometry3);\n  var _super3 = _createSuper(RollerCoasterShadowGeometry);\n  function RollerCoasterShadowGeometry(curve, divisions) {\n    var _this3;\n    _classCallCheck(this, RollerCoasterShadowGeometry);\n    _this3 = _super3.call(this);\n    var vertices = [];\n    var up = new Vector3(0, 1, 0);\n    var forward = new Vector3();\n    var quaternion = new Quaternion();\n    var prevQuaternion = new Quaternion();\n    prevQuaternion.setFromAxisAngle(up, Math.PI / 2);\n    var point = new Vector3();\n    var prevPoint = new Vector3();\n    prevPoint.copy(curve.getPointAt(0));\n    prevPoint.y = 0;\n    var vector1 = new Vector3();\n    var vector2 = new Vector3();\n    var vector3 = new Vector3();\n    var vector4 = new Vector3();\n    for (var i = 1; i <= divisions; i++) {\n      point.copy(curve.getPointAt(i / divisions));\n      point.y = 0;\n      forward.subVectors(point, prevPoint);\n      var angle = Math.atan2(forward.x, forward.z);\n      quaternion.setFromAxisAngle(up, angle);\n      vector1.set(-0.3, 0, 0);\n      vector1.applyQuaternion(quaternion);\n      vector1.add(point);\n      vector2.set(0.3, 0, 0);\n      vector2.applyQuaternion(quaternion);\n      vector2.add(point);\n      vector3.set(0.3, 0, 0);\n      vector3.applyQuaternion(prevQuaternion);\n      vector3.add(prevPoint);\n      vector4.set(-0.3, 0, 0);\n      vector4.applyQuaternion(prevQuaternion);\n      vector4.add(prevPoint);\n      vertices.push(vector1.x, vector1.y, vector1.z);\n      vertices.push(vector2.x, vector2.y, vector2.z);\n      vertices.push(vector4.x, vector4.y, vector4.z);\n      vertices.push(vector2.x, vector2.y, vector2.z);\n      vertices.push(vector3.x, vector3.y, vector3.z);\n      vertices.push(vector4.x, vector4.y, vector4.z);\n      prevPoint.copy(point);\n      prevQuaternion.copy(quaternion);\n    }\n    _this3.setAttribute(\"position\", new BufferAttribute(new Float32Array(vertices), 3));\n    return _this3;\n  }\n  return _createClass(RollerCoasterShadowGeometry);\n}(BufferGeometry);\nvar SkyGeometry = /*#__PURE__*/function (_BufferGeometry4) {\n  _inherits(SkyGeometry, _BufferGeometry4);\n  var _super4 = _createSuper(SkyGeometry);\n  function SkyGeometry() {\n    var _this4;\n    _classCallCheck(this, SkyGeometry);\n    _this4 = _super4.call(this);\n    var vertices = [];\n    for (var i = 0; i < 100; i++) {\n      var x = Math.random() * 800 - 400;\n      var y = Math.random() * 50 + 50;\n      var z = Math.random() * 800 - 400;\n      var size = Math.random() * 40 + 20;\n      vertices.push(x - size, y, z - size);\n      vertices.push(x + size, y, z - size);\n      vertices.push(x - size, y, z + size);\n      vertices.push(x + size, y, z - size);\n      vertices.push(x + size, y, z + size);\n      vertices.push(x - size, y, z + size);\n    }\n    _this4.setAttribute(\"position\", new BufferAttribute(new Float32Array(vertices), 3));\n    return _this4;\n  }\n  return _createClass(SkyGeometry);\n}(BufferGeometry);\nvar TreesGeometry = /*#__PURE__*/function (_BufferGeometry5) {\n  _inherits(TreesGeometry, _BufferGeometry5);\n  var _super5 = _createSuper(TreesGeometry);\n  function TreesGeometry(landscape) {\n    var _this5;\n    _classCallCheck(this, TreesGeometry);\n    _this5 = _super5.call(this);\n    var vertices = [];\n    var colors = [];\n    var raycaster = new Raycaster();\n    raycaster.ray.direction.set(0, -1, 0);\n    var _color = new Color();\n    for (var i = 0; i < 2e3; i++) {\n      var x = Math.random() * 500 - 250;\n      var z = Math.random() * 500 - 250;\n      raycaster.ray.origin.set(x, 50, z);\n      var intersections = raycaster.intersectObject(landscape);\n      if (intersections.length === 0) continue;\n      var y = intersections[0].point.y;\n      var height = Math.random() * 5 + 0.5;\n      var angle = Math.random() * Math.PI * 2;\n      vertices.push(x + Math.sin(angle), y, z + Math.cos(angle));\n      vertices.push(x, y + height, z);\n      vertices.push(x + Math.sin(angle + Math.PI), y, z + Math.cos(angle + Math.PI));\n      angle += Math.PI / 2;\n      vertices.push(x + Math.sin(angle), y, z + Math.cos(angle));\n      vertices.push(x, y + height, z);\n      vertices.push(x + Math.sin(angle + Math.PI), y, z + Math.cos(angle + Math.PI));\n      var random = Math.random() * 0.1;\n      for (var j = 0; j < 6; j++) {\n        _color.setRGB(0.2 + random, 0.4 + random, 0, \"srgb\");\n        colors.push(_color.r, _color.g, _color.b);\n      }\n    }\n    _this5.setAttribute(\"position\", new BufferAttribute(new Float32Array(vertices), 3));\n    _this5.setAttribute(\"color\", new BufferAttribute(new Float32Array(colors), 3));\n    return _this5;\n  }\n  return _createClass(TreesGeometry);\n}(BufferGeometry);\nexport { RollerCoasterGeometry, RollerCoasterLiftersGeometry, RollerCoasterShadowGeometry, SkyGeometry, TreesGeometry };","map":{"version":3,"names":["BufferGeometry","Vector3","Quaternion","BufferAttribute","Raycaster","Color","RollerCoasterGeometry","_BufferGeometry","_inherits","_super","_createSuper","curve","divisions","_this","_classCallCheck","call","vertices","normals","colors","color1","color2","up","forward","right","quaternion","prevQuaternion","setFromAxisAngle","Math","PI","point","prevPoint","copy","getPointAt","step","PI2","sides","tube1","i","angle","push","sin","cos","tube2","vector","normal","drawShape","shape","color","set","applyQuaternion","j","length","add","x","y","z","vector1","vector2","vector3","vector4","normal1","normal2","normal3","normal4","extrudeShape","offset2","jl","point1","point2","normalize","offset","subVectors","crossVectors","atan2","setAttribute","Float32Array","_createClass","RollerCoasterLiftersGeometry","_BufferGeometry2","_super2","_this2","tangent","tube3","fromPoint2","toPoint2","fromPoint","toPoint","getTangentAt","RollerCoasterShadowGeometry","_BufferGeometry3","_super3","_this3","SkyGeometry","_BufferGeometry4","_super4","_this4","random","size","TreesGeometry","_BufferGeometry5","_super5","landscape","_this5","raycaster","ray","direction","_color","origin","intersections","intersectObject","height","setRGB","r","g","b"],"sources":["/home/krug/Coding/JavaScript/Websites/Personal/personal/node_modules/.pnpm/three-stdlib@2.23.7_three@0.151.3/node_modules/three-stdlib/misc/RollerCoaster.js"],"sourcesContent":["import { BufferGeometry, Vector3, Quaternion, BufferAttribute, Raycaster, Color } from \"three\";\nclass RollerCoasterGeometry extends BufferGeometry {\n  constructor(curve, divisions) {\n    super();\n    const vertices = [];\n    const normals = [];\n    const colors = [];\n    const color1 = [1, 1, 1];\n    const color2 = [1, 1, 0];\n    const up = new Vector3(0, 1, 0);\n    const forward = new Vector3();\n    const right = new Vector3();\n    const quaternion = new Quaternion();\n    const prevQuaternion = new Quaternion();\n    prevQuaternion.setFromAxisAngle(up, Math.PI / 2);\n    const point = new Vector3();\n    const prevPoint = new Vector3();\n    prevPoint.copy(curve.getPointAt(0));\n    const step = [\n      new Vector3(-0.225, 0, 0),\n      new Vector3(0, -0.05, 0),\n      new Vector3(0, -0.175, 0),\n      new Vector3(0, -0.05, 0),\n      new Vector3(0.225, 0, 0),\n      new Vector3(0, -0.175, 0)\n    ];\n    const PI2 = Math.PI * 2;\n    let sides = 5;\n    const tube1 = [];\n    for (let i = 0; i < sides; i++) {\n      const angle = i / sides * PI2;\n      tube1.push(new Vector3(Math.sin(angle) * 0.06, Math.cos(angle) * 0.06, 0));\n    }\n    sides = 6;\n    const tube2 = [];\n    for (let i = 0; i < sides; i++) {\n      const angle = i / sides * PI2;\n      tube2.push(new Vector3(Math.sin(angle) * 0.025, Math.cos(angle) * 0.025, 0));\n    }\n    const vector = new Vector3();\n    const normal = new Vector3();\n    function drawShape(shape, color) {\n      normal.set(0, 0, -1).applyQuaternion(quaternion);\n      for (let j = 0; j < shape.length; j++) {\n        vector.copy(shape[j]);\n        vector.applyQuaternion(quaternion);\n        vector.add(point);\n        vertices.push(vector.x, vector.y, vector.z);\n        normals.push(normal.x, normal.y, normal.z);\n        colors.push(color[0], color[1], color[2]);\n      }\n      normal.set(0, 0, 1).applyQuaternion(quaternion);\n      for (let j = shape.length - 1; j >= 0; j--) {\n        vector.copy(shape[j]);\n        vector.applyQuaternion(quaternion);\n        vector.add(point);\n        vertices.push(vector.x, vector.y, vector.z);\n        normals.push(normal.x, normal.y, normal.z);\n        colors.push(color[0], color[1], color[2]);\n      }\n    }\n    const vector1 = new Vector3();\n    const vector2 = new Vector3();\n    const vector3 = new Vector3();\n    const vector4 = new Vector3();\n    const normal1 = new Vector3();\n    const normal2 = new Vector3();\n    const normal3 = new Vector3();\n    const normal4 = new Vector3();\n    function extrudeShape(shape, offset2, color) {\n      for (let j = 0, jl = shape.length; j < jl; j++) {\n        const point1 = shape[j];\n        const point2 = shape[(j + 1) % jl];\n        vector1.copy(point1).add(offset2);\n        vector1.applyQuaternion(quaternion);\n        vector1.add(point);\n        vector2.copy(point2).add(offset2);\n        vector2.applyQuaternion(quaternion);\n        vector2.add(point);\n        vector3.copy(point2).add(offset2);\n        vector3.applyQuaternion(prevQuaternion);\n        vector3.add(prevPoint);\n        vector4.copy(point1).add(offset2);\n        vector4.applyQuaternion(prevQuaternion);\n        vector4.add(prevPoint);\n        vertices.push(vector1.x, vector1.y, vector1.z);\n        vertices.push(vector2.x, vector2.y, vector2.z);\n        vertices.push(vector4.x, vector4.y, vector4.z);\n        vertices.push(vector2.x, vector2.y, vector2.z);\n        vertices.push(vector3.x, vector3.y, vector3.z);\n        vertices.push(vector4.x, vector4.y, vector4.z);\n        normal1.copy(point1);\n        normal1.applyQuaternion(quaternion);\n        normal1.normalize();\n        normal2.copy(point2);\n        normal2.applyQuaternion(quaternion);\n        normal2.normalize();\n        normal3.copy(point2);\n        normal3.applyQuaternion(prevQuaternion);\n        normal3.normalize();\n        normal4.copy(point1);\n        normal4.applyQuaternion(prevQuaternion);\n        normal4.normalize();\n        normals.push(normal1.x, normal1.y, normal1.z);\n        normals.push(normal2.x, normal2.y, normal2.z);\n        normals.push(normal4.x, normal4.y, normal4.z);\n        normals.push(normal2.x, normal2.y, normal2.z);\n        normals.push(normal3.x, normal3.y, normal3.z);\n        normals.push(normal4.x, normal4.y, normal4.z);\n        colors.push(color[0], color[1], color[2]);\n        colors.push(color[0], color[1], color[2]);\n        colors.push(color[0], color[1], color[2]);\n        colors.push(color[0], color[1], color[2]);\n        colors.push(color[0], color[1], color[2]);\n        colors.push(color[0], color[1], color[2]);\n      }\n    }\n    const offset = new Vector3();\n    for (let i = 1; i <= divisions; i++) {\n      point.copy(curve.getPointAt(i / divisions));\n      up.set(0, 1, 0);\n      forward.subVectors(point, prevPoint).normalize();\n      right.crossVectors(up, forward).normalize();\n      up.crossVectors(forward, right);\n      const angle = Math.atan2(forward.x, forward.z);\n      quaternion.setFromAxisAngle(up, angle);\n      if (i % 2 === 0) {\n        drawShape(step, color2);\n      }\n      extrudeShape(tube1, offset.set(0, -0.125, 0), color2);\n      extrudeShape(tube2, offset.set(0.2, 0, 0), color1);\n      extrudeShape(tube2, offset.set(-0.2, 0, 0), color1);\n      prevPoint.copy(point);\n      prevQuaternion.copy(quaternion);\n    }\n    this.setAttribute(\"position\", new BufferAttribute(new Float32Array(vertices), 3));\n    this.setAttribute(\"normal\", new BufferAttribute(new Float32Array(normals), 3));\n    this.setAttribute(\"color\", new BufferAttribute(new Float32Array(colors), 3));\n  }\n}\nclass RollerCoasterLiftersGeometry extends BufferGeometry {\n  constructor(curve, divisions) {\n    super();\n    const vertices = [];\n    const normals = [];\n    const quaternion = new Quaternion();\n    const up = new Vector3(0, 1, 0);\n    const point = new Vector3();\n    const tangent = new Vector3();\n    const tube1 = [new Vector3(0, 0.05, -0.05), new Vector3(0, 0.05, 0.05), new Vector3(0, -0.05, 0)];\n    const tube2 = [new Vector3(-0.05, 0, 0.05), new Vector3(-0.05, 0, -0.05), new Vector3(0.05, 0, 0)];\n    const tube3 = [new Vector3(0.05, 0, -0.05), new Vector3(0.05, 0, 0.05), new Vector3(-0.05, 0, 0)];\n    const vector1 = new Vector3();\n    const vector2 = new Vector3();\n    const vector3 = new Vector3();\n    const vector4 = new Vector3();\n    const normal1 = new Vector3();\n    const normal2 = new Vector3();\n    const normal3 = new Vector3();\n    const normal4 = new Vector3();\n    function extrudeShape(shape, fromPoint2, toPoint2) {\n      for (let j = 0, jl = shape.length; j < jl; j++) {\n        const point1 = shape[j];\n        const point2 = shape[(j + 1) % jl];\n        vector1.copy(point1);\n        vector1.applyQuaternion(quaternion);\n        vector1.add(fromPoint2);\n        vector2.copy(point2);\n        vector2.applyQuaternion(quaternion);\n        vector2.add(fromPoint2);\n        vector3.copy(point2);\n        vector3.applyQuaternion(quaternion);\n        vector3.add(toPoint2);\n        vector4.copy(point1);\n        vector4.applyQuaternion(quaternion);\n        vector4.add(toPoint2);\n        vertices.push(vector1.x, vector1.y, vector1.z);\n        vertices.push(vector2.x, vector2.y, vector2.z);\n        vertices.push(vector4.x, vector4.y, vector4.z);\n        vertices.push(vector2.x, vector2.y, vector2.z);\n        vertices.push(vector3.x, vector3.y, vector3.z);\n        vertices.push(vector4.x, vector4.y, vector4.z);\n        normal1.copy(point1);\n        normal1.applyQuaternion(quaternion);\n        normal1.normalize();\n        normal2.copy(point2);\n        normal2.applyQuaternion(quaternion);\n        normal2.normalize();\n        normal3.copy(point2);\n        normal3.applyQuaternion(quaternion);\n        normal3.normalize();\n        normal4.copy(point1);\n        normal4.applyQuaternion(quaternion);\n        normal4.normalize();\n        normals.push(normal1.x, normal1.y, normal1.z);\n        normals.push(normal2.x, normal2.y, normal2.z);\n        normals.push(normal4.x, normal4.y, normal4.z);\n        normals.push(normal2.x, normal2.y, normal2.z);\n        normals.push(normal3.x, normal3.y, normal3.z);\n        normals.push(normal4.x, normal4.y, normal4.z);\n      }\n    }\n    const fromPoint = new Vector3();\n    const toPoint = new Vector3();\n    for (let i = 1; i <= divisions; i++) {\n      point.copy(curve.getPointAt(i / divisions));\n      tangent.copy(curve.getTangentAt(i / divisions));\n      const angle = Math.atan2(tangent.x, tangent.z);\n      quaternion.setFromAxisAngle(up, angle);\n      if (point.y > 10) {\n        fromPoint.set(-0.75, -0.35, 0);\n        fromPoint.applyQuaternion(quaternion);\n        fromPoint.add(point);\n        toPoint.set(0.75, -0.35, 0);\n        toPoint.applyQuaternion(quaternion);\n        toPoint.add(point);\n        extrudeShape(tube1, fromPoint, toPoint);\n        fromPoint.set(-0.7, -0.3, 0);\n        fromPoint.applyQuaternion(quaternion);\n        fromPoint.add(point);\n        toPoint.set(-0.7, -point.y, 0);\n        toPoint.applyQuaternion(quaternion);\n        toPoint.add(point);\n        extrudeShape(tube2, fromPoint, toPoint);\n        fromPoint.set(0.7, -0.3, 0);\n        fromPoint.applyQuaternion(quaternion);\n        fromPoint.add(point);\n        toPoint.set(0.7, -point.y, 0);\n        toPoint.applyQuaternion(quaternion);\n        toPoint.add(point);\n        extrudeShape(tube3, fromPoint, toPoint);\n      } else {\n        fromPoint.set(0, -0.2, 0);\n        fromPoint.applyQuaternion(quaternion);\n        fromPoint.add(point);\n        toPoint.set(0, -point.y, 0);\n        toPoint.applyQuaternion(quaternion);\n        toPoint.add(point);\n        extrudeShape(tube3, fromPoint, toPoint);\n      }\n    }\n    this.setAttribute(\"position\", new BufferAttribute(new Float32Array(vertices), 3));\n    this.setAttribute(\"normal\", new BufferAttribute(new Float32Array(normals), 3));\n  }\n}\nclass RollerCoasterShadowGeometry extends BufferGeometry {\n  constructor(curve, divisions) {\n    super();\n    const vertices = [];\n    const up = new Vector3(0, 1, 0);\n    const forward = new Vector3();\n    const quaternion = new Quaternion();\n    const prevQuaternion = new Quaternion();\n    prevQuaternion.setFromAxisAngle(up, Math.PI / 2);\n    const point = new Vector3();\n    const prevPoint = new Vector3();\n    prevPoint.copy(curve.getPointAt(0));\n    prevPoint.y = 0;\n    const vector1 = new Vector3();\n    const vector2 = new Vector3();\n    const vector3 = new Vector3();\n    const vector4 = new Vector3();\n    for (let i = 1; i <= divisions; i++) {\n      point.copy(curve.getPointAt(i / divisions));\n      point.y = 0;\n      forward.subVectors(point, prevPoint);\n      const angle = Math.atan2(forward.x, forward.z);\n      quaternion.setFromAxisAngle(up, angle);\n      vector1.set(-0.3, 0, 0);\n      vector1.applyQuaternion(quaternion);\n      vector1.add(point);\n      vector2.set(0.3, 0, 0);\n      vector2.applyQuaternion(quaternion);\n      vector2.add(point);\n      vector3.set(0.3, 0, 0);\n      vector3.applyQuaternion(prevQuaternion);\n      vector3.add(prevPoint);\n      vector4.set(-0.3, 0, 0);\n      vector4.applyQuaternion(prevQuaternion);\n      vector4.add(prevPoint);\n      vertices.push(vector1.x, vector1.y, vector1.z);\n      vertices.push(vector2.x, vector2.y, vector2.z);\n      vertices.push(vector4.x, vector4.y, vector4.z);\n      vertices.push(vector2.x, vector2.y, vector2.z);\n      vertices.push(vector3.x, vector3.y, vector3.z);\n      vertices.push(vector4.x, vector4.y, vector4.z);\n      prevPoint.copy(point);\n      prevQuaternion.copy(quaternion);\n    }\n    this.setAttribute(\"position\", new BufferAttribute(new Float32Array(vertices), 3));\n  }\n}\nclass SkyGeometry extends BufferGeometry {\n  constructor() {\n    super();\n    const vertices = [];\n    for (let i = 0; i < 100; i++) {\n      const x = Math.random() * 800 - 400;\n      const y = Math.random() * 50 + 50;\n      const z = Math.random() * 800 - 400;\n      const size = Math.random() * 40 + 20;\n      vertices.push(x - size, y, z - size);\n      vertices.push(x + size, y, z - size);\n      vertices.push(x - size, y, z + size);\n      vertices.push(x + size, y, z - size);\n      vertices.push(x + size, y, z + size);\n      vertices.push(x - size, y, z + size);\n    }\n    this.setAttribute(\"position\", new BufferAttribute(new Float32Array(vertices), 3));\n  }\n}\nclass TreesGeometry extends BufferGeometry {\n  constructor(landscape) {\n    super();\n    const vertices = [];\n    const colors = [];\n    const raycaster = new Raycaster();\n    raycaster.ray.direction.set(0, -1, 0);\n    const _color = new Color();\n    for (let i = 0; i < 2e3; i++) {\n      const x = Math.random() * 500 - 250;\n      const z = Math.random() * 500 - 250;\n      raycaster.ray.origin.set(x, 50, z);\n      const intersections = raycaster.intersectObject(landscape);\n      if (intersections.length === 0)\n        continue;\n      const y = intersections[0].point.y;\n      const height = Math.random() * 5 + 0.5;\n      let angle = Math.random() * Math.PI * 2;\n      vertices.push(x + Math.sin(angle), y, z + Math.cos(angle));\n      vertices.push(x, y + height, z);\n      vertices.push(x + Math.sin(angle + Math.PI), y, z + Math.cos(angle + Math.PI));\n      angle += Math.PI / 2;\n      vertices.push(x + Math.sin(angle), y, z + Math.cos(angle));\n      vertices.push(x, y + height, z);\n      vertices.push(x + Math.sin(angle + Math.PI), y, z + Math.cos(angle + Math.PI));\n      const random = Math.random() * 0.1;\n      for (let j = 0; j < 6; j++) {\n        _color.setRGB(0.2 + random, 0.4 + random, 0, \"srgb\");\n        colors.push(_color.r, _color.g, _color.b);\n      }\n    }\n    this.setAttribute(\"position\", new BufferAttribute(new Float32Array(vertices), 3));\n    this.setAttribute(\"color\", new BufferAttribute(new Float32Array(colors), 3));\n  }\n}\nexport {\n  RollerCoasterGeometry,\n  RollerCoasterLiftersGeometry,\n  RollerCoasterShadowGeometry,\n  SkyGeometry,\n  TreesGeometry\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}