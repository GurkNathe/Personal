{"ast":null,"code":"var __defProp = Object.defineProperty;\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value\n}) : obj[key] = value;\nvar __publicField = (obj, key, value) => {\n  __defNormalProp(obj, typeof key !== \"symbol\" ? key + \"\" : key, value);\n  return value;\n};\nimport { Mesh, PerspectiveCamera, Color, Plane, Vector3, Matrix4, Vector4, WebGLRenderTarget, HalfFloatType, ShaderMaterial, UniformsUtils, NoToneMapping } from \"three\";\nconst _Reflector = class extends Mesh {\n  constructor(geometry) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    super(geometry);\n    this.isReflector = true;\n    this.type = \"Reflector\";\n    this.camera = new PerspectiveCamera();\n    const scope = this;\n    const color = options.color !== void 0 ? new Color(options.color) : new Color(8355711);\n    const textureWidth = options.textureWidth || 512;\n    const textureHeight = options.textureHeight || 512;\n    const clipBias = options.clipBias || 0;\n    const shader = options.shader || _Reflector.ReflectorShader;\n    const multisample = options.multisample !== void 0 ? options.multisample : 4;\n    const reflectorPlane = new Plane();\n    const normal = new Vector3();\n    const reflectorWorldPosition = new Vector3();\n    const cameraWorldPosition = new Vector3();\n    const rotationMatrix = new Matrix4();\n    const lookAtPosition = new Vector3(0, 0, -1);\n    const clipPlane = new Vector4();\n    const view = new Vector3();\n    const target = new Vector3();\n    const q = new Vector4();\n    const textureMatrix = new Matrix4();\n    const virtualCamera = this.camera;\n    const renderTarget = new WebGLRenderTarget(textureWidth, textureHeight, {\n      samples: multisample,\n      type: HalfFloatType\n    });\n    const material = new ShaderMaterial({\n      uniforms: UniformsUtils.clone(shader.uniforms),\n      fragmentShader: shader.fragmentShader,\n      vertexShader: shader.vertexShader\n    });\n    material.uniforms[\"tDiffuse\"].value = renderTarget.texture;\n    material.uniforms[\"color\"].value = color;\n    material.uniforms[\"textureMatrix\"].value = textureMatrix;\n    this.material = material;\n    this.onBeforeRender = function (renderer, scene, camera) {\n      reflectorWorldPosition.setFromMatrixPosition(scope.matrixWorld);\n      cameraWorldPosition.setFromMatrixPosition(camera.matrixWorld);\n      rotationMatrix.extractRotation(scope.matrixWorld);\n      normal.set(0, 0, 1);\n      normal.applyMatrix4(rotationMatrix);\n      view.subVectors(reflectorWorldPosition, cameraWorldPosition);\n      if (view.dot(normal) > 0) return;\n      view.reflect(normal).negate();\n      view.add(reflectorWorldPosition);\n      rotationMatrix.extractRotation(camera.matrixWorld);\n      lookAtPosition.set(0, 0, -1);\n      lookAtPosition.applyMatrix4(rotationMatrix);\n      lookAtPosition.add(cameraWorldPosition);\n      target.subVectors(reflectorWorldPosition, lookAtPosition);\n      target.reflect(normal).negate();\n      target.add(reflectorWorldPosition);\n      virtualCamera.position.copy(view);\n      virtualCamera.up.set(0, 1, 0);\n      virtualCamera.up.applyMatrix4(rotationMatrix);\n      virtualCamera.up.reflect(normal);\n      virtualCamera.lookAt(target);\n      virtualCamera.far = camera.far;\n      virtualCamera.updateMatrixWorld();\n      virtualCamera.projectionMatrix.copy(camera.projectionMatrix);\n      textureMatrix.set(0.5, 0, 0, 0.5, 0, 0.5, 0, 0.5, 0, 0, 0.5, 0.5, 0, 0, 0, 1);\n      textureMatrix.multiply(virtualCamera.projectionMatrix);\n      textureMatrix.multiply(virtualCamera.matrixWorldInverse);\n      textureMatrix.multiply(scope.matrixWorld);\n      reflectorPlane.setFromNormalAndCoplanarPoint(normal, reflectorWorldPosition);\n      reflectorPlane.applyMatrix4(virtualCamera.matrixWorldInverse);\n      clipPlane.set(reflectorPlane.normal.x, reflectorPlane.normal.y, reflectorPlane.normal.z, reflectorPlane.constant);\n      const projectionMatrix = virtualCamera.projectionMatrix;\n      q.x = (Math.sign(clipPlane.x) + projectionMatrix.elements[8]) / projectionMatrix.elements[0];\n      q.y = (Math.sign(clipPlane.y) + projectionMatrix.elements[9]) / projectionMatrix.elements[5];\n      q.z = -1;\n      q.w = (1 + projectionMatrix.elements[10]) / projectionMatrix.elements[14];\n      clipPlane.multiplyScalar(2 / clipPlane.dot(q));\n      projectionMatrix.elements[2] = clipPlane.x;\n      projectionMatrix.elements[6] = clipPlane.y;\n      projectionMatrix.elements[10] = clipPlane.z + 1 - clipBias;\n      projectionMatrix.elements[14] = clipPlane.w;\n      scope.visible = false;\n      const currentRenderTarget = renderer.getRenderTarget();\n      const currentXrEnabled = renderer.xr.enabled;\n      const currentShadowAutoUpdate = renderer.shadowMap.autoUpdate;\n      const currentToneMapping = renderer.toneMapping;\n      let isSRGB = false;\n      if (\"outputColorSpace\" in renderer) isSRGB = renderer.outputColorSpace === \"srgb\";else isSRGB = renderer.outputEncoding === 3001;\n      renderer.xr.enabled = false;\n      renderer.shadowMap.autoUpdate = false;\n      if (\"outputColorSpace\" in renderer) renderer.outputColorSpace = \"linear-srgb\";else renderer.outputEncoding = 3e3;\n      renderer.toneMapping = NoToneMapping;\n      renderer.setRenderTarget(renderTarget);\n      renderer.state.buffers.depth.setMask(true);\n      if (renderer.autoClear === false) renderer.clear();\n      renderer.render(scene, virtualCamera);\n      renderer.xr.enabled = currentXrEnabled;\n      renderer.shadowMap.autoUpdate = currentShadowAutoUpdate;\n      renderer.toneMapping = currentToneMapping;\n      if (\"outputColorSpace\" in renderer) renderer.outputColorSpace = isSRGB ? \"srgb\" : \"srgb-linear\";else renderer.outputEncoding = isSRGB ? 3001 : 3e3;\n      renderer.setRenderTarget(currentRenderTarget);\n      const viewport = camera.viewport;\n      if (viewport !== void 0) {\n        renderer.state.viewport(viewport);\n      }\n      scope.visible = true;\n    };\n    this.getRenderTarget = function () {\n      return renderTarget;\n    };\n    this.dispose = function () {\n      renderTarget.dispose();\n      scope.material.dispose();\n    };\n  }\n};\nlet Reflector = _Reflector;\n__publicField(Reflector, \"ReflectorShader\", {\n  uniforms: {\n    color: {\n      value: null\n    },\n    tDiffuse: {\n      value: null\n    },\n    textureMatrix: {\n      value: null\n    }\n  },\n  vertexShader: /* glsl */\n  `\n\t\tuniform mat4 textureMatrix;\n\t\tvarying vec4 vUv;\n\n\t\t#include <common>\n\t\t#include <logdepthbuf_pars_vertex>\n\n\t\tvoid main() {\n\n\t\t\tvUv = textureMatrix * vec4( position, 1.0 );\n\n\t\t\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n\n\t\t\t#include <logdepthbuf_vertex>\n\n\t\t}`,\n  fragmentShader: /* glsl */\n  `\n\t\tuniform vec3 color;\n\t\tuniform sampler2D tDiffuse;\n\t\tvarying vec4 vUv;\n\n\t\t#include <logdepthbuf_pars_fragment>\n\n\t\tfloat blendOverlay( float base, float blend ) {\n\n\t\t\treturn( base < 0.5 ? ( 2.0 * base * blend ) : ( 1.0 - 2.0 * ( 1.0 - base ) * ( 1.0 - blend ) ) );\n\n\t\t}\n\n\t\tvec3 blendOverlay( vec3 base, vec3 blend ) {\n\n\t\t\treturn vec3( blendOverlay( base.r, blend.r ), blendOverlay( base.g, blend.g ), blendOverlay( base.b, blend.b ) );\n\n\t\t}\n\n\t\tvoid main() {\n\n\t\t\t#include <logdepthbuf_fragment>\n\n\t\t\tvec4 base = texture2DProj( tDiffuse, vUv );\n\t\t\tgl_FragColor = vec4( blendOverlay( base.rgb, color ), 1.0 );\n\n\t\t\t#include <tonemapping_fragment>\n\t\t\t#include <encodings_fragment>\n\n\t\t}`\n});\nexport { Reflector };","map":{"version":3,"names":["__defProp","Object","defineProperty","__defNormalProp","obj","key","value","enumerable","configurable","writable","__publicField","Mesh","PerspectiveCamera","Color","Plane","Vector3","Matrix4","Vector4","WebGLRenderTarget","HalfFloatType","ShaderMaterial","UniformsUtils","NoToneMapping","_Reflector","constructor","geometry","options","arguments","length","undefined","isReflector","type","camera","scope","color","textureWidth","textureHeight","clipBias","shader","ReflectorShader","multisample","reflectorPlane","normal","reflectorWorldPosition","cameraWorldPosition","rotationMatrix","lookAtPosition","clipPlane","view","target","q","textureMatrix","virtualCamera","renderTarget","samples","material","uniforms","clone","fragmentShader","vertexShader","texture","onBeforeRender","renderer","scene","setFromMatrixPosition","matrixWorld","extractRotation","set","applyMatrix4","subVectors","dot","reflect","negate","add","position","copy","up","lookAt","far","updateMatrixWorld","projectionMatrix","multiply","matrixWorldInverse","setFromNormalAndCoplanarPoint","x","y","z","constant","Math","sign","elements","w","multiplyScalar","visible","currentRenderTarget","getRenderTarget","currentXrEnabled","xr","enabled","currentShadowAutoUpdate","shadowMap","autoUpdate","currentToneMapping","toneMapping","isSRGB","outputColorSpace","outputEncoding","setRenderTarget","state","buffers","depth","setMask","autoClear","clear","render","viewport","dispose","Reflector","tDiffuse"],"sources":["/home/krug/Coding/JavaScript/Websites/Personal/personal/node_modules/.pnpm/three-stdlib@2.23.7_three@0.151.3/node_modules/three-stdlib/objects/Reflector.js"],"sourcesContent":["var __defProp = Object.defineProperty;\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;\nvar __publicField = (obj, key, value) => {\n  __defNormalProp(obj, typeof key !== \"symbol\" ? key + \"\" : key, value);\n  return value;\n};\nimport { Mesh, PerspectiveCamera, Color, Plane, Vector3, Matrix4, Vector4, WebGLRenderTarget, HalfFloatType, ShaderMaterial, UniformsUtils, NoToneMapping } from \"three\";\nconst _Reflector = class extends Mesh {\n  constructor(geometry, options = {}) {\n    super(geometry);\n    this.isReflector = true;\n    this.type = \"Reflector\";\n    this.camera = new PerspectiveCamera();\n    const scope = this;\n    const color = options.color !== void 0 ? new Color(options.color) : new Color(8355711);\n    const textureWidth = options.textureWidth || 512;\n    const textureHeight = options.textureHeight || 512;\n    const clipBias = options.clipBias || 0;\n    const shader = options.shader || _Reflector.ReflectorShader;\n    const multisample = options.multisample !== void 0 ? options.multisample : 4;\n    const reflectorPlane = new Plane();\n    const normal = new Vector3();\n    const reflectorWorldPosition = new Vector3();\n    const cameraWorldPosition = new Vector3();\n    const rotationMatrix = new Matrix4();\n    const lookAtPosition = new Vector3(0, 0, -1);\n    const clipPlane = new Vector4();\n    const view = new Vector3();\n    const target = new Vector3();\n    const q = new Vector4();\n    const textureMatrix = new Matrix4();\n    const virtualCamera = this.camera;\n    const renderTarget = new WebGLRenderTarget(textureWidth, textureHeight, {\n      samples: multisample,\n      type: HalfFloatType\n    });\n    const material = new ShaderMaterial({\n      uniforms: UniformsUtils.clone(shader.uniforms),\n      fragmentShader: shader.fragmentShader,\n      vertexShader: shader.vertexShader\n    });\n    material.uniforms[\"tDiffuse\"].value = renderTarget.texture;\n    material.uniforms[\"color\"].value = color;\n    material.uniforms[\"textureMatrix\"].value = textureMatrix;\n    this.material = material;\n    this.onBeforeRender = function(renderer, scene, camera) {\n      reflectorWorldPosition.setFromMatrixPosition(scope.matrixWorld);\n      cameraWorldPosition.setFromMatrixPosition(camera.matrixWorld);\n      rotationMatrix.extractRotation(scope.matrixWorld);\n      normal.set(0, 0, 1);\n      normal.applyMatrix4(rotationMatrix);\n      view.subVectors(reflectorWorldPosition, cameraWorldPosition);\n      if (view.dot(normal) > 0)\n        return;\n      view.reflect(normal).negate();\n      view.add(reflectorWorldPosition);\n      rotationMatrix.extractRotation(camera.matrixWorld);\n      lookAtPosition.set(0, 0, -1);\n      lookAtPosition.applyMatrix4(rotationMatrix);\n      lookAtPosition.add(cameraWorldPosition);\n      target.subVectors(reflectorWorldPosition, lookAtPosition);\n      target.reflect(normal).negate();\n      target.add(reflectorWorldPosition);\n      virtualCamera.position.copy(view);\n      virtualCamera.up.set(0, 1, 0);\n      virtualCamera.up.applyMatrix4(rotationMatrix);\n      virtualCamera.up.reflect(normal);\n      virtualCamera.lookAt(target);\n      virtualCamera.far = camera.far;\n      virtualCamera.updateMatrixWorld();\n      virtualCamera.projectionMatrix.copy(camera.projectionMatrix);\n      textureMatrix.set(0.5, 0, 0, 0.5, 0, 0.5, 0, 0.5, 0, 0, 0.5, 0.5, 0, 0, 0, 1);\n      textureMatrix.multiply(virtualCamera.projectionMatrix);\n      textureMatrix.multiply(virtualCamera.matrixWorldInverse);\n      textureMatrix.multiply(scope.matrixWorld);\n      reflectorPlane.setFromNormalAndCoplanarPoint(normal, reflectorWorldPosition);\n      reflectorPlane.applyMatrix4(virtualCamera.matrixWorldInverse);\n      clipPlane.set(reflectorPlane.normal.x, reflectorPlane.normal.y, reflectorPlane.normal.z, reflectorPlane.constant);\n      const projectionMatrix = virtualCamera.projectionMatrix;\n      q.x = (Math.sign(clipPlane.x) + projectionMatrix.elements[8]) / projectionMatrix.elements[0];\n      q.y = (Math.sign(clipPlane.y) + projectionMatrix.elements[9]) / projectionMatrix.elements[5];\n      q.z = -1;\n      q.w = (1 + projectionMatrix.elements[10]) / projectionMatrix.elements[14];\n      clipPlane.multiplyScalar(2 / clipPlane.dot(q));\n      projectionMatrix.elements[2] = clipPlane.x;\n      projectionMatrix.elements[6] = clipPlane.y;\n      projectionMatrix.elements[10] = clipPlane.z + 1 - clipBias;\n      projectionMatrix.elements[14] = clipPlane.w;\n      scope.visible = false;\n      const currentRenderTarget = renderer.getRenderTarget();\n      const currentXrEnabled = renderer.xr.enabled;\n      const currentShadowAutoUpdate = renderer.shadowMap.autoUpdate;\n      const currentToneMapping = renderer.toneMapping;\n      let isSRGB = false;\n      if (\"outputColorSpace\" in renderer)\n        isSRGB = renderer.outputColorSpace === \"srgb\";\n      else\n        isSRGB = renderer.outputEncoding === 3001;\n      renderer.xr.enabled = false;\n      renderer.shadowMap.autoUpdate = false;\n      if (\"outputColorSpace\" in renderer)\n        renderer.outputColorSpace = \"linear-srgb\";\n      else\n        renderer.outputEncoding = 3e3;\n      renderer.toneMapping = NoToneMapping;\n      renderer.setRenderTarget(renderTarget);\n      renderer.state.buffers.depth.setMask(true);\n      if (renderer.autoClear === false)\n        renderer.clear();\n      renderer.render(scene, virtualCamera);\n      renderer.xr.enabled = currentXrEnabled;\n      renderer.shadowMap.autoUpdate = currentShadowAutoUpdate;\n      renderer.toneMapping = currentToneMapping;\n      if (\"outputColorSpace\" in renderer)\n        renderer.outputColorSpace = isSRGB ? \"srgb\" : \"srgb-linear\";\n      else\n        renderer.outputEncoding = isSRGB ? 3001 : 3e3;\n      renderer.setRenderTarget(currentRenderTarget);\n      const viewport = camera.viewport;\n      if (viewport !== void 0) {\n        renderer.state.viewport(viewport);\n      }\n      scope.visible = true;\n    };\n    this.getRenderTarget = function() {\n      return renderTarget;\n    };\n    this.dispose = function() {\n      renderTarget.dispose();\n      scope.material.dispose();\n    };\n  }\n};\nlet Reflector = _Reflector;\n__publicField(Reflector, \"ReflectorShader\", {\n  uniforms: {\n    color: {\n      value: null\n    },\n    tDiffuse: {\n      value: null\n    },\n    textureMatrix: {\n      value: null\n    }\n  },\n  vertexShader: (\n    /* glsl */\n    `\n\t\tuniform mat4 textureMatrix;\n\t\tvarying vec4 vUv;\n\n\t\t#include <common>\n\t\t#include <logdepthbuf_pars_vertex>\n\n\t\tvoid main() {\n\n\t\t\tvUv = textureMatrix * vec4( position, 1.0 );\n\n\t\t\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n\n\t\t\t#include <logdepthbuf_vertex>\n\n\t\t}`\n  ),\n  fragmentShader: (\n    /* glsl */\n    `\n\t\tuniform vec3 color;\n\t\tuniform sampler2D tDiffuse;\n\t\tvarying vec4 vUv;\n\n\t\t#include <logdepthbuf_pars_fragment>\n\n\t\tfloat blendOverlay( float base, float blend ) {\n\n\t\t\treturn( base < 0.5 ? ( 2.0 * base * blend ) : ( 1.0 - 2.0 * ( 1.0 - base ) * ( 1.0 - blend ) ) );\n\n\t\t}\n\n\t\tvec3 blendOverlay( vec3 base, vec3 blend ) {\n\n\t\t\treturn vec3( blendOverlay( base.r, blend.r ), blendOverlay( base.g, blend.g ), blendOverlay( base.b, blend.b ) );\n\n\t\t}\n\n\t\tvoid main() {\n\n\t\t\t#include <logdepthbuf_fragment>\n\n\t\t\tvec4 base = texture2DProj( tDiffuse, vUv );\n\t\t\tgl_FragColor = vec4( blendOverlay( base.rgb, color ), 1.0 );\n\n\t\t\t#include <tonemapping_fragment>\n\t\t\t#include <encodings_fragment>\n\n\t\t}`\n  )\n});\nexport {\n  Reflector\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}