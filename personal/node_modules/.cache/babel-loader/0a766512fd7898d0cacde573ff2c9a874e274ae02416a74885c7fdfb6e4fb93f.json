{"ast":null,"code":"var __defProp = Object.defineProperty;\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value\n}) : obj[key] = value;\nvar __publicField = (obj, key, value) => {\n  __defNormalProp(obj, typeof key !== \"symbol\" ? key + \"\" : key, value);\n  return value;\n};\nimport { OrthographicCamera, PlaneGeometry, Mesh } from \"three\";\nclass Pass {\n  constructor() {\n    // if set to true, the pass is processed by the composer\n    __publicField(this, \"enabled\", true);\n    // if set to true, the pass indicates to swap read and write buffer after rendering\n    __publicField(this, \"needsSwap\", true);\n    // if set to true, the pass clears its buffer before rendering\n    __publicField(this, \"clear\", false);\n    // if set to true, the result of the pass is rendered to screen. This is set automatically by EffectComposer.\n    __publicField(this, \"renderToScreen\", false);\n  }\n  setSize(width, height) {}\n  render(renderer, writeBuffer, readBuffer, deltaTime, maskActive) {\n    console.error(\"THREE.Pass: .render() must be implemented in derived pass.\");\n  }\n}\nclass FullScreenQuad {\n  constructor(material) {\n    __publicField(this, \"camera\", new OrthographicCamera(-1, 1, 1, -1, 0, 1));\n    __publicField(this, \"geometry\", new PlaneGeometry(2, 2));\n    __publicField(this, \"mesh\");\n    this.mesh = new Mesh(this.geometry, material);\n  }\n  get material() {\n    return this.mesh.material;\n  }\n  set material(value) {\n    this.mesh.material = value;\n  }\n  dispose() {\n    this.mesh.geometry.dispose();\n  }\n  render(renderer) {\n    renderer.render(this.mesh, this.camera);\n  }\n}\nexport { FullScreenQuad, Pass };","map":{"version":3,"names":["__defProp","Object","defineProperty","__defNormalProp","obj","key","value","enumerable","configurable","writable","__publicField","OrthographicCamera","PlaneGeometry","Mesh","Pass","constructor","setSize","width","height","render","renderer","writeBuffer","readBuffer","deltaTime","maskActive","console","error","FullScreenQuad","material","mesh","geometry","dispose","camera"],"sources":["/home/krug/Coding/JavaScript/Websites/Personal/personal/node_modules/.pnpm/three-stdlib@2.23.7_three@0.151.3/node_modules/three-stdlib/postprocessing/Pass.js"],"sourcesContent":["var __defProp = Object.defineProperty;\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;\nvar __publicField = (obj, key, value) => {\n  __defNormalProp(obj, typeof key !== \"symbol\" ? key + \"\" : key, value);\n  return value;\n};\nimport { OrthographicCamera, PlaneGeometry, Mesh } from \"three\";\nclass Pass {\n  constructor() {\n    // if set to true, the pass is processed by the composer\n    __publicField(this, \"enabled\", true);\n    // if set to true, the pass indicates to swap read and write buffer after rendering\n    __publicField(this, \"needsSwap\", true);\n    // if set to true, the pass clears its buffer before rendering\n    __publicField(this, \"clear\", false);\n    // if set to true, the result of the pass is rendered to screen. This is set automatically by EffectComposer.\n    __publicField(this, \"renderToScreen\", false);\n  }\n  setSize(width, height) {\n  }\n  render(renderer, writeBuffer, readBuffer, deltaTime, maskActive) {\n    console.error(\"THREE.Pass: .render() must be implemented in derived pass.\");\n  }\n}\nclass FullScreenQuad {\n  constructor(material) {\n    __publicField(this, \"camera\", new OrthographicCamera(-1, 1, 1, -1, 0, 1));\n    __publicField(this, \"geometry\", new PlaneGeometry(2, 2));\n    __publicField(this, \"mesh\");\n    this.mesh = new Mesh(this.geometry, material);\n  }\n  get material() {\n    return this.mesh.material;\n  }\n  set material(value) {\n    this.mesh.material = value;\n  }\n  dispose() {\n    this.mesh.geometry.dispose();\n  }\n  render(renderer) {\n    renderer.render(this.mesh, this.camera);\n  }\n}\nexport {\n  FullScreenQuad,\n  Pass\n};\n"],"mappings":"AAAA,IAAIA,SAAS,GAAGC,MAAM,CAACC,cAAc;AACrC,IAAIC,eAAe,GAAGA,CAACC,GAAG,EAAEC,GAAG,EAAEC,KAAK,KAAKD,GAAG,IAAID,GAAG,GAAGJ,SAAS,CAACI,GAAG,EAAEC,GAAG,EAAE;EAAEE,UAAU,EAAE,IAAI;EAAEC,YAAY,EAAE,IAAI;EAAEC,QAAQ,EAAE,IAAI;EAAEH;AAAM,CAAC,CAAC,GAAGF,GAAG,CAACC,GAAG,CAAC,GAAGC,KAAK;AAC/J,IAAII,aAAa,GAAGA,CAACN,GAAG,EAAEC,GAAG,EAAEC,KAAK,KAAK;EACvCH,eAAe,CAACC,GAAG,EAAE,OAAOC,GAAG,KAAK,QAAQ,GAAGA,GAAG,GAAG,EAAE,GAAGA,GAAG,EAAEC,KAAK,CAAC;EACrE,OAAOA,KAAK;AACd,CAAC;AACD,SAASK,kBAAkB,EAAEC,aAAa,EAAEC,IAAI,QAAQ,OAAO;AAC/D,MAAMC,IAAI,CAAC;EACTC,WAAWA,CAAA,EAAG;IACZ;IACAL,aAAa,CAAC,IAAI,EAAE,SAAS,EAAE,IAAI,CAAC;IACpC;IACAA,aAAa,CAAC,IAAI,EAAE,WAAW,EAAE,IAAI,CAAC;IACtC;IACAA,aAAa,CAAC,IAAI,EAAE,OAAO,EAAE,KAAK,CAAC;IACnC;IACAA,aAAa,CAAC,IAAI,EAAE,gBAAgB,EAAE,KAAK,CAAC;EAC9C;EACAM,OAAOA,CAACC,KAAK,EAAEC,MAAM,EAAE,CACvB;EACAC,MAAMA,CAACC,QAAQ,EAAEC,WAAW,EAAEC,UAAU,EAAEC,SAAS,EAAEC,UAAU,EAAE;IAC/DC,OAAO,CAACC,KAAK,CAAC,4DAA4D,CAAC;EAC7E;AACF;AACA,MAAMC,cAAc,CAAC;EACnBZ,WAAWA,CAACa,QAAQ,EAAE;IACpBlB,aAAa,CAAC,IAAI,EAAE,QAAQ,EAAE,IAAIC,kBAAkB,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;IACzED,aAAa,CAAC,IAAI,EAAE,UAAU,EAAE,IAAIE,aAAa,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;IACxDF,aAAa,CAAC,IAAI,EAAE,MAAM,CAAC;IAC3B,IAAI,CAACmB,IAAI,GAAG,IAAIhB,IAAI,CAAC,IAAI,CAACiB,QAAQ,EAAEF,QAAQ,CAAC;EAC/C;EACA,IAAIA,QAAQA,CAAA,EAAG;IACb,OAAO,IAAI,CAACC,IAAI,CAACD,QAAQ;EAC3B;EACA,IAAIA,QAAQA,CAACtB,KAAK,EAAE;IAClB,IAAI,CAACuB,IAAI,CAACD,QAAQ,GAAGtB,KAAK;EAC5B;EACAyB,OAAOA,CAAA,EAAG;IACR,IAAI,CAACF,IAAI,CAACC,QAAQ,CAACC,OAAO,CAAC,CAAC;EAC9B;EACAZ,MAAMA,CAACC,QAAQ,EAAE;IACfA,QAAQ,CAACD,MAAM,CAAC,IAAI,CAACU,IAAI,EAAE,IAAI,CAACG,MAAM,CAAC;EACzC;AACF;AACA,SACEL,cAAc,EACdb,IAAI"},"metadata":{},"sourceType":"module","externalDependencies":[]}