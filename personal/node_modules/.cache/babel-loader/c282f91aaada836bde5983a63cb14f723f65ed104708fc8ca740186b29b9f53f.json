{"ast":null,"code":"import _classCallCheck from \"/home/krug/Coding/JavaScript/Websites/Personal/personal/node_modules/.pnpm/@babel+runtime@7.22.3/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/home/krug/Coding/JavaScript/Websites/Personal/personal/node_modules/.pnpm/@babel+runtime@7.22.3/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _get from \"/home/krug/Coding/JavaScript/Websites/Personal/personal/node_modules/.pnpm/@babel+runtime@7.22.3/node_modules/@babel/runtime/helpers/esm/get.js\";\nimport _getPrototypeOf from \"/home/krug/Coding/JavaScript/Websites/Personal/personal/node_modules/.pnpm/@babel+runtime@7.22.3/node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js\";\nimport _inherits from \"/home/krug/Coding/JavaScript/Websites/Personal/personal/node_modules/.pnpm/@babel+runtime@7.22.3/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/home/krug/Coding/JavaScript/Websites/Personal/personal/node_modules/.pnpm/@babel+runtime@7.22.3/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { DataTextureLoader, HalfFloatType, DataUtils, FloatType, LinearFilter } from \"three\";\nvar RGBELoader = /*#__PURE__*/function (_DataTextureLoader) {\n  _inherits(RGBELoader, _DataTextureLoader);\n  var _super = _createSuper(RGBELoader);\n  function RGBELoader(manager) {\n    var _this;\n    _classCallCheck(this, RGBELoader);\n    _this = _super.call(this, manager);\n    _this.type = HalfFloatType;\n    return _this;\n  }\n  // adapted from http://www.graphics.cornell.edu/~bjw/rgbe.html\n  _createClass(RGBELoader, [{\n    key: \"parse\",\n    value: function parse(buffer) {\n      var RGBE_RETURN_FAILURE = -1,\n        rgbe_read_error = 1,\n        rgbe_write_error = 2,\n        rgbe_format_error = 3,\n        rgbe_memory_error = 4,\n        rgbe_error = function rgbe_error(rgbe_error_code, msg) {\n          switch (rgbe_error_code) {\n            case rgbe_read_error:\n              console.error(\"THREE.RGBELoader Read Error: \" + (msg || \"\"));\n              break;\n            case rgbe_write_error:\n              console.error(\"THREE.RGBELoader Write Error: \" + (msg || \"\"));\n              break;\n            case rgbe_format_error:\n              console.error(\"THREE.RGBELoader Bad File Format: \" + (msg || \"\"));\n              break;\n            default:\n            case rgbe_memory_error:\n              console.error(\"THREE.RGBELoader: Error: \" + (msg || \"\"));\n          }\n          return RGBE_RETURN_FAILURE;\n        },\n        RGBE_VALID_PROGRAMTYPE = 1,\n        RGBE_VALID_FORMAT = 2,\n        RGBE_VALID_DIMENSIONS = 4,\n        NEWLINE = \"\\n\",\n        fgets = function fgets(buffer2, lineLimit, consume) {\n          var chunkSize = 128;\n          lineLimit = !lineLimit ? 1024 : lineLimit;\n          var p = buffer2.pos,\n            i = -1,\n            len = 0,\n            s = \"\",\n            chunk = String.fromCharCode.apply(null, new Uint16Array(buffer2.subarray(p, p + chunkSize)));\n          while (0 > (i = chunk.indexOf(NEWLINE)) && len < lineLimit && p < buffer2.byteLength) {\n            s += chunk;\n            len += chunk.length;\n            p += chunkSize;\n            chunk += String.fromCharCode.apply(null, new Uint16Array(buffer2.subarray(p, p + chunkSize)));\n          }\n          if (-1 < i) {\n            if (false !== consume) buffer2.pos += len + i + 1;\n            return s + chunk.slice(0, i);\n          }\n          return false;\n        },\n        RGBE_ReadHeader = function RGBE_ReadHeader(buffer2) {\n          var magic_token_re = /^#\\?(\\S+)/,\n            gamma_re = /^\\s*GAMMA\\s*=\\s*(\\d+(\\.\\d+)?)\\s*$/,\n            exposure_re = /^\\s*EXPOSURE\\s*=\\s*(\\d+(\\.\\d+)?)\\s*$/,\n            format_re = /^\\s*FORMAT=(\\S+)\\s*$/,\n            dimensions_re = /^\\s*\\-Y\\s+(\\d+)\\s+\\+X\\s+(\\d+)\\s*$/,\n            header = {\n              valid: 0,\n              string: \"\",\n              comments: \"\",\n              programtype: \"RGBE\",\n              format: \"\",\n              gamma: 1,\n              exposure: 1,\n              width: 0,\n              height: 0\n            };\n          var line, match;\n          if (buffer2.pos >= buffer2.byteLength || !(line = fgets(buffer2))) {\n            return rgbe_error(rgbe_read_error, \"no header found\");\n          }\n          if (!(match = line.match(magic_token_re))) {\n            return rgbe_error(rgbe_format_error, \"bad initial token\");\n          }\n          header.valid |= RGBE_VALID_PROGRAMTYPE;\n          header.programtype = match[1];\n          header.string += line + \"\\n\";\n          while (true) {\n            line = fgets(buffer2);\n            if (false === line) break;\n            header.string += line + \"\\n\";\n            if (\"#\" === line.charAt(0)) {\n              header.comments += line + \"\\n\";\n              continue;\n            }\n            if (match = line.match(gamma_re)) {\n              header.gamma = parseFloat(match[1]);\n            }\n            if (match = line.match(exposure_re)) {\n              header.exposure = parseFloat(match[1]);\n            }\n            if (match = line.match(format_re)) {\n              header.valid |= RGBE_VALID_FORMAT;\n              header.format = match[1];\n            }\n            if (match = line.match(dimensions_re)) {\n              header.valid |= RGBE_VALID_DIMENSIONS;\n              header.height = parseInt(match[1], 10);\n              header.width = parseInt(match[2], 10);\n            }\n            if (header.valid & RGBE_VALID_FORMAT && header.valid & RGBE_VALID_DIMENSIONS) break;\n          }\n          if (!(header.valid & RGBE_VALID_FORMAT)) {\n            return rgbe_error(rgbe_format_error, \"missing format specifier\");\n          }\n          if (!(header.valid & RGBE_VALID_DIMENSIONS)) {\n            return rgbe_error(rgbe_format_error, \"missing image size specifier\");\n          }\n          return header;\n        },\n        RGBE_ReadPixels_RLE = function RGBE_ReadPixels_RLE(buffer2, w, h) {\n          var scanline_width = w;\n          if (\n          // run length encoding is not allowed so read flat\n          scanline_width < 8 || scanline_width > 32767 ||\n          // this file is not run length encoded\n          2 !== buffer2[0] || 2 !== buffer2[1] || buffer2[2] & 128) {\n            return new Uint8Array(buffer2);\n          }\n          if (scanline_width !== (buffer2[2] << 8 | buffer2[3])) {\n            return rgbe_error(rgbe_format_error, \"wrong scanline width\");\n          }\n          var data_rgba = new Uint8Array(4 * w * h);\n          if (!data_rgba.length) {\n            return rgbe_error(rgbe_memory_error, \"unable to allocate buffer space\");\n          }\n          var offset = 0,\n            pos = 0;\n          var ptr_end = 4 * scanline_width;\n          var rgbeStart = new Uint8Array(4);\n          var scanline_buffer = new Uint8Array(ptr_end);\n          var num_scanlines = h;\n          while (num_scanlines > 0 && pos < buffer2.byteLength) {\n            if (pos + 4 > buffer2.byteLength) {\n              return rgbe_error(rgbe_read_error);\n            }\n            rgbeStart[0] = buffer2[pos++];\n            rgbeStart[1] = buffer2[pos++];\n            rgbeStart[2] = buffer2[pos++];\n            rgbeStart[3] = buffer2[pos++];\n            if (2 != rgbeStart[0] || 2 != rgbeStart[1] || (rgbeStart[2] << 8 | rgbeStart[3]) != scanline_width) {\n              return rgbe_error(rgbe_format_error, \"bad rgbe scanline format\");\n            }\n            var ptr = 0,\n              count = void 0;\n            while (ptr < ptr_end && pos < buffer2.byteLength) {\n              count = buffer2[pos++];\n              var isEncodedRun = count > 128;\n              if (isEncodedRun) count -= 128;\n              if (0 === count || ptr + count > ptr_end) {\n                return rgbe_error(rgbe_format_error, \"bad scanline data\");\n              }\n              if (isEncodedRun) {\n                var byteValue = buffer2[pos++];\n                for (var i = 0; i < count; i++) {\n                  scanline_buffer[ptr++] = byteValue;\n                }\n              } else {\n                scanline_buffer.set(buffer2.subarray(pos, pos + count), ptr);\n                ptr += count;\n                pos += count;\n              }\n            }\n            var l = scanline_width;\n            for (var _i = 0; _i < l; _i++) {\n              var off = 0;\n              data_rgba[offset] = scanline_buffer[_i + off];\n              off += scanline_width;\n              data_rgba[offset + 1] = scanline_buffer[_i + off];\n              off += scanline_width;\n              data_rgba[offset + 2] = scanline_buffer[_i + off];\n              off += scanline_width;\n              data_rgba[offset + 3] = scanline_buffer[_i + off];\n              offset += 4;\n            }\n            num_scanlines--;\n          }\n          return data_rgba;\n        };\n      var RGBEByteToRGBFloat = function RGBEByteToRGBFloat(sourceArray, sourceOffset, destArray, destOffset) {\n        var e = sourceArray[sourceOffset + 3];\n        var scale = Math.pow(2, e - 128) / 255;\n        destArray[destOffset + 0] = sourceArray[sourceOffset + 0] * scale;\n        destArray[destOffset + 1] = sourceArray[sourceOffset + 1] * scale;\n        destArray[destOffset + 2] = sourceArray[sourceOffset + 2] * scale;\n        destArray[destOffset + 3] = 1;\n      };\n      var RGBEByteToRGBHalf = function RGBEByteToRGBHalf(sourceArray, sourceOffset, destArray, destOffset) {\n        var e = sourceArray[sourceOffset + 3];\n        var scale = Math.pow(2, e - 128) / 255;\n        destArray[destOffset + 0] = DataUtils.toHalfFloat(Math.min(sourceArray[sourceOffset + 0] * scale, 65504));\n        destArray[destOffset + 1] = DataUtils.toHalfFloat(Math.min(sourceArray[sourceOffset + 1] * scale, 65504));\n        destArray[destOffset + 2] = DataUtils.toHalfFloat(Math.min(sourceArray[sourceOffset + 2] * scale, 65504));\n        destArray[destOffset + 3] = DataUtils.toHalfFloat(1);\n      };\n      var byteArray = new Uint8Array(buffer);\n      byteArray.pos = 0;\n      var rgbe_header_info = RGBE_ReadHeader(byteArray);\n      if (RGBE_RETURN_FAILURE !== rgbe_header_info) {\n        var w = rgbe_header_info.width,\n          h = rgbe_header_info.height,\n          image_rgba_data = RGBE_ReadPixels_RLE(byteArray.subarray(byteArray.pos), w, h);\n        if (RGBE_RETURN_FAILURE !== image_rgba_data) {\n          var data, type;\n          var numElements;\n          switch (this.type) {\n            case FloatType:\n              numElements = image_rgba_data.length / 4;\n              var floatArray = new Float32Array(numElements * 4);\n              for (var j = 0; j < numElements; j++) {\n                RGBEByteToRGBFloat(image_rgba_data, j * 4, floatArray, j * 4);\n              }\n              data = floatArray;\n              type = FloatType;\n              break;\n            case HalfFloatType:\n              numElements = image_rgba_data.length / 4;\n              var halfArray = new Uint16Array(numElements * 4);\n              for (var _j = 0; _j < numElements; _j++) {\n                RGBEByteToRGBHalf(image_rgba_data, _j * 4, halfArray, _j * 4);\n              }\n              data = halfArray;\n              type = HalfFloatType;\n              break;\n            default:\n              console.error(\"THREE.RGBELoader: unsupported type: \", this.type);\n              break;\n          }\n          return {\n            width: w,\n            height: h,\n            data: data,\n            header: rgbe_header_info.string,\n            gamma: rgbe_header_info.gamma,\n            exposure: rgbe_header_info.exposure,\n            type: type\n          };\n        }\n      }\n      return null;\n    }\n  }, {\n    key: \"setDataType\",\n    value: function setDataType(value) {\n      this.type = value;\n      return this;\n    }\n  }, {\n    key: \"load\",\n    value: function load(url, onLoad, onProgress, onError) {\n      function onLoadCallback(texture, texData) {\n        switch (texture.type) {\n          case FloatType:\n          case HalfFloatType:\n            if (\"colorSpace\" in texture) texture.colorSpace = \"srgb-linear\";else texture.encoding = 3e3;\n            texture.minFilter = LinearFilter;\n            texture.magFilter = LinearFilter;\n            texture.generateMipmaps = false;\n            texture.flipY = true;\n            break;\n        }\n        if (onLoad) onLoad(texture, texData);\n      }\n      return _get(_getPrototypeOf(RGBELoader.prototype), \"load\", this).call(this, url, onLoadCallback, onProgress, onError);\n    }\n  }]);\n  return RGBELoader;\n}(DataTextureLoader);\nexport { RGBELoader };","map":{"version":3,"names":["DataTextureLoader","HalfFloatType","DataUtils","FloatType","LinearFilter","RGBELoader","_DataTextureLoader","_inherits","_super","_createSuper","manager","_this","_classCallCheck","call","type","_createClass","key","value","parse","buffer","RGBE_RETURN_FAILURE","rgbe_read_error","rgbe_write_error","rgbe_format_error","rgbe_memory_error","rgbe_error","rgbe_error_code","msg","console","error","RGBE_VALID_PROGRAMTYPE","RGBE_VALID_FORMAT","RGBE_VALID_DIMENSIONS","NEWLINE","fgets","buffer2","lineLimit","consume","chunkSize","p","pos","i","len","s","chunk","String","fromCharCode","apply","Uint16Array","subarray","indexOf","byteLength","length","slice","RGBE_ReadHeader","magic_token_re","gamma_re","exposure_re","format_re","dimensions_re","header","valid","string","comments","programtype","format","gamma","exposure","width","height","line","match","charAt","parseFloat","parseInt","RGBE_ReadPixels_RLE","w","h","scanline_width","Uint8Array","data_rgba","offset","ptr_end","rgbeStart","scanline_buffer","num_scanlines","ptr","count","isEncodedRun","byteValue","set","l","off","RGBEByteToRGBFloat","sourceArray","sourceOffset","destArray","destOffset","e","scale","Math","pow","RGBEByteToRGBHalf","toHalfFloat","min","byteArray","rgbe_header_info","image_rgba_data","data","numElements","floatArray","Float32Array","j","halfArray","setDataType","load","url","onLoad","onProgress","onError","onLoadCallback","texture","texData","colorSpace","encoding","minFilter","magFilter","generateMipmaps","flipY","_get","_getPrototypeOf","prototype"],"sources":["/home/krug/Coding/JavaScript/Websites/Personal/personal/node_modules/.pnpm/three-stdlib@2.23.7_three@0.151.3/node_modules/three-stdlib/loaders/RGBELoader.js"],"sourcesContent":["import { DataTextureLoader, HalfFloatType, DataUtils, FloatType, LinearFilter } from \"three\";\nclass RGBELoader extends DataTextureLoader {\n  constructor(manager) {\n    super(manager);\n    this.type = HalfFloatType;\n  }\n  // adapted from http://www.graphics.cornell.edu/~bjw/rgbe.html\n  parse(buffer) {\n    const RGBE_RETURN_FAILURE = -1, rgbe_read_error = 1, rgbe_write_error = 2, rgbe_format_error = 3, rgbe_memory_error = 4, rgbe_error = function(rgbe_error_code, msg) {\n      switch (rgbe_error_code) {\n        case rgbe_read_error:\n          console.error(\"THREE.RGBELoader Read Error: \" + (msg || \"\"));\n          break;\n        case rgbe_write_error:\n          console.error(\"THREE.RGBELoader Write Error: \" + (msg || \"\"));\n          break;\n        case rgbe_format_error:\n          console.error(\"THREE.RGBELoader Bad File Format: \" + (msg || \"\"));\n          break;\n        default:\n        case rgbe_memory_error:\n          console.error(\"THREE.RGBELoader: Error: \" + (msg || \"\"));\n      }\n      return RGBE_RETURN_FAILURE;\n    }, RGBE_VALID_PROGRAMTYPE = 1, RGBE_VALID_FORMAT = 2, RGBE_VALID_DIMENSIONS = 4, NEWLINE = \"\\n\", fgets = function(buffer2, lineLimit, consume) {\n      const chunkSize = 128;\n      lineLimit = !lineLimit ? 1024 : lineLimit;\n      let p = buffer2.pos, i = -1, len = 0, s = \"\", chunk = String.fromCharCode.apply(null, new Uint16Array(buffer2.subarray(p, p + chunkSize)));\n      while (0 > (i = chunk.indexOf(NEWLINE)) && len < lineLimit && p < buffer2.byteLength) {\n        s += chunk;\n        len += chunk.length;\n        p += chunkSize;\n        chunk += String.fromCharCode.apply(null, new Uint16Array(buffer2.subarray(p, p + chunkSize)));\n      }\n      if (-1 < i) {\n        if (false !== consume)\n          buffer2.pos += len + i + 1;\n        return s + chunk.slice(0, i);\n      }\n      return false;\n    }, RGBE_ReadHeader = function(buffer2) {\n      const magic_token_re = /^#\\?(\\S+)/, gamma_re = /^\\s*GAMMA\\s*=\\s*(\\d+(\\.\\d+)?)\\s*$/, exposure_re = /^\\s*EXPOSURE\\s*=\\s*(\\d+(\\.\\d+)?)\\s*$/, format_re = /^\\s*FORMAT=(\\S+)\\s*$/, dimensions_re = /^\\s*\\-Y\\s+(\\d+)\\s+\\+X\\s+(\\d+)\\s*$/, header = {\n        valid: 0,\n        string: \"\",\n        comments: \"\",\n        programtype: \"RGBE\",\n        format: \"\",\n        gamma: 1,\n        exposure: 1,\n        width: 0,\n        height: 0\n      };\n      let line, match;\n      if (buffer2.pos >= buffer2.byteLength || !(line = fgets(buffer2))) {\n        return rgbe_error(rgbe_read_error, \"no header found\");\n      }\n      if (!(match = line.match(magic_token_re))) {\n        return rgbe_error(rgbe_format_error, \"bad initial token\");\n      }\n      header.valid |= RGBE_VALID_PROGRAMTYPE;\n      header.programtype = match[1];\n      header.string += line + \"\\n\";\n      while (true) {\n        line = fgets(buffer2);\n        if (false === line)\n          break;\n        header.string += line + \"\\n\";\n        if (\"#\" === line.charAt(0)) {\n          header.comments += line + \"\\n\";\n          continue;\n        }\n        if (match = line.match(gamma_re)) {\n          header.gamma = parseFloat(match[1]);\n        }\n        if (match = line.match(exposure_re)) {\n          header.exposure = parseFloat(match[1]);\n        }\n        if (match = line.match(format_re)) {\n          header.valid |= RGBE_VALID_FORMAT;\n          header.format = match[1];\n        }\n        if (match = line.match(dimensions_re)) {\n          header.valid |= RGBE_VALID_DIMENSIONS;\n          header.height = parseInt(match[1], 10);\n          header.width = parseInt(match[2], 10);\n        }\n        if (header.valid & RGBE_VALID_FORMAT && header.valid & RGBE_VALID_DIMENSIONS)\n          break;\n      }\n      if (!(header.valid & RGBE_VALID_FORMAT)) {\n        return rgbe_error(rgbe_format_error, \"missing format specifier\");\n      }\n      if (!(header.valid & RGBE_VALID_DIMENSIONS)) {\n        return rgbe_error(rgbe_format_error, \"missing image size specifier\");\n      }\n      return header;\n    }, RGBE_ReadPixels_RLE = function(buffer2, w, h) {\n      const scanline_width = w;\n      if (\n        // run length encoding is not allowed so read flat\n        scanline_width < 8 || scanline_width > 32767 || // this file is not run length encoded\n        2 !== buffer2[0] || 2 !== buffer2[1] || buffer2[2] & 128\n      ) {\n        return new Uint8Array(buffer2);\n      }\n      if (scanline_width !== (buffer2[2] << 8 | buffer2[3])) {\n        return rgbe_error(rgbe_format_error, \"wrong scanline width\");\n      }\n      const data_rgba = new Uint8Array(4 * w * h);\n      if (!data_rgba.length) {\n        return rgbe_error(rgbe_memory_error, \"unable to allocate buffer space\");\n      }\n      let offset = 0, pos = 0;\n      const ptr_end = 4 * scanline_width;\n      const rgbeStart = new Uint8Array(4);\n      const scanline_buffer = new Uint8Array(ptr_end);\n      let num_scanlines = h;\n      while (num_scanlines > 0 && pos < buffer2.byteLength) {\n        if (pos + 4 > buffer2.byteLength) {\n          return rgbe_error(rgbe_read_error);\n        }\n        rgbeStart[0] = buffer2[pos++];\n        rgbeStart[1] = buffer2[pos++];\n        rgbeStart[2] = buffer2[pos++];\n        rgbeStart[3] = buffer2[pos++];\n        if (2 != rgbeStart[0] || 2 != rgbeStart[1] || (rgbeStart[2] << 8 | rgbeStart[3]) != scanline_width) {\n          return rgbe_error(rgbe_format_error, \"bad rgbe scanline format\");\n        }\n        let ptr = 0, count;\n        while (ptr < ptr_end && pos < buffer2.byteLength) {\n          count = buffer2[pos++];\n          const isEncodedRun = count > 128;\n          if (isEncodedRun)\n            count -= 128;\n          if (0 === count || ptr + count > ptr_end) {\n            return rgbe_error(rgbe_format_error, \"bad scanline data\");\n          }\n          if (isEncodedRun) {\n            const byteValue = buffer2[pos++];\n            for (let i = 0; i < count; i++) {\n              scanline_buffer[ptr++] = byteValue;\n            }\n          } else {\n            scanline_buffer.set(buffer2.subarray(pos, pos + count), ptr);\n            ptr += count;\n            pos += count;\n          }\n        }\n        const l = scanline_width;\n        for (let i = 0; i < l; i++) {\n          let off = 0;\n          data_rgba[offset] = scanline_buffer[i + off];\n          off += scanline_width;\n          data_rgba[offset + 1] = scanline_buffer[i + off];\n          off += scanline_width;\n          data_rgba[offset + 2] = scanline_buffer[i + off];\n          off += scanline_width;\n          data_rgba[offset + 3] = scanline_buffer[i + off];\n          offset += 4;\n        }\n        num_scanlines--;\n      }\n      return data_rgba;\n    };\n    const RGBEByteToRGBFloat = function(sourceArray, sourceOffset, destArray, destOffset) {\n      const e = sourceArray[sourceOffset + 3];\n      const scale = Math.pow(2, e - 128) / 255;\n      destArray[destOffset + 0] = sourceArray[sourceOffset + 0] * scale;\n      destArray[destOffset + 1] = sourceArray[sourceOffset + 1] * scale;\n      destArray[destOffset + 2] = sourceArray[sourceOffset + 2] * scale;\n      destArray[destOffset + 3] = 1;\n    };\n    const RGBEByteToRGBHalf = function(sourceArray, sourceOffset, destArray, destOffset) {\n      const e = sourceArray[sourceOffset + 3];\n      const scale = Math.pow(2, e - 128) / 255;\n      destArray[destOffset + 0] = DataUtils.toHalfFloat(Math.min(sourceArray[sourceOffset + 0] * scale, 65504));\n      destArray[destOffset + 1] = DataUtils.toHalfFloat(Math.min(sourceArray[sourceOffset + 1] * scale, 65504));\n      destArray[destOffset + 2] = DataUtils.toHalfFloat(Math.min(sourceArray[sourceOffset + 2] * scale, 65504));\n      destArray[destOffset + 3] = DataUtils.toHalfFloat(1);\n    };\n    const byteArray = new Uint8Array(buffer);\n    byteArray.pos = 0;\n    const rgbe_header_info = RGBE_ReadHeader(byteArray);\n    if (RGBE_RETURN_FAILURE !== rgbe_header_info) {\n      const w = rgbe_header_info.width, h = rgbe_header_info.height, image_rgba_data = RGBE_ReadPixels_RLE(byteArray.subarray(byteArray.pos), w, h);\n      if (RGBE_RETURN_FAILURE !== image_rgba_data) {\n        let data, type;\n        let numElements;\n        switch (this.type) {\n          case FloatType:\n            numElements = image_rgba_data.length / 4;\n            const floatArray = new Float32Array(numElements * 4);\n            for (let j = 0; j < numElements; j++) {\n              RGBEByteToRGBFloat(image_rgba_data, j * 4, floatArray, j * 4);\n            }\n            data = floatArray;\n            type = FloatType;\n            break;\n          case HalfFloatType:\n            numElements = image_rgba_data.length / 4;\n            const halfArray = new Uint16Array(numElements * 4);\n            for (let j = 0; j < numElements; j++) {\n              RGBEByteToRGBHalf(image_rgba_data, j * 4, halfArray, j * 4);\n            }\n            data = halfArray;\n            type = HalfFloatType;\n            break;\n          default:\n            console.error(\"THREE.RGBELoader: unsupported type: \", this.type);\n            break;\n        }\n        return {\n          width: w,\n          height: h,\n          data,\n          header: rgbe_header_info.string,\n          gamma: rgbe_header_info.gamma,\n          exposure: rgbe_header_info.exposure,\n          type\n        };\n      }\n    }\n    return null;\n  }\n  setDataType(value) {\n    this.type = value;\n    return this;\n  }\n  load(url, onLoad, onProgress, onError) {\n    function onLoadCallback(texture, texData) {\n      switch (texture.type) {\n        case FloatType:\n        case HalfFloatType:\n          if (\"colorSpace\" in texture)\n            texture.colorSpace = \"srgb-linear\";\n          else\n            texture.encoding = 3e3;\n          texture.minFilter = LinearFilter;\n          texture.magFilter = LinearFilter;\n          texture.generateMipmaps = false;\n          texture.flipY = true;\n          break;\n      }\n      if (onLoad)\n        onLoad(texture, texData);\n    }\n    return super.load(url, onLoadCallback, onProgress, onError);\n  }\n}\nexport {\n  RGBELoader\n};\n"],"mappings":";;;;;;AAAA,SAASA,iBAAiB,EAAEC,aAAa,EAAEC,SAAS,EAAEC,SAAS,EAAEC,YAAY,QAAQ,OAAO;AAAC,IACvFC,UAAU,0BAAAC,kBAAA;EAAAC,SAAA,CAAAF,UAAA,EAAAC,kBAAA;EAAA,IAAAE,MAAA,GAAAC,YAAA,CAAAJ,UAAA;EACd,SAAAA,WAAYK,OAAO,EAAE;IAAA,IAAAC,KAAA;IAAAC,eAAA,OAAAP,UAAA;IACnBM,KAAA,GAAAH,MAAA,CAAAK,IAAA,OAAMH,OAAO;IACbC,KAAA,CAAKG,IAAI,GAAGb,aAAa;IAAC,OAAAU,KAAA;EAC5B;EACA;EAAAI,YAAA,CAAAV,UAAA;IAAAW,GAAA;IAAAC,KAAA,EACA,SAAAC,MAAMC,MAAM,EAAE;MACZ,IAAMC,mBAAmB,GAAG,CAAC,CAAC;QAAEC,eAAe,GAAG,CAAC;QAAEC,gBAAgB,GAAG,CAAC;QAAEC,iBAAiB,GAAG,CAAC;QAAEC,iBAAiB,GAAG,CAAC;QAAEC,UAAU,GAAG,SAAbA,UAAUA,CAAYC,eAAe,EAAEC,GAAG,EAAE;UACnK,QAAQD,eAAe;YACrB,KAAKL,eAAe;cAClBO,OAAO,CAACC,KAAK,CAAC,+BAA+B,IAAIF,GAAG,IAAI,EAAE,CAAC,CAAC;cAC5D;YACF,KAAKL,gBAAgB;cACnBM,OAAO,CAACC,KAAK,CAAC,gCAAgC,IAAIF,GAAG,IAAI,EAAE,CAAC,CAAC;cAC7D;YACF,KAAKJ,iBAAiB;cACpBK,OAAO,CAACC,KAAK,CAAC,oCAAoC,IAAIF,GAAG,IAAI,EAAE,CAAC,CAAC;cACjE;YACF;YACA,KAAKH,iBAAiB;cACpBI,OAAO,CAACC,KAAK,CAAC,2BAA2B,IAAIF,GAAG,IAAI,EAAE,CAAC,CAAC;UAC5D;UACA,OAAOP,mBAAmB;QAC5B,CAAC;QAAEU,sBAAsB,GAAG,CAAC;QAAEC,iBAAiB,GAAG,CAAC;QAAEC,qBAAqB,GAAG,CAAC;QAAEC,OAAO,GAAG,IAAI;QAAEC,KAAK,GAAG,SAARA,KAAKA,CAAYC,OAAO,EAAEC,SAAS,EAAEC,OAAO,EAAE;UAC7I,IAAMC,SAAS,GAAG,GAAG;UACrBF,SAAS,GAAG,CAACA,SAAS,GAAG,IAAI,GAAGA,SAAS;UACzC,IAAIG,CAAC,GAAGJ,OAAO,CAACK,GAAG;YAAEC,CAAC,GAAG,CAAC,CAAC;YAAEC,GAAG,GAAG,CAAC;YAAEC,CAAC,GAAG,EAAE;YAAEC,KAAK,GAAGC,MAAM,CAACC,YAAY,CAACC,KAAK,CAAC,IAAI,EAAE,IAAIC,WAAW,CAACb,OAAO,CAACc,QAAQ,CAACV,CAAC,EAAEA,CAAC,GAAGD,SAAS,CAAC,CAAC,CAAC;UAC1I,OAAO,CAAC,IAAIG,CAAC,GAAGG,KAAK,CAACM,OAAO,CAACjB,OAAO,CAAC,CAAC,IAAIS,GAAG,GAAGN,SAAS,IAAIG,CAAC,GAAGJ,OAAO,CAACgB,UAAU,EAAE;YACpFR,CAAC,IAAIC,KAAK;YACVF,GAAG,IAAIE,KAAK,CAACQ,MAAM;YACnBb,CAAC,IAAID,SAAS;YACdM,KAAK,IAAIC,MAAM,CAACC,YAAY,CAACC,KAAK,CAAC,IAAI,EAAE,IAAIC,WAAW,CAACb,OAAO,CAACc,QAAQ,CAACV,CAAC,EAAEA,CAAC,GAAGD,SAAS,CAAC,CAAC,CAAC;UAC/F;UACA,IAAI,CAAC,CAAC,GAAGG,CAAC,EAAE;YACV,IAAI,KAAK,KAAKJ,OAAO,EACnBF,OAAO,CAACK,GAAG,IAAIE,GAAG,GAAGD,CAAC,GAAG,CAAC;YAC5B,OAAOE,CAAC,GAAGC,KAAK,CAACS,KAAK,CAAC,CAAC,EAAEZ,CAAC,CAAC;UAC9B;UACA,OAAO,KAAK;QACd,CAAC;QAAEa,eAAe,GAAG,SAAlBA,eAAeA,CAAYnB,OAAO,EAAE;UACrC,IAAMoB,cAAc,GAAG,WAAW;YAAEC,QAAQ,GAAG,mCAAmC;YAAEC,WAAW,GAAG,sCAAsC;YAAEC,SAAS,GAAG,sBAAsB;YAAEC,aAAa,GAAG,mCAAmC;YAAEC,MAAM,GAAG;cAC1OC,KAAK,EAAE,CAAC;cACRC,MAAM,EAAE,EAAE;cACVC,QAAQ,EAAE,EAAE;cACZC,WAAW,EAAE,MAAM;cACnBC,MAAM,EAAE,EAAE;cACVC,KAAK,EAAE,CAAC;cACRC,QAAQ,EAAE,CAAC;cACXC,KAAK,EAAE,CAAC;cACRC,MAAM,EAAE;YACV,CAAC;UACD,IAAIC,IAAI,EAAEC,KAAK;UACf,IAAIpC,OAAO,CAACK,GAAG,IAAIL,OAAO,CAACgB,UAAU,IAAI,EAAEmB,IAAI,GAAGpC,KAAK,CAACC,OAAO,CAAC,CAAC,EAAE;YACjE,OAAOV,UAAU,CAACJ,eAAe,EAAE,iBAAiB,CAAC;UACvD;UACA,IAAI,EAAEkD,KAAK,GAAGD,IAAI,CAACC,KAAK,CAAChB,cAAc,CAAC,CAAC,EAAE;YACzC,OAAO9B,UAAU,CAACF,iBAAiB,EAAE,mBAAmB,CAAC;UAC3D;UACAqC,MAAM,CAACC,KAAK,IAAI/B,sBAAsB;UACtC8B,MAAM,CAACI,WAAW,GAAGO,KAAK,CAAC,CAAC,CAAC;UAC7BX,MAAM,CAACE,MAAM,IAAIQ,IAAI,GAAG,IAAI;UAC5B,OAAO,IAAI,EAAE;YACXA,IAAI,GAAGpC,KAAK,CAACC,OAAO,CAAC;YACrB,IAAI,KAAK,KAAKmC,IAAI,EAChB;YACFV,MAAM,CAACE,MAAM,IAAIQ,IAAI,GAAG,IAAI;YAC5B,IAAI,GAAG,KAAKA,IAAI,CAACE,MAAM,CAAC,CAAC,CAAC,EAAE;cAC1BZ,MAAM,CAACG,QAAQ,IAAIO,IAAI,GAAG,IAAI;cAC9B;YACF;YACA,IAAIC,KAAK,GAAGD,IAAI,CAACC,KAAK,CAACf,QAAQ,CAAC,EAAE;cAChCI,MAAM,CAACM,KAAK,GAAGO,UAAU,CAACF,KAAK,CAAC,CAAC,CAAC,CAAC;YACrC;YACA,IAAIA,KAAK,GAAGD,IAAI,CAACC,KAAK,CAACd,WAAW,CAAC,EAAE;cACnCG,MAAM,CAACO,QAAQ,GAAGM,UAAU,CAACF,KAAK,CAAC,CAAC,CAAC,CAAC;YACxC;YACA,IAAIA,KAAK,GAAGD,IAAI,CAACC,KAAK,CAACb,SAAS,CAAC,EAAE;cACjCE,MAAM,CAACC,KAAK,IAAI9B,iBAAiB;cACjC6B,MAAM,CAACK,MAAM,GAAGM,KAAK,CAAC,CAAC,CAAC;YAC1B;YACA,IAAIA,KAAK,GAAGD,IAAI,CAACC,KAAK,CAACZ,aAAa,CAAC,EAAE;cACrCC,MAAM,CAACC,KAAK,IAAI7B,qBAAqB;cACrC4B,MAAM,CAACS,MAAM,GAAGK,QAAQ,CAACH,KAAK,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC;cACtCX,MAAM,CAACQ,KAAK,GAAGM,QAAQ,CAACH,KAAK,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC;YACvC;YACA,IAAIX,MAAM,CAACC,KAAK,GAAG9B,iBAAiB,IAAI6B,MAAM,CAACC,KAAK,GAAG7B,qBAAqB,EAC1E;UACJ;UACA,IAAI,EAAE4B,MAAM,CAACC,KAAK,GAAG9B,iBAAiB,CAAC,EAAE;YACvC,OAAON,UAAU,CAACF,iBAAiB,EAAE,0BAA0B,CAAC;UAClE;UACA,IAAI,EAAEqC,MAAM,CAACC,KAAK,GAAG7B,qBAAqB,CAAC,EAAE;YAC3C,OAAOP,UAAU,CAACF,iBAAiB,EAAE,8BAA8B,CAAC;UACtE;UACA,OAAOqC,MAAM;QACf,CAAC;QAAEe,mBAAmB,GAAG,SAAtBA,mBAAmBA,CAAYxC,OAAO,EAAEyC,CAAC,EAAEC,CAAC,EAAE;UAC/C,IAAMC,cAAc,GAAGF,CAAC;UACxB;UACE;UACAE,cAAc,GAAG,CAAC,IAAIA,cAAc,GAAG,KAAK;UAAI;UAChD,CAAC,KAAK3C,OAAO,CAAC,CAAC,CAAC,IAAI,CAAC,KAAKA,OAAO,CAAC,CAAC,CAAC,IAAIA,OAAO,CAAC,CAAC,CAAC,GAAG,GAAG,EACxD;YACA,OAAO,IAAI4C,UAAU,CAAC5C,OAAO,CAAC;UAChC;UACA,IAAI2C,cAAc,MAAM3C,OAAO,CAAC,CAAC,CAAC,IAAI,CAAC,GAAGA,OAAO,CAAC,CAAC,CAAC,CAAC,EAAE;YACrD,OAAOV,UAAU,CAACF,iBAAiB,EAAE,sBAAsB,CAAC;UAC9D;UACA,IAAMyD,SAAS,GAAG,IAAID,UAAU,CAAC,CAAC,GAAGH,CAAC,GAAGC,CAAC,CAAC;UAC3C,IAAI,CAACG,SAAS,CAAC5B,MAAM,EAAE;YACrB,OAAO3B,UAAU,CAACD,iBAAiB,EAAE,iCAAiC,CAAC;UACzE;UACA,IAAIyD,MAAM,GAAG,CAAC;YAAEzC,GAAG,GAAG,CAAC;UACvB,IAAM0C,OAAO,GAAG,CAAC,GAAGJ,cAAc;UAClC,IAAMK,SAAS,GAAG,IAAIJ,UAAU,CAAC,CAAC,CAAC;UACnC,IAAMK,eAAe,GAAG,IAAIL,UAAU,CAACG,OAAO,CAAC;UAC/C,IAAIG,aAAa,GAAGR,CAAC;UACrB,OAAOQ,aAAa,GAAG,CAAC,IAAI7C,GAAG,GAAGL,OAAO,CAACgB,UAAU,EAAE;YACpD,IAAIX,GAAG,GAAG,CAAC,GAAGL,OAAO,CAACgB,UAAU,EAAE;cAChC,OAAO1B,UAAU,CAACJ,eAAe,CAAC;YACpC;YACA8D,SAAS,CAAC,CAAC,CAAC,GAAGhD,OAAO,CAACK,GAAG,EAAE,CAAC;YAC7B2C,SAAS,CAAC,CAAC,CAAC,GAAGhD,OAAO,CAACK,GAAG,EAAE,CAAC;YAC7B2C,SAAS,CAAC,CAAC,CAAC,GAAGhD,OAAO,CAACK,GAAG,EAAE,CAAC;YAC7B2C,SAAS,CAAC,CAAC,CAAC,GAAGhD,OAAO,CAACK,GAAG,EAAE,CAAC;YAC7B,IAAI,CAAC,IAAI2C,SAAS,CAAC,CAAC,CAAC,IAAI,CAAC,IAAIA,SAAS,CAAC,CAAC,CAAC,IAAI,CAACA,SAAS,CAAC,CAAC,CAAC,IAAI,CAAC,GAAGA,SAAS,CAAC,CAAC,CAAC,KAAKL,cAAc,EAAE;cAClG,OAAOrD,UAAU,CAACF,iBAAiB,EAAE,0BAA0B,CAAC;YAClE;YACA,IAAI+D,GAAG,GAAG,CAAC;cAAEC,KAAK;YAClB,OAAOD,GAAG,GAAGJ,OAAO,IAAI1C,GAAG,GAAGL,OAAO,CAACgB,UAAU,EAAE;cAChDoC,KAAK,GAAGpD,OAAO,CAACK,GAAG,EAAE,CAAC;cACtB,IAAMgD,YAAY,GAAGD,KAAK,GAAG,GAAG;cAChC,IAAIC,YAAY,EACdD,KAAK,IAAI,GAAG;cACd,IAAI,CAAC,KAAKA,KAAK,IAAID,GAAG,GAAGC,KAAK,GAAGL,OAAO,EAAE;gBACxC,OAAOzD,UAAU,CAACF,iBAAiB,EAAE,mBAAmB,CAAC;cAC3D;cACA,IAAIiE,YAAY,EAAE;gBAChB,IAAMC,SAAS,GAAGtD,OAAO,CAACK,GAAG,EAAE,CAAC;gBAChC,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG8C,KAAK,EAAE9C,CAAC,EAAE,EAAE;kBAC9B2C,eAAe,CAACE,GAAG,EAAE,CAAC,GAAGG,SAAS;gBACpC;cACF,CAAC,MAAM;gBACLL,eAAe,CAACM,GAAG,CAACvD,OAAO,CAACc,QAAQ,CAACT,GAAG,EAAEA,GAAG,GAAG+C,KAAK,CAAC,EAAED,GAAG,CAAC;gBAC5DA,GAAG,IAAIC,KAAK;gBACZ/C,GAAG,IAAI+C,KAAK;cACd;YACF;YACA,IAAMI,CAAC,GAAGb,cAAc;YACxB,KAAK,IAAIrC,EAAC,GAAG,CAAC,EAAEA,EAAC,GAAGkD,CAAC,EAAElD,EAAC,EAAE,EAAE;cAC1B,IAAImD,GAAG,GAAG,CAAC;cACXZ,SAAS,CAACC,MAAM,CAAC,GAAGG,eAAe,CAAC3C,EAAC,GAAGmD,GAAG,CAAC;cAC5CA,GAAG,IAAId,cAAc;cACrBE,SAAS,CAACC,MAAM,GAAG,CAAC,CAAC,GAAGG,eAAe,CAAC3C,EAAC,GAAGmD,GAAG,CAAC;cAChDA,GAAG,IAAId,cAAc;cACrBE,SAAS,CAACC,MAAM,GAAG,CAAC,CAAC,GAAGG,eAAe,CAAC3C,EAAC,GAAGmD,GAAG,CAAC;cAChDA,GAAG,IAAId,cAAc;cACrBE,SAAS,CAACC,MAAM,GAAG,CAAC,CAAC,GAAGG,eAAe,CAAC3C,EAAC,GAAGmD,GAAG,CAAC;cAChDX,MAAM,IAAI,CAAC;YACb;YACAI,aAAa,EAAE;UACjB;UACA,OAAOL,SAAS;QAClB,CAAC;MACD,IAAMa,kBAAkB,GAAG,SAArBA,kBAAkBA,CAAYC,WAAW,EAAEC,YAAY,EAAEC,SAAS,EAAEC,UAAU,EAAE;QACpF,IAAMC,CAAC,GAAGJ,WAAW,CAACC,YAAY,GAAG,CAAC,CAAC;QACvC,IAAMI,KAAK,GAAGC,IAAI,CAACC,GAAG,CAAC,CAAC,EAAEH,CAAC,GAAG,GAAG,CAAC,GAAG,GAAG;QACxCF,SAAS,CAACC,UAAU,GAAG,CAAC,CAAC,GAAGH,WAAW,CAACC,YAAY,GAAG,CAAC,CAAC,GAAGI,KAAK;QACjEH,SAAS,CAACC,UAAU,GAAG,CAAC,CAAC,GAAGH,WAAW,CAACC,YAAY,GAAG,CAAC,CAAC,GAAGI,KAAK;QACjEH,SAAS,CAACC,UAAU,GAAG,CAAC,CAAC,GAAGH,WAAW,CAACC,YAAY,GAAG,CAAC,CAAC,GAAGI,KAAK;QACjEH,SAAS,CAACC,UAAU,GAAG,CAAC,CAAC,GAAG,CAAC;MAC/B,CAAC;MACD,IAAMK,iBAAiB,GAAG,SAApBA,iBAAiBA,CAAYR,WAAW,EAAEC,YAAY,EAAEC,SAAS,EAAEC,UAAU,EAAE;QACnF,IAAMC,CAAC,GAAGJ,WAAW,CAACC,YAAY,GAAG,CAAC,CAAC;QACvC,IAAMI,KAAK,GAAGC,IAAI,CAACC,GAAG,CAAC,CAAC,EAAEH,CAAC,GAAG,GAAG,CAAC,GAAG,GAAG;QACxCF,SAAS,CAACC,UAAU,GAAG,CAAC,CAAC,GAAG/F,SAAS,CAACqG,WAAW,CAACH,IAAI,CAACI,GAAG,CAACV,WAAW,CAACC,YAAY,GAAG,CAAC,CAAC,GAAGI,KAAK,EAAE,KAAK,CAAC,CAAC;QACzGH,SAAS,CAACC,UAAU,GAAG,CAAC,CAAC,GAAG/F,SAAS,CAACqG,WAAW,CAACH,IAAI,CAACI,GAAG,CAACV,WAAW,CAACC,YAAY,GAAG,CAAC,CAAC,GAAGI,KAAK,EAAE,KAAK,CAAC,CAAC;QACzGH,SAAS,CAACC,UAAU,GAAG,CAAC,CAAC,GAAG/F,SAAS,CAACqG,WAAW,CAACH,IAAI,CAACI,GAAG,CAACV,WAAW,CAACC,YAAY,GAAG,CAAC,CAAC,GAAGI,KAAK,EAAE,KAAK,CAAC,CAAC;QACzGH,SAAS,CAACC,UAAU,GAAG,CAAC,CAAC,GAAG/F,SAAS,CAACqG,WAAW,CAAC,CAAC,CAAC;MACtD,CAAC;MACD,IAAME,SAAS,GAAG,IAAI1B,UAAU,CAAC5D,MAAM,CAAC;MACxCsF,SAAS,CAACjE,GAAG,GAAG,CAAC;MACjB,IAAMkE,gBAAgB,GAAGpD,eAAe,CAACmD,SAAS,CAAC;MACnD,IAAIrF,mBAAmB,KAAKsF,gBAAgB,EAAE;QAC5C,IAAM9B,CAAC,GAAG8B,gBAAgB,CAACtC,KAAK;UAAES,CAAC,GAAG6B,gBAAgB,CAACrC,MAAM;UAAEsC,eAAe,GAAGhC,mBAAmB,CAAC8B,SAAS,CAACxD,QAAQ,CAACwD,SAAS,CAACjE,GAAG,CAAC,EAAEoC,CAAC,EAAEC,CAAC,CAAC;QAC7I,IAAIzD,mBAAmB,KAAKuF,eAAe,EAAE;UAC3C,IAAIC,IAAI,EAAE9F,IAAI;UACd,IAAI+F,WAAW;UACf,QAAQ,IAAI,CAAC/F,IAAI;YACf,KAAKX,SAAS;cACZ0G,WAAW,GAAGF,eAAe,CAACvD,MAAM,GAAG,CAAC;cACxC,IAAM0D,UAAU,GAAG,IAAIC,YAAY,CAACF,WAAW,GAAG,CAAC,CAAC;cACpD,KAAK,IAAIG,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGH,WAAW,EAAEG,CAAC,EAAE,EAAE;gBACpCnB,kBAAkB,CAACc,eAAe,EAAEK,CAAC,GAAG,CAAC,EAAEF,UAAU,EAAEE,CAAC,GAAG,CAAC,CAAC;cAC/D;cACAJ,IAAI,GAAGE,UAAU;cACjBhG,IAAI,GAAGX,SAAS;cAChB;YACF,KAAKF,aAAa;cAChB4G,WAAW,GAAGF,eAAe,CAACvD,MAAM,GAAG,CAAC;cACxC,IAAM6D,SAAS,GAAG,IAAIjE,WAAW,CAAC6D,WAAW,GAAG,CAAC,CAAC;cAClD,KAAK,IAAIG,EAAC,GAAG,CAAC,EAAEA,EAAC,GAAGH,WAAW,EAAEG,EAAC,EAAE,EAAE;gBACpCV,iBAAiB,CAACK,eAAe,EAAEK,EAAC,GAAG,CAAC,EAAEC,SAAS,EAAED,EAAC,GAAG,CAAC,CAAC;cAC7D;cACAJ,IAAI,GAAGK,SAAS;cAChBnG,IAAI,GAAGb,aAAa;cACpB;YACF;cACE2B,OAAO,CAACC,KAAK,CAAC,sCAAsC,EAAE,IAAI,CAACf,IAAI,CAAC;cAChE;UACJ;UACA,OAAO;YACLsD,KAAK,EAAEQ,CAAC;YACRP,MAAM,EAAEQ,CAAC;YACT+B,IAAI,EAAJA,IAAI;YACJhD,MAAM,EAAE8C,gBAAgB,CAAC5C,MAAM;YAC/BI,KAAK,EAAEwC,gBAAgB,CAACxC,KAAK;YAC7BC,QAAQ,EAAEuC,gBAAgB,CAACvC,QAAQ;YACnCrD,IAAI,EAAJA;UACF,CAAC;QACH;MACF;MACA,OAAO,IAAI;IACb;EAAC;IAAAE,GAAA;IAAAC,KAAA,EACD,SAAAiG,YAAYjG,KAAK,EAAE;MACjB,IAAI,CAACH,IAAI,GAAGG,KAAK;MACjB,OAAO,IAAI;IACb;EAAC;IAAAD,GAAA;IAAAC,KAAA,EACD,SAAAkG,KAAKC,GAAG,EAAEC,MAAM,EAAEC,UAAU,EAAEC,OAAO,EAAE;MACrC,SAASC,cAAcA,CAACC,OAAO,EAAEC,OAAO,EAAE;QACxC,QAAQD,OAAO,CAAC3G,IAAI;UAClB,KAAKX,SAAS;UACd,KAAKF,aAAa;YAChB,IAAI,YAAY,IAAIwH,OAAO,EACzBA,OAAO,CAACE,UAAU,GAAG,aAAa,CAAC,KAEnCF,OAAO,CAACG,QAAQ,GAAG,GAAG;YACxBH,OAAO,CAACI,SAAS,GAAGzH,YAAY;YAChCqH,OAAO,CAACK,SAAS,GAAG1H,YAAY;YAChCqH,OAAO,CAACM,eAAe,GAAG,KAAK;YAC/BN,OAAO,CAACO,KAAK,GAAG,IAAI;YACpB;QACJ;QACA,IAAIX,MAAM,EACRA,MAAM,CAACI,OAAO,EAAEC,OAAO,CAAC;MAC5B;MACA,OAAAO,IAAA,CAAAC,eAAA,CAAA7H,UAAA,CAAA8H,SAAA,iBAAAtH,IAAA,OAAkBuG,GAAG,EAAEI,cAAc,EAAEF,UAAU,EAAEC,OAAO;IAC5D;EAAC;EAAA,OAAAlH,UAAA;AAAA,EAtPsBL,iBAAiB;AAwP1C,SACEK,UAAU"},"metadata":{},"sourceType":"module","externalDependencies":[]}