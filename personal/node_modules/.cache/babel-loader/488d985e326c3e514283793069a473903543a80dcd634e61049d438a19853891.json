{"ast":null,"code":"import _classCallCheck from \"/home/krug/Coding/JavaScript/Websites/Personal/personal/node_modules/.pnpm/@babel+runtime@7.22.3/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/home/krug/Coding/JavaScript/Websites/Personal/personal/node_modules/.pnpm/@babel+runtime@7.22.3/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"/home/krug/Coding/JavaScript/Websites/Personal/personal/node_modules/.pnpm/@babel+runtime@7.22.3/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/home/krug/Coding/JavaScript/Websites/Personal/personal/node_modules/.pnpm/@babel+runtime@7.22.3/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { Loader, FileLoader, Vector3, Quaternion, Bone, VectorKeyframeTrack, QuaternionKeyframeTrack, AnimationClip, Skeleton } from \"three\";\nvar BVHLoader = /*#__PURE__*/function (_Loader) {\n  _inherits(BVHLoader, _Loader);\n  var _super = _createSuper(BVHLoader);\n  function BVHLoader(manager) {\n    var _this;\n    _classCallCheck(this, BVHLoader);\n    _this = _super.call(this, manager);\n    _this.animateBonePositions = true;\n    _this.animateBoneRotations = true;\n    return _this;\n  }\n  _createClass(BVHLoader, [{\n    key: \"load\",\n    value: function load(url, onLoad, onProgress, onError) {\n      var scope = this;\n      var loader = new FileLoader(scope.manager);\n      loader.setPath(scope.path);\n      loader.setRequestHeader(scope.requestHeader);\n      loader.setWithCredentials(scope.withCredentials);\n      loader.load(url, function (text) {\n        try {\n          onLoad(scope.parse(text));\n        } catch (e) {\n          if (onError) {\n            onError(e);\n          } else {\n            console.error(e);\n          }\n          scope.manager.itemError(url);\n        }\n      }, onProgress, onError);\n    }\n  }, {\n    key: \"parse\",\n    value: function parse(text) {\n      function readBvh(lines2) {\n        if (nextLine(lines2) !== \"HIERARCHY\") {\n          console.error(\"THREE.BVHLoader: HIERARCHY expected.\");\n        }\n        var list = [];\n        var root = readNode(lines2, nextLine(lines2), list);\n        if (nextLine(lines2) !== \"MOTION\") {\n          console.error(\"THREE.BVHLoader: MOTION expected.\");\n        }\n        var tokens = nextLine(lines2).split(/[\\s]+/);\n        var numFrames = parseInt(tokens[1]);\n        if (isNaN(numFrames)) {\n          console.error(\"THREE.BVHLoader: Failed to read number of frames.\");\n        }\n        tokens = nextLine(lines2).split(/[\\s]+/);\n        var frameTime = parseFloat(tokens[2]);\n        if (isNaN(frameTime)) {\n          console.error(\"THREE.BVHLoader: Failed to read frame time.\");\n        }\n        for (var i = 0; i < numFrames; i++) {\n          tokens = nextLine(lines2).split(/[\\s]+/);\n          readFrameData(tokens, i * frameTime, root);\n        }\n        return list;\n      }\n      function readFrameData(data, frameTime, bone) {\n        if (bone.type === \"ENDSITE\") return;\n        var keyframe = {\n          time: frameTime,\n          position: new Vector3(),\n          rotation: new Quaternion()\n        };\n        bone.frames.push(keyframe);\n        var quat = new Quaternion();\n        var vx = new Vector3(1, 0, 0);\n        var vy = new Vector3(0, 1, 0);\n        var vz = new Vector3(0, 0, 1);\n        for (var i = 0; i < bone.channels.length; i++) {\n          switch (bone.channels[i]) {\n            case \"Xposition\":\n              keyframe.position.x = parseFloat(data.shift().trim());\n              break;\n            case \"Yposition\":\n              keyframe.position.y = parseFloat(data.shift().trim());\n              break;\n            case \"Zposition\":\n              keyframe.position.z = parseFloat(data.shift().trim());\n              break;\n            case \"Xrotation\":\n              quat.setFromAxisAngle(vx, parseFloat(data.shift().trim()) * Math.PI / 180);\n              keyframe.rotation.multiply(quat);\n              break;\n            case \"Yrotation\":\n              quat.setFromAxisAngle(vy, parseFloat(data.shift().trim()) * Math.PI / 180);\n              keyframe.rotation.multiply(quat);\n              break;\n            case \"Zrotation\":\n              quat.setFromAxisAngle(vz, parseFloat(data.shift().trim()) * Math.PI / 180);\n              keyframe.rotation.multiply(quat);\n              break;\n            default:\n              console.warn(\"THREE.BVHLoader: Invalid channel type.\");\n          }\n        }\n        for (var _i = 0; _i < bone.children.length; _i++) {\n          readFrameData(data, frameTime, bone.children[_i]);\n        }\n      }\n      function readNode(lines2, firstline, list) {\n        var node = {\n          name: \"\",\n          type: \"\",\n          frames: []\n        };\n        list.push(node);\n        var tokens = firstline.split(/[\\s]+/);\n        if (tokens[0].toUpperCase() === \"END\" && tokens[1].toUpperCase() === \"SITE\") {\n          node.type = \"ENDSITE\";\n          node.name = \"ENDSITE\";\n        } else {\n          node.name = tokens[1];\n          node.type = tokens[0].toUpperCase();\n        }\n        if (nextLine(lines2) !== \"{\") {\n          console.error(\"THREE.BVHLoader: Expected opening { after type & name\");\n        }\n        tokens = nextLine(lines2).split(/[\\s]+/);\n        if (tokens[0] !== \"OFFSET\") {\n          console.error(\"THREE.BVHLoader: Expected OFFSET but got: \" + tokens[0]);\n        }\n        if (tokens.length !== 4) {\n          console.error(\"THREE.BVHLoader: Invalid number of values for OFFSET.\");\n        }\n        var offset = new Vector3(parseFloat(tokens[1]), parseFloat(tokens[2]), parseFloat(tokens[3]));\n        if (isNaN(offset.x) || isNaN(offset.y) || isNaN(offset.z)) {\n          console.error(\"THREE.BVHLoader: Invalid values of OFFSET.\");\n        }\n        node.offset = offset;\n        if (node.type !== \"ENDSITE\") {\n          tokens = nextLine(lines2).split(/[\\s]+/);\n          if (tokens[0] !== \"CHANNELS\") {\n            console.error(\"THREE.BVHLoader: Expected CHANNELS definition.\");\n          }\n          var numChannels = parseInt(tokens[1]);\n          node.channels = tokens.splice(2, numChannels);\n          node.children = [];\n        }\n        while (true) {\n          var line = nextLine(lines2);\n          if (line === \"}\") {\n            return node;\n          } else {\n            node.children.push(readNode(lines2, line, list));\n          }\n        }\n      }\n      function toTHREEBone(source, list) {\n        var bone = new Bone();\n        list.push(bone);\n        bone.position.add(source.offset);\n        bone.name = source.name;\n        if (source.type !== \"ENDSITE\") {\n          for (var i = 0; i < source.children.length; i++) {\n            bone.add(toTHREEBone(source.children[i], list));\n          }\n        }\n        return bone;\n      }\n      function toTHREEAnimation(bones2) {\n        var tracks = [];\n        for (var i = 0; i < bones2.length; i++) {\n          var bone = bones2[i];\n          if (bone.type === \"ENDSITE\") continue;\n          var times = [];\n          var positions = [];\n          var rotations = [];\n          for (var j = 0; j < bone.frames.length; j++) {\n            var frame = bone.frames[j];\n            times.push(frame.time);\n            positions.push(frame.position.x + bone.offset.x);\n            positions.push(frame.position.y + bone.offset.y);\n            positions.push(frame.position.z + bone.offset.z);\n            rotations.push(frame.rotation.x);\n            rotations.push(frame.rotation.y);\n            rotations.push(frame.rotation.z);\n            rotations.push(frame.rotation.w);\n          }\n          if (scope.animateBonePositions) {\n            tracks.push(new VectorKeyframeTrack(\".bones[\" + bone.name + \"].position\", times, positions));\n          }\n          if (scope.animateBoneRotations) {\n            tracks.push(new QuaternionKeyframeTrack(\".bones[\" + bone.name + \"].quaternion\", times, rotations));\n          }\n        }\n        return new AnimationClip(\"animation\", -1, tracks);\n      }\n      function nextLine(lines2) {\n        var line;\n        while ((line = lines2.shift().trim()).length === 0) {}\n        return line;\n      }\n      var scope = this;\n      var lines = text.split(/[\\r\\n]+/g);\n      var bones = readBvh(lines);\n      var threeBones = [];\n      toTHREEBone(bones[0], threeBones);\n      var threeClip = toTHREEAnimation(bones);\n      return {\n        skeleton: new Skeleton(threeBones),\n        clip: threeClip\n      };\n    }\n  }]);\n  return BVHLoader;\n}(Loader);\nexport { BVHLoader };","map":{"version":3,"names":["Loader","FileLoader","Vector3","Quaternion","Bone","VectorKeyframeTrack","QuaternionKeyframeTrack","AnimationClip","Skeleton","BVHLoader","_Loader","_inherits","_super","_createSuper","manager","_this","_classCallCheck","call","animateBonePositions","animateBoneRotations","_createClass","key","value","load","url","onLoad","onProgress","onError","scope","loader","setPath","path","setRequestHeader","requestHeader","setWithCredentials","withCredentials","text","parse","e","console","error","itemError","readBvh","lines2","nextLine","list","root","readNode","tokens","split","numFrames","parseInt","isNaN","frameTime","parseFloat","i","readFrameData","data","bone","type","keyframe","time","position","rotation","frames","push","quat","vx","vy","vz","channels","length","x","shift","trim","y","z","setFromAxisAngle","Math","PI","multiply","warn","children","firstline","node","name","toUpperCase","offset","numChannels","splice","line","toTHREEBone","source","add","toTHREEAnimation","bones2","tracks","times","positions","rotations","j","frame","w","lines","bones","threeBones","threeClip","skeleton","clip"],"sources":["/home/krug/Coding/JavaScript/Websites/Personal/personal/node_modules/.pnpm/three-stdlib@2.23.7_three@0.151.3/node_modules/three-stdlib/loaders/BVHLoader.js"],"sourcesContent":["import { Loader, FileLoader, Vector3, Quaternion, Bone, VectorKeyframeTrack, QuaternionKeyframeTrack, AnimationClip, Skeleton } from \"three\";\nclass BVHLoader extends Loader {\n  constructor(manager) {\n    super(manager);\n    this.animateBonePositions = true;\n    this.animateBoneRotations = true;\n  }\n  load(url, onLoad, onProgress, onError) {\n    const scope = this;\n    const loader = new FileLoader(scope.manager);\n    loader.setPath(scope.path);\n    loader.setRequestHeader(scope.requestHeader);\n    loader.setWithCredentials(scope.withCredentials);\n    loader.load(\n      url,\n      function(text) {\n        try {\n          onLoad(scope.parse(text));\n        } catch (e) {\n          if (onError) {\n            onError(e);\n          } else {\n            console.error(e);\n          }\n          scope.manager.itemError(url);\n        }\n      },\n      onProgress,\n      onError\n    );\n  }\n  parse(text) {\n    function readBvh(lines2) {\n      if (nextLine(lines2) !== \"HIERARCHY\") {\n        console.error(\"THREE.BVHLoader: HIERARCHY expected.\");\n      }\n      const list = [];\n      const root = readNode(lines2, nextLine(lines2), list);\n      if (nextLine(lines2) !== \"MOTION\") {\n        console.error(\"THREE.BVHLoader: MOTION expected.\");\n      }\n      let tokens = nextLine(lines2).split(/[\\s]+/);\n      const numFrames = parseInt(tokens[1]);\n      if (isNaN(numFrames)) {\n        console.error(\"THREE.BVHLoader: Failed to read number of frames.\");\n      }\n      tokens = nextLine(lines2).split(/[\\s]+/);\n      const frameTime = parseFloat(tokens[2]);\n      if (isNaN(frameTime)) {\n        console.error(\"THREE.BVHLoader: Failed to read frame time.\");\n      }\n      for (let i = 0; i < numFrames; i++) {\n        tokens = nextLine(lines2).split(/[\\s]+/);\n        readFrameData(tokens, i * frameTime, root);\n      }\n      return list;\n    }\n    function readFrameData(data, frameTime, bone) {\n      if (bone.type === \"ENDSITE\")\n        return;\n      const keyframe = {\n        time: frameTime,\n        position: new Vector3(),\n        rotation: new Quaternion()\n      };\n      bone.frames.push(keyframe);\n      const quat = new Quaternion();\n      const vx = new Vector3(1, 0, 0);\n      const vy = new Vector3(0, 1, 0);\n      const vz = new Vector3(0, 0, 1);\n      for (let i = 0; i < bone.channels.length; i++) {\n        switch (bone.channels[i]) {\n          case \"Xposition\":\n            keyframe.position.x = parseFloat(data.shift().trim());\n            break;\n          case \"Yposition\":\n            keyframe.position.y = parseFloat(data.shift().trim());\n            break;\n          case \"Zposition\":\n            keyframe.position.z = parseFloat(data.shift().trim());\n            break;\n          case \"Xrotation\":\n            quat.setFromAxisAngle(vx, parseFloat(data.shift().trim()) * Math.PI / 180);\n            keyframe.rotation.multiply(quat);\n            break;\n          case \"Yrotation\":\n            quat.setFromAxisAngle(vy, parseFloat(data.shift().trim()) * Math.PI / 180);\n            keyframe.rotation.multiply(quat);\n            break;\n          case \"Zrotation\":\n            quat.setFromAxisAngle(vz, parseFloat(data.shift().trim()) * Math.PI / 180);\n            keyframe.rotation.multiply(quat);\n            break;\n          default:\n            console.warn(\"THREE.BVHLoader: Invalid channel type.\");\n        }\n      }\n      for (let i = 0; i < bone.children.length; i++) {\n        readFrameData(data, frameTime, bone.children[i]);\n      }\n    }\n    function readNode(lines2, firstline, list) {\n      const node = { name: \"\", type: \"\", frames: [] };\n      list.push(node);\n      let tokens = firstline.split(/[\\s]+/);\n      if (tokens[0].toUpperCase() === \"END\" && tokens[1].toUpperCase() === \"SITE\") {\n        node.type = \"ENDSITE\";\n        node.name = \"ENDSITE\";\n      } else {\n        node.name = tokens[1];\n        node.type = tokens[0].toUpperCase();\n      }\n      if (nextLine(lines2) !== \"{\") {\n        console.error(\"THREE.BVHLoader: Expected opening { after type & name\");\n      }\n      tokens = nextLine(lines2).split(/[\\s]+/);\n      if (tokens[0] !== \"OFFSET\") {\n        console.error(\"THREE.BVHLoader: Expected OFFSET but got: \" + tokens[0]);\n      }\n      if (tokens.length !== 4) {\n        console.error(\"THREE.BVHLoader: Invalid number of values for OFFSET.\");\n      }\n      const offset = new Vector3(parseFloat(tokens[1]), parseFloat(tokens[2]), parseFloat(tokens[3]));\n      if (isNaN(offset.x) || isNaN(offset.y) || isNaN(offset.z)) {\n        console.error(\"THREE.BVHLoader: Invalid values of OFFSET.\");\n      }\n      node.offset = offset;\n      if (node.type !== \"ENDSITE\") {\n        tokens = nextLine(lines2).split(/[\\s]+/);\n        if (tokens[0] !== \"CHANNELS\") {\n          console.error(\"THREE.BVHLoader: Expected CHANNELS definition.\");\n        }\n        const numChannels = parseInt(tokens[1]);\n        node.channels = tokens.splice(2, numChannels);\n        node.children = [];\n      }\n      while (true) {\n        const line = nextLine(lines2);\n        if (line === \"}\") {\n          return node;\n        } else {\n          node.children.push(readNode(lines2, line, list));\n        }\n      }\n    }\n    function toTHREEBone(source, list) {\n      const bone = new Bone();\n      list.push(bone);\n      bone.position.add(source.offset);\n      bone.name = source.name;\n      if (source.type !== \"ENDSITE\") {\n        for (let i = 0; i < source.children.length; i++) {\n          bone.add(toTHREEBone(source.children[i], list));\n        }\n      }\n      return bone;\n    }\n    function toTHREEAnimation(bones2) {\n      const tracks = [];\n      for (let i = 0; i < bones2.length; i++) {\n        const bone = bones2[i];\n        if (bone.type === \"ENDSITE\")\n          continue;\n        const times = [];\n        const positions = [];\n        const rotations = [];\n        for (let j = 0; j < bone.frames.length; j++) {\n          const frame = bone.frames[j];\n          times.push(frame.time);\n          positions.push(frame.position.x + bone.offset.x);\n          positions.push(frame.position.y + bone.offset.y);\n          positions.push(frame.position.z + bone.offset.z);\n          rotations.push(frame.rotation.x);\n          rotations.push(frame.rotation.y);\n          rotations.push(frame.rotation.z);\n          rotations.push(frame.rotation.w);\n        }\n        if (scope.animateBonePositions) {\n          tracks.push(new VectorKeyframeTrack(\".bones[\" + bone.name + \"].position\", times, positions));\n        }\n        if (scope.animateBoneRotations) {\n          tracks.push(new QuaternionKeyframeTrack(\".bones[\" + bone.name + \"].quaternion\", times, rotations));\n        }\n      }\n      return new AnimationClip(\"animation\", -1, tracks);\n    }\n    function nextLine(lines2) {\n      let line;\n      while ((line = lines2.shift().trim()).length === 0) {\n      }\n      return line;\n    }\n    const scope = this;\n    const lines = text.split(/[\\r\\n]+/g);\n    const bones = readBvh(lines);\n    const threeBones = [];\n    toTHREEBone(bones[0], threeBones);\n    const threeClip = toTHREEAnimation(bones);\n    return {\n      skeleton: new Skeleton(threeBones),\n      clip: threeClip\n    };\n  }\n}\nexport {\n  BVHLoader\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}