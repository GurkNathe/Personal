{"ast":null,"code":"import _slicedToArray from \"/home/krug/Coding/JavaScript/Websites/Personal/personal/node_modules/.pnpm/@babel+runtime@7.22.3/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _classCallCheck from \"/home/krug/Coding/JavaScript/Websites/Personal/personal/node_modules/.pnpm/@babel+runtime@7.22.3/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/home/krug/Coding/JavaScript/Websites/Personal/personal/node_modules/.pnpm/@babel+runtime@7.22.3/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport { Vector3, Plane, Line3, Sphere, Box3, Triangle } from \"three\";\nimport { Capsule } from \"./Capsule.js\";\nvar _v1 = /* @__PURE__ */new Vector3();\nvar _v2 = /* @__PURE__ */new Vector3();\nvar _plane = /* @__PURE__ */new Plane();\nvar _line1 = /* @__PURE__ */new Line3();\nvar _line2 = /* @__PURE__ */new Line3();\nvar _sphere = /* @__PURE__ */new Sphere();\nvar _capsule = /* @__PURE__ */new Capsule();\nvar Octree = /*#__PURE__*/function () {\n  function Octree(box) {\n    _classCallCheck(this, Octree);\n    this.triangles = [];\n    this.box = box;\n    this.subTrees = [];\n  }\n  _createClass(Octree, [{\n    key: \"addTriangle\",\n    value: function addTriangle(triangle) {\n      if (!this.bounds) this.bounds = new Box3();\n      this.bounds.min.x = Math.min(this.bounds.min.x, triangle.a.x, triangle.b.x, triangle.c.x);\n      this.bounds.min.y = Math.min(this.bounds.min.y, triangle.a.y, triangle.b.y, triangle.c.y);\n      this.bounds.min.z = Math.min(this.bounds.min.z, triangle.a.z, triangle.b.z, triangle.c.z);\n      this.bounds.max.x = Math.max(this.bounds.max.x, triangle.a.x, triangle.b.x, triangle.c.x);\n      this.bounds.max.y = Math.max(this.bounds.max.y, triangle.a.y, triangle.b.y, triangle.c.y);\n      this.bounds.max.z = Math.max(this.bounds.max.z, triangle.a.z, triangle.b.z, triangle.c.z);\n      this.triangles.push(triangle);\n      return this;\n    }\n  }, {\n    key: \"calcBox\",\n    value: function calcBox() {\n      this.box = this.bounds.clone();\n      this.box.min.x -= 0.01;\n      this.box.min.y -= 0.01;\n      this.box.min.z -= 0.01;\n      return this;\n    }\n  }, {\n    key: \"split\",\n    value: function split(level) {\n      if (!this.box) return;\n      var subTrees = [];\n      var halfsize = _v2.copy(this.box.max).sub(this.box.min).multiplyScalar(0.5);\n      for (var x = 0; x < 2; x++) {\n        for (var y = 0; y < 2; y++) {\n          for (var z = 0; z < 2; z++) {\n            var box = new Box3();\n            var v = _v1.set(x, y, z);\n            box.min.copy(this.box.min).add(v.multiply(halfsize));\n            box.max.copy(box.min).add(halfsize);\n            subTrees.push(new Octree(box));\n          }\n        }\n      }\n      var triangle;\n      while (triangle = this.triangles.pop()) {\n        for (var i = 0; i < subTrees.length; i++) {\n          if (subTrees[i].box.intersectsTriangle(triangle)) {\n            subTrees[i].triangles.push(triangle);\n          }\n        }\n      }\n      for (var _i = 0; _i < subTrees.length; _i++) {\n        var len = subTrees[_i].triangles.length;\n        if (len > 8 && level < 16) {\n          subTrees[_i].split(level + 1);\n        }\n        if (len !== 0) {\n          this.subTrees.push(subTrees[_i]);\n        }\n      }\n      return this;\n    }\n  }, {\n    key: \"build\",\n    value: function build() {\n      this.calcBox();\n      this.split(0);\n      return this;\n    }\n  }, {\n    key: \"getRayTriangles\",\n    value: function getRayTriangles(ray, triangles) {\n      for (var i = 0; i < this.subTrees.length; i++) {\n        var subTree = this.subTrees[i];\n        if (!ray.intersectsBox(subTree.box)) continue;\n        if (subTree.triangles.length > 0) {\n          for (var j = 0; j < subTree.triangles.length; j++) {\n            if (triangles.indexOf(subTree.triangles[j]) === -1) triangles.push(subTree.triangles[j]);\n          }\n        } else {\n          subTree.getRayTriangles(ray, triangles);\n        }\n      }\n      return triangles;\n    }\n  }, {\n    key: \"triangleCapsuleIntersect\",\n    value: function triangleCapsuleIntersect(capsule, triangle) {\n      triangle.getPlane(_plane);\n      var d1 = _plane.distanceToPoint(capsule.start) - capsule.radius;\n      var d2 = _plane.distanceToPoint(capsule.end) - capsule.radius;\n      if (d1 > 0 && d2 > 0 || d1 < -capsule.radius && d2 < -capsule.radius) {\n        return false;\n      }\n      var delta = Math.abs(d1 / (Math.abs(d1) + Math.abs(d2)));\n      var intersectPoint = _v1.copy(capsule.start).lerp(capsule.end, delta);\n      if (triangle.containsPoint(intersectPoint)) {\n        return {\n          normal: _plane.normal.clone(),\n          point: intersectPoint.clone(),\n          depth: Math.abs(Math.min(d1, d2))\n        };\n      }\n      var r2 = capsule.radius * capsule.radius;\n      var line1 = _line1.set(capsule.start, capsule.end);\n      var lines = [[triangle.a, triangle.b], [triangle.b, triangle.c], [triangle.c, triangle.a]];\n      for (var i = 0; i < lines.length; i++) {\n        var line2 = _line2.set(lines[i][0], lines[i][1]);\n        var _capsule$lineLineMini = capsule.lineLineMinimumPoints(line1, line2),\n          _capsule$lineLineMini2 = _slicedToArray(_capsule$lineLineMini, 2),\n          point1 = _capsule$lineLineMini2[0],\n          point2 = _capsule$lineLineMini2[1];\n        if (point1.distanceToSquared(point2) < r2) {\n          return {\n            normal: point1.clone().sub(point2).normalize(),\n            point: point2.clone(),\n            depth: capsule.radius - point1.distanceTo(point2)\n          };\n        }\n      }\n      return false;\n    }\n  }, {\n    key: \"triangleSphereIntersect\",\n    value: function triangleSphereIntersect(sphere, triangle) {\n      triangle.getPlane(_plane);\n      if (!sphere.intersectsPlane(_plane)) return false;\n      var depth = Math.abs(_plane.distanceToSphere(sphere));\n      var r2 = sphere.radius * sphere.radius - depth * depth;\n      var plainPoint = _plane.projectPoint(sphere.center, _v1);\n      if (triangle.containsPoint(sphere.center)) {\n        return {\n          normal: _plane.normal.clone(),\n          point: plainPoint.clone(),\n          depth: Math.abs(_plane.distanceToSphere(sphere))\n        };\n      }\n      var lines = [[triangle.a, triangle.b], [triangle.b, triangle.c], [triangle.c, triangle.a]];\n      for (var i = 0; i < lines.length; i++) {\n        _line1.set(lines[i][0], lines[i][1]);\n        _line1.closestPointToPoint(plainPoint, true, _v2);\n        var d = _v2.distanceToSquared(sphere.center);\n        if (d < r2) {\n          return {\n            normal: sphere.center.clone().sub(_v2).normalize(),\n            point: _v2.clone(),\n            depth: sphere.radius - Math.sqrt(d)\n          };\n        }\n      }\n      return false;\n    }\n  }, {\n    key: \"getSphereTriangles\",\n    value: function getSphereTriangles(sphere, triangles) {\n      for (var i = 0; i < this.subTrees.length; i++) {\n        var subTree = this.subTrees[i];\n        if (!sphere.intersectsBox(subTree.box)) continue;\n        if (subTree.triangles.length > 0) {\n          for (var j = 0; j < subTree.triangles.length; j++) {\n            if (triangles.indexOf(subTree.triangles[j]) === -1) triangles.push(subTree.triangles[j]);\n          }\n        } else {\n          subTree.getSphereTriangles(sphere, triangles);\n        }\n      }\n    }\n  }, {\n    key: \"getCapsuleTriangles\",\n    value: function getCapsuleTriangles(capsule, triangles) {\n      for (var i = 0; i < this.subTrees.length; i++) {\n        var subTree = this.subTrees[i];\n        if (!capsule.intersectsBox(subTree.box)) continue;\n        if (subTree.triangles.length > 0) {\n          for (var j = 0; j < subTree.triangles.length; j++) {\n            if (triangles.indexOf(subTree.triangles[j]) === -1) triangles.push(subTree.triangles[j]);\n          }\n        } else {\n          subTree.getCapsuleTriangles(capsule, triangles);\n        }\n      }\n    }\n  }, {\n    key: \"sphereIntersect\",\n    value: function sphereIntersect(sphere) {\n      _sphere.copy(sphere);\n      var triangles = [];\n      var result,\n        hit = false;\n      this.getSphereTriangles(sphere, triangles);\n      for (var i = 0; i < triangles.length; i++) {\n        if (result = this.triangleSphereIntersect(_sphere, triangles[i])) {\n          hit = true;\n          _sphere.center.add(result.normal.multiplyScalar(result.depth));\n        }\n      }\n      if (hit) {\n        var collisionVector = _sphere.center.clone().sub(sphere.center);\n        var depth = collisionVector.length();\n        return {\n          normal: collisionVector.normalize(),\n          depth: depth\n        };\n      }\n      return false;\n    }\n  }, {\n    key: \"capsuleIntersect\",\n    value: function capsuleIntersect(capsule) {\n      _capsule.copy(capsule);\n      var triangles = [];\n      var result,\n        hit = false;\n      this.getCapsuleTriangles(_capsule, triangles);\n      for (var i = 0; i < triangles.length; i++) {\n        if (result = this.triangleCapsuleIntersect(_capsule, triangles[i])) {\n          hit = true;\n          _capsule.translate(result.normal.multiplyScalar(result.depth));\n        }\n      }\n      if (hit) {\n        var collisionVector = _capsule.getCenter(new Vector3()).sub(capsule.getCenter(_v1));\n        var depth = collisionVector.length();\n        return {\n          normal: collisionVector.normalize(),\n          depth: depth\n        };\n      }\n      return false;\n    }\n  }, {\n    key: \"rayIntersect\",\n    value: function rayIntersect(ray) {\n      if (ray.direction.length() === 0) return;\n      var triangles = [];\n      var triangle,\n        position,\n        distance = 1e100;\n      this.getRayTriangles(ray, triangles);\n      for (var i = 0; i < triangles.length; i++) {\n        var result = ray.intersectTriangle(triangles[i].a, triangles[i].b, triangles[i].c, true, _v1);\n        if (result) {\n          var newdistance = result.sub(ray.origin).length();\n          if (distance > newdistance) {\n            position = result.clone().add(ray.origin);\n            distance = newdistance;\n            triangle = triangles[i];\n          }\n        }\n      }\n      return distance < 1e100 ? {\n        distance: distance,\n        triangle: triangle,\n        position: position\n      } : false;\n    }\n  }, {\n    key: \"fromGraphNode\",\n    value: function fromGraphNode(group) {\n      var _this = this;\n      group.updateWorldMatrix(true, true);\n      group.traverse(function (obj) {\n        if (obj.isMesh === true) {\n          var geometry,\n            isTemp = false;\n          if (obj.geometry.index !== null) {\n            isTemp = true;\n            geometry = obj.geometry.toNonIndexed();\n          } else {\n            geometry = obj.geometry;\n          }\n          var positionAttribute = geometry.getAttribute(\"position\");\n          for (var i = 0; i < positionAttribute.count; i += 3) {\n            var v1 = new Vector3().fromBufferAttribute(positionAttribute, i);\n            var v2 = new Vector3().fromBufferAttribute(positionAttribute, i + 1);\n            var v3 = new Vector3().fromBufferAttribute(positionAttribute, i + 2);\n            v1.applyMatrix4(obj.matrixWorld);\n            v2.applyMatrix4(obj.matrixWorld);\n            v3.applyMatrix4(obj.matrixWorld);\n            _this.addTriangle(new Triangle(v1, v2, v3));\n          }\n          if (isTemp) {\n            geometry.dispose();\n          }\n        }\n      });\n      this.build();\n      return this;\n    }\n  }]);\n  return Octree;\n}();\nexport { Octree };","map":{"version":3,"names":["Vector3","Plane","Line3","Sphere","Box3","Triangle","Capsule","_v1","_v2","_plane","_line1","_line2","_sphere","_capsule","Octree","box","_classCallCheck","triangles","subTrees","_createClass","key","value","addTriangle","triangle","bounds","min","x","Math","a","b","c","y","z","max","push","calcBox","clone","split","level","halfsize","copy","sub","multiplyScalar","v","set","add","multiply","pop","i","length","intersectsTriangle","len","build","getRayTriangles","ray","subTree","intersectsBox","j","indexOf","triangleCapsuleIntersect","capsule","getPlane","d1","distanceToPoint","start","radius","d2","end","delta","abs","intersectPoint","lerp","containsPoint","normal","point","depth","r2","line1","lines","line2","_capsule$lineLineMini","lineLineMinimumPoints","_capsule$lineLineMini2","_slicedToArray","point1","point2","distanceToSquared","normalize","distanceTo","triangleSphereIntersect","sphere","intersectsPlane","distanceToSphere","plainPoint","projectPoint","center","closestPointToPoint","d","sqrt","getSphereTriangles","getCapsuleTriangles","sphereIntersect","result","hit","collisionVector","capsuleIntersect","translate","getCenter","rayIntersect","direction","position","distance","intersectTriangle","newdistance","origin","fromGraphNode","group","_this","updateWorldMatrix","traverse","obj","isMesh","geometry","isTemp","index","toNonIndexed","positionAttribute","getAttribute","count","v1","fromBufferAttribute","v2","v3","applyMatrix4","matrixWorld","dispose"],"sources":["/home/krug/Coding/JavaScript/Websites/Personal/personal/node_modules/.pnpm/three-stdlib@2.23.7_three@0.151.3/node_modules/three-stdlib/math/Octree.js"],"sourcesContent":["import { Vector3, Plane, Line3, Sphere, Box3, Triangle } from \"three\";\nimport { Capsule } from \"./Capsule.js\";\nconst _v1 = /* @__PURE__ */ new Vector3();\nconst _v2 = /* @__PURE__ */ new Vector3();\nconst _plane = /* @__PURE__ */ new Plane();\nconst _line1 = /* @__PURE__ */ new Line3();\nconst _line2 = /* @__PURE__ */ new Line3();\nconst _sphere = /* @__PURE__ */ new Sphere();\nconst _capsule = /* @__PURE__ */ new Capsule();\nclass Octree {\n  constructor(box) {\n    this.triangles = [];\n    this.box = box;\n    this.subTrees = [];\n  }\n  addTriangle(triangle) {\n    if (!this.bounds)\n      this.bounds = new Box3();\n    this.bounds.min.x = Math.min(this.bounds.min.x, triangle.a.x, triangle.b.x, triangle.c.x);\n    this.bounds.min.y = Math.min(this.bounds.min.y, triangle.a.y, triangle.b.y, triangle.c.y);\n    this.bounds.min.z = Math.min(this.bounds.min.z, triangle.a.z, triangle.b.z, triangle.c.z);\n    this.bounds.max.x = Math.max(this.bounds.max.x, triangle.a.x, triangle.b.x, triangle.c.x);\n    this.bounds.max.y = Math.max(this.bounds.max.y, triangle.a.y, triangle.b.y, triangle.c.y);\n    this.bounds.max.z = Math.max(this.bounds.max.z, triangle.a.z, triangle.b.z, triangle.c.z);\n    this.triangles.push(triangle);\n    return this;\n  }\n  calcBox() {\n    this.box = this.bounds.clone();\n    this.box.min.x -= 0.01;\n    this.box.min.y -= 0.01;\n    this.box.min.z -= 0.01;\n    return this;\n  }\n  split(level) {\n    if (!this.box)\n      return;\n    const subTrees = [];\n    const halfsize = _v2.copy(this.box.max).sub(this.box.min).multiplyScalar(0.5);\n    for (let x = 0; x < 2; x++) {\n      for (let y = 0; y < 2; y++) {\n        for (let z = 0; z < 2; z++) {\n          const box = new Box3();\n          const v = _v1.set(x, y, z);\n          box.min.copy(this.box.min).add(v.multiply(halfsize));\n          box.max.copy(box.min).add(halfsize);\n          subTrees.push(new Octree(box));\n        }\n      }\n    }\n    let triangle;\n    while (triangle = this.triangles.pop()) {\n      for (let i = 0; i < subTrees.length; i++) {\n        if (subTrees[i].box.intersectsTriangle(triangle)) {\n          subTrees[i].triangles.push(triangle);\n        }\n      }\n    }\n    for (let i = 0; i < subTrees.length; i++) {\n      const len = subTrees[i].triangles.length;\n      if (len > 8 && level < 16) {\n        subTrees[i].split(level + 1);\n      }\n      if (len !== 0) {\n        this.subTrees.push(subTrees[i]);\n      }\n    }\n    return this;\n  }\n  build() {\n    this.calcBox();\n    this.split(0);\n    return this;\n  }\n  getRayTriangles(ray, triangles) {\n    for (let i = 0; i < this.subTrees.length; i++) {\n      const subTree = this.subTrees[i];\n      if (!ray.intersectsBox(subTree.box))\n        continue;\n      if (subTree.triangles.length > 0) {\n        for (let j = 0; j < subTree.triangles.length; j++) {\n          if (triangles.indexOf(subTree.triangles[j]) === -1)\n            triangles.push(subTree.triangles[j]);\n        }\n      } else {\n        subTree.getRayTriangles(ray, triangles);\n      }\n    }\n    return triangles;\n  }\n  triangleCapsuleIntersect(capsule, triangle) {\n    triangle.getPlane(_plane);\n    const d1 = _plane.distanceToPoint(capsule.start) - capsule.radius;\n    const d2 = _plane.distanceToPoint(capsule.end) - capsule.radius;\n    if (d1 > 0 && d2 > 0 || d1 < -capsule.radius && d2 < -capsule.radius) {\n      return false;\n    }\n    const delta = Math.abs(d1 / (Math.abs(d1) + Math.abs(d2)));\n    const intersectPoint = _v1.copy(capsule.start).lerp(capsule.end, delta);\n    if (triangle.containsPoint(intersectPoint)) {\n      return { normal: _plane.normal.clone(), point: intersectPoint.clone(), depth: Math.abs(Math.min(d1, d2)) };\n    }\n    const r2 = capsule.radius * capsule.radius;\n    const line1 = _line1.set(capsule.start, capsule.end);\n    const lines = [\n      [triangle.a, triangle.b],\n      [triangle.b, triangle.c],\n      [triangle.c, triangle.a]\n    ];\n    for (let i = 0; i < lines.length; i++) {\n      const line2 = _line2.set(lines[i][0], lines[i][1]);\n      const [point1, point2] = capsule.lineLineMinimumPoints(line1, line2);\n      if (point1.distanceToSquared(point2) < r2) {\n        return {\n          normal: point1.clone().sub(point2).normalize(),\n          point: point2.clone(),\n          depth: capsule.radius - point1.distanceTo(point2)\n        };\n      }\n    }\n    return false;\n  }\n  triangleSphereIntersect(sphere, triangle) {\n    triangle.getPlane(_plane);\n    if (!sphere.intersectsPlane(_plane))\n      return false;\n    const depth = Math.abs(_plane.distanceToSphere(sphere));\n    const r2 = sphere.radius * sphere.radius - depth * depth;\n    const plainPoint = _plane.projectPoint(sphere.center, _v1);\n    if (triangle.containsPoint(sphere.center)) {\n      return {\n        normal: _plane.normal.clone(),\n        point: plainPoint.clone(),\n        depth: Math.abs(_plane.distanceToSphere(sphere))\n      };\n    }\n    const lines = [\n      [triangle.a, triangle.b],\n      [triangle.b, triangle.c],\n      [triangle.c, triangle.a]\n    ];\n    for (let i = 0; i < lines.length; i++) {\n      _line1.set(lines[i][0], lines[i][1]);\n      _line1.closestPointToPoint(plainPoint, true, _v2);\n      const d = _v2.distanceToSquared(sphere.center);\n      if (d < r2) {\n        return {\n          normal: sphere.center.clone().sub(_v2).normalize(),\n          point: _v2.clone(),\n          depth: sphere.radius - Math.sqrt(d)\n        };\n      }\n    }\n    return false;\n  }\n  getSphereTriangles(sphere, triangles) {\n    for (let i = 0; i < this.subTrees.length; i++) {\n      const subTree = this.subTrees[i];\n      if (!sphere.intersectsBox(subTree.box))\n        continue;\n      if (subTree.triangles.length > 0) {\n        for (let j = 0; j < subTree.triangles.length; j++) {\n          if (triangles.indexOf(subTree.triangles[j]) === -1)\n            triangles.push(subTree.triangles[j]);\n        }\n      } else {\n        subTree.getSphereTriangles(sphere, triangles);\n      }\n    }\n  }\n  getCapsuleTriangles(capsule, triangles) {\n    for (let i = 0; i < this.subTrees.length; i++) {\n      const subTree = this.subTrees[i];\n      if (!capsule.intersectsBox(subTree.box))\n        continue;\n      if (subTree.triangles.length > 0) {\n        for (let j = 0; j < subTree.triangles.length; j++) {\n          if (triangles.indexOf(subTree.triangles[j]) === -1)\n            triangles.push(subTree.triangles[j]);\n        }\n      } else {\n        subTree.getCapsuleTriangles(capsule, triangles);\n      }\n    }\n  }\n  sphereIntersect(sphere) {\n    _sphere.copy(sphere);\n    const triangles = [];\n    let result, hit = false;\n    this.getSphereTriangles(sphere, triangles);\n    for (let i = 0; i < triangles.length; i++) {\n      if (result = this.triangleSphereIntersect(_sphere, triangles[i])) {\n        hit = true;\n        _sphere.center.add(result.normal.multiplyScalar(result.depth));\n      }\n    }\n    if (hit) {\n      const collisionVector = _sphere.center.clone().sub(sphere.center);\n      const depth = collisionVector.length();\n      return { normal: collisionVector.normalize(), depth };\n    }\n    return false;\n  }\n  capsuleIntersect(capsule) {\n    _capsule.copy(capsule);\n    const triangles = [];\n    let result, hit = false;\n    this.getCapsuleTriangles(_capsule, triangles);\n    for (let i = 0; i < triangles.length; i++) {\n      if (result = this.triangleCapsuleIntersect(_capsule, triangles[i])) {\n        hit = true;\n        _capsule.translate(result.normal.multiplyScalar(result.depth));\n      }\n    }\n    if (hit) {\n      const collisionVector = _capsule.getCenter(new Vector3()).sub(capsule.getCenter(_v1));\n      const depth = collisionVector.length();\n      return { normal: collisionVector.normalize(), depth };\n    }\n    return false;\n  }\n  rayIntersect(ray) {\n    if (ray.direction.length() === 0)\n      return;\n    const triangles = [];\n    let triangle, position, distance = 1e100;\n    this.getRayTriangles(ray, triangles);\n    for (let i = 0; i < triangles.length; i++) {\n      const result = ray.intersectTriangle(triangles[i].a, triangles[i].b, triangles[i].c, true, _v1);\n      if (result) {\n        const newdistance = result.sub(ray.origin).length();\n        if (distance > newdistance) {\n          position = result.clone().add(ray.origin);\n          distance = newdistance;\n          triangle = triangles[i];\n        }\n      }\n    }\n    return distance < 1e100 ? { distance, triangle, position } : false;\n  }\n  fromGraphNode(group) {\n    group.updateWorldMatrix(true, true);\n    group.traverse((obj) => {\n      if (obj.isMesh === true) {\n        let geometry, isTemp = false;\n        if (obj.geometry.index !== null) {\n          isTemp = true;\n          geometry = obj.geometry.toNonIndexed();\n        } else {\n          geometry = obj.geometry;\n        }\n        const positionAttribute = geometry.getAttribute(\"position\");\n        for (let i = 0; i < positionAttribute.count; i += 3) {\n          const v1 = new Vector3().fromBufferAttribute(positionAttribute, i);\n          const v2 = new Vector3().fromBufferAttribute(positionAttribute, i + 1);\n          const v3 = new Vector3().fromBufferAttribute(positionAttribute, i + 2);\n          v1.applyMatrix4(obj.matrixWorld);\n          v2.applyMatrix4(obj.matrixWorld);\n          v3.applyMatrix4(obj.matrixWorld);\n          this.addTriangle(new Triangle(v1, v2, v3));\n        }\n        if (isTemp) {\n          geometry.dispose();\n        }\n      }\n    });\n    this.build();\n    return this;\n  }\n}\nexport {\n  Octree\n};\n"],"mappings":";;;AAAA,SAASA,OAAO,EAAEC,KAAK,EAAEC,KAAK,EAAEC,MAAM,EAAEC,IAAI,EAAEC,QAAQ,QAAQ,OAAO;AACrE,SAASC,OAAO,QAAQ,cAAc;AACtC,IAAMC,GAAG,GAAG,eAAgB,IAAIP,OAAO,CAAC,CAAC;AACzC,IAAMQ,GAAG,GAAG,eAAgB,IAAIR,OAAO,CAAC,CAAC;AACzC,IAAMS,MAAM,GAAG,eAAgB,IAAIR,KAAK,CAAC,CAAC;AAC1C,IAAMS,MAAM,GAAG,eAAgB,IAAIR,KAAK,CAAC,CAAC;AAC1C,IAAMS,MAAM,GAAG,eAAgB,IAAIT,KAAK,CAAC,CAAC;AAC1C,IAAMU,OAAO,GAAG,eAAgB,IAAIT,MAAM,CAAC,CAAC;AAC5C,IAAMU,QAAQ,GAAG,eAAgB,IAAIP,OAAO,CAAC,CAAC;AAAC,IACzCQ,MAAM;EACV,SAAAA,OAAYC,GAAG,EAAE;IAAAC,eAAA,OAAAF,MAAA;IACf,IAAI,CAACG,SAAS,GAAG,EAAE;IACnB,IAAI,CAACF,GAAG,GAAGA,GAAG;IACd,IAAI,CAACG,QAAQ,GAAG,EAAE;EACpB;EAACC,YAAA,CAAAL,MAAA;IAAAM,GAAA;IAAAC,KAAA,EACD,SAAAC,YAAYC,QAAQ,EAAE;MACpB,IAAI,CAAC,IAAI,CAACC,MAAM,EACd,IAAI,CAACA,MAAM,GAAG,IAAIpB,IAAI,CAAC,CAAC;MAC1B,IAAI,CAACoB,MAAM,CAACC,GAAG,CAACC,CAAC,GAAGC,IAAI,CAACF,GAAG,CAAC,IAAI,CAACD,MAAM,CAACC,GAAG,CAACC,CAAC,EAAEH,QAAQ,CAACK,CAAC,CAACF,CAAC,EAAEH,QAAQ,CAACM,CAAC,CAACH,CAAC,EAAEH,QAAQ,CAACO,CAAC,CAACJ,CAAC,CAAC;MACzF,IAAI,CAACF,MAAM,CAACC,GAAG,CAACM,CAAC,GAAGJ,IAAI,CAACF,GAAG,CAAC,IAAI,CAACD,MAAM,CAACC,GAAG,CAACM,CAAC,EAAER,QAAQ,CAACK,CAAC,CAACG,CAAC,EAAER,QAAQ,CAACM,CAAC,CAACE,CAAC,EAAER,QAAQ,CAACO,CAAC,CAACC,CAAC,CAAC;MACzF,IAAI,CAACP,MAAM,CAACC,GAAG,CAACO,CAAC,GAAGL,IAAI,CAACF,GAAG,CAAC,IAAI,CAACD,MAAM,CAACC,GAAG,CAACO,CAAC,EAAET,QAAQ,CAACK,CAAC,CAACI,CAAC,EAAET,QAAQ,CAACM,CAAC,CAACG,CAAC,EAAET,QAAQ,CAACO,CAAC,CAACE,CAAC,CAAC;MACzF,IAAI,CAACR,MAAM,CAACS,GAAG,CAACP,CAAC,GAAGC,IAAI,CAACM,GAAG,CAAC,IAAI,CAACT,MAAM,CAACS,GAAG,CAACP,CAAC,EAAEH,QAAQ,CAACK,CAAC,CAACF,CAAC,EAAEH,QAAQ,CAACM,CAAC,CAACH,CAAC,EAAEH,QAAQ,CAACO,CAAC,CAACJ,CAAC,CAAC;MACzF,IAAI,CAACF,MAAM,CAACS,GAAG,CAACF,CAAC,GAAGJ,IAAI,CAACM,GAAG,CAAC,IAAI,CAACT,MAAM,CAACS,GAAG,CAACF,CAAC,EAAER,QAAQ,CAACK,CAAC,CAACG,CAAC,EAAER,QAAQ,CAACM,CAAC,CAACE,CAAC,EAAER,QAAQ,CAACO,CAAC,CAACC,CAAC,CAAC;MACzF,IAAI,CAACP,MAAM,CAACS,GAAG,CAACD,CAAC,GAAGL,IAAI,CAACM,GAAG,CAAC,IAAI,CAACT,MAAM,CAACS,GAAG,CAACD,CAAC,EAAET,QAAQ,CAACK,CAAC,CAACI,CAAC,EAAET,QAAQ,CAACM,CAAC,CAACG,CAAC,EAAET,QAAQ,CAACO,CAAC,CAACE,CAAC,CAAC;MACzF,IAAI,CAACf,SAAS,CAACiB,IAAI,CAACX,QAAQ,CAAC;MAC7B,OAAO,IAAI;IACb;EAAC;IAAAH,GAAA;IAAAC,KAAA,EACD,SAAAc,QAAA,EAAU;MACR,IAAI,CAACpB,GAAG,GAAG,IAAI,CAACS,MAAM,CAACY,KAAK,CAAC,CAAC;MAC9B,IAAI,CAACrB,GAAG,CAACU,GAAG,CAACC,CAAC,IAAI,IAAI;MACtB,IAAI,CAACX,GAAG,CAACU,GAAG,CAACM,CAAC,IAAI,IAAI;MACtB,IAAI,CAAChB,GAAG,CAACU,GAAG,CAACO,CAAC,IAAI,IAAI;MACtB,OAAO,IAAI;IACb;EAAC;IAAAZ,GAAA;IAAAC,KAAA,EACD,SAAAgB,MAAMC,KAAK,EAAE;MACX,IAAI,CAAC,IAAI,CAACvB,GAAG,EACX;MACF,IAAMG,QAAQ,GAAG,EAAE;MACnB,IAAMqB,QAAQ,GAAG/B,GAAG,CAACgC,IAAI,CAAC,IAAI,CAACzB,GAAG,CAACkB,GAAG,CAAC,CAACQ,GAAG,CAAC,IAAI,CAAC1B,GAAG,CAACU,GAAG,CAAC,CAACiB,cAAc,CAAC,GAAG,CAAC;MAC7E,KAAK,IAAIhB,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,CAAC,EAAEA,CAAC,EAAE,EAAE;QAC1B,KAAK,IAAIK,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,CAAC,EAAEA,CAAC,EAAE,EAAE;UAC1B,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,CAAC,EAAEA,CAAC,EAAE,EAAE;YAC1B,IAAMjB,GAAG,GAAG,IAAIX,IAAI,CAAC,CAAC;YACtB,IAAMuC,CAAC,GAAGpC,GAAG,CAACqC,GAAG,CAAClB,CAAC,EAAEK,CAAC,EAAEC,CAAC,CAAC;YAC1BjB,GAAG,CAACU,GAAG,CAACe,IAAI,CAAC,IAAI,CAACzB,GAAG,CAACU,GAAG,CAAC,CAACoB,GAAG,CAACF,CAAC,CAACG,QAAQ,CAACP,QAAQ,CAAC,CAAC;YACpDxB,GAAG,CAACkB,GAAG,CAACO,IAAI,CAACzB,GAAG,CAACU,GAAG,CAAC,CAACoB,GAAG,CAACN,QAAQ,CAAC;YACnCrB,QAAQ,CAACgB,IAAI,CAAC,IAAIpB,MAAM,CAACC,GAAG,CAAC,CAAC;UAChC;QACF;MACF;MACA,IAAIQ,QAAQ;MACZ,OAAOA,QAAQ,GAAG,IAAI,CAACN,SAAS,CAAC8B,GAAG,CAAC,CAAC,EAAE;QACtC,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG9B,QAAQ,CAAC+B,MAAM,EAAED,CAAC,EAAE,EAAE;UACxC,IAAI9B,QAAQ,CAAC8B,CAAC,CAAC,CAACjC,GAAG,CAACmC,kBAAkB,CAAC3B,QAAQ,CAAC,EAAE;YAChDL,QAAQ,CAAC8B,CAAC,CAAC,CAAC/B,SAAS,CAACiB,IAAI,CAACX,QAAQ,CAAC;UACtC;QACF;MACF;MACA,KAAK,IAAIyB,EAAC,GAAG,CAAC,EAAEA,EAAC,GAAG9B,QAAQ,CAAC+B,MAAM,EAAED,EAAC,EAAE,EAAE;QACxC,IAAMG,GAAG,GAAGjC,QAAQ,CAAC8B,EAAC,CAAC,CAAC/B,SAAS,CAACgC,MAAM;QACxC,IAAIE,GAAG,GAAG,CAAC,IAAIb,KAAK,GAAG,EAAE,EAAE;UACzBpB,QAAQ,CAAC8B,EAAC,CAAC,CAACX,KAAK,CAACC,KAAK,GAAG,CAAC,CAAC;QAC9B;QACA,IAAIa,GAAG,KAAK,CAAC,EAAE;UACb,IAAI,CAACjC,QAAQ,CAACgB,IAAI,CAAChB,QAAQ,CAAC8B,EAAC,CAAC,CAAC;QACjC;MACF;MACA,OAAO,IAAI;IACb;EAAC;IAAA5B,GAAA;IAAAC,KAAA,EACD,SAAA+B,MAAA,EAAQ;MACN,IAAI,CAACjB,OAAO,CAAC,CAAC;MACd,IAAI,CAACE,KAAK,CAAC,CAAC,CAAC;MACb,OAAO,IAAI;IACb;EAAC;IAAAjB,GAAA;IAAAC,KAAA,EACD,SAAAgC,gBAAgBC,GAAG,EAAErC,SAAS,EAAE;MAC9B,KAAK,IAAI+B,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,IAAI,CAAC9B,QAAQ,CAAC+B,MAAM,EAAED,CAAC,EAAE,EAAE;QAC7C,IAAMO,OAAO,GAAG,IAAI,CAACrC,QAAQ,CAAC8B,CAAC,CAAC;QAChC,IAAI,CAACM,GAAG,CAACE,aAAa,CAACD,OAAO,CAACxC,GAAG,CAAC,EACjC;QACF,IAAIwC,OAAO,CAACtC,SAAS,CAACgC,MAAM,GAAG,CAAC,EAAE;UAChC,KAAK,IAAIQ,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGF,OAAO,CAACtC,SAAS,CAACgC,MAAM,EAAEQ,CAAC,EAAE,EAAE;YACjD,IAAIxC,SAAS,CAACyC,OAAO,CAACH,OAAO,CAACtC,SAAS,CAACwC,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,EAChDxC,SAAS,CAACiB,IAAI,CAACqB,OAAO,CAACtC,SAAS,CAACwC,CAAC,CAAC,CAAC;UACxC;QACF,CAAC,MAAM;UACLF,OAAO,CAACF,eAAe,CAACC,GAAG,EAAErC,SAAS,CAAC;QACzC;MACF;MACA,OAAOA,SAAS;IAClB;EAAC;IAAAG,GAAA;IAAAC,KAAA,EACD,SAAAsC,yBAAyBC,OAAO,EAAErC,QAAQ,EAAE;MAC1CA,QAAQ,CAACsC,QAAQ,CAACpD,MAAM,CAAC;MACzB,IAAMqD,EAAE,GAAGrD,MAAM,CAACsD,eAAe,CAACH,OAAO,CAACI,KAAK,CAAC,GAAGJ,OAAO,CAACK,MAAM;MACjE,IAAMC,EAAE,GAAGzD,MAAM,CAACsD,eAAe,CAACH,OAAO,CAACO,GAAG,CAAC,GAAGP,OAAO,CAACK,MAAM;MAC/D,IAAIH,EAAE,GAAG,CAAC,IAAII,EAAE,GAAG,CAAC,IAAIJ,EAAE,GAAG,CAACF,OAAO,CAACK,MAAM,IAAIC,EAAE,GAAG,CAACN,OAAO,CAACK,MAAM,EAAE;QACpE,OAAO,KAAK;MACd;MACA,IAAMG,KAAK,GAAGzC,IAAI,CAAC0C,GAAG,CAACP,EAAE,IAAInC,IAAI,CAAC0C,GAAG,CAACP,EAAE,CAAC,GAAGnC,IAAI,CAAC0C,GAAG,CAACH,EAAE,CAAC,CAAC,CAAC;MAC1D,IAAMI,cAAc,GAAG/D,GAAG,CAACiC,IAAI,CAACoB,OAAO,CAACI,KAAK,CAAC,CAACO,IAAI,CAACX,OAAO,CAACO,GAAG,EAAEC,KAAK,CAAC;MACvE,IAAI7C,QAAQ,CAACiD,aAAa,CAACF,cAAc,CAAC,EAAE;QAC1C,OAAO;UAAEG,MAAM,EAAEhE,MAAM,CAACgE,MAAM,CAACrC,KAAK,CAAC,CAAC;UAAEsC,KAAK,EAAEJ,cAAc,CAAClC,KAAK,CAAC,CAAC;UAAEuC,KAAK,EAAEhD,IAAI,CAAC0C,GAAG,CAAC1C,IAAI,CAACF,GAAG,CAACqC,EAAE,EAAEI,EAAE,CAAC;QAAE,CAAC;MAC5G;MACA,IAAMU,EAAE,GAAGhB,OAAO,CAACK,MAAM,GAAGL,OAAO,CAACK,MAAM;MAC1C,IAAMY,KAAK,GAAGnE,MAAM,CAACkC,GAAG,CAACgB,OAAO,CAACI,KAAK,EAAEJ,OAAO,CAACO,GAAG,CAAC;MACpD,IAAMW,KAAK,GAAG,CACZ,CAACvD,QAAQ,CAACK,CAAC,EAAEL,QAAQ,CAACM,CAAC,CAAC,EACxB,CAACN,QAAQ,CAACM,CAAC,EAAEN,QAAQ,CAACO,CAAC,CAAC,EACxB,CAACP,QAAQ,CAACO,CAAC,EAAEP,QAAQ,CAACK,CAAC,CAAC,CACzB;MACD,KAAK,IAAIoB,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG8B,KAAK,CAAC7B,MAAM,EAAED,CAAC,EAAE,EAAE;QACrC,IAAM+B,KAAK,GAAGpE,MAAM,CAACiC,GAAG,CAACkC,KAAK,CAAC9B,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE8B,KAAK,CAAC9B,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;QAClD,IAAAgC,qBAAA,GAAyBpB,OAAO,CAACqB,qBAAqB,CAACJ,KAAK,EAAEE,KAAK,CAAC;UAAAG,sBAAA,GAAAC,cAAA,CAAAH,qBAAA;UAA7DI,MAAM,GAAAF,sBAAA;UAAEG,MAAM,GAAAH,sBAAA;QACrB,IAAIE,MAAM,CAACE,iBAAiB,CAACD,MAAM,CAAC,GAAGT,EAAE,EAAE;UACzC,OAAO;YACLH,MAAM,EAAEW,MAAM,CAAChD,KAAK,CAAC,CAAC,CAACK,GAAG,CAAC4C,MAAM,CAAC,CAACE,SAAS,CAAC,CAAC;YAC9Cb,KAAK,EAAEW,MAAM,CAACjD,KAAK,CAAC,CAAC;YACrBuC,KAAK,EAAEf,OAAO,CAACK,MAAM,GAAGmB,MAAM,CAACI,UAAU,CAACH,MAAM;UAClD,CAAC;QACH;MACF;MACA,OAAO,KAAK;IACd;EAAC;IAAAjE,GAAA;IAAAC,KAAA,EACD,SAAAoE,wBAAwBC,MAAM,EAAEnE,QAAQ,EAAE;MACxCA,QAAQ,CAACsC,QAAQ,CAACpD,MAAM,CAAC;MACzB,IAAI,CAACiF,MAAM,CAACC,eAAe,CAAClF,MAAM,CAAC,EACjC,OAAO,KAAK;MACd,IAAMkE,KAAK,GAAGhD,IAAI,CAAC0C,GAAG,CAAC5D,MAAM,CAACmF,gBAAgB,CAACF,MAAM,CAAC,CAAC;MACvD,IAAMd,EAAE,GAAGc,MAAM,CAACzB,MAAM,GAAGyB,MAAM,CAACzB,MAAM,GAAGU,KAAK,GAAGA,KAAK;MACxD,IAAMkB,UAAU,GAAGpF,MAAM,CAACqF,YAAY,CAACJ,MAAM,CAACK,MAAM,EAAExF,GAAG,CAAC;MAC1D,IAAIgB,QAAQ,CAACiD,aAAa,CAACkB,MAAM,CAACK,MAAM,CAAC,EAAE;QACzC,OAAO;UACLtB,MAAM,EAAEhE,MAAM,CAACgE,MAAM,CAACrC,KAAK,CAAC,CAAC;UAC7BsC,KAAK,EAAEmB,UAAU,CAACzD,KAAK,CAAC,CAAC;UACzBuC,KAAK,EAAEhD,IAAI,CAAC0C,GAAG,CAAC5D,MAAM,CAACmF,gBAAgB,CAACF,MAAM,CAAC;QACjD,CAAC;MACH;MACA,IAAMZ,KAAK,GAAG,CACZ,CAACvD,QAAQ,CAACK,CAAC,EAAEL,QAAQ,CAACM,CAAC,CAAC,EACxB,CAACN,QAAQ,CAACM,CAAC,EAAEN,QAAQ,CAACO,CAAC,CAAC,EACxB,CAACP,QAAQ,CAACO,CAAC,EAAEP,QAAQ,CAACK,CAAC,CAAC,CACzB;MACD,KAAK,IAAIoB,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG8B,KAAK,CAAC7B,MAAM,EAAED,CAAC,EAAE,EAAE;QACrCtC,MAAM,CAACkC,GAAG,CAACkC,KAAK,CAAC9B,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE8B,KAAK,CAAC9B,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;QACpCtC,MAAM,CAACsF,mBAAmB,CAACH,UAAU,EAAE,IAAI,EAAErF,GAAG,CAAC;QACjD,IAAMyF,CAAC,GAAGzF,GAAG,CAAC8E,iBAAiB,CAACI,MAAM,CAACK,MAAM,CAAC;QAC9C,IAAIE,CAAC,GAAGrB,EAAE,EAAE;UACV,OAAO;YACLH,MAAM,EAAEiB,MAAM,CAACK,MAAM,CAAC3D,KAAK,CAAC,CAAC,CAACK,GAAG,CAACjC,GAAG,CAAC,CAAC+E,SAAS,CAAC,CAAC;YAClDb,KAAK,EAAElE,GAAG,CAAC4B,KAAK,CAAC,CAAC;YAClBuC,KAAK,EAAEe,MAAM,CAACzB,MAAM,GAAGtC,IAAI,CAACuE,IAAI,CAACD,CAAC;UACpC,CAAC;QACH;MACF;MACA,OAAO,KAAK;IACd;EAAC;IAAA7E,GAAA;IAAAC,KAAA,EACD,SAAA8E,mBAAmBT,MAAM,EAAEzE,SAAS,EAAE;MACpC,KAAK,IAAI+B,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,IAAI,CAAC9B,QAAQ,CAAC+B,MAAM,EAAED,CAAC,EAAE,EAAE;QAC7C,IAAMO,OAAO,GAAG,IAAI,CAACrC,QAAQ,CAAC8B,CAAC,CAAC;QAChC,IAAI,CAAC0C,MAAM,CAAClC,aAAa,CAACD,OAAO,CAACxC,GAAG,CAAC,EACpC;QACF,IAAIwC,OAAO,CAACtC,SAAS,CAACgC,MAAM,GAAG,CAAC,EAAE;UAChC,KAAK,IAAIQ,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGF,OAAO,CAACtC,SAAS,CAACgC,MAAM,EAAEQ,CAAC,EAAE,EAAE;YACjD,IAAIxC,SAAS,CAACyC,OAAO,CAACH,OAAO,CAACtC,SAAS,CAACwC,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,EAChDxC,SAAS,CAACiB,IAAI,CAACqB,OAAO,CAACtC,SAAS,CAACwC,CAAC,CAAC,CAAC;UACxC;QACF,CAAC,MAAM;UACLF,OAAO,CAAC4C,kBAAkB,CAACT,MAAM,EAAEzE,SAAS,CAAC;QAC/C;MACF;IACF;EAAC;IAAAG,GAAA;IAAAC,KAAA,EACD,SAAA+E,oBAAoBxC,OAAO,EAAE3C,SAAS,EAAE;MACtC,KAAK,IAAI+B,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,IAAI,CAAC9B,QAAQ,CAAC+B,MAAM,EAAED,CAAC,EAAE,EAAE;QAC7C,IAAMO,OAAO,GAAG,IAAI,CAACrC,QAAQ,CAAC8B,CAAC,CAAC;QAChC,IAAI,CAACY,OAAO,CAACJ,aAAa,CAACD,OAAO,CAACxC,GAAG,CAAC,EACrC;QACF,IAAIwC,OAAO,CAACtC,SAAS,CAACgC,MAAM,GAAG,CAAC,EAAE;UAChC,KAAK,IAAIQ,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGF,OAAO,CAACtC,SAAS,CAACgC,MAAM,EAAEQ,CAAC,EAAE,EAAE;YACjD,IAAIxC,SAAS,CAACyC,OAAO,CAACH,OAAO,CAACtC,SAAS,CAACwC,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,EAChDxC,SAAS,CAACiB,IAAI,CAACqB,OAAO,CAACtC,SAAS,CAACwC,CAAC,CAAC,CAAC;UACxC;QACF,CAAC,MAAM;UACLF,OAAO,CAAC6C,mBAAmB,CAACxC,OAAO,EAAE3C,SAAS,CAAC;QACjD;MACF;IACF;EAAC;IAAAG,GAAA;IAAAC,KAAA,EACD,SAAAgF,gBAAgBX,MAAM,EAAE;MACtB9E,OAAO,CAAC4B,IAAI,CAACkD,MAAM,CAAC;MACpB,IAAMzE,SAAS,GAAG,EAAE;MACpB,IAAIqF,MAAM;QAAEC,GAAG,GAAG,KAAK;MACvB,IAAI,CAACJ,kBAAkB,CAACT,MAAM,EAAEzE,SAAS,CAAC;MAC1C,KAAK,IAAI+B,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG/B,SAAS,CAACgC,MAAM,EAAED,CAAC,EAAE,EAAE;QACzC,IAAIsD,MAAM,GAAG,IAAI,CAACb,uBAAuB,CAAC7E,OAAO,EAAEK,SAAS,CAAC+B,CAAC,CAAC,CAAC,EAAE;UAChEuD,GAAG,GAAG,IAAI;UACV3F,OAAO,CAACmF,MAAM,CAAClD,GAAG,CAACyD,MAAM,CAAC7B,MAAM,CAAC/B,cAAc,CAAC4D,MAAM,CAAC3B,KAAK,CAAC,CAAC;QAChE;MACF;MACA,IAAI4B,GAAG,EAAE;QACP,IAAMC,eAAe,GAAG5F,OAAO,CAACmF,MAAM,CAAC3D,KAAK,CAAC,CAAC,CAACK,GAAG,CAACiD,MAAM,CAACK,MAAM,CAAC;QACjE,IAAMpB,KAAK,GAAG6B,eAAe,CAACvD,MAAM,CAAC,CAAC;QACtC,OAAO;UAAEwB,MAAM,EAAE+B,eAAe,CAACjB,SAAS,CAAC,CAAC;UAAEZ,KAAK,EAALA;QAAM,CAAC;MACvD;MACA,OAAO,KAAK;IACd;EAAC;IAAAvD,GAAA;IAAAC,KAAA,EACD,SAAAoF,iBAAiB7C,OAAO,EAAE;MACxB/C,QAAQ,CAAC2B,IAAI,CAACoB,OAAO,CAAC;MACtB,IAAM3C,SAAS,GAAG,EAAE;MACpB,IAAIqF,MAAM;QAAEC,GAAG,GAAG,KAAK;MACvB,IAAI,CAACH,mBAAmB,CAACvF,QAAQ,EAAEI,SAAS,CAAC;MAC7C,KAAK,IAAI+B,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG/B,SAAS,CAACgC,MAAM,EAAED,CAAC,EAAE,EAAE;QACzC,IAAIsD,MAAM,GAAG,IAAI,CAAC3C,wBAAwB,CAAC9C,QAAQ,EAAEI,SAAS,CAAC+B,CAAC,CAAC,CAAC,EAAE;UAClEuD,GAAG,GAAG,IAAI;UACV1F,QAAQ,CAAC6F,SAAS,CAACJ,MAAM,CAAC7B,MAAM,CAAC/B,cAAc,CAAC4D,MAAM,CAAC3B,KAAK,CAAC,CAAC;QAChE;MACF;MACA,IAAI4B,GAAG,EAAE;QACP,IAAMC,eAAe,GAAG3F,QAAQ,CAAC8F,SAAS,CAAC,IAAI3G,OAAO,CAAC,CAAC,CAAC,CAACyC,GAAG,CAACmB,OAAO,CAAC+C,SAAS,CAACpG,GAAG,CAAC,CAAC;QACrF,IAAMoE,KAAK,GAAG6B,eAAe,CAACvD,MAAM,CAAC,CAAC;QACtC,OAAO;UAAEwB,MAAM,EAAE+B,eAAe,CAACjB,SAAS,CAAC,CAAC;UAAEZ,KAAK,EAALA;QAAM,CAAC;MACvD;MACA,OAAO,KAAK;IACd;EAAC;IAAAvD,GAAA;IAAAC,KAAA,EACD,SAAAuF,aAAatD,GAAG,EAAE;MAChB,IAAIA,GAAG,CAACuD,SAAS,CAAC5D,MAAM,CAAC,CAAC,KAAK,CAAC,EAC9B;MACF,IAAMhC,SAAS,GAAG,EAAE;MACpB,IAAIM,QAAQ;QAAEuF,QAAQ;QAAEC,QAAQ,GAAG,KAAK;MACxC,IAAI,CAAC1D,eAAe,CAACC,GAAG,EAAErC,SAAS,CAAC;MACpC,KAAK,IAAI+B,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG/B,SAAS,CAACgC,MAAM,EAAED,CAAC,EAAE,EAAE;QACzC,IAAMsD,MAAM,GAAGhD,GAAG,CAAC0D,iBAAiB,CAAC/F,SAAS,CAAC+B,CAAC,CAAC,CAACpB,CAAC,EAAEX,SAAS,CAAC+B,CAAC,CAAC,CAACnB,CAAC,EAAEZ,SAAS,CAAC+B,CAAC,CAAC,CAAClB,CAAC,EAAE,IAAI,EAAEvB,GAAG,CAAC;QAC/F,IAAI+F,MAAM,EAAE;UACV,IAAMW,WAAW,GAAGX,MAAM,CAAC7D,GAAG,CAACa,GAAG,CAAC4D,MAAM,CAAC,CAACjE,MAAM,CAAC,CAAC;UACnD,IAAI8D,QAAQ,GAAGE,WAAW,EAAE;YAC1BH,QAAQ,GAAGR,MAAM,CAAClE,KAAK,CAAC,CAAC,CAACS,GAAG,CAACS,GAAG,CAAC4D,MAAM,CAAC;YACzCH,QAAQ,GAAGE,WAAW;YACtB1F,QAAQ,GAAGN,SAAS,CAAC+B,CAAC,CAAC;UACzB;QACF;MACF;MACA,OAAO+D,QAAQ,GAAG,KAAK,GAAG;QAAEA,QAAQ,EAARA,QAAQ;QAAExF,QAAQ,EAARA,QAAQ;QAAEuF,QAAQ,EAARA;MAAS,CAAC,GAAG,KAAK;IACpE;EAAC;IAAA1F,GAAA;IAAAC,KAAA,EACD,SAAA8F,cAAcC,KAAK,EAAE;MAAA,IAAAC,KAAA;MACnBD,KAAK,CAACE,iBAAiB,CAAC,IAAI,EAAE,IAAI,CAAC;MACnCF,KAAK,CAACG,QAAQ,CAAC,UAACC,GAAG,EAAK;QACtB,IAAIA,GAAG,CAACC,MAAM,KAAK,IAAI,EAAE;UACvB,IAAIC,QAAQ;YAAEC,MAAM,GAAG,KAAK;UAC5B,IAAIH,GAAG,CAACE,QAAQ,CAACE,KAAK,KAAK,IAAI,EAAE;YAC/BD,MAAM,GAAG,IAAI;YACbD,QAAQ,GAAGF,GAAG,CAACE,QAAQ,CAACG,YAAY,CAAC,CAAC;UACxC,CAAC,MAAM;YACLH,QAAQ,GAAGF,GAAG,CAACE,QAAQ;UACzB;UACA,IAAMI,iBAAiB,GAAGJ,QAAQ,CAACK,YAAY,CAAC,UAAU,CAAC;UAC3D,KAAK,IAAI/E,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG8E,iBAAiB,CAACE,KAAK,EAAEhF,CAAC,IAAI,CAAC,EAAE;YACnD,IAAMiF,EAAE,GAAG,IAAIjI,OAAO,CAAC,CAAC,CAACkI,mBAAmB,CAACJ,iBAAiB,EAAE9E,CAAC,CAAC;YAClE,IAAMmF,EAAE,GAAG,IAAInI,OAAO,CAAC,CAAC,CAACkI,mBAAmB,CAACJ,iBAAiB,EAAE9E,CAAC,GAAG,CAAC,CAAC;YACtE,IAAMoF,EAAE,GAAG,IAAIpI,OAAO,CAAC,CAAC,CAACkI,mBAAmB,CAACJ,iBAAiB,EAAE9E,CAAC,GAAG,CAAC,CAAC;YACtEiF,EAAE,CAACI,YAAY,CAACb,GAAG,CAACc,WAAW,CAAC;YAChCH,EAAE,CAACE,YAAY,CAACb,GAAG,CAACc,WAAW,CAAC;YAChCF,EAAE,CAACC,YAAY,CAACb,GAAG,CAACc,WAAW,CAAC;YAChCjB,KAAI,CAAC/F,WAAW,CAAC,IAAIjB,QAAQ,CAAC4H,EAAE,EAAEE,EAAE,EAAEC,EAAE,CAAC,CAAC;UAC5C;UACA,IAAIT,MAAM,EAAE;YACVD,QAAQ,CAACa,OAAO,CAAC,CAAC;UACpB;QACF;MACF,CAAC,CAAC;MACF,IAAI,CAACnF,KAAK,CAAC,CAAC;MACZ,OAAO,IAAI;IACb;EAAC;EAAA,OAAAtC,MAAA;AAAA;AAEH,SACEA,MAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}