{"ast":null,"code":"import { Mesh, AnimationMixer, AnimationClip } from \"three\";\nclass MorphAnimMesh extends Mesh {\n  constructor(geometry, material) {\n    super(geometry, material);\n    this.type = \"MorphAnimMesh\";\n    this.mixer = new AnimationMixer(this);\n    this.activeAction = null;\n  }\n  setDirectionForward() {\n    this.mixer.timeScale = 1;\n  }\n  setDirectionBackward() {\n    this.mixer.timeScale = -1;\n  }\n  playAnimation(label, fps) {\n    if (this.activeAction) {\n      this.activeAction.stop();\n      this.activeAction = null;\n    }\n    const clip = AnimationClip.findByName(this, label);\n    if (clip) {\n      const action = this.mixer.clipAction(clip);\n      action.timeScale = clip.tracks.length * fps / clip.duration;\n      this.activeAction = action.play();\n    } else {\n      throw new Error(\"THREE.MorphAnimMesh: animations[\" + label + \"] undefined in .playAnimation()\");\n    }\n  }\n  updateAnimation(delta) {\n    this.mixer.update(delta);\n  }\n  copy(source, recursive) {\n    super.copy(source, recursive);\n    this.mixer = new AnimationMixer(this);\n    return this;\n  }\n}\nexport { MorphAnimMesh };","map":{"version":3,"names":["Mesh","AnimationMixer","AnimationClip","MorphAnimMesh","constructor","geometry","material","type","mixer","activeAction","setDirectionForward","timeScale","setDirectionBackward","playAnimation","label","fps","stop","clip","findByName","action","clipAction","tracks","length","duration","play","Error","updateAnimation","delta","update","copy","source","recursive"],"sources":["/home/krug/Coding/JavaScript/Websites/Personal/personal/node_modules/.pnpm/three-stdlib@2.23.7_three@0.151.3/node_modules/three-stdlib/misc/MorphAnimMesh.js"],"sourcesContent":["import { Mesh, AnimationMixer, AnimationClip } from \"three\";\nclass MorphAnimMesh extends Mesh {\n  constructor(geometry, material) {\n    super(geometry, material);\n    this.type = \"MorphAnimMesh\";\n    this.mixer = new AnimationMixer(this);\n    this.activeAction = null;\n  }\n  setDirectionForward() {\n    this.mixer.timeScale = 1;\n  }\n  setDirectionBackward() {\n    this.mixer.timeScale = -1;\n  }\n  playAnimation(label, fps) {\n    if (this.activeAction) {\n      this.activeAction.stop();\n      this.activeAction = null;\n    }\n    const clip = AnimationClip.findByName(this, label);\n    if (clip) {\n      const action = this.mixer.clipAction(clip);\n      action.timeScale = clip.tracks.length * fps / clip.duration;\n      this.activeAction = action.play();\n    } else {\n      throw new Error(\"THREE.MorphAnimMesh: animations[\" + label + \"] undefined in .playAnimation()\");\n    }\n  }\n  updateAnimation(delta) {\n    this.mixer.update(delta);\n  }\n  copy(source, recursive) {\n    super.copy(source, recursive);\n    this.mixer = new AnimationMixer(this);\n    return this;\n  }\n}\nexport {\n  MorphAnimMesh\n};\n"],"mappings":"AAAA,SAASA,IAAI,EAAEC,cAAc,EAAEC,aAAa,QAAQ,OAAO;AAC3D,MAAMC,aAAa,SAASH,IAAI,CAAC;EAC/BI,WAAWA,CAACC,QAAQ,EAAEC,QAAQ,EAAE;IAC9B,KAAK,CAACD,QAAQ,EAAEC,QAAQ,CAAC;IACzB,IAAI,CAACC,IAAI,GAAG,eAAe;IAC3B,IAAI,CAACC,KAAK,GAAG,IAAIP,cAAc,CAAC,IAAI,CAAC;IACrC,IAAI,CAACQ,YAAY,GAAG,IAAI;EAC1B;EACAC,mBAAmBA,CAAA,EAAG;IACpB,IAAI,CAACF,KAAK,CAACG,SAAS,GAAG,CAAC;EAC1B;EACAC,oBAAoBA,CAAA,EAAG;IACrB,IAAI,CAACJ,KAAK,CAACG,SAAS,GAAG,CAAC,CAAC;EAC3B;EACAE,aAAaA,CAACC,KAAK,EAAEC,GAAG,EAAE;IACxB,IAAI,IAAI,CAACN,YAAY,EAAE;MACrB,IAAI,CAACA,YAAY,CAACO,IAAI,CAAC,CAAC;MACxB,IAAI,CAACP,YAAY,GAAG,IAAI;IAC1B;IACA,MAAMQ,IAAI,GAAGf,aAAa,CAACgB,UAAU,CAAC,IAAI,EAAEJ,KAAK,CAAC;IAClD,IAAIG,IAAI,EAAE;MACR,MAAME,MAAM,GAAG,IAAI,CAACX,KAAK,CAACY,UAAU,CAACH,IAAI,CAAC;MAC1CE,MAAM,CAACR,SAAS,GAAGM,IAAI,CAACI,MAAM,CAACC,MAAM,GAAGP,GAAG,GAAGE,IAAI,CAACM,QAAQ;MAC3D,IAAI,CAACd,YAAY,GAAGU,MAAM,CAACK,IAAI,CAAC,CAAC;IACnC,CAAC,MAAM;MACL,MAAM,IAAIC,KAAK,CAAC,kCAAkC,GAAGX,KAAK,GAAG,iCAAiC,CAAC;IACjG;EACF;EACAY,eAAeA,CAACC,KAAK,EAAE;IACrB,IAAI,CAACnB,KAAK,CAACoB,MAAM,CAACD,KAAK,CAAC;EAC1B;EACAE,IAAIA,CAACC,MAAM,EAAEC,SAAS,EAAE;IACtB,KAAK,CAACF,IAAI,CAACC,MAAM,EAAEC,SAAS,CAAC;IAC7B,IAAI,CAACvB,KAAK,GAAG,IAAIP,cAAc,CAAC,IAAI,CAAC;IACrC,OAAO,IAAI;EACb;AACF;AACA,SACEE,aAAa"},"metadata":{},"sourceType":"module","externalDependencies":[]}