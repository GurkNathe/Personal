{"ast":null,"code":"import { Vector3, Matrix3, Box3, Matrix4, Ray, MathUtils } from \"three\";\nconst a = {\n  c: null,\n  // center\n  u: [/* @__PURE__ */new Vector3(), /* @__PURE__ */new Vector3(), /* @__PURE__ */new Vector3()],\n  // basis vectors\n  e: []\n  // half width\n};\n\nconst b = {\n  c: null,\n  // center\n  u: [/* @__PURE__ */new Vector3(), /* @__PURE__ */new Vector3(), /* @__PURE__ */new Vector3()],\n  // basis vectors\n  e: []\n  // half width\n};\n\nconst R = [[], [], []];\nconst AbsR = [[], [], []];\nconst t = [];\nconst xAxis = /* @__PURE__ */new Vector3();\nconst yAxis = /* @__PURE__ */new Vector3();\nconst zAxis = /* @__PURE__ */new Vector3();\nconst v1 = /* @__PURE__ */new Vector3();\nconst size = /* @__PURE__ */new Vector3();\nconst closestPoint = /* @__PURE__ */new Vector3();\nconst rotationMatrix = /* @__PURE__ */new Matrix3();\nconst aabb = /* @__PURE__ */new Box3();\nconst matrix = /* @__PURE__ */new Matrix4();\nconst inverse = /* @__PURE__ */new Matrix4();\nconst localRay = /* @__PURE__ */new Ray();\nclass OBB {\n  constructor() {\n    let center = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : new Vector3();\n    let halfSize = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : new Vector3();\n    let rotation = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : new Matrix3();\n    this.center = center;\n    this.halfSize = halfSize;\n    this.rotation = rotation;\n  }\n  set(center, halfSize, rotation) {\n    this.center = center;\n    this.halfSize = halfSize;\n    this.rotation = rotation;\n    return this;\n  }\n  copy(obb2) {\n    this.center.copy(obb2.center);\n    this.halfSize.copy(obb2.halfSize);\n    this.rotation.copy(obb2.rotation);\n    return this;\n  }\n  clone() {\n    return new this.constructor().copy(this);\n  }\n  getSize(result) {\n    return result.copy(this.halfSize).multiplyScalar(2);\n  }\n  /**\n   * Reference: Closest Point on OBB to Point in Real-Time Collision Detection\n   * by Christer Ericson (chapter 5.1.4)\n   */\n  clampPoint(point, result) {\n    const halfSize = this.halfSize;\n    v1.subVectors(point, this.center);\n    this.rotation.extractBasis(xAxis, yAxis, zAxis);\n    result.copy(this.center);\n    const x = MathUtils.clamp(v1.dot(xAxis), -halfSize.x, halfSize.x);\n    result.add(xAxis.multiplyScalar(x));\n    const y = MathUtils.clamp(v1.dot(yAxis), -halfSize.y, halfSize.y);\n    result.add(yAxis.multiplyScalar(y));\n    const z = MathUtils.clamp(v1.dot(zAxis), -halfSize.z, halfSize.z);\n    result.add(zAxis.multiplyScalar(z));\n    return result;\n  }\n  containsPoint(point) {\n    v1.subVectors(point, this.center);\n    this.rotation.extractBasis(xAxis, yAxis, zAxis);\n    return Math.abs(v1.dot(xAxis)) <= this.halfSize.x && Math.abs(v1.dot(yAxis)) <= this.halfSize.y && Math.abs(v1.dot(zAxis)) <= this.halfSize.z;\n  }\n  intersectsBox3(box3) {\n    return this.intersectsOBB(obb.fromBox3(box3));\n  }\n  intersectsSphere(sphere) {\n    this.clampPoint(sphere.center, closestPoint);\n    return closestPoint.distanceToSquared(sphere.center) <= sphere.radius * sphere.radius;\n  }\n  /**\n   * Reference: OBB-OBB Intersection in Real-Time Collision Detection\n   * by Christer Ericson (chapter 4.4.1)\n   *\n   */\n  intersectsOBB(obb2) {\n    let epsilon = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : Number.EPSILON;\n    a.c = this.center;\n    a.e[0] = this.halfSize.x;\n    a.e[1] = this.halfSize.y;\n    a.e[2] = this.halfSize.z;\n    this.rotation.extractBasis(a.u[0], a.u[1], a.u[2]);\n    b.c = obb2.center;\n    b.e[0] = obb2.halfSize.x;\n    b.e[1] = obb2.halfSize.y;\n    b.e[2] = obb2.halfSize.z;\n    obb2.rotation.extractBasis(b.u[0], b.u[1], b.u[2]);\n    for (let i = 0; i < 3; i++) {\n      for (let j = 0; j < 3; j++) {\n        R[i][j] = a.u[i].dot(b.u[j]);\n      }\n    }\n    v1.subVectors(b.c, a.c);\n    t[0] = v1.dot(a.u[0]);\n    t[1] = v1.dot(a.u[1]);\n    t[2] = v1.dot(a.u[2]);\n    for (let i = 0; i < 3; i++) {\n      for (let j = 0; j < 3; j++) {\n        AbsR[i][j] = Math.abs(R[i][j]) + epsilon;\n      }\n    }\n    let ra, rb;\n    for (let i = 0; i < 3; i++) {\n      ra = a.e[i];\n      rb = b.e[0] * AbsR[i][0] + b.e[1] * AbsR[i][1] + b.e[2] * AbsR[i][2];\n      if (Math.abs(t[i]) > ra + rb) return false;\n    }\n    for (let i = 0; i < 3; i++) {\n      ra = a.e[0] * AbsR[0][i] + a.e[1] * AbsR[1][i] + a.e[2] * AbsR[2][i];\n      rb = b.e[i];\n      if (Math.abs(t[0] * R[0][i] + t[1] * R[1][i] + t[2] * R[2][i]) > ra + rb) return false;\n    }\n    ra = a.e[1] * AbsR[2][0] + a.e[2] * AbsR[1][0];\n    rb = b.e[1] * AbsR[0][2] + b.e[2] * AbsR[0][1];\n    if (Math.abs(t[2] * R[1][0] - t[1] * R[2][0]) > ra + rb) return false;\n    ra = a.e[1] * AbsR[2][1] + a.e[2] * AbsR[1][1];\n    rb = b.e[0] * AbsR[0][2] + b.e[2] * AbsR[0][0];\n    if (Math.abs(t[2] * R[1][1] - t[1] * R[2][1]) > ra + rb) return false;\n    ra = a.e[1] * AbsR[2][2] + a.e[2] * AbsR[1][2];\n    rb = b.e[0] * AbsR[0][1] + b.e[1] * AbsR[0][0];\n    if (Math.abs(t[2] * R[1][2] - t[1] * R[2][2]) > ra + rb) return false;\n    ra = a.e[0] * AbsR[2][0] + a.e[2] * AbsR[0][0];\n    rb = b.e[1] * AbsR[1][2] + b.e[2] * AbsR[1][1];\n    if (Math.abs(t[0] * R[2][0] - t[2] * R[0][0]) > ra + rb) return false;\n    ra = a.e[0] * AbsR[2][1] + a.e[2] * AbsR[0][1];\n    rb = b.e[0] * AbsR[1][2] + b.e[2] * AbsR[1][0];\n    if (Math.abs(t[0] * R[2][1] - t[2] * R[0][1]) > ra + rb) return false;\n    ra = a.e[0] * AbsR[2][2] + a.e[2] * AbsR[0][2];\n    rb = b.e[0] * AbsR[1][1] + b.e[1] * AbsR[1][0];\n    if (Math.abs(t[0] * R[2][2] - t[2] * R[0][2]) > ra + rb) return false;\n    ra = a.e[0] * AbsR[1][0] + a.e[1] * AbsR[0][0];\n    rb = b.e[1] * AbsR[2][2] + b.e[2] * AbsR[2][1];\n    if (Math.abs(t[1] * R[0][0] - t[0] * R[1][0]) > ra + rb) return false;\n    ra = a.e[0] * AbsR[1][1] + a.e[1] * AbsR[0][1];\n    rb = b.e[0] * AbsR[2][2] + b.e[2] * AbsR[2][0];\n    if (Math.abs(t[1] * R[0][1] - t[0] * R[1][1]) > ra + rb) return false;\n    ra = a.e[0] * AbsR[1][2] + a.e[1] * AbsR[0][2];\n    rb = b.e[0] * AbsR[2][1] + b.e[1] * AbsR[2][0];\n    if (Math.abs(t[1] * R[0][2] - t[0] * R[1][2]) > ra + rb) return false;\n    return true;\n  }\n  /**\n   * Reference: Testing Box Against Plane in Real-Time Collision Detection\n   * by Christer Ericson (chapter 5.2.3)\n   */\n  intersectsPlane(plane) {\n    this.rotation.extractBasis(xAxis, yAxis, zAxis);\n    const r = this.halfSize.x * Math.abs(plane.normal.dot(xAxis)) + this.halfSize.y * Math.abs(plane.normal.dot(yAxis)) + this.halfSize.z * Math.abs(plane.normal.dot(zAxis));\n    const d = plane.normal.dot(this.center) - plane.constant;\n    return Math.abs(d) <= r;\n  }\n  /**\n   * Performs a ray/OBB intersection test and stores the intersection point\n   * to the given 3D vector. If no intersection is detected, *null* is returned.\n   */\n  intersectRay(ray, result) {\n    this.getSize(size);\n    aabb.setFromCenterAndSize(v1.set(0, 0, 0), size);\n    matrix.setFromMatrix3(this.rotation);\n    matrix.setPosition(this.center);\n    inverse.copy(matrix).invert();\n    localRay.copy(ray).applyMatrix4(inverse);\n    if (localRay.intersectBox(aabb, result)) {\n      return result.applyMatrix4(matrix);\n    } else {\n      return null;\n    }\n  }\n  /**\n   * Performs a ray/OBB intersection test. Returns either true or false if\n   * there is a intersection or not.\n   */\n  intersectsRay(ray) {\n    return this.intersectRay(ray, v1) !== null;\n  }\n  fromBox3(box3) {\n    box3.getCenter(this.center);\n    box3.getSize(this.halfSize).multiplyScalar(0.5);\n    this.rotation.identity();\n    return this;\n  }\n  equals(obb2) {\n    return obb2.center.equals(this.center) && obb2.halfSize.equals(this.halfSize) && obb2.rotation.equals(this.rotation);\n  }\n  applyMatrix4(matrix2) {\n    const e = matrix2.elements;\n    let sx = v1.set(e[0], e[1], e[2]).length();\n    const sy = v1.set(e[4], e[5], e[6]).length();\n    const sz = v1.set(e[8], e[9], e[10]).length();\n    const det = matrix2.determinant();\n    if (det < 0) sx = -sx;\n    rotationMatrix.setFromMatrix4(matrix2);\n    const invSX = 1 / sx;\n    const invSY = 1 / sy;\n    const invSZ = 1 / sz;\n    rotationMatrix.elements[0] *= invSX;\n    rotationMatrix.elements[1] *= invSX;\n    rotationMatrix.elements[2] *= invSX;\n    rotationMatrix.elements[3] *= invSY;\n    rotationMatrix.elements[4] *= invSY;\n    rotationMatrix.elements[5] *= invSY;\n    rotationMatrix.elements[6] *= invSZ;\n    rotationMatrix.elements[7] *= invSZ;\n    rotationMatrix.elements[8] *= invSZ;\n    this.rotation.multiply(rotationMatrix);\n    this.halfSize.x *= sx;\n    this.halfSize.y *= sy;\n    this.halfSize.z *= sz;\n    v1.setFromMatrixPosition(matrix2);\n    this.center.add(v1);\n    return this;\n  }\n}\nconst obb = /* @__PURE__ */new OBB();\nexport { OBB };","map":{"version":3,"names":["Vector3","Matrix3","Box3","Matrix4","Ray","MathUtils","a","c","u","e","b","R","AbsR","t","xAxis","yAxis","zAxis","v1","size","closestPoint","rotationMatrix","aabb","matrix","inverse","localRay","OBB","constructor","center","arguments","length","undefined","halfSize","rotation","set","copy","obb2","clone","getSize","result","multiplyScalar","clampPoint","point","subVectors","extractBasis","x","clamp","dot","add","y","z","containsPoint","Math","abs","intersectsBox3","box3","intersectsOBB","obb","fromBox3","intersectsSphere","sphere","distanceToSquared","radius","epsilon","Number","EPSILON","i","j","ra","rb","intersectsPlane","plane","r","normal","d","constant","intersectRay","ray","setFromCenterAndSize","setFromMatrix3","setPosition","invert","applyMatrix4","intersectBox","intersectsRay","getCenter","identity","equals","matrix2","elements","sx","sy","sz","det","determinant","setFromMatrix4","invSX","invSY","invSZ","multiply","setFromMatrixPosition"],"sources":["/home/krug/Coding/JavaScript/Websites/Personal/personal/node_modules/.pnpm/three-stdlib@2.23.7_three@0.151.3/node_modules/three-stdlib/math/OBB.js"],"sourcesContent":["import { Vector3, Matrix3, Box3, Matrix4, Ray, MathUtils } from \"three\";\nconst a = {\n  c: null,\n  // center\n  u: [/* @__PURE__ */ new Vector3(), /* @__PURE__ */ new Vector3(), /* @__PURE__ */ new Vector3()],\n  // basis vectors\n  e: []\n  // half width\n};\nconst b = {\n  c: null,\n  // center\n  u: [/* @__PURE__ */ new Vector3(), /* @__PURE__ */ new Vector3(), /* @__PURE__ */ new Vector3()],\n  // basis vectors\n  e: []\n  // half width\n};\nconst R = [[], [], []];\nconst AbsR = [[], [], []];\nconst t = [];\nconst xAxis = /* @__PURE__ */ new Vector3();\nconst yAxis = /* @__PURE__ */ new Vector3();\nconst zAxis = /* @__PURE__ */ new Vector3();\nconst v1 = /* @__PURE__ */ new Vector3();\nconst size = /* @__PURE__ */ new Vector3();\nconst closestPoint = /* @__PURE__ */ new Vector3();\nconst rotationMatrix = /* @__PURE__ */ new Matrix3();\nconst aabb = /* @__PURE__ */ new Box3();\nconst matrix = /* @__PURE__ */ new Matrix4();\nconst inverse = /* @__PURE__ */ new Matrix4();\nconst localRay = /* @__PURE__ */ new Ray();\nclass OBB {\n  constructor(center = new Vector3(), halfSize = new Vector3(), rotation = new Matrix3()) {\n    this.center = center;\n    this.halfSize = halfSize;\n    this.rotation = rotation;\n  }\n  set(center, halfSize, rotation) {\n    this.center = center;\n    this.halfSize = halfSize;\n    this.rotation = rotation;\n    return this;\n  }\n  copy(obb2) {\n    this.center.copy(obb2.center);\n    this.halfSize.copy(obb2.halfSize);\n    this.rotation.copy(obb2.rotation);\n    return this;\n  }\n  clone() {\n    return new this.constructor().copy(this);\n  }\n  getSize(result) {\n    return result.copy(this.halfSize).multiplyScalar(2);\n  }\n  /**\n   * Reference: Closest Point on OBB to Point in Real-Time Collision Detection\n   * by Christer Ericson (chapter 5.1.4)\n   */\n  clampPoint(point, result) {\n    const halfSize = this.halfSize;\n    v1.subVectors(point, this.center);\n    this.rotation.extractBasis(xAxis, yAxis, zAxis);\n    result.copy(this.center);\n    const x = MathUtils.clamp(v1.dot(xAxis), -halfSize.x, halfSize.x);\n    result.add(xAxis.multiplyScalar(x));\n    const y = MathUtils.clamp(v1.dot(yAxis), -halfSize.y, halfSize.y);\n    result.add(yAxis.multiplyScalar(y));\n    const z = MathUtils.clamp(v1.dot(zAxis), -halfSize.z, halfSize.z);\n    result.add(zAxis.multiplyScalar(z));\n    return result;\n  }\n  containsPoint(point) {\n    v1.subVectors(point, this.center);\n    this.rotation.extractBasis(xAxis, yAxis, zAxis);\n    return Math.abs(v1.dot(xAxis)) <= this.halfSize.x && Math.abs(v1.dot(yAxis)) <= this.halfSize.y && Math.abs(v1.dot(zAxis)) <= this.halfSize.z;\n  }\n  intersectsBox3(box3) {\n    return this.intersectsOBB(obb.fromBox3(box3));\n  }\n  intersectsSphere(sphere) {\n    this.clampPoint(sphere.center, closestPoint);\n    return closestPoint.distanceToSquared(sphere.center) <= sphere.radius * sphere.radius;\n  }\n  /**\n   * Reference: OBB-OBB Intersection in Real-Time Collision Detection\n   * by Christer Ericson (chapter 4.4.1)\n   *\n   */\n  intersectsOBB(obb2, epsilon = Number.EPSILON) {\n    a.c = this.center;\n    a.e[0] = this.halfSize.x;\n    a.e[1] = this.halfSize.y;\n    a.e[2] = this.halfSize.z;\n    this.rotation.extractBasis(a.u[0], a.u[1], a.u[2]);\n    b.c = obb2.center;\n    b.e[0] = obb2.halfSize.x;\n    b.e[1] = obb2.halfSize.y;\n    b.e[2] = obb2.halfSize.z;\n    obb2.rotation.extractBasis(b.u[0], b.u[1], b.u[2]);\n    for (let i = 0; i < 3; i++) {\n      for (let j = 0; j < 3; j++) {\n        R[i][j] = a.u[i].dot(b.u[j]);\n      }\n    }\n    v1.subVectors(b.c, a.c);\n    t[0] = v1.dot(a.u[0]);\n    t[1] = v1.dot(a.u[1]);\n    t[2] = v1.dot(a.u[2]);\n    for (let i = 0; i < 3; i++) {\n      for (let j = 0; j < 3; j++) {\n        AbsR[i][j] = Math.abs(R[i][j]) + epsilon;\n      }\n    }\n    let ra, rb;\n    for (let i = 0; i < 3; i++) {\n      ra = a.e[i];\n      rb = b.e[0] * AbsR[i][0] + b.e[1] * AbsR[i][1] + b.e[2] * AbsR[i][2];\n      if (Math.abs(t[i]) > ra + rb)\n        return false;\n    }\n    for (let i = 0; i < 3; i++) {\n      ra = a.e[0] * AbsR[0][i] + a.e[1] * AbsR[1][i] + a.e[2] * AbsR[2][i];\n      rb = b.e[i];\n      if (Math.abs(t[0] * R[0][i] + t[1] * R[1][i] + t[2] * R[2][i]) > ra + rb)\n        return false;\n    }\n    ra = a.e[1] * AbsR[2][0] + a.e[2] * AbsR[1][0];\n    rb = b.e[1] * AbsR[0][2] + b.e[2] * AbsR[0][1];\n    if (Math.abs(t[2] * R[1][0] - t[1] * R[2][0]) > ra + rb)\n      return false;\n    ra = a.e[1] * AbsR[2][1] + a.e[2] * AbsR[1][1];\n    rb = b.e[0] * AbsR[0][2] + b.e[2] * AbsR[0][0];\n    if (Math.abs(t[2] * R[1][1] - t[1] * R[2][1]) > ra + rb)\n      return false;\n    ra = a.e[1] * AbsR[2][2] + a.e[2] * AbsR[1][2];\n    rb = b.e[0] * AbsR[0][1] + b.e[1] * AbsR[0][0];\n    if (Math.abs(t[2] * R[1][2] - t[1] * R[2][2]) > ra + rb)\n      return false;\n    ra = a.e[0] * AbsR[2][0] + a.e[2] * AbsR[0][0];\n    rb = b.e[1] * AbsR[1][2] + b.e[2] * AbsR[1][1];\n    if (Math.abs(t[0] * R[2][0] - t[2] * R[0][0]) > ra + rb)\n      return false;\n    ra = a.e[0] * AbsR[2][1] + a.e[2] * AbsR[0][1];\n    rb = b.e[0] * AbsR[1][2] + b.e[2] * AbsR[1][0];\n    if (Math.abs(t[0] * R[2][1] - t[2] * R[0][1]) > ra + rb)\n      return false;\n    ra = a.e[0] * AbsR[2][2] + a.e[2] * AbsR[0][2];\n    rb = b.e[0] * AbsR[1][1] + b.e[1] * AbsR[1][0];\n    if (Math.abs(t[0] * R[2][2] - t[2] * R[0][2]) > ra + rb)\n      return false;\n    ra = a.e[0] * AbsR[1][0] + a.e[1] * AbsR[0][0];\n    rb = b.e[1] * AbsR[2][2] + b.e[2] * AbsR[2][1];\n    if (Math.abs(t[1] * R[0][0] - t[0] * R[1][0]) > ra + rb)\n      return false;\n    ra = a.e[0] * AbsR[1][1] + a.e[1] * AbsR[0][1];\n    rb = b.e[0] * AbsR[2][2] + b.e[2] * AbsR[2][0];\n    if (Math.abs(t[1] * R[0][1] - t[0] * R[1][1]) > ra + rb)\n      return false;\n    ra = a.e[0] * AbsR[1][2] + a.e[1] * AbsR[0][2];\n    rb = b.e[0] * AbsR[2][1] + b.e[1] * AbsR[2][0];\n    if (Math.abs(t[1] * R[0][2] - t[0] * R[1][2]) > ra + rb)\n      return false;\n    return true;\n  }\n  /**\n   * Reference: Testing Box Against Plane in Real-Time Collision Detection\n   * by Christer Ericson (chapter 5.2.3)\n   */\n  intersectsPlane(plane) {\n    this.rotation.extractBasis(xAxis, yAxis, zAxis);\n    const r = this.halfSize.x * Math.abs(plane.normal.dot(xAxis)) + this.halfSize.y * Math.abs(plane.normal.dot(yAxis)) + this.halfSize.z * Math.abs(plane.normal.dot(zAxis));\n    const d = plane.normal.dot(this.center) - plane.constant;\n    return Math.abs(d) <= r;\n  }\n  /**\n   * Performs a ray/OBB intersection test and stores the intersection point\n   * to the given 3D vector. If no intersection is detected, *null* is returned.\n   */\n  intersectRay(ray, result) {\n    this.getSize(size);\n    aabb.setFromCenterAndSize(v1.set(0, 0, 0), size);\n    matrix.setFromMatrix3(this.rotation);\n    matrix.setPosition(this.center);\n    inverse.copy(matrix).invert();\n    localRay.copy(ray).applyMatrix4(inverse);\n    if (localRay.intersectBox(aabb, result)) {\n      return result.applyMatrix4(matrix);\n    } else {\n      return null;\n    }\n  }\n  /**\n   * Performs a ray/OBB intersection test. Returns either true or false if\n   * there is a intersection or not.\n   */\n  intersectsRay(ray) {\n    return this.intersectRay(ray, v1) !== null;\n  }\n  fromBox3(box3) {\n    box3.getCenter(this.center);\n    box3.getSize(this.halfSize).multiplyScalar(0.5);\n    this.rotation.identity();\n    return this;\n  }\n  equals(obb2) {\n    return obb2.center.equals(this.center) && obb2.halfSize.equals(this.halfSize) && obb2.rotation.equals(this.rotation);\n  }\n  applyMatrix4(matrix2) {\n    const e = matrix2.elements;\n    let sx = v1.set(e[0], e[1], e[2]).length();\n    const sy = v1.set(e[4], e[5], e[6]).length();\n    const sz = v1.set(e[8], e[9], e[10]).length();\n    const det = matrix2.determinant();\n    if (det < 0)\n      sx = -sx;\n    rotationMatrix.setFromMatrix4(matrix2);\n    const invSX = 1 / sx;\n    const invSY = 1 / sy;\n    const invSZ = 1 / sz;\n    rotationMatrix.elements[0] *= invSX;\n    rotationMatrix.elements[1] *= invSX;\n    rotationMatrix.elements[2] *= invSX;\n    rotationMatrix.elements[3] *= invSY;\n    rotationMatrix.elements[4] *= invSY;\n    rotationMatrix.elements[5] *= invSY;\n    rotationMatrix.elements[6] *= invSZ;\n    rotationMatrix.elements[7] *= invSZ;\n    rotationMatrix.elements[8] *= invSZ;\n    this.rotation.multiply(rotationMatrix);\n    this.halfSize.x *= sx;\n    this.halfSize.y *= sy;\n    this.halfSize.z *= sz;\n    v1.setFromMatrixPosition(matrix2);\n    this.center.add(v1);\n    return this;\n  }\n}\nconst obb = /* @__PURE__ */ new OBB();\nexport {\n  OBB\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}