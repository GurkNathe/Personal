{"ast":null,"code":"var __defProp = Object.defineProperty;\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value\n}) : obj[key] = value;\nvar __publicField = (obj, key, value) => {\n  __defNormalProp(obj, typeof key !== \"symbol\" ? key + \"\" : key, value);\n  return value;\n};\nimport { Mesh, Object3D, SphereGeometry, MeshBasicMaterial } from \"three\";\nimport { GLTFLoader } from \"../loaders/GLTFLoader.js\";\nimport { MotionControllerConstants, fetchProfile, MotionController } from \"../libs/MotionControllers.js\";\nconst DEFAULT_PROFILES_PATH = \"https://cdn.jsdelivr.net/npm/@webxr-input-profiles/assets@1.0/dist/profiles\";\nconst DEFAULT_PROFILE = \"generic-trigger\";\nconst applyEnvironmentMap = (envMap, obj) => {\n  obj.traverse(child => {\n    if (child instanceof Mesh && \"envMap\" in child.material) {\n      child.material.envMap = envMap;\n      child.material.needsUpdate = true;\n    }\n  });\n};\nclass XRControllerModel extends Object3D {\n  constructor() {\n    super();\n    __publicField(this, \"envMap\");\n    __publicField(this, \"motionController\");\n    this.motionController = null;\n    this.envMap = null;\n  }\n  setEnvironmentMap(envMap) {\n    if (this.envMap == envMap) {\n      return this;\n    }\n    this.envMap = envMap;\n    applyEnvironmentMap(this.envMap, this);\n    return this;\n  }\n  /**\n   * Polls data from the XRInputSource and updates the model's components to match\n   * the real world data\n   */\n  updateMatrixWorld(force) {\n    super.updateMatrixWorld(force);\n    if (!this.motionController) return;\n    this.motionController.updateFromGamepad();\n    Object.values(this.motionController.components).forEach(component => {\n      Object.values(component.visualResponses).forEach(visualResponse => {\n        const {\n          valueNode,\n          minNode,\n          maxNode,\n          value,\n          valueNodeProperty\n        } = visualResponse;\n        if (!valueNode) return;\n        if (valueNodeProperty === MotionControllerConstants.VisualResponseProperty.VISIBILITY && typeof value === \"boolean\") {\n          valueNode.visible = value;\n        } else if (valueNodeProperty === MotionControllerConstants.VisualResponseProperty.TRANSFORM && minNode && maxNode && typeof value === \"number\") {\n          valueNode.quaternion.slerpQuaternions(minNode.quaternion, maxNode.quaternion, value);\n          valueNode.position.lerpVectors(minNode.position, maxNode.position, value);\n        }\n      });\n    });\n  }\n}\nfunction findNodes(motionController, scene) {\n  Object.values(motionController.components).forEach(component => {\n    const {\n      type,\n      touchPointNodeName,\n      visualResponses\n    } = component;\n    if (type === MotionControllerConstants.ComponentType.TOUCHPAD && touchPointNodeName) {\n      component.touchPointNode = scene.getObjectByName(touchPointNodeName);\n      if (component.touchPointNode) {\n        const sphereGeometry = new SphereGeometry(1e-3);\n        const material = new MeshBasicMaterial({\n          color: 255\n        });\n        const sphere = new Mesh(sphereGeometry, material);\n        component.touchPointNode.add(sphere);\n      } else {\n        console.warn(`Could not find touch dot, ${component.touchPointNodeName}, in touchpad component ${component.id}`);\n      }\n    }\n    Object.values(visualResponses).forEach(visualResponse => {\n      const {\n        valueNodeName,\n        minNodeName,\n        maxNodeName,\n        valueNodeProperty\n      } = visualResponse;\n      if (valueNodeProperty === MotionControllerConstants.VisualResponseProperty.TRANSFORM && minNodeName && maxNodeName) {\n        visualResponse.minNode = scene.getObjectByName(minNodeName);\n        visualResponse.maxNode = scene.getObjectByName(maxNodeName);\n        if (!visualResponse.minNode) {\n          console.warn(`Could not find ${minNodeName} in the model`);\n          return;\n        }\n        if (!visualResponse.maxNode) {\n          console.warn(`Could not find ${maxNodeName} in the model`);\n          return;\n        }\n      }\n      visualResponse.valueNode = scene.getObjectByName(valueNodeName);\n      if (!visualResponse.valueNode) {\n        console.warn(`Could not find ${valueNodeName} in the model`);\n      }\n    });\n  });\n}\nfunction addAssetSceneToControllerModel(controllerModel, scene) {\n  findNodes(controllerModel.motionController, scene);\n  if (controllerModel.envMap) {\n    applyEnvironmentMap(controllerModel.envMap, scene);\n  }\n  controllerModel.add(scene);\n}\nclass XRControllerModelFactory {\n  constructor() {\n    let gltfLoader = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n    __publicField(this, \"gltfLoader\");\n    __publicField(this, \"path\");\n    __publicField(this, \"_assetCache\");\n    this.gltfLoader = gltfLoader;\n    this.path = DEFAULT_PROFILES_PATH;\n    this._assetCache = {};\n    if (!this.gltfLoader) {\n      this.gltfLoader = new GLTFLoader();\n    }\n  }\n  createControllerModel(controller) {\n    const controllerModel = new XRControllerModel();\n    let scene = null;\n    const onConnected = event => {\n      const xrInputSource = event.data;\n      if (xrInputSource.targetRayMode !== \"tracked-pointer\" || !xrInputSource.gamepad) return;\n      fetchProfile(xrInputSource, this.path, DEFAULT_PROFILE).then(_ref => {\n        let {\n          profile,\n          assetPath\n        } = _ref;\n        if (!assetPath) {\n          throw new Error(\"no asset path\");\n        }\n        controllerModel.motionController = new MotionController(xrInputSource, profile, assetPath);\n        const assetUrl = controllerModel.motionController.assetUrl;\n        const cachedAsset = this._assetCache[assetUrl];\n        if (cachedAsset) {\n          scene = cachedAsset.scene.clone();\n          addAssetSceneToControllerModel(controllerModel, scene);\n        } else {\n          if (!this.gltfLoader) {\n            throw new Error(\"GLTFLoader not set.\");\n          }\n          this.gltfLoader.setPath(\"\");\n          this.gltfLoader.load(controllerModel.motionController.assetUrl, asset => {\n            if (!controllerModel.motionController) {\n              console.warn(\"motionController gone while gltf load, bailing...\");\n              return;\n            }\n            this._assetCache[assetUrl] = asset;\n            scene = asset.scene.clone();\n            addAssetSceneToControllerModel(controllerModel, scene);\n          }, () => {}, () => {\n            throw new Error(`Asset ${assetUrl} missing or malformed.`);\n          });\n        }\n      }).catch(err => {\n        console.warn(err);\n      });\n    };\n    controller.addEventListener(\"connected\", onConnected);\n    const onDisconnected = () => {\n      controller.removeEventListener(\"connected\", onConnected);\n      controller.removeEventListener(\"disconnected\", onDisconnected);\n      controllerModel.motionController = null;\n      if (scene) {\n        controllerModel.remove(scene);\n      }\n      scene = null;\n    };\n    controller.addEventListener(\"disconnected\", onDisconnected);\n    return controllerModel;\n  }\n}\nexport { XRControllerModelFactory };","map":{"version":3,"names":["__defProp","Object","defineProperty","__defNormalProp","obj","key","value","enumerable","configurable","writable","__publicField","Mesh","Object3D","SphereGeometry","MeshBasicMaterial","GLTFLoader","MotionControllerConstants","fetchProfile","MotionController","DEFAULT_PROFILES_PATH","DEFAULT_PROFILE","applyEnvironmentMap","envMap","traverse","child","material","needsUpdate","XRControllerModel","constructor","motionController","setEnvironmentMap","updateMatrixWorld","force","updateFromGamepad","values","components","forEach","component","visualResponses","visualResponse","valueNode","minNode","maxNode","valueNodeProperty","VisualResponseProperty","VISIBILITY","visible","TRANSFORM","quaternion","slerpQuaternions","position","lerpVectors","findNodes","scene","type","touchPointNodeName","ComponentType","TOUCHPAD","touchPointNode","getObjectByName","sphereGeometry","color","sphere","add","console","warn","id","valueNodeName","minNodeName","maxNodeName","addAssetSceneToControllerModel","controllerModel","XRControllerModelFactory","gltfLoader","arguments","length","undefined","path","_assetCache","createControllerModel","controller","onConnected","event","xrInputSource","data","targetRayMode","gamepad","then","_ref","profile","assetPath","Error","assetUrl","cachedAsset","clone","setPath","load","asset","catch","err","addEventListener","onDisconnected","removeEventListener","remove"],"sources":["/home/krug/Coding/JavaScript/Websites/Personal/personal/node_modules/.pnpm/three-stdlib@2.23.7_three@0.151.3/node_modules/three-stdlib/webxr/XRControllerModelFactory.js"],"sourcesContent":["var __defProp = Object.defineProperty;\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;\nvar __publicField = (obj, key, value) => {\n  __defNormalProp(obj, typeof key !== \"symbol\" ? key + \"\" : key, value);\n  return value;\n};\nimport { Mesh, Object3D, SphereGeometry, MeshBasicMaterial } from \"three\";\nimport { GLTFLoader } from \"../loaders/GLTFLoader.js\";\nimport { MotionControllerConstants, fetchProfile, MotionController } from \"../libs/MotionControllers.js\";\nconst DEFAULT_PROFILES_PATH = \"https://cdn.jsdelivr.net/npm/@webxr-input-profiles/assets@1.0/dist/profiles\";\nconst DEFAULT_PROFILE = \"generic-trigger\";\nconst applyEnvironmentMap = (envMap, obj) => {\n  obj.traverse((child) => {\n    if (child instanceof Mesh && \"envMap\" in child.material) {\n      child.material.envMap = envMap;\n      child.material.needsUpdate = true;\n    }\n  });\n};\nclass XRControllerModel extends Object3D {\n  constructor() {\n    super();\n    __publicField(this, \"envMap\");\n    __publicField(this, \"motionController\");\n    this.motionController = null;\n    this.envMap = null;\n  }\n  setEnvironmentMap(envMap) {\n    if (this.envMap == envMap) {\n      return this;\n    }\n    this.envMap = envMap;\n    applyEnvironmentMap(this.envMap, this);\n    return this;\n  }\n  /**\n   * Polls data from the XRInputSource and updates the model's components to match\n   * the real world data\n   */\n  updateMatrixWorld(force) {\n    super.updateMatrixWorld(force);\n    if (!this.motionController)\n      return;\n    this.motionController.updateFromGamepad();\n    Object.values(this.motionController.components).forEach((component) => {\n      Object.values(component.visualResponses).forEach((visualResponse) => {\n        const { valueNode, minNode, maxNode, value, valueNodeProperty } = visualResponse;\n        if (!valueNode)\n          return;\n        if (valueNodeProperty === MotionControllerConstants.VisualResponseProperty.VISIBILITY && typeof value === \"boolean\") {\n          valueNode.visible = value;\n        } else if (valueNodeProperty === MotionControllerConstants.VisualResponseProperty.TRANSFORM && minNode && maxNode && typeof value === \"number\") {\n          valueNode.quaternion.slerpQuaternions(minNode.quaternion, maxNode.quaternion, value);\n          valueNode.position.lerpVectors(minNode.position, maxNode.position, value);\n        }\n      });\n    });\n  }\n}\nfunction findNodes(motionController, scene) {\n  Object.values(motionController.components).forEach((component) => {\n    const { type, touchPointNodeName, visualResponses } = component;\n    if (type === MotionControllerConstants.ComponentType.TOUCHPAD && touchPointNodeName) {\n      component.touchPointNode = scene.getObjectByName(touchPointNodeName);\n      if (component.touchPointNode) {\n        const sphereGeometry = new SphereGeometry(1e-3);\n        const material = new MeshBasicMaterial({ color: 255 });\n        const sphere = new Mesh(sphereGeometry, material);\n        component.touchPointNode.add(sphere);\n      } else {\n        console.warn(`Could not find touch dot, ${component.touchPointNodeName}, in touchpad component ${component.id}`);\n      }\n    }\n    Object.values(visualResponses).forEach((visualResponse) => {\n      const { valueNodeName, minNodeName, maxNodeName, valueNodeProperty } = visualResponse;\n      if (valueNodeProperty === MotionControllerConstants.VisualResponseProperty.TRANSFORM && minNodeName && maxNodeName) {\n        visualResponse.minNode = scene.getObjectByName(minNodeName);\n        visualResponse.maxNode = scene.getObjectByName(maxNodeName);\n        if (!visualResponse.minNode) {\n          console.warn(`Could not find ${minNodeName} in the model`);\n          return;\n        }\n        if (!visualResponse.maxNode) {\n          console.warn(`Could not find ${maxNodeName} in the model`);\n          return;\n        }\n      }\n      visualResponse.valueNode = scene.getObjectByName(valueNodeName);\n      if (!visualResponse.valueNode) {\n        console.warn(`Could not find ${valueNodeName} in the model`);\n      }\n    });\n  });\n}\nfunction addAssetSceneToControllerModel(controllerModel, scene) {\n  findNodes(controllerModel.motionController, scene);\n  if (controllerModel.envMap) {\n    applyEnvironmentMap(controllerModel.envMap, scene);\n  }\n  controllerModel.add(scene);\n}\nclass XRControllerModelFactory {\n  constructor(gltfLoader = null) {\n    __publicField(this, \"gltfLoader\");\n    __publicField(this, \"path\");\n    __publicField(this, \"_assetCache\");\n    this.gltfLoader = gltfLoader;\n    this.path = DEFAULT_PROFILES_PATH;\n    this._assetCache = {};\n    if (!this.gltfLoader) {\n      this.gltfLoader = new GLTFLoader();\n    }\n  }\n  createControllerModel(controller) {\n    const controllerModel = new XRControllerModel();\n    let scene = null;\n    const onConnected = (event) => {\n      const xrInputSource = event.data;\n      if (xrInputSource.targetRayMode !== \"tracked-pointer\" || !xrInputSource.gamepad)\n        return;\n      fetchProfile(xrInputSource, this.path, DEFAULT_PROFILE).then(({ profile, assetPath }) => {\n        if (!assetPath) {\n          throw new Error(\"no asset path\");\n        }\n        controllerModel.motionController = new MotionController(xrInputSource, profile, assetPath);\n        const assetUrl = controllerModel.motionController.assetUrl;\n        const cachedAsset = this._assetCache[assetUrl];\n        if (cachedAsset) {\n          scene = cachedAsset.scene.clone();\n          addAssetSceneToControllerModel(controllerModel, scene);\n        } else {\n          if (!this.gltfLoader) {\n            throw new Error(\"GLTFLoader not set.\");\n          }\n          this.gltfLoader.setPath(\"\");\n          this.gltfLoader.load(\n            controllerModel.motionController.assetUrl,\n            (asset) => {\n              if (!controllerModel.motionController) {\n                console.warn(\"motionController gone while gltf load, bailing...\");\n                return;\n              }\n              this._assetCache[assetUrl] = asset;\n              scene = asset.scene.clone();\n              addAssetSceneToControllerModel(controllerModel, scene);\n            },\n            () => {\n            },\n            () => {\n              throw new Error(`Asset ${assetUrl} missing or malformed.`);\n            }\n          );\n        }\n      }).catch((err) => {\n        console.warn(err);\n      });\n    };\n    controller.addEventListener(\"connected\", onConnected);\n    const onDisconnected = () => {\n      controller.removeEventListener(\"connected\", onConnected);\n      controller.removeEventListener(\"disconnected\", onDisconnected);\n      controllerModel.motionController = null;\n      if (scene) {\n        controllerModel.remove(scene);\n      }\n      scene = null;\n    };\n    controller.addEventListener(\"disconnected\", onDisconnected);\n    return controllerModel;\n  }\n}\nexport {\n  XRControllerModelFactory\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}