{"ast":null,"code":"import _regeneratorRuntime from \"/home/krug/Coding/JavaScript/Websites/Personal/personal/node_modules/.pnpm/@babel+runtime@7.22.3/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"/home/krug/Coding/JavaScript/Websites/Personal/personal/node_modules/.pnpm/@babel+runtime@7.22.3/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _classCallCheck from \"/home/krug/Coding/JavaScript/Websites/Personal/personal/node_modules/.pnpm/@babel+runtime@7.22.3/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/home/krug/Coding/JavaScript/Websites/Personal/personal/node_modules/.pnpm/@babel+runtime@7.22.3/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nvar __defProp = Object.defineProperty;\nvar __defNormalProp = function __defNormalProp(obj, key, value) {\n  return key in obj ? __defProp(obj, key, {\n    enumerable: true,\n    configurable: true,\n    writable: true,\n    value: value\n  }) : obj[key] = value;\n};\nvar __publicField = function __publicField(obj, key, value) {\n  __defNormalProp(obj, typeof key !== \"symbol\" ? key + \"\" : key, value);\n  return value;\n};\nimport { strToU8, zipSync } from \"fflate\";\nimport { Mesh, MeshPhysicalMaterial } from \"three\";\nvar USDZExporter = /*#__PURE__*/function () {\n  function USDZExporter() {\n    _classCallCheck(this, USDZExporter);\n    __publicField(this, \"PRECISION\", 7);\n    __publicField(this, \"materials\");\n    __publicField(this, \"textures\");\n    __publicField(this, \"files\");\n    this.materials = {};\n    this.textures = {};\n    this.files = {};\n  }\n  _createClass(USDZExporter, [{\n    key: \"parse\",\n    value: function () {\n      var _parse = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(scene) {\n        var _this = this;\n        var modelFileName, output, _loop, id, offset, filename, file, headerSize, offsetMod64, padLength, padding;\n        return _regeneratorRuntime().wrap(function _callee$(_context2) {\n          while (1) switch (_context2.prev = _context2.next) {\n            case 0:\n              modelFileName = \"model.usda\";\n              this.files[modelFileName] = null;\n              output = this.buildHeader();\n              scene.traverseVisible(function (object) {\n                if (object instanceof Mesh && object.isMesh && object.material.isMeshStandardMaterial) {\n                  var geometry = object.geometry;\n                  var material = object.material;\n                  var geometryFileName = \"geometries/Geometry_\" + geometry.id + \".usd\";\n                  if (!(geometryFileName in _this.files)) {\n                    var meshObject = _this.buildMeshObject(geometry);\n                    _this.files[geometryFileName] = _this.buildUSDFileAsString(meshObject);\n                  }\n                  if (!(material.uuid in _this.materials)) {\n                    _this.materials[material.uuid] = material;\n                  }\n                  output += _this.buildXform(object, geometry, material);\n                }\n              });\n              output += this.buildMaterials(this.materials);\n              this.files[modelFileName] = strToU8(output);\n              output = null;\n              _loop = /*#__PURE__*/_regeneratorRuntime().mark(function _loop() {\n                var texture, color, isRGBA, canvas, blob;\n                return _regeneratorRuntime().wrap(function _loop$(_context) {\n                  while (1) switch (_context.prev = _context.next) {\n                    case 0:\n                      texture = _this.textures[id];\n                      color = id.split(\"_\")[1];\n                      isRGBA = texture.format === 1023;\n                      canvas = _this.imageToCanvas(texture.image, color);\n                      _context.next = 6;\n                      return new Promise(function (resolve) {\n                        return canvas == null ? void 0 : canvas.toBlob(resolve, isRGBA ? \"image/png\" : \"image/jpeg\", 1);\n                      });\n                    case 6:\n                      blob = _context.sent;\n                      if (!blob) {\n                        _context.next = 13;\n                        break;\n                      }\n                      _context.t0 = Uint8Array;\n                      _context.next = 11;\n                      return blob.arrayBuffer();\n                    case 11:\n                      _context.t1 = _context.sent;\n                      _this.files[\"textures/Texture_\".concat(id, \".\").concat(isRGBA ? \"png\" : \"jpg\")] = new _context.t0(_context.t1);\n                    case 13:\n                    case \"end\":\n                      return _context.stop();\n                  }\n                }, _loop);\n              });\n              _context2.t0 = _regeneratorRuntime().keys(this.textures);\n            case 9:\n              if ((_context2.t1 = _context2.t0()).done) {\n                _context2.next = 14;\n                break;\n              }\n              id = _context2.t1.value;\n              return _context2.delegateYield(_loop(), \"t2\", 12);\n            case 12:\n              _context2.next = 9;\n              break;\n            case 14:\n              offset = 0;\n              for (filename in this.files) {\n                file = this.files[filename];\n                headerSize = 34 + filename.length;\n                offset += headerSize;\n                offsetMod64 = offset & 63;\n                if (offsetMod64 !== 4 && file !== null && file instanceof Uint8Array) {\n                  padLength = 64 - offsetMod64;\n                  padding = new Uint8Array(padLength);\n                  this.files[filename] = [file, {\n                    extra: {\n                      12345: padding\n                    }\n                  }];\n                }\n                if (file && typeof file.length === \"number\") {\n                  offset = file.length;\n                }\n              }\n              return _context2.abrupt(\"return\", zipSync(this.files, {\n                level: 0\n              }));\n            case 17:\n            case \"end\":\n              return _context2.stop();\n          }\n        }, _callee, this);\n      }));\n      function parse(_x) {\n        return _parse.apply(this, arguments);\n      }\n      return parse;\n    }()\n  }, {\n    key: \"imageToCanvas\",\n    value: function imageToCanvas(image, color) {\n      if (typeof HTMLImageElement !== \"undefined\" && image instanceof HTMLImageElement || typeof HTMLCanvasElement !== \"undefined\" && image instanceof HTMLCanvasElement || typeof OffscreenCanvas !== \"undefined\" && image instanceof OffscreenCanvas || typeof ImageBitmap !== \"undefined\" && image instanceof ImageBitmap) {\n        var scale = 1024 / Math.max(image.width, image.height);\n        var canvas = document.createElement(\"canvas\");\n        canvas.width = image.width * Math.min(1, scale);\n        canvas.height = image.height * Math.min(1, scale);\n        var context = canvas.getContext(\"2d\");\n        context == null ? void 0 : context.drawImage(image, 0, 0, canvas.width, canvas.height);\n        if (color !== void 0) {\n          var hex = parseInt(color, 16);\n          var r = (hex >> 16 & 255) / 255;\n          var g = (hex >> 8 & 255) / 255;\n          var b = (hex & 255) / 255;\n          var imagedata = context == null ? void 0 : context.getImageData(0, 0, canvas.width, canvas.height);\n          if (imagedata) {\n            var data = imagedata == null ? void 0 : imagedata.data;\n            for (var i = 0; i < data.length; i += 4) {\n              data[i + 0] = data[i + 0] * r;\n              data[i + 1] = data[i + 1] * g;\n              data[i + 2] = data[i + 2] * b;\n            }\n            context == null ? void 0 : context.putImageData(imagedata, 0, 0);\n          }\n        }\n        return canvas;\n      }\n    }\n  }, {\n    key: \"buildHeader\",\n    value: function buildHeader() {\n      return \"#usda 1.0\\n(\\n    customLayerData = {\\n        string creator = \\\"Three.js USDZExporter\\\"\\n    }\\n    metersPerUnit = 1\\n    upAxis = \\\"Y\\\"\\n)\\n\";\n    }\n  }, {\n    key: \"buildUSDFileAsString\",\n    value: function buildUSDFileAsString(dataToInsert) {\n      var output = this.buildHeader();\n      output += dataToInsert;\n      return strToU8(output);\n    }\n    // Xform\n  }, {\n    key: \"buildXform\",\n    value: function buildXform(object, geometry, material) {\n      var name = \"Object_\" + object.id;\n      var transform = this.buildMatrix(object.matrixWorld);\n      if (object.matrixWorld.determinant() < 0) {\n        console.warn(\"THREE.USDZExporter: USDZ does not support negative scales\", object);\n      }\n      return \"def Xform \\\"\".concat(name, \"\\\" (\\n    prepend references = @./geometries/Geometry_\").concat(geometry.id, \".usd@</Geometry>\\n)\\n{\\n    matrix4d xformOp:transform = \").concat(transform, \"\\n    uniform token[] xformOpOrder = [\\\"xformOp:transform\\\"]\\n    rel material:binding = </Materials/Material_\").concat(material.id, \">\\n}\\n\");\n    }\n  }, {\n    key: \"buildMatrix\",\n    value: function buildMatrix(matrix) {\n      var array = matrix.elements;\n      return \"( \".concat(this.buildMatrixRow(array, 0), \", \").concat(this.buildMatrixRow(array, 4), \", \").concat(this.buildMatrixRow(array, 8), \", \").concat(this.buildMatrixRow(array, 12), \" )\");\n    }\n  }, {\n    key: \"buildMatrixRow\",\n    value: function buildMatrixRow(array, offset) {\n      return \"(\".concat(array[offset + 0], \", \").concat(array[offset + 1], \", \").concat(array[offset + 2], \", \").concat(array[offset + 3], \")\");\n    }\n    // Mesh\n  }, {\n    key: \"buildMeshObject\",\n    value: function buildMeshObject(geometry) {\n      var mesh = this.buildMesh(geometry);\n      return \"\\ndef \\\"Geometry\\\"\\n{\\n  \".concat(mesh, \"\\n}\\n\");\n    }\n  }, {\n    key: \"buildMesh\",\n    value: function buildMesh(geometry) {\n      var name = \"Geometry\";\n      var attributes = geometry.attributes;\n      var count = attributes.position.count;\n      return \"\\n    def Mesh \\\"\".concat(name, \"\\\"\\n    {\\n        int[] faceVertexCounts = [\").concat(this.buildMeshVertexCount(geometry), \"]\\n        int[] faceVertexIndices = [\").concat(this.buildMeshVertexIndices(geometry), \"]\\n        normal3f[] normals = [\").concat(this.buildVector3Array(attributes.normal, count), \"] (\\n            interpolation = \\\"vertex\\\"\\n        )\\n        point3f[] points = [\").concat(this.buildVector3Array(attributes.position, count), \"]\\n        float2[] primvars:st = [\").concat(this.buildVector2Array(attributes.uv, count), \"] (\\n            interpolation = \\\"vertex\\\"\\n        )\\n        uniform token subdivisionScheme = \\\"none\\\"\\n    }\\n\");\n    }\n  }, {\n    key: \"buildMeshVertexCount\",\n    value: function buildMeshVertexCount(geometry) {\n      var count = geometry.index !== null ? geometry.index.array.length : geometry.attributes.position.count;\n      return Array(count / 3).fill(3).join(\", \");\n    }\n  }, {\n    key: \"buildMeshVertexIndices\",\n    value: function buildMeshVertexIndices(geometry) {\n      if (geometry.index !== null) {\n        return geometry.index.array.join(\", \");\n      }\n      var array = [];\n      var length = geometry.attributes.position.count;\n      for (var i = 0; i < length; i++) {\n        array.push(i);\n      }\n      return array.join(\", \");\n    }\n  }, {\n    key: \"buildVector3Array\",\n    value: function buildVector3Array(attribute, count) {\n      if (attribute === void 0) {\n        console.warn(\"USDZExporter: Normals missing.\");\n        return Array(count).fill(\"(0, 0, 0)\").join(\", \");\n      }\n      var array = [];\n      var data = attribute.array;\n      for (var i = 0; i < data.length; i += 3) {\n        array.push(\"(\".concat(data[i + 0].toPrecision(this.PRECISION), \", \").concat(data[i + 1].toPrecision(this.PRECISION), \", \").concat(data[i + 2].toPrecision(this.PRECISION), \")\"));\n      }\n      return array.join(\", \");\n    }\n  }, {\n    key: \"buildVector2Array\",\n    value: function buildVector2Array(attribute, count) {\n      if (attribute === void 0) {\n        console.warn(\"USDZExporter: UVs missing.\");\n        return Array(count).fill(\"(0, 0)\").join(\", \");\n      }\n      var array = [];\n      var data = attribute.array;\n      for (var i = 0; i < data.length; i += 2) {\n        array.push(\"(\".concat(data[i + 0].toPrecision(this.PRECISION), \", \").concat(1 - data[i + 1].toPrecision(this.PRECISION), \")\"));\n      }\n      return array.join(\", \");\n    }\n    // Materials\n  }, {\n    key: \"buildMaterials\",\n    value: function buildMaterials(materials) {\n      var array = [];\n      for (var uuid in materials) {\n        var material = materials[uuid];\n        array.push(this.buildMaterial(material));\n      }\n      return \"def \\\"Materials\\\"\\n{\\n\".concat(array.join(\"\"), \"\\n}\\n\");\n    }\n  }, {\n    key: \"buildMaterial\",\n    value: function buildMaterial(material) {\n      var pad = \"            \";\n      var inputs = [];\n      var samplers = [];\n      if (material.map !== null) {\n        inputs.push(\"\".concat(pad, \"color3f inputs:diffuseColor.connect = </Materials/Material_\").concat(material.id, \"/Texture_\").concat(material.map.id, \"_diffuse.outputs:rgb>\"));\n        samplers.push(this.buildTexture(material, material.map, \"diffuse\", material.color));\n      } else {\n        inputs.push(\"\".concat(pad, \"color3f inputs:diffuseColor = \").concat(this.buildColor(material.color)));\n      }\n      if (material.emissiveMap !== null) {\n        inputs.push(\"\".concat(pad, \"color3f inputs:emissiveColor.connect = </Materials/Material_\").concat(material.id, \"/Texture_\").concat(material.emissiveMap.id, \"_emissive.outputs:rgb>\"));\n        samplers.push(this.buildTexture(material, material.emissiveMap, \"emissive\"));\n      } else if (material.emissive.getHex() > 0) {\n        inputs.push(\"\".concat(pad, \"color3f inputs:emissiveColor = \").concat(this.buildColor(material.emissive)));\n      }\n      if (material.normalMap !== null) {\n        inputs.push(\"\".concat(pad, \"normal3f inputs:normal.connect = </Materials/Material_\").concat(material.id, \"/Texture_\").concat(material.normalMap.id, \"_normal.outputs:rgb>\"));\n        samplers.push(this.buildTexture(material, material.normalMap, \"normal\"));\n      }\n      if (material.aoMap !== null) {\n        inputs.push(\"\".concat(pad, \"float inputs:occlusion.connect = </Materials/Material_\").concat(material.id, \"/Texture_\").concat(material.aoMap.id, \"_occlusion.outputs:r>\"));\n        samplers.push(this.buildTexture(material, material.aoMap, \"occlusion\"));\n      }\n      if (material.roughnessMap !== null && material.roughness === 1) {\n        inputs.push(\"\".concat(pad, \"float inputs:roughness.connect = </Materials/Material_\").concat(material.id, \"/Texture_\").concat(material.roughnessMap.id, \"_roughness.outputs:g>\"));\n        samplers.push(this.buildTexture(material, material.roughnessMap, \"roughness\"));\n      } else {\n        inputs.push(\"\".concat(pad, \"float inputs:roughness = \").concat(material.roughness));\n      }\n      if (material.metalnessMap !== null && material.metalness === 1) {\n        inputs.push(\"\".concat(pad, \"float inputs:metallic.connect = </Materials/Material_\").concat(material.id, \"/Texture_\").concat(material.metalnessMap.id, \"_metallic.outputs:b>\"));\n        samplers.push(this.buildTexture(material, material.metalnessMap, \"metallic\"));\n      } else {\n        inputs.push(\"\".concat(pad, \"float inputs:metallic = \").concat(material.metalness));\n      }\n      inputs.push(\"\".concat(pad, \"float inputs:opacity = \").concat(material.opacity));\n      if (material instanceof MeshPhysicalMaterial) {\n        inputs.push(\"\".concat(pad, \"float inputs:clearcoat = \").concat(material.clearcoat));\n        inputs.push(\"\".concat(pad, \"float inputs:clearcoatRoughness = \").concat(material.clearcoatRoughness));\n        inputs.push(\"\".concat(pad, \"float inputs:ior = \").concat(material.ior));\n      }\n      return \"\\n    def Material \\\"Material_\".concat(material.id, \"\\\"\\n    {\\n        def Shader \\\"PreviewSurface\\\"\\n        {\\n            uniform token info:id = \\\"UsdPreviewSurface\\\"\\n\").concat(inputs.join(\"\\n\"), \"\\n            int inputs:useSpecularWorkflow = 0\\n            token outputs:surface\\n        }\\n        token outputs:surface.connect = </Materials/Material_\").concat(material.id, \"/PreviewSurface.outputs:surface>\\n        token inputs:frame:stPrimvarName = \\\"st\\\"\\n        def Shader \\\"uvReader_st\\\"\\n        {\\n            uniform token info:id = \\\"UsdPrimvarReader_float2\\\"\\n            token inputs:varname.connect = </Materials/Material_\").concat(material.id, \".inputs:frame:stPrimvarName>\\n            float2 inputs:fallback = (0.0, 0.0)\\n            float2 outputs:result\\n        }\\n\").concat(samplers.join(\"\\n\"), \"\\n    }\\n\");\n    }\n  }, {\n    key: \"buildTexture\",\n    value: function buildTexture(material, texture, mapType, color) {\n      var id = texture.id + (color ? \"_\" + color.getHexString() : \"\");\n      var isRGBA = texture.format === 1023;\n      this.textures[id] = texture;\n      return \"\\n      def Shader \\\"Transform2d_\".concat(mapType, \"\\\" (\\n          sdrMetadata = {\\n              string role = \\\"math\\\"\\n          }\\n      )\\n      {\\n          uniform token info:id = \\\"UsdTransform2d\\\"\\n          float2 inputs:in.connect = </Materials/Material_\").concat(material.id, \"/uvReader_st.outputs:result>\\n          float2 inputs:scale = \").concat(this.buildVector2(texture.repeat), \"\\n          float2 inputs:translation = \").concat(this.buildVector2(texture.offset), \"\\n          float2 outputs:result\\n      }\\n      def Shader \\\"Texture_\").concat(texture.id, \"_\").concat(mapType, \"\\\"\\n      {\\n          uniform token info:id = \\\"UsdUVTexture\\\"\\n          asset inputs:file = @textures/Texture_\").concat(id, \".\").concat(isRGBA ? \"png\" : \"jpg\", \"@\\n          float2 inputs:st.connect = </Materials/Material_\").concat(material.id, \"/Transform2d_\").concat(mapType, \".outputs:result>\\n          token inputs:wrapS = \\\"repeat\\\"\\n          token inputs:wrapT = \\\"repeat\\\"\\n          float outputs:r\\n          float outputs:g\\n          float outputs:b\\n          float3 outputs:rgb\\n      }\");\n    }\n  }, {\n    key: \"buildColor\",\n    value: function buildColor(color) {\n      return \"(\".concat(color.r, \", \").concat(color.g, \", \").concat(color.b, \")\");\n    }\n  }, {\n    key: \"buildVector2\",\n    value: function buildVector2(vector) {\n      return \"(\".concat(vector.x, \", \").concat(vector.y, \")\");\n    }\n  }]);\n  return USDZExporter;\n}();\nexport { USDZExporter };","map":{"version":3,"names":["__defProp","Object","defineProperty","__defNormalProp","obj","key","value","enumerable","configurable","writable","__publicField","strToU8","zipSync","Mesh","MeshPhysicalMaterial","USDZExporter","_classCallCheck","materials","textures","files","_createClass","_parse","_asyncToGenerator","_regeneratorRuntime","mark","_callee","scene","_this","modelFileName","output","_loop","id","offset","filename","file","headerSize","offsetMod64","padLength","padding","wrap","_callee$","_context2","prev","next","buildHeader","traverseVisible","object","isMesh","material","isMeshStandardMaterial","geometry","geometryFileName","meshObject","buildMeshObject","buildUSDFileAsString","uuid","buildXform","buildMaterials","texture","color","isRGBA","canvas","blob","_loop$","_context","split","format","imageToCanvas","image","Promise","resolve","toBlob","sent","t0","Uint8Array","arrayBuffer","t1","concat","stop","keys","done","delegateYield","length","extra","abrupt","level","parse","_x","apply","arguments","HTMLImageElement","HTMLCanvasElement","OffscreenCanvas","ImageBitmap","scale","Math","max","width","height","document","createElement","min","context","getContext","drawImage","hex","parseInt","r","g","b","imagedata","getImageData","data","i","putImageData","dataToInsert","name","transform","buildMatrix","matrixWorld","determinant","console","warn","matrix","array","elements","buildMatrixRow","mesh","buildMesh","attributes","count","position","buildMeshVertexCount","buildMeshVertexIndices","buildVector3Array","normal","buildVector2Array","uv","index","Array","fill","join","push","attribute","toPrecision","PRECISION","buildMaterial","pad","inputs","samplers","map","buildTexture","buildColor","emissiveMap","emissive","getHex","normalMap","aoMap","roughnessMap","roughness","metalnessMap","metalness","opacity","clearcoat","clearcoatRoughness","ior","mapType","getHexString","buildVector2","repeat","vector","x","y"],"sources":["/home/krug/Coding/JavaScript/Websites/Personal/personal/node_modules/.pnpm/three-stdlib@2.23.7_three@0.151.3/node_modules/three-stdlib/exporters/USDZExporter.js"],"sourcesContent":["var __defProp = Object.defineProperty;\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;\nvar __publicField = (obj, key, value) => {\n  __defNormalProp(obj, typeof key !== \"symbol\" ? key + \"\" : key, value);\n  return value;\n};\nimport { strToU8, zipSync } from \"fflate\";\nimport { Mesh, MeshPhysicalMaterial } from \"three\";\nclass USDZExporter {\n  constructor() {\n    __publicField(this, \"PRECISION\", 7);\n    __publicField(this, \"materials\");\n    __publicField(this, \"textures\");\n    __publicField(this, \"files\");\n    this.materials = {};\n    this.textures = {};\n    this.files = {};\n  }\n  async parse(scene) {\n    const modelFileName = \"model.usda\";\n    this.files[modelFileName] = null;\n    let output = this.buildHeader();\n    scene.traverseVisible((object) => {\n      if (object instanceof Mesh && object.isMesh && object.material.isMeshStandardMaterial) {\n        const geometry = object.geometry;\n        const material = object.material;\n        const geometryFileName = \"geometries/Geometry_\" + geometry.id + \".usd\";\n        if (!(geometryFileName in this.files)) {\n          const meshObject = this.buildMeshObject(geometry);\n          this.files[geometryFileName] = this.buildUSDFileAsString(meshObject);\n        }\n        if (!(material.uuid in this.materials)) {\n          this.materials[material.uuid] = material;\n        }\n        output += this.buildXform(object, geometry, material);\n      }\n    });\n    output += this.buildMaterials(this.materials);\n    this.files[modelFileName] = strToU8(output);\n    output = null;\n    for (const id in this.textures) {\n      const texture = this.textures[id];\n      const color = id.split(\"_\")[1];\n      const isRGBA = texture.format === 1023;\n      const canvas = this.imageToCanvas(texture.image, color);\n      const blob = await new Promise(\n        (resolve) => canvas == null ? void 0 : canvas.toBlob(resolve, isRGBA ? \"image/png\" : \"image/jpeg\", 1)\n      );\n      if (blob) {\n        this.files[`textures/Texture_${id}.${isRGBA ? \"png\" : \"jpg\"}`] = new Uint8Array(await blob.arrayBuffer());\n      }\n    }\n    let offset = 0;\n    for (const filename in this.files) {\n      const file = this.files[filename];\n      const headerSize = 34 + filename.length;\n      offset += headerSize;\n      const offsetMod64 = offset & 63;\n      if (offsetMod64 !== 4 && file !== null && file instanceof Uint8Array) {\n        const padLength = 64 - offsetMod64;\n        const padding = new Uint8Array(padLength);\n        this.files[filename] = [file, { extra: { 12345: padding } }];\n      }\n      if (file && typeof file.length === \"number\") {\n        offset = file.length;\n      }\n    }\n    return zipSync(this.files, { level: 0 });\n  }\n  imageToCanvas(image, color) {\n    if (typeof HTMLImageElement !== \"undefined\" && image instanceof HTMLImageElement || typeof HTMLCanvasElement !== \"undefined\" && image instanceof HTMLCanvasElement || typeof OffscreenCanvas !== \"undefined\" && image instanceof OffscreenCanvas || typeof ImageBitmap !== \"undefined\" && image instanceof ImageBitmap) {\n      const scale = 1024 / Math.max(image.width, image.height);\n      const canvas = document.createElement(\"canvas\");\n      canvas.width = image.width * Math.min(1, scale);\n      canvas.height = image.height * Math.min(1, scale);\n      const context = canvas.getContext(\"2d\");\n      context == null ? void 0 : context.drawImage(image, 0, 0, canvas.width, canvas.height);\n      if (color !== void 0) {\n        const hex = parseInt(color, 16);\n        const r = (hex >> 16 & 255) / 255;\n        const g = (hex >> 8 & 255) / 255;\n        const b = (hex & 255) / 255;\n        const imagedata = context == null ? void 0 : context.getImageData(0, 0, canvas.width, canvas.height);\n        if (imagedata) {\n          const data = imagedata == null ? void 0 : imagedata.data;\n          for (let i = 0; i < data.length; i += 4) {\n            data[i + 0] = data[i + 0] * r;\n            data[i + 1] = data[i + 1] * g;\n            data[i + 2] = data[i + 2] * b;\n          }\n          context == null ? void 0 : context.putImageData(imagedata, 0, 0);\n        }\n      }\n      return canvas;\n    }\n  }\n  buildHeader() {\n    return `#usda 1.0\n(\n    customLayerData = {\n        string creator = \"Three.js USDZExporter\"\n    }\n    metersPerUnit = 1\n    upAxis = \"Y\"\n)\n`;\n  }\n  buildUSDFileAsString(dataToInsert) {\n    let output = this.buildHeader();\n    output += dataToInsert;\n    return strToU8(output);\n  }\n  // Xform\n  buildXform(object, geometry, material) {\n    const name = \"Object_\" + object.id;\n    const transform = this.buildMatrix(object.matrixWorld);\n    if (object.matrixWorld.determinant() < 0) {\n      console.warn(\"THREE.USDZExporter: USDZ does not support negative scales\", object);\n    }\n    return `def Xform \"${name}\" (\n    prepend references = @./geometries/Geometry_${geometry.id}.usd@</Geometry>\n)\n{\n    matrix4d xformOp:transform = ${transform}\n    uniform token[] xformOpOrder = [\"xformOp:transform\"]\n    rel material:binding = </Materials/Material_${material.id}>\n}\n`;\n  }\n  buildMatrix(matrix) {\n    const array = matrix.elements;\n    return `( ${this.buildMatrixRow(array, 0)}, ${this.buildMatrixRow(array, 4)}, ${this.buildMatrixRow(\n      array,\n      8\n    )}, ${this.buildMatrixRow(array, 12)} )`;\n  }\n  buildMatrixRow(array, offset) {\n    return `(${array[offset + 0]}, ${array[offset + 1]}, ${array[offset + 2]}, ${array[offset + 3]})`;\n  }\n  // Mesh\n  buildMeshObject(geometry) {\n    const mesh = this.buildMesh(geometry);\n    return `\ndef \"Geometry\"\n{\n  ${mesh}\n}\n`;\n  }\n  buildMesh(geometry) {\n    const name = \"Geometry\";\n    const attributes = geometry.attributes;\n    const count = attributes.position.count;\n    return `\n    def Mesh \"${name}\"\n    {\n        int[] faceVertexCounts = [${this.buildMeshVertexCount(geometry)}]\n        int[] faceVertexIndices = [${this.buildMeshVertexIndices(geometry)}]\n        normal3f[] normals = [${this.buildVector3Array(attributes.normal, count)}] (\n            interpolation = \"vertex\"\n        )\n        point3f[] points = [${this.buildVector3Array(attributes.position, count)}]\n        float2[] primvars:st = [${this.buildVector2Array(attributes.uv, count)}] (\n            interpolation = \"vertex\"\n        )\n        uniform token subdivisionScheme = \"none\"\n    }\n`;\n  }\n  buildMeshVertexCount(geometry) {\n    const count = geometry.index !== null ? geometry.index.array.length : geometry.attributes.position.count;\n    return Array(count / 3).fill(3).join(\", \");\n  }\n  buildMeshVertexIndices(geometry) {\n    if (geometry.index !== null) {\n      return geometry.index.array.join(\", \");\n    }\n    const array = [];\n    const length = geometry.attributes.position.count;\n    for (let i = 0; i < length; i++) {\n      array.push(i);\n    }\n    return array.join(\", \");\n  }\n  buildVector3Array(attribute, count) {\n    if (attribute === void 0) {\n      console.warn(\"USDZExporter: Normals missing.\");\n      return Array(count).fill(\"(0, 0, 0)\").join(\", \");\n    }\n    const array = [];\n    const data = attribute.array;\n    for (let i = 0; i < data.length; i += 3) {\n      array.push(\n        `(${data[i + 0].toPrecision(this.PRECISION)}, ${data[i + 1].toPrecision(this.PRECISION)}, ${data[i + 2].toPrecision(this.PRECISION)})`\n      );\n    }\n    return array.join(\", \");\n  }\n  buildVector2Array(attribute, count) {\n    if (attribute === void 0) {\n      console.warn(\"USDZExporter: UVs missing.\");\n      return Array(count).fill(\"(0, 0)\").join(\", \");\n    }\n    const array = [];\n    const data = attribute.array;\n    for (let i = 0; i < data.length; i += 2) {\n      array.push(`(${data[i + 0].toPrecision(this.PRECISION)}, ${1 - data[i + 1].toPrecision(this.PRECISION)})`);\n    }\n    return array.join(\", \");\n  }\n  // Materials\n  buildMaterials(materials) {\n    const array = [];\n    for (const uuid in materials) {\n      const material = materials[uuid];\n      array.push(this.buildMaterial(material));\n    }\n    return `def \"Materials\"\n{\n${array.join(\"\")}\n}\n`;\n  }\n  buildMaterial(material) {\n    const pad = \"            \";\n    const inputs = [];\n    const samplers = [];\n    if (material.map !== null) {\n      inputs.push(\n        `${pad}color3f inputs:diffuseColor.connect = </Materials/Material_${material.id}/Texture_${material.map.id}_diffuse.outputs:rgb>`\n      );\n      samplers.push(this.buildTexture(material, material.map, \"diffuse\", material.color));\n    } else {\n      inputs.push(`${pad}color3f inputs:diffuseColor = ${this.buildColor(material.color)}`);\n    }\n    if (material.emissiveMap !== null) {\n      inputs.push(\n        `${pad}color3f inputs:emissiveColor.connect = </Materials/Material_${material.id}/Texture_${material.emissiveMap.id}_emissive.outputs:rgb>`\n      );\n      samplers.push(this.buildTexture(material, material.emissiveMap, \"emissive\"));\n    } else if (material.emissive.getHex() > 0) {\n      inputs.push(`${pad}color3f inputs:emissiveColor = ${this.buildColor(material.emissive)}`);\n    }\n    if (material.normalMap !== null) {\n      inputs.push(\n        `${pad}normal3f inputs:normal.connect = </Materials/Material_${material.id}/Texture_${material.normalMap.id}_normal.outputs:rgb>`\n      );\n      samplers.push(this.buildTexture(material, material.normalMap, \"normal\"));\n    }\n    if (material.aoMap !== null) {\n      inputs.push(\n        `${pad}float inputs:occlusion.connect = </Materials/Material_${material.id}/Texture_${material.aoMap.id}_occlusion.outputs:r>`\n      );\n      samplers.push(this.buildTexture(material, material.aoMap, \"occlusion\"));\n    }\n    if (material.roughnessMap !== null && material.roughness === 1) {\n      inputs.push(\n        `${pad}float inputs:roughness.connect = </Materials/Material_${material.id}/Texture_${material.roughnessMap.id}_roughness.outputs:g>`\n      );\n      samplers.push(this.buildTexture(material, material.roughnessMap, \"roughness\"));\n    } else {\n      inputs.push(`${pad}float inputs:roughness = ${material.roughness}`);\n    }\n    if (material.metalnessMap !== null && material.metalness === 1) {\n      inputs.push(\n        `${pad}float inputs:metallic.connect = </Materials/Material_${material.id}/Texture_${material.metalnessMap.id}_metallic.outputs:b>`\n      );\n      samplers.push(this.buildTexture(material, material.metalnessMap, \"metallic\"));\n    } else {\n      inputs.push(`${pad}float inputs:metallic = ${material.metalness}`);\n    }\n    inputs.push(`${pad}float inputs:opacity = ${material.opacity}`);\n    if (material instanceof MeshPhysicalMaterial) {\n      inputs.push(`${pad}float inputs:clearcoat = ${material.clearcoat}`);\n      inputs.push(`${pad}float inputs:clearcoatRoughness = ${material.clearcoatRoughness}`);\n      inputs.push(`${pad}float inputs:ior = ${material.ior}`);\n    }\n    return `\n    def Material \"Material_${material.id}\"\n    {\n        def Shader \"PreviewSurface\"\n        {\n            uniform token info:id = \"UsdPreviewSurface\"\n${inputs.join(\"\\n\")}\n            int inputs:useSpecularWorkflow = 0\n            token outputs:surface\n        }\n        token outputs:surface.connect = </Materials/Material_${material.id}/PreviewSurface.outputs:surface>\n        token inputs:frame:stPrimvarName = \"st\"\n        def Shader \"uvReader_st\"\n        {\n            uniform token info:id = \"UsdPrimvarReader_float2\"\n            token inputs:varname.connect = </Materials/Material_${material.id}.inputs:frame:stPrimvarName>\n            float2 inputs:fallback = (0.0, 0.0)\n            float2 outputs:result\n        }\n${samplers.join(\"\\n\")}\n    }\n`;\n  }\n  buildTexture(material, texture, mapType, color) {\n    const id = texture.id + (color ? \"_\" + color.getHexString() : \"\");\n    const isRGBA = texture.format === 1023;\n    this.textures[id] = texture;\n    return `\n      def Shader \"Transform2d_${mapType}\" (\n          sdrMetadata = {\n              string role = \"math\"\n          }\n      )\n      {\n          uniform token info:id = \"UsdTransform2d\"\n          float2 inputs:in.connect = </Materials/Material_${material.id}/uvReader_st.outputs:result>\n          float2 inputs:scale = ${this.buildVector2(texture.repeat)}\n          float2 inputs:translation = ${this.buildVector2(texture.offset)}\n          float2 outputs:result\n      }\n      def Shader \"Texture_${texture.id}_${mapType}\"\n      {\n          uniform token info:id = \"UsdUVTexture\"\n          asset inputs:file = @textures/Texture_${id}.${isRGBA ? \"png\" : \"jpg\"}@\n          float2 inputs:st.connect = </Materials/Material_${material.id}/Transform2d_${mapType}.outputs:result>\n          token inputs:wrapS = \"repeat\"\n          token inputs:wrapT = \"repeat\"\n          float outputs:r\n          float outputs:g\n          float outputs:b\n          float3 outputs:rgb\n      }`;\n  }\n  buildColor(color) {\n    return `(${color.r}, ${color.g}, ${color.b})`;\n  }\n  buildVector2(vector) {\n    return `(${vector.x}, ${vector.y})`;\n  }\n}\nexport {\n  USDZExporter\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}