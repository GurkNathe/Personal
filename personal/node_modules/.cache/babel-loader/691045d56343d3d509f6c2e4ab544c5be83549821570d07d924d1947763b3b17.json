{"ast":null,"code":"import _assertThisInitialized from \"/home/krug/Coding/JavaScript/Websites/Personal/personal/node_modules/.pnpm/@babel+runtime@7.22.3/node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js\";\nimport _inherits from \"/home/krug/Coding/JavaScript/Websites/Personal/personal/node_modules/.pnpm/@babel+runtime@7.22.3/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/home/krug/Coding/JavaScript/Websites/Personal/personal/node_modules/.pnpm/@babel+runtime@7.22.3/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport _classCallCheck from \"/home/krug/Coding/JavaScript/Websites/Personal/personal/node_modules/.pnpm/@babel+runtime@7.22.3/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/home/krug/Coding/JavaScript/Websites/Personal/personal/node_modules/.pnpm/@babel+runtime@7.22.3/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nvar __defProp = Object.defineProperty;\nvar __defNormalProp = function __defNormalProp(obj, key, value) {\n  return key in obj ? __defProp(obj, key, {\n    enumerable: true,\n    configurable: true,\n    writable: true,\n    value: value\n  }) : obj[key] = value;\n};\nvar __publicField = function __publicField(obj, key, value) {\n  __defNormalProp(obj, typeof key !== \"symbol\" ? key + \"\" : key, value);\n  return value;\n};\nimport { DataTexture, RGBAFormat, FloatType, RepeatWrapping, NearestFilter, Mesh, InstancedMesh, Matrix4, DynamicDrawUsage } from \"three\";\nvar CHANNELS = 4;\nvar TEXTURE_WIDTH = 1024;\nvar TEXTURE_HEIGHT = 4;\nvar initSplineTexture = function initSplineTexture() {\n  var numberOfCurves = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;\n  var dataArray = new Float32Array(TEXTURE_WIDTH * TEXTURE_HEIGHT * numberOfCurves * CHANNELS);\n  var dataTexture = new DataTexture(dataArray, TEXTURE_WIDTH, TEXTURE_HEIGHT * numberOfCurves, RGBAFormat, FloatType);\n  dataTexture.wrapS = RepeatWrapping;\n  dataTexture.wrapT = RepeatWrapping;\n  dataTexture.magFilter = NearestFilter;\n  dataTexture.needsUpdate = true;\n  return dataTexture;\n};\nvar updateSplineTexture = function updateSplineTexture(texture, splineCurve) {\n  var offset = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n  var numberOfPoints = Math.floor(TEXTURE_WIDTH * (TEXTURE_HEIGHT / 4));\n  splineCurve.arcLengthDivisions = numberOfPoints / 2;\n  splineCurve.updateArcLengths();\n  var points = splineCurve.getSpacedPoints(numberOfPoints);\n  var frenetFrames = splineCurve.computeFrenetFrames(numberOfPoints, true);\n  for (var i = 0; i < numberOfPoints; i++) {\n    var rowOffset = Math.floor(i / TEXTURE_WIDTH);\n    var rowIndex = i % TEXTURE_WIDTH;\n    var pt = points[i];\n    setTextureValue(texture, rowIndex, pt.x, pt.y, pt.z, 0 + rowOffset + TEXTURE_HEIGHT * offset);\n    pt = frenetFrames.tangents[i];\n    setTextureValue(texture, rowIndex, pt.x, pt.y, pt.z, 1 + rowOffset + TEXTURE_HEIGHT * offset);\n    pt = frenetFrames.normals[i];\n    setTextureValue(texture, rowIndex, pt.x, pt.y, pt.z, 2 + rowOffset + TEXTURE_HEIGHT * offset);\n    pt = frenetFrames.binormals[i];\n    setTextureValue(texture, rowIndex, pt.x, pt.y, pt.z, 3 + rowOffset + TEXTURE_HEIGHT * offset);\n  }\n  texture.needsUpdate = true;\n};\nvar setTextureValue = function setTextureValue(texture, index, x, y, z, o) {\n  var image = texture.image;\n  var data = image.data;\n  var i = CHANNELS * TEXTURE_WIDTH * o;\n  data[index * CHANNELS + i + 0] = x;\n  data[index * CHANNELS + i + 1] = y;\n  data[index * CHANNELS + i + 2] = z;\n  data[index * CHANNELS + i + 3] = 1;\n};\nvar getUniforms = function getUniforms(splineTexture) {\n  return {\n    spineTexture: {\n      value: splineTexture\n    },\n    pathOffset: {\n      type: \"f\",\n      value: 0\n    },\n    // time of path curve\n    pathSegment: {\n      type: \"f\",\n      value: 1\n    },\n    // fractional length of path\n    spineOffset: {\n      type: \"f\",\n      value: 161\n    },\n    spineLength: {\n      type: \"f\",\n      value: 400\n    },\n    flow: {\n      type: \"i\",\n      value: 1\n    }\n  };\n};\nfunction modifyShader(material, uniforms) {\n  var numberOfCurves = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;\n  if (material.__ok) return;\n  material.__ok = true;\n  material.onBeforeCompile = function (shader) {\n    if (shader.__modified) return;\n    shader.__modified = true;\n    Object.assign(shader.uniforms, uniforms);\n    var vertexShader = /* glsl */\n    \"\\n\\t\\tuniform sampler2D spineTexture;\\n\\t\\tuniform float pathOffset;\\n\\t\\tuniform float pathSegment;\\n\\t\\tuniform float spineOffset;\\n\\t\\tuniform float spineLength;\\n\\t\\tuniform int flow;\\n\\n\\t\\tfloat textureLayers = \".concat(TEXTURE_HEIGHT * numberOfCurves, \".;\\n\\t\\tfloat textureStacks = \").concat(TEXTURE_HEIGHT / 4, \".;\\n\\n\\t\\t\").concat(shader.vertexShader, \"\\n\\t\\t\").replace(\"#include <beginnormal_vertex>\", \"\").replace(\"#include <defaultnormal_vertex>\", \"\").replace(\"#include <begin_vertex>\", \"\").replace(/void\\s*main\\s*\\(\\)\\s*\\{/, /* glsl */\"\\n        void main() {\\n        #include <beginnormal_vertex>\\n\\n        vec4 worldPos = modelMatrix * vec4(position, 1.);\\n\\n        bool bend = flow > 0;\\n        float xWeight = bend ? 0. : 1.;\\n\\n        #ifdef USE_INSTANCING\\n        float pathOffsetFromInstanceMatrix = instanceMatrix[3][2];\\n        float spineLengthFromInstanceMatrix = instanceMatrix[3][0];\\n        float spinePortion = bend ? (worldPos.x + spineOffset) / spineLengthFromInstanceMatrix : 0.;\\n        float mt = (spinePortion * pathSegment + pathOffset + pathOffsetFromInstanceMatrix)*textureStacks;\\n        #else\\n        float spinePortion = bend ? (worldPos.x + spineOffset) / spineLength : 0.;\\n        float mt = (spinePortion * pathSegment + pathOffset)*textureStacks;\\n        #endif\\n\\n        mt = mod(mt, textureStacks);\\n        float rowOffset = floor(mt);\\n\\n        #ifdef USE_INSTANCING\\n        rowOffset += instanceMatrix[3][1] * \".concat(TEXTURE_HEIGHT, \".;\\n        #endif\\n\\n        vec3 spinePos = texture2D(spineTexture, vec2(mt, (0. + rowOffset + 0.5) / textureLayers)).xyz;\\n        vec3 a =        texture2D(spineTexture, vec2(mt, (1. + rowOffset + 0.5) / textureLayers)).xyz;\\n        vec3 b =        texture2D(spineTexture, vec2(mt, (2. + rowOffset + 0.5) / textureLayers)).xyz;\\n        vec3 c =        texture2D(spineTexture, vec2(mt, (3. + rowOffset + 0.5) / textureLayers)).xyz;\\n        mat3 basis = mat3(a, b, c);\\n\\n        vec3 transformed = basis\\n          * vec3(worldPos.x * xWeight, worldPos.y * 1., worldPos.z * 1.)\\n          + spinePos;\\n\\n        vec3 transformedNormal = normalMatrix * (basis * objectNormal);\\n\\t\\t\\t\")).replace(\"#include <project_vertex>\", /* glsl */\"vec4 mvPosition = modelViewMatrix * vec4( transformed, 1.0 );\\n\\t\\t\\t\\tgl_Position = projectionMatrix * mvPosition;\");\n    shader.vertexShader = vertexShader;\n  };\n}\nvar Flow = /*#__PURE__*/function () {\n  /**\n   * @param {Mesh} mesh The mesh to clone and modify to bend around the curve\n   * @param {number} numberOfCurves The amount of space that should preallocated for additional curves\n   */\n  function Flow(mesh) {\n    var numberOfCurves = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n    _classCallCheck(this, Flow);\n    __publicField(this, \"curveArray\");\n    __publicField(this, \"curveLengthArray\");\n    __publicField(this, \"object3D\");\n    __publicField(this, \"splineTexure\");\n    __publicField(this, \"uniforms\");\n    var obj3D = mesh.clone();\n    var splineTexure = initSplineTexture(numberOfCurves);\n    var uniforms = getUniforms(splineTexure);\n    obj3D.traverse(function (child) {\n      if (child instanceof Mesh || child instanceof InstancedMesh) {\n        child.material = child.material.clone();\n        modifyShader(child.material, uniforms, numberOfCurves);\n      }\n    });\n    this.curveArray = new Array(numberOfCurves);\n    this.curveLengthArray = new Array(numberOfCurves);\n    this.object3D = obj3D;\n    this.splineTexure = splineTexure;\n    this.uniforms = uniforms;\n  }\n  _createClass(Flow, [{\n    key: \"updateCurve\",\n    value: function updateCurve(index, curve) {\n      if (index >= this.curveArray.length) throw Error(\"Index out of range for Flow\");\n      var curveLength = curve.getLength();\n      this.uniforms.spineLength.value = curveLength;\n      this.curveLengthArray[index] = curveLength;\n      this.curveArray[index] = curve;\n      updateSplineTexture(this.splineTexure, curve, index);\n    }\n  }, {\n    key: \"moveAlongCurve\",\n    value: function moveAlongCurve(amount) {\n      this.uniforms.pathOffset.value += amount;\n    }\n  }]);\n  return Flow;\n}();\nvar matrix = /* @__PURE__ */new Matrix4();\nvar InstancedFlow = /*#__PURE__*/function (_Flow) {\n  _inherits(InstancedFlow, _Flow);\n  var _super = _createSuper(InstancedFlow);\n  /**\n   *\n   * @param {number} count The number of instanced elements\n   * @param {number} curveCount The number of curves to preallocate for\n   * @param {Geometry} geometry The geometry to use for the instanced mesh\n   * @param {Material} material The material to use for the instanced mesh\n   */\n  function InstancedFlow(count, curveCount, geometry, material) {\n    var _this;\n    _classCallCheck(this, InstancedFlow);\n    var mesh = new InstancedMesh(geometry, material, count);\n    mesh.instanceMatrix.setUsage(DynamicDrawUsage);\n    mesh.frustumCulled = false;\n    _this = _super.call(this, mesh, curveCount);\n    __publicField(_assertThisInitialized(_this), \"offsets\");\n    __publicField(_assertThisInitialized(_this), \"whichCurve\");\n    _this.offsets = new Array(count).fill(0);\n    _this.whichCurve = new Array(count).fill(0);\n    return _this;\n  }\n  /**\n   * The extra information about which curve and curve position is stored in the translation components of the matrix for the instanced objects\n   * This writes that information to the matrix and marks it as needing update.\n   *\n   * @param {number} index of the instanced element to update\n   */\n  _createClass(InstancedFlow, [{\n    key: \"writeChanges\",\n    value: function writeChanges(index) {\n      matrix.makeTranslation(this.curveLengthArray[this.whichCurve[index]], this.whichCurve[index], this.offsets[index]);\n      this.object3D.setMatrixAt(index, matrix);\n      this.object3D.instanceMatrix.needsUpdate = true;\n    }\n    /**\n     * Move an individual element along the curve by a specific amount\n     *\n     * @param {number} index Which element to update\n     * @param {number} offset Move by how much\n     */\n  }, {\n    key: \"moveIndividualAlongCurve\",\n    value: function moveIndividualAlongCurve(index, offset) {\n      this.offsets[index] += offset;\n      this.writeChanges(index);\n    }\n    /**\n     * Select which curve to use for an element\n     *\n     * @param {number} index the index of the instanced element to update\n     * @param {number} curveNo the index of the curve it should use\n     */\n  }, {\n    key: \"setCurve\",\n    value: function setCurve(index, curveNo) {\n      if (isNaN(curveNo)) throw Error(\"curve index being set is Not a Number (NaN)\");\n      this.whichCurve[index] = curveNo;\n      this.writeChanges(index);\n    }\n  }]);\n  return InstancedFlow;\n}(Flow);\nexport { Flow, InstancedFlow, getUniforms, initSplineTexture, modifyShader, updateSplineTexture };","map":{"version":3,"names":["__defProp","Object","defineProperty","__defNormalProp","obj","key","value","enumerable","configurable","writable","__publicField","DataTexture","RGBAFormat","FloatType","RepeatWrapping","NearestFilter","Mesh","InstancedMesh","Matrix4","DynamicDrawUsage","CHANNELS","TEXTURE_WIDTH","TEXTURE_HEIGHT","initSplineTexture","numberOfCurves","arguments","length","undefined","dataArray","Float32Array","dataTexture","wrapS","wrapT","magFilter","needsUpdate","updateSplineTexture","texture","splineCurve","offset","numberOfPoints","Math","floor","arcLengthDivisions","updateArcLengths","points","getSpacedPoints","frenetFrames","computeFrenetFrames","i","rowOffset","rowIndex","pt","setTextureValue","x","y","z","tangents","normals","binormals","index","o","image","data","getUniforms","splineTexture","spineTexture","pathOffset","type","pathSegment","spineOffset","spineLength","flow","modifyShader","material","uniforms","__ok","onBeforeCompile","shader","__modified","assign","vertexShader","concat","replace","Flow","mesh","_classCallCheck","obj3D","clone","splineTexure","traverse","child","curveArray","Array","curveLengthArray","object3D","_createClass","updateCurve","curve","Error","curveLength","getLength","moveAlongCurve","amount","matrix","InstancedFlow","_Flow","_inherits","_super","_createSuper","count","curveCount","geometry","_this","instanceMatrix","setUsage","frustumCulled","call","_assertThisInitialized","offsets","fill","whichCurve","writeChanges","makeTranslation","setMatrixAt","moveIndividualAlongCurve","setCurve","curveNo","isNaN"],"sources":["/home/krug/Coding/JavaScript/Websites/Personal/personal/node_modules/.pnpm/three-stdlib@2.23.7_three@0.151.3/node_modules/three-stdlib/modifiers/CurveModifier.js"],"sourcesContent":["var __defProp = Object.defineProperty;\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;\nvar __publicField = (obj, key, value) => {\n  __defNormalProp(obj, typeof key !== \"symbol\" ? key + \"\" : key, value);\n  return value;\n};\nimport { DataTexture, RGBAFormat, FloatType, RepeatWrapping, NearestFilter, Mesh, InstancedMesh, Matrix4, DynamicDrawUsage } from \"three\";\nconst CHANNELS = 4;\nconst TEXTURE_WIDTH = 1024;\nconst TEXTURE_HEIGHT = 4;\nconst initSplineTexture = (numberOfCurves = 1) => {\n  const dataArray = new Float32Array(TEXTURE_WIDTH * TEXTURE_HEIGHT * numberOfCurves * CHANNELS);\n  const dataTexture = new DataTexture(dataArray, TEXTURE_WIDTH, TEXTURE_HEIGHT * numberOfCurves, RGBAFormat, FloatType);\n  dataTexture.wrapS = RepeatWrapping;\n  dataTexture.wrapT = RepeatWrapping;\n  dataTexture.magFilter = NearestFilter;\n  dataTexture.needsUpdate = true;\n  return dataTexture;\n};\nconst updateSplineTexture = (texture, splineCurve, offset = 0) => {\n  const numberOfPoints = Math.floor(TEXTURE_WIDTH * (TEXTURE_HEIGHT / 4));\n  splineCurve.arcLengthDivisions = numberOfPoints / 2;\n  splineCurve.updateArcLengths();\n  const points = splineCurve.getSpacedPoints(numberOfPoints);\n  const frenetFrames = splineCurve.computeFrenetFrames(numberOfPoints, true);\n  for (let i = 0; i < numberOfPoints; i++) {\n    const rowOffset = Math.floor(i / TEXTURE_WIDTH);\n    const rowIndex = i % TEXTURE_WIDTH;\n    let pt = points[i];\n    setTextureValue(texture, rowIndex, pt.x, pt.y, pt.z, 0 + rowOffset + TEXTURE_HEIGHT * offset);\n    pt = frenetFrames.tangents[i];\n    setTextureValue(texture, rowIndex, pt.x, pt.y, pt.z, 1 + rowOffset + TEXTURE_HEIGHT * offset);\n    pt = frenetFrames.normals[i];\n    setTextureValue(texture, rowIndex, pt.x, pt.y, pt.z, 2 + rowOffset + TEXTURE_HEIGHT * offset);\n    pt = frenetFrames.binormals[i];\n    setTextureValue(texture, rowIndex, pt.x, pt.y, pt.z, 3 + rowOffset + TEXTURE_HEIGHT * offset);\n  }\n  texture.needsUpdate = true;\n};\nconst setTextureValue = (texture, index, x, y, z, o) => {\n  const image = texture.image;\n  const { data } = image;\n  const i = CHANNELS * TEXTURE_WIDTH * o;\n  data[index * CHANNELS + i + 0] = x;\n  data[index * CHANNELS + i + 1] = y;\n  data[index * CHANNELS + i + 2] = z;\n  data[index * CHANNELS + i + 3] = 1;\n};\nconst getUniforms = (splineTexture) => ({\n  spineTexture: { value: splineTexture },\n  pathOffset: { type: \"f\", value: 0 },\n  // time of path curve\n  pathSegment: { type: \"f\", value: 1 },\n  // fractional length of path\n  spineOffset: { type: \"f\", value: 161 },\n  spineLength: { type: \"f\", value: 400 },\n  flow: { type: \"i\", value: 1 }\n});\nfunction modifyShader(material, uniforms, numberOfCurves = 1) {\n  if (material.__ok)\n    return;\n  material.__ok = true;\n  material.onBeforeCompile = (shader) => {\n    if (shader.__modified)\n      return;\n    shader.__modified = true;\n    Object.assign(shader.uniforms, uniforms);\n    const vertexShader = (\n      /* glsl */\n      `\n\t\tuniform sampler2D spineTexture;\n\t\tuniform float pathOffset;\n\t\tuniform float pathSegment;\n\t\tuniform float spineOffset;\n\t\tuniform float spineLength;\n\t\tuniform int flow;\n\n\t\tfloat textureLayers = ${TEXTURE_HEIGHT * numberOfCurves}.;\n\t\tfloat textureStacks = ${TEXTURE_HEIGHT / 4}.;\n\n\t\t${shader.vertexShader}\n\t\t`.replace(\"#include <beginnormal_vertex>\", \"\").replace(\"#include <defaultnormal_vertex>\", \"\").replace(\"#include <begin_vertex>\", \"\").replace(\n        /void\\s*main\\s*\\(\\)\\s*\\{/,\n        /* glsl */\n        `\n        void main() {\n        #include <beginnormal_vertex>\n\n        vec4 worldPos = modelMatrix * vec4(position, 1.);\n\n        bool bend = flow > 0;\n        float xWeight = bend ? 0. : 1.;\n\n        #ifdef USE_INSTANCING\n        float pathOffsetFromInstanceMatrix = instanceMatrix[3][2];\n        float spineLengthFromInstanceMatrix = instanceMatrix[3][0];\n        float spinePortion = bend ? (worldPos.x + spineOffset) / spineLengthFromInstanceMatrix : 0.;\n        float mt = (spinePortion * pathSegment + pathOffset + pathOffsetFromInstanceMatrix)*textureStacks;\n        #else\n        float spinePortion = bend ? (worldPos.x + spineOffset) / spineLength : 0.;\n        float mt = (spinePortion * pathSegment + pathOffset)*textureStacks;\n        #endif\n\n        mt = mod(mt, textureStacks);\n        float rowOffset = floor(mt);\n\n        #ifdef USE_INSTANCING\n        rowOffset += instanceMatrix[3][1] * ${TEXTURE_HEIGHT}.;\n        #endif\n\n        vec3 spinePos = texture2D(spineTexture, vec2(mt, (0. + rowOffset + 0.5) / textureLayers)).xyz;\n        vec3 a =        texture2D(spineTexture, vec2(mt, (1. + rowOffset + 0.5) / textureLayers)).xyz;\n        vec3 b =        texture2D(spineTexture, vec2(mt, (2. + rowOffset + 0.5) / textureLayers)).xyz;\n        vec3 c =        texture2D(spineTexture, vec2(mt, (3. + rowOffset + 0.5) / textureLayers)).xyz;\n        mat3 basis = mat3(a, b, c);\n\n        vec3 transformed = basis\n          * vec3(worldPos.x * xWeight, worldPos.y * 1., worldPos.z * 1.)\n          + spinePos;\n\n        vec3 transformedNormal = normalMatrix * (basis * objectNormal);\n\t\t\t`\n      ).replace(\n        \"#include <project_vertex>\",\n        /* glsl */\n        `vec4 mvPosition = modelViewMatrix * vec4( transformed, 1.0 );\n\t\t\t\tgl_Position = projectionMatrix * mvPosition;`\n      )\n    );\n    shader.vertexShader = vertexShader;\n  };\n}\nclass Flow {\n  /**\n   * @param {Mesh} mesh The mesh to clone and modify to bend around the curve\n   * @param {number} numberOfCurves The amount of space that should preallocated for additional curves\n   */\n  constructor(mesh, numberOfCurves = 1) {\n    __publicField(this, \"curveArray\");\n    __publicField(this, \"curveLengthArray\");\n    __publicField(this, \"object3D\");\n    __publicField(this, \"splineTexure\");\n    __publicField(this, \"uniforms\");\n    const obj3D = mesh.clone();\n    const splineTexure = initSplineTexture(numberOfCurves);\n    const uniforms = getUniforms(splineTexure);\n    obj3D.traverse((child) => {\n      if (child instanceof Mesh || child instanceof InstancedMesh) {\n        child.material = child.material.clone();\n        modifyShader(child.material, uniforms, numberOfCurves);\n      }\n    });\n    this.curveArray = new Array(numberOfCurves);\n    this.curveLengthArray = new Array(numberOfCurves);\n    this.object3D = obj3D;\n    this.splineTexure = splineTexure;\n    this.uniforms = uniforms;\n  }\n  updateCurve(index, curve) {\n    if (index >= this.curveArray.length)\n      throw Error(\"Index out of range for Flow\");\n    const curveLength = curve.getLength();\n    this.uniforms.spineLength.value = curveLength;\n    this.curveLengthArray[index] = curveLength;\n    this.curveArray[index] = curve;\n    updateSplineTexture(this.splineTexure, curve, index);\n  }\n  moveAlongCurve(amount) {\n    this.uniforms.pathOffset.value += amount;\n  }\n}\nconst matrix = /* @__PURE__ */ new Matrix4();\nclass InstancedFlow extends Flow {\n  /**\n   *\n   * @param {number} count The number of instanced elements\n   * @param {number} curveCount The number of curves to preallocate for\n   * @param {Geometry} geometry The geometry to use for the instanced mesh\n   * @param {Material} material The material to use for the instanced mesh\n   */\n  constructor(count, curveCount, geometry, material) {\n    const mesh = new InstancedMesh(geometry, material, count);\n    mesh.instanceMatrix.setUsage(DynamicDrawUsage);\n    mesh.frustumCulled = false;\n    super(mesh, curveCount);\n    __publicField(this, \"offsets\");\n    __publicField(this, \"whichCurve\");\n    this.offsets = new Array(count).fill(0);\n    this.whichCurve = new Array(count).fill(0);\n  }\n  /**\n   * The extra information about which curve and curve position is stored in the translation components of the matrix for the instanced objects\n   * This writes that information to the matrix and marks it as needing update.\n   *\n   * @param {number} index of the instanced element to update\n   */\n  writeChanges(index) {\n    matrix.makeTranslation(this.curveLengthArray[this.whichCurve[index]], this.whichCurve[index], this.offsets[index]);\n    this.object3D.setMatrixAt(index, matrix);\n    this.object3D.instanceMatrix.needsUpdate = true;\n  }\n  /**\n   * Move an individual element along the curve by a specific amount\n   *\n   * @param {number} index Which element to update\n   * @param {number} offset Move by how much\n   */\n  moveIndividualAlongCurve(index, offset) {\n    this.offsets[index] += offset;\n    this.writeChanges(index);\n  }\n  /**\n   * Select which curve to use for an element\n   *\n   * @param {number} index the index of the instanced element to update\n   * @param {number} curveNo the index of the curve it should use\n   */\n  setCurve(index, curveNo) {\n    if (isNaN(curveNo))\n      throw Error(\"curve index being set is Not a Number (NaN)\");\n    this.whichCurve[index] = curveNo;\n    this.writeChanges(index);\n  }\n}\nexport {\n  Flow,\n  InstancedFlow,\n  getUniforms,\n  initSplineTexture,\n  modifyShader,\n  updateSplineTexture\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}