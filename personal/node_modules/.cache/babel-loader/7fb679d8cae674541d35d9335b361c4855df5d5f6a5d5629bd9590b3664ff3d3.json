{"ast":null,"code":"var __defProp = Object.defineProperty;\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value\n}) : obj[key] = value;\nvar __publicField = (obj, key, value) => {\n  __defNormalProp(obj, typeof key !== \"symbol\" ? key + \"\" : key, value);\n  return value;\n};\nimport { Pass, FullScreenQuad } from \"./Pass.js\";\nimport { Vector2, WebGLRenderTarget, UniformsUtils, ShaderMaterial, AdditiveBlending } from \"three\";\nimport { ConvolutionShader } from \"../shaders/ConvolutionShader.js\";\nclass BloomPass extends Pass {\n  constructor() {\n    let strength = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;\n    let kernelSize = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 25;\n    let sigma = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 4;\n    let resolution = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 256;\n    super();\n    __publicField(this, \"renderTargetX\");\n    __publicField(this, \"renderTargetY\");\n    __publicField(this, \"materialCombine\");\n    __publicField(this, \"materialConvolution\");\n    __publicField(this, \"fsQuad\");\n    __publicField(this, \"combineUniforms\");\n    __publicField(this, \"convolutionUniforms\");\n    __publicField(this, \"blurX\", new Vector2(1953125e-9, 0));\n    __publicField(this, \"blurY\", new Vector2(0, 1953125e-9));\n    this.renderTargetX = new WebGLRenderTarget(resolution, resolution);\n    this.renderTargetX.texture.name = \"BloomPass.x\";\n    this.renderTargetY = new WebGLRenderTarget(resolution, resolution);\n    this.renderTargetY.texture.name = \"BloomPass.y\";\n    this.combineUniforms = UniformsUtils.clone(CombineShader.uniforms);\n    this.combineUniforms[\"strength\"].value = strength;\n    this.materialCombine = new ShaderMaterial({\n      uniforms: this.combineUniforms,\n      vertexShader: CombineShader.vertexShader,\n      fragmentShader: CombineShader.fragmentShader,\n      blending: AdditiveBlending,\n      transparent: true\n    });\n    if (ConvolutionShader === void 0) console.error(\"BloomPass relies on ConvolutionShader\");\n    const convolutionShader = ConvolutionShader;\n    this.convolutionUniforms = UniformsUtils.clone(convolutionShader.uniforms);\n    this.convolutionUniforms[\"uImageIncrement\"].value = this.blurX;\n    this.convolutionUniforms[\"cKernel\"].value = ConvolutionShader.buildKernel(sigma);\n    this.materialConvolution = new ShaderMaterial({\n      uniforms: this.convolutionUniforms,\n      vertexShader: convolutionShader.vertexShader,\n      fragmentShader: convolutionShader.fragmentShader,\n      defines: {\n        KERNEL_SIZE_FLOAT: kernelSize.toFixed(1),\n        KERNEL_SIZE_INT: kernelSize.toFixed(0)\n      }\n    });\n    this.needsSwap = false;\n    this.fsQuad = new FullScreenQuad(this.materialConvolution);\n  }\n  render(renderer, writeBuffer, readBuffer, deltaTime, maskActive) {\n    if (maskActive) renderer.state.buffers.stencil.setTest(false);\n    this.fsQuad.material = this.materialConvolution;\n    this.convolutionUniforms[\"tDiffuse\"].value = readBuffer.texture;\n    this.convolutionUniforms[\"uImageIncrement\"].value = this.blurX;\n    renderer.setRenderTarget(this.renderTargetX);\n    renderer.clear();\n    this.fsQuad.render(renderer);\n    this.convolutionUniforms[\"tDiffuse\"].value = this.renderTargetX.texture;\n    this.convolutionUniforms[\"uImageIncrement\"].value = this.blurY;\n    renderer.setRenderTarget(this.renderTargetY);\n    renderer.clear();\n    this.fsQuad.render(renderer);\n    this.fsQuad.material = this.materialCombine;\n    this.combineUniforms[\"tDiffuse\"].value = this.renderTargetY.texture;\n    if (maskActive) renderer.state.buffers.stencil.setTest(true);\n    renderer.setRenderTarget(readBuffer);\n    if (this.clear) renderer.clear();\n    this.fsQuad.render(renderer);\n  }\n}\nconst CombineShader = {\n  uniforms: {\n    tDiffuse: {\n      value: null\n    },\n    strength: {\n      value: 1\n    }\n  },\n  vertexShader: /* glsl */\n  `\n  varying vec2 vUv;\n  void main() {\n    vUv = uv;\n    gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n  }`,\n  fragmentShader: /* glsl */\n  `\n  uniform float strength;\n  uniform sampler2D tDiffuse;\n  varying vec2 vUv;\n  void main() {\n    vec4 texel = texture2D( tDiffuse, vUv );\n    gl_FragColor = strength * texel;\n  }`\n};\nexport { BloomPass };","map":{"version":3,"names":["__defProp","Object","defineProperty","__defNormalProp","obj","key","value","enumerable","configurable","writable","__publicField","Pass","FullScreenQuad","Vector2","WebGLRenderTarget","UniformsUtils","ShaderMaterial","AdditiveBlending","ConvolutionShader","BloomPass","constructor","strength","arguments","length","undefined","kernelSize","sigma","resolution","renderTargetX","texture","name","renderTargetY","combineUniforms","clone","CombineShader","uniforms","materialCombine","vertexShader","fragmentShader","blending","transparent","console","error","convolutionShader","convolutionUniforms","blurX","buildKernel","materialConvolution","defines","KERNEL_SIZE_FLOAT","toFixed","KERNEL_SIZE_INT","needsSwap","fsQuad","render","renderer","writeBuffer","readBuffer","deltaTime","maskActive","state","buffers","stencil","setTest","material","setRenderTarget","clear","blurY","tDiffuse"],"sources":["/home/krug/Coding/JavaScript/Websites/Personal/personal/node_modules/.pnpm/three-stdlib@2.23.7_three@0.151.3/node_modules/three-stdlib/postprocessing/BloomPass.js"],"sourcesContent":["var __defProp = Object.defineProperty;\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;\nvar __publicField = (obj, key, value) => {\n  __defNormalProp(obj, typeof key !== \"symbol\" ? key + \"\" : key, value);\n  return value;\n};\nimport { Pass, FullScreenQuad } from \"./Pass.js\";\nimport { Vector2, WebGLRenderTarget, UniformsUtils, ShaderMaterial, AdditiveBlending } from \"three\";\nimport { ConvolutionShader } from \"../shaders/ConvolutionShader.js\";\nclass BloomPass extends Pass {\n  constructor(strength = 1, kernelSize = 25, sigma = 4, resolution = 256) {\n    super();\n    __publicField(this, \"renderTargetX\");\n    __publicField(this, \"renderTargetY\");\n    __publicField(this, \"materialCombine\");\n    __publicField(this, \"materialConvolution\");\n    __publicField(this, \"fsQuad\");\n    __publicField(this, \"combineUniforms\");\n    __publicField(this, \"convolutionUniforms\");\n    __publicField(this, \"blurX\", new Vector2(1953125e-9, 0));\n    __publicField(this, \"blurY\", new Vector2(0, 1953125e-9));\n    this.renderTargetX = new WebGLRenderTarget(resolution, resolution);\n    this.renderTargetX.texture.name = \"BloomPass.x\";\n    this.renderTargetY = new WebGLRenderTarget(resolution, resolution);\n    this.renderTargetY.texture.name = \"BloomPass.y\";\n    this.combineUniforms = UniformsUtils.clone(CombineShader.uniforms);\n    this.combineUniforms[\"strength\"].value = strength;\n    this.materialCombine = new ShaderMaterial({\n      uniforms: this.combineUniforms,\n      vertexShader: CombineShader.vertexShader,\n      fragmentShader: CombineShader.fragmentShader,\n      blending: AdditiveBlending,\n      transparent: true\n    });\n    if (ConvolutionShader === void 0)\n      console.error(\"BloomPass relies on ConvolutionShader\");\n    const convolutionShader = ConvolutionShader;\n    this.convolutionUniforms = UniformsUtils.clone(convolutionShader.uniforms);\n    this.convolutionUniforms[\"uImageIncrement\"].value = this.blurX;\n    this.convolutionUniforms[\"cKernel\"].value = ConvolutionShader.buildKernel(sigma);\n    this.materialConvolution = new ShaderMaterial({\n      uniforms: this.convolutionUniforms,\n      vertexShader: convolutionShader.vertexShader,\n      fragmentShader: convolutionShader.fragmentShader,\n      defines: {\n        KERNEL_SIZE_FLOAT: kernelSize.toFixed(1),\n        KERNEL_SIZE_INT: kernelSize.toFixed(0)\n      }\n    });\n    this.needsSwap = false;\n    this.fsQuad = new FullScreenQuad(this.materialConvolution);\n  }\n  render(renderer, writeBuffer, readBuffer, deltaTime, maskActive) {\n    if (maskActive)\n      renderer.state.buffers.stencil.setTest(false);\n    this.fsQuad.material = this.materialConvolution;\n    this.convolutionUniforms[\"tDiffuse\"].value = readBuffer.texture;\n    this.convolutionUniforms[\"uImageIncrement\"].value = this.blurX;\n    renderer.setRenderTarget(this.renderTargetX);\n    renderer.clear();\n    this.fsQuad.render(renderer);\n    this.convolutionUniforms[\"tDiffuse\"].value = this.renderTargetX.texture;\n    this.convolutionUniforms[\"uImageIncrement\"].value = this.blurY;\n    renderer.setRenderTarget(this.renderTargetY);\n    renderer.clear();\n    this.fsQuad.render(renderer);\n    this.fsQuad.material = this.materialCombine;\n    this.combineUniforms[\"tDiffuse\"].value = this.renderTargetY.texture;\n    if (maskActive)\n      renderer.state.buffers.stencil.setTest(true);\n    renderer.setRenderTarget(readBuffer);\n    if (this.clear)\n      renderer.clear();\n    this.fsQuad.render(renderer);\n  }\n}\nconst CombineShader = {\n  uniforms: {\n    tDiffuse: {\n      value: null\n    },\n    strength: {\n      value: 1\n    }\n  },\n  vertexShader: (\n    /* glsl */\n    `\n  varying vec2 vUv;\n  void main() {\n    vUv = uv;\n    gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n  }`\n  ),\n  fragmentShader: (\n    /* glsl */\n    `\n  uniform float strength;\n  uniform sampler2D tDiffuse;\n  varying vec2 vUv;\n  void main() {\n    vec4 texel = texture2D( tDiffuse, vUv );\n    gl_FragColor = strength * texel;\n  }`\n  )\n};\nexport {\n  BloomPass\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}