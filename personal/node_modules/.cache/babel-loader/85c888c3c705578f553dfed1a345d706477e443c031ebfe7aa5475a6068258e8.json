{"ast":null,"code":"import { DataTextureLoader, HalfFloatType, DataUtils, FloatType, LinearFilter } from \"three\";\nclass RGBELoader extends DataTextureLoader {\n  constructor(manager) {\n    super(manager);\n    this.type = HalfFloatType;\n  }\n  // adapted from http://www.graphics.cornell.edu/~bjw/rgbe.html\n  parse(buffer) {\n    const RGBE_RETURN_FAILURE = -1,\n      rgbe_read_error = 1,\n      rgbe_write_error = 2,\n      rgbe_format_error = 3,\n      rgbe_memory_error = 4,\n      rgbe_error = function (rgbe_error_code, msg) {\n        switch (rgbe_error_code) {\n          case rgbe_read_error:\n            console.error(\"THREE.RGBELoader Read Error: \" + (msg || \"\"));\n            break;\n          case rgbe_write_error:\n            console.error(\"THREE.RGBELoader Write Error: \" + (msg || \"\"));\n            break;\n          case rgbe_format_error:\n            console.error(\"THREE.RGBELoader Bad File Format: \" + (msg || \"\"));\n            break;\n          default:\n          case rgbe_memory_error:\n            console.error(\"THREE.RGBELoader: Error: \" + (msg || \"\"));\n        }\n        return RGBE_RETURN_FAILURE;\n      },\n      RGBE_VALID_PROGRAMTYPE = 1,\n      RGBE_VALID_FORMAT = 2,\n      RGBE_VALID_DIMENSIONS = 4,\n      NEWLINE = \"\\n\",\n      fgets = function (buffer2, lineLimit, consume) {\n        const chunkSize = 128;\n        lineLimit = !lineLimit ? 1024 : lineLimit;\n        let p = buffer2.pos,\n          i = -1,\n          len = 0,\n          s = \"\",\n          chunk = String.fromCharCode.apply(null, new Uint16Array(buffer2.subarray(p, p + chunkSize)));\n        while (0 > (i = chunk.indexOf(NEWLINE)) && len < lineLimit && p < buffer2.byteLength) {\n          s += chunk;\n          len += chunk.length;\n          p += chunkSize;\n          chunk += String.fromCharCode.apply(null, new Uint16Array(buffer2.subarray(p, p + chunkSize)));\n        }\n        if (-1 < i) {\n          if (false !== consume) buffer2.pos += len + i + 1;\n          return s + chunk.slice(0, i);\n        }\n        return false;\n      },\n      RGBE_ReadHeader = function (buffer2) {\n        const magic_token_re = /^#\\?(\\S+)/,\n          gamma_re = /^\\s*GAMMA\\s*=\\s*(\\d+(\\.\\d+)?)\\s*$/,\n          exposure_re = /^\\s*EXPOSURE\\s*=\\s*(\\d+(\\.\\d+)?)\\s*$/,\n          format_re = /^\\s*FORMAT=(\\S+)\\s*$/,\n          dimensions_re = /^\\s*\\-Y\\s+(\\d+)\\s+\\+X\\s+(\\d+)\\s*$/,\n          header = {\n            valid: 0,\n            string: \"\",\n            comments: \"\",\n            programtype: \"RGBE\",\n            format: \"\",\n            gamma: 1,\n            exposure: 1,\n            width: 0,\n            height: 0\n          };\n        let line, match;\n        if (buffer2.pos >= buffer2.byteLength || !(line = fgets(buffer2))) {\n          return rgbe_error(rgbe_read_error, \"no header found\");\n        }\n        if (!(match = line.match(magic_token_re))) {\n          return rgbe_error(rgbe_format_error, \"bad initial token\");\n        }\n        header.valid |= RGBE_VALID_PROGRAMTYPE;\n        header.programtype = match[1];\n        header.string += line + \"\\n\";\n        while (true) {\n          line = fgets(buffer2);\n          if (false === line) break;\n          header.string += line + \"\\n\";\n          if (\"#\" === line.charAt(0)) {\n            header.comments += line + \"\\n\";\n            continue;\n          }\n          if (match = line.match(gamma_re)) {\n            header.gamma = parseFloat(match[1]);\n          }\n          if (match = line.match(exposure_re)) {\n            header.exposure = parseFloat(match[1]);\n          }\n          if (match = line.match(format_re)) {\n            header.valid |= RGBE_VALID_FORMAT;\n            header.format = match[1];\n          }\n          if (match = line.match(dimensions_re)) {\n            header.valid |= RGBE_VALID_DIMENSIONS;\n            header.height = parseInt(match[1], 10);\n            header.width = parseInt(match[2], 10);\n          }\n          if (header.valid & RGBE_VALID_FORMAT && header.valid & RGBE_VALID_DIMENSIONS) break;\n        }\n        if (!(header.valid & RGBE_VALID_FORMAT)) {\n          return rgbe_error(rgbe_format_error, \"missing format specifier\");\n        }\n        if (!(header.valid & RGBE_VALID_DIMENSIONS)) {\n          return rgbe_error(rgbe_format_error, \"missing image size specifier\");\n        }\n        return header;\n      },\n      RGBE_ReadPixels_RLE = function (buffer2, w, h) {\n        const scanline_width = w;\n        if (\n        // run length encoding is not allowed so read flat\n        scanline_width < 8 || scanline_width > 32767 ||\n        // this file is not run length encoded\n        2 !== buffer2[0] || 2 !== buffer2[1] || buffer2[2] & 128) {\n          return new Uint8Array(buffer2);\n        }\n        if (scanline_width !== (buffer2[2] << 8 | buffer2[3])) {\n          return rgbe_error(rgbe_format_error, \"wrong scanline width\");\n        }\n        const data_rgba = new Uint8Array(4 * w * h);\n        if (!data_rgba.length) {\n          return rgbe_error(rgbe_memory_error, \"unable to allocate buffer space\");\n        }\n        let offset = 0,\n          pos = 0;\n        const ptr_end = 4 * scanline_width;\n        const rgbeStart = new Uint8Array(4);\n        const scanline_buffer = new Uint8Array(ptr_end);\n        let num_scanlines = h;\n        while (num_scanlines > 0 && pos < buffer2.byteLength) {\n          if (pos + 4 > buffer2.byteLength) {\n            return rgbe_error(rgbe_read_error);\n          }\n          rgbeStart[0] = buffer2[pos++];\n          rgbeStart[1] = buffer2[pos++];\n          rgbeStart[2] = buffer2[pos++];\n          rgbeStart[3] = buffer2[pos++];\n          if (2 != rgbeStart[0] || 2 != rgbeStart[1] || (rgbeStart[2] << 8 | rgbeStart[3]) != scanline_width) {\n            return rgbe_error(rgbe_format_error, \"bad rgbe scanline format\");\n          }\n          let ptr = 0,\n            count;\n          while (ptr < ptr_end && pos < buffer2.byteLength) {\n            count = buffer2[pos++];\n            const isEncodedRun = count > 128;\n            if (isEncodedRun) count -= 128;\n            if (0 === count || ptr + count > ptr_end) {\n              return rgbe_error(rgbe_format_error, \"bad scanline data\");\n            }\n            if (isEncodedRun) {\n              const byteValue = buffer2[pos++];\n              for (let i = 0; i < count; i++) {\n                scanline_buffer[ptr++] = byteValue;\n              }\n            } else {\n              scanline_buffer.set(buffer2.subarray(pos, pos + count), ptr);\n              ptr += count;\n              pos += count;\n            }\n          }\n          const l = scanline_width;\n          for (let i = 0; i < l; i++) {\n            let off = 0;\n            data_rgba[offset] = scanline_buffer[i + off];\n            off += scanline_width;\n            data_rgba[offset + 1] = scanline_buffer[i + off];\n            off += scanline_width;\n            data_rgba[offset + 2] = scanline_buffer[i + off];\n            off += scanline_width;\n            data_rgba[offset + 3] = scanline_buffer[i + off];\n            offset += 4;\n          }\n          num_scanlines--;\n        }\n        return data_rgba;\n      };\n    const RGBEByteToRGBFloat = function (sourceArray, sourceOffset, destArray, destOffset) {\n      const e = sourceArray[sourceOffset + 3];\n      const scale = Math.pow(2, e - 128) / 255;\n      destArray[destOffset + 0] = sourceArray[sourceOffset + 0] * scale;\n      destArray[destOffset + 1] = sourceArray[sourceOffset + 1] * scale;\n      destArray[destOffset + 2] = sourceArray[sourceOffset + 2] * scale;\n      destArray[destOffset + 3] = 1;\n    };\n    const RGBEByteToRGBHalf = function (sourceArray, sourceOffset, destArray, destOffset) {\n      const e = sourceArray[sourceOffset + 3];\n      const scale = Math.pow(2, e - 128) / 255;\n      destArray[destOffset + 0] = DataUtils.toHalfFloat(Math.min(sourceArray[sourceOffset + 0] * scale, 65504));\n      destArray[destOffset + 1] = DataUtils.toHalfFloat(Math.min(sourceArray[sourceOffset + 1] * scale, 65504));\n      destArray[destOffset + 2] = DataUtils.toHalfFloat(Math.min(sourceArray[sourceOffset + 2] * scale, 65504));\n      destArray[destOffset + 3] = DataUtils.toHalfFloat(1);\n    };\n    const byteArray = new Uint8Array(buffer);\n    byteArray.pos = 0;\n    const rgbe_header_info = RGBE_ReadHeader(byteArray);\n    if (RGBE_RETURN_FAILURE !== rgbe_header_info) {\n      const w = rgbe_header_info.width,\n        h = rgbe_header_info.height,\n        image_rgba_data = RGBE_ReadPixels_RLE(byteArray.subarray(byteArray.pos), w, h);\n      if (RGBE_RETURN_FAILURE !== image_rgba_data) {\n        let data, type;\n        let numElements;\n        switch (this.type) {\n          case FloatType:\n            numElements = image_rgba_data.length / 4;\n            const floatArray = new Float32Array(numElements * 4);\n            for (let j = 0; j < numElements; j++) {\n              RGBEByteToRGBFloat(image_rgba_data, j * 4, floatArray, j * 4);\n            }\n            data = floatArray;\n            type = FloatType;\n            break;\n          case HalfFloatType:\n            numElements = image_rgba_data.length / 4;\n            const halfArray = new Uint16Array(numElements * 4);\n            for (let j = 0; j < numElements; j++) {\n              RGBEByteToRGBHalf(image_rgba_data, j * 4, halfArray, j * 4);\n            }\n            data = halfArray;\n            type = HalfFloatType;\n            break;\n          default:\n            console.error(\"THREE.RGBELoader: unsupported type: \", this.type);\n            break;\n        }\n        return {\n          width: w,\n          height: h,\n          data,\n          header: rgbe_header_info.string,\n          gamma: rgbe_header_info.gamma,\n          exposure: rgbe_header_info.exposure,\n          type\n        };\n      }\n    }\n    return null;\n  }\n  setDataType(value) {\n    this.type = value;\n    return this;\n  }\n  load(url, onLoad, onProgress, onError) {\n    function onLoadCallback(texture, texData) {\n      switch (texture.type) {\n        case FloatType:\n        case HalfFloatType:\n          if (\"colorSpace\" in texture) texture.colorSpace = \"srgb-linear\";else texture.encoding = 3e3;\n          texture.minFilter = LinearFilter;\n          texture.magFilter = LinearFilter;\n          texture.generateMipmaps = false;\n          texture.flipY = true;\n          break;\n      }\n      if (onLoad) onLoad(texture, texData);\n    }\n    return super.load(url, onLoadCallback, onProgress, onError);\n  }\n}\nexport { RGBELoader };","map":{"version":3,"names":["DataTextureLoader","HalfFloatType","DataUtils","FloatType","LinearFilter","RGBELoader","constructor","manager","type","parse","buffer","RGBE_RETURN_FAILURE","rgbe_read_error","rgbe_write_error","rgbe_format_error","rgbe_memory_error","rgbe_error","rgbe_error_code","msg","console","error","RGBE_VALID_PROGRAMTYPE","RGBE_VALID_FORMAT","RGBE_VALID_DIMENSIONS","NEWLINE","fgets","buffer2","lineLimit","consume","chunkSize","p","pos","i","len","s","chunk","String","fromCharCode","apply","Uint16Array","subarray","indexOf","byteLength","length","slice","RGBE_ReadHeader","magic_token_re","gamma_re","exposure_re","format_re","dimensions_re","header","valid","string","comments","programtype","format","gamma","exposure","width","height","line","match","charAt","parseFloat","parseInt","RGBE_ReadPixels_RLE","w","h","scanline_width","Uint8Array","data_rgba","offset","ptr_end","rgbeStart","scanline_buffer","num_scanlines","ptr","count","isEncodedRun","byteValue","set","l","off","RGBEByteToRGBFloat","sourceArray","sourceOffset","destArray","destOffset","e","scale","Math","pow","RGBEByteToRGBHalf","toHalfFloat","min","byteArray","rgbe_header_info","image_rgba_data","data","numElements","floatArray","Float32Array","j","halfArray","setDataType","value","load","url","onLoad","onProgress","onError","onLoadCallback","texture","texData","colorSpace","encoding","minFilter","magFilter","generateMipmaps","flipY"],"sources":["/home/krug/Coding/JavaScript/Websites/Personal/personal/node_modules/.pnpm/three-stdlib@2.23.7_three@0.151.3/node_modules/three-stdlib/loaders/RGBELoader.js"],"sourcesContent":["import { DataTextureLoader, HalfFloatType, DataUtils, FloatType, LinearFilter } from \"three\";\nclass RGBELoader extends DataTextureLoader {\n  constructor(manager) {\n    super(manager);\n    this.type = HalfFloatType;\n  }\n  // adapted from http://www.graphics.cornell.edu/~bjw/rgbe.html\n  parse(buffer) {\n    const RGBE_RETURN_FAILURE = -1, rgbe_read_error = 1, rgbe_write_error = 2, rgbe_format_error = 3, rgbe_memory_error = 4, rgbe_error = function(rgbe_error_code, msg) {\n      switch (rgbe_error_code) {\n        case rgbe_read_error:\n          console.error(\"THREE.RGBELoader Read Error: \" + (msg || \"\"));\n          break;\n        case rgbe_write_error:\n          console.error(\"THREE.RGBELoader Write Error: \" + (msg || \"\"));\n          break;\n        case rgbe_format_error:\n          console.error(\"THREE.RGBELoader Bad File Format: \" + (msg || \"\"));\n          break;\n        default:\n        case rgbe_memory_error:\n          console.error(\"THREE.RGBELoader: Error: \" + (msg || \"\"));\n      }\n      return RGBE_RETURN_FAILURE;\n    }, RGBE_VALID_PROGRAMTYPE = 1, RGBE_VALID_FORMAT = 2, RGBE_VALID_DIMENSIONS = 4, NEWLINE = \"\\n\", fgets = function(buffer2, lineLimit, consume) {\n      const chunkSize = 128;\n      lineLimit = !lineLimit ? 1024 : lineLimit;\n      let p = buffer2.pos, i = -1, len = 0, s = \"\", chunk = String.fromCharCode.apply(null, new Uint16Array(buffer2.subarray(p, p + chunkSize)));\n      while (0 > (i = chunk.indexOf(NEWLINE)) && len < lineLimit && p < buffer2.byteLength) {\n        s += chunk;\n        len += chunk.length;\n        p += chunkSize;\n        chunk += String.fromCharCode.apply(null, new Uint16Array(buffer2.subarray(p, p + chunkSize)));\n      }\n      if (-1 < i) {\n        if (false !== consume)\n          buffer2.pos += len + i + 1;\n        return s + chunk.slice(0, i);\n      }\n      return false;\n    }, RGBE_ReadHeader = function(buffer2) {\n      const magic_token_re = /^#\\?(\\S+)/, gamma_re = /^\\s*GAMMA\\s*=\\s*(\\d+(\\.\\d+)?)\\s*$/, exposure_re = /^\\s*EXPOSURE\\s*=\\s*(\\d+(\\.\\d+)?)\\s*$/, format_re = /^\\s*FORMAT=(\\S+)\\s*$/, dimensions_re = /^\\s*\\-Y\\s+(\\d+)\\s+\\+X\\s+(\\d+)\\s*$/, header = {\n        valid: 0,\n        string: \"\",\n        comments: \"\",\n        programtype: \"RGBE\",\n        format: \"\",\n        gamma: 1,\n        exposure: 1,\n        width: 0,\n        height: 0\n      };\n      let line, match;\n      if (buffer2.pos >= buffer2.byteLength || !(line = fgets(buffer2))) {\n        return rgbe_error(rgbe_read_error, \"no header found\");\n      }\n      if (!(match = line.match(magic_token_re))) {\n        return rgbe_error(rgbe_format_error, \"bad initial token\");\n      }\n      header.valid |= RGBE_VALID_PROGRAMTYPE;\n      header.programtype = match[1];\n      header.string += line + \"\\n\";\n      while (true) {\n        line = fgets(buffer2);\n        if (false === line)\n          break;\n        header.string += line + \"\\n\";\n        if (\"#\" === line.charAt(0)) {\n          header.comments += line + \"\\n\";\n          continue;\n        }\n        if (match = line.match(gamma_re)) {\n          header.gamma = parseFloat(match[1]);\n        }\n        if (match = line.match(exposure_re)) {\n          header.exposure = parseFloat(match[1]);\n        }\n        if (match = line.match(format_re)) {\n          header.valid |= RGBE_VALID_FORMAT;\n          header.format = match[1];\n        }\n        if (match = line.match(dimensions_re)) {\n          header.valid |= RGBE_VALID_DIMENSIONS;\n          header.height = parseInt(match[1], 10);\n          header.width = parseInt(match[2], 10);\n        }\n        if (header.valid & RGBE_VALID_FORMAT && header.valid & RGBE_VALID_DIMENSIONS)\n          break;\n      }\n      if (!(header.valid & RGBE_VALID_FORMAT)) {\n        return rgbe_error(rgbe_format_error, \"missing format specifier\");\n      }\n      if (!(header.valid & RGBE_VALID_DIMENSIONS)) {\n        return rgbe_error(rgbe_format_error, \"missing image size specifier\");\n      }\n      return header;\n    }, RGBE_ReadPixels_RLE = function(buffer2, w, h) {\n      const scanline_width = w;\n      if (\n        // run length encoding is not allowed so read flat\n        scanline_width < 8 || scanline_width > 32767 || // this file is not run length encoded\n        2 !== buffer2[0] || 2 !== buffer2[1] || buffer2[2] & 128\n      ) {\n        return new Uint8Array(buffer2);\n      }\n      if (scanline_width !== (buffer2[2] << 8 | buffer2[3])) {\n        return rgbe_error(rgbe_format_error, \"wrong scanline width\");\n      }\n      const data_rgba = new Uint8Array(4 * w * h);\n      if (!data_rgba.length) {\n        return rgbe_error(rgbe_memory_error, \"unable to allocate buffer space\");\n      }\n      let offset = 0, pos = 0;\n      const ptr_end = 4 * scanline_width;\n      const rgbeStart = new Uint8Array(4);\n      const scanline_buffer = new Uint8Array(ptr_end);\n      let num_scanlines = h;\n      while (num_scanlines > 0 && pos < buffer2.byteLength) {\n        if (pos + 4 > buffer2.byteLength) {\n          return rgbe_error(rgbe_read_error);\n        }\n        rgbeStart[0] = buffer2[pos++];\n        rgbeStart[1] = buffer2[pos++];\n        rgbeStart[2] = buffer2[pos++];\n        rgbeStart[3] = buffer2[pos++];\n        if (2 != rgbeStart[0] || 2 != rgbeStart[1] || (rgbeStart[2] << 8 | rgbeStart[3]) != scanline_width) {\n          return rgbe_error(rgbe_format_error, \"bad rgbe scanline format\");\n        }\n        let ptr = 0, count;\n        while (ptr < ptr_end && pos < buffer2.byteLength) {\n          count = buffer2[pos++];\n          const isEncodedRun = count > 128;\n          if (isEncodedRun)\n            count -= 128;\n          if (0 === count || ptr + count > ptr_end) {\n            return rgbe_error(rgbe_format_error, \"bad scanline data\");\n          }\n          if (isEncodedRun) {\n            const byteValue = buffer2[pos++];\n            for (let i = 0; i < count; i++) {\n              scanline_buffer[ptr++] = byteValue;\n            }\n          } else {\n            scanline_buffer.set(buffer2.subarray(pos, pos + count), ptr);\n            ptr += count;\n            pos += count;\n          }\n        }\n        const l = scanline_width;\n        for (let i = 0; i < l; i++) {\n          let off = 0;\n          data_rgba[offset] = scanline_buffer[i + off];\n          off += scanline_width;\n          data_rgba[offset + 1] = scanline_buffer[i + off];\n          off += scanline_width;\n          data_rgba[offset + 2] = scanline_buffer[i + off];\n          off += scanline_width;\n          data_rgba[offset + 3] = scanline_buffer[i + off];\n          offset += 4;\n        }\n        num_scanlines--;\n      }\n      return data_rgba;\n    };\n    const RGBEByteToRGBFloat = function(sourceArray, sourceOffset, destArray, destOffset) {\n      const e = sourceArray[sourceOffset + 3];\n      const scale = Math.pow(2, e - 128) / 255;\n      destArray[destOffset + 0] = sourceArray[sourceOffset + 0] * scale;\n      destArray[destOffset + 1] = sourceArray[sourceOffset + 1] * scale;\n      destArray[destOffset + 2] = sourceArray[sourceOffset + 2] * scale;\n      destArray[destOffset + 3] = 1;\n    };\n    const RGBEByteToRGBHalf = function(sourceArray, sourceOffset, destArray, destOffset) {\n      const e = sourceArray[sourceOffset + 3];\n      const scale = Math.pow(2, e - 128) / 255;\n      destArray[destOffset + 0] = DataUtils.toHalfFloat(Math.min(sourceArray[sourceOffset + 0] * scale, 65504));\n      destArray[destOffset + 1] = DataUtils.toHalfFloat(Math.min(sourceArray[sourceOffset + 1] * scale, 65504));\n      destArray[destOffset + 2] = DataUtils.toHalfFloat(Math.min(sourceArray[sourceOffset + 2] * scale, 65504));\n      destArray[destOffset + 3] = DataUtils.toHalfFloat(1);\n    };\n    const byteArray = new Uint8Array(buffer);\n    byteArray.pos = 0;\n    const rgbe_header_info = RGBE_ReadHeader(byteArray);\n    if (RGBE_RETURN_FAILURE !== rgbe_header_info) {\n      const w = rgbe_header_info.width, h = rgbe_header_info.height, image_rgba_data = RGBE_ReadPixels_RLE(byteArray.subarray(byteArray.pos), w, h);\n      if (RGBE_RETURN_FAILURE !== image_rgba_data) {\n        let data, type;\n        let numElements;\n        switch (this.type) {\n          case FloatType:\n            numElements = image_rgba_data.length / 4;\n            const floatArray = new Float32Array(numElements * 4);\n            for (let j = 0; j < numElements; j++) {\n              RGBEByteToRGBFloat(image_rgba_data, j * 4, floatArray, j * 4);\n            }\n            data = floatArray;\n            type = FloatType;\n            break;\n          case HalfFloatType:\n            numElements = image_rgba_data.length / 4;\n            const halfArray = new Uint16Array(numElements * 4);\n            for (let j = 0; j < numElements; j++) {\n              RGBEByteToRGBHalf(image_rgba_data, j * 4, halfArray, j * 4);\n            }\n            data = halfArray;\n            type = HalfFloatType;\n            break;\n          default:\n            console.error(\"THREE.RGBELoader: unsupported type: \", this.type);\n            break;\n        }\n        return {\n          width: w,\n          height: h,\n          data,\n          header: rgbe_header_info.string,\n          gamma: rgbe_header_info.gamma,\n          exposure: rgbe_header_info.exposure,\n          type\n        };\n      }\n    }\n    return null;\n  }\n  setDataType(value) {\n    this.type = value;\n    return this;\n  }\n  load(url, onLoad, onProgress, onError) {\n    function onLoadCallback(texture, texData) {\n      switch (texture.type) {\n        case FloatType:\n        case HalfFloatType:\n          if (\"colorSpace\" in texture)\n            texture.colorSpace = \"srgb-linear\";\n          else\n            texture.encoding = 3e3;\n          texture.minFilter = LinearFilter;\n          texture.magFilter = LinearFilter;\n          texture.generateMipmaps = false;\n          texture.flipY = true;\n          break;\n      }\n      if (onLoad)\n        onLoad(texture, texData);\n    }\n    return super.load(url, onLoadCallback, onProgress, onError);\n  }\n}\nexport {\n  RGBELoader\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}