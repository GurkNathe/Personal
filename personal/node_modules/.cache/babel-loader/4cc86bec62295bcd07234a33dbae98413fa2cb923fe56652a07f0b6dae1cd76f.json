{"ast":null,"code":"var __defProp = Object.defineProperty;\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value\n}) : obj[key] = value;\nvar __publicField = (obj, key, value) => {\n  __defNormalProp(obj, typeof key !== \"symbol\" ? key + \"\" : key, value);\n  return value;\n};\nimport { BufferGeometry, InterleavedBuffer, InterleavedBufferAttribute, Mesh, MeshBasicMaterial, Vector3, DataTexture, RGBAFormat, NearestFilter, ClampToEdgeWrapping, RawShaderMaterial, Color, Vector2, AdditiveBlending, Box2, Vector4 } from \"three\";\nconst geometry = /* @__PURE__ */new BufferGeometry();\nconst float32Array = /* @__PURE__ */new Float32Array([-1, -1, 0, 0, 0, 1, -1, 0, 1, 0, 1, 1, 0, 1, 1, -1, 1, 0, 0, 1]);\nconst interleavedBuffer = /* @__PURE__ */new InterleavedBuffer(float32Array, 5);\n/* @__PURE__ */\ngeometry.setIndex([0, 1, 2, 0, 2, 3]);\n/* @__PURE__ */\ngeometry.setAttribute(\"position\", /* @__PURE__ */new InterleavedBufferAttribute(interleavedBuffer, 3, 0, false));\n/* @__PURE__ */\ngeometry.setAttribute(\"uv\", /* @__PURE__ */new InterleavedBufferAttribute(interleavedBuffer, 2, 3, false));\nconst _Lensflare = class extends Mesh {\n  constructor() {\n    super(_Lensflare.Geometry, new MeshBasicMaterial({\n      opacity: 0,\n      transparent: true\n    }));\n    this.isLensflare = true;\n    this.type = \"Lensflare\";\n    this.frustumCulled = false;\n    this.renderOrder = Infinity;\n    const positionScreen = new Vector3();\n    const positionView = new Vector3();\n    const tempMap = new DataTexture(new Uint8Array(16 * 16 * 3), 16, 16, RGBAFormat);\n    tempMap.minFilter = NearestFilter;\n    tempMap.magFilter = NearestFilter;\n    tempMap.wrapS = ClampToEdgeWrapping;\n    tempMap.wrapT = ClampToEdgeWrapping;\n    const occlusionMap = new DataTexture(new Uint8Array(16 * 16 * 3), 16, 16, RGBAFormat);\n    occlusionMap.minFilter = NearestFilter;\n    occlusionMap.magFilter = NearestFilter;\n    occlusionMap.wrapS = ClampToEdgeWrapping;\n    occlusionMap.wrapT = ClampToEdgeWrapping;\n    const geometry2 = _Lensflare.Geometry;\n    const material1a = new RawShaderMaterial({\n      uniforms: {\n        scale: {\n          value: null\n        },\n        screenPosition: {\n          value: null\n        }\n      },\n      vertexShader: /* glsl */\n      `\n\n\t\t\t\tprecision highp float;\n\n\t\t\t\tuniform vec3 screenPosition;\n\t\t\t\tuniform vec2 scale;\n\n\t\t\t\tattribute vec3 position;\n\n\t\t\t\tvoid main() {\n\n\t\t\t\t\tgl_Position = vec4( position.xy * scale + screenPosition.xy, screenPosition.z, 1.0 );\n\n\t\t\t\t}`,\n      fragmentShader: /* glsl */\n      `\n\n\t\t\t\tprecision highp float;\n\n\t\t\t\tvoid main() {\n\n\t\t\t\t\tgl_FragColor = vec4( 1.0, 0.0, 1.0, 1.0 );\n\n\t\t\t\t}`,\n      depthTest: true,\n      depthWrite: false,\n      transparent: false\n    });\n    const material1b = new RawShaderMaterial({\n      uniforms: {\n        map: {\n          value: tempMap\n        },\n        scale: {\n          value: null\n        },\n        screenPosition: {\n          value: null\n        }\n      },\n      vertexShader: /* glsl */\n      `\n\n\t\t\t\tprecision highp float;\n\n\t\t\t\tuniform vec3 screenPosition;\n\t\t\t\tuniform vec2 scale;\n\n\t\t\t\tattribute vec3 position;\n\t\t\t\tattribute vec2 uv;\n\n\t\t\t\tvarying vec2 vUV;\n\n\t\t\t\tvoid main() {\n\n\t\t\t\t\tvUV = uv;\n\n\t\t\t\t\tgl_Position = vec4( position.xy * scale + screenPosition.xy, screenPosition.z, 1.0 );\n\n\t\t\t\t}`,\n      fragmentShader: /* glsl */\n      `\n\n\t\t\t\tprecision highp float;\n\n\t\t\t\tuniform sampler2D map;\n\n\t\t\t\tvarying vec2 vUV;\n\n\t\t\t\tvoid main() {\n\n\t\t\t\t\tgl_FragColor = texture2D( map, vUV );\n\n\t\t\t\t}`,\n      depthTest: false,\n      depthWrite: false,\n      transparent: false\n    });\n    const mesh1 = new Mesh(geometry2, material1a);\n    const elements = [];\n    const shader = LensflareElement.Shader;\n    const material2 = new RawShaderMaterial({\n      uniforms: {\n        map: {\n          value: null\n        },\n        occlusionMap: {\n          value: occlusionMap\n        },\n        color: {\n          value: new Color(16777215)\n        },\n        scale: {\n          value: new Vector2()\n        },\n        screenPosition: {\n          value: new Vector3()\n        }\n      },\n      vertexShader: shader.vertexShader,\n      fragmentShader: shader.fragmentShader,\n      blending: AdditiveBlending,\n      transparent: true,\n      depthWrite: false\n    });\n    const mesh2 = new Mesh(geometry2, material2);\n    this.addElement = function (element) {\n      elements.push(element);\n    };\n    const scale = new Vector2();\n    const screenPositionPixels = new Vector2();\n    const validArea = new Box2();\n    const viewport = new Vector4();\n    this.onBeforeRender = function (renderer, scene, camera) {\n      renderer.getCurrentViewport(viewport);\n      const invAspect = viewport.w / viewport.z;\n      const halfViewportWidth = viewport.z / 2;\n      const halfViewportHeight = viewport.w / 2;\n      let size = 16 / viewport.w;\n      scale.set(size * invAspect, size);\n      validArea.min.set(viewport.x, viewport.y);\n      validArea.max.set(viewport.x + (viewport.z - 16), viewport.y + (viewport.w - 16));\n      positionView.setFromMatrixPosition(this.matrixWorld);\n      positionView.applyMatrix4(camera.matrixWorldInverse);\n      if (positionView.z > 0) return;\n      positionScreen.copy(positionView).applyMatrix4(camera.projectionMatrix);\n      screenPositionPixels.x = viewport.x + positionScreen.x * halfViewportWidth + halfViewportWidth - 8;\n      screenPositionPixels.y = viewport.y + positionScreen.y * halfViewportHeight + halfViewportHeight - 8;\n      if (validArea.containsPoint(screenPositionPixels)) {\n        renderer.copyFramebufferToTexture(screenPositionPixels, tempMap);\n        let uniforms = material1a.uniforms;\n        uniforms[\"scale\"].value = scale;\n        uniforms[\"screenPosition\"].value = positionScreen;\n        renderer.renderBufferDirect(camera, null, geometry2, material1a, mesh1, null);\n        renderer.copyFramebufferToTexture(screenPositionPixels, occlusionMap);\n        uniforms = material1b.uniforms;\n        uniforms[\"scale\"].value = scale;\n        uniforms[\"screenPosition\"].value = positionScreen;\n        renderer.renderBufferDirect(camera, null, geometry2, material1b, mesh1, null);\n        const vecX = -positionScreen.x * 2;\n        const vecY = -positionScreen.y * 2;\n        for (let i = 0, l = elements.length; i < l; i++) {\n          const element = elements[i];\n          const uniforms2 = material2.uniforms;\n          uniforms2[\"color\"].value.copy(element.color);\n          uniforms2[\"map\"].value = element.texture;\n          uniforms2[\"screenPosition\"].value.x = positionScreen.x + vecX * element.distance;\n          uniforms2[\"screenPosition\"].value.y = positionScreen.y + vecY * element.distance;\n          size = element.size / viewport.w;\n          const invAspect2 = viewport.w / viewport.z;\n          uniforms2[\"scale\"].value.set(size * invAspect2, size);\n          material2.uniformsNeedUpdate = true;\n          renderer.renderBufferDirect(camera, null, geometry2, material2, mesh2, null);\n        }\n      }\n    };\n    this.dispose = function () {\n      material1a.dispose();\n      material1b.dispose();\n      material2.dispose();\n      tempMap.dispose();\n      occlusionMap.dispose();\n      for (let i = 0, l = elements.length; i < l; i++) {\n        elements[i].texture.dispose();\n      }\n    };\n  }\n};\nlet Lensflare = _Lensflare;\n__publicField(Lensflare, \"Geometry\", geometry);\nclass LensflareElement {\n  constructor(texture) {\n    let size = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n    let distance = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n    let color = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : new Color(16777215);\n    this.texture = texture;\n    this.size = size;\n    this.distance = distance;\n    this.color = color;\n  }\n}\n__publicField(LensflareElement, \"Shader\", {\n  uniforms: {\n    map: {\n      value: null\n    },\n    occlusionMap: {\n      value: null\n    },\n    color: {\n      value: null\n    },\n    scale: {\n      value: null\n    },\n    screenPosition: {\n      value: null\n    }\n  },\n  vertexShader: /* glsl */\n  `\n\n\t\tprecision highp float;\n\n\t\tuniform vec3 screenPosition;\n\t\tuniform vec2 scale;\n\n\t\tuniform sampler2D occlusionMap;\n\n\t\tattribute vec3 position;\n\t\tattribute vec2 uv;\n\n\t\tvarying vec2 vUV;\n\t\tvarying float vVisibility;\n\n\t\tvoid main() {\n\n\t\t\tvUV = uv;\n\n\t\t\tvec2 pos = position.xy;\n\n\t\t\tvec4 visibility = texture2D( occlusionMap, vec2( 0.1, 0.1 ) );\n\t\t\tvisibility += texture2D( occlusionMap, vec2( 0.5, 0.1 ) );\n\t\t\tvisibility += texture2D( occlusionMap, vec2( 0.9, 0.1 ) );\n\t\t\tvisibility += texture2D( occlusionMap, vec2( 0.9, 0.5 ) );\n\t\t\tvisibility += texture2D( occlusionMap, vec2( 0.9, 0.9 ) );\n\t\t\tvisibility += texture2D( occlusionMap, vec2( 0.5, 0.9 ) );\n\t\t\tvisibility += texture2D( occlusionMap, vec2( 0.1, 0.9 ) );\n\t\t\tvisibility += texture2D( occlusionMap, vec2( 0.1, 0.5 ) );\n\t\t\tvisibility += texture2D( occlusionMap, vec2( 0.5, 0.5 ) );\n\n\t\t\tvVisibility =        visibility.r / 9.0;\n\t\t\tvVisibility *= 1.0 - visibility.g / 9.0;\n\t\t\tvVisibility *=       visibility.b / 9.0;\n\n\t\t\tgl_Position = vec4( ( pos * scale + screenPosition.xy ).xy, screenPosition.z, 1.0 );\n\n\t\t}`,\n  fragmentShader: /* glsl */\n  `\n\n\t\tprecision highp float;\n\n\t\tuniform sampler2D map;\n\t\tuniform vec3 color;\n\n\t\tvarying vec2 vUV;\n\t\tvarying float vVisibility;\n\n\t\tvoid main() {\n\n\t\t\tvec4 texture = texture2D( map, vUV );\n\t\t\ttexture.a *= vVisibility;\n\t\t\tgl_FragColor = texture;\n\t\t\tgl_FragColor.rgb *= color;\n\n\t\t}`\n});\nexport { Lensflare, LensflareElement };","map":{"version":3,"names":["__defProp","Object","defineProperty","__defNormalProp","obj","key","value","enumerable","configurable","writable","__publicField","BufferGeometry","InterleavedBuffer","InterleavedBufferAttribute","Mesh","MeshBasicMaterial","Vector3","DataTexture","RGBAFormat","NearestFilter","ClampToEdgeWrapping","RawShaderMaterial","Color","Vector2","AdditiveBlending","Box2","Vector4","geometry","float32Array","Float32Array","interleavedBuffer","setIndex","setAttribute","_Lensflare","constructor","Geometry","opacity","transparent","isLensflare","type","frustumCulled","renderOrder","Infinity","positionScreen","positionView","tempMap","Uint8Array","minFilter","magFilter","wrapS","wrapT","occlusionMap","geometry2","material1a","uniforms","scale","screenPosition","vertexShader","fragmentShader","depthTest","depthWrite","material1b","map","mesh1","elements","shader","LensflareElement","Shader","material2","color","blending","mesh2","addElement","element","push","screenPositionPixels","validArea","viewport","onBeforeRender","renderer","scene","camera","getCurrentViewport","invAspect","w","z","halfViewportWidth","halfViewportHeight","size","set","min","x","y","max","setFromMatrixPosition","matrixWorld","applyMatrix4","matrixWorldInverse","copy","projectionMatrix","containsPoint","copyFramebufferToTexture","renderBufferDirect","vecX","vecY","i","l","length","uniforms2","texture","distance","invAspect2","uniformsNeedUpdate","dispose","Lensflare","arguments","undefined"],"sources":["/home/krug/Coding/JavaScript/Websites/Personal/personal/node_modules/.pnpm/three-stdlib@2.23.7_three@0.151.3/node_modules/three-stdlib/objects/Lensflare.js"],"sourcesContent":["var __defProp = Object.defineProperty;\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;\nvar __publicField = (obj, key, value) => {\n  __defNormalProp(obj, typeof key !== \"symbol\" ? key + \"\" : key, value);\n  return value;\n};\nimport { BufferGeometry, InterleavedBuffer, InterleavedBufferAttribute, Mesh, MeshBasicMaterial, Vector3, DataTexture, RGBAFormat, NearestFilter, ClampToEdgeWrapping, RawShaderMaterial, Color, Vector2, AdditiveBlending, Box2, Vector4 } from \"three\";\nconst geometry = /* @__PURE__ */ new BufferGeometry();\nconst float32Array = /* @__PURE__ */ new Float32Array([-1, -1, 0, 0, 0, 1, -1, 0, 1, 0, 1, 1, 0, 1, 1, -1, 1, 0, 0, 1]);\nconst interleavedBuffer = /* @__PURE__ */ new InterleavedBuffer(float32Array, 5);\n/* @__PURE__ */ geometry.setIndex([0, 1, 2, 0, 2, 3]);\n/* @__PURE__ */ geometry.setAttribute(\n  \"position\",\n  /* @__PURE__ */ new InterleavedBufferAttribute(interleavedBuffer, 3, 0, false)\n);\n/* @__PURE__ */ geometry.setAttribute(\n  \"uv\",\n  /* @__PURE__ */ new InterleavedBufferAttribute(interleavedBuffer, 2, 3, false)\n);\nconst _Lensflare = class extends Mesh {\n  constructor() {\n    super(_Lensflare.Geometry, new MeshBasicMaterial({ opacity: 0, transparent: true }));\n    this.isLensflare = true;\n    this.type = \"Lensflare\";\n    this.frustumCulled = false;\n    this.renderOrder = Infinity;\n    const positionScreen = new Vector3();\n    const positionView = new Vector3();\n    const tempMap = new DataTexture(new Uint8Array(16 * 16 * 3), 16, 16, RGBAFormat);\n    tempMap.minFilter = NearestFilter;\n    tempMap.magFilter = NearestFilter;\n    tempMap.wrapS = ClampToEdgeWrapping;\n    tempMap.wrapT = ClampToEdgeWrapping;\n    const occlusionMap = new DataTexture(new Uint8Array(16 * 16 * 3), 16, 16, RGBAFormat);\n    occlusionMap.minFilter = NearestFilter;\n    occlusionMap.magFilter = NearestFilter;\n    occlusionMap.wrapS = ClampToEdgeWrapping;\n    occlusionMap.wrapT = ClampToEdgeWrapping;\n    const geometry2 = _Lensflare.Geometry;\n    const material1a = new RawShaderMaterial({\n      uniforms: {\n        scale: { value: null },\n        screenPosition: { value: null }\n      },\n      vertexShader: (\n        /* glsl */\n        `\n\n\t\t\t\tprecision highp float;\n\n\t\t\t\tuniform vec3 screenPosition;\n\t\t\t\tuniform vec2 scale;\n\n\t\t\t\tattribute vec3 position;\n\n\t\t\t\tvoid main() {\n\n\t\t\t\t\tgl_Position = vec4( position.xy * scale + screenPosition.xy, screenPosition.z, 1.0 );\n\n\t\t\t\t}`\n      ),\n      fragmentShader: (\n        /* glsl */\n        `\n\n\t\t\t\tprecision highp float;\n\n\t\t\t\tvoid main() {\n\n\t\t\t\t\tgl_FragColor = vec4( 1.0, 0.0, 1.0, 1.0 );\n\n\t\t\t\t}`\n      ),\n      depthTest: true,\n      depthWrite: false,\n      transparent: false\n    });\n    const material1b = new RawShaderMaterial({\n      uniforms: {\n        map: { value: tempMap },\n        scale: { value: null },\n        screenPosition: { value: null }\n      },\n      vertexShader: (\n        /* glsl */\n        `\n\n\t\t\t\tprecision highp float;\n\n\t\t\t\tuniform vec3 screenPosition;\n\t\t\t\tuniform vec2 scale;\n\n\t\t\t\tattribute vec3 position;\n\t\t\t\tattribute vec2 uv;\n\n\t\t\t\tvarying vec2 vUV;\n\n\t\t\t\tvoid main() {\n\n\t\t\t\t\tvUV = uv;\n\n\t\t\t\t\tgl_Position = vec4( position.xy * scale + screenPosition.xy, screenPosition.z, 1.0 );\n\n\t\t\t\t}`\n      ),\n      fragmentShader: (\n        /* glsl */\n        `\n\n\t\t\t\tprecision highp float;\n\n\t\t\t\tuniform sampler2D map;\n\n\t\t\t\tvarying vec2 vUV;\n\n\t\t\t\tvoid main() {\n\n\t\t\t\t\tgl_FragColor = texture2D( map, vUV );\n\n\t\t\t\t}`\n      ),\n      depthTest: false,\n      depthWrite: false,\n      transparent: false\n    });\n    const mesh1 = new Mesh(geometry2, material1a);\n    const elements = [];\n    const shader = LensflareElement.Shader;\n    const material2 = new RawShaderMaterial({\n      uniforms: {\n        map: { value: null },\n        occlusionMap: { value: occlusionMap },\n        color: { value: new Color(16777215) },\n        scale: { value: new Vector2() },\n        screenPosition: { value: new Vector3() }\n      },\n      vertexShader: shader.vertexShader,\n      fragmentShader: shader.fragmentShader,\n      blending: AdditiveBlending,\n      transparent: true,\n      depthWrite: false\n    });\n    const mesh2 = new Mesh(geometry2, material2);\n    this.addElement = function(element) {\n      elements.push(element);\n    };\n    const scale = new Vector2();\n    const screenPositionPixels = new Vector2();\n    const validArea = new Box2();\n    const viewport = new Vector4();\n    this.onBeforeRender = function(renderer, scene, camera) {\n      renderer.getCurrentViewport(viewport);\n      const invAspect = viewport.w / viewport.z;\n      const halfViewportWidth = viewport.z / 2;\n      const halfViewportHeight = viewport.w / 2;\n      let size = 16 / viewport.w;\n      scale.set(size * invAspect, size);\n      validArea.min.set(viewport.x, viewport.y);\n      validArea.max.set(viewport.x + (viewport.z - 16), viewport.y + (viewport.w - 16));\n      positionView.setFromMatrixPosition(this.matrixWorld);\n      positionView.applyMatrix4(camera.matrixWorldInverse);\n      if (positionView.z > 0)\n        return;\n      positionScreen.copy(positionView).applyMatrix4(camera.projectionMatrix);\n      screenPositionPixels.x = viewport.x + positionScreen.x * halfViewportWidth + halfViewportWidth - 8;\n      screenPositionPixels.y = viewport.y + positionScreen.y * halfViewportHeight + halfViewportHeight - 8;\n      if (validArea.containsPoint(screenPositionPixels)) {\n        renderer.copyFramebufferToTexture(screenPositionPixels, tempMap);\n        let uniforms = material1a.uniforms;\n        uniforms[\"scale\"].value = scale;\n        uniforms[\"screenPosition\"].value = positionScreen;\n        renderer.renderBufferDirect(camera, null, geometry2, material1a, mesh1, null);\n        renderer.copyFramebufferToTexture(screenPositionPixels, occlusionMap);\n        uniforms = material1b.uniforms;\n        uniforms[\"scale\"].value = scale;\n        uniforms[\"screenPosition\"].value = positionScreen;\n        renderer.renderBufferDirect(camera, null, geometry2, material1b, mesh1, null);\n        const vecX = -positionScreen.x * 2;\n        const vecY = -positionScreen.y * 2;\n        for (let i = 0, l = elements.length; i < l; i++) {\n          const element = elements[i];\n          const uniforms2 = material2.uniforms;\n          uniforms2[\"color\"].value.copy(element.color);\n          uniforms2[\"map\"].value = element.texture;\n          uniforms2[\"screenPosition\"].value.x = positionScreen.x + vecX * element.distance;\n          uniforms2[\"screenPosition\"].value.y = positionScreen.y + vecY * element.distance;\n          size = element.size / viewport.w;\n          const invAspect2 = viewport.w / viewport.z;\n          uniforms2[\"scale\"].value.set(size * invAspect2, size);\n          material2.uniformsNeedUpdate = true;\n          renderer.renderBufferDirect(camera, null, geometry2, material2, mesh2, null);\n        }\n      }\n    };\n    this.dispose = function() {\n      material1a.dispose();\n      material1b.dispose();\n      material2.dispose();\n      tempMap.dispose();\n      occlusionMap.dispose();\n      for (let i = 0, l = elements.length; i < l; i++) {\n        elements[i].texture.dispose();\n      }\n    };\n  }\n};\nlet Lensflare = _Lensflare;\n__publicField(Lensflare, \"Geometry\", geometry);\nclass LensflareElement {\n  constructor(texture, size = 1, distance = 0, color = new Color(16777215)) {\n    this.texture = texture;\n    this.size = size;\n    this.distance = distance;\n    this.color = color;\n  }\n}\n__publicField(LensflareElement, \"Shader\", {\n  uniforms: {\n    map: { value: null },\n    occlusionMap: { value: null },\n    color: { value: null },\n    scale: { value: null },\n    screenPosition: { value: null }\n  },\n  vertexShader: (\n    /* glsl */\n    `\n\n\t\tprecision highp float;\n\n\t\tuniform vec3 screenPosition;\n\t\tuniform vec2 scale;\n\n\t\tuniform sampler2D occlusionMap;\n\n\t\tattribute vec3 position;\n\t\tattribute vec2 uv;\n\n\t\tvarying vec2 vUV;\n\t\tvarying float vVisibility;\n\n\t\tvoid main() {\n\n\t\t\tvUV = uv;\n\n\t\t\tvec2 pos = position.xy;\n\n\t\t\tvec4 visibility = texture2D( occlusionMap, vec2( 0.1, 0.1 ) );\n\t\t\tvisibility += texture2D( occlusionMap, vec2( 0.5, 0.1 ) );\n\t\t\tvisibility += texture2D( occlusionMap, vec2( 0.9, 0.1 ) );\n\t\t\tvisibility += texture2D( occlusionMap, vec2( 0.9, 0.5 ) );\n\t\t\tvisibility += texture2D( occlusionMap, vec2( 0.9, 0.9 ) );\n\t\t\tvisibility += texture2D( occlusionMap, vec2( 0.5, 0.9 ) );\n\t\t\tvisibility += texture2D( occlusionMap, vec2( 0.1, 0.9 ) );\n\t\t\tvisibility += texture2D( occlusionMap, vec2( 0.1, 0.5 ) );\n\t\t\tvisibility += texture2D( occlusionMap, vec2( 0.5, 0.5 ) );\n\n\t\t\tvVisibility =        visibility.r / 9.0;\n\t\t\tvVisibility *= 1.0 - visibility.g / 9.0;\n\t\t\tvVisibility *=       visibility.b / 9.0;\n\n\t\t\tgl_Position = vec4( ( pos * scale + screenPosition.xy ).xy, screenPosition.z, 1.0 );\n\n\t\t}`\n  ),\n  fragmentShader: (\n    /* glsl */\n    `\n\n\t\tprecision highp float;\n\n\t\tuniform sampler2D map;\n\t\tuniform vec3 color;\n\n\t\tvarying vec2 vUV;\n\t\tvarying float vVisibility;\n\n\t\tvoid main() {\n\n\t\t\tvec4 texture = texture2D( map, vUV );\n\t\t\ttexture.a *= vVisibility;\n\t\t\tgl_FragColor = texture;\n\t\t\tgl_FragColor.rgb *= color;\n\n\t\t}`\n  )\n});\nexport {\n  Lensflare,\n  LensflareElement\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}