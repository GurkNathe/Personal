{"ast":null,"code":"import { Vector3, Color, SphericalHarmonics3, LightProbe } from \"three\";\nclass LightProbeGenerator {\n  // https://www.ppsloan.org/publications/StupidSH36.pdf\n  static fromCubeTexture(cubeTexture) {\n    let totalWeight = 0;\n    const coord = new Vector3();\n    const dir = new Vector3();\n    const color = new Color();\n    const shBasis = [0, 0, 0, 0, 0, 0, 0, 0, 0];\n    const sh = new SphericalHarmonics3();\n    const shCoefficients = sh.coefficients;\n    for (let faceIndex = 0; faceIndex < 6; faceIndex++) {\n      const image = cubeTexture.image[faceIndex];\n      const width = image.width;\n      const height = image.height;\n      const canvas = document.createElement(\"canvas\");\n      canvas.width = width;\n      canvas.height = height;\n      const context = canvas.getContext(\"2d\");\n      context.drawImage(image, 0, 0, width, height);\n      const imageData = context.getImageData(0, 0, width, height);\n      const data = imageData.data;\n      const imageWidth = imageData.width;\n      const pixelSize = 2 / imageWidth;\n      for (let i = 0, il = data.length; i < il; i += 4) {\n        color.setRGB(data[i] / 255, data[i + 1] / 255, data[i + 2] / 255);\n        if (\"colorSpace\" in cubeTexture) {\n          if (cubeTexture.colorSpace === \"srgb\") {\n            color.convertSRGBToLinear();\n          }\n        } else if (cubeTexture.encoding === 3001) {\n          color.convertSRGBToLinear();\n        }\n        const pixelIndex = i / 4;\n        const col = -1 + (pixelIndex % imageWidth + 0.5) * pixelSize;\n        const row = 1 - (Math.floor(pixelIndex / imageWidth) + 0.5) * pixelSize;\n        switch (faceIndex) {\n          case 0:\n            coord.set(-1, row, -col);\n            break;\n          case 1:\n            coord.set(1, row, col);\n            break;\n          case 2:\n            coord.set(-col, 1, -row);\n            break;\n          case 3:\n            coord.set(-col, -1, row);\n            break;\n          case 4:\n            coord.set(-col, row, 1);\n            break;\n          case 5:\n            coord.set(col, row, -1);\n            break;\n        }\n        const lengthSq = coord.lengthSq();\n        const weight = 4 / (Math.sqrt(lengthSq) * lengthSq);\n        totalWeight += weight;\n        dir.copy(coord).normalize();\n        SphericalHarmonics3.getBasisAt(dir, shBasis);\n        for (let j = 0; j < 9; j++) {\n          shCoefficients[j].x += shBasis[j] * color.r * weight;\n          shCoefficients[j].y += shBasis[j] * color.g * weight;\n          shCoefficients[j].z += shBasis[j] * color.b * weight;\n        }\n      }\n    }\n    const norm = 4 * Math.PI / totalWeight;\n    for (let j = 0; j < 9; j++) {\n      shCoefficients[j].x *= norm;\n      shCoefficients[j].y *= norm;\n      shCoefficients[j].z *= norm;\n    }\n    return new LightProbe(sh);\n  }\n  static fromCubeRenderTarget(renderer, cubeRenderTarget) {\n    let totalWeight = 0;\n    const coord = new Vector3();\n    const dir = new Vector3();\n    const color = new Color();\n    const shBasis = [0, 0, 0, 0, 0, 0, 0, 0, 0];\n    const sh = new SphericalHarmonics3();\n    const shCoefficients = sh.coefficients;\n    for (let faceIndex = 0; faceIndex < 6; faceIndex++) {\n      const imageWidth = cubeRenderTarget.width;\n      const data = new Uint8Array(imageWidth * imageWidth * 4);\n      renderer.readRenderTargetPixels(cubeRenderTarget, 0, 0, imageWidth, imageWidth, data, faceIndex);\n      const pixelSize = 2 / imageWidth;\n      for (let i = 0, il = data.length; i < il; i += 4) {\n        color.setRGB(data[i] / 255, data[i + 1] / 255, data[i + 2] / 255);\n        if (\"colorSpace\" in cubeRenderTarget.texture) {\n          if (cubeRenderTarget.texture.colorSpace === \"srgb\") {\n            color.convertSRGBToLinear();\n          }\n        } else if (cubeRenderTarget.texture.encoding === 3001) {\n          color.convertSRGBToLinear();\n        }\n        const pixelIndex = i / 4;\n        const col = -1 + (pixelIndex % imageWidth + 0.5) * pixelSize;\n        const row = 1 - (Math.floor(pixelIndex / imageWidth) + 0.5) * pixelSize;\n        switch (faceIndex) {\n          case 0:\n            coord.set(1, row, -col);\n            break;\n          case 1:\n            coord.set(-1, row, col);\n            break;\n          case 2:\n            coord.set(col, 1, -row);\n            break;\n          case 3:\n            coord.set(col, -1, row);\n            break;\n          case 4:\n            coord.set(col, row, 1);\n            break;\n          case 5:\n            coord.set(-col, row, -1);\n            break;\n        }\n        const lengthSq = coord.lengthSq();\n        const weight = 4 / (Math.sqrt(lengthSq) * lengthSq);\n        totalWeight += weight;\n        dir.copy(coord).normalize();\n        SphericalHarmonics3.getBasisAt(dir, shBasis);\n        for (let j = 0; j < 9; j++) {\n          shCoefficients[j].x += shBasis[j] * color.r * weight;\n          shCoefficients[j].y += shBasis[j] * color.g * weight;\n          shCoefficients[j].z += shBasis[j] * color.b * weight;\n        }\n      }\n    }\n    const norm = 4 * Math.PI / totalWeight;\n    for (let j = 0; j < 9; j++) {\n      shCoefficients[j].x *= norm;\n      shCoefficients[j].y *= norm;\n      shCoefficients[j].z *= norm;\n    }\n    return new LightProbe(sh);\n  }\n}\nexport { LightProbeGenerator };","map":{"version":3,"names":["Vector3","Color","SphericalHarmonics3","LightProbe","LightProbeGenerator","fromCubeTexture","cubeTexture","totalWeight","coord","dir","color","shBasis","sh","shCoefficients","coefficients","faceIndex","image","width","height","canvas","document","createElement","context","getContext","drawImage","imageData","getImageData","data","imageWidth","pixelSize","i","il","length","setRGB","colorSpace","convertSRGBToLinear","encoding","pixelIndex","col","row","Math","floor","set","lengthSq","weight","sqrt","copy","normalize","getBasisAt","j","x","r","y","g","z","b","norm","PI","fromCubeRenderTarget","renderer","cubeRenderTarget","Uint8Array","readRenderTargetPixels","texture"],"sources":["/home/krug/Coding/JavaScript/Websites/Personal/personal/node_modules/.pnpm/three-stdlib@2.23.7_three@0.151.3/node_modules/three-stdlib/lights/LightProbeGenerator.js"],"sourcesContent":["import { Vector3, Color, SphericalHarmonics3, LightProbe } from \"three\";\nclass LightProbeGenerator {\n  // https://www.ppsloan.org/publications/StupidSH36.pdf\n  static fromCubeTexture(cubeTexture) {\n    let totalWeight = 0;\n    const coord = new Vector3();\n    const dir = new Vector3();\n    const color = new Color();\n    const shBasis = [0, 0, 0, 0, 0, 0, 0, 0, 0];\n    const sh = new SphericalHarmonics3();\n    const shCoefficients = sh.coefficients;\n    for (let faceIndex = 0; faceIndex < 6; faceIndex++) {\n      const image = cubeTexture.image[faceIndex];\n      const width = image.width;\n      const height = image.height;\n      const canvas = document.createElement(\"canvas\");\n      canvas.width = width;\n      canvas.height = height;\n      const context = canvas.getContext(\"2d\");\n      context.drawImage(image, 0, 0, width, height);\n      const imageData = context.getImageData(0, 0, width, height);\n      const data = imageData.data;\n      const imageWidth = imageData.width;\n      const pixelSize = 2 / imageWidth;\n      for (let i = 0, il = data.length; i < il; i += 4) {\n        color.setRGB(data[i] / 255, data[i + 1] / 255, data[i + 2] / 255);\n        if (\"colorSpace\" in cubeTexture) {\n          if (cubeTexture.colorSpace === \"srgb\") {\n            color.convertSRGBToLinear();\n          }\n        } else if (cubeTexture.encoding === 3001) {\n          color.convertSRGBToLinear();\n        }\n        const pixelIndex = i / 4;\n        const col = -1 + (pixelIndex % imageWidth + 0.5) * pixelSize;\n        const row = 1 - (Math.floor(pixelIndex / imageWidth) + 0.5) * pixelSize;\n        switch (faceIndex) {\n          case 0:\n            coord.set(-1, row, -col);\n            break;\n          case 1:\n            coord.set(1, row, col);\n            break;\n          case 2:\n            coord.set(-col, 1, -row);\n            break;\n          case 3:\n            coord.set(-col, -1, row);\n            break;\n          case 4:\n            coord.set(-col, row, 1);\n            break;\n          case 5:\n            coord.set(col, row, -1);\n            break;\n        }\n        const lengthSq = coord.lengthSq();\n        const weight = 4 / (Math.sqrt(lengthSq) * lengthSq);\n        totalWeight += weight;\n        dir.copy(coord).normalize();\n        SphericalHarmonics3.getBasisAt(dir, shBasis);\n        for (let j = 0; j < 9; j++) {\n          shCoefficients[j].x += shBasis[j] * color.r * weight;\n          shCoefficients[j].y += shBasis[j] * color.g * weight;\n          shCoefficients[j].z += shBasis[j] * color.b * weight;\n        }\n      }\n    }\n    const norm = 4 * Math.PI / totalWeight;\n    for (let j = 0; j < 9; j++) {\n      shCoefficients[j].x *= norm;\n      shCoefficients[j].y *= norm;\n      shCoefficients[j].z *= norm;\n    }\n    return new LightProbe(sh);\n  }\n  static fromCubeRenderTarget(renderer, cubeRenderTarget) {\n    let totalWeight = 0;\n    const coord = new Vector3();\n    const dir = new Vector3();\n    const color = new Color();\n    const shBasis = [0, 0, 0, 0, 0, 0, 0, 0, 0];\n    const sh = new SphericalHarmonics3();\n    const shCoefficients = sh.coefficients;\n    for (let faceIndex = 0; faceIndex < 6; faceIndex++) {\n      const imageWidth = cubeRenderTarget.width;\n      const data = new Uint8Array(imageWidth * imageWidth * 4);\n      renderer.readRenderTargetPixels(cubeRenderTarget, 0, 0, imageWidth, imageWidth, data, faceIndex);\n      const pixelSize = 2 / imageWidth;\n      for (let i = 0, il = data.length; i < il; i += 4) {\n        color.setRGB(data[i] / 255, data[i + 1] / 255, data[i + 2] / 255);\n        if (\"colorSpace\" in cubeRenderTarget.texture) {\n          if (cubeRenderTarget.texture.colorSpace === \"srgb\") {\n            color.convertSRGBToLinear();\n          }\n        } else if (cubeRenderTarget.texture.encoding === 3001) {\n          color.convertSRGBToLinear();\n        }\n        const pixelIndex = i / 4;\n        const col = -1 + (pixelIndex % imageWidth + 0.5) * pixelSize;\n        const row = 1 - (Math.floor(pixelIndex / imageWidth) + 0.5) * pixelSize;\n        switch (faceIndex) {\n          case 0:\n            coord.set(1, row, -col);\n            break;\n          case 1:\n            coord.set(-1, row, col);\n            break;\n          case 2:\n            coord.set(col, 1, -row);\n            break;\n          case 3:\n            coord.set(col, -1, row);\n            break;\n          case 4:\n            coord.set(col, row, 1);\n            break;\n          case 5:\n            coord.set(-col, row, -1);\n            break;\n        }\n        const lengthSq = coord.lengthSq();\n        const weight = 4 / (Math.sqrt(lengthSq) * lengthSq);\n        totalWeight += weight;\n        dir.copy(coord).normalize();\n        SphericalHarmonics3.getBasisAt(dir, shBasis);\n        for (let j = 0; j < 9; j++) {\n          shCoefficients[j].x += shBasis[j] * color.r * weight;\n          shCoefficients[j].y += shBasis[j] * color.g * weight;\n          shCoefficients[j].z += shBasis[j] * color.b * weight;\n        }\n      }\n    }\n    const norm = 4 * Math.PI / totalWeight;\n    for (let j = 0; j < 9; j++) {\n      shCoefficients[j].x *= norm;\n      shCoefficients[j].y *= norm;\n      shCoefficients[j].z *= norm;\n    }\n    return new LightProbe(sh);\n  }\n}\nexport {\n  LightProbeGenerator\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}