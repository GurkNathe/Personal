{"ast":null,"code":"import { Vector2 } from \"three\";\nconst TriangleBlurShader = {\n  uniforms: {\n    texture: {\n      value: null\n    },\n    delta: {\n      value: /* @__PURE__ */new Vector2(1, 1)\n    }\n  },\n  vertexShader: [\"varying vec2 vUv;\", \"void main() {\", \"\tvUv = uv;\", \"\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\", \"}\"].join(\"\\n\"),\n  fragmentShader: [\"#include <common>\", \"#define ITERATIONS 10.0\", \"uniform sampler2D texture;\", \"uniform vec2 delta;\", \"varying vec2 vUv;\", \"void main() {\", \"\tvec4 color = vec4( 0.0 );\", \"\tfloat total = 0.0;\",\n  // randomize the lookup values to hide the fixed number of samples\n  \"\tfloat offset = rand( vUv );\", \"\tfor ( float t = -ITERATIONS; t <= ITERATIONS; t ++ ) {\", \"\t\tfloat percent = ( t + offset - 0.5 ) / ITERATIONS;\", \"\t\tfloat weight = 1.0 - abs( percent );\", \"\t\tcolor += texture2D( texture, vUv + delta * percent ) * weight;\", \"\t\ttotal += weight;\", \"\t}\", \"\tgl_FragColor = color / total;\", \"}\"].join(\"\\n\")\n};\nexport { TriangleBlurShader };","map":{"version":3,"names":["Vector2","TriangleBlurShader","uniforms","texture","value","delta","vertexShader","join","fragmentShader"],"sources":["/home/krug/Coding/JavaScript/Websites/Personal/personal/node_modules/.pnpm/three-stdlib@2.23.7_three@0.151.3/node_modules/three-stdlib/shaders/TriangleBlurShader.js"],"sourcesContent":["import { Vector2 } from \"three\";\nconst TriangleBlurShader = {\n  uniforms: {\n    texture: { value: null },\n    delta: { value: /* @__PURE__ */ new Vector2(1, 1) }\n  },\n  vertexShader: [\n    \"varying vec2 vUv;\",\n    \"void main() {\",\n    \"\tvUv = uv;\",\n    \"\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\",\n    \"}\"\n  ].join(\"\\n\"),\n  fragmentShader: [\n    \"#include <common>\",\n    \"#define ITERATIONS 10.0\",\n    \"uniform sampler2D texture;\",\n    \"uniform vec2 delta;\",\n    \"varying vec2 vUv;\",\n    \"void main() {\",\n    \"\tvec4 color = vec4( 0.0 );\",\n    \"\tfloat total = 0.0;\",\n    // randomize the lookup values to hide the fixed number of samples\n    \"\tfloat offset = rand( vUv );\",\n    \"\tfor ( float t = -ITERATIONS; t <= ITERATIONS; t ++ ) {\",\n    \"\t\tfloat percent = ( t + offset - 0.5 ) / ITERATIONS;\",\n    \"\t\tfloat weight = 1.0 - abs( percent );\",\n    \"\t\tcolor += texture2D( texture, vUv + delta * percent ) * weight;\",\n    \"\t\ttotal += weight;\",\n    \"\t}\",\n    \"\tgl_FragColor = color / total;\",\n    \"}\"\n  ].join(\"\\n\")\n};\nexport {\n  TriangleBlurShader\n};\n"],"mappings":"AAAA,SAASA,OAAO,QAAQ,OAAO;AAC/B,MAAMC,kBAAkB,GAAG;EACzBC,QAAQ,EAAE;IACRC,OAAO,EAAE;MAAEC,KAAK,EAAE;IAAK,CAAC;IACxBC,KAAK,EAAE;MAAED,KAAK,EAAE,eAAgB,IAAIJ,OAAO,CAAC,CAAC,EAAE,CAAC;IAAE;EACpD,CAAC;EACDM,YAAY,EAAE,CACZ,mBAAmB,EACnB,eAAe,EACf,YAAY,EACZ,4EAA4E,EAC5E,GAAG,CACJ,CAACC,IAAI,CAAC,IAAI,CAAC;EACZC,cAAc,EAAE,CACd,mBAAmB,EACnB,yBAAyB,EACzB,4BAA4B,EAC5B,qBAAqB,EACrB,mBAAmB,EACnB,eAAe,EACf,4BAA4B,EAC5B,qBAAqB;EACrB;EACA,8BAA8B,EAC9B,yDAAyD,EACzD,sDAAsD,EACtD,wCAAwC,EACxC,kEAAkE,EAClE,oBAAoB,EACpB,IAAI,EACJ,gCAAgC,EAChC,GAAG,CACJ,CAACD,IAAI,CAAC,IAAI;AACb,CAAC;AACD,SACEN,kBAAkB"},"metadata":{},"sourceType":"module","externalDependencies":[]}