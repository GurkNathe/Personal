{"ast":null,"code":"import _classCallCheck from \"/home/krug/Coding/JavaScript/Websites/Personal/personal/node_modules/.pnpm/@babel+runtime@7.22.3/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/home/krug/Coding/JavaScript/Websites/Personal/personal/node_modules/.pnpm/@babel+runtime@7.22.3/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport { Vector3, Matrix3, Box3, Matrix4, Ray, MathUtils } from \"three\";\nvar a = {\n  c: null,\n  // center\n  u: [/* @__PURE__ */new Vector3(), /* @__PURE__ */new Vector3(), /* @__PURE__ */new Vector3()],\n  // basis vectors\n  e: []\n  // half width\n};\n\nvar b = {\n  c: null,\n  // center\n  u: [/* @__PURE__ */new Vector3(), /* @__PURE__ */new Vector3(), /* @__PURE__ */new Vector3()],\n  // basis vectors\n  e: []\n  // half width\n};\n\nvar R = [[], [], []];\nvar AbsR = [[], [], []];\nvar t = [];\nvar xAxis = /* @__PURE__ */new Vector3();\nvar yAxis = /* @__PURE__ */new Vector3();\nvar zAxis = /* @__PURE__ */new Vector3();\nvar v1 = /* @__PURE__ */new Vector3();\nvar size = /* @__PURE__ */new Vector3();\nvar closestPoint = /* @__PURE__ */new Vector3();\nvar rotationMatrix = /* @__PURE__ */new Matrix3();\nvar aabb = /* @__PURE__ */new Box3();\nvar matrix = /* @__PURE__ */new Matrix4();\nvar inverse = /* @__PURE__ */new Matrix4();\nvar localRay = /* @__PURE__ */new Ray();\nvar OBB = /*#__PURE__*/function () {\n  function OBB() {\n    var center = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : new Vector3();\n    var halfSize = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : new Vector3();\n    var rotation = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : new Matrix3();\n    _classCallCheck(this, OBB);\n    this.center = center;\n    this.halfSize = halfSize;\n    this.rotation = rotation;\n  }\n  _createClass(OBB, [{\n    key: \"set\",\n    value: function set(center, halfSize, rotation) {\n      this.center = center;\n      this.halfSize = halfSize;\n      this.rotation = rotation;\n      return this;\n    }\n  }, {\n    key: \"copy\",\n    value: function copy(obb2) {\n      this.center.copy(obb2.center);\n      this.halfSize.copy(obb2.halfSize);\n      this.rotation.copy(obb2.rotation);\n      return this;\n    }\n  }, {\n    key: \"clone\",\n    value: function clone() {\n      return new this.constructor().copy(this);\n    }\n  }, {\n    key: \"getSize\",\n    value: function getSize(result) {\n      return result.copy(this.halfSize).multiplyScalar(2);\n    }\n    /**\n     * Reference: Closest Point on OBB to Point in Real-Time Collision Detection\n     * by Christer Ericson (chapter 5.1.4)\n     */\n  }, {\n    key: \"clampPoint\",\n    value: function clampPoint(point, result) {\n      var halfSize = this.halfSize;\n      v1.subVectors(point, this.center);\n      this.rotation.extractBasis(xAxis, yAxis, zAxis);\n      result.copy(this.center);\n      var x = MathUtils.clamp(v1.dot(xAxis), -halfSize.x, halfSize.x);\n      result.add(xAxis.multiplyScalar(x));\n      var y = MathUtils.clamp(v1.dot(yAxis), -halfSize.y, halfSize.y);\n      result.add(yAxis.multiplyScalar(y));\n      var z = MathUtils.clamp(v1.dot(zAxis), -halfSize.z, halfSize.z);\n      result.add(zAxis.multiplyScalar(z));\n      return result;\n    }\n  }, {\n    key: \"containsPoint\",\n    value: function containsPoint(point) {\n      v1.subVectors(point, this.center);\n      this.rotation.extractBasis(xAxis, yAxis, zAxis);\n      return Math.abs(v1.dot(xAxis)) <= this.halfSize.x && Math.abs(v1.dot(yAxis)) <= this.halfSize.y && Math.abs(v1.dot(zAxis)) <= this.halfSize.z;\n    }\n  }, {\n    key: \"intersectsBox3\",\n    value: function intersectsBox3(box3) {\n      return this.intersectsOBB(obb.fromBox3(box3));\n    }\n  }, {\n    key: \"intersectsSphere\",\n    value: function intersectsSphere(sphere) {\n      this.clampPoint(sphere.center, closestPoint);\n      return closestPoint.distanceToSquared(sphere.center) <= sphere.radius * sphere.radius;\n    }\n    /**\n     * Reference: OBB-OBB Intersection in Real-Time Collision Detection\n     * by Christer Ericson (chapter 4.4.1)\n     *\n     */\n  }, {\n    key: \"intersectsOBB\",\n    value: function intersectsOBB(obb2) {\n      var epsilon = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : Number.EPSILON;\n      a.c = this.center;\n      a.e[0] = this.halfSize.x;\n      a.e[1] = this.halfSize.y;\n      a.e[2] = this.halfSize.z;\n      this.rotation.extractBasis(a.u[0], a.u[1], a.u[2]);\n      b.c = obb2.center;\n      b.e[0] = obb2.halfSize.x;\n      b.e[1] = obb2.halfSize.y;\n      b.e[2] = obb2.halfSize.z;\n      obb2.rotation.extractBasis(b.u[0], b.u[1], b.u[2]);\n      for (var i = 0; i < 3; i++) {\n        for (var j = 0; j < 3; j++) {\n          R[i][j] = a.u[i].dot(b.u[j]);\n        }\n      }\n      v1.subVectors(b.c, a.c);\n      t[0] = v1.dot(a.u[0]);\n      t[1] = v1.dot(a.u[1]);\n      t[2] = v1.dot(a.u[2]);\n      for (var _i = 0; _i < 3; _i++) {\n        for (var _j = 0; _j < 3; _j++) {\n          AbsR[_i][_j] = Math.abs(R[_i][_j]) + epsilon;\n        }\n      }\n      var ra, rb;\n      for (var _i2 = 0; _i2 < 3; _i2++) {\n        ra = a.e[_i2];\n        rb = b.e[0] * AbsR[_i2][0] + b.e[1] * AbsR[_i2][1] + b.e[2] * AbsR[_i2][2];\n        if (Math.abs(t[_i2]) > ra + rb) return false;\n      }\n      for (var _i3 = 0; _i3 < 3; _i3++) {\n        ra = a.e[0] * AbsR[0][_i3] + a.e[1] * AbsR[1][_i3] + a.e[2] * AbsR[2][_i3];\n        rb = b.e[_i3];\n        if (Math.abs(t[0] * R[0][_i3] + t[1] * R[1][_i3] + t[2] * R[2][_i3]) > ra + rb) return false;\n      }\n      ra = a.e[1] * AbsR[2][0] + a.e[2] * AbsR[1][0];\n      rb = b.e[1] * AbsR[0][2] + b.e[2] * AbsR[0][1];\n      if (Math.abs(t[2] * R[1][0] - t[1] * R[2][0]) > ra + rb) return false;\n      ra = a.e[1] * AbsR[2][1] + a.e[2] * AbsR[1][1];\n      rb = b.e[0] * AbsR[0][2] + b.e[2] * AbsR[0][0];\n      if (Math.abs(t[2] * R[1][1] - t[1] * R[2][1]) > ra + rb) return false;\n      ra = a.e[1] * AbsR[2][2] + a.e[2] * AbsR[1][2];\n      rb = b.e[0] * AbsR[0][1] + b.e[1] * AbsR[0][0];\n      if (Math.abs(t[2] * R[1][2] - t[1] * R[2][2]) > ra + rb) return false;\n      ra = a.e[0] * AbsR[2][0] + a.e[2] * AbsR[0][0];\n      rb = b.e[1] * AbsR[1][2] + b.e[2] * AbsR[1][1];\n      if (Math.abs(t[0] * R[2][0] - t[2] * R[0][0]) > ra + rb) return false;\n      ra = a.e[0] * AbsR[2][1] + a.e[2] * AbsR[0][1];\n      rb = b.e[0] * AbsR[1][2] + b.e[2] * AbsR[1][0];\n      if (Math.abs(t[0] * R[2][1] - t[2] * R[0][1]) > ra + rb) return false;\n      ra = a.e[0] * AbsR[2][2] + a.e[2] * AbsR[0][2];\n      rb = b.e[0] * AbsR[1][1] + b.e[1] * AbsR[1][0];\n      if (Math.abs(t[0] * R[2][2] - t[2] * R[0][2]) > ra + rb) return false;\n      ra = a.e[0] * AbsR[1][0] + a.e[1] * AbsR[0][0];\n      rb = b.e[1] * AbsR[2][2] + b.e[2] * AbsR[2][1];\n      if (Math.abs(t[1] * R[0][0] - t[0] * R[1][0]) > ra + rb) return false;\n      ra = a.e[0] * AbsR[1][1] + a.e[1] * AbsR[0][1];\n      rb = b.e[0] * AbsR[2][2] + b.e[2] * AbsR[2][0];\n      if (Math.abs(t[1] * R[0][1] - t[0] * R[1][1]) > ra + rb) return false;\n      ra = a.e[0] * AbsR[1][2] + a.e[1] * AbsR[0][2];\n      rb = b.e[0] * AbsR[2][1] + b.e[1] * AbsR[2][0];\n      if (Math.abs(t[1] * R[0][2] - t[0] * R[1][2]) > ra + rb) return false;\n      return true;\n    }\n    /**\n     * Reference: Testing Box Against Plane in Real-Time Collision Detection\n     * by Christer Ericson (chapter 5.2.3)\n     */\n  }, {\n    key: \"intersectsPlane\",\n    value: function intersectsPlane(plane) {\n      this.rotation.extractBasis(xAxis, yAxis, zAxis);\n      var r = this.halfSize.x * Math.abs(plane.normal.dot(xAxis)) + this.halfSize.y * Math.abs(plane.normal.dot(yAxis)) + this.halfSize.z * Math.abs(plane.normal.dot(zAxis));\n      var d = plane.normal.dot(this.center) - plane.constant;\n      return Math.abs(d) <= r;\n    }\n    /**\n     * Performs a ray/OBB intersection test and stores the intersection point\n     * to the given 3D vector. If no intersection is detected, *null* is returned.\n     */\n  }, {\n    key: \"intersectRay\",\n    value: function intersectRay(ray, result) {\n      this.getSize(size);\n      aabb.setFromCenterAndSize(v1.set(0, 0, 0), size);\n      matrix.setFromMatrix3(this.rotation);\n      matrix.setPosition(this.center);\n      inverse.copy(matrix).invert();\n      localRay.copy(ray).applyMatrix4(inverse);\n      if (localRay.intersectBox(aabb, result)) {\n        return result.applyMatrix4(matrix);\n      } else {\n        return null;\n      }\n    }\n    /**\n     * Performs a ray/OBB intersection test. Returns either true or false if\n     * there is a intersection or not.\n     */\n  }, {\n    key: \"intersectsRay\",\n    value: function intersectsRay(ray) {\n      return this.intersectRay(ray, v1) !== null;\n    }\n  }, {\n    key: \"fromBox3\",\n    value: function fromBox3(box3) {\n      box3.getCenter(this.center);\n      box3.getSize(this.halfSize).multiplyScalar(0.5);\n      this.rotation.identity();\n      return this;\n    }\n  }, {\n    key: \"equals\",\n    value: function equals(obb2) {\n      return obb2.center.equals(this.center) && obb2.halfSize.equals(this.halfSize) && obb2.rotation.equals(this.rotation);\n    }\n  }, {\n    key: \"applyMatrix4\",\n    value: function applyMatrix4(matrix2) {\n      var e = matrix2.elements;\n      var sx = v1.set(e[0], e[1], e[2]).length();\n      var sy = v1.set(e[4], e[5], e[6]).length();\n      var sz = v1.set(e[8], e[9], e[10]).length();\n      var det = matrix2.determinant();\n      if (det < 0) sx = -sx;\n      rotationMatrix.setFromMatrix4(matrix2);\n      var invSX = 1 / sx;\n      var invSY = 1 / sy;\n      var invSZ = 1 / sz;\n      rotationMatrix.elements[0] *= invSX;\n      rotationMatrix.elements[1] *= invSX;\n      rotationMatrix.elements[2] *= invSX;\n      rotationMatrix.elements[3] *= invSY;\n      rotationMatrix.elements[4] *= invSY;\n      rotationMatrix.elements[5] *= invSY;\n      rotationMatrix.elements[6] *= invSZ;\n      rotationMatrix.elements[7] *= invSZ;\n      rotationMatrix.elements[8] *= invSZ;\n      this.rotation.multiply(rotationMatrix);\n      this.halfSize.x *= sx;\n      this.halfSize.y *= sy;\n      this.halfSize.z *= sz;\n      v1.setFromMatrixPosition(matrix2);\n      this.center.add(v1);\n      return this;\n    }\n  }]);\n  return OBB;\n}();\nvar obb = /* @__PURE__ */new OBB();\nexport { OBB };","map":{"version":3,"names":["Vector3","Matrix3","Box3","Matrix4","Ray","MathUtils","a","c","u","e","b","R","AbsR","t","xAxis","yAxis","zAxis","v1","size","closestPoint","rotationMatrix","aabb","matrix","inverse","localRay","OBB","center","arguments","length","undefined","halfSize","rotation","_classCallCheck","_createClass","key","value","set","copy","obb2","clone","constructor","getSize","result","multiplyScalar","clampPoint","point","subVectors","extractBasis","x","clamp","dot","add","y","z","containsPoint","Math","abs","intersectsBox3","box3","intersectsOBB","obb","fromBox3","intersectsSphere","sphere","distanceToSquared","radius","epsilon","Number","EPSILON","i","j","ra","rb","intersectsPlane","plane","r","normal","d","constant","intersectRay","ray","setFromCenterAndSize","setFromMatrix3","setPosition","invert","applyMatrix4","intersectBox","intersectsRay","getCenter","identity","equals","matrix2","elements","sx","sy","sz","det","determinant","setFromMatrix4","invSX","invSY","invSZ","multiply","setFromMatrixPosition"],"sources":["/home/krug/Coding/JavaScript/Websites/Personal/personal/node_modules/.pnpm/three-stdlib@2.23.7_three@0.151.3/node_modules/three-stdlib/math/OBB.js"],"sourcesContent":["import { Vector3, Matrix3, Box3, Matrix4, Ray, MathUtils } from \"three\";\nconst a = {\n  c: null,\n  // center\n  u: [/* @__PURE__ */ new Vector3(), /* @__PURE__ */ new Vector3(), /* @__PURE__ */ new Vector3()],\n  // basis vectors\n  e: []\n  // half width\n};\nconst b = {\n  c: null,\n  // center\n  u: [/* @__PURE__ */ new Vector3(), /* @__PURE__ */ new Vector3(), /* @__PURE__ */ new Vector3()],\n  // basis vectors\n  e: []\n  // half width\n};\nconst R = [[], [], []];\nconst AbsR = [[], [], []];\nconst t = [];\nconst xAxis = /* @__PURE__ */ new Vector3();\nconst yAxis = /* @__PURE__ */ new Vector3();\nconst zAxis = /* @__PURE__ */ new Vector3();\nconst v1 = /* @__PURE__ */ new Vector3();\nconst size = /* @__PURE__ */ new Vector3();\nconst closestPoint = /* @__PURE__ */ new Vector3();\nconst rotationMatrix = /* @__PURE__ */ new Matrix3();\nconst aabb = /* @__PURE__ */ new Box3();\nconst matrix = /* @__PURE__ */ new Matrix4();\nconst inverse = /* @__PURE__ */ new Matrix4();\nconst localRay = /* @__PURE__ */ new Ray();\nclass OBB {\n  constructor(center = new Vector3(), halfSize = new Vector3(), rotation = new Matrix3()) {\n    this.center = center;\n    this.halfSize = halfSize;\n    this.rotation = rotation;\n  }\n  set(center, halfSize, rotation) {\n    this.center = center;\n    this.halfSize = halfSize;\n    this.rotation = rotation;\n    return this;\n  }\n  copy(obb2) {\n    this.center.copy(obb2.center);\n    this.halfSize.copy(obb2.halfSize);\n    this.rotation.copy(obb2.rotation);\n    return this;\n  }\n  clone() {\n    return new this.constructor().copy(this);\n  }\n  getSize(result) {\n    return result.copy(this.halfSize).multiplyScalar(2);\n  }\n  /**\n   * Reference: Closest Point on OBB to Point in Real-Time Collision Detection\n   * by Christer Ericson (chapter 5.1.4)\n   */\n  clampPoint(point, result) {\n    const halfSize = this.halfSize;\n    v1.subVectors(point, this.center);\n    this.rotation.extractBasis(xAxis, yAxis, zAxis);\n    result.copy(this.center);\n    const x = MathUtils.clamp(v1.dot(xAxis), -halfSize.x, halfSize.x);\n    result.add(xAxis.multiplyScalar(x));\n    const y = MathUtils.clamp(v1.dot(yAxis), -halfSize.y, halfSize.y);\n    result.add(yAxis.multiplyScalar(y));\n    const z = MathUtils.clamp(v1.dot(zAxis), -halfSize.z, halfSize.z);\n    result.add(zAxis.multiplyScalar(z));\n    return result;\n  }\n  containsPoint(point) {\n    v1.subVectors(point, this.center);\n    this.rotation.extractBasis(xAxis, yAxis, zAxis);\n    return Math.abs(v1.dot(xAxis)) <= this.halfSize.x && Math.abs(v1.dot(yAxis)) <= this.halfSize.y && Math.abs(v1.dot(zAxis)) <= this.halfSize.z;\n  }\n  intersectsBox3(box3) {\n    return this.intersectsOBB(obb.fromBox3(box3));\n  }\n  intersectsSphere(sphere) {\n    this.clampPoint(sphere.center, closestPoint);\n    return closestPoint.distanceToSquared(sphere.center) <= sphere.radius * sphere.radius;\n  }\n  /**\n   * Reference: OBB-OBB Intersection in Real-Time Collision Detection\n   * by Christer Ericson (chapter 4.4.1)\n   *\n   */\n  intersectsOBB(obb2, epsilon = Number.EPSILON) {\n    a.c = this.center;\n    a.e[0] = this.halfSize.x;\n    a.e[1] = this.halfSize.y;\n    a.e[2] = this.halfSize.z;\n    this.rotation.extractBasis(a.u[0], a.u[1], a.u[2]);\n    b.c = obb2.center;\n    b.e[0] = obb2.halfSize.x;\n    b.e[1] = obb2.halfSize.y;\n    b.e[2] = obb2.halfSize.z;\n    obb2.rotation.extractBasis(b.u[0], b.u[1], b.u[2]);\n    for (let i = 0; i < 3; i++) {\n      for (let j = 0; j < 3; j++) {\n        R[i][j] = a.u[i].dot(b.u[j]);\n      }\n    }\n    v1.subVectors(b.c, a.c);\n    t[0] = v1.dot(a.u[0]);\n    t[1] = v1.dot(a.u[1]);\n    t[2] = v1.dot(a.u[2]);\n    for (let i = 0; i < 3; i++) {\n      for (let j = 0; j < 3; j++) {\n        AbsR[i][j] = Math.abs(R[i][j]) + epsilon;\n      }\n    }\n    let ra, rb;\n    for (let i = 0; i < 3; i++) {\n      ra = a.e[i];\n      rb = b.e[0] * AbsR[i][0] + b.e[1] * AbsR[i][1] + b.e[2] * AbsR[i][2];\n      if (Math.abs(t[i]) > ra + rb)\n        return false;\n    }\n    for (let i = 0; i < 3; i++) {\n      ra = a.e[0] * AbsR[0][i] + a.e[1] * AbsR[1][i] + a.e[2] * AbsR[2][i];\n      rb = b.e[i];\n      if (Math.abs(t[0] * R[0][i] + t[1] * R[1][i] + t[2] * R[2][i]) > ra + rb)\n        return false;\n    }\n    ra = a.e[1] * AbsR[2][0] + a.e[2] * AbsR[1][0];\n    rb = b.e[1] * AbsR[0][2] + b.e[2] * AbsR[0][1];\n    if (Math.abs(t[2] * R[1][0] - t[1] * R[2][0]) > ra + rb)\n      return false;\n    ra = a.e[1] * AbsR[2][1] + a.e[2] * AbsR[1][1];\n    rb = b.e[0] * AbsR[0][2] + b.e[2] * AbsR[0][0];\n    if (Math.abs(t[2] * R[1][1] - t[1] * R[2][1]) > ra + rb)\n      return false;\n    ra = a.e[1] * AbsR[2][2] + a.e[2] * AbsR[1][2];\n    rb = b.e[0] * AbsR[0][1] + b.e[1] * AbsR[0][0];\n    if (Math.abs(t[2] * R[1][2] - t[1] * R[2][2]) > ra + rb)\n      return false;\n    ra = a.e[0] * AbsR[2][0] + a.e[2] * AbsR[0][0];\n    rb = b.e[1] * AbsR[1][2] + b.e[2] * AbsR[1][1];\n    if (Math.abs(t[0] * R[2][0] - t[2] * R[0][0]) > ra + rb)\n      return false;\n    ra = a.e[0] * AbsR[2][1] + a.e[2] * AbsR[0][1];\n    rb = b.e[0] * AbsR[1][2] + b.e[2] * AbsR[1][0];\n    if (Math.abs(t[0] * R[2][1] - t[2] * R[0][1]) > ra + rb)\n      return false;\n    ra = a.e[0] * AbsR[2][2] + a.e[2] * AbsR[0][2];\n    rb = b.e[0] * AbsR[1][1] + b.e[1] * AbsR[1][0];\n    if (Math.abs(t[0] * R[2][2] - t[2] * R[0][2]) > ra + rb)\n      return false;\n    ra = a.e[0] * AbsR[1][0] + a.e[1] * AbsR[0][0];\n    rb = b.e[1] * AbsR[2][2] + b.e[2] * AbsR[2][1];\n    if (Math.abs(t[1] * R[0][0] - t[0] * R[1][0]) > ra + rb)\n      return false;\n    ra = a.e[0] * AbsR[1][1] + a.e[1] * AbsR[0][1];\n    rb = b.e[0] * AbsR[2][2] + b.e[2] * AbsR[2][0];\n    if (Math.abs(t[1] * R[0][1] - t[0] * R[1][1]) > ra + rb)\n      return false;\n    ra = a.e[0] * AbsR[1][2] + a.e[1] * AbsR[0][2];\n    rb = b.e[0] * AbsR[2][1] + b.e[1] * AbsR[2][0];\n    if (Math.abs(t[1] * R[0][2] - t[0] * R[1][2]) > ra + rb)\n      return false;\n    return true;\n  }\n  /**\n   * Reference: Testing Box Against Plane in Real-Time Collision Detection\n   * by Christer Ericson (chapter 5.2.3)\n   */\n  intersectsPlane(plane) {\n    this.rotation.extractBasis(xAxis, yAxis, zAxis);\n    const r = this.halfSize.x * Math.abs(plane.normal.dot(xAxis)) + this.halfSize.y * Math.abs(plane.normal.dot(yAxis)) + this.halfSize.z * Math.abs(plane.normal.dot(zAxis));\n    const d = plane.normal.dot(this.center) - plane.constant;\n    return Math.abs(d) <= r;\n  }\n  /**\n   * Performs a ray/OBB intersection test and stores the intersection point\n   * to the given 3D vector. If no intersection is detected, *null* is returned.\n   */\n  intersectRay(ray, result) {\n    this.getSize(size);\n    aabb.setFromCenterAndSize(v1.set(0, 0, 0), size);\n    matrix.setFromMatrix3(this.rotation);\n    matrix.setPosition(this.center);\n    inverse.copy(matrix).invert();\n    localRay.copy(ray).applyMatrix4(inverse);\n    if (localRay.intersectBox(aabb, result)) {\n      return result.applyMatrix4(matrix);\n    } else {\n      return null;\n    }\n  }\n  /**\n   * Performs a ray/OBB intersection test. Returns either true or false if\n   * there is a intersection or not.\n   */\n  intersectsRay(ray) {\n    return this.intersectRay(ray, v1) !== null;\n  }\n  fromBox3(box3) {\n    box3.getCenter(this.center);\n    box3.getSize(this.halfSize).multiplyScalar(0.5);\n    this.rotation.identity();\n    return this;\n  }\n  equals(obb2) {\n    return obb2.center.equals(this.center) && obb2.halfSize.equals(this.halfSize) && obb2.rotation.equals(this.rotation);\n  }\n  applyMatrix4(matrix2) {\n    const e = matrix2.elements;\n    let sx = v1.set(e[0], e[1], e[2]).length();\n    const sy = v1.set(e[4], e[5], e[6]).length();\n    const sz = v1.set(e[8], e[9], e[10]).length();\n    const det = matrix2.determinant();\n    if (det < 0)\n      sx = -sx;\n    rotationMatrix.setFromMatrix4(matrix2);\n    const invSX = 1 / sx;\n    const invSY = 1 / sy;\n    const invSZ = 1 / sz;\n    rotationMatrix.elements[0] *= invSX;\n    rotationMatrix.elements[1] *= invSX;\n    rotationMatrix.elements[2] *= invSX;\n    rotationMatrix.elements[3] *= invSY;\n    rotationMatrix.elements[4] *= invSY;\n    rotationMatrix.elements[5] *= invSY;\n    rotationMatrix.elements[6] *= invSZ;\n    rotationMatrix.elements[7] *= invSZ;\n    rotationMatrix.elements[8] *= invSZ;\n    this.rotation.multiply(rotationMatrix);\n    this.halfSize.x *= sx;\n    this.halfSize.y *= sy;\n    this.halfSize.z *= sz;\n    v1.setFromMatrixPosition(matrix2);\n    this.center.add(v1);\n    return this;\n  }\n}\nconst obb = /* @__PURE__ */ new OBB();\nexport {\n  OBB\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}