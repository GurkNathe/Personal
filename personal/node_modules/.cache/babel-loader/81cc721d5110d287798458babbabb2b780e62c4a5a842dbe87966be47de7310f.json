{"ast":null,"code":"import { Texture, LinearFilter, ClampToEdgeWrapping, MeshBasicMaterial, DoubleSide, Mesh, PlaneGeometry } from \"three\";\nclass VolumeSlice {\n  constructor(volume, index, axis) {\n    const slice = this;\n    this.volume = volume;\n    index = index || 0;\n    Object.defineProperty(this, \"index\", {\n      get: function () {\n        return index;\n      },\n      set: function (value) {\n        index = value;\n        slice.geometryNeedsUpdate = true;\n        return index;\n      }\n    });\n    this.axis = axis || \"z\";\n    this.canvas = document.createElement(\"canvas\");\n    this.canvasBuffer = document.createElement(\"canvas\");\n    this.updateGeometry();\n    const canvasMap = new Texture(this.canvas);\n    canvasMap.minFilter = LinearFilter;\n    canvasMap.wrapS = canvasMap.wrapT = ClampToEdgeWrapping;\n    if (\"colorSpace\" in canvasMap) canvasMap.colorSpace = \"srgb\";else canvasMap.encoding = 3001;\n    const material = new MeshBasicMaterial({\n      map: canvasMap,\n      side: DoubleSide,\n      transparent: true\n    });\n    this.mesh = new Mesh(this.geometry, material);\n    this.mesh.matrixAutoUpdate = false;\n    this.geometryNeedsUpdate = true;\n    this.repaint();\n  }\n  /**\n   * @member {Function} repaint Refresh the texture and the geometry if geometryNeedsUpdate is set to true\n   * @memberof VolumeSlice\n   */\n  repaint() {\n    if (this.geometryNeedsUpdate) {\n      this.updateGeometry();\n    }\n    const iLength = this.iLength,\n      jLength = this.jLength,\n      sliceAccess = this.sliceAccess,\n      volume = this.volume,\n      canvas = this.canvasBuffer,\n      ctx = this.ctxBuffer;\n    const imgData = ctx.getImageData(0, 0, iLength, jLength);\n    const data = imgData.data;\n    const volumeData = volume.data;\n    const upperThreshold = volume.upperThreshold;\n    const lowerThreshold = volume.lowerThreshold;\n    const windowLow = volume.windowLow;\n    const windowHigh = volume.windowHigh;\n    let pixelCount = 0;\n    if (volume.dataType === \"label\") {\n      for (let j = 0; j < jLength; j++) {\n        for (let i = 0; i < iLength; i++) {\n          let label = volumeData[sliceAccess(i, j)];\n          label = label >= this.colorMap.length ? label % this.colorMap.length + 1 : label;\n          const color = this.colorMap[label];\n          data[4 * pixelCount] = color >> 24 & 255;\n          data[4 * pixelCount + 1] = color >> 16 & 255;\n          data[4 * pixelCount + 2] = color >> 8 & 255;\n          data[4 * pixelCount + 3] = color & 255;\n          pixelCount++;\n        }\n      }\n    } else {\n      for (let j = 0; j < jLength; j++) {\n        for (let i = 0; i < iLength; i++) {\n          let value = volumeData[sliceAccess(i, j)];\n          let alpha = 255;\n          alpha = upperThreshold >= value ? lowerThreshold <= value ? alpha : 0 : 0;\n          value = Math.floor(255 * (value - windowLow) / (windowHigh - windowLow));\n          value = value > 255 ? 255 : value < 0 ? 0 : value | 0;\n          data[4 * pixelCount] = value;\n          data[4 * pixelCount + 1] = value;\n          data[4 * pixelCount + 2] = value;\n          data[4 * pixelCount + 3] = alpha;\n          pixelCount++;\n        }\n      }\n    }\n    ctx.putImageData(imgData, 0, 0);\n    this.ctx.drawImage(canvas, 0, 0, iLength, jLength, 0, 0, this.canvas.width, this.canvas.height);\n    this.mesh.material.map.needsUpdate = true;\n  }\n  /**\n   * @member {Function} Refresh the geometry according to axis and index\n   * @see Volume.extractPerpendicularPlane\n   * @memberof VolumeSlice\n   */\n  updateGeometry() {\n    const extracted = this.volume.extractPerpendicularPlane(this.axis, this.index);\n    this.sliceAccess = extracted.sliceAccess;\n    this.jLength = extracted.jLength;\n    this.iLength = extracted.iLength;\n    this.matrix = extracted.matrix;\n    this.canvas.width = extracted.planeWidth;\n    this.canvas.height = extracted.planeHeight;\n    this.canvasBuffer.width = this.iLength;\n    this.canvasBuffer.height = this.jLength;\n    this.ctx = this.canvas.getContext(\"2d\");\n    this.ctxBuffer = this.canvasBuffer.getContext(\"2d\");\n    if (this.geometry) this.geometry.dispose();\n    this.geometry = new PlaneGeometry(extracted.planeWidth, extracted.planeHeight);\n    if (this.mesh) {\n      this.mesh.geometry = this.geometry;\n      this.mesh.matrix.identity();\n      this.mesh.applyMatrix4(this.matrix);\n    }\n    this.geometryNeedsUpdate = false;\n  }\n}\nexport { VolumeSlice };","map":{"version":3,"names":["Texture","LinearFilter","ClampToEdgeWrapping","MeshBasicMaterial","DoubleSide","Mesh","PlaneGeometry","VolumeSlice","constructor","volume","index","axis","slice","Object","defineProperty","get","set","value","geometryNeedsUpdate","canvas","document","createElement","canvasBuffer","updateGeometry","canvasMap","minFilter","wrapS","wrapT","colorSpace","encoding","material","map","side","transparent","mesh","geometry","matrixAutoUpdate","repaint","iLength","jLength","sliceAccess","ctx","ctxBuffer","imgData","getImageData","data","volumeData","upperThreshold","lowerThreshold","windowLow","windowHigh","pixelCount","dataType","j","i","label","colorMap","length","color","alpha","Math","floor","putImageData","drawImage","width","height","needsUpdate","extracted","extractPerpendicularPlane","matrix","planeWidth","planeHeight","getContext","dispose","identity","applyMatrix4"],"sources":["/home/krug/Coding/JavaScript/Websites/Personal/personal/node_modules/.pnpm/three-stdlib@2.23.7_three@0.151.3/node_modules/three-stdlib/misc/VolumeSlice.js"],"sourcesContent":["import { Texture, LinearFilter, ClampToEdgeWrapping, MeshBasicMaterial, DoubleSide, Mesh, PlaneGeometry } from \"three\";\nclass VolumeSlice {\n  constructor(volume, index, axis) {\n    const slice = this;\n    this.volume = volume;\n    index = index || 0;\n    Object.defineProperty(this, \"index\", {\n      get: function() {\n        return index;\n      },\n      set: function(value) {\n        index = value;\n        slice.geometryNeedsUpdate = true;\n        return index;\n      }\n    });\n    this.axis = axis || \"z\";\n    this.canvas = document.createElement(\"canvas\");\n    this.canvasBuffer = document.createElement(\"canvas\");\n    this.updateGeometry();\n    const canvasMap = new Texture(this.canvas);\n    canvasMap.minFilter = LinearFilter;\n    canvasMap.wrapS = canvasMap.wrapT = ClampToEdgeWrapping;\n    if (\"colorSpace\" in canvasMap)\n      canvasMap.colorSpace = \"srgb\";\n    else\n      canvasMap.encoding = 3001;\n    const material = new MeshBasicMaterial({ map: canvasMap, side: DoubleSide, transparent: true });\n    this.mesh = new Mesh(this.geometry, material);\n    this.mesh.matrixAutoUpdate = false;\n    this.geometryNeedsUpdate = true;\n    this.repaint();\n  }\n  /**\n   * @member {Function} repaint Refresh the texture and the geometry if geometryNeedsUpdate is set to true\n   * @memberof VolumeSlice\n   */\n  repaint() {\n    if (this.geometryNeedsUpdate) {\n      this.updateGeometry();\n    }\n    const iLength = this.iLength, jLength = this.jLength, sliceAccess = this.sliceAccess, volume = this.volume, canvas = this.canvasBuffer, ctx = this.ctxBuffer;\n    const imgData = ctx.getImageData(0, 0, iLength, jLength);\n    const data = imgData.data;\n    const volumeData = volume.data;\n    const upperThreshold = volume.upperThreshold;\n    const lowerThreshold = volume.lowerThreshold;\n    const windowLow = volume.windowLow;\n    const windowHigh = volume.windowHigh;\n    let pixelCount = 0;\n    if (volume.dataType === \"label\") {\n      for (let j = 0; j < jLength; j++) {\n        for (let i = 0; i < iLength; i++) {\n          let label = volumeData[sliceAccess(i, j)];\n          label = label >= this.colorMap.length ? label % this.colorMap.length + 1 : label;\n          const color = this.colorMap[label];\n          data[4 * pixelCount] = color >> 24 & 255;\n          data[4 * pixelCount + 1] = color >> 16 & 255;\n          data[4 * pixelCount + 2] = color >> 8 & 255;\n          data[4 * pixelCount + 3] = color & 255;\n          pixelCount++;\n        }\n      }\n    } else {\n      for (let j = 0; j < jLength; j++) {\n        for (let i = 0; i < iLength; i++) {\n          let value = volumeData[sliceAccess(i, j)];\n          let alpha = 255;\n          alpha = upperThreshold >= value ? lowerThreshold <= value ? alpha : 0 : 0;\n          value = Math.floor(255 * (value - windowLow) / (windowHigh - windowLow));\n          value = value > 255 ? 255 : value < 0 ? 0 : value | 0;\n          data[4 * pixelCount] = value;\n          data[4 * pixelCount + 1] = value;\n          data[4 * pixelCount + 2] = value;\n          data[4 * pixelCount + 3] = alpha;\n          pixelCount++;\n        }\n      }\n    }\n    ctx.putImageData(imgData, 0, 0);\n    this.ctx.drawImage(canvas, 0, 0, iLength, jLength, 0, 0, this.canvas.width, this.canvas.height);\n    this.mesh.material.map.needsUpdate = true;\n  }\n  /**\n   * @member {Function} Refresh the geometry according to axis and index\n   * @see Volume.extractPerpendicularPlane\n   * @memberof VolumeSlice\n   */\n  updateGeometry() {\n    const extracted = this.volume.extractPerpendicularPlane(this.axis, this.index);\n    this.sliceAccess = extracted.sliceAccess;\n    this.jLength = extracted.jLength;\n    this.iLength = extracted.iLength;\n    this.matrix = extracted.matrix;\n    this.canvas.width = extracted.planeWidth;\n    this.canvas.height = extracted.planeHeight;\n    this.canvasBuffer.width = this.iLength;\n    this.canvasBuffer.height = this.jLength;\n    this.ctx = this.canvas.getContext(\"2d\");\n    this.ctxBuffer = this.canvasBuffer.getContext(\"2d\");\n    if (this.geometry)\n      this.geometry.dispose();\n    this.geometry = new PlaneGeometry(extracted.planeWidth, extracted.planeHeight);\n    if (this.mesh) {\n      this.mesh.geometry = this.geometry;\n      this.mesh.matrix.identity();\n      this.mesh.applyMatrix4(this.matrix);\n    }\n    this.geometryNeedsUpdate = false;\n  }\n}\nexport {\n  VolumeSlice\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}