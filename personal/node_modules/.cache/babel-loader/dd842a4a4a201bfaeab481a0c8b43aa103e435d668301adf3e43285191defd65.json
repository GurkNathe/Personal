{"ast":null,"code":"import _classCallCheck from \"/home/krug/Coding/JavaScript/Websites/Personal/personal/node_modules/.pnpm/@babel+runtime@7.22.3/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/home/krug/Coding/JavaScript/Websites/Personal/personal/node_modules/.pnpm/@babel+runtime@7.22.3/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport { Color, MathUtils } from \"three\";\nvar Lut = /*#__PURE__*/function () {\n  function Lut(colormap) {\n    var count = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 32;\n    _classCallCheck(this, Lut);\n    this.isLut = true;\n    this.lut = [];\n    this.map = [];\n    this.n = 0;\n    this.minV = 0;\n    this.maxV = 1;\n    this.setColorMap(colormap, count);\n  }\n  _createClass(Lut, [{\n    key: \"set\",\n    value: function set(value) {\n      if (value.isLut === true) {\n        this.copy(value);\n      }\n      return this;\n    }\n  }, {\n    key: \"setMin\",\n    value: function setMin(min) {\n      this.minV = min;\n      return this;\n    }\n  }, {\n    key: \"setMax\",\n    value: function setMax(max) {\n      this.maxV = max;\n      return this;\n    }\n  }, {\n    key: \"setColorMap\",\n    value: function setColorMap(colormap) {\n      var count = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 32;\n      this.map = ColorMapKeywords[colormap] || ColorMapKeywords.rainbow;\n      this.n = count;\n      var step = 1 / this.n;\n      var minColor = new Color();\n      var maxColor = new Color();\n      this.lut.length = 0;\n      this.lut.push(new Color(this.map[0][1]));\n      for (var i = 1; i < count; i++) {\n        var alpha = i * step;\n        for (var j = 0; j < this.map.length - 1; j++) {\n          if (alpha > this.map[j][0] && alpha <= this.map[j + 1][0]) {\n            var min = this.map[j][0];\n            var max = this.map[j + 1][0];\n            minColor.setHex(this.map[j][1], \"linear-srgb\");\n            maxColor.setHex(this.map[j + 1][1], \"linear-srgb\");\n            var color = new Color().lerpColors(minColor, maxColor, (alpha - min) / (max - min));\n            this.lut.push(color);\n          }\n        }\n      }\n      this.lut.push(new Color(this.map[this.map.length - 1][1]));\n      return this;\n    }\n  }, {\n    key: \"copy\",\n    value: function copy(lut) {\n      this.lut = lut.lut;\n      this.map = lut.map;\n      this.n = lut.n;\n      this.minV = lut.minV;\n      this.maxV = lut.maxV;\n      return this;\n    }\n  }, {\n    key: \"getColor\",\n    value: function getColor(alpha) {\n      alpha = MathUtils.clamp(alpha, this.minV, this.maxV);\n      alpha = (alpha - this.minV) / (this.maxV - this.minV);\n      var colorPosition = Math.round(alpha * this.n);\n      return this.lut[colorPosition];\n    }\n  }, {\n    key: \"addColorMap\",\n    value: function addColorMap(name, arrayOfColors) {\n      ColorMapKeywords[name] = arrayOfColors;\n      return this;\n    }\n  }, {\n    key: \"createCanvas\",\n    value: function createCanvas() {\n      var canvas = document.createElement(\"canvas\");\n      canvas.width = 1;\n      canvas.height = this.n;\n      this.updateCanvas(canvas);\n      return canvas;\n    }\n  }, {\n    key: \"updateCanvas\",\n    value: function updateCanvas(canvas) {\n      var ctx = canvas.getContext(\"2d\", {\n        alpha: false\n      });\n      var imageData = ctx.getImageData(0, 0, 1, this.n);\n      var data = imageData.data;\n      var k = 0;\n      var step = 1 / this.n;\n      var minColor = new Color();\n      var maxColor = new Color();\n      var finalColor = new Color();\n      for (var i = 1; i >= 0; i -= step) {\n        for (var j = this.map.length - 1; j >= 0; j--) {\n          if (i < this.map[j][0] && i >= this.map[j - 1][0]) {\n            var min = this.map[j - 1][0];\n            var max = this.map[j][0];\n            minColor.setHex(this.map[j - 1][1], \"linear-srgb\");\n            maxColor.setHex(this.map[j][1], \"linear-srgb\");\n            finalColor.lerpColors(minColor, maxColor, (i - min) / (max - min));\n            data[k * 4] = Math.round(finalColor.r * 255);\n            data[k * 4 + 1] = Math.round(finalColor.g * 255);\n            data[k * 4 + 2] = Math.round(finalColor.b * 255);\n            data[k * 4 + 3] = 255;\n            k += 1;\n          }\n        }\n      }\n      ctx.putImageData(imageData, 0, 0);\n      return canvas;\n    }\n  }]);\n  return Lut;\n}();\nvar ColorMapKeywords = {\n  rainbow: [[0, 255], [0.2, 65535], [0.5, 65280], [0.8, 16776960], [1, 16711680]],\n  cooltowarm: [[0, 3952322], [0.2, 10206463], [0.5, 14474460], [0.8, 16163717], [1, 11797542]],\n  blackbody: [[0, 0], [0.2, 7864320], [0.5, 15086080], [0.8, 16776960], [1, 16777215]],\n  grayscale: [[0, 0], [0.2, 4210752], [0.5, 8355712], [0.8, 12566463], [1, 16777215]]\n};\nexport { ColorMapKeywords, Lut };","map":{"version":3,"names":["Color","MathUtils","Lut","colormap","count","arguments","length","undefined","_classCallCheck","isLut","lut","map","n","minV","maxV","setColorMap","_createClass","key","value","set","copy","setMin","min","setMax","max","ColorMapKeywords","rainbow","step","minColor","maxColor","push","i","alpha","j","setHex","color","lerpColors","getColor","clamp","colorPosition","Math","round","addColorMap","name","arrayOfColors","createCanvas","canvas","document","createElement","width","height","updateCanvas","ctx","getContext","imageData","getImageData","data","k","finalColor","r","g","b","putImageData","cooltowarm","blackbody","grayscale"],"sources":["/home/krug/Coding/JavaScript/Websites/Personal/personal/node_modules/.pnpm/three-stdlib@2.23.7_three@0.151.3/node_modules/three-stdlib/math/Lut.js"],"sourcesContent":["import { Color, MathUtils } from \"three\";\nclass Lut {\n  constructor(colormap, count = 32) {\n    this.isLut = true;\n    this.lut = [];\n    this.map = [];\n    this.n = 0;\n    this.minV = 0;\n    this.maxV = 1;\n    this.setColorMap(colormap, count);\n  }\n  set(value) {\n    if (value.isLut === true) {\n      this.copy(value);\n    }\n    return this;\n  }\n  setMin(min) {\n    this.minV = min;\n    return this;\n  }\n  setMax(max) {\n    this.maxV = max;\n    return this;\n  }\n  setColorMap(colormap, count = 32) {\n    this.map = ColorMapKeywords[colormap] || ColorMapKeywords.rainbow;\n    this.n = count;\n    const step = 1 / this.n;\n    const minColor = new Color();\n    const maxColor = new Color();\n    this.lut.length = 0;\n    this.lut.push(new Color(this.map[0][1]));\n    for (let i = 1; i < count; i++) {\n      const alpha = i * step;\n      for (let j = 0; j < this.map.length - 1; j++) {\n        if (alpha > this.map[j][0] && alpha <= this.map[j + 1][0]) {\n          const min = this.map[j][0];\n          const max = this.map[j + 1][0];\n          minColor.setHex(this.map[j][1], \"linear-srgb\");\n          maxColor.setHex(this.map[j + 1][1], \"linear-srgb\");\n          const color = new Color().lerpColors(minColor, maxColor, (alpha - min) / (max - min));\n          this.lut.push(color);\n        }\n      }\n    }\n    this.lut.push(new Color(this.map[this.map.length - 1][1]));\n    return this;\n  }\n  copy(lut) {\n    this.lut = lut.lut;\n    this.map = lut.map;\n    this.n = lut.n;\n    this.minV = lut.minV;\n    this.maxV = lut.maxV;\n    return this;\n  }\n  getColor(alpha) {\n    alpha = MathUtils.clamp(alpha, this.minV, this.maxV);\n    alpha = (alpha - this.minV) / (this.maxV - this.minV);\n    const colorPosition = Math.round(alpha * this.n);\n    return this.lut[colorPosition];\n  }\n  addColorMap(name, arrayOfColors) {\n    ColorMapKeywords[name] = arrayOfColors;\n    return this;\n  }\n  createCanvas() {\n    const canvas = document.createElement(\"canvas\");\n    canvas.width = 1;\n    canvas.height = this.n;\n    this.updateCanvas(canvas);\n    return canvas;\n  }\n  updateCanvas(canvas) {\n    const ctx = canvas.getContext(\"2d\", { alpha: false });\n    const imageData = ctx.getImageData(0, 0, 1, this.n);\n    const data = imageData.data;\n    let k = 0;\n    const step = 1 / this.n;\n    const minColor = new Color();\n    const maxColor = new Color();\n    const finalColor = new Color();\n    for (let i = 1; i >= 0; i -= step) {\n      for (let j = this.map.length - 1; j >= 0; j--) {\n        if (i < this.map[j][0] && i >= this.map[j - 1][0]) {\n          const min = this.map[j - 1][0];\n          const max = this.map[j][0];\n          minColor.setHex(this.map[j - 1][1], \"linear-srgb\");\n          maxColor.setHex(this.map[j][1], \"linear-srgb\");\n          finalColor.lerpColors(minColor, maxColor, (i - min) / (max - min));\n          data[k * 4] = Math.round(finalColor.r * 255);\n          data[k * 4 + 1] = Math.round(finalColor.g * 255);\n          data[k * 4 + 2] = Math.round(finalColor.b * 255);\n          data[k * 4 + 3] = 255;\n          k += 1;\n        }\n      }\n    }\n    ctx.putImageData(imageData, 0, 0);\n    return canvas;\n  }\n}\nconst ColorMapKeywords = {\n  rainbow: [\n    [0, 255],\n    [0.2, 65535],\n    [0.5, 65280],\n    [0.8, 16776960],\n    [1, 16711680]\n  ],\n  cooltowarm: [\n    [0, 3952322],\n    [0.2, 10206463],\n    [0.5, 14474460],\n    [0.8, 16163717],\n    [1, 11797542]\n  ],\n  blackbody: [\n    [0, 0],\n    [0.2, 7864320],\n    [0.5, 15086080],\n    [0.8, 16776960],\n    [1, 16777215]\n  ],\n  grayscale: [\n    [0, 0],\n    [0.2, 4210752],\n    [0.5, 8355712],\n    [0.8, 12566463],\n    [1, 16777215]\n  ]\n};\nexport {\n  ColorMapKeywords,\n  Lut\n};\n"],"mappings":";;AAAA,SAASA,KAAK,EAAEC,SAAS,QAAQ,OAAO;AAAC,IACnCC,GAAG;EACP,SAAAA,IAAYC,QAAQ,EAAc;IAAA,IAAZC,KAAK,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,EAAE;IAAAG,eAAA,OAAAN,GAAA;IAC9B,IAAI,CAACO,KAAK,GAAG,IAAI;IACjB,IAAI,CAACC,GAAG,GAAG,EAAE;IACb,IAAI,CAACC,GAAG,GAAG,EAAE;IACb,IAAI,CAACC,CAAC,GAAG,CAAC;IACV,IAAI,CAACC,IAAI,GAAG,CAAC;IACb,IAAI,CAACC,IAAI,GAAG,CAAC;IACb,IAAI,CAACC,WAAW,CAACZ,QAAQ,EAAEC,KAAK,CAAC;EACnC;EAACY,YAAA,CAAAd,GAAA;IAAAe,GAAA;IAAAC,KAAA,EACD,SAAAC,IAAID,KAAK,EAAE;MACT,IAAIA,KAAK,CAACT,KAAK,KAAK,IAAI,EAAE;QACxB,IAAI,CAACW,IAAI,CAACF,KAAK,CAAC;MAClB;MACA,OAAO,IAAI;IACb;EAAC;IAAAD,GAAA;IAAAC,KAAA,EACD,SAAAG,OAAOC,GAAG,EAAE;MACV,IAAI,CAACT,IAAI,GAAGS,GAAG;MACf,OAAO,IAAI;IACb;EAAC;IAAAL,GAAA;IAAAC,KAAA,EACD,SAAAK,OAAOC,GAAG,EAAE;MACV,IAAI,CAACV,IAAI,GAAGU,GAAG;MACf,OAAO,IAAI;IACb;EAAC;IAAAP,GAAA;IAAAC,KAAA,EACD,SAAAH,YAAYZ,QAAQ,EAAc;MAAA,IAAZC,KAAK,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,EAAE;MAC9B,IAAI,CAACM,GAAG,GAAGc,gBAAgB,CAACtB,QAAQ,CAAC,IAAIsB,gBAAgB,CAACC,OAAO;MACjE,IAAI,CAACd,CAAC,GAAGR,KAAK;MACd,IAAMuB,IAAI,GAAG,CAAC,GAAG,IAAI,CAACf,CAAC;MACvB,IAAMgB,QAAQ,GAAG,IAAI5B,KAAK,CAAC,CAAC;MAC5B,IAAM6B,QAAQ,GAAG,IAAI7B,KAAK,CAAC,CAAC;MAC5B,IAAI,CAACU,GAAG,CAACJ,MAAM,GAAG,CAAC;MACnB,IAAI,CAACI,GAAG,CAACoB,IAAI,CAAC,IAAI9B,KAAK,CAAC,IAAI,CAACW,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;MACxC,KAAK,IAAIoB,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG3B,KAAK,EAAE2B,CAAC,EAAE,EAAE;QAC9B,IAAMC,KAAK,GAAGD,CAAC,GAAGJ,IAAI;QACtB,KAAK,IAAIM,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,IAAI,CAACtB,GAAG,CAACL,MAAM,GAAG,CAAC,EAAE2B,CAAC,EAAE,EAAE;UAC5C,IAAID,KAAK,GAAG,IAAI,CAACrB,GAAG,CAACsB,CAAC,CAAC,CAAC,CAAC,CAAC,IAAID,KAAK,IAAI,IAAI,CAACrB,GAAG,CAACsB,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE;YACzD,IAAMX,GAAG,GAAG,IAAI,CAACX,GAAG,CAACsB,CAAC,CAAC,CAAC,CAAC,CAAC;YAC1B,IAAMT,GAAG,GAAG,IAAI,CAACb,GAAG,CAACsB,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;YAC9BL,QAAQ,CAACM,MAAM,CAAC,IAAI,CAACvB,GAAG,CAACsB,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,aAAa,CAAC;YAC9CJ,QAAQ,CAACK,MAAM,CAAC,IAAI,CAACvB,GAAG,CAACsB,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,aAAa,CAAC;YAClD,IAAME,KAAK,GAAG,IAAInC,KAAK,CAAC,CAAC,CAACoC,UAAU,CAACR,QAAQ,EAAEC,QAAQ,EAAE,CAACG,KAAK,GAAGV,GAAG,KAAKE,GAAG,GAAGF,GAAG,CAAC,CAAC;YACrF,IAAI,CAACZ,GAAG,CAACoB,IAAI,CAACK,KAAK,CAAC;UACtB;QACF;MACF;MACA,IAAI,CAACzB,GAAG,CAACoB,IAAI,CAAC,IAAI9B,KAAK,CAAC,IAAI,CAACW,GAAG,CAAC,IAAI,CAACA,GAAG,CAACL,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;MAC1D,OAAO,IAAI;IACb;EAAC;IAAAW,GAAA;IAAAC,KAAA,EACD,SAAAE,KAAKV,GAAG,EAAE;MACR,IAAI,CAACA,GAAG,GAAGA,GAAG,CAACA,GAAG;MAClB,IAAI,CAACC,GAAG,GAAGD,GAAG,CAACC,GAAG;MAClB,IAAI,CAACC,CAAC,GAAGF,GAAG,CAACE,CAAC;MACd,IAAI,CAACC,IAAI,GAAGH,GAAG,CAACG,IAAI;MACpB,IAAI,CAACC,IAAI,GAAGJ,GAAG,CAACI,IAAI;MACpB,OAAO,IAAI;IACb;EAAC;IAAAG,GAAA;IAAAC,KAAA,EACD,SAAAmB,SAASL,KAAK,EAAE;MACdA,KAAK,GAAG/B,SAAS,CAACqC,KAAK,CAACN,KAAK,EAAE,IAAI,CAACnB,IAAI,EAAE,IAAI,CAACC,IAAI,CAAC;MACpDkB,KAAK,GAAG,CAACA,KAAK,GAAG,IAAI,CAACnB,IAAI,KAAK,IAAI,CAACC,IAAI,GAAG,IAAI,CAACD,IAAI,CAAC;MACrD,IAAM0B,aAAa,GAAGC,IAAI,CAACC,KAAK,CAACT,KAAK,GAAG,IAAI,CAACpB,CAAC,CAAC;MAChD,OAAO,IAAI,CAACF,GAAG,CAAC6B,aAAa,CAAC;IAChC;EAAC;IAAAtB,GAAA;IAAAC,KAAA,EACD,SAAAwB,YAAYC,IAAI,EAAEC,aAAa,EAAE;MAC/BnB,gBAAgB,CAACkB,IAAI,CAAC,GAAGC,aAAa;MACtC,OAAO,IAAI;IACb;EAAC;IAAA3B,GAAA;IAAAC,KAAA,EACD,SAAA2B,aAAA,EAAe;MACb,IAAMC,MAAM,GAAGC,QAAQ,CAACC,aAAa,CAAC,QAAQ,CAAC;MAC/CF,MAAM,CAACG,KAAK,GAAG,CAAC;MAChBH,MAAM,CAACI,MAAM,GAAG,IAAI,CAACtC,CAAC;MACtB,IAAI,CAACuC,YAAY,CAACL,MAAM,CAAC;MACzB,OAAOA,MAAM;IACf;EAAC;IAAA7B,GAAA;IAAAC,KAAA,EACD,SAAAiC,aAAaL,MAAM,EAAE;MACnB,IAAMM,GAAG,GAAGN,MAAM,CAACO,UAAU,CAAC,IAAI,EAAE;QAAErB,KAAK,EAAE;MAAM,CAAC,CAAC;MACrD,IAAMsB,SAAS,GAAGF,GAAG,CAACG,YAAY,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,IAAI,CAAC3C,CAAC,CAAC;MACnD,IAAM4C,IAAI,GAAGF,SAAS,CAACE,IAAI;MAC3B,IAAIC,CAAC,GAAG,CAAC;MACT,IAAM9B,IAAI,GAAG,CAAC,GAAG,IAAI,CAACf,CAAC;MACvB,IAAMgB,QAAQ,GAAG,IAAI5B,KAAK,CAAC,CAAC;MAC5B,IAAM6B,QAAQ,GAAG,IAAI7B,KAAK,CAAC,CAAC;MAC5B,IAAM0D,UAAU,GAAG,IAAI1D,KAAK,CAAC,CAAC;MAC9B,KAAK,IAAI+B,CAAC,GAAG,CAAC,EAAEA,CAAC,IAAI,CAAC,EAAEA,CAAC,IAAIJ,IAAI,EAAE;QACjC,KAAK,IAAIM,CAAC,GAAG,IAAI,CAACtB,GAAG,CAACL,MAAM,GAAG,CAAC,EAAE2B,CAAC,IAAI,CAAC,EAAEA,CAAC,EAAE,EAAE;UAC7C,IAAIF,CAAC,GAAG,IAAI,CAACpB,GAAG,CAACsB,CAAC,CAAC,CAAC,CAAC,CAAC,IAAIF,CAAC,IAAI,IAAI,CAACpB,GAAG,CAACsB,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE;YACjD,IAAMX,GAAG,GAAG,IAAI,CAACX,GAAG,CAACsB,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;YAC9B,IAAMT,GAAG,GAAG,IAAI,CAACb,GAAG,CAACsB,CAAC,CAAC,CAAC,CAAC,CAAC;YAC1BL,QAAQ,CAACM,MAAM,CAAC,IAAI,CAACvB,GAAG,CAACsB,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,aAAa,CAAC;YAClDJ,QAAQ,CAACK,MAAM,CAAC,IAAI,CAACvB,GAAG,CAACsB,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,aAAa,CAAC;YAC9CyB,UAAU,CAACtB,UAAU,CAACR,QAAQ,EAAEC,QAAQ,EAAE,CAACE,CAAC,GAAGT,GAAG,KAAKE,GAAG,GAAGF,GAAG,CAAC,CAAC;YAClEkC,IAAI,CAACC,CAAC,GAAG,CAAC,CAAC,GAAGjB,IAAI,CAACC,KAAK,CAACiB,UAAU,CAACC,CAAC,GAAG,GAAG,CAAC;YAC5CH,IAAI,CAACC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,GAAGjB,IAAI,CAACC,KAAK,CAACiB,UAAU,CAACE,CAAC,GAAG,GAAG,CAAC;YAChDJ,IAAI,CAACC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,GAAGjB,IAAI,CAACC,KAAK,CAACiB,UAAU,CAACG,CAAC,GAAG,GAAG,CAAC;YAChDL,IAAI,CAACC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,GAAG,GAAG;YACrBA,CAAC,IAAI,CAAC;UACR;QACF;MACF;MACAL,GAAG,CAACU,YAAY,CAACR,SAAS,EAAE,CAAC,EAAE,CAAC,CAAC;MACjC,OAAOR,MAAM;IACf;EAAC;EAAA,OAAA5C,GAAA;AAAA;AAEH,IAAMuB,gBAAgB,GAAG;EACvBC,OAAO,EAAE,CACP,CAAC,CAAC,EAAE,GAAG,CAAC,EACR,CAAC,GAAG,EAAE,KAAK,CAAC,EACZ,CAAC,GAAG,EAAE,KAAK,CAAC,EACZ,CAAC,GAAG,EAAE,QAAQ,CAAC,EACf,CAAC,CAAC,EAAE,QAAQ,CAAC,CACd;EACDqC,UAAU,EAAE,CACV,CAAC,CAAC,EAAE,OAAO,CAAC,EACZ,CAAC,GAAG,EAAE,QAAQ,CAAC,EACf,CAAC,GAAG,EAAE,QAAQ,CAAC,EACf,CAAC,GAAG,EAAE,QAAQ,CAAC,EACf,CAAC,CAAC,EAAE,QAAQ,CAAC,CACd;EACDC,SAAS,EAAE,CACT,CAAC,CAAC,EAAE,CAAC,CAAC,EACN,CAAC,GAAG,EAAE,OAAO,CAAC,EACd,CAAC,GAAG,EAAE,QAAQ,CAAC,EACf,CAAC,GAAG,EAAE,QAAQ,CAAC,EACf,CAAC,CAAC,EAAE,QAAQ,CAAC,CACd;EACDC,SAAS,EAAE,CACT,CAAC,CAAC,EAAE,CAAC,CAAC,EACN,CAAC,GAAG,EAAE,OAAO,CAAC,EACd,CAAC,GAAG,EAAE,OAAO,CAAC,EACd,CAAC,GAAG,EAAE,QAAQ,CAAC,EACf,CAAC,CAAC,EAAE,QAAQ,CAAC;AAEjB,CAAC;AACD,SACExC,gBAAgB,EAChBvB,GAAG"},"metadata":{},"sourceType":"module","externalDependencies":[]}