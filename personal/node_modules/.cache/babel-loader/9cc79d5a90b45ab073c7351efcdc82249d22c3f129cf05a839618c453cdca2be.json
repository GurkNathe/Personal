{"ast":null,"code":"import { Vector3, Matrix4, Quaternion, Euler, Bone, Object3D, MeshBasicMaterial, Color, BoxGeometry, SphereGeometry, Mesh } from \"three\";\nimport { CapsuleGeometry } from \"../_polyfill/CapsuleGeometry.js\";\nclass MMDPhysics {\n  /**\n   * @param {THREE.SkinnedMesh} mesh\n   * @param {Array<Object>} rigidBodyParams\n   * @param {Array<Object>} (optional) constraintParams\n   * @param {Object} params - (optional)\n   * @param {Number} params.unitStep - Default is 1 / 65.\n   * @param {Integer} params.maxStepNum - Default is 3.\n   * @param {Vector3} params.gravity - Default is ( 0, - 9.8 * 10, 0 )\n   */\n  constructor(mesh, rigidBodyParams) {\n    let constraintParams = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];\n    let params = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n    if (typeof Ammo === \"undefined\") {\n      throw new Error(\"THREE.MMDPhysics: Import ammo.js https://github.com/kripken/ammo.js\");\n    }\n    this.manager = new ResourceManager();\n    this.mesh = mesh;\n    this.unitStep = params.unitStep !== void 0 ? params.unitStep : 1 / 65;\n    this.maxStepNum = params.maxStepNum !== void 0 ? params.maxStepNum : 3;\n    this.gravity = new Vector3(0, -9.8 * 10, 0);\n    if (params.gravity !== void 0) this.gravity.copy(params.gravity);\n    this.world = params.world !== void 0 ? params.world : null;\n    this.bodies = [];\n    this.constraints = [];\n    this._init(mesh, rigidBodyParams, constraintParams);\n  }\n  /**\n   * Advances Physics calculation and updates bones.\n   *\n   * @param {Number} delta - time in second\n   * @return {MMDPhysics}\n   */\n  update(delta) {\n    const manager = this.manager;\n    const mesh = this.mesh;\n    let isNonDefaultScale = false;\n    const position = manager.allocThreeVector3();\n    const quaternion = manager.allocThreeQuaternion();\n    const scale = manager.allocThreeVector3();\n    mesh.matrixWorld.decompose(position, quaternion, scale);\n    if (scale.x !== 1 || scale.y !== 1 || scale.z !== 1) {\n      isNonDefaultScale = true;\n    }\n    let parent;\n    if (isNonDefaultScale) {\n      parent = mesh.parent;\n      if (parent !== null) mesh.parent = null;\n      scale.copy(this.mesh.scale);\n      mesh.scale.set(1, 1, 1);\n      mesh.updateMatrixWorld(true);\n    }\n    this._updateRigidBodies();\n    this._stepSimulation(delta);\n    this._updateBones();\n    if (isNonDefaultScale) {\n      if (parent !== null) mesh.parent = parent;\n      mesh.scale.copy(scale);\n    }\n    manager.freeThreeVector3(scale);\n    manager.freeThreeQuaternion(quaternion);\n    manager.freeThreeVector3(position);\n    return this;\n  }\n  /**\n   * Resets rigid bodies transorm to current bone's.\n   *\n   * @return {MMDPhysics}\n   */\n  reset() {\n    for (let i = 0, il = this.bodies.length; i < il; i++) {\n      this.bodies[i].reset();\n    }\n    return this;\n  }\n  /**\n   * Warm ups Rigid bodies. Calculates cycles steps.\n   *\n   * @param {Integer} cycles\n   * @return {MMDPhysics}\n   */\n  warmup(cycles) {\n    for (let i = 0; i < cycles; i++) {\n      this.update(1 / 60);\n    }\n    return this;\n  }\n  /**\n   * Sets gravity.\n   *\n   * @param {Vector3} gravity\n   * @return {MMDPhysicsHelper}\n   */\n  setGravity(gravity) {\n    this.world.setGravity(new Ammo.btVector3(gravity.x, gravity.y, gravity.z));\n    this.gravity.copy(gravity);\n    return this;\n  }\n  /**\n   * Creates MMDPhysicsHelper\n   *\n   * @return {MMDPhysicsHelper}\n   */\n  createHelper() {\n    return new MMDPhysicsHelper(this.mesh, this);\n  }\n  // private methods\n  _init(mesh, rigidBodyParams, constraintParams) {\n    const manager = this.manager;\n    const parent = mesh.parent;\n    if (parent !== null) mesh.parent = null;\n    const currentPosition = manager.allocThreeVector3();\n    const currentQuaternion = manager.allocThreeQuaternion();\n    const currentScale = manager.allocThreeVector3();\n    currentPosition.copy(mesh.position);\n    currentQuaternion.copy(mesh.quaternion);\n    currentScale.copy(mesh.scale);\n    mesh.position.set(0, 0, 0);\n    mesh.quaternion.set(0, 0, 0, 1);\n    mesh.scale.set(1, 1, 1);\n    mesh.updateMatrixWorld(true);\n    if (this.world === null) {\n      this.world = this._createWorld();\n      this.setGravity(this.gravity);\n    }\n    this._initRigidBodies(rigidBodyParams);\n    this._initConstraints(constraintParams);\n    if (parent !== null) mesh.parent = parent;\n    mesh.position.copy(currentPosition);\n    mesh.quaternion.copy(currentQuaternion);\n    mesh.scale.copy(currentScale);\n    mesh.updateMatrixWorld(true);\n    this.reset();\n    manager.freeThreeVector3(currentPosition);\n    manager.freeThreeQuaternion(currentQuaternion);\n    manager.freeThreeVector3(currentScale);\n  }\n  _createWorld() {\n    const config = new Ammo.btDefaultCollisionConfiguration();\n    const dispatcher = new Ammo.btCollisionDispatcher(config);\n    const cache = new Ammo.btDbvtBroadphase();\n    const solver = new Ammo.btSequentialImpulseConstraintSolver();\n    const world = new Ammo.btDiscreteDynamicsWorld(dispatcher, cache, solver, config);\n    return world;\n  }\n  _initRigidBodies(rigidBodies) {\n    for (let i = 0, il = rigidBodies.length; i < il; i++) {\n      this.bodies.push(new RigidBody(this.mesh, this.world, rigidBodies[i], this.manager));\n    }\n  }\n  _initConstraints(constraints) {\n    for (let i = 0, il = constraints.length; i < il; i++) {\n      const params = constraints[i];\n      const bodyA = this.bodies[params.rigidBodyIndex1];\n      const bodyB = this.bodies[params.rigidBodyIndex2];\n      this.constraints.push(new Constraint(this.mesh, this.world, bodyA, bodyB, params, this.manager));\n    }\n  }\n  _stepSimulation(delta) {\n    const unitStep = this.unitStep;\n    let stepTime = delta;\n    let maxStepNum = (delta / unitStep | 0) + 1;\n    if (stepTime < unitStep) {\n      stepTime = unitStep;\n      maxStepNum = 1;\n    }\n    if (maxStepNum > this.maxStepNum) {\n      maxStepNum = this.maxStepNum;\n    }\n    this.world.stepSimulation(stepTime, maxStepNum, unitStep);\n  }\n  _updateRigidBodies() {\n    for (let i = 0, il = this.bodies.length; i < il; i++) {\n      this.bodies[i].updateFromBone();\n    }\n  }\n  _updateBones() {\n    for (let i = 0, il = this.bodies.length; i < il; i++) {\n      this.bodies[i].updateBone();\n    }\n  }\n}\nclass ResourceManager {\n  constructor() {\n    this.threeVector3s = [];\n    this.threeMatrix4s = [];\n    this.threeQuaternions = [];\n    this.threeEulers = [];\n    this.transforms = [];\n    this.quaternions = [];\n    this.vector3s = [];\n  }\n  allocThreeVector3() {\n    return this.threeVector3s.length > 0 ? this.threeVector3s.pop() : new Vector3();\n  }\n  freeThreeVector3(v) {\n    this.threeVector3s.push(v);\n  }\n  allocThreeMatrix4() {\n    return this.threeMatrix4s.length > 0 ? this.threeMatrix4s.pop() : new Matrix4();\n  }\n  freeThreeMatrix4(m) {\n    this.threeMatrix4s.push(m);\n  }\n  allocThreeQuaternion() {\n    return this.threeQuaternions.length > 0 ? this.threeQuaternions.pop() : new Quaternion();\n  }\n  freeThreeQuaternion(q) {\n    this.threeQuaternions.push(q);\n  }\n  allocThreeEuler() {\n    return this.threeEulers.length > 0 ? this.threeEulers.pop() : new Euler();\n  }\n  freeThreeEuler(e) {\n    this.threeEulers.push(e);\n  }\n  allocTransform() {\n    return this.transforms.length > 0 ? this.transforms.pop() : new Ammo.btTransform();\n  }\n  freeTransform(t) {\n    this.transforms.push(t);\n  }\n  allocQuaternion() {\n    return this.quaternions.length > 0 ? this.quaternions.pop() : new Ammo.btQuaternion();\n  }\n  freeQuaternion(q) {\n    this.quaternions.push(q);\n  }\n  allocVector3() {\n    return this.vector3s.length > 0 ? this.vector3s.pop() : new Ammo.btVector3();\n  }\n  freeVector3(v) {\n    this.vector3s.push(v);\n  }\n  setIdentity(t) {\n    t.setIdentity();\n  }\n  getBasis(t) {\n    var q = this.allocQuaternion();\n    t.getBasis().getRotation(q);\n    return q;\n  }\n  getBasisAsMatrix3(t) {\n    var q = this.getBasis(t);\n    var m = this.quaternionToMatrix3(q);\n    this.freeQuaternion(q);\n    return m;\n  }\n  getOrigin(t) {\n    return t.getOrigin();\n  }\n  setOrigin(t, v) {\n    t.getOrigin().setValue(v.x(), v.y(), v.z());\n  }\n  copyOrigin(t1, t2) {\n    var o = t2.getOrigin();\n    this.setOrigin(t1, o);\n  }\n  setBasis(t, q) {\n    t.setRotation(q);\n  }\n  setBasisFromMatrix3(t, m) {\n    var q = this.matrix3ToQuaternion(m);\n    this.setBasis(t, q);\n    this.freeQuaternion(q);\n  }\n  setOriginFromArray3(t, a) {\n    t.getOrigin().setValue(a[0], a[1], a[2]);\n  }\n  setOriginFromThreeVector3(t, v) {\n    t.getOrigin().setValue(v.x, v.y, v.z);\n  }\n  setBasisFromArray3(t, a) {\n    var thQ = this.allocThreeQuaternion();\n    var thE = this.allocThreeEuler();\n    thE.set(a[0], a[1], a[2]);\n    this.setBasisFromThreeQuaternion(t, thQ.setFromEuler(thE));\n    this.freeThreeEuler(thE);\n    this.freeThreeQuaternion(thQ);\n  }\n  setBasisFromThreeQuaternion(t, a) {\n    var q = this.allocQuaternion();\n    q.setX(a.x);\n    q.setY(a.y);\n    q.setZ(a.z);\n    q.setW(a.w);\n    this.setBasis(t, q);\n    this.freeQuaternion(q);\n  }\n  multiplyTransforms(t1, t2) {\n    var t = this.allocTransform();\n    this.setIdentity(t);\n    var m1 = this.getBasisAsMatrix3(t1);\n    var m2 = this.getBasisAsMatrix3(t2);\n    var o1 = this.getOrigin(t1);\n    var o2 = this.getOrigin(t2);\n    var v1 = this.multiplyMatrix3ByVector3(m1, o2);\n    var v2 = this.addVector3(v1, o1);\n    this.setOrigin(t, v2);\n    var m3 = this.multiplyMatrices3(m1, m2);\n    this.setBasisFromMatrix3(t, m3);\n    this.freeVector3(v1);\n    this.freeVector3(v2);\n    return t;\n  }\n  inverseTransform(t) {\n    var t2 = this.allocTransform();\n    var m1 = this.getBasisAsMatrix3(t);\n    var o = this.getOrigin(t);\n    var m2 = this.transposeMatrix3(m1);\n    var v1 = this.negativeVector3(o);\n    var v2 = this.multiplyMatrix3ByVector3(m2, v1);\n    this.setOrigin(t2, v2);\n    this.setBasisFromMatrix3(t2, m2);\n    this.freeVector3(v1);\n    this.freeVector3(v2);\n    return t2;\n  }\n  multiplyMatrices3(m1, m2) {\n    var m3 = [];\n    var v10 = this.rowOfMatrix3(m1, 0);\n    var v11 = this.rowOfMatrix3(m1, 1);\n    var v12 = this.rowOfMatrix3(m1, 2);\n    var v20 = this.columnOfMatrix3(m2, 0);\n    var v21 = this.columnOfMatrix3(m2, 1);\n    var v22 = this.columnOfMatrix3(m2, 2);\n    m3[0] = this.dotVectors3(v10, v20);\n    m3[1] = this.dotVectors3(v10, v21);\n    m3[2] = this.dotVectors3(v10, v22);\n    m3[3] = this.dotVectors3(v11, v20);\n    m3[4] = this.dotVectors3(v11, v21);\n    m3[5] = this.dotVectors3(v11, v22);\n    m3[6] = this.dotVectors3(v12, v20);\n    m3[7] = this.dotVectors3(v12, v21);\n    m3[8] = this.dotVectors3(v12, v22);\n    this.freeVector3(v10);\n    this.freeVector3(v11);\n    this.freeVector3(v12);\n    this.freeVector3(v20);\n    this.freeVector3(v21);\n    this.freeVector3(v22);\n    return m3;\n  }\n  addVector3(v1, v2) {\n    var v = this.allocVector3();\n    v.setValue(v1.x() + v2.x(), v1.y() + v2.y(), v1.z() + v2.z());\n    return v;\n  }\n  dotVectors3(v1, v2) {\n    return v1.x() * v2.x() + v1.y() * v2.y() + v1.z() * v2.z();\n  }\n  rowOfMatrix3(m, i) {\n    var v = this.allocVector3();\n    v.setValue(m[i * 3 + 0], m[i * 3 + 1], m[i * 3 + 2]);\n    return v;\n  }\n  columnOfMatrix3(m, i) {\n    var v = this.allocVector3();\n    v.setValue(m[i + 0], m[i + 3], m[i + 6]);\n    return v;\n  }\n  negativeVector3(v) {\n    var v2 = this.allocVector3();\n    v2.setValue(-v.x(), -v.y(), -v.z());\n    return v2;\n  }\n  multiplyMatrix3ByVector3(m, v) {\n    var v4 = this.allocVector3();\n    var v0 = this.rowOfMatrix3(m, 0);\n    var v1 = this.rowOfMatrix3(m, 1);\n    var v2 = this.rowOfMatrix3(m, 2);\n    var x = this.dotVectors3(v0, v);\n    var y = this.dotVectors3(v1, v);\n    var z = this.dotVectors3(v2, v);\n    v4.setValue(x, y, z);\n    this.freeVector3(v0);\n    this.freeVector3(v1);\n    this.freeVector3(v2);\n    return v4;\n  }\n  transposeMatrix3(m) {\n    var m2 = [];\n    m2[0] = m[0];\n    m2[1] = m[3];\n    m2[2] = m[6];\n    m2[3] = m[1];\n    m2[4] = m[4];\n    m2[5] = m[7];\n    m2[6] = m[2];\n    m2[7] = m[5];\n    m2[8] = m[8];\n    return m2;\n  }\n  quaternionToMatrix3(q) {\n    var m = [];\n    var x = q.x();\n    var y = q.y();\n    var z = q.z();\n    var w = q.w();\n    var xx = x * x;\n    var yy = y * y;\n    var zz = z * z;\n    var xy = x * y;\n    var yz = y * z;\n    var zx = z * x;\n    var xw = x * w;\n    var yw = y * w;\n    var zw = z * w;\n    m[0] = 1 - 2 * (yy + zz);\n    m[1] = 2 * (xy - zw);\n    m[2] = 2 * (zx + yw);\n    m[3] = 2 * (xy + zw);\n    m[4] = 1 - 2 * (zz + xx);\n    m[5] = 2 * (yz - xw);\n    m[6] = 2 * (zx - yw);\n    m[7] = 2 * (yz + xw);\n    m[8] = 1 - 2 * (xx + yy);\n    return m;\n  }\n  matrix3ToQuaternion(m) {\n    var t = m[0] + m[4] + m[8];\n    var s, x, y, z, w;\n    if (t > 0) {\n      s = Math.sqrt(t + 1) * 2;\n      w = 0.25 * s;\n      x = (m[7] - m[5]) / s;\n      y = (m[2] - m[6]) / s;\n      z = (m[3] - m[1]) / s;\n    } else if (m[0] > m[4] && m[0] > m[8]) {\n      s = Math.sqrt(1 + m[0] - m[4] - m[8]) * 2;\n      w = (m[7] - m[5]) / s;\n      x = 0.25 * s;\n      y = (m[1] + m[3]) / s;\n      z = (m[2] + m[6]) / s;\n    } else if (m[4] > m[8]) {\n      s = Math.sqrt(1 + m[4] - m[0] - m[8]) * 2;\n      w = (m[2] - m[6]) / s;\n      x = (m[1] + m[3]) / s;\n      y = 0.25 * s;\n      z = (m[5] + m[7]) / s;\n    } else {\n      s = Math.sqrt(1 + m[8] - m[0] - m[4]) * 2;\n      w = (m[3] - m[1]) / s;\n      x = (m[2] + m[6]) / s;\n      y = (m[5] + m[7]) / s;\n      z = 0.25 * s;\n    }\n    var q = this.allocQuaternion();\n    q.setX(x);\n    q.setY(y);\n    q.setZ(z);\n    q.setW(w);\n    return q;\n  }\n}\nclass RigidBody {\n  constructor(mesh, world, params, manager) {\n    this.mesh = mesh;\n    this.world = world;\n    this.params = params;\n    this.manager = manager;\n    this.body = null;\n    this.bone = null;\n    this.boneOffsetForm = null;\n    this.boneOffsetFormInverse = null;\n    this._init();\n  }\n  /**\n   * Resets rigid body transform to the current bone's.\n   *\n   * @return {RigidBody}\n   */\n  reset() {\n    this._setTransformFromBone();\n    return this;\n  }\n  /**\n   * Updates rigid body's transform from the current bone.\n   *\n   * @return {RidigBody}\n   */\n  updateFromBone() {\n    if (this.params.boneIndex !== -1 && this.params.type === 0) {\n      this._setTransformFromBone();\n    }\n    return this;\n  }\n  /**\n   * Updates bone from the current ridid body's transform.\n   *\n   * @return {RidigBody}\n   */\n  updateBone() {\n    if (this.params.type === 0 || this.params.boneIndex === -1) {\n      return this;\n    }\n    this._updateBoneRotation();\n    if (this.params.type === 1) {\n      this._updateBonePosition();\n    }\n    this.bone.updateMatrixWorld(true);\n    if (this.params.type === 2) {\n      this._setPositionFromBone();\n    }\n    return this;\n  }\n  // private methods\n  _init() {\n    function generateShape(p) {\n      switch (p.shapeType) {\n        case 0:\n          return new Ammo.btSphereShape(p.width);\n        case 1:\n          return new Ammo.btBoxShape(new Ammo.btVector3(p.width, p.height, p.depth));\n        case 2:\n          return new Ammo.btCapsuleShape(p.width, p.height);\n        default:\n          throw new Error(\"unknown shape type \" + p.shapeType);\n      }\n    }\n    const manager = this.manager;\n    const params = this.params;\n    const bones = this.mesh.skeleton.bones;\n    const bone = params.boneIndex === -1 ? new Bone() : bones[params.boneIndex];\n    const shape = generateShape(params);\n    const weight = params.type === 0 ? 0 : params.weight;\n    const localInertia = manager.allocVector3();\n    localInertia.setValue(0, 0, 0);\n    if (weight !== 0) {\n      shape.calculateLocalInertia(weight, localInertia);\n    }\n    const boneOffsetForm = manager.allocTransform();\n    manager.setIdentity(boneOffsetForm);\n    manager.setOriginFromArray3(boneOffsetForm, params.position);\n    manager.setBasisFromArray3(boneOffsetForm, params.rotation);\n    const vector = manager.allocThreeVector3();\n    const boneForm = manager.allocTransform();\n    manager.setIdentity(boneForm);\n    manager.setOriginFromThreeVector3(boneForm, bone.getWorldPosition(vector));\n    const form = manager.multiplyTransforms(boneForm, boneOffsetForm);\n    const state = new Ammo.btDefaultMotionState(form);\n    const info = new Ammo.btRigidBodyConstructionInfo(weight, state, shape, localInertia);\n    info.set_m_friction(params.friction);\n    info.set_m_restitution(params.restitution);\n    const body = new Ammo.btRigidBody(info);\n    if (params.type === 0) {\n      body.setCollisionFlags(body.getCollisionFlags() | 2);\n      body.setActivationState(4);\n    }\n    body.setDamping(params.positionDamping, params.rotationDamping);\n    body.setSleepingThresholds(0, 0);\n    this.world.addRigidBody(body, 1 << params.groupIndex, params.groupTarget);\n    this.body = body;\n    this.bone = bone;\n    this.boneOffsetForm = boneOffsetForm;\n    this.boneOffsetFormInverse = manager.inverseTransform(boneOffsetForm);\n    manager.freeVector3(localInertia);\n    manager.freeTransform(form);\n    manager.freeTransform(boneForm);\n    manager.freeThreeVector3(vector);\n  }\n  _getBoneTransform() {\n    const manager = this.manager;\n    const p = manager.allocThreeVector3();\n    const q = manager.allocThreeQuaternion();\n    const s = manager.allocThreeVector3();\n    this.bone.matrixWorld.decompose(p, q, s);\n    const tr = manager.allocTransform();\n    manager.setOriginFromThreeVector3(tr, p);\n    manager.setBasisFromThreeQuaternion(tr, q);\n    const form = manager.multiplyTransforms(tr, this.boneOffsetForm);\n    manager.freeTransform(tr);\n    manager.freeThreeVector3(s);\n    manager.freeThreeQuaternion(q);\n    manager.freeThreeVector3(p);\n    return form;\n  }\n  _getWorldTransformForBone() {\n    const manager = this.manager;\n    const tr = this.body.getCenterOfMassTransform();\n    return manager.multiplyTransforms(tr, this.boneOffsetFormInverse);\n  }\n  _setTransformFromBone() {\n    const manager = this.manager;\n    const form = this._getBoneTransform();\n    this.body.setCenterOfMassTransform(form);\n    this.body.getMotionState().setWorldTransform(form);\n    manager.freeTransform(form);\n  }\n  _setPositionFromBone() {\n    const manager = this.manager;\n    const form = this._getBoneTransform();\n    const tr = manager.allocTransform();\n    this.body.getMotionState().getWorldTransform(tr);\n    manager.copyOrigin(tr, form);\n    this.body.setCenterOfMassTransform(tr);\n    this.body.getMotionState().setWorldTransform(tr);\n    manager.freeTransform(tr);\n    manager.freeTransform(form);\n  }\n  _updateBoneRotation() {\n    const manager = this.manager;\n    const tr = this._getWorldTransformForBone();\n    const q = manager.getBasis(tr);\n    const thQ = manager.allocThreeQuaternion();\n    const thQ2 = manager.allocThreeQuaternion();\n    const thQ3 = manager.allocThreeQuaternion();\n    thQ.set(q.x(), q.y(), q.z(), q.w());\n    thQ2.setFromRotationMatrix(this.bone.matrixWorld);\n    thQ2.conjugate();\n    thQ2.multiply(thQ);\n    thQ3.setFromRotationMatrix(this.bone.matrix);\n    this.bone.quaternion.copy(thQ2.multiply(thQ3).normalize());\n    manager.freeThreeQuaternion(thQ);\n    manager.freeThreeQuaternion(thQ2);\n    manager.freeThreeQuaternion(thQ3);\n    manager.freeQuaternion(q);\n    manager.freeTransform(tr);\n  }\n  _updateBonePosition() {\n    const manager = this.manager;\n    const tr = this._getWorldTransformForBone();\n    const thV = manager.allocThreeVector3();\n    const o = manager.getOrigin(tr);\n    thV.set(o.x(), o.y(), o.z());\n    if (this.bone.parent) {\n      this.bone.parent.worldToLocal(thV);\n    }\n    this.bone.position.copy(thV);\n    manager.freeThreeVector3(thV);\n    manager.freeTransform(tr);\n  }\n}\nclass Constraint {\n  /**\n   * @param {THREE.SkinnedMesh} mesh\n   * @param {Ammo.btDiscreteDynamicsWorld} world\n   * @param {RigidBody} bodyA\n   * @param {RigidBody} bodyB\n   * @param {Object} params\n   * @param {ResourceManager} manager\n   */\n  constructor(mesh, world, bodyA, bodyB, params, manager) {\n    this.mesh = mesh;\n    this.world = world;\n    this.bodyA = bodyA;\n    this.bodyB = bodyB;\n    this.params = params;\n    this.manager = manager;\n    this.constraint = null;\n    this._init();\n  }\n  // private method\n  _init() {\n    const manager = this.manager;\n    const params = this.params;\n    const bodyA = this.bodyA;\n    const bodyB = this.bodyB;\n    const form = manager.allocTransform();\n    manager.setIdentity(form);\n    manager.setOriginFromArray3(form, params.position);\n    manager.setBasisFromArray3(form, params.rotation);\n    const formA = manager.allocTransform();\n    const formB = manager.allocTransform();\n    bodyA.body.getMotionState().getWorldTransform(formA);\n    bodyB.body.getMotionState().getWorldTransform(formB);\n    const formInverseA = manager.inverseTransform(formA);\n    const formInverseB = manager.inverseTransform(formB);\n    const formA2 = manager.multiplyTransforms(formInverseA, form);\n    const formB2 = manager.multiplyTransforms(formInverseB, form);\n    const constraint = new Ammo.btGeneric6DofSpringConstraint(bodyA.body, bodyB.body, formA2, formB2, true);\n    const lll = manager.allocVector3();\n    const lul = manager.allocVector3();\n    const all = manager.allocVector3();\n    const aul = manager.allocVector3();\n    lll.setValue(params.translationLimitation1[0], params.translationLimitation1[1], params.translationLimitation1[2]);\n    lul.setValue(params.translationLimitation2[0], params.translationLimitation2[1], params.translationLimitation2[2]);\n    all.setValue(params.rotationLimitation1[0], params.rotationLimitation1[1], params.rotationLimitation1[2]);\n    aul.setValue(params.rotationLimitation2[0], params.rotationLimitation2[1], params.rotationLimitation2[2]);\n    constraint.setLinearLowerLimit(lll);\n    constraint.setLinearUpperLimit(lul);\n    constraint.setAngularLowerLimit(all);\n    constraint.setAngularUpperLimit(aul);\n    for (let i = 0; i < 3; i++) {\n      if (params.springPosition[i] !== 0) {\n        constraint.enableSpring(i, true);\n        constraint.setStiffness(i, params.springPosition[i]);\n      }\n    }\n    for (let i = 0; i < 3; i++) {\n      if (params.springRotation[i] !== 0) {\n        constraint.enableSpring(i + 3, true);\n        constraint.setStiffness(i + 3, params.springRotation[i]);\n      }\n    }\n    if (constraint.setParam !== void 0) {\n      for (let i = 0; i < 6; i++) {\n        constraint.setParam(2, 0.475, i);\n      }\n    }\n    this.world.addConstraint(constraint, true);\n    this.constraint = constraint;\n    manager.freeTransform(form);\n    manager.freeTransform(formA);\n    manager.freeTransform(formB);\n    manager.freeTransform(formInverseA);\n    manager.freeTransform(formInverseB);\n    manager.freeTransform(formA2);\n    manager.freeTransform(formB2);\n    manager.freeVector3(lll);\n    manager.freeVector3(lul);\n    manager.freeVector3(all);\n    manager.freeVector3(aul);\n  }\n}\nconst _position = /* @__PURE__ */new Vector3();\nconst _quaternion = /* @__PURE__ */new Quaternion();\nconst _scale = /* @__PURE__ */new Vector3();\nconst _matrixWorldInv = /* @__PURE__ */new Matrix4();\nclass MMDPhysicsHelper extends Object3D {\n  /**\n   * Visualize Rigid bodies\n   *\n   * @param {THREE.SkinnedMesh} mesh\n   * @param {Physics} physics\n   */\n  constructor(mesh, physics) {\n    super();\n    this.root = mesh;\n    this.physics = physics;\n    this.matrix.copy(mesh.matrixWorld);\n    this.matrixAutoUpdate = false;\n    this.materials = [];\n    this.materials.push(new MeshBasicMaterial({\n      color: new Color(16746632),\n      wireframe: true,\n      depthTest: false,\n      depthWrite: false,\n      opacity: 0.25,\n      transparent: true\n    }));\n    this.materials.push(new MeshBasicMaterial({\n      color: new Color(8978312),\n      wireframe: true,\n      depthTest: false,\n      depthWrite: false,\n      opacity: 0.25,\n      transparent: true\n    }));\n    this.materials.push(new MeshBasicMaterial({\n      color: new Color(8947967),\n      wireframe: true,\n      depthTest: false,\n      depthWrite: false,\n      opacity: 0.25,\n      transparent: true\n    }));\n    this._init();\n  }\n  /**\n   * Frees the GPU-related resources allocated by this instance. Call this method whenever this instance is no longer used in your app.\n   */\n  dispose() {\n    const materials = this.materials;\n    const children = this.children;\n    for (let i = 0; i < materials.length; i++) {\n      materials[i].dispose();\n    }\n    for (let i = 0; i < children.length; i++) {\n      const child = children[i];\n      if (child.isMesh) child.geometry.dispose();\n    }\n  }\n  /**\n   * Updates Rigid Bodies visualization.\n   */\n  updateMatrixWorld(force) {\n    var mesh = this.root;\n    if (this.visible) {\n      var bodies = this.physics.bodies;\n      _matrixWorldInv.copy(mesh.matrixWorld).decompose(_position, _quaternion, _scale).compose(_position, _quaternion, _scale.set(1, 1, 1)).invert();\n      for (var i = 0, il = bodies.length; i < il; i++) {\n        var body = bodies[i].body;\n        var child = this.children[i];\n        var tr = body.getCenterOfMassTransform();\n        var origin = tr.getOrigin();\n        var rotation = tr.getRotation();\n        child.position.set(origin.x(), origin.y(), origin.z()).applyMatrix4(_matrixWorldInv);\n        child.quaternion.setFromRotationMatrix(_matrixWorldInv).multiply(_quaternion.set(rotation.x(), rotation.y(), rotation.z(), rotation.w()));\n      }\n    }\n    this.matrix.copy(mesh.matrixWorld).decompose(_position, _quaternion, _scale).compose(_position, _quaternion, _scale.set(1, 1, 1));\n    super.updateMatrixWorld(force);\n  }\n  // private method\n  _init() {\n    var bodies = this.physics.bodies;\n    function createGeometry(param2) {\n      switch (param2.shapeType) {\n        case 0:\n          return new SphereGeometry(param2.width, 16, 8);\n        case 1:\n          return new BoxGeometry(param2.width * 2, param2.height * 2, param2.depth * 2, 8, 8, 8);\n        case 2:\n          return new CapsuleGeometry(param2.width, param2.height, 8, 16);\n        default:\n          return null;\n      }\n    }\n    for (var i = 0, il = bodies.length; i < il; i++) {\n      var param = bodies[i].params;\n      this.add(new Mesh(createGeometry(param), this.materials[param.type]));\n    }\n  }\n}\nexport { MMDPhysics };","map":{"version":3,"names":["Vector3","Matrix4","Quaternion","Euler","Bone","Object3D","MeshBasicMaterial","Color","BoxGeometry","SphereGeometry","Mesh","CapsuleGeometry","MMDPhysics","constructor","mesh","rigidBodyParams","constraintParams","arguments","length","undefined","params","Ammo","Error","manager","ResourceManager","unitStep","maxStepNum","gravity","copy","world","bodies","constraints","_init","update","delta","isNonDefaultScale","position","allocThreeVector3","quaternion","allocThreeQuaternion","scale","matrixWorld","decompose","x","y","z","parent","set","updateMatrixWorld","_updateRigidBodies","_stepSimulation","_updateBones","freeThreeVector3","freeThreeQuaternion","reset","i","il","warmup","cycles","setGravity","btVector3","createHelper","MMDPhysicsHelper","currentPosition","currentQuaternion","currentScale","_createWorld","_initRigidBodies","_initConstraints","config","btDefaultCollisionConfiguration","dispatcher","btCollisionDispatcher","cache","btDbvtBroadphase","solver","btSequentialImpulseConstraintSolver","btDiscreteDynamicsWorld","rigidBodies","push","RigidBody","bodyA","rigidBodyIndex1","bodyB","rigidBodyIndex2","Constraint","stepTime","stepSimulation","updateFromBone","updateBone","threeVector3s","threeMatrix4s","threeQuaternions","threeEulers","transforms","quaternions","vector3s","pop","v","allocThreeMatrix4","freeThreeMatrix4","m","q","allocThreeEuler","freeThreeEuler","e","allocTransform","btTransform","freeTransform","t","allocQuaternion","btQuaternion","freeQuaternion","allocVector3","freeVector3","setIdentity","getBasis","getRotation","getBasisAsMatrix3","quaternionToMatrix3","getOrigin","setOrigin","setValue","copyOrigin","t1","t2","o","setBasis","setRotation","setBasisFromMatrix3","matrix3ToQuaternion","setOriginFromArray3","a","setOriginFromThreeVector3","setBasisFromArray3","thQ","thE","setBasisFromThreeQuaternion","setFromEuler","setX","setY","setZ","setW","w","multiplyTransforms","m1","m2","o1","o2","v1","multiplyMatrix3ByVector3","v2","addVector3","m3","multiplyMatrices3","inverseTransform","transposeMatrix3","negativeVector3","v10","rowOfMatrix3","v11","v12","v20","columnOfMatrix3","v21","v22","dotVectors3","v4","v0","xx","yy","zz","xy","yz","zx","xw","yw","zw","s","Math","sqrt","body","bone","boneOffsetForm","boneOffsetFormInverse","_setTransformFromBone","boneIndex","type","_updateBoneRotation","_updateBonePosition","_setPositionFromBone","generateShape","p","shapeType","btSphereShape","width","btBoxShape","height","depth","btCapsuleShape","bones","skeleton","shape","weight","localInertia","calculateLocalInertia","rotation","vector","boneForm","getWorldPosition","form","state","btDefaultMotionState","info","btRigidBodyConstructionInfo","set_m_friction","friction","set_m_restitution","restitution","btRigidBody","setCollisionFlags","getCollisionFlags","setActivationState","setDamping","positionDamping","rotationDamping","setSleepingThresholds","addRigidBody","groupIndex","groupTarget","_getBoneTransform","tr","_getWorldTransformForBone","getCenterOfMassTransform","setCenterOfMassTransform","getMotionState","setWorldTransform","getWorldTransform","thQ2","thQ3","setFromRotationMatrix","conjugate","multiply","matrix","normalize","thV","worldToLocal","constraint","formA","formB","formInverseA","formInverseB","formA2","formB2","btGeneric6DofSpringConstraint","lll","lul","all","aul","translationLimitation1","translationLimitation2","rotationLimitation1","rotationLimitation2","setLinearLowerLimit","setLinearUpperLimit","setAngularLowerLimit","setAngularUpperLimit","springPosition","enableSpring","setStiffness","springRotation","setParam","addConstraint","_position","_quaternion","_scale","_matrixWorldInv","physics","root","matrixAutoUpdate","materials","color","wireframe","depthTest","depthWrite","opacity","transparent","dispose","children","child","isMesh","geometry","force","visible","compose","invert","origin","applyMatrix4","createGeometry","param2","param","add"],"sources":["/home/krug/Coding/JavaScript/Websites/Personal/personal/node_modules/.pnpm/three-stdlib@2.23.7_three@0.151.3/node_modules/three-stdlib/animation/MMDPhysics.js"],"sourcesContent":["import { Vector3, Matrix4, Quaternion, Euler, Bone, Object3D, MeshBasicMaterial, Color, BoxGeometry, SphereGeometry, Mesh } from \"three\";\nimport { CapsuleGeometry } from \"../_polyfill/CapsuleGeometry.js\";\nclass MMDPhysics {\n  /**\n   * @param {THREE.SkinnedMesh} mesh\n   * @param {Array<Object>} rigidBodyParams\n   * @param {Array<Object>} (optional) constraintParams\n   * @param {Object} params - (optional)\n   * @param {Number} params.unitStep - Default is 1 / 65.\n   * @param {Integer} params.maxStepNum - Default is 3.\n   * @param {Vector3} params.gravity - Default is ( 0, - 9.8 * 10, 0 )\n   */\n  constructor(mesh, rigidBodyParams, constraintParams = [], params = {}) {\n    if (typeof Ammo === \"undefined\") {\n      throw new Error(\"THREE.MMDPhysics: Import ammo.js https://github.com/kripken/ammo.js\");\n    }\n    this.manager = new ResourceManager();\n    this.mesh = mesh;\n    this.unitStep = params.unitStep !== void 0 ? params.unitStep : 1 / 65;\n    this.maxStepNum = params.maxStepNum !== void 0 ? params.maxStepNum : 3;\n    this.gravity = new Vector3(0, -9.8 * 10, 0);\n    if (params.gravity !== void 0)\n      this.gravity.copy(params.gravity);\n    this.world = params.world !== void 0 ? params.world : null;\n    this.bodies = [];\n    this.constraints = [];\n    this._init(mesh, rigidBodyParams, constraintParams);\n  }\n  /**\n   * Advances Physics calculation and updates bones.\n   *\n   * @param {Number} delta - time in second\n   * @return {MMDPhysics}\n   */\n  update(delta) {\n    const manager = this.manager;\n    const mesh = this.mesh;\n    let isNonDefaultScale = false;\n    const position = manager.allocThreeVector3();\n    const quaternion = manager.allocThreeQuaternion();\n    const scale = manager.allocThreeVector3();\n    mesh.matrixWorld.decompose(position, quaternion, scale);\n    if (scale.x !== 1 || scale.y !== 1 || scale.z !== 1) {\n      isNonDefaultScale = true;\n    }\n    let parent;\n    if (isNonDefaultScale) {\n      parent = mesh.parent;\n      if (parent !== null)\n        mesh.parent = null;\n      scale.copy(this.mesh.scale);\n      mesh.scale.set(1, 1, 1);\n      mesh.updateMatrixWorld(true);\n    }\n    this._updateRigidBodies();\n    this._stepSimulation(delta);\n    this._updateBones();\n    if (isNonDefaultScale) {\n      if (parent !== null)\n        mesh.parent = parent;\n      mesh.scale.copy(scale);\n    }\n    manager.freeThreeVector3(scale);\n    manager.freeThreeQuaternion(quaternion);\n    manager.freeThreeVector3(position);\n    return this;\n  }\n  /**\n   * Resets rigid bodies transorm to current bone's.\n   *\n   * @return {MMDPhysics}\n   */\n  reset() {\n    for (let i = 0, il = this.bodies.length; i < il; i++) {\n      this.bodies[i].reset();\n    }\n    return this;\n  }\n  /**\n   * Warm ups Rigid bodies. Calculates cycles steps.\n   *\n   * @param {Integer} cycles\n   * @return {MMDPhysics}\n   */\n  warmup(cycles) {\n    for (let i = 0; i < cycles; i++) {\n      this.update(1 / 60);\n    }\n    return this;\n  }\n  /**\n   * Sets gravity.\n   *\n   * @param {Vector3} gravity\n   * @return {MMDPhysicsHelper}\n   */\n  setGravity(gravity) {\n    this.world.setGravity(new Ammo.btVector3(gravity.x, gravity.y, gravity.z));\n    this.gravity.copy(gravity);\n    return this;\n  }\n  /**\n   * Creates MMDPhysicsHelper\n   *\n   * @return {MMDPhysicsHelper}\n   */\n  createHelper() {\n    return new MMDPhysicsHelper(this.mesh, this);\n  }\n  // private methods\n  _init(mesh, rigidBodyParams, constraintParams) {\n    const manager = this.manager;\n    const parent = mesh.parent;\n    if (parent !== null)\n      mesh.parent = null;\n    const currentPosition = manager.allocThreeVector3();\n    const currentQuaternion = manager.allocThreeQuaternion();\n    const currentScale = manager.allocThreeVector3();\n    currentPosition.copy(mesh.position);\n    currentQuaternion.copy(mesh.quaternion);\n    currentScale.copy(mesh.scale);\n    mesh.position.set(0, 0, 0);\n    mesh.quaternion.set(0, 0, 0, 1);\n    mesh.scale.set(1, 1, 1);\n    mesh.updateMatrixWorld(true);\n    if (this.world === null) {\n      this.world = this._createWorld();\n      this.setGravity(this.gravity);\n    }\n    this._initRigidBodies(rigidBodyParams);\n    this._initConstraints(constraintParams);\n    if (parent !== null)\n      mesh.parent = parent;\n    mesh.position.copy(currentPosition);\n    mesh.quaternion.copy(currentQuaternion);\n    mesh.scale.copy(currentScale);\n    mesh.updateMatrixWorld(true);\n    this.reset();\n    manager.freeThreeVector3(currentPosition);\n    manager.freeThreeQuaternion(currentQuaternion);\n    manager.freeThreeVector3(currentScale);\n  }\n  _createWorld() {\n    const config = new Ammo.btDefaultCollisionConfiguration();\n    const dispatcher = new Ammo.btCollisionDispatcher(config);\n    const cache = new Ammo.btDbvtBroadphase();\n    const solver = new Ammo.btSequentialImpulseConstraintSolver();\n    const world = new Ammo.btDiscreteDynamicsWorld(dispatcher, cache, solver, config);\n    return world;\n  }\n  _initRigidBodies(rigidBodies) {\n    for (let i = 0, il = rigidBodies.length; i < il; i++) {\n      this.bodies.push(new RigidBody(this.mesh, this.world, rigidBodies[i], this.manager));\n    }\n  }\n  _initConstraints(constraints) {\n    for (let i = 0, il = constraints.length; i < il; i++) {\n      const params = constraints[i];\n      const bodyA = this.bodies[params.rigidBodyIndex1];\n      const bodyB = this.bodies[params.rigidBodyIndex2];\n      this.constraints.push(new Constraint(this.mesh, this.world, bodyA, bodyB, params, this.manager));\n    }\n  }\n  _stepSimulation(delta) {\n    const unitStep = this.unitStep;\n    let stepTime = delta;\n    let maxStepNum = (delta / unitStep | 0) + 1;\n    if (stepTime < unitStep) {\n      stepTime = unitStep;\n      maxStepNum = 1;\n    }\n    if (maxStepNum > this.maxStepNum) {\n      maxStepNum = this.maxStepNum;\n    }\n    this.world.stepSimulation(stepTime, maxStepNum, unitStep);\n  }\n  _updateRigidBodies() {\n    for (let i = 0, il = this.bodies.length; i < il; i++) {\n      this.bodies[i].updateFromBone();\n    }\n  }\n  _updateBones() {\n    for (let i = 0, il = this.bodies.length; i < il; i++) {\n      this.bodies[i].updateBone();\n    }\n  }\n}\nclass ResourceManager {\n  constructor() {\n    this.threeVector3s = [];\n    this.threeMatrix4s = [];\n    this.threeQuaternions = [];\n    this.threeEulers = [];\n    this.transforms = [];\n    this.quaternions = [];\n    this.vector3s = [];\n  }\n  allocThreeVector3() {\n    return this.threeVector3s.length > 0 ? this.threeVector3s.pop() : new Vector3();\n  }\n  freeThreeVector3(v) {\n    this.threeVector3s.push(v);\n  }\n  allocThreeMatrix4() {\n    return this.threeMatrix4s.length > 0 ? this.threeMatrix4s.pop() : new Matrix4();\n  }\n  freeThreeMatrix4(m) {\n    this.threeMatrix4s.push(m);\n  }\n  allocThreeQuaternion() {\n    return this.threeQuaternions.length > 0 ? this.threeQuaternions.pop() : new Quaternion();\n  }\n  freeThreeQuaternion(q) {\n    this.threeQuaternions.push(q);\n  }\n  allocThreeEuler() {\n    return this.threeEulers.length > 0 ? this.threeEulers.pop() : new Euler();\n  }\n  freeThreeEuler(e) {\n    this.threeEulers.push(e);\n  }\n  allocTransform() {\n    return this.transforms.length > 0 ? this.transforms.pop() : new Ammo.btTransform();\n  }\n  freeTransform(t) {\n    this.transforms.push(t);\n  }\n  allocQuaternion() {\n    return this.quaternions.length > 0 ? this.quaternions.pop() : new Ammo.btQuaternion();\n  }\n  freeQuaternion(q) {\n    this.quaternions.push(q);\n  }\n  allocVector3() {\n    return this.vector3s.length > 0 ? this.vector3s.pop() : new Ammo.btVector3();\n  }\n  freeVector3(v) {\n    this.vector3s.push(v);\n  }\n  setIdentity(t) {\n    t.setIdentity();\n  }\n  getBasis(t) {\n    var q = this.allocQuaternion();\n    t.getBasis().getRotation(q);\n    return q;\n  }\n  getBasisAsMatrix3(t) {\n    var q = this.getBasis(t);\n    var m = this.quaternionToMatrix3(q);\n    this.freeQuaternion(q);\n    return m;\n  }\n  getOrigin(t) {\n    return t.getOrigin();\n  }\n  setOrigin(t, v) {\n    t.getOrigin().setValue(v.x(), v.y(), v.z());\n  }\n  copyOrigin(t1, t2) {\n    var o = t2.getOrigin();\n    this.setOrigin(t1, o);\n  }\n  setBasis(t, q) {\n    t.setRotation(q);\n  }\n  setBasisFromMatrix3(t, m) {\n    var q = this.matrix3ToQuaternion(m);\n    this.setBasis(t, q);\n    this.freeQuaternion(q);\n  }\n  setOriginFromArray3(t, a) {\n    t.getOrigin().setValue(a[0], a[1], a[2]);\n  }\n  setOriginFromThreeVector3(t, v) {\n    t.getOrigin().setValue(v.x, v.y, v.z);\n  }\n  setBasisFromArray3(t, a) {\n    var thQ = this.allocThreeQuaternion();\n    var thE = this.allocThreeEuler();\n    thE.set(a[0], a[1], a[2]);\n    this.setBasisFromThreeQuaternion(t, thQ.setFromEuler(thE));\n    this.freeThreeEuler(thE);\n    this.freeThreeQuaternion(thQ);\n  }\n  setBasisFromThreeQuaternion(t, a) {\n    var q = this.allocQuaternion();\n    q.setX(a.x);\n    q.setY(a.y);\n    q.setZ(a.z);\n    q.setW(a.w);\n    this.setBasis(t, q);\n    this.freeQuaternion(q);\n  }\n  multiplyTransforms(t1, t2) {\n    var t = this.allocTransform();\n    this.setIdentity(t);\n    var m1 = this.getBasisAsMatrix3(t1);\n    var m2 = this.getBasisAsMatrix3(t2);\n    var o1 = this.getOrigin(t1);\n    var o2 = this.getOrigin(t2);\n    var v1 = this.multiplyMatrix3ByVector3(m1, o2);\n    var v2 = this.addVector3(v1, o1);\n    this.setOrigin(t, v2);\n    var m3 = this.multiplyMatrices3(m1, m2);\n    this.setBasisFromMatrix3(t, m3);\n    this.freeVector3(v1);\n    this.freeVector3(v2);\n    return t;\n  }\n  inverseTransform(t) {\n    var t2 = this.allocTransform();\n    var m1 = this.getBasisAsMatrix3(t);\n    var o = this.getOrigin(t);\n    var m2 = this.transposeMatrix3(m1);\n    var v1 = this.negativeVector3(o);\n    var v2 = this.multiplyMatrix3ByVector3(m2, v1);\n    this.setOrigin(t2, v2);\n    this.setBasisFromMatrix3(t2, m2);\n    this.freeVector3(v1);\n    this.freeVector3(v2);\n    return t2;\n  }\n  multiplyMatrices3(m1, m2) {\n    var m3 = [];\n    var v10 = this.rowOfMatrix3(m1, 0);\n    var v11 = this.rowOfMatrix3(m1, 1);\n    var v12 = this.rowOfMatrix3(m1, 2);\n    var v20 = this.columnOfMatrix3(m2, 0);\n    var v21 = this.columnOfMatrix3(m2, 1);\n    var v22 = this.columnOfMatrix3(m2, 2);\n    m3[0] = this.dotVectors3(v10, v20);\n    m3[1] = this.dotVectors3(v10, v21);\n    m3[2] = this.dotVectors3(v10, v22);\n    m3[3] = this.dotVectors3(v11, v20);\n    m3[4] = this.dotVectors3(v11, v21);\n    m3[5] = this.dotVectors3(v11, v22);\n    m3[6] = this.dotVectors3(v12, v20);\n    m3[7] = this.dotVectors3(v12, v21);\n    m3[8] = this.dotVectors3(v12, v22);\n    this.freeVector3(v10);\n    this.freeVector3(v11);\n    this.freeVector3(v12);\n    this.freeVector3(v20);\n    this.freeVector3(v21);\n    this.freeVector3(v22);\n    return m3;\n  }\n  addVector3(v1, v2) {\n    var v = this.allocVector3();\n    v.setValue(v1.x() + v2.x(), v1.y() + v2.y(), v1.z() + v2.z());\n    return v;\n  }\n  dotVectors3(v1, v2) {\n    return v1.x() * v2.x() + v1.y() * v2.y() + v1.z() * v2.z();\n  }\n  rowOfMatrix3(m, i) {\n    var v = this.allocVector3();\n    v.setValue(m[i * 3 + 0], m[i * 3 + 1], m[i * 3 + 2]);\n    return v;\n  }\n  columnOfMatrix3(m, i) {\n    var v = this.allocVector3();\n    v.setValue(m[i + 0], m[i + 3], m[i + 6]);\n    return v;\n  }\n  negativeVector3(v) {\n    var v2 = this.allocVector3();\n    v2.setValue(-v.x(), -v.y(), -v.z());\n    return v2;\n  }\n  multiplyMatrix3ByVector3(m, v) {\n    var v4 = this.allocVector3();\n    var v0 = this.rowOfMatrix3(m, 0);\n    var v1 = this.rowOfMatrix3(m, 1);\n    var v2 = this.rowOfMatrix3(m, 2);\n    var x = this.dotVectors3(v0, v);\n    var y = this.dotVectors3(v1, v);\n    var z = this.dotVectors3(v2, v);\n    v4.setValue(x, y, z);\n    this.freeVector3(v0);\n    this.freeVector3(v1);\n    this.freeVector3(v2);\n    return v4;\n  }\n  transposeMatrix3(m) {\n    var m2 = [];\n    m2[0] = m[0];\n    m2[1] = m[3];\n    m2[2] = m[6];\n    m2[3] = m[1];\n    m2[4] = m[4];\n    m2[5] = m[7];\n    m2[6] = m[2];\n    m2[7] = m[5];\n    m2[8] = m[8];\n    return m2;\n  }\n  quaternionToMatrix3(q) {\n    var m = [];\n    var x = q.x();\n    var y = q.y();\n    var z = q.z();\n    var w = q.w();\n    var xx = x * x;\n    var yy = y * y;\n    var zz = z * z;\n    var xy = x * y;\n    var yz = y * z;\n    var zx = z * x;\n    var xw = x * w;\n    var yw = y * w;\n    var zw = z * w;\n    m[0] = 1 - 2 * (yy + zz);\n    m[1] = 2 * (xy - zw);\n    m[2] = 2 * (zx + yw);\n    m[3] = 2 * (xy + zw);\n    m[4] = 1 - 2 * (zz + xx);\n    m[5] = 2 * (yz - xw);\n    m[6] = 2 * (zx - yw);\n    m[7] = 2 * (yz + xw);\n    m[8] = 1 - 2 * (xx + yy);\n    return m;\n  }\n  matrix3ToQuaternion(m) {\n    var t = m[0] + m[4] + m[8];\n    var s, x, y, z, w;\n    if (t > 0) {\n      s = Math.sqrt(t + 1) * 2;\n      w = 0.25 * s;\n      x = (m[7] - m[5]) / s;\n      y = (m[2] - m[6]) / s;\n      z = (m[3] - m[1]) / s;\n    } else if (m[0] > m[4] && m[0] > m[8]) {\n      s = Math.sqrt(1 + m[0] - m[4] - m[8]) * 2;\n      w = (m[7] - m[5]) / s;\n      x = 0.25 * s;\n      y = (m[1] + m[3]) / s;\n      z = (m[2] + m[6]) / s;\n    } else if (m[4] > m[8]) {\n      s = Math.sqrt(1 + m[4] - m[0] - m[8]) * 2;\n      w = (m[2] - m[6]) / s;\n      x = (m[1] + m[3]) / s;\n      y = 0.25 * s;\n      z = (m[5] + m[7]) / s;\n    } else {\n      s = Math.sqrt(1 + m[8] - m[0] - m[4]) * 2;\n      w = (m[3] - m[1]) / s;\n      x = (m[2] + m[6]) / s;\n      y = (m[5] + m[7]) / s;\n      z = 0.25 * s;\n    }\n    var q = this.allocQuaternion();\n    q.setX(x);\n    q.setY(y);\n    q.setZ(z);\n    q.setW(w);\n    return q;\n  }\n}\nclass RigidBody {\n  constructor(mesh, world, params, manager) {\n    this.mesh = mesh;\n    this.world = world;\n    this.params = params;\n    this.manager = manager;\n    this.body = null;\n    this.bone = null;\n    this.boneOffsetForm = null;\n    this.boneOffsetFormInverse = null;\n    this._init();\n  }\n  /**\n   * Resets rigid body transform to the current bone's.\n   *\n   * @return {RigidBody}\n   */\n  reset() {\n    this._setTransformFromBone();\n    return this;\n  }\n  /**\n   * Updates rigid body's transform from the current bone.\n   *\n   * @return {RidigBody}\n   */\n  updateFromBone() {\n    if (this.params.boneIndex !== -1 && this.params.type === 0) {\n      this._setTransformFromBone();\n    }\n    return this;\n  }\n  /**\n   * Updates bone from the current ridid body's transform.\n   *\n   * @return {RidigBody}\n   */\n  updateBone() {\n    if (this.params.type === 0 || this.params.boneIndex === -1) {\n      return this;\n    }\n    this._updateBoneRotation();\n    if (this.params.type === 1) {\n      this._updateBonePosition();\n    }\n    this.bone.updateMatrixWorld(true);\n    if (this.params.type === 2) {\n      this._setPositionFromBone();\n    }\n    return this;\n  }\n  // private methods\n  _init() {\n    function generateShape(p) {\n      switch (p.shapeType) {\n        case 0:\n          return new Ammo.btSphereShape(p.width);\n        case 1:\n          return new Ammo.btBoxShape(new Ammo.btVector3(p.width, p.height, p.depth));\n        case 2:\n          return new Ammo.btCapsuleShape(p.width, p.height);\n        default:\n          throw new Error(\"unknown shape type \" + p.shapeType);\n      }\n    }\n    const manager = this.manager;\n    const params = this.params;\n    const bones = this.mesh.skeleton.bones;\n    const bone = params.boneIndex === -1 ? new Bone() : bones[params.boneIndex];\n    const shape = generateShape(params);\n    const weight = params.type === 0 ? 0 : params.weight;\n    const localInertia = manager.allocVector3();\n    localInertia.setValue(0, 0, 0);\n    if (weight !== 0) {\n      shape.calculateLocalInertia(weight, localInertia);\n    }\n    const boneOffsetForm = manager.allocTransform();\n    manager.setIdentity(boneOffsetForm);\n    manager.setOriginFromArray3(boneOffsetForm, params.position);\n    manager.setBasisFromArray3(boneOffsetForm, params.rotation);\n    const vector = manager.allocThreeVector3();\n    const boneForm = manager.allocTransform();\n    manager.setIdentity(boneForm);\n    manager.setOriginFromThreeVector3(boneForm, bone.getWorldPosition(vector));\n    const form = manager.multiplyTransforms(boneForm, boneOffsetForm);\n    const state = new Ammo.btDefaultMotionState(form);\n    const info = new Ammo.btRigidBodyConstructionInfo(weight, state, shape, localInertia);\n    info.set_m_friction(params.friction);\n    info.set_m_restitution(params.restitution);\n    const body = new Ammo.btRigidBody(info);\n    if (params.type === 0) {\n      body.setCollisionFlags(body.getCollisionFlags() | 2);\n      body.setActivationState(4);\n    }\n    body.setDamping(params.positionDamping, params.rotationDamping);\n    body.setSleepingThresholds(0, 0);\n    this.world.addRigidBody(body, 1 << params.groupIndex, params.groupTarget);\n    this.body = body;\n    this.bone = bone;\n    this.boneOffsetForm = boneOffsetForm;\n    this.boneOffsetFormInverse = manager.inverseTransform(boneOffsetForm);\n    manager.freeVector3(localInertia);\n    manager.freeTransform(form);\n    manager.freeTransform(boneForm);\n    manager.freeThreeVector3(vector);\n  }\n  _getBoneTransform() {\n    const manager = this.manager;\n    const p = manager.allocThreeVector3();\n    const q = manager.allocThreeQuaternion();\n    const s = manager.allocThreeVector3();\n    this.bone.matrixWorld.decompose(p, q, s);\n    const tr = manager.allocTransform();\n    manager.setOriginFromThreeVector3(tr, p);\n    manager.setBasisFromThreeQuaternion(tr, q);\n    const form = manager.multiplyTransforms(tr, this.boneOffsetForm);\n    manager.freeTransform(tr);\n    manager.freeThreeVector3(s);\n    manager.freeThreeQuaternion(q);\n    manager.freeThreeVector3(p);\n    return form;\n  }\n  _getWorldTransformForBone() {\n    const manager = this.manager;\n    const tr = this.body.getCenterOfMassTransform();\n    return manager.multiplyTransforms(tr, this.boneOffsetFormInverse);\n  }\n  _setTransformFromBone() {\n    const manager = this.manager;\n    const form = this._getBoneTransform();\n    this.body.setCenterOfMassTransform(form);\n    this.body.getMotionState().setWorldTransform(form);\n    manager.freeTransform(form);\n  }\n  _setPositionFromBone() {\n    const manager = this.manager;\n    const form = this._getBoneTransform();\n    const tr = manager.allocTransform();\n    this.body.getMotionState().getWorldTransform(tr);\n    manager.copyOrigin(tr, form);\n    this.body.setCenterOfMassTransform(tr);\n    this.body.getMotionState().setWorldTransform(tr);\n    manager.freeTransform(tr);\n    manager.freeTransform(form);\n  }\n  _updateBoneRotation() {\n    const manager = this.manager;\n    const tr = this._getWorldTransformForBone();\n    const q = manager.getBasis(tr);\n    const thQ = manager.allocThreeQuaternion();\n    const thQ2 = manager.allocThreeQuaternion();\n    const thQ3 = manager.allocThreeQuaternion();\n    thQ.set(q.x(), q.y(), q.z(), q.w());\n    thQ2.setFromRotationMatrix(this.bone.matrixWorld);\n    thQ2.conjugate();\n    thQ2.multiply(thQ);\n    thQ3.setFromRotationMatrix(this.bone.matrix);\n    this.bone.quaternion.copy(thQ2.multiply(thQ3).normalize());\n    manager.freeThreeQuaternion(thQ);\n    manager.freeThreeQuaternion(thQ2);\n    manager.freeThreeQuaternion(thQ3);\n    manager.freeQuaternion(q);\n    manager.freeTransform(tr);\n  }\n  _updateBonePosition() {\n    const manager = this.manager;\n    const tr = this._getWorldTransformForBone();\n    const thV = manager.allocThreeVector3();\n    const o = manager.getOrigin(tr);\n    thV.set(o.x(), o.y(), o.z());\n    if (this.bone.parent) {\n      this.bone.parent.worldToLocal(thV);\n    }\n    this.bone.position.copy(thV);\n    manager.freeThreeVector3(thV);\n    manager.freeTransform(tr);\n  }\n}\nclass Constraint {\n  /**\n   * @param {THREE.SkinnedMesh} mesh\n   * @param {Ammo.btDiscreteDynamicsWorld} world\n   * @param {RigidBody} bodyA\n   * @param {RigidBody} bodyB\n   * @param {Object} params\n   * @param {ResourceManager} manager\n   */\n  constructor(mesh, world, bodyA, bodyB, params, manager) {\n    this.mesh = mesh;\n    this.world = world;\n    this.bodyA = bodyA;\n    this.bodyB = bodyB;\n    this.params = params;\n    this.manager = manager;\n    this.constraint = null;\n    this._init();\n  }\n  // private method\n  _init() {\n    const manager = this.manager;\n    const params = this.params;\n    const bodyA = this.bodyA;\n    const bodyB = this.bodyB;\n    const form = manager.allocTransform();\n    manager.setIdentity(form);\n    manager.setOriginFromArray3(form, params.position);\n    manager.setBasisFromArray3(form, params.rotation);\n    const formA = manager.allocTransform();\n    const formB = manager.allocTransform();\n    bodyA.body.getMotionState().getWorldTransform(formA);\n    bodyB.body.getMotionState().getWorldTransform(formB);\n    const formInverseA = manager.inverseTransform(formA);\n    const formInverseB = manager.inverseTransform(formB);\n    const formA2 = manager.multiplyTransforms(formInverseA, form);\n    const formB2 = manager.multiplyTransforms(formInverseB, form);\n    const constraint = new Ammo.btGeneric6DofSpringConstraint(bodyA.body, bodyB.body, formA2, formB2, true);\n    const lll = manager.allocVector3();\n    const lul = manager.allocVector3();\n    const all = manager.allocVector3();\n    const aul = manager.allocVector3();\n    lll.setValue(params.translationLimitation1[0], params.translationLimitation1[1], params.translationLimitation1[2]);\n    lul.setValue(params.translationLimitation2[0], params.translationLimitation2[1], params.translationLimitation2[2]);\n    all.setValue(params.rotationLimitation1[0], params.rotationLimitation1[1], params.rotationLimitation1[2]);\n    aul.setValue(params.rotationLimitation2[0], params.rotationLimitation2[1], params.rotationLimitation2[2]);\n    constraint.setLinearLowerLimit(lll);\n    constraint.setLinearUpperLimit(lul);\n    constraint.setAngularLowerLimit(all);\n    constraint.setAngularUpperLimit(aul);\n    for (let i = 0; i < 3; i++) {\n      if (params.springPosition[i] !== 0) {\n        constraint.enableSpring(i, true);\n        constraint.setStiffness(i, params.springPosition[i]);\n      }\n    }\n    for (let i = 0; i < 3; i++) {\n      if (params.springRotation[i] !== 0) {\n        constraint.enableSpring(i + 3, true);\n        constraint.setStiffness(i + 3, params.springRotation[i]);\n      }\n    }\n    if (constraint.setParam !== void 0) {\n      for (let i = 0; i < 6; i++) {\n        constraint.setParam(2, 0.475, i);\n      }\n    }\n    this.world.addConstraint(constraint, true);\n    this.constraint = constraint;\n    manager.freeTransform(form);\n    manager.freeTransform(formA);\n    manager.freeTransform(formB);\n    manager.freeTransform(formInverseA);\n    manager.freeTransform(formInverseB);\n    manager.freeTransform(formA2);\n    manager.freeTransform(formB2);\n    manager.freeVector3(lll);\n    manager.freeVector3(lul);\n    manager.freeVector3(all);\n    manager.freeVector3(aul);\n  }\n}\nconst _position = /* @__PURE__ */ new Vector3();\nconst _quaternion = /* @__PURE__ */ new Quaternion();\nconst _scale = /* @__PURE__ */ new Vector3();\nconst _matrixWorldInv = /* @__PURE__ */ new Matrix4();\nclass MMDPhysicsHelper extends Object3D {\n  /**\n   * Visualize Rigid bodies\n   *\n   * @param {THREE.SkinnedMesh} mesh\n   * @param {Physics} physics\n   */\n  constructor(mesh, physics) {\n    super();\n    this.root = mesh;\n    this.physics = physics;\n    this.matrix.copy(mesh.matrixWorld);\n    this.matrixAutoUpdate = false;\n    this.materials = [];\n    this.materials.push(\n      new MeshBasicMaterial({\n        color: new Color(16746632),\n        wireframe: true,\n        depthTest: false,\n        depthWrite: false,\n        opacity: 0.25,\n        transparent: true\n      })\n    );\n    this.materials.push(\n      new MeshBasicMaterial({\n        color: new Color(8978312),\n        wireframe: true,\n        depthTest: false,\n        depthWrite: false,\n        opacity: 0.25,\n        transparent: true\n      })\n    );\n    this.materials.push(\n      new MeshBasicMaterial({\n        color: new Color(8947967),\n        wireframe: true,\n        depthTest: false,\n        depthWrite: false,\n        opacity: 0.25,\n        transparent: true\n      })\n    );\n    this._init();\n  }\n  /**\n   * Frees the GPU-related resources allocated by this instance. Call this method whenever this instance is no longer used in your app.\n   */\n  dispose() {\n    const materials = this.materials;\n    const children = this.children;\n    for (let i = 0; i < materials.length; i++) {\n      materials[i].dispose();\n    }\n    for (let i = 0; i < children.length; i++) {\n      const child = children[i];\n      if (child.isMesh)\n        child.geometry.dispose();\n    }\n  }\n  /**\n   * Updates Rigid Bodies visualization.\n   */\n  updateMatrixWorld(force) {\n    var mesh = this.root;\n    if (this.visible) {\n      var bodies = this.physics.bodies;\n      _matrixWorldInv.copy(mesh.matrixWorld).decompose(_position, _quaternion, _scale).compose(_position, _quaternion, _scale.set(1, 1, 1)).invert();\n      for (var i = 0, il = bodies.length; i < il; i++) {\n        var body = bodies[i].body;\n        var child = this.children[i];\n        var tr = body.getCenterOfMassTransform();\n        var origin = tr.getOrigin();\n        var rotation = tr.getRotation();\n        child.position.set(origin.x(), origin.y(), origin.z()).applyMatrix4(_matrixWorldInv);\n        child.quaternion.setFromRotationMatrix(_matrixWorldInv).multiply(_quaternion.set(rotation.x(), rotation.y(), rotation.z(), rotation.w()));\n      }\n    }\n    this.matrix.copy(mesh.matrixWorld).decompose(_position, _quaternion, _scale).compose(_position, _quaternion, _scale.set(1, 1, 1));\n    super.updateMatrixWorld(force);\n  }\n  // private method\n  _init() {\n    var bodies = this.physics.bodies;\n    function createGeometry(param2) {\n      switch (param2.shapeType) {\n        case 0:\n          return new SphereGeometry(param2.width, 16, 8);\n        case 1:\n          return new BoxGeometry(param2.width * 2, param2.height * 2, param2.depth * 2, 8, 8, 8);\n        case 2:\n          return new CapsuleGeometry(param2.width, param2.height, 8, 16);\n        default:\n          return null;\n      }\n    }\n    for (var i = 0, il = bodies.length; i < il; i++) {\n      var param = bodies[i].params;\n      this.add(new Mesh(createGeometry(param), this.materials[param.type]));\n    }\n  }\n}\nexport {\n  MMDPhysics\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}