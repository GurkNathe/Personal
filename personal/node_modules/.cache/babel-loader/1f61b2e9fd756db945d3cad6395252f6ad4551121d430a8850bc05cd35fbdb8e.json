{"ast":null,"code":"import _classCallCheck from \"/home/krug/Coding/JavaScript/Websites/Personal/personal/node_modules/.pnpm/@babel+runtime@7.22.3/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/home/krug/Coding/JavaScript/Websites/Personal/personal/node_modules/.pnpm/@babel+runtime@7.22.3/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"/home/krug/Coding/JavaScript/Websites/Personal/personal/node_modules/.pnpm/@babel+runtime@7.22.3/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/home/krug/Coding/JavaScript/Websites/Personal/personal/node_modules/.pnpm/@babel+runtime@7.22.3/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { Loader, FileLoader, BufferGeometry, Float32BufferAttribute, BufferAttribute, LoaderUtils } from \"three\";\nimport { unzlibSync } from \"fflate\";\nvar VTKLoader = /*#__PURE__*/function (_Loader) {\n  _inherits(VTKLoader, _Loader);\n  var _super = _createSuper(VTKLoader);\n  function VTKLoader(manager) {\n    _classCallCheck(this, VTKLoader);\n    return _super.call(this, manager);\n  }\n  _createClass(VTKLoader, [{\n    key: \"load\",\n    value: function load(url, onLoad, onProgress, onError) {\n      var scope = this;\n      var loader = new FileLoader(scope.manager);\n      loader.setPath(scope.path);\n      loader.setResponseType(\"arraybuffer\");\n      loader.setRequestHeader(scope.requestHeader);\n      loader.setWithCredentials(scope.withCredentials);\n      loader.load(url, function (text) {\n        try {\n          onLoad(scope.parse(text));\n        } catch (e) {\n          if (onError) {\n            onError(e);\n          } else {\n            console.error(e);\n          }\n          scope.manager.itemError(url);\n        }\n      }, onProgress, onError);\n    }\n  }, {\n    key: \"parse\",\n    value: function parse(data) {\n      function parseASCII(data2) {\n        var indices = [];\n        var positions = [];\n        var colors = [];\n        var normals = [];\n        var result;\n        var patWord = /^[^\\d.\\s-]+/;\n        var pat3Floats = /(\\-?\\d+\\.?[\\d\\-\\+e]*)\\s+(\\-?\\d+\\.?[\\d\\-\\+e]*)\\s+(\\-?\\d+\\.?[\\d\\-\\+e]*)/g;\n        var patConnectivity = /^(\\d+)\\s+([\\s\\d]*)/;\n        var patPOINTS = /^POINTS /;\n        var patPOLYGONS = /^POLYGONS /;\n        var patTRIANGLE_STRIPS = /^TRIANGLE_STRIPS /;\n        var patPOINT_DATA = /^POINT_DATA[ ]+(\\d+)/;\n        var patCELL_DATA = /^CELL_DATA[ ]+(\\d+)/;\n        var patCOLOR_SCALARS = /^COLOR_SCALARS[ ]+(\\w+)[ ]+3/;\n        var patNORMALS = /^NORMALS[ ]+(\\w+)[ ]+(\\w+)/;\n        var inPointsSection = false;\n        var inPolygonsSection = false;\n        var inTriangleStripSection = false;\n        var inPointDataSection = false;\n        var inCellDataSection = false;\n        var inColorSection = false;\n        var inNormalsSection = false;\n        var lines = data2.split(\"\\n\");\n        for (var i in lines) {\n          var line = lines[i].trim();\n          if (line.indexOf(\"DATASET\") === 0) {\n            var dataset = line.split(\" \")[1];\n            if (dataset !== \"POLYDATA\") throw new Error(\"Unsupported DATASET type: \" + dataset);\n          } else if (inPointsSection) {\n            while ((result = pat3Floats.exec(line)) !== null) {\n              if (patWord.exec(line) !== null) break;\n              var x = parseFloat(result[1]);\n              var y = parseFloat(result[2]);\n              var z = parseFloat(result[3]);\n              positions.push(x, y, z);\n            }\n          } else if (inPolygonsSection) {\n            if ((result = patConnectivity.exec(line)) !== null) {\n              var numVertices = parseInt(result[1]);\n              var inds = result[2].split(/\\s+/);\n              if (numVertices >= 3) {\n                var i0 = parseInt(inds[0]);\n                var i1, i2;\n                var k = 1;\n                for (var j = 0; j < numVertices - 2; ++j) {\n                  i1 = parseInt(inds[k]);\n                  i2 = parseInt(inds[k + 1]);\n                  indices.push(i0, i1, i2);\n                  k++;\n                }\n              }\n            }\n          } else if (inTriangleStripSection) {\n            if ((result = patConnectivity.exec(line)) !== null) {\n              var numVertices = parseInt(result[1]);\n              var inds = result[2].split(/\\s+/);\n              if (numVertices >= 3) {\n                var i0, i1, i2;\n                for (var j = 0; j < numVertices - 2; j++) {\n                  if (j % 2 === 1) {\n                    i0 = parseInt(inds[j]);\n                    i1 = parseInt(inds[j + 2]);\n                    i2 = parseInt(inds[j + 1]);\n                    indices.push(i0, i1, i2);\n                  } else {\n                    i0 = parseInt(inds[j]);\n                    i1 = parseInt(inds[j + 1]);\n                    i2 = parseInt(inds[j + 2]);\n                    indices.push(i0, i1, i2);\n                  }\n                }\n              }\n            }\n          } else if (inPointDataSection || inCellDataSection) {\n            if (inColorSection) {\n              while ((result = pat3Floats.exec(line)) !== null) {\n                if (patWord.exec(line) !== null) break;\n                var r = parseFloat(result[1]);\n                var g = parseFloat(result[2]);\n                var b = parseFloat(result[3]);\n                colors.push(r, g, b);\n              }\n            } else if (inNormalsSection) {\n              while ((result = pat3Floats.exec(line)) !== null) {\n                if (patWord.exec(line) !== null) break;\n                var nx = parseFloat(result[1]);\n                var ny = parseFloat(result[2]);\n                var nz = parseFloat(result[3]);\n                normals.push(nx, ny, nz);\n              }\n            }\n          }\n          if (patPOLYGONS.exec(line) !== null) {\n            inPolygonsSection = true;\n            inPointsSection = false;\n            inTriangleStripSection = false;\n          } else if (patPOINTS.exec(line) !== null) {\n            inPolygonsSection = false;\n            inPointsSection = true;\n            inTriangleStripSection = false;\n          } else if (patTRIANGLE_STRIPS.exec(line) !== null) {\n            inPolygonsSection = false;\n            inPointsSection = false;\n            inTriangleStripSection = true;\n          } else if (patPOINT_DATA.exec(line) !== null) {\n            inPointDataSection = true;\n            inPointsSection = false;\n            inPolygonsSection = false;\n            inTriangleStripSection = false;\n          } else if (patCELL_DATA.exec(line) !== null) {\n            inCellDataSection = true;\n            inPointsSection = false;\n            inPolygonsSection = false;\n            inTriangleStripSection = false;\n          } else if (patCOLOR_SCALARS.exec(line) !== null) {\n            inColorSection = true;\n            inNormalsSection = false;\n            inPointsSection = false;\n            inPolygonsSection = false;\n            inTriangleStripSection = false;\n          } else if (patNORMALS.exec(line) !== null) {\n            inNormalsSection = true;\n            inColorSection = false;\n            inPointsSection = false;\n            inPolygonsSection = false;\n            inTriangleStripSection = false;\n          }\n        }\n        var geometry = new BufferGeometry();\n        geometry.setIndex(indices);\n        geometry.setAttribute(\"position\", new Float32BufferAttribute(positions, 3));\n        if (normals.length === positions.length) {\n          geometry.setAttribute(\"normal\", new Float32BufferAttribute(normals, 3));\n        }\n        if (colors.length !== indices.length) {\n          if (colors.length === positions.length) {\n            geometry.setAttribute(\"color\", new Float32BufferAttribute(colors, 3));\n          }\n        } else {\n          geometry = geometry.toNonIndexed();\n          var numTriangles = geometry.attributes.position.count / 3;\n          if (colors.length === numTriangles * 3) {\n            var newColors = [];\n            for (var i = 0; i < numTriangles; i++) {\n              var r = colors[3 * i + 0];\n              var g = colors[3 * i + 1];\n              var b = colors[3 * i + 2];\n              newColors.push(r, g, b);\n              newColors.push(r, g, b);\n              newColors.push(r, g, b);\n            }\n            geometry.setAttribute(\"color\", new Float32BufferAttribute(newColors, 3));\n          }\n        }\n        return geometry;\n      }\n      function parseBinary(data2) {\n        var count, pointIndex, i, numberOfPoints, s;\n        var buffer = new Uint8Array(data2);\n        var dataView = new DataView(data2);\n        var points = [];\n        var normals = [];\n        var indices = [];\n        var vtk = [];\n        var index = 0;\n        function findString(buffer2, start) {\n          var index2 = start;\n          var c = buffer2[index2];\n          var s2 = [];\n          while (c !== 10) {\n            s2.push(String.fromCharCode(c));\n            index2++;\n            c = buffer2[index2];\n          }\n          return {\n            start: start,\n            end: index2,\n            next: index2 + 1,\n            parsedString: s2.join(\"\")\n          };\n        }\n        var state, line;\n        while (true) {\n          state = findString(buffer, index);\n          line = state.parsedString;\n          if (line.indexOf(\"DATASET\") === 0) {\n            var dataset = line.split(\" \")[1];\n            if (dataset !== \"POLYDATA\") throw new Error(\"Unsupported DATASET type: \" + dataset);\n          } else if (line.indexOf(\"POINTS\") === 0) {\n            vtk.push(line);\n            numberOfPoints = parseInt(line.split(\" \")[1], 10);\n            count = numberOfPoints * 4 * 3;\n            points = new Float32Array(numberOfPoints * 3);\n            pointIndex = state.next;\n            for (i = 0; i < numberOfPoints; i++) {\n              points[3 * i] = dataView.getFloat32(pointIndex, false);\n              points[3 * i + 1] = dataView.getFloat32(pointIndex + 4, false);\n              points[3 * i + 2] = dataView.getFloat32(pointIndex + 8, false);\n              pointIndex = pointIndex + 12;\n            }\n            state.next = state.next + count + 1;\n          } else if (line.indexOf(\"TRIANGLE_STRIPS\") === 0) {\n            var numberOfStrips = parseInt(line.split(\" \")[1], 10);\n            var size = parseInt(line.split(\" \")[2], 10);\n            count = size * 4;\n            indices = new Uint32Array(3 * size - 9 * numberOfStrips);\n            var indicesIndex = 0;\n            pointIndex = state.next;\n            for (i = 0; i < numberOfStrips; i++) {\n              var indexCount = dataView.getInt32(pointIndex, false);\n              var strip = [];\n              pointIndex += 4;\n              for (s = 0; s < indexCount; s++) {\n                strip.push(dataView.getInt32(pointIndex, false));\n                pointIndex += 4;\n              }\n              for (var j = 0; j < indexCount - 2; j++) {\n                if (j % 2) {\n                  indices[indicesIndex++] = strip[j];\n                  indices[indicesIndex++] = strip[j + 2];\n                  indices[indicesIndex++] = strip[j + 1];\n                } else {\n                  indices[indicesIndex++] = strip[j];\n                  indices[indicesIndex++] = strip[j + 1];\n                  indices[indicesIndex++] = strip[j + 2];\n                }\n              }\n            }\n            state.next = state.next + count + 1;\n          } else if (line.indexOf(\"POLYGONS\") === 0) {\n            var numberOfStrips = parseInt(line.split(\" \")[1], 10);\n            var size = parseInt(line.split(\" \")[2], 10);\n            count = size * 4;\n            indices = new Uint32Array(3 * size - 9 * numberOfStrips);\n            var indicesIndex = 0;\n            pointIndex = state.next;\n            for (i = 0; i < numberOfStrips; i++) {\n              var indexCount = dataView.getInt32(pointIndex, false);\n              var strip = [];\n              pointIndex += 4;\n              for (s = 0; s < indexCount; s++) {\n                strip.push(dataView.getInt32(pointIndex, false));\n                pointIndex += 4;\n              }\n              for (var j = 1; j < indexCount - 1; j++) {\n                indices[indicesIndex++] = strip[0];\n                indices[indicesIndex++] = strip[j];\n                indices[indicesIndex++] = strip[j + 1];\n              }\n            }\n            state.next = state.next + count + 1;\n          } else if (line.indexOf(\"POINT_DATA\") === 0) {\n            numberOfPoints = parseInt(line.split(\" \")[1], 10);\n            state = findString(buffer, state.next);\n            count = numberOfPoints * 4 * 3;\n            normals = new Float32Array(numberOfPoints * 3);\n            pointIndex = state.next;\n            for (i = 0; i < numberOfPoints; i++) {\n              normals[3 * i] = dataView.getFloat32(pointIndex, false);\n              normals[3 * i + 1] = dataView.getFloat32(pointIndex + 4, false);\n              normals[3 * i + 2] = dataView.getFloat32(pointIndex + 8, false);\n              pointIndex += 12;\n            }\n            state.next = state.next + count;\n          }\n          index = state.next;\n          if (index >= buffer.byteLength) {\n            break;\n          }\n        }\n        var geometry = new BufferGeometry();\n        geometry.setIndex(new BufferAttribute(indices, 1));\n        geometry.setAttribute(\"position\", new BufferAttribute(points, 3));\n        if (normals.length === points.length) {\n          geometry.setAttribute(\"normal\", new BufferAttribute(normals, 3));\n        }\n        return geometry;\n      }\n      function Float32Concat(first, second) {\n        var firstLength = first.length,\n          result = new Float32Array(firstLength + second.length);\n        result.set(first);\n        result.set(second, firstLength);\n        return result;\n      }\n      function Int32Concat(first, second) {\n        var firstLength = first.length,\n          result = new Int32Array(firstLength + second.length);\n        result.set(first);\n        result.set(second, firstLength);\n        return result;\n      }\n      function parseXML(stringFile) {\n        function xmlToJson(xml) {\n          var obj = {};\n          if (xml.nodeType === 1) {\n            if (xml.attributes) {\n              if (xml.attributes.length > 0) {\n                obj[\"attributes\"] = {};\n                for (var j2 = 0; j2 < xml.attributes.length; j2++) {\n                  var attribute = xml.attributes.item(j2);\n                  obj[\"attributes\"][attribute.nodeName] = attribute.nodeValue.trim();\n                }\n              }\n            }\n          } else if (xml.nodeType === 3) {\n            obj = xml.nodeValue.trim();\n          }\n          if (xml.hasChildNodes()) {\n            for (var i2 = 0; i2 < xml.childNodes.length; i2++) {\n              var item = xml.childNodes.item(i2);\n              var nodeName = item.nodeName;\n              if (typeof obj[nodeName] === \"undefined\") {\n                var tmp = xmlToJson(item);\n                if (tmp !== \"\") obj[nodeName] = tmp;\n              } else {\n                if (typeof obj[nodeName].push === \"undefined\") {\n                  var old = obj[nodeName];\n                  obj[nodeName] = [old];\n                }\n                var tmp = xmlToJson(item);\n                if (tmp !== \"\") obj[nodeName].push(tmp);\n              }\n            }\n          }\n          return obj;\n        }\n        function Base64toByteArray(b64) {\n          var Arr = typeof Uint8Array !== \"undefined\" ? Uint8Array : Array;\n          var i2;\n          var lookup = [];\n          var revLookup = [];\n          var code = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\";\n          var len2 = code.length;\n          for (i2 = 0; i2 < len2; i2++) {\n            lookup[i2] = code[i2];\n          }\n          for (i2 = 0; i2 < len2; ++i2) {\n            revLookup[code.charCodeAt(i2)] = i2;\n          }\n          revLookup[\"-\".charCodeAt(0)] = 62;\n          revLookup[\"_\".charCodeAt(0)] = 63;\n          var j2, l, tmp, placeHolders, arr2;\n          var len2 = b64.length;\n          if (len2 % 4 > 0) {\n            throw new Error(\"Invalid string. Length must be a multiple of 4\");\n          }\n          placeHolders = b64[len2 - 2] === \"=\" ? 2 : b64[len2 - 1] === \"=\" ? 1 : 0;\n          arr2 = new Arr(len2 * 3 / 4 - placeHolders);\n          l = placeHolders > 0 ? len2 - 4 : len2;\n          var L = 0;\n          for (i2 = 0, j2 = 0; i2 < l; i2 += 4, j2 += 3) {\n            tmp = revLookup[b64.charCodeAt(i2)] << 18 | revLookup[b64.charCodeAt(i2 + 1)] << 12 | revLookup[b64.charCodeAt(i2 + 2)] << 6 | revLookup[b64.charCodeAt(i2 + 3)];\n            arr2[L++] = (tmp & 16711680) >> 16;\n            arr2[L++] = (tmp & 65280) >> 8;\n            arr2[L++] = tmp & 255;\n          }\n          if (placeHolders === 2) {\n            tmp = revLookup[b64.charCodeAt(i2)] << 2 | revLookup[b64.charCodeAt(i2 + 1)] >> 4;\n            arr2[L++] = tmp & 255;\n          } else if (placeHolders === 1) {\n            tmp = revLookup[b64.charCodeAt(i2)] << 10 | revLookup[b64.charCodeAt(i2 + 1)] << 4 | revLookup[b64.charCodeAt(i2 + 2)] >> 2;\n            arr2[L++] = tmp >> 8 & 255;\n            arr2[L++] = tmp & 255;\n          }\n          return arr2;\n        }\n        function parseDataArray(ele, compressed2) {\n          var numBytes = 0;\n          if (json.attributes.header_type === \"UInt64\") {\n            numBytes = 8;\n          } else if (json.attributes.header_type === \"UInt32\") {\n            numBytes = 4;\n          }\n          if (ele.attributes.format === \"binary\" && compressed2) {\n            var rawData, content, byteData, blocks, cSizeStart, headerSize, padding, dataOffsets, currentOffset;\n            if (ele.attributes.type === \"Float32\") {\n              var txt = new Float32Array();\n            } else if (ele.attributes.type === \"Int64\") {\n              var txt = new Int32Array();\n            }\n            rawData = ele[\"#text\"];\n            byteData = Base64toByteArray(rawData);\n            blocks = byteData[0];\n            for (var i2 = 1; i2 < numBytes - 1; i2++) {\n              blocks = blocks | byteData[i2] << i2 * numBytes;\n            }\n            headerSize = (blocks + 3) * numBytes;\n            padding = headerSize % 3 > 0 ? 3 - headerSize % 3 : 0;\n            headerSize = headerSize + padding;\n            dataOffsets = [];\n            currentOffset = headerSize;\n            dataOffsets.push(currentOffset);\n            cSizeStart = 3 * numBytes;\n            for (var i2 = 0; i2 < blocks; i2++) {\n              var currentBlockSize = byteData[i2 * numBytes + cSizeStart];\n              for (var j2 = 1; j2 < numBytes - 1; j2++) {\n                currentBlockSize = currentBlockSize | byteData[i2 * numBytes + cSizeStart + j2] << j2 * 8;\n              }\n              currentOffset = currentOffset + currentBlockSize;\n              dataOffsets.push(currentOffset);\n            }\n            for (var i2 = 0; i2 < dataOffsets.length - 1; i2++) {\n              var data2 = unzlibSync(byteData.slice(dataOffsets[i2], dataOffsets[i2 + 1]));\n              content = data2.buffer;\n              if (ele.attributes.type === \"Float32\") {\n                content = new Float32Array(content);\n                txt = Float32Concat(txt, content);\n              } else if (ele.attributes.type === \"Int64\") {\n                content = new Int32Array(content);\n                txt = Int32Concat(txt, content);\n              }\n            }\n            delete ele[\"#text\"];\n            if (ele.attributes.type === \"Int64\") {\n              if (ele.attributes.format === \"binary\") {\n                txt = txt.filter(function (el, idx) {\n                  if (idx % 2 !== 1) return true;\n                });\n              }\n            }\n          } else {\n            if (ele.attributes.format === \"binary\" && !compressed2) {\n              var content = Base64toByteArray(ele[\"#text\"]);\n              content = content.slice(numBytes).buffer;\n            } else {\n              if (ele[\"#text\"]) {\n                var content = ele[\"#text\"].split(/\\s+/).filter(function (el) {\n                  if (el !== \"\") return el;\n                });\n              } else {\n                var content = new Int32Array(0).buffer;\n              }\n            }\n            delete ele[\"#text\"];\n            if (ele.attributes.type === \"Float32\") {\n              var txt = new Float32Array(content);\n            } else if (ele.attributes.type === \"Int32\") {\n              var txt = new Int32Array(content);\n            } else if (ele.attributes.type === \"Int64\") {\n              var txt = new Int32Array(content);\n              if (ele.attributes.format === \"binary\") {\n                txt = txt.filter(function (el, idx) {\n                  if (idx % 2 !== 1) return true;\n                });\n              }\n            }\n          }\n          return txt;\n        }\n        var dom = null;\n        if (window.DOMParser) {\n          try {\n            dom = new DOMParser().parseFromString(stringFile, \"text/xml\");\n          } catch (e) {\n            dom = null;\n          }\n        } else if (window.ActiveXObject) {\n          try {\n            dom = new ActiveXObject(\"Microsoft.XMLDOM\");\n            dom.async = false;\n            if (!dom.loadXML(\n              /* xml */\n            )) {\n              throw new Error(dom.parseError.reason + dom.parseError.srcText);\n            }\n          } catch (e) {\n            dom = null;\n          }\n        } else {\n          throw new Error(\"Cannot parse xml string!\");\n        }\n        var doc = dom.documentElement;\n        var json = xmlToJson(doc);\n        var points = [];\n        var normals = [];\n        var indices = [];\n        if (json.PolyData) {\n          var piece = json.PolyData.Piece;\n          var compressed = json.attributes.hasOwnProperty(\"compressor\");\n          var sections = [\"PointData\", \"Points\", \"Strips\", \"Polys\"];\n          var sectionIndex = 0,\n            numberOfSections = sections.length;\n          while (sectionIndex < numberOfSections) {\n            var section = piece[sections[sectionIndex]];\n            if (section && section.DataArray) {\n              if (Object.prototype.toString.call(section.DataArray) === \"[object Array]\") {\n                var arr = section.DataArray;\n              } else {\n                var arr = [section.DataArray];\n              }\n              var dataArrayIndex = 0,\n                numberOfDataArrays = arr.length;\n              while (dataArrayIndex < numberOfDataArrays) {\n                if (\"#text\" in arr[dataArrayIndex] && arr[dataArrayIndex][\"#text\"].length > 0) {\n                  arr[dataArrayIndex].text = parseDataArray(arr[dataArrayIndex], compressed);\n                }\n                dataArrayIndex++;\n              }\n              switch (sections[sectionIndex]) {\n                case \"PointData\":\n                  var numberOfPoints = parseInt(piece.attributes.NumberOfPoints);\n                  var normalsName = section.attributes.Normals;\n                  if (numberOfPoints > 0) {\n                    for (var i = 0, len = arr.length; i < len; i++) {\n                      if (normalsName === arr[i].attributes.Name) {\n                        var components = arr[i].attributes.NumberOfComponents;\n                        normals = new Float32Array(numberOfPoints * components);\n                        normals.set(arr[i].text, 0);\n                      }\n                    }\n                  }\n                  break;\n                case \"Points\":\n                  var numberOfPoints = parseInt(piece.attributes.NumberOfPoints);\n                  if (numberOfPoints > 0) {\n                    var components = section.DataArray.attributes.NumberOfComponents;\n                    points = new Float32Array(numberOfPoints * components);\n                    points.set(section.DataArray.text, 0);\n                  }\n                  break;\n                case \"Strips\":\n                  var numberOfStrips = parseInt(piece.attributes.NumberOfStrips);\n                  if (numberOfStrips > 0) {\n                    var connectivity = new Int32Array(section.DataArray[0].text.length);\n                    var offset = new Int32Array(section.DataArray[1].text.length);\n                    connectivity.set(section.DataArray[0].text, 0);\n                    offset.set(section.DataArray[1].text, 0);\n                    var size = numberOfStrips + connectivity.length;\n                    indices = new Uint32Array(3 * size - 9 * numberOfStrips);\n                    var indicesIndex = 0;\n                    for (var i = 0, len = numberOfStrips; i < len; i++) {\n                      var strip = [];\n                      for (var s = 0, len1 = offset[i], len0 = 0; s < len1 - len0; s++) {\n                        strip.push(connectivity[s]);\n                        if (i > 0) len0 = offset[i - 1];\n                      }\n                      for (var j = 0, len1 = offset[i], len0 = 0; j < len1 - len0 - 2; j++) {\n                        if (j % 2) {\n                          indices[indicesIndex++] = strip[j];\n                          indices[indicesIndex++] = strip[j + 2];\n                          indices[indicesIndex++] = strip[j + 1];\n                        } else {\n                          indices[indicesIndex++] = strip[j];\n                          indices[indicesIndex++] = strip[j + 1];\n                          indices[indicesIndex++] = strip[j + 2];\n                        }\n                        if (i > 0) len0 = offset[i - 1];\n                      }\n                    }\n                  }\n                  break;\n                case \"Polys\":\n                  var numberOfPolys = parseInt(piece.attributes.NumberOfPolys);\n                  if (numberOfPolys > 0) {\n                    var connectivity = new Int32Array(section.DataArray[0].text.length);\n                    var offset = new Int32Array(section.DataArray[1].text.length);\n                    connectivity.set(section.DataArray[0].text, 0);\n                    offset.set(section.DataArray[1].text, 0);\n                    var size = numberOfPolys + connectivity.length;\n                    indices = new Uint32Array(3 * size - 9 * numberOfPolys);\n                    var indicesIndex = 0,\n                      connectivityIndex = 0;\n                    var i = 0,\n                      len = numberOfPolys,\n                      len0 = 0;\n                    while (i < len) {\n                      var poly = [];\n                      var s = 0,\n                        len1 = offset[i];\n                      while (s < len1 - len0) {\n                        poly.push(connectivity[connectivityIndex++]);\n                        s++;\n                      }\n                      var j = 1;\n                      while (j < len1 - len0 - 1) {\n                        indices[indicesIndex++] = poly[0];\n                        indices[indicesIndex++] = poly[j];\n                        indices[indicesIndex++] = poly[j + 1];\n                        j++;\n                      }\n                      i++;\n                      len0 = offset[i - 1];\n                    }\n                  }\n                  break;\n                default:\n                  break;\n              }\n            }\n            sectionIndex++;\n          }\n          var geometry = new BufferGeometry();\n          geometry.setIndex(new BufferAttribute(indices, 1));\n          geometry.setAttribute(\"position\", new BufferAttribute(points, 3));\n          if (normals.length === points.length) {\n            geometry.setAttribute(\"normal\", new BufferAttribute(normals, 3));\n          }\n          return geometry;\n        } else {\n          throw new Error(\"Unsupported DATASET type\");\n        }\n      }\n      var meta = LoaderUtils.decodeText(new Uint8Array(data, 0, 250)).split(\"\\n\");\n      if (meta[0].indexOf(\"xml\") !== -1) {\n        return parseXML(LoaderUtils.decodeText(data));\n      } else if (meta[2].includes(\"ASCII\")) {\n        return parseASCII(LoaderUtils.decodeText(data));\n      } else {\n        return parseBinary(data);\n      }\n    }\n  }]);\n  return VTKLoader;\n}(Loader);\nexport { VTKLoader };","map":{"version":3,"names":["Loader","FileLoader","BufferGeometry","Float32BufferAttribute","BufferAttribute","LoaderUtils","unzlibSync","VTKLoader","_Loader","_inherits","_super","_createSuper","manager","_classCallCheck","call","_createClass","key","value","load","url","onLoad","onProgress","onError","scope","loader","setPath","path","setResponseType","setRequestHeader","requestHeader","setWithCredentials","withCredentials","text","parse","e","console","error","itemError","data","parseASCII","data2","indices","positions","colors","normals","result","patWord","pat3Floats","patConnectivity","patPOINTS","patPOLYGONS","patTRIANGLE_STRIPS","patPOINT_DATA","patCELL_DATA","patCOLOR_SCALARS","patNORMALS","inPointsSection","inPolygonsSection","inTriangleStripSection","inPointDataSection","inCellDataSection","inColorSection","inNormalsSection","lines","split","i","line","trim","indexOf","dataset","Error","exec","x","parseFloat","y","z","push","numVertices","parseInt","inds","i0","i1","i2","k","j","r","g","b","nx","ny","nz","geometry","setIndex","setAttribute","length","toNonIndexed","numTriangles","attributes","position","count","newColors","parseBinary","pointIndex","numberOfPoints","s","buffer","Uint8Array","dataView","DataView","points","vtk","index","findString","buffer2","start","index2","c","s2","String","fromCharCode","end","next","parsedString","join","state","Float32Array","getFloat32","numberOfStrips","size","Uint32Array","indicesIndex","indexCount","getInt32","strip","byteLength","Float32Concat","first","second","firstLength","set","Int32Concat","Int32Array","parseXML","stringFile","xmlToJson","xml","obj","nodeType","j2","attribute","item","nodeName","nodeValue","hasChildNodes","childNodes","tmp","old","Base64toByteArray","b64","Arr","Array","lookup","revLookup","code","len2","charCodeAt","l","placeHolders","arr2","L","parseDataArray","ele","compressed2","numBytes","json","header_type","format","rawData","content","byteData","blocks","cSizeStart","headerSize","padding","dataOffsets","currentOffset","type","txt","currentBlockSize","slice","filter","el","idx","dom","window","DOMParser","parseFromString","ActiveXObject","async","loadXML","parseError","reason","srcText","doc","documentElement","PolyData","piece","Piece","compressed","hasOwnProperty","sections","sectionIndex","numberOfSections","section","DataArray","Object","prototype","toString","arr","dataArrayIndex","numberOfDataArrays","NumberOfPoints","normalsName","Normals","len","Name","components","NumberOfComponents","NumberOfStrips","connectivity","offset","len1","len0","numberOfPolys","NumberOfPolys","connectivityIndex","poly","meta","decodeText","includes"],"sources":["/home/krug/Coding/JavaScript/Websites/Personal/personal/node_modules/.pnpm/three-stdlib@2.23.7_three@0.151.3/node_modules/three-stdlib/loaders/VTKLoader.js"],"sourcesContent":["import { Loader, FileLoader, BufferGeometry, Float32BufferAttribute, BufferAttribute, LoaderUtils } from \"three\";\nimport { unzlibSync } from \"fflate\";\nclass VTKLoader extends Loader {\n  constructor(manager) {\n    super(manager);\n  }\n  load(url, onLoad, onProgress, onError) {\n    const scope = this;\n    const loader = new FileLoader(scope.manager);\n    loader.setPath(scope.path);\n    loader.setResponseType(\"arraybuffer\");\n    loader.setRequestHeader(scope.requestHeader);\n    loader.setWithCredentials(scope.withCredentials);\n    loader.load(\n      url,\n      function(text) {\n        try {\n          onLoad(scope.parse(text));\n        } catch (e) {\n          if (onError) {\n            onError(e);\n          } else {\n            console.error(e);\n          }\n          scope.manager.itemError(url);\n        }\n      },\n      onProgress,\n      onError\n    );\n  }\n  parse(data) {\n    function parseASCII(data2) {\n      var indices = [];\n      var positions = [];\n      var colors = [];\n      var normals = [];\n      var result;\n      var patWord = /^[^\\d.\\s-]+/;\n      var pat3Floats = /(\\-?\\d+\\.?[\\d\\-\\+e]*)\\s+(\\-?\\d+\\.?[\\d\\-\\+e]*)\\s+(\\-?\\d+\\.?[\\d\\-\\+e]*)/g;\n      var patConnectivity = /^(\\d+)\\s+([\\s\\d]*)/;\n      var patPOINTS = /^POINTS /;\n      var patPOLYGONS = /^POLYGONS /;\n      var patTRIANGLE_STRIPS = /^TRIANGLE_STRIPS /;\n      var patPOINT_DATA = /^POINT_DATA[ ]+(\\d+)/;\n      var patCELL_DATA = /^CELL_DATA[ ]+(\\d+)/;\n      var patCOLOR_SCALARS = /^COLOR_SCALARS[ ]+(\\w+)[ ]+3/;\n      var patNORMALS = /^NORMALS[ ]+(\\w+)[ ]+(\\w+)/;\n      var inPointsSection = false;\n      var inPolygonsSection = false;\n      var inTriangleStripSection = false;\n      var inPointDataSection = false;\n      var inCellDataSection = false;\n      var inColorSection = false;\n      var inNormalsSection = false;\n      var lines = data2.split(\"\\n\");\n      for (var i in lines) {\n        var line = lines[i].trim();\n        if (line.indexOf(\"DATASET\") === 0) {\n          var dataset = line.split(\" \")[1];\n          if (dataset !== \"POLYDATA\")\n            throw new Error(\"Unsupported DATASET type: \" + dataset);\n        } else if (inPointsSection) {\n          while ((result = pat3Floats.exec(line)) !== null) {\n            if (patWord.exec(line) !== null)\n              break;\n            var x = parseFloat(result[1]);\n            var y = parseFloat(result[2]);\n            var z = parseFloat(result[3]);\n            positions.push(x, y, z);\n          }\n        } else if (inPolygonsSection) {\n          if ((result = patConnectivity.exec(line)) !== null) {\n            var numVertices = parseInt(result[1]);\n            var inds = result[2].split(/\\s+/);\n            if (numVertices >= 3) {\n              var i0 = parseInt(inds[0]);\n              var i1, i2;\n              var k = 1;\n              for (var j = 0; j < numVertices - 2; ++j) {\n                i1 = parseInt(inds[k]);\n                i2 = parseInt(inds[k + 1]);\n                indices.push(i0, i1, i2);\n                k++;\n              }\n            }\n          }\n        } else if (inTriangleStripSection) {\n          if ((result = patConnectivity.exec(line)) !== null) {\n            var numVertices = parseInt(result[1]);\n            var inds = result[2].split(/\\s+/);\n            if (numVertices >= 3) {\n              var i0, i1, i2;\n              for (var j = 0; j < numVertices - 2; j++) {\n                if (j % 2 === 1) {\n                  i0 = parseInt(inds[j]);\n                  i1 = parseInt(inds[j + 2]);\n                  i2 = parseInt(inds[j + 1]);\n                  indices.push(i0, i1, i2);\n                } else {\n                  i0 = parseInt(inds[j]);\n                  i1 = parseInt(inds[j + 1]);\n                  i2 = parseInt(inds[j + 2]);\n                  indices.push(i0, i1, i2);\n                }\n              }\n            }\n          }\n        } else if (inPointDataSection || inCellDataSection) {\n          if (inColorSection) {\n            while ((result = pat3Floats.exec(line)) !== null) {\n              if (patWord.exec(line) !== null)\n                break;\n              var r = parseFloat(result[1]);\n              var g = parseFloat(result[2]);\n              var b = parseFloat(result[3]);\n              colors.push(r, g, b);\n            }\n          } else if (inNormalsSection) {\n            while ((result = pat3Floats.exec(line)) !== null) {\n              if (patWord.exec(line) !== null)\n                break;\n              var nx = parseFloat(result[1]);\n              var ny = parseFloat(result[2]);\n              var nz = parseFloat(result[3]);\n              normals.push(nx, ny, nz);\n            }\n          }\n        }\n        if (patPOLYGONS.exec(line) !== null) {\n          inPolygonsSection = true;\n          inPointsSection = false;\n          inTriangleStripSection = false;\n        } else if (patPOINTS.exec(line) !== null) {\n          inPolygonsSection = false;\n          inPointsSection = true;\n          inTriangleStripSection = false;\n        } else if (patTRIANGLE_STRIPS.exec(line) !== null) {\n          inPolygonsSection = false;\n          inPointsSection = false;\n          inTriangleStripSection = true;\n        } else if (patPOINT_DATA.exec(line) !== null) {\n          inPointDataSection = true;\n          inPointsSection = false;\n          inPolygonsSection = false;\n          inTriangleStripSection = false;\n        } else if (patCELL_DATA.exec(line) !== null) {\n          inCellDataSection = true;\n          inPointsSection = false;\n          inPolygonsSection = false;\n          inTriangleStripSection = false;\n        } else if (patCOLOR_SCALARS.exec(line) !== null) {\n          inColorSection = true;\n          inNormalsSection = false;\n          inPointsSection = false;\n          inPolygonsSection = false;\n          inTriangleStripSection = false;\n        } else if (patNORMALS.exec(line) !== null) {\n          inNormalsSection = true;\n          inColorSection = false;\n          inPointsSection = false;\n          inPolygonsSection = false;\n          inTriangleStripSection = false;\n        }\n      }\n      var geometry = new BufferGeometry();\n      geometry.setIndex(indices);\n      geometry.setAttribute(\"position\", new Float32BufferAttribute(positions, 3));\n      if (normals.length === positions.length) {\n        geometry.setAttribute(\"normal\", new Float32BufferAttribute(normals, 3));\n      }\n      if (colors.length !== indices.length) {\n        if (colors.length === positions.length) {\n          geometry.setAttribute(\"color\", new Float32BufferAttribute(colors, 3));\n        }\n      } else {\n        geometry = geometry.toNonIndexed();\n        var numTriangles = geometry.attributes.position.count / 3;\n        if (colors.length === numTriangles * 3) {\n          var newColors = [];\n          for (var i = 0; i < numTriangles; i++) {\n            var r = colors[3 * i + 0];\n            var g = colors[3 * i + 1];\n            var b = colors[3 * i + 2];\n            newColors.push(r, g, b);\n            newColors.push(r, g, b);\n            newColors.push(r, g, b);\n          }\n          geometry.setAttribute(\"color\", new Float32BufferAttribute(newColors, 3));\n        }\n      }\n      return geometry;\n    }\n    function parseBinary(data2) {\n      var count, pointIndex, i, numberOfPoints, s;\n      var buffer = new Uint8Array(data2);\n      var dataView = new DataView(data2);\n      var points = [];\n      var normals = [];\n      var indices = [];\n      var vtk = [];\n      var index = 0;\n      function findString(buffer2, start) {\n        var index2 = start;\n        var c = buffer2[index2];\n        var s2 = [];\n        while (c !== 10) {\n          s2.push(String.fromCharCode(c));\n          index2++;\n          c = buffer2[index2];\n        }\n        return { start, end: index2, next: index2 + 1, parsedString: s2.join(\"\") };\n      }\n      var state, line;\n      while (true) {\n        state = findString(buffer, index);\n        line = state.parsedString;\n        if (line.indexOf(\"DATASET\") === 0) {\n          var dataset = line.split(\" \")[1];\n          if (dataset !== \"POLYDATA\")\n            throw new Error(\"Unsupported DATASET type: \" + dataset);\n        } else if (line.indexOf(\"POINTS\") === 0) {\n          vtk.push(line);\n          numberOfPoints = parseInt(line.split(\" \")[1], 10);\n          count = numberOfPoints * 4 * 3;\n          points = new Float32Array(numberOfPoints * 3);\n          pointIndex = state.next;\n          for (i = 0; i < numberOfPoints; i++) {\n            points[3 * i] = dataView.getFloat32(pointIndex, false);\n            points[3 * i + 1] = dataView.getFloat32(pointIndex + 4, false);\n            points[3 * i + 2] = dataView.getFloat32(pointIndex + 8, false);\n            pointIndex = pointIndex + 12;\n          }\n          state.next = state.next + count + 1;\n        } else if (line.indexOf(\"TRIANGLE_STRIPS\") === 0) {\n          var numberOfStrips = parseInt(line.split(\" \")[1], 10);\n          var size = parseInt(line.split(\" \")[2], 10);\n          count = size * 4;\n          indices = new Uint32Array(3 * size - 9 * numberOfStrips);\n          var indicesIndex = 0;\n          pointIndex = state.next;\n          for (i = 0; i < numberOfStrips; i++) {\n            var indexCount = dataView.getInt32(pointIndex, false);\n            var strip = [];\n            pointIndex += 4;\n            for (s = 0; s < indexCount; s++) {\n              strip.push(dataView.getInt32(pointIndex, false));\n              pointIndex += 4;\n            }\n            for (var j = 0; j < indexCount - 2; j++) {\n              if (j % 2) {\n                indices[indicesIndex++] = strip[j];\n                indices[indicesIndex++] = strip[j + 2];\n                indices[indicesIndex++] = strip[j + 1];\n              } else {\n                indices[indicesIndex++] = strip[j];\n                indices[indicesIndex++] = strip[j + 1];\n                indices[indicesIndex++] = strip[j + 2];\n              }\n            }\n          }\n          state.next = state.next + count + 1;\n        } else if (line.indexOf(\"POLYGONS\") === 0) {\n          var numberOfStrips = parseInt(line.split(\" \")[1], 10);\n          var size = parseInt(line.split(\" \")[2], 10);\n          count = size * 4;\n          indices = new Uint32Array(3 * size - 9 * numberOfStrips);\n          var indicesIndex = 0;\n          pointIndex = state.next;\n          for (i = 0; i < numberOfStrips; i++) {\n            var indexCount = dataView.getInt32(pointIndex, false);\n            var strip = [];\n            pointIndex += 4;\n            for (s = 0; s < indexCount; s++) {\n              strip.push(dataView.getInt32(pointIndex, false));\n              pointIndex += 4;\n            }\n            for (var j = 1; j < indexCount - 1; j++) {\n              indices[indicesIndex++] = strip[0];\n              indices[indicesIndex++] = strip[j];\n              indices[indicesIndex++] = strip[j + 1];\n            }\n          }\n          state.next = state.next + count + 1;\n        } else if (line.indexOf(\"POINT_DATA\") === 0) {\n          numberOfPoints = parseInt(line.split(\" \")[1], 10);\n          state = findString(buffer, state.next);\n          count = numberOfPoints * 4 * 3;\n          normals = new Float32Array(numberOfPoints * 3);\n          pointIndex = state.next;\n          for (i = 0; i < numberOfPoints; i++) {\n            normals[3 * i] = dataView.getFloat32(pointIndex, false);\n            normals[3 * i + 1] = dataView.getFloat32(pointIndex + 4, false);\n            normals[3 * i + 2] = dataView.getFloat32(pointIndex + 8, false);\n            pointIndex += 12;\n          }\n          state.next = state.next + count;\n        }\n        index = state.next;\n        if (index >= buffer.byteLength) {\n          break;\n        }\n      }\n      var geometry = new BufferGeometry();\n      geometry.setIndex(new BufferAttribute(indices, 1));\n      geometry.setAttribute(\"position\", new BufferAttribute(points, 3));\n      if (normals.length === points.length) {\n        geometry.setAttribute(\"normal\", new BufferAttribute(normals, 3));\n      }\n      return geometry;\n    }\n    function Float32Concat(first, second) {\n      const firstLength = first.length, result = new Float32Array(firstLength + second.length);\n      result.set(first);\n      result.set(second, firstLength);\n      return result;\n    }\n    function Int32Concat(first, second) {\n      var firstLength = first.length, result = new Int32Array(firstLength + second.length);\n      result.set(first);\n      result.set(second, firstLength);\n      return result;\n    }\n    function parseXML(stringFile) {\n      function xmlToJson(xml) {\n        var obj = {};\n        if (xml.nodeType === 1) {\n          if (xml.attributes) {\n            if (xml.attributes.length > 0) {\n              obj[\"attributes\"] = {};\n              for (var j2 = 0; j2 < xml.attributes.length; j2++) {\n                var attribute = xml.attributes.item(j2);\n                obj[\"attributes\"][attribute.nodeName] = attribute.nodeValue.trim();\n              }\n            }\n          }\n        } else if (xml.nodeType === 3) {\n          obj = xml.nodeValue.trim();\n        }\n        if (xml.hasChildNodes()) {\n          for (var i2 = 0; i2 < xml.childNodes.length; i2++) {\n            var item = xml.childNodes.item(i2);\n            var nodeName = item.nodeName;\n            if (typeof obj[nodeName] === \"undefined\") {\n              var tmp = xmlToJson(item);\n              if (tmp !== \"\")\n                obj[nodeName] = tmp;\n            } else {\n              if (typeof obj[nodeName].push === \"undefined\") {\n                var old = obj[nodeName];\n                obj[nodeName] = [old];\n              }\n              var tmp = xmlToJson(item);\n              if (tmp !== \"\")\n                obj[nodeName].push(tmp);\n            }\n          }\n        }\n        return obj;\n      }\n      function Base64toByteArray(b64) {\n        var Arr = typeof Uint8Array !== \"undefined\" ? Uint8Array : Array;\n        var i2;\n        var lookup = [];\n        var revLookup = [];\n        var code = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\";\n        var len2 = code.length;\n        for (i2 = 0; i2 < len2; i2++) {\n          lookup[i2] = code[i2];\n        }\n        for (i2 = 0; i2 < len2; ++i2) {\n          revLookup[code.charCodeAt(i2)] = i2;\n        }\n        revLookup[\"-\".charCodeAt(0)] = 62;\n        revLookup[\"_\".charCodeAt(0)] = 63;\n        var j2, l, tmp, placeHolders, arr2;\n        var len2 = b64.length;\n        if (len2 % 4 > 0) {\n          throw new Error(\"Invalid string. Length must be a multiple of 4\");\n        }\n        placeHolders = b64[len2 - 2] === \"=\" ? 2 : b64[len2 - 1] === \"=\" ? 1 : 0;\n        arr2 = new Arr(len2 * 3 / 4 - placeHolders);\n        l = placeHolders > 0 ? len2 - 4 : len2;\n        var L = 0;\n        for (i2 = 0, j2 = 0; i2 < l; i2 += 4, j2 += 3) {\n          tmp = revLookup[b64.charCodeAt(i2)] << 18 | revLookup[b64.charCodeAt(i2 + 1)] << 12 | revLookup[b64.charCodeAt(i2 + 2)] << 6 | revLookup[b64.charCodeAt(i2 + 3)];\n          arr2[L++] = (tmp & 16711680) >> 16;\n          arr2[L++] = (tmp & 65280) >> 8;\n          arr2[L++] = tmp & 255;\n        }\n        if (placeHolders === 2) {\n          tmp = revLookup[b64.charCodeAt(i2)] << 2 | revLookup[b64.charCodeAt(i2 + 1)] >> 4;\n          arr2[L++] = tmp & 255;\n        } else if (placeHolders === 1) {\n          tmp = revLookup[b64.charCodeAt(i2)] << 10 | revLookup[b64.charCodeAt(i2 + 1)] << 4 | revLookup[b64.charCodeAt(i2 + 2)] >> 2;\n          arr2[L++] = tmp >> 8 & 255;\n          arr2[L++] = tmp & 255;\n        }\n        return arr2;\n      }\n      function parseDataArray(ele, compressed2) {\n        var numBytes = 0;\n        if (json.attributes.header_type === \"UInt64\") {\n          numBytes = 8;\n        } else if (json.attributes.header_type === \"UInt32\") {\n          numBytes = 4;\n        }\n        if (ele.attributes.format === \"binary\" && compressed2) {\n          var rawData, content, byteData, blocks, cSizeStart, headerSize, padding, dataOffsets, currentOffset;\n          if (ele.attributes.type === \"Float32\") {\n            var txt = new Float32Array();\n          } else if (ele.attributes.type === \"Int64\") {\n            var txt = new Int32Array();\n          }\n          rawData = ele[\"#text\"];\n          byteData = Base64toByteArray(rawData);\n          blocks = byteData[0];\n          for (var i2 = 1; i2 < numBytes - 1; i2++) {\n            blocks = blocks | byteData[i2] << i2 * numBytes;\n          }\n          headerSize = (blocks + 3) * numBytes;\n          padding = headerSize % 3 > 0 ? 3 - headerSize % 3 : 0;\n          headerSize = headerSize + padding;\n          dataOffsets = [];\n          currentOffset = headerSize;\n          dataOffsets.push(currentOffset);\n          cSizeStart = 3 * numBytes;\n          for (var i2 = 0; i2 < blocks; i2++) {\n            var currentBlockSize = byteData[i2 * numBytes + cSizeStart];\n            for (var j2 = 1; j2 < numBytes - 1; j2++) {\n              currentBlockSize = currentBlockSize | byteData[i2 * numBytes + cSizeStart + j2] << j2 * 8;\n            }\n            currentOffset = currentOffset + currentBlockSize;\n            dataOffsets.push(currentOffset);\n          }\n          for (var i2 = 0; i2 < dataOffsets.length - 1; i2++) {\n            var data2 = unzlibSync(byteData.slice(dataOffsets[i2], dataOffsets[i2 + 1]));\n            content = data2.buffer;\n            if (ele.attributes.type === \"Float32\") {\n              content = new Float32Array(content);\n              txt = Float32Concat(txt, content);\n            } else if (ele.attributes.type === \"Int64\") {\n              content = new Int32Array(content);\n              txt = Int32Concat(txt, content);\n            }\n          }\n          delete ele[\"#text\"];\n          if (ele.attributes.type === \"Int64\") {\n            if (ele.attributes.format === \"binary\") {\n              txt = txt.filter(function(el, idx) {\n                if (idx % 2 !== 1)\n                  return true;\n              });\n            }\n          }\n        } else {\n          if (ele.attributes.format === \"binary\" && !compressed2) {\n            var content = Base64toByteArray(ele[\"#text\"]);\n            content = content.slice(numBytes).buffer;\n          } else {\n            if (ele[\"#text\"]) {\n              var content = ele[\"#text\"].split(/\\s+/).filter(function(el) {\n                if (el !== \"\")\n                  return el;\n              });\n            } else {\n              var content = new Int32Array(0).buffer;\n            }\n          }\n          delete ele[\"#text\"];\n          if (ele.attributes.type === \"Float32\") {\n            var txt = new Float32Array(content);\n          } else if (ele.attributes.type === \"Int32\") {\n            var txt = new Int32Array(content);\n          } else if (ele.attributes.type === \"Int64\") {\n            var txt = new Int32Array(content);\n            if (ele.attributes.format === \"binary\") {\n              txt = txt.filter(function(el, idx) {\n                if (idx % 2 !== 1)\n                  return true;\n              });\n            }\n          }\n        }\n        return txt;\n      }\n      var dom = null;\n      if (window.DOMParser) {\n        try {\n          dom = new DOMParser().parseFromString(stringFile, \"text/xml\");\n        } catch (e) {\n          dom = null;\n        }\n      } else if (window.ActiveXObject) {\n        try {\n          dom = new ActiveXObject(\"Microsoft.XMLDOM\");\n          dom.async = false;\n          if (!dom.loadXML(\n            /* xml */\n          )) {\n            throw new Error(dom.parseError.reason + dom.parseError.srcText);\n          }\n        } catch (e) {\n          dom = null;\n        }\n      } else {\n        throw new Error(\"Cannot parse xml string!\");\n      }\n      var doc = dom.documentElement;\n      var json = xmlToJson(doc);\n      var points = [];\n      var normals = [];\n      var indices = [];\n      if (json.PolyData) {\n        var piece = json.PolyData.Piece;\n        var compressed = json.attributes.hasOwnProperty(\"compressor\");\n        var sections = [\"PointData\", \"Points\", \"Strips\", \"Polys\"];\n        var sectionIndex = 0, numberOfSections = sections.length;\n        while (sectionIndex < numberOfSections) {\n          var section = piece[sections[sectionIndex]];\n          if (section && section.DataArray) {\n            if (Object.prototype.toString.call(section.DataArray) === \"[object Array]\") {\n              var arr = section.DataArray;\n            } else {\n              var arr = [section.DataArray];\n            }\n            var dataArrayIndex = 0, numberOfDataArrays = arr.length;\n            while (dataArrayIndex < numberOfDataArrays) {\n              if (\"#text\" in arr[dataArrayIndex] && arr[dataArrayIndex][\"#text\"].length > 0) {\n                arr[dataArrayIndex].text = parseDataArray(arr[dataArrayIndex], compressed);\n              }\n              dataArrayIndex++;\n            }\n            switch (sections[sectionIndex]) {\n              case \"PointData\":\n                var numberOfPoints = parseInt(piece.attributes.NumberOfPoints);\n                var normalsName = section.attributes.Normals;\n                if (numberOfPoints > 0) {\n                  for (var i = 0, len = arr.length; i < len; i++) {\n                    if (normalsName === arr[i].attributes.Name) {\n                      var components = arr[i].attributes.NumberOfComponents;\n                      normals = new Float32Array(numberOfPoints * components);\n                      normals.set(arr[i].text, 0);\n                    }\n                  }\n                }\n                break;\n              case \"Points\":\n                var numberOfPoints = parseInt(piece.attributes.NumberOfPoints);\n                if (numberOfPoints > 0) {\n                  var components = section.DataArray.attributes.NumberOfComponents;\n                  points = new Float32Array(numberOfPoints * components);\n                  points.set(section.DataArray.text, 0);\n                }\n                break;\n              case \"Strips\":\n                var numberOfStrips = parseInt(piece.attributes.NumberOfStrips);\n                if (numberOfStrips > 0) {\n                  var connectivity = new Int32Array(section.DataArray[0].text.length);\n                  var offset = new Int32Array(section.DataArray[1].text.length);\n                  connectivity.set(section.DataArray[0].text, 0);\n                  offset.set(section.DataArray[1].text, 0);\n                  var size = numberOfStrips + connectivity.length;\n                  indices = new Uint32Array(3 * size - 9 * numberOfStrips);\n                  var indicesIndex = 0;\n                  for (var i = 0, len = numberOfStrips; i < len; i++) {\n                    var strip = [];\n                    for (var s = 0, len1 = offset[i], len0 = 0; s < len1 - len0; s++) {\n                      strip.push(connectivity[s]);\n                      if (i > 0)\n                        len0 = offset[i - 1];\n                    }\n                    for (var j = 0, len1 = offset[i], len0 = 0; j < len1 - len0 - 2; j++) {\n                      if (j % 2) {\n                        indices[indicesIndex++] = strip[j];\n                        indices[indicesIndex++] = strip[j + 2];\n                        indices[indicesIndex++] = strip[j + 1];\n                      } else {\n                        indices[indicesIndex++] = strip[j];\n                        indices[indicesIndex++] = strip[j + 1];\n                        indices[indicesIndex++] = strip[j + 2];\n                      }\n                      if (i > 0)\n                        len0 = offset[i - 1];\n                    }\n                  }\n                }\n                break;\n              case \"Polys\":\n                var numberOfPolys = parseInt(piece.attributes.NumberOfPolys);\n                if (numberOfPolys > 0) {\n                  var connectivity = new Int32Array(section.DataArray[0].text.length);\n                  var offset = new Int32Array(section.DataArray[1].text.length);\n                  connectivity.set(section.DataArray[0].text, 0);\n                  offset.set(section.DataArray[1].text, 0);\n                  var size = numberOfPolys + connectivity.length;\n                  indices = new Uint32Array(3 * size - 9 * numberOfPolys);\n                  var indicesIndex = 0, connectivityIndex = 0;\n                  var i = 0, len = numberOfPolys, len0 = 0;\n                  while (i < len) {\n                    var poly = [];\n                    var s = 0, len1 = offset[i];\n                    while (s < len1 - len0) {\n                      poly.push(connectivity[connectivityIndex++]);\n                      s++;\n                    }\n                    var j = 1;\n                    while (j < len1 - len0 - 1) {\n                      indices[indicesIndex++] = poly[0];\n                      indices[indicesIndex++] = poly[j];\n                      indices[indicesIndex++] = poly[j + 1];\n                      j++;\n                    }\n                    i++;\n                    len0 = offset[i - 1];\n                  }\n                }\n                break;\n              default:\n                break;\n            }\n          }\n          sectionIndex++;\n        }\n        var geometry = new BufferGeometry();\n        geometry.setIndex(new BufferAttribute(indices, 1));\n        geometry.setAttribute(\"position\", new BufferAttribute(points, 3));\n        if (normals.length === points.length) {\n          geometry.setAttribute(\"normal\", new BufferAttribute(normals, 3));\n        }\n        return geometry;\n      } else {\n        throw new Error(\"Unsupported DATASET type\");\n      }\n    }\n    var meta = LoaderUtils.decodeText(new Uint8Array(data, 0, 250)).split(\"\\n\");\n    if (meta[0].indexOf(\"xml\") !== -1) {\n      return parseXML(LoaderUtils.decodeText(data));\n    } else if (meta[2].includes(\"ASCII\")) {\n      return parseASCII(LoaderUtils.decodeText(data));\n    } else {\n      return parseBinary(data);\n    }\n  }\n}\nexport {\n  VTKLoader\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}