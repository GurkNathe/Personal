{"ast":null,"code":"import { BufferGeometry, Matrix4, Vector3, Vector4, BufferAttribute } from \"three\";\nclass TeapotGeometry extends BufferGeometry {\n  constructor(size, segments, bottom, lid, body, fitLid, blinn) {\n    const teapotPatches = [/*rim*/\n    0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 3, 16, 17, 18, 7, 19, 20, 21, 11, 22, 23, 24, 15, 25, 26, 27, 18, 28, 29, 30, 21, 31, 32, 33, 24, 34, 35, 36, 27, 37, 38, 39, 30, 40, 41, 0, 33, 42, 43, 4, 36, 44, 45, 8, 39, 46, 47, 12, /*body*/\n    12, 13, 14, 15, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 15, 25, 26, 27, 51, 60, 61, 62, 55, 63, 64, 65, 59, 66, 67, 68, 27, 37, 38, 39, 62, 69, 70, 71, 65, 72, 73, 74, 68, 75, 76, 77, 39, 46, 47, 12, 71, 78, 79, 48, 74, 80, 81, 52, 77, 82, 83, 56, 56, 57, 58, 59, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 59, 66, 67, 68, 87, 96, 97, 98, 91, 99, 100, 101, 95, 102, 103, 104, 68, 75, 76, 77, 98, 105, 106, 107, 101, 108, 109, 110, 104, 111, 112, 113, 77, 82, 83, 56, 107, 114, 115, 84, 110, 116, 117, 88, 113, 118, 119, 92, /*handle*/\n    120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 123, 136, 137, 120, 127, 138, 139, 124, 131, 140, 141, 128, 135, 142, 143, 132, 132, 133, 134, 135, 144, 145, 146, 147, 148, 149, 150, 151, 68, 152, 153, 154, 135, 142, 143, 132, 147, 155, 156, 144, 151, 157, 158, 148, 154, 159, 160, 68, /*spout*/\n    161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 164, 177, 178, 161, 168, 179, 180, 165, 172, 181, 182, 169, 176, 183, 184, 173, 173, 174, 175, 176, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 176, 183, 184, 173, 188, 197, 198, 185, 192, 199, 200, 189, 196, 201, 202, 193, /*lid*/\n    203, 203, 203, 203, 204, 205, 206, 207, 208, 208, 208, 208, 209, 210, 211, 212, 203, 203, 203, 203, 207, 213, 214, 215, 208, 208, 208, 208, 212, 216, 217, 218, 203, 203, 203, 203, 215, 219, 220, 221, 208, 208, 208, 208, 218, 222, 223, 224, 203, 203, 203, 203, 221, 225, 226, 204, 208, 208, 208, 208, 224, 227, 228, 209, 209, 210, 211, 212, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 212, 216, 217, 218, 232, 241, 242, 243, 236, 244, 245, 246, 240, 247, 248, 249, 218, 222, 223, 224, 243, 250, 251, 252, 246, 253, 254, 255, 249, 256, 257, 258, 224, 227, 228, 209, 252, 259, 260, 229, 255, 261, 262, 233, 258, 263, 264, 237, /*bottom*/\n    265, 265, 265, 265, 266, 267, 268, 269, 270, 271, 272, 273, 92, 119, 118, 113, 265, 265, 265, 265, 269, 274, 275, 276, 273, 277, 278, 279, 113, 112, 111, 104, 265, 265, 265, 265, 276, 280, 281, 282, 279, 283, 284, 285, 104, 103, 102, 95, 265, 265, 265, 265, 282, 286, 287, 266, 285, 288, 289, 270, 95, 94, 93, 92];\n    const teapotVertices = [1.4, 0, 2.4, 1.4, -0.784, 2.4, 0.784, -1.4, 2.4, 0, -1.4, 2.4, 1.3375, 0, 2.53125, 1.3375, -0.749, 2.53125, 0.749, -1.3375, 2.53125, 0, -1.3375, 2.53125, 1.4375, 0, 2.53125, 1.4375, -0.805, 2.53125, 0.805, -1.4375, 2.53125, 0, -1.4375, 2.53125, 1.5, 0, 2.4, 1.5, -0.84, 2.4, 0.84, -1.5, 2.4, 0, -1.5, 2.4, -0.784, -1.4, 2.4, -1.4, -0.784, 2.4, -1.4, 0, 2.4, -0.749, -1.3375, 2.53125, -1.3375, -0.749, 2.53125, -1.3375, 0, 2.53125, -0.805, -1.4375, 2.53125, -1.4375, -0.805, 2.53125, -1.4375, 0, 2.53125, -0.84, -1.5, 2.4, -1.5, -0.84, 2.4, -1.5, 0, 2.4, -1.4, 0.784, 2.4, -0.784, 1.4, 2.4, 0, 1.4, 2.4, -1.3375, 0.749, 2.53125, -0.749, 1.3375, 2.53125, 0, 1.3375, 2.53125, -1.4375, 0.805, 2.53125, -0.805, 1.4375, 2.53125, 0, 1.4375, 2.53125, -1.5, 0.84, 2.4, -0.84, 1.5, 2.4, 0, 1.5, 2.4, 0.784, 1.4, 2.4, 1.4, 0.784, 2.4, 0.749, 1.3375, 2.53125, 1.3375, 0.749, 2.53125, 0.805, 1.4375, 2.53125, 1.4375, 0.805, 2.53125, 0.84, 1.5, 2.4, 1.5, 0.84, 2.4, 1.75, 0, 1.875, 1.75, -0.98, 1.875, 0.98, -1.75, 1.875, 0, -1.75, 1.875, 2, 0, 1.35, 2, -1.12, 1.35, 1.12, -2, 1.35, 0, -2, 1.35, 2, 0, 0.9, 2, -1.12, 0.9, 1.12, -2, 0.9, 0, -2, 0.9, -0.98, -1.75, 1.875, -1.75, -0.98, 1.875, -1.75, 0, 1.875, -1.12, -2, 1.35, -2, -1.12, 1.35, -2, 0, 1.35, -1.12, -2, 0.9, -2, -1.12, 0.9, -2, 0, 0.9, -1.75, 0.98, 1.875, -0.98, 1.75, 1.875, 0, 1.75, 1.875, -2, 1.12, 1.35, -1.12, 2, 1.35, 0, 2, 1.35, -2, 1.12, 0.9, -1.12, 2, 0.9, 0, 2, 0.9, 0.98, 1.75, 1.875, 1.75, 0.98, 1.875, 1.12, 2, 1.35, 2, 1.12, 1.35, 1.12, 2, 0.9, 2, 1.12, 0.9, 2, 0, 0.45, 2, -1.12, 0.45, 1.12, -2, 0.45, 0, -2, 0.45, 1.5, 0, 0.225, 1.5, -0.84, 0.225, 0.84, -1.5, 0.225, 0, -1.5, 0.225, 1.5, 0, 0.15, 1.5, -0.84, 0.15, 0.84, -1.5, 0.15, 0, -1.5, 0.15, -1.12, -2, 0.45, -2, -1.12, 0.45, -2, 0, 0.45, -0.84, -1.5, 0.225, -1.5, -0.84, 0.225, -1.5, 0, 0.225, -0.84, -1.5, 0.15, -1.5, -0.84, 0.15, -1.5, 0, 0.15, -2, 1.12, 0.45, -1.12, 2, 0.45, 0, 2, 0.45, -1.5, 0.84, 0.225, -0.84, 1.5, 0.225, 0, 1.5, 0.225, -1.5, 0.84, 0.15, -0.84, 1.5, 0.15, 0, 1.5, 0.15, 1.12, 2, 0.45, 2, 1.12, 0.45, 0.84, 1.5, 0.225, 1.5, 0.84, 0.225, 0.84, 1.5, 0.15, 1.5, 0.84, 0.15, -1.6, 0, 2.025, -1.6, -0.3, 2.025, -1.5, -0.3, 2.25, -1.5, 0, 2.25, -2.3, 0, 2.025, -2.3, -0.3, 2.025, -2.5, -0.3, 2.25, -2.5, 0, 2.25, -2.7, 0, 2.025, -2.7, -0.3, 2.025, -3, -0.3, 2.25, -3, 0, 2.25, -2.7, 0, 1.8, -2.7, -0.3, 1.8, -3, -0.3, 1.8, -3, 0, 1.8, -1.5, 0.3, 2.25, -1.6, 0.3, 2.025, -2.5, 0.3, 2.25, -2.3, 0.3, 2.025, -3, 0.3, 2.25, -2.7, 0.3, 2.025, -3, 0.3, 1.8, -2.7, 0.3, 1.8, -2.7, 0, 1.575, -2.7, -0.3, 1.575, -3, -0.3, 1.35, -3, 0, 1.35, -2.5, 0, 1.125, -2.5, -0.3, 1.125, -2.65, -0.3, 0.9375, -2.65, 0, 0.9375, -2, -0.3, 0.9, -1.9, -0.3, 0.6, -1.9, 0, 0.6, -3, 0.3, 1.35, -2.7, 0.3, 1.575, -2.65, 0.3, 0.9375, -2.5, 0.3, 1.125, -1.9, 0.3, 0.6, -2, 0.3, 0.9, 1.7, 0, 1.425, 1.7, -0.66, 1.425, 1.7, -0.66, 0.6, 1.7, 0, 0.6, 2.6, 0, 1.425, 2.6, -0.66, 1.425, 3.1, -0.66, 0.825, 3.1, 0, 0.825, 2.3, 0, 2.1, 2.3, -0.25, 2.1, 2.4, -0.25, 2.025, 2.4, 0, 2.025, 2.7, 0, 2.4, 2.7, -0.25, 2.4, 3.3, -0.25, 2.4, 3.3, 0, 2.4, 1.7, 0.66, 0.6, 1.7, 0.66, 1.425, 3.1, 0.66, 0.825, 2.6, 0.66, 1.425, 2.4, 0.25, 2.025, 2.3, 0.25, 2.1, 3.3, 0.25, 2.4, 2.7, 0.25, 2.4, 2.8, 0, 2.475, 2.8, -0.25, 2.475, 3.525, -0.25, 2.49375, 3.525, 0, 2.49375, 2.9, 0, 2.475, 2.9, -0.15, 2.475, 3.45, -0.15, 2.5125, 3.45, 0, 2.5125, 2.8, 0, 2.4, 2.8, -0.15, 2.4, 3.2, -0.15, 2.4, 3.2, 0, 2.4, 3.525, 0.25, 2.49375, 2.8, 0.25, 2.475, 3.45, 0.15, 2.5125, 2.9, 0.15, 2.475, 3.2, 0.15, 2.4, 2.8, 0.15, 2.4, 0, 0, 3.15, 0.8, 0, 3.15, 0.8, -0.45, 3.15, 0.45, -0.8, 3.15, 0, -0.8, 3.15, 0, 0, 2.85, 0.2, 0, 2.7, 0.2, -0.112, 2.7, 0.112, -0.2, 2.7, 0, -0.2, 2.7, -0.45, -0.8, 3.15, -0.8, -0.45, 3.15, -0.8, 0, 3.15, -0.112, -0.2, 2.7, -0.2, -0.112, 2.7, -0.2, 0, 2.7, -0.8, 0.45, 3.15, -0.45, 0.8, 3.15, 0, 0.8, 3.15, -0.2, 0.112, 2.7, -0.112, 0.2, 2.7, 0, 0.2, 2.7, 0.45, 0.8, 3.15, 0.8, 0.45, 3.15, 0.112, 0.2, 2.7, 0.2, 0.112, 2.7, 0.4, 0, 2.55, 0.4, -0.224, 2.55, 0.224, -0.4, 2.55, 0, -0.4, 2.55, 1.3, 0, 2.55, 1.3, -0.728, 2.55, 0.728, -1.3, 2.55, 0, -1.3, 2.55, 1.3, 0, 2.4, 1.3, -0.728, 2.4, 0.728, -1.3, 2.4, 0, -1.3, 2.4, -0.224, -0.4, 2.55, -0.4, -0.224, 2.55, -0.4, 0, 2.55, -0.728, -1.3, 2.55, -1.3, -0.728, 2.55, -1.3, 0, 2.55, -0.728, -1.3, 2.4, -1.3, -0.728, 2.4, -1.3, 0, 2.4, -0.4, 0.224, 2.55, -0.224, 0.4, 2.55, 0, 0.4, 2.55, -1.3, 0.728, 2.55, -0.728, 1.3, 2.55, 0, 1.3, 2.55, -1.3, 0.728, 2.4, -0.728, 1.3, 2.4, 0, 1.3, 2.4, 0.224, 0.4, 2.55, 0.4, 0.224, 2.55, 0.728, 1.3, 2.55, 1.3, 0.728, 2.55, 0.728, 1.3, 2.4, 1.3, 0.728, 2.4, 0, 0, 0, 1.425, 0, 0, 1.425, 0.798, 0, 0.798, 1.425, 0, 0, 1.425, 0, 1.5, 0, 0.075, 1.5, 0.84, 0.075, 0.84, 1.5, 0.075, 0, 1.5, 0.075, -0.798, 1.425, 0, -1.425, 0.798, 0, -1.425, 0, 0, -0.84, 1.5, 0.075, -1.5, 0.84, 0.075, -1.5, 0, 0.075, -1.425, -0.798, 0, -0.798, -1.425, 0, 0, -1.425, 0, -1.5, -0.84, 0.075, -0.84, -1.5, 0.075, 0, -1.5, 0.075, 0.798, -1.425, 0, 1.425, -0.798, 0, 0.84, -1.5, 0.075, 1.5, -0.84, 0.075];\n    super();\n    size = size || 50;\n    segments = segments !== void 0 ? Math.max(2, Math.floor(segments) || 10) : 10;\n    bottom = bottom === void 0 ? true : bottom;\n    lid = lid === void 0 ? true : lid;\n    body = body === void 0 ? true : body;\n    fitLid = fitLid === void 0 ? true : fitLid;\n    const blinnScale = 1.3;\n    blinn = blinn === void 0 ? true : blinn;\n    const maxHeight = 3.15 * (blinn ? 1 : blinnScale);\n    const maxHeight2 = maxHeight / 2;\n    const trueSize = size / maxHeight2;\n    let numTriangles = bottom ? (8 * segments - 4) * segments : 0;\n    numTriangles += lid ? (16 * segments - 4) * segments : 0;\n    numTriangles += body ? 40 * segments * segments : 0;\n    const indices = new Uint32Array(numTriangles * 3);\n    let numVertices = bottom ? 4 : 0;\n    numVertices += lid ? 8 : 0;\n    numVertices += body ? 20 : 0;\n    numVertices *= (segments + 1) * (segments + 1);\n    const vertices = new Float32Array(numVertices * 3);\n    const normals = new Float32Array(numVertices * 3);\n    const uvs = new Float32Array(numVertices * 2);\n    const ms = new Matrix4();\n    ms.set(-1, 3, -3, 1, 3, -6, 3, 0, -3, 3, 0, 0, 1, 0, 0, 0);\n    const g = [];\n    let i, r, c;\n    const sp = [];\n    const tp = [];\n    const dsp = [];\n    const dtp = [];\n    const mgm = [];\n    const vert = [];\n    const sdir = [];\n    const tdir = [];\n    const norm = new Vector3();\n    let tcoord;\n    let sstep, tstep;\n    let vertPerRow;\n    let s, t, sval, tval, p;\n    let dsval = 0;\n    let dtval = 0;\n    const normOut = new Vector3();\n    let v1, v2, v3, v4;\n    const gmx = new Matrix4();\n    const tmtx = new Matrix4();\n    const vsp = new Vector4();\n    const vtp = new Vector4();\n    const vdsp = new Vector4();\n    const vdtp = new Vector4();\n    const vsdir = new Vector3();\n    const vtdir = new Vector3();\n    const mst = ms.clone();\n    mst.transpose();\n    const notDegenerate = (vtx1, vtx2, vtx3) => !(vertices[vtx1 * 3] === vertices[vtx2 * 3] && vertices[vtx1 * 3 + 1] === vertices[vtx2 * 3 + 1] && vertices[vtx1 * 3 + 2] === vertices[vtx2 * 3 + 2] || vertices[vtx1 * 3] === vertices[vtx3 * 3] && vertices[vtx1 * 3 + 1] === vertices[vtx3 * 3 + 1] && vertices[vtx1 * 3 + 2] === vertices[vtx3 * 3 + 2] || vertices[vtx2 * 3] === vertices[vtx3 * 3] && vertices[vtx2 * 3 + 1] === vertices[vtx3 * 3 + 1] && vertices[vtx2 * 3 + 2] === vertices[vtx3 * 3 + 2]);\n    for (i = 0; i < 3; i++) {\n      mgm[i] = new Matrix4();\n    }\n    const minPatches = body ? 0 : 20;\n    const maxPatches = bottom ? 32 : 28;\n    vertPerRow = segments + 1;\n    let surfCount = 0;\n    let vertCount = 0;\n    let normCount = 0;\n    let uvCount = 0;\n    let indexCount = 0;\n    for (let surf = minPatches; surf < maxPatches; surf++) {\n      if (lid || surf < 20 || surf >= 28) {\n        for (i = 0; i < 3; i++) {\n          for (r = 0; r < 4; r++) {\n            for (c = 0; c < 4; c++) {\n              g[c * 4 + r] = teapotVertices[teapotPatches[surf * 16 + r * 4 + c] * 3 + i];\n              if (fitLid && surf >= 20 && surf < 28 && i !== 2) {\n                g[c * 4 + r] *= 1.077;\n              }\n              if (!blinn && i === 2) {\n                g[c * 4 + r] *= blinnScale;\n              }\n            }\n          }\n          gmx.set(g[0], g[1], g[2], g[3], g[4], g[5], g[6], g[7], g[8], g[9], g[10], g[11], g[12], g[13], g[14], g[15]);\n          tmtx.multiplyMatrices(gmx, ms);\n          mgm[i].multiplyMatrices(mst, tmtx);\n        }\n        for (sstep = 0; sstep <= segments; sstep++) {\n          s = sstep / segments;\n          for (tstep = 0; tstep <= segments; tstep++) {\n            t = tstep / segments;\n            for (p = 4, sval = tval = 1; p--;) {\n              sp[p] = sval;\n              tp[p] = tval;\n              sval *= s;\n              tval *= t;\n              if (p === 3) {\n                dsp[p] = dtp[p] = 0;\n                dsval = dtval = 1;\n              } else {\n                dsp[p] = dsval * (3 - p);\n                dtp[p] = dtval * (3 - p);\n                dsval *= s;\n                dtval *= t;\n              }\n            }\n            vsp.fromArray(sp);\n            vtp.fromArray(tp);\n            vdsp.fromArray(dsp);\n            vdtp.fromArray(dtp);\n            for (i = 0; i < 3; i++) {\n              tcoord = vsp.clone();\n              tcoord.applyMatrix4(mgm[i]);\n              vert[i] = tcoord.dot(vtp);\n              tcoord = vdsp.clone();\n              tcoord.applyMatrix4(mgm[i]);\n              sdir[i] = tcoord.dot(vtp);\n              tcoord = vsp.clone();\n              tcoord.applyMatrix4(mgm[i]);\n              tdir[i] = tcoord.dot(vdtp);\n            }\n            vsdir.fromArray(sdir);\n            vtdir.fromArray(tdir);\n            norm.crossVectors(vtdir, vsdir);\n            norm.normalize();\n            if (vert[0] === 0 && vert[1] === 0) {\n              normOut.set(0, vert[2] > maxHeight2 ? 1 : -1, 0);\n            } else {\n              normOut.set(norm.x, norm.z, -norm.y);\n            }\n            vertices[vertCount++] = trueSize * vert[0];\n            vertices[vertCount++] = trueSize * (vert[2] - maxHeight2);\n            vertices[vertCount++] = -trueSize * vert[1];\n            normals[normCount++] = normOut.x;\n            normals[normCount++] = normOut.y;\n            normals[normCount++] = normOut.z;\n            uvs[uvCount++] = 1 - t;\n            uvs[uvCount++] = 1 - s;\n          }\n        }\n        for (sstep = 0; sstep < segments; sstep++) {\n          for (tstep = 0; tstep < segments; tstep++) {\n            v1 = surfCount * vertPerRow * vertPerRow + sstep * vertPerRow + tstep;\n            v2 = v1 + 1;\n            v3 = v2 + vertPerRow;\n            v4 = v1 + vertPerRow;\n            if (notDegenerate(v1, v2, v3)) {\n              indices[indexCount++] = v1;\n              indices[indexCount++] = v2;\n              indices[indexCount++] = v3;\n            }\n            if (notDegenerate(v1, v3, v4)) {\n              indices[indexCount++] = v1;\n              indices[indexCount++] = v3;\n              indices[indexCount++] = v4;\n            }\n          }\n        }\n        surfCount++;\n      }\n    }\n    this.setIndex(new BufferAttribute(indices, 1));\n    this.setAttribute(\"position\", new BufferAttribute(vertices, 3));\n    this.setAttribute(\"normal\", new BufferAttribute(normals, 3));\n    this.setAttribute(\"uv\", new BufferAttribute(uvs, 2));\n    this.computeBoundingSphere();\n  }\n}\nexport { TeapotGeometry };","map":{"version":3,"names":["BufferGeometry","Matrix4","Vector3","Vector4","BufferAttribute","TeapotGeometry","constructor","size","segments","bottom","lid","body","fitLid","blinn","teapotPatches","teapotVertices","Math","max","floor","blinnScale","maxHeight","maxHeight2","trueSize","numTriangles","indices","Uint32Array","numVertices","vertices","Float32Array","normals","uvs","ms","set","g","i","r","c","sp","tp","dsp","dtp","mgm","vert","sdir","tdir","norm","tcoord","sstep","tstep","vertPerRow","s","t","sval","tval","p","dsval","dtval","normOut","v1","v2","v3","v4","gmx","tmtx","vsp","vtp","vdsp","vdtp","vsdir","vtdir","mst","clone","transpose","notDegenerate","vtx1","vtx2","vtx3","minPatches","maxPatches","surfCount","vertCount","normCount","uvCount","indexCount","surf","multiplyMatrices","fromArray","applyMatrix4","dot","crossVectors","normalize","x","z","y","setIndex","setAttribute","computeBoundingSphere"],"sources":["/home/krug/Coding/JavaScript/Websites/Personal/personal/node_modules/.pnpm/three-stdlib@2.23.7_three@0.151.3/node_modules/three-stdlib/geometries/TeapotGeometry.js"],"sourcesContent":["import { BufferGeometry, Matrix4, Vector3, Vector4, BufferAttribute } from \"three\";\nclass TeapotGeometry extends BufferGeometry {\n  constructor(size, segments, bottom, lid, body, fitLid, blinn) {\n    const teapotPatches = [\n      /*rim*/\n      0,\n      1,\n      2,\n      3,\n      4,\n      5,\n      6,\n      7,\n      8,\n      9,\n      10,\n      11,\n      12,\n      13,\n      14,\n      15,\n      3,\n      16,\n      17,\n      18,\n      7,\n      19,\n      20,\n      21,\n      11,\n      22,\n      23,\n      24,\n      15,\n      25,\n      26,\n      27,\n      18,\n      28,\n      29,\n      30,\n      21,\n      31,\n      32,\n      33,\n      24,\n      34,\n      35,\n      36,\n      27,\n      37,\n      38,\n      39,\n      30,\n      40,\n      41,\n      0,\n      33,\n      42,\n      43,\n      4,\n      36,\n      44,\n      45,\n      8,\n      39,\n      46,\n      47,\n      12,\n      /*body*/\n      12,\n      13,\n      14,\n      15,\n      48,\n      49,\n      50,\n      51,\n      52,\n      53,\n      54,\n      55,\n      56,\n      57,\n      58,\n      59,\n      15,\n      25,\n      26,\n      27,\n      51,\n      60,\n      61,\n      62,\n      55,\n      63,\n      64,\n      65,\n      59,\n      66,\n      67,\n      68,\n      27,\n      37,\n      38,\n      39,\n      62,\n      69,\n      70,\n      71,\n      65,\n      72,\n      73,\n      74,\n      68,\n      75,\n      76,\n      77,\n      39,\n      46,\n      47,\n      12,\n      71,\n      78,\n      79,\n      48,\n      74,\n      80,\n      81,\n      52,\n      77,\n      82,\n      83,\n      56,\n      56,\n      57,\n      58,\n      59,\n      84,\n      85,\n      86,\n      87,\n      88,\n      89,\n      90,\n      91,\n      92,\n      93,\n      94,\n      95,\n      59,\n      66,\n      67,\n      68,\n      87,\n      96,\n      97,\n      98,\n      91,\n      99,\n      100,\n      101,\n      95,\n      102,\n      103,\n      104,\n      68,\n      75,\n      76,\n      77,\n      98,\n      105,\n      106,\n      107,\n      101,\n      108,\n      109,\n      110,\n      104,\n      111,\n      112,\n      113,\n      77,\n      82,\n      83,\n      56,\n      107,\n      114,\n      115,\n      84,\n      110,\n      116,\n      117,\n      88,\n      113,\n      118,\n      119,\n      92,\n      /*handle*/\n      120,\n      121,\n      122,\n      123,\n      124,\n      125,\n      126,\n      127,\n      128,\n      129,\n      130,\n      131,\n      132,\n      133,\n      134,\n      135,\n      123,\n      136,\n      137,\n      120,\n      127,\n      138,\n      139,\n      124,\n      131,\n      140,\n      141,\n      128,\n      135,\n      142,\n      143,\n      132,\n      132,\n      133,\n      134,\n      135,\n      144,\n      145,\n      146,\n      147,\n      148,\n      149,\n      150,\n      151,\n      68,\n      152,\n      153,\n      154,\n      135,\n      142,\n      143,\n      132,\n      147,\n      155,\n      156,\n      144,\n      151,\n      157,\n      158,\n      148,\n      154,\n      159,\n      160,\n      68,\n      /*spout*/\n      161,\n      162,\n      163,\n      164,\n      165,\n      166,\n      167,\n      168,\n      169,\n      170,\n      171,\n      172,\n      173,\n      174,\n      175,\n      176,\n      164,\n      177,\n      178,\n      161,\n      168,\n      179,\n      180,\n      165,\n      172,\n      181,\n      182,\n      169,\n      176,\n      183,\n      184,\n      173,\n      173,\n      174,\n      175,\n      176,\n      185,\n      186,\n      187,\n      188,\n      189,\n      190,\n      191,\n      192,\n      193,\n      194,\n      195,\n      196,\n      176,\n      183,\n      184,\n      173,\n      188,\n      197,\n      198,\n      185,\n      192,\n      199,\n      200,\n      189,\n      196,\n      201,\n      202,\n      193,\n      /*lid*/\n      203,\n      203,\n      203,\n      203,\n      204,\n      205,\n      206,\n      207,\n      208,\n      208,\n      208,\n      208,\n      209,\n      210,\n      211,\n      212,\n      203,\n      203,\n      203,\n      203,\n      207,\n      213,\n      214,\n      215,\n      208,\n      208,\n      208,\n      208,\n      212,\n      216,\n      217,\n      218,\n      203,\n      203,\n      203,\n      203,\n      215,\n      219,\n      220,\n      221,\n      208,\n      208,\n      208,\n      208,\n      218,\n      222,\n      223,\n      224,\n      203,\n      203,\n      203,\n      203,\n      221,\n      225,\n      226,\n      204,\n      208,\n      208,\n      208,\n      208,\n      224,\n      227,\n      228,\n      209,\n      209,\n      210,\n      211,\n      212,\n      229,\n      230,\n      231,\n      232,\n      233,\n      234,\n      235,\n      236,\n      237,\n      238,\n      239,\n      240,\n      212,\n      216,\n      217,\n      218,\n      232,\n      241,\n      242,\n      243,\n      236,\n      244,\n      245,\n      246,\n      240,\n      247,\n      248,\n      249,\n      218,\n      222,\n      223,\n      224,\n      243,\n      250,\n      251,\n      252,\n      246,\n      253,\n      254,\n      255,\n      249,\n      256,\n      257,\n      258,\n      224,\n      227,\n      228,\n      209,\n      252,\n      259,\n      260,\n      229,\n      255,\n      261,\n      262,\n      233,\n      258,\n      263,\n      264,\n      237,\n      /*bottom*/\n      265,\n      265,\n      265,\n      265,\n      266,\n      267,\n      268,\n      269,\n      270,\n      271,\n      272,\n      273,\n      92,\n      119,\n      118,\n      113,\n      265,\n      265,\n      265,\n      265,\n      269,\n      274,\n      275,\n      276,\n      273,\n      277,\n      278,\n      279,\n      113,\n      112,\n      111,\n      104,\n      265,\n      265,\n      265,\n      265,\n      276,\n      280,\n      281,\n      282,\n      279,\n      283,\n      284,\n      285,\n      104,\n      103,\n      102,\n      95,\n      265,\n      265,\n      265,\n      265,\n      282,\n      286,\n      287,\n      266,\n      285,\n      288,\n      289,\n      270,\n      95,\n      94,\n      93,\n      92\n    ];\n    const teapotVertices = [\n      1.4,\n      0,\n      2.4,\n      1.4,\n      -0.784,\n      2.4,\n      0.784,\n      -1.4,\n      2.4,\n      0,\n      -1.4,\n      2.4,\n      1.3375,\n      0,\n      2.53125,\n      1.3375,\n      -0.749,\n      2.53125,\n      0.749,\n      -1.3375,\n      2.53125,\n      0,\n      -1.3375,\n      2.53125,\n      1.4375,\n      0,\n      2.53125,\n      1.4375,\n      -0.805,\n      2.53125,\n      0.805,\n      -1.4375,\n      2.53125,\n      0,\n      -1.4375,\n      2.53125,\n      1.5,\n      0,\n      2.4,\n      1.5,\n      -0.84,\n      2.4,\n      0.84,\n      -1.5,\n      2.4,\n      0,\n      -1.5,\n      2.4,\n      -0.784,\n      -1.4,\n      2.4,\n      -1.4,\n      -0.784,\n      2.4,\n      -1.4,\n      0,\n      2.4,\n      -0.749,\n      -1.3375,\n      2.53125,\n      -1.3375,\n      -0.749,\n      2.53125,\n      -1.3375,\n      0,\n      2.53125,\n      -0.805,\n      -1.4375,\n      2.53125,\n      -1.4375,\n      -0.805,\n      2.53125,\n      -1.4375,\n      0,\n      2.53125,\n      -0.84,\n      -1.5,\n      2.4,\n      -1.5,\n      -0.84,\n      2.4,\n      -1.5,\n      0,\n      2.4,\n      -1.4,\n      0.784,\n      2.4,\n      -0.784,\n      1.4,\n      2.4,\n      0,\n      1.4,\n      2.4,\n      -1.3375,\n      0.749,\n      2.53125,\n      -0.749,\n      1.3375,\n      2.53125,\n      0,\n      1.3375,\n      2.53125,\n      -1.4375,\n      0.805,\n      2.53125,\n      -0.805,\n      1.4375,\n      2.53125,\n      0,\n      1.4375,\n      2.53125,\n      -1.5,\n      0.84,\n      2.4,\n      -0.84,\n      1.5,\n      2.4,\n      0,\n      1.5,\n      2.4,\n      0.784,\n      1.4,\n      2.4,\n      1.4,\n      0.784,\n      2.4,\n      0.749,\n      1.3375,\n      2.53125,\n      1.3375,\n      0.749,\n      2.53125,\n      0.805,\n      1.4375,\n      2.53125,\n      1.4375,\n      0.805,\n      2.53125,\n      0.84,\n      1.5,\n      2.4,\n      1.5,\n      0.84,\n      2.4,\n      1.75,\n      0,\n      1.875,\n      1.75,\n      -0.98,\n      1.875,\n      0.98,\n      -1.75,\n      1.875,\n      0,\n      -1.75,\n      1.875,\n      2,\n      0,\n      1.35,\n      2,\n      -1.12,\n      1.35,\n      1.12,\n      -2,\n      1.35,\n      0,\n      -2,\n      1.35,\n      2,\n      0,\n      0.9,\n      2,\n      -1.12,\n      0.9,\n      1.12,\n      -2,\n      0.9,\n      0,\n      -2,\n      0.9,\n      -0.98,\n      -1.75,\n      1.875,\n      -1.75,\n      -0.98,\n      1.875,\n      -1.75,\n      0,\n      1.875,\n      -1.12,\n      -2,\n      1.35,\n      -2,\n      -1.12,\n      1.35,\n      -2,\n      0,\n      1.35,\n      -1.12,\n      -2,\n      0.9,\n      -2,\n      -1.12,\n      0.9,\n      -2,\n      0,\n      0.9,\n      -1.75,\n      0.98,\n      1.875,\n      -0.98,\n      1.75,\n      1.875,\n      0,\n      1.75,\n      1.875,\n      -2,\n      1.12,\n      1.35,\n      -1.12,\n      2,\n      1.35,\n      0,\n      2,\n      1.35,\n      -2,\n      1.12,\n      0.9,\n      -1.12,\n      2,\n      0.9,\n      0,\n      2,\n      0.9,\n      0.98,\n      1.75,\n      1.875,\n      1.75,\n      0.98,\n      1.875,\n      1.12,\n      2,\n      1.35,\n      2,\n      1.12,\n      1.35,\n      1.12,\n      2,\n      0.9,\n      2,\n      1.12,\n      0.9,\n      2,\n      0,\n      0.45,\n      2,\n      -1.12,\n      0.45,\n      1.12,\n      -2,\n      0.45,\n      0,\n      -2,\n      0.45,\n      1.5,\n      0,\n      0.225,\n      1.5,\n      -0.84,\n      0.225,\n      0.84,\n      -1.5,\n      0.225,\n      0,\n      -1.5,\n      0.225,\n      1.5,\n      0,\n      0.15,\n      1.5,\n      -0.84,\n      0.15,\n      0.84,\n      -1.5,\n      0.15,\n      0,\n      -1.5,\n      0.15,\n      -1.12,\n      -2,\n      0.45,\n      -2,\n      -1.12,\n      0.45,\n      -2,\n      0,\n      0.45,\n      -0.84,\n      -1.5,\n      0.225,\n      -1.5,\n      -0.84,\n      0.225,\n      -1.5,\n      0,\n      0.225,\n      -0.84,\n      -1.5,\n      0.15,\n      -1.5,\n      -0.84,\n      0.15,\n      -1.5,\n      0,\n      0.15,\n      -2,\n      1.12,\n      0.45,\n      -1.12,\n      2,\n      0.45,\n      0,\n      2,\n      0.45,\n      -1.5,\n      0.84,\n      0.225,\n      -0.84,\n      1.5,\n      0.225,\n      0,\n      1.5,\n      0.225,\n      -1.5,\n      0.84,\n      0.15,\n      -0.84,\n      1.5,\n      0.15,\n      0,\n      1.5,\n      0.15,\n      1.12,\n      2,\n      0.45,\n      2,\n      1.12,\n      0.45,\n      0.84,\n      1.5,\n      0.225,\n      1.5,\n      0.84,\n      0.225,\n      0.84,\n      1.5,\n      0.15,\n      1.5,\n      0.84,\n      0.15,\n      -1.6,\n      0,\n      2.025,\n      -1.6,\n      -0.3,\n      2.025,\n      -1.5,\n      -0.3,\n      2.25,\n      -1.5,\n      0,\n      2.25,\n      -2.3,\n      0,\n      2.025,\n      -2.3,\n      -0.3,\n      2.025,\n      -2.5,\n      -0.3,\n      2.25,\n      -2.5,\n      0,\n      2.25,\n      -2.7,\n      0,\n      2.025,\n      -2.7,\n      -0.3,\n      2.025,\n      -3,\n      -0.3,\n      2.25,\n      -3,\n      0,\n      2.25,\n      -2.7,\n      0,\n      1.8,\n      -2.7,\n      -0.3,\n      1.8,\n      -3,\n      -0.3,\n      1.8,\n      -3,\n      0,\n      1.8,\n      -1.5,\n      0.3,\n      2.25,\n      -1.6,\n      0.3,\n      2.025,\n      -2.5,\n      0.3,\n      2.25,\n      -2.3,\n      0.3,\n      2.025,\n      -3,\n      0.3,\n      2.25,\n      -2.7,\n      0.3,\n      2.025,\n      -3,\n      0.3,\n      1.8,\n      -2.7,\n      0.3,\n      1.8,\n      -2.7,\n      0,\n      1.575,\n      -2.7,\n      -0.3,\n      1.575,\n      -3,\n      -0.3,\n      1.35,\n      -3,\n      0,\n      1.35,\n      -2.5,\n      0,\n      1.125,\n      -2.5,\n      -0.3,\n      1.125,\n      -2.65,\n      -0.3,\n      0.9375,\n      -2.65,\n      0,\n      0.9375,\n      -2,\n      -0.3,\n      0.9,\n      -1.9,\n      -0.3,\n      0.6,\n      -1.9,\n      0,\n      0.6,\n      -3,\n      0.3,\n      1.35,\n      -2.7,\n      0.3,\n      1.575,\n      -2.65,\n      0.3,\n      0.9375,\n      -2.5,\n      0.3,\n      1.125,\n      -1.9,\n      0.3,\n      0.6,\n      -2,\n      0.3,\n      0.9,\n      1.7,\n      0,\n      1.425,\n      1.7,\n      -0.66,\n      1.425,\n      1.7,\n      -0.66,\n      0.6,\n      1.7,\n      0,\n      0.6,\n      2.6,\n      0,\n      1.425,\n      2.6,\n      -0.66,\n      1.425,\n      3.1,\n      -0.66,\n      0.825,\n      3.1,\n      0,\n      0.825,\n      2.3,\n      0,\n      2.1,\n      2.3,\n      -0.25,\n      2.1,\n      2.4,\n      -0.25,\n      2.025,\n      2.4,\n      0,\n      2.025,\n      2.7,\n      0,\n      2.4,\n      2.7,\n      -0.25,\n      2.4,\n      3.3,\n      -0.25,\n      2.4,\n      3.3,\n      0,\n      2.4,\n      1.7,\n      0.66,\n      0.6,\n      1.7,\n      0.66,\n      1.425,\n      3.1,\n      0.66,\n      0.825,\n      2.6,\n      0.66,\n      1.425,\n      2.4,\n      0.25,\n      2.025,\n      2.3,\n      0.25,\n      2.1,\n      3.3,\n      0.25,\n      2.4,\n      2.7,\n      0.25,\n      2.4,\n      2.8,\n      0,\n      2.475,\n      2.8,\n      -0.25,\n      2.475,\n      3.525,\n      -0.25,\n      2.49375,\n      3.525,\n      0,\n      2.49375,\n      2.9,\n      0,\n      2.475,\n      2.9,\n      -0.15,\n      2.475,\n      3.45,\n      -0.15,\n      2.5125,\n      3.45,\n      0,\n      2.5125,\n      2.8,\n      0,\n      2.4,\n      2.8,\n      -0.15,\n      2.4,\n      3.2,\n      -0.15,\n      2.4,\n      3.2,\n      0,\n      2.4,\n      3.525,\n      0.25,\n      2.49375,\n      2.8,\n      0.25,\n      2.475,\n      3.45,\n      0.15,\n      2.5125,\n      2.9,\n      0.15,\n      2.475,\n      3.2,\n      0.15,\n      2.4,\n      2.8,\n      0.15,\n      2.4,\n      0,\n      0,\n      3.15,\n      0.8,\n      0,\n      3.15,\n      0.8,\n      -0.45,\n      3.15,\n      0.45,\n      -0.8,\n      3.15,\n      0,\n      -0.8,\n      3.15,\n      0,\n      0,\n      2.85,\n      0.2,\n      0,\n      2.7,\n      0.2,\n      -0.112,\n      2.7,\n      0.112,\n      -0.2,\n      2.7,\n      0,\n      -0.2,\n      2.7,\n      -0.45,\n      -0.8,\n      3.15,\n      -0.8,\n      -0.45,\n      3.15,\n      -0.8,\n      0,\n      3.15,\n      -0.112,\n      -0.2,\n      2.7,\n      -0.2,\n      -0.112,\n      2.7,\n      -0.2,\n      0,\n      2.7,\n      -0.8,\n      0.45,\n      3.15,\n      -0.45,\n      0.8,\n      3.15,\n      0,\n      0.8,\n      3.15,\n      -0.2,\n      0.112,\n      2.7,\n      -0.112,\n      0.2,\n      2.7,\n      0,\n      0.2,\n      2.7,\n      0.45,\n      0.8,\n      3.15,\n      0.8,\n      0.45,\n      3.15,\n      0.112,\n      0.2,\n      2.7,\n      0.2,\n      0.112,\n      2.7,\n      0.4,\n      0,\n      2.55,\n      0.4,\n      -0.224,\n      2.55,\n      0.224,\n      -0.4,\n      2.55,\n      0,\n      -0.4,\n      2.55,\n      1.3,\n      0,\n      2.55,\n      1.3,\n      -0.728,\n      2.55,\n      0.728,\n      -1.3,\n      2.55,\n      0,\n      -1.3,\n      2.55,\n      1.3,\n      0,\n      2.4,\n      1.3,\n      -0.728,\n      2.4,\n      0.728,\n      -1.3,\n      2.4,\n      0,\n      -1.3,\n      2.4,\n      -0.224,\n      -0.4,\n      2.55,\n      -0.4,\n      -0.224,\n      2.55,\n      -0.4,\n      0,\n      2.55,\n      -0.728,\n      -1.3,\n      2.55,\n      -1.3,\n      -0.728,\n      2.55,\n      -1.3,\n      0,\n      2.55,\n      -0.728,\n      -1.3,\n      2.4,\n      -1.3,\n      -0.728,\n      2.4,\n      -1.3,\n      0,\n      2.4,\n      -0.4,\n      0.224,\n      2.55,\n      -0.224,\n      0.4,\n      2.55,\n      0,\n      0.4,\n      2.55,\n      -1.3,\n      0.728,\n      2.55,\n      -0.728,\n      1.3,\n      2.55,\n      0,\n      1.3,\n      2.55,\n      -1.3,\n      0.728,\n      2.4,\n      -0.728,\n      1.3,\n      2.4,\n      0,\n      1.3,\n      2.4,\n      0.224,\n      0.4,\n      2.55,\n      0.4,\n      0.224,\n      2.55,\n      0.728,\n      1.3,\n      2.55,\n      1.3,\n      0.728,\n      2.55,\n      0.728,\n      1.3,\n      2.4,\n      1.3,\n      0.728,\n      2.4,\n      0,\n      0,\n      0,\n      1.425,\n      0,\n      0,\n      1.425,\n      0.798,\n      0,\n      0.798,\n      1.425,\n      0,\n      0,\n      1.425,\n      0,\n      1.5,\n      0,\n      0.075,\n      1.5,\n      0.84,\n      0.075,\n      0.84,\n      1.5,\n      0.075,\n      0,\n      1.5,\n      0.075,\n      -0.798,\n      1.425,\n      0,\n      -1.425,\n      0.798,\n      0,\n      -1.425,\n      0,\n      0,\n      -0.84,\n      1.5,\n      0.075,\n      -1.5,\n      0.84,\n      0.075,\n      -1.5,\n      0,\n      0.075,\n      -1.425,\n      -0.798,\n      0,\n      -0.798,\n      -1.425,\n      0,\n      0,\n      -1.425,\n      0,\n      -1.5,\n      -0.84,\n      0.075,\n      -0.84,\n      -1.5,\n      0.075,\n      0,\n      -1.5,\n      0.075,\n      0.798,\n      -1.425,\n      0,\n      1.425,\n      -0.798,\n      0,\n      0.84,\n      -1.5,\n      0.075,\n      1.5,\n      -0.84,\n      0.075\n    ];\n    super();\n    size = size || 50;\n    segments = segments !== void 0 ? Math.max(2, Math.floor(segments) || 10) : 10;\n    bottom = bottom === void 0 ? true : bottom;\n    lid = lid === void 0 ? true : lid;\n    body = body === void 0 ? true : body;\n    fitLid = fitLid === void 0 ? true : fitLid;\n    const blinnScale = 1.3;\n    blinn = blinn === void 0 ? true : blinn;\n    const maxHeight = 3.15 * (blinn ? 1 : blinnScale);\n    const maxHeight2 = maxHeight / 2;\n    const trueSize = size / maxHeight2;\n    let numTriangles = bottom ? (8 * segments - 4) * segments : 0;\n    numTriangles += lid ? (16 * segments - 4) * segments : 0;\n    numTriangles += body ? 40 * segments * segments : 0;\n    const indices = new Uint32Array(numTriangles * 3);\n    let numVertices = bottom ? 4 : 0;\n    numVertices += lid ? 8 : 0;\n    numVertices += body ? 20 : 0;\n    numVertices *= (segments + 1) * (segments + 1);\n    const vertices = new Float32Array(numVertices * 3);\n    const normals = new Float32Array(numVertices * 3);\n    const uvs = new Float32Array(numVertices * 2);\n    const ms = new Matrix4();\n    ms.set(-1, 3, -3, 1, 3, -6, 3, 0, -3, 3, 0, 0, 1, 0, 0, 0);\n    const g = [];\n    let i, r, c;\n    const sp = [];\n    const tp = [];\n    const dsp = [];\n    const dtp = [];\n    const mgm = [];\n    const vert = [];\n    const sdir = [];\n    const tdir = [];\n    const norm = new Vector3();\n    let tcoord;\n    let sstep, tstep;\n    let vertPerRow;\n    let s, t, sval, tval, p;\n    let dsval = 0;\n    let dtval = 0;\n    const normOut = new Vector3();\n    let v1, v2, v3, v4;\n    const gmx = new Matrix4();\n    const tmtx = new Matrix4();\n    const vsp = new Vector4();\n    const vtp = new Vector4();\n    const vdsp = new Vector4();\n    const vdtp = new Vector4();\n    const vsdir = new Vector3();\n    const vtdir = new Vector3();\n    const mst = ms.clone();\n    mst.transpose();\n    const notDegenerate = (vtx1, vtx2, vtx3) => !(vertices[vtx1 * 3] === vertices[vtx2 * 3] && vertices[vtx1 * 3 + 1] === vertices[vtx2 * 3 + 1] && vertices[vtx1 * 3 + 2] === vertices[vtx2 * 3 + 2] || vertices[vtx1 * 3] === vertices[vtx3 * 3] && vertices[vtx1 * 3 + 1] === vertices[vtx3 * 3 + 1] && vertices[vtx1 * 3 + 2] === vertices[vtx3 * 3 + 2] || vertices[vtx2 * 3] === vertices[vtx3 * 3] && vertices[vtx2 * 3 + 1] === vertices[vtx3 * 3 + 1] && vertices[vtx2 * 3 + 2] === vertices[vtx3 * 3 + 2]);\n    for (i = 0; i < 3; i++) {\n      mgm[i] = new Matrix4();\n    }\n    const minPatches = body ? 0 : 20;\n    const maxPatches = bottom ? 32 : 28;\n    vertPerRow = segments + 1;\n    let surfCount = 0;\n    let vertCount = 0;\n    let normCount = 0;\n    let uvCount = 0;\n    let indexCount = 0;\n    for (let surf = minPatches; surf < maxPatches; surf++) {\n      if (lid || surf < 20 || surf >= 28) {\n        for (i = 0; i < 3; i++) {\n          for (r = 0; r < 4; r++) {\n            for (c = 0; c < 4; c++) {\n              g[c * 4 + r] = teapotVertices[teapotPatches[surf * 16 + r * 4 + c] * 3 + i];\n              if (fitLid && surf >= 20 && surf < 28 && i !== 2) {\n                g[c * 4 + r] *= 1.077;\n              }\n              if (!blinn && i === 2) {\n                g[c * 4 + r] *= blinnScale;\n              }\n            }\n          }\n          gmx.set(g[0], g[1], g[2], g[3], g[4], g[5], g[6], g[7], g[8], g[9], g[10], g[11], g[12], g[13], g[14], g[15]);\n          tmtx.multiplyMatrices(gmx, ms);\n          mgm[i].multiplyMatrices(mst, tmtx);\n        }\n        for (sstep = 0; sstep <= segments; sstep++) {\n          s = sstep / segments;\n          for (tstep = 0; tstep <= segments; tstep++) {\n            t = tstep / segments;\n            for (p = 4, sval = tval = 1; p--; ) {\n              sp[p] = sval;\n              tp[p] = tval;\n              sval *= s;\n              tval *= t;\n              if (p === 3) {\n                dsp[p] = dtp[p] = 0;\n                dsval = dtval = 1;\n              } else {\n                dsp[p] = dsval * (3 - p);\n                dtp[p] = dtval * (3 - p);\n                dsval *= s;\n                dtval *= t;\n              }\n            }\n            vsp.fromArray(sp);\n            vtp.fromArray(tp);\n            vdsp.fromArray(dsp);\n            vdtp.fromArray(dtp);\n            for (i = 0; i < 3; i++) {\n              tcoord = vsp.clone();\n              tcoord.applyMatrix4(mgm[i]);\n              vert[i] = tcoord.dot(vtp);\n              tcoord = vdsp.clone();\n              tcoord.applyMatrix4(mgm[i]);\n              sdir[i] = tcoord.dot(vtp);\n              tcoord = vsp.clone();\n              tcoord.applyMatrix4(mgm[i]);\n              tdir[i] = tcoord.dot(vdtp);\n            }\n            vsdir.fromArray(sdir);\n            vtdir.fromArray(tdir);\n            norm.crossVectors(vtdir, vsdir);\n            norm.normalize();\n            if (vert[0] === 0 && vert[1] === 0) {\n              normOut.set(0, vert[2] > maxHeight2 ? 1 : -1, 0);\n            } else {\n              normOut.set(norm.x, norm.z, -norm.y);\n            }\n            vertices[vertCount++] = trueSize * vert[0];\n            vertices[vertCount++] = trueSize * (vert[2] - maxHeight2);\n            vertices[vertCount++] = -trueSize * vert[1];\n            normals[normCount++] = normOut.x;\n            normals[normCount++] = normOut.y;\n            normals[normCount++] = normOut.z;\n            uvs[uvCount++] = 1 - t;\n            uvs[uvCount++] = 1 - s;\n          }\n        }\n        for (sstep = 0; sstep < segments; sstep++) {\n          for (tstep = 0; tstep < segments; tstep++) {\n            v1 = surfCount * vertPerRow * vertPerRow + sstep * vertPerRow + tstep;\n            v2 = v1 + 1;\n            v3 = v2 + vertPerRow;\n            v4 = v1 + vertPerRow;\n            if (notDegenerate(v1, v2, v3)) {\n              indices[indexCount++] = v1;\n              indices[indexCount++] = v2;\n              indices[indexCount++] = v3;\n            }\n            if (notDegenerate(v1, v3, v4)) {\n              indices[indexCount++] = v1;\n              indices[indexCount++] = v3;\n              indices[indexCount++] = v4;\n            }\n          }\n        }\n        surfCount++;\n      }\n    }\n    this.setIndex(new BufferAttribute(indices, 1));\n    this.setAttribute(\"position\", new BufferAttribute(vertices, 3));\n    this.setAttribute(\"normal\", new BufferAttribute(normals, 3));\n    this.setAttribute(\"uv\", new BufferAttribute(uvs, 2));\n    this.computeBoundingSphere();\n  }\n}\nexport {\n  TeapotGeometry\n};\n"],"mappings":"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CAAC,IAAI,EACL,CAAC,CAAC,EACF,IAAI,EACJ,CAAC,CAAC,EACF,CAAC,IAAI,EACL,IAAI,EACJ,CAAC,CAAC,EACF,CAAC,EACD,IAAI,EACJ,CAAC,IAAI,EACL,CAAC,CAAC,EACF,GAAG,EACH,CAAC,CAAC,EACF,CAAC,IAAI,EACL,GAAG,EACH,CAAC,CAAC,EACF,CAAC,EACD,GAAG,EACH,CAAC,IAAI,EACL,IAAI,EACJ,KAAK,EACL,CAAC,IAAI,EACL,IAAI,EACJ,KAAK,EACL,CAAC,EACD,IAAI,EACJ,KAAK,EACL,CAAC,CAAC,EACF,IAAI,EACJ,IAAI,EACJ,CAAC,IAAI,EACL,CAAC,EACD,IAAI,EACJ,CAAC,EACD,CAAC,EACD,IAAI,EACJ,CAAC,CAAC,EACF,IAAI,EACJ,GAAG,EACH,CAAC,IAAI,EACL,CAAC,EACD,GAAG,EACH,CAAC,EACD,CAAC,EACD,GAAG,EACH,IAAI,EACJ,IAAI,EACJ,KAAK,EACL,IAAI,EACJ,IAAI,EACJ,KAAK,EACL,IAAI,EACJ,CAAC,EACD,IAAI,EACJ,CAAC,EACD,IAAI,EACJ,IAAI,EACJ,IAAI,EACJ,CAAC,EACD,GAAG,EACH,CAAC,EACD,IAAI,EACJ,GAAG,EACH,CAAC,EACD,CAAC,EACD,IAAI,EACJ,CAAC,EACD,CAAC,IAAI,EACL,IAAI,EACJ,IAAI,EACJ,CAAC,CAAC,EACF,IAAI,EACJ,CAAC,EACD,CAAC,CAAC,EACF,IAAI,EACJ,GAAG,EACH,CAAC,EACD,KAAK,EACL,GAAG,EACH,CAAC,IAAI,EACL,KAAK,EACL,IAAI,EACJ,CAAC,GAAG,EACJ,KAAK,EACL,CAAC,EACD,CAAC,GAAG,EACJ,KAAK,EACL,GAAG,EACH,CAAC,EACD,IAAI,EACJ,GAAG,EACH,CAAC,IAAI,EACL,IAAI,EACJ,IAAI,EACJ,CAAC,GAAG,EACJ,IAAI,EACJ,CAAC,EACD,CAAC,GAAG,EACJ,IAAI,EACJ,CAAC,IAAI,EACL,CAAC,CAAC,EACF,IAAI,EACJ,CAAC,CAAC,EACF,CAAC,IAAI,EACL,IAAI,EACJ,CAAC,CAAC,EACF,CAAC,EACD,IAAI,EACJ,CAAC,IAAI,EACL,CAAC,GAAG,EACJ,KAAK,EACL,CAAC,GAAG,EACJ,CAAC,IAAI,EACL,KAAK,EACL,CAAC,GAAG,EACJ,CAAC,EACD,KAAK,EACL,CAAC,IAAI,EACL,CAAC,GAAG,EACJ,IAAI,EACJ,CAAC,GAAG,EACJ,CAAC,IAAI,EACL,IAAI,EACJ,CAAC,GAAG,EACJ,CAAC,EACD,IAAI,EACJ,CAAC,CAAC,EACF,IAAI,EACJ,IAAI,EACJ,CAAC,IAAI,EACL,CAAC,EACD,IAAI,EACJ,CAAC,EACD,CAAC,EACD,IAAI,EACJ,CAAC,GAAG,EACJ,IAAI,EACJ,KAAK,EACL,CAAC,IAAI,EACL,GAAG,EACH,KAAK,EACL,CAAC,EACD,GAAG,EACH,KAAK,EACL,CAAC,GAAG,EACJ,IAAI,EACJ,IAAI,EACJ,CAAC,IAAI,EACL,GAAG,EACH,IAAI,EACJ,CAAC,EACD,GAAG,EACH,IAAI,EACJ,IAAI,EACJ,CAAC,EACD,IAAI,EACJ,CAAC,EACD,IAAI,EACJ,IAAI,EACJ,IAAI,EACJ,GAAG,EACH,KAAK,EACL,GAAG,EACH,IAAI,EACJ,KAAK,EACL,IAAI,EACJ,GAAG,EACH,IAAI,EACJ,GAAG,EACH,IAAI,EACJ,IAAI,EACJ,CAAC,GAAG,EACJ,CAAC,EACD,KAAK,EACL,CAAC,GAAG,EACJ,CAAC,GAAG,EACJ,KAAK,EACL,CAAC,GAAG,EACJ,CAAC,GAAG,EACJ,IAAI,EACJ,CAAC,GAAG,EACJ,CAAC,EACD,IAAI,EACJ,CAAC,GAAG,EACJ,CAAC,EACD,KAAK,EACL,CAAC,GAAG,EACJ,CAAC,GAAG,EACJ,KAAK,EACL,CAAC,GAAG,EACJ,CAAC,GAAG,EACJ,IAAI,EACJ,CAAC,GAAG,EACJ,CAAC,EACD,IAAI,EACJ,CAAC,GAAG,EACJ,CAAC,EACD,KAAK,EACL,CAAC,GAAG,EACJ,CAAC,GAAG,EACJ,KAAK,EACL,CAAC,CAAC,EACF,CAAC,GAAG,EACJ,IAAI,EACJ,CAAC,CAAC,EACF,CAAC,EACD,IAAI,EACJ,CAAC,GAAG,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EACJ,GAAG,EACH,CAAC,EACD,IAAI,EACJ,GAAG,EACH,CAAC,IAAI,EACL,IAAI,EACJ,IAAI,EACJ,CAAC,GAAG,EACJ,IAAI,EACJ,CAAC,EACD,CAAC,GAAG,EACJ,IAAI,EACJ,CAAC,EACD,CAAC,EACD,IAAI,EACJ,GAAG,EACH,CAAC,EACD,GAAG,EACH,GAAG,EACH,CAAC,KAAK,EACN,GAAG,EACH,KAAK,EACL,CAAC,GAAG,EACJ,GAAG,EACH,CAAC,EACD,CAAC,GAAG,EACJ,GAAG,EACH,CAAC,IAAI,EACL,CAAC,GAAG,EACJ,IAAI,EACJ,CAAC,GAAG,EACJ,CAAC,IAAI,EACL,IAAI,EACJ,CAAC,GAAG,EACJ,CAAC,EACD,IAAI,EACJ,CAAC,KAAK,EACN,CAAC,GAAG,EACJ,GAAG,EACH,CAAC,GAAG,EACJ,CAAC,KAAK,EACN,GAAG,EACH,CAAC,GAAG,EACJ,CAAC,EACD,GAAG,EACH,CAAC,GAAG,EACJ,IAAI,EACJ,IAAI,EACJ,CAAC,IAAI,EACL,GAAG,EACH,IAAI,EACJ,CAAC,EACD,GAAG,EACH,IAAI,EACJ,CAAC,GAAG,EACJ,KAAK,EACL,GAAG,EACH,CAAC,KAAK,EACN,GAAG,EACH,GAAG,EACH,CAAC,EACD,GAAG,EACH,GAAG,EACH,IAAI,EACJ,GAAG,EACH,IAAI,EACJ,GAAG,EACH,IAAI,EACJ,IAAI,EACJ,KAAK,EACL,GAAG,EACH,GAAG,EACH,GAAG,EACH,KAAK,EACL,GAAG,EACH,GAAG,EACH,CAAC,EACD,IAAI,EACJ,GAAG,EACH,CAAC,KAAK,EACN,IAAI,EACJ,KAAK,EACL,CAAC,GAAG,EACJ,IAAI,EACJ,CAAC,EACD,CAAC,GAAG,EACJ,IAAI,EACJ,GAAG,EACH,CAAC,EACD,IAAI,EACJ,GAAG,EACH,CAAC,KAAK,EACN,IAAI,EACJ,KAAK,EACL,CAAC,GAAG,EACJ,IAAI,EACJ,CAAC,EACD,CAAC,GAAG,EACJ,IAAI,EACJ,GAAG,EACH,CAAC,EACD,GAAG,EACH,GAAG,EACH,CAAC,KAAK,EACN,GAAG,EACH,KAAK,EACL,CAAC,GAAG,EACJ,GAAG,EACH,CAAC,EACD,CAAC,GAAG,EACJ,GAAG,EACH,CAAC,KAAK,EACN,CAAC,GAAG,EACJ,IAAI,EACJ,CAAC,GAAG,EACJ,CAAC,KAAK,EACN,IAAI,EACJ,CAAC,GAAG,EACJ,CAAC,EACD,IAAI,EACJ,CAAC,KAAK,EACN,CAAC,GAAG,EACJ,IAAI,EACJ,CAAC,GAAG,EACJ,CAAC,KAAK,EACN,IAAI,EACJ,CAAC,GAAG,EACJ,CAAC,EACD,IAAI,EACJ,CAAC,KAAK,EACN,CAAC,GAAG,EACJ,GAAG,EACH,CAAC,GAAG,EACJ,CAAC,KAAK,EACN,GAAG,EACH,CAAC,GAAG,EACJ,CAAC,EACD,GAAG,EACH,CAAC,GAAG,EACJ,KAAK,EACL,IAAI,EACJ,CAAC,KAAK,EACN,GAAG,EACH,IAAI,EACJ,CAAC,EACD,GAAG,EACH,IAAI,EACJ,CAAC,GAAG,EACJ,KAAK,EACL,IAAI,EACJ,CAAC,KAAK,EACN,GAAG,EACH,IAAI,EACJ,CAAC,EACD,GAAG,EACH,IAAI,EACJ,CAAC,GAAG,EACJ,KAAK,EACL,GAAG,EACH,CAAC,KAAK,EACN,GAAG,EACH,GAAG,EACH,CAAC,EACD,GAAG,EACH,GAAG,EACH,KAAK,EACL,GAAG,EACH,IAAI,EACJ,GAAG,EACH,KAAK,EACL,IAAI,EACJ,KAAK,EACL,GAAG,EACH,IAAI,EACJ,GAAG,EACH,KAAK,EACL,IAAI,EACJ,KAAK,EACL,GAAG,EACH,GAAG,EACH,GAAG,EACH,KAAK,EACL,GAAG,EACH,CAAC,EACD,CAAC,EACD,CAAC,EACD,KAAK,EACL,CAAC,EACD,CAAC,EACD,KAAK,EACL,KAAK,EACL,CAAC,EACD,KAAK,EACL,KAAK,EACL,CAAC,EACD,CAAC,EACD,KAAK,EACL,CAAC,EACD,GAAG,EACH,CAAC,EACD,KAAK,EACL,GAAG,EACH,IAAI,EACJ,KAAK,EACL,IAAI,EACJ,GAAG,EACH,KAAK,EACL,CAAC,EACD,GAAG,EACH,KAAK,EACL,CAAC,KAAK,EACN,KAAK,EACL,CAAC,EACD,CAAC,KAAK,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"},"metadata":{},"sourceType":"module","externalDependencies":[]}