{"ast":null,"code":"import { BufferGeometry, Vector3, Float32BufferAttribute } from \"three\";\nclass ParametricGeometry extends BufferGeometry {\n  constructor() {\n    let func = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : (u, v, target) => target.set(u, v, Math.cos(u) * Math.sin(v));\n    let slices = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 8;\n    let stacks = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 8;\n    super();\n    this.type = \"ParametricGeometry\";\n    this.parameters = {\n      func,\n      slices,\n      stacks\n    };\n    const indices = [];\n    const vertices = [];\n    const normals = [];\n    const uvs = [];\n    const EPS = 1e-5;\n    const normal = new Vector3();\n    const p0 = new Vector3(),\n      p1 = new Vector3();\n    const pu = new Vector3(),\n      pv = new Vector3();\n    const sliceCount = slices + 1;\n    for (let i = 0; i <= stacks; i++) {\n      const v = i / stacks;\n      for (let j = 0; j <= slices; j++) {\n        const u = j / slices;\n        func(u, v, p0);\n        vertices.push(p0.x, p0.y, p0.z);\n        if (u - EPS >= 0) {\n          func(u - EPS, v, p1);\n          pu.subVectors(p0, p1);\n        } else {\n          func(u + EPS, v, p1);\n          pu.subVectors(p1, p0);\n        }\n        if (v - EPS >= 0) {\n          func(u, v - EPS, p1);\n          pv.subVectors(p0, p1);\n        } else {\n          func(u, v + EPS, p1);\n          pv.subVectors(p1, p0);\n        }\n        normal.crossVectors(pu, pv).normalize();\n        normals.push(normal.x, normal.y, normal.z);\n        uvs.push(u, v);\n      }\n    }\n    for (let i = 0; i < stacks; i++) {\n      for (let j = 0; j < slices; j++) {\n        const a = i * sliceCount + j;\n        const b = i * sliceCount + j + 1;\n        const c = (i + 1) * sliceCount + j + 1;\n        const d = (i + 1) * sliceCount + j;\n        indices.push(a, b, d);\n        indices.push(b, c, d);\n      }\n    }\n    this.setIndex(indices);\n    this.setAttribute(\"position\", new Float32BufferAttribute(vertices, 3));\n    this.setAttribute(\"normal\", new Float32BufferAttribute(normals, 3));\n    this.setAttribute(\"uv\", new Float32BufferAttribute(uvs, 2));\n  }\n}\nexport { ParametricGeometry };","map":{"version":3,"names":["BufferGeometry","Vector3","Float32BufferAttribute","ParametricGeometry","constructor","func","arguments","length","undefined","u","v","target","set","Math","cos","sin","slices","stacks","type","parameters","indices","vertices","normals","uvs","EPS","normal","p0","p1","pu","pv","sliceCount","i","j","push","x","y","z","subVectors","crossVectors","normalize","a","b","c","d","setIndex","setAttribute"],"sources":["/home/krug/Coding/JavaScript/Websites/Personal/personal/node_modules/.pnpm/three-stdlib@2.23.7_three@0.151.3/node_modules/three-stdlib/geometries/ParametricGeometry.js"],"sourcesContent":["import { BufferGeometry, Vector3, Float32BufferAttribute } from \"three\";\nclass ParametricGeometry extends BufferGeometry {\n  constructor(func = (u, v, target) => target.set(u, v, Math.cos(u) * Math.sin(v)), slices = 8, stacks = 8) {\n    super();\n    this.type = \"ParametricGeometry\";\n    this.parameters = {\n      func,\n      slices,\n      stacks\n    };\n    const indices = [];\n    const vertices = [];\n    const normals = [];\n    const uvs = [];\n    const EPS = 1e-5;\n    const normal = new Vector3();\n    const p0 = new Vector3(), p1 = new Vector3();\n    const pu = new Vector3(), pv = new Vector3();\n    const sliceCount = slices + 1;\n    for (let i = 0; i <= stacks; i++) {\n      const v = i / stacks;\n      for (let j = 0; j <= slices; j++) {\n        const u = j / slices;\n        func(u, v, p0);\n        vertices.push(p0.x, p0.y, p0.z);\n        if (u - EPS >= 0) {\n          func(u - EPS, v, p1);\n          pu.subVectors(p0, p1);\n        } else {\n          func(u + EPS, v, p1);\n          pu.subVectors(p1, p0);\n        }\n        if (v - EPS >= 0) {\n          func(u, v - EPS, p1);\n          pv.subVectors(p0, p1);\n        } else {\n          func(u, v + EPS, p1);\n          pv.subVectors(p1, p0);\n        }\n        normal.crossVectors(pu, pv).normalize();\n        normals.push(normal.x, normal.y, normal.z);\n        uvs.push(u, v);\n      }\n    }\n    for (let i = 0; i < stacks; i++) {\n      for (let j = 0; j < slices; j++) {\n        const a = i * sliceCount + j;\n        const b = i * sliceCount + j + 1;\n        const c = (i + 1) * sliceCount + j + 1;\n        const d = (i + 1) * sliceCount + j;\n        indices.push(a, b, d);\n        indices.push(b, c, d);\n      }\n    }\n    this.setIndex(indices);\n    this.setAttribute(\"position\", new Float32BufferAttribute(vertices, 3));\n    this.setAttribute(\"normal\", new Float32BufferAttribute(normals, 3));\n    this.setAttribute(\"uv\", new Float32BufferAttribute(uvs, 2));\n  }\n}\nexport {\n  ParametricGeometry\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}