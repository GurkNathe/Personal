{"ast":null,"code":"import _classCallCheck from \"/home/krug/Coding/JavaScript/Websites/Personal/personal/node_modules/.pnpm/@babel+runtime@7.22.3/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/home/krug/Coding/JavaScript/Websites/Personal/personal/node_modules/.pnpm/@babel+runtime@7.22.3/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nvar __defProp = Object.defineProperty;\nvar __defNormalProp = function __defNormalProp(obj, key, value) {\n  return key in obj ? __defProp(obj, key, {\n    enumerable: true,\n    configurable: true,\n    writable: true,\n    value: value\n  }) : obj[key] = value;\n};\nvar __publicField = function __publicField(obj, key, value) {\n  __defNormalProp(obj, typeof key !== \"symbol\" ? key + \"\" : key, value);\n  return value;\n};\nimport { Vector3, Color, Vector2, Mesh, Line, Points, Matrix3, BufferAttribute } from \"three\";\nvar OBJExporter = /*#__PURE__*/function () {\n  function OBJExporter() {\n    _classCallCheck(this, OBJExporter);\n    __publicField(this, \"output\");\n    __publicField(this, \"indexVertex\");\n    __publicField(this, \"indexVertexUvs\");\n    __publicField(this, \"indexNormals\");\n    __publicField(this, \"vertex\");\n    __publicField(this, \"color\");\n    __publicField(this, \"normal\");\n    __publicField(this, \"uv\");\n    __publicField(this, \"face\");\n    this.output = \"\";\n    this.indexVertex = 0;\n    this.indexVertexUvs = 0;\n    this.indexNormals = 0;\n    this.vertex = new Vector3();\n    this.color = new Color();\n    this.normal = new Vector3();\n    this.uv = new Vector2();\n    this.face = [];\n  }\n  _createClass(OBJExporter, [{\n    key: \"parse\",\n    value: function parse(object) {\n      var _this = this;\n      object.traverse(function (child) {\n        if (child instanceof Mesh && child.isMesh) {\n          _this.parseMesh(child);\n        }\n        if (child instanceof Line && child.isLine) {\n          _this.parseLine(child);\n        }\n        if (child instanceof Points && child.isPoints) {\n          _this.parsePoints(child);\n        }\n      });\n      return this.output;\n    }\n  }, {\n    key: \"parseMesh\",\n    value: function parseMesh(mesh) {\n      var nbVertex = 0;\n      var nbNormals = 0;\n      var nbVertexUvs = 0;\n      var geometry = mesh.geometry;\n      var normalMatrixWorld = new Matrix3();\n      if (!geometry.isBufferGeometry) {\n        throw new Error(\"THREE.OBJExporter: Geometry is not of type THREE.BufferGeometry.\");\n      }\n      var vertices = geometry.getAttribute(\"position\");\n      var normals = geometry.getAttribute(\"normal\");\n      var uvs = geometry.getAttribute(\"uv\");\n      var indices = geometry.getIndex();\n      this.output += \"o \".concat(mesh.name, \"\\n\");\n      if (mesh.material && !Array.isArray(mesh.material) && mesh.material.name) {\n        this.output += \"usemtl \".concat(mesh.material.name, \"\\n\");\n      }\n      if (vertices !== void 0) {\n        for (var i = 0, l = vertices.count; i < l; i++, nbVertex++) {\n          this.vertex.x = vertices.getX(i);\n          this.vertex.y = vertices.getY(i);\n          this.vertex.z = vertices.getZ(i);\n          this.vertex.applyMatrix4(mesh.matrixWorld);\n          this.output += \"v \".concat(this.vertex.x, \" \").concat(this.vertex.y, \" \").concat(this.vertex.z, \"\\n\");\n        }\n      }\n      if (uvs !== void 0) {\n        for (var _i = 0, _l = uvs.count; _i < _l; _i++, nbVertexUvs++) {\n          this.uv.x = uvs.getX(_i);\n          this.uv.y = uvs.getY(_i);\n          this.output += \"vt \".concat(this.uv.x, \" \").concat(this.uv.y, \"\\n\");\n        }\n      }\n      if (normals !== void 0) {\n        normalMatrixWorld.getNormalMatrix(mesh.matrixWorld);\n        for (var _i2 = 0, _l2 = normals.count; _i2 < _l2; _i2++, nbNormals++) {\n          this.normal.x = normals.getX(_i2);\n          this.normal.y = normals.getY(_i2);\n          this.normal.z = normals.getZ(_i2);\n          this.normal.applyMatrix3(normalMatrixWorld).normalize();\n          this.output += \"vn \".concat(this.normal.x, \" \").concat(this.normal.y, \" \").concat(this.normal.z, \"\\n\");\n        }\n      }\n      if (indices !== null) {\n        for (var _i3 = 0, _l3 = indices.count; _i3 < _l3; _i3 += 3) {\n          for (var m = 0; m < 3; m++) {\n            var j = indices.getX(_i3 + m) + 1;\n            this.face[m] = this.indexVertex + j + (normals || uvs ? \"/\".concat(uvs ? this.indexVertexUvs + j : \"\").concat(normals ? \"/\".concat(this.indexNormals + j) : \"\") : \"\");\n          }\n          this.output += \"f \".concat(this.face.join(\" \"), \"\\n\");\n        }\n      } else {\n        for (var _i4 = 0, _l4 = vertices.count; _i4 < _l4; _i4 += 3) {\n          for (var _m = 0; _m < 3; _m++) {\n            var _j = _i4 + _m + 1;\n            this.face[_m] = this.indexVertex + _j + (normals || uvs ? \"/\".concat(uvs ? this.indexVertexUvs + _j : \"\").concat(normals ? \"/\".concat(this.indexNormals + _j) : \"\") : \"\");\n          }\n          this.output += \"f \".concat(this.face.join(\" \"), \"\\n\");\n        }\n      }\n      this.indexVertex += nbVertex;\n      this.indexVertexUvs += nbVertexUvs;\n      this.indexNormals += nbNormals;\n    }\n  }, {\n    key: \"parseLine\",\n    value: function parseLine(line) {\n      var nbVertex = 0;\n      var geometry = line.geometry;\n      var type = line.type;\n      if (geometry.isBufferGeometry) {\n        throw new Error(\"THREE.OBJExporter: Geometry is not of type THREE.BufferGeometry.\");\n      }\n      var vertices = geometry.getAttribute(\"position\");\n      this.output += \"o \".concat(line.name, \"\\n\");\n      if (vertices !== void 0) {\n        for (var i = 0, l = vertices.count; i < l; i++, nbVertex++) {\n          this.vertex.x = vertices.getX(i);\n          this.vertex.y = vertices.getY(i);\n          this.vertex.z = vertices.getZ(i);\n          this.vertex.applyMatrix4(line.matrixWorld);\n          this.output += \"v \".concat(this.vertex.x, \" \").concat(this.vertex.y, \" \").concat(this.vertex.z, \"\\n\");\n        }\n      }\n      if (type === \"Line\") {\n        this.output += \"l \";\n        for (var j = 1, _l5 = vertices.count; j <= _l5; j++) {\n          this.output += \"\".concat(this.indexVertex + j, \" \");\n        }\n        this.output += \"\\n\";\n      }\n      if (type === \"LineSegments\") {\n        for (var _j2 = 1, k = _j2 + 1, _l6 = vertices.count; _j2 < _l6; _j2 += 2, k = _j2 + 1) {\n          this.output += \"l \".concat(this.indexVertex + _j2, \" \").concat(this.indexVertex + k, \"\\n\");\n        }\n      }\n      this.indexVertex += nbVertex;\n    }\n  }, {\n    key: \"parsePoints\",\n    value: function parsePoints(points) {\n      var nbVertex = 0;\n      var geometry = points.geometry;\n      if (!geometry.isBufferGeometry) {\n        throw new Error(\"THREE.OBJExporter: Geometry is not of type THREE.BufferGeometry.\");\n      }\n      var vertices = geometry.getAttribute(\"position\");\n      var colors = geometry.getAttribute(\"color\");\n      this.output += \"o \".concat(points.name, \"\\n\");\n      if (vertices !== void 0) {\n        for (var i = 0, l = vertices.count; i < l; i++, nbVertex++) {\n          this.vertex.fromBufferAttribute(vertices, i);\n          this.vertex.applyMatrix4(points.matrixWorld);\n          this.output += \"v \".concat(this.vertex.x, \" \").concat(this.vertex.y, \" \").concat(this.vertex.z);\n          if (colors !== void 0 && colors instanceof BufferAttribute) {\n            this.color.fromBufferAttribute(colors, i);\n            this.output += \" \".concat(this.color.r, \" \").concat(this.color.g, \" \").concat(this.color.b);\n          }\n          this.output += \"\\n\";\n        }\n      }\n      this.output += \"p \";\n      for (var j = 1, _l7 = vertices.count; j <= _l7; j++) {\n        this.output += \"\".concat(this.indexVertex + j, \" \");\n      }\n      this.output += \"\\n\";\n      this.indexVertex += nbVertex;\n    }\n  }]);\n  return OBJExporter;\n}();\nexport { OBJExporter };","map":{"version":3,"names":["__defProp","Object","defineProperty","__defNormalProp","obj","key","value","enumerable","configurable","writable","__publicField","Vector3","Color","Vector2","Mesh","Line","Points","Matrix3","BufferAttribute","OBJExporter","_classCallCheck","output","indexVertex","indexVertexUvs","indexNormals","vertex","color","normal","uv","face","_createClass","parse","object","_this","traverse","child","isMesh","parseMesh","isLine","parseLine","isPoints","parsePoints","mesh","nbVertex","nbNormals","nbVertexUvs","geometry","normalMatrixWorld","isBufferGeometry","Error","vertices","getAttribute","normals","uvs","indices","getIndex","concat","name","material","Array","isArray","i","l","count","x","getX","y","getY","z","getZ","applyMatrix4","matrixWorld","getNormalMatrix","applyMatrix3","normalize","m","j","join","line","type","k","points","colors","fromBufferAttribute","r","g","b"],"sources":["/home/krug/Coding/JavaScript/Websites/Personal/personal/node_modules/.pnpm/three-stdlib@2.23.7_three@0.151.3/node_modules/three-stdlib/exporters/OBJExporter.js"],"sourcesContent":["var __defProp = Object.defineProperty;\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;\nvar __publicField = (obj, key, value) => {\n  __defNormalProp(obj, typeof key !== \"symbol\" ? key + \"\" : key, value);\n  return value;\n};\nimport { Vector3, Color, Vector2, Mesh, Line, Points, Matrix3, BufferAttribute } from \"three\";\nclass OBJExporter {\n  constructor() {\n    __publicField(this, \"output\");\n    __publicField(this, \"indexVertex\");\n    __publicField(this, \"indexVertexUvs\");\n    __publicField(this, \"indexNormals\");\n    __publicField(this, \"vertex\");\n    __publicField(this, \"color\");\n    __publicField(this, \"normal\");\n    __publicField(this, \"uv\");\n    __publicField(this, \"face\");\n    this.output = \"\";\n    this.indexVertex = 0;\n    this.indexVertexUvs = 0;\n    this.indexNormals = 0;\n    this.vertex = new Vector3();\n    this.color = new Color();\n    this.normal = new Vector3();\n    this.uv = new Vector2();\n    this.face = [];\n  }\n  parse(object) {\n    object.traverse((child) => {\n      if (child instanceof Mesh && child.isMesh) {\n        this.parseMesh(child);\n      }\n      if (child instanceof Line && child.isLine) {\n        this.parseLine(child);\n      }\n      if (child instanceof Points && child.isPoints) {\n        this.parsePoints(child);\n      }\n    });\n    return this.output;\n  }\n  parseMesh(mesh) {\n    let nbVertex = 0;\n    let nbNormals = 0;\n    let nbVertexUvs = 0;\n    const geometry = mesh.geometry;\n    const normalMatrixWorld = new Matrix3();\n    if (!geometry.isBufferGeometry) {\n      throw new Error(\"THREE.OBJExporter: Geometry is not of type THREE.BufferGeometry.\");\n    }\n    const vertices = geometry.getAttribute(\"position\");\n    const normals = geometry.getAttribute(\"normal\");\n    const uvs = geometry.getAttribute(\"uv\");\n    const indices = geometry.getIndex();\n    this.output += `o ${mesh.name}\n`;\n    if (mesh.material && !Array.isArray(mesh.material) && mesh.material.name) {\n      this.output += `usemtl ${mesh.material.name}\n`;\n    }\n    if (vertices !== void 0) {\n      for (let i = 0, l = vertices.count; i < l; i++, nbVertex++) {\n        this.vertex.x = vertices.getX(i);\n        this.vertex.y = vertices.getY(i);\n        this.vertex.z = vertices.getZ(i);\n        this.vertex.applyMatrix4(mesh.matrixWorld);\n        this.output += `v ${this.vertex.x} ${this.vertex.y} ${this.vertex.z}\n`;\n      }\n    }\n    if (uvs !== void 0) {\n      for (let i = 0, l = uvs.count; i < l; i++, nbVertexUvs++) {\n        this.uv.x = uvs.getX(i);\n        this.uv.y = uvs.getY(i);\n        this.output += `vt ${this.uv.x} ${this.uv.y}\n`;\n      }\n    }\n    if (normals !== void 0) {\n      normalMatrixWorld.getNormalMatrix(mesh.matrixWorld);\n      for (let i = 0, l = normals.count; i < l; i++, nbNormals++) {\n        this.normal.x = normals.getX(i);\n        this.normal.y = normals.getY(i);\n        this.normal.z = normals.getZ(i);\n        this.normal.applyMatrix3(normalMatrixWorld).normalize();\n        this.output += `vn ${this.normal.x} ${this.normal.y} ${this.normal.z}\n`;\n      }\n    }\n    if (indices !== null) {\n      for (let i = 0, l = indices.count; i < l; i += 3) {\n        for (let m = 0; m < 3; m++) {\n          const j = indices.getX(i + m) + 1;\n          this.face[m] = this.indexVertex + j + (normals || uvs ? `/${uvs ? this.indexVertexUvs + j : \"\"}${normals ? `/${this.indexNormals + j}` : \"\"}` : \"\");\n        }\n        this.output += `f ${this.face.join(\" \")}\n`;\n      }\n    } else {\n      for (let i = 0, l = vertices.count; i < l; i += 3) {\n        for (let m = 0; m < 3; m++) {\n          const j = i + m + 1;\n          this.face[m] = this.indexVertex + j + (normals || uvs ? `/${uvs ? this.indexVertexUvs + j : \"\"}${normals ? `/${this.indexNormals + j}` : \"\"}` : \"\");\n        }\n        this.output += `f ${this.face.join(\" \")}\n`;\n      }\n    }\n    this.indexVertex += nbVertex;\n    this.indexVertexUvs += nbVertexUvs;\n    this.indexNormals += nbNormals;\n  }\n  parseLine(line) {\n    let nbVertex = 0;\n    const geometry = line.geometry;\n    const type = line.type;\n    if (geometry.isBufferGeometry) {\n      throw new Error(\"THREE.OBJExporter: Geometry is not of type THREE.BufferGeometry.\");\n    }\n    const vertices = geometry.getAttribute(\"position\");\n    this.output += `o ${line.name}\n`;\n    if (vertices !== void 0) {\n      for (let i = 0, l = vertices.count; i < l; i++, nbVertex++) {\n        this.vertex.x = vertices.getX(i);\n        this.vertex.y = vertices.getY(i);\n        this.vertex.z = vertices.getZ(i);\n        this.vertex.applyMatrix4(line.matrixWorld);\n        this.output += `v ${this.vertex.x} ${this.vertex.y} ${this.vertex.z}\n`;\n      }\n    }\n    if (type === \"Line\") {\n      this.output += \"l \";\n      for (let j = 1, l = vertices.count; j <= l; j++) {\n        this.output += `${this.indexVertex + j} `;\n      }\n      this.output += \"\\n\";\n    }\n    if (type === \"LineSegments\") {\n      for (let j = 1, k = j + 1, l = vertices.count; j < l; j += 2, k = j + 1) {\n        this.output += `l ${this.indexVertex + j} ${this.indexVertex + k}\n`;\n      }\n    }\n    this.indexVertex += nbVertex;\n  }\n  parsePoints(points) {\n    let nbVertex = 0;\n    const geometry = points.geometry;\n    if (!geometry.isBufferGeometry) {\n      throw new Error(\"THREE.OBJExporter: Geometry is not of type THREE.BufferGeometry.\");\n    }\n    const vertices = geometry.getAttribute(\"position\");\n    const colors = geometry.getAttribute(\"color\");\n    this.output += `o ${points.name}\n`;\n    if (vertices !== void 0) {\n      for (let i = 0, l = vertices.count; i < l; i++, nbVertex++) {\n        this.vertex.fromBufferAttribute(vertices, i);\n        this.vertex.applyMatrix4(points.matrixWorld);\n        this.output += `v ${this.vertex.x} ${this.vertex.y} ${this.vertex.z}`;\n        if (colors !== void 0 && colors instanceof BufferAttribute) {\n          this.color.fromBufferAttribute(colors, i);\n          this.output += ` ${this.color.r} ${this.color.g} ${this.color.b}`;\n        }\n        this.output += \"\\n\";\n      }\n    }\n    this.output += \"p \";\n    for (let j = 1, l = vertices.count; j <= l; j++) {\n      this.output += `${this.indexVertex + j} `;\n    }\n    this.output += \"\\n\";\n    this.indexVertex += nbVertex;\n  }\n}\nexport {\n  OBJExporter\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}