{"ast":null,"code":"import { SUPPORTED_LANGUAGES } from './components/tokenizer/languages.js';\nimport { sprintf } from './utils.js';\nvar allLanguages = SUPPORTED_LANGUAGES.join('\\n - ');\nvar errors = {\n  NO_LANGUAGE_WITH_CUSTOM_TOKENIZER: 'Do not pass the language option to create when using a custom tokenizer.',\n  LANGUAGE_NOT_SUPPORTED: \"Language \\\"%s\\\" is not supported.\\nSupported languages are:\\n - \".concat(allLanguages),\n  INVALID_STEMMER_FUNCTION_TYPE: \"config.stemmer property must be a function.\",\n  MISSING_STEMMER: \"As of version 1.0.0 @orama/orama does not ship non English stemmers by default. To solve this, please explicitly import and specify the \\\"%s\\\" stemmer from the package @orama/stemmers. See https://docs.oramasearch.com/text-analysis/stemming for more information.\",\n  CUSTOM_STOP_WORDS_MUST_BE_FUNCTION_OR_ARRAY: 'Custom stop words array must only contain strings.',\n  UNSUPPORTED_COMPONENT: \"Unsupported component \\\"%s\\\".\",\n  COMPONENT_MUST_BE_FUNCTION: \"The component \\\"%s\\\" must be a function.\",\n  COMPONENT_MUST_BE_FUNCTION_OR_ARRAY_FUNCTIONS: \"The component \\\"%s\\\" must be a function or an array of functions.\",\n  INVALID_SCHEMA_TYPE: \"Unsupported schema type \\\"%s\\\" at \\\"%s\\\". Expected \\\"string\\\", \\\"boolean\\\" or \\\"number\\\" or array of them.\",\n  DOCUMENT_ID_MUST_BE_STRING: \"Document id must be of type \\\"string\\\". Got \\\"%s\\\" instead.\",\n  DOCUMENT_ALREADY_EXISTS: \"A document with id \\\"%s\\\" already exists.\",\n  DOCUMENT_DOES_NOT_EXIST: \"A document with id \\\"%s\\\" does not exists.\",\n  MISSING_DOCUMENT_PROPERTY: \"Missing searchable property \\\"%s\\\".\",\n  INVALID_DOCUMENT_PROPERTY: \"Invalid document property \\\"%s\\\": expected \\\"%s\\\", got \\\"%s\\\"\",\n  UNKNOWN_INDEX: \"Invalid property name \\\"%s\\\". Expected a wildcard string (\\\"*\\\") or array containing one of the following properties: %s\",\n  INVALID_BOOST_VALUE: \"Boost value must be a number greater than, or less than 0.\",\n  INVALID_FILTER_OPERATION: \"You can only use one operation per filter, you requested %d.\",\n  SCHEMA_VALIDATION_FAILURE: \"Cannot insert document due schema validation failure on \\\"%s\\\" property.\",\n  INVALID_SORT_SCHEMA_TYPE: \"Unsupported sort schema type \\\"%s\\\" at \\\"%s\\\". Expected \\\"string\\\" or \\\"number\\\".\",\n  CANNOT_SORT_BY_ARRAY: \"Cannot configure sort for \\\"%s\\\" because it is an array (%s).\",\n  UNABLE_TO_SORT_ON_UNKNOWN_FIELD: \"Unable to sort on unknown field \\\"%s\\\". Allowed fields: %s\",\n  SORT_DISABLED: \"Sort is disabled. Please read the documentation at https://docs.oramasearch for more information.\",\n  UNKNOWN_GROUP_BY_PROPERTY: \"Unknown groupBy property \\\"%s\\\".\",\n  INVALID_GROUP_BY_PROPERTY: \"Invalid groupBy property \\\"%s\\\". Allowed types: \\\"%s\\\", but given \\\"%s\\\".\"\n};\nexport function createError(code) {\n  var _errors$code;\n  for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n    args[_key - 1] = arguments[_key];\n  }\n  var error = new Error(sprintf.apply(void 0, [(_errors$code = errors[code]) !== null && _errors$code !== void 0 ? _errors$code : \"Unsupported Orama Error code: \".concat(code)].concat(args)));\n  error.code = code;\n  if ('captureStackTrace' in Error.prototype) {\n    Error.captureStackTrace(error);\n  }\n  return error;\n}","map":{"version":3,"names":["SUPPORTED_LANGUAGES","sprintf","allLanguages","join","errors","NO_LANGUAGE_WITH_CUSTOM_TOKENIZER","LANGUAGE_NOT_SUPPORTED","concat","INVALID_STEMMER_FUNCTION_TYPE","MISSING_STEMMER","CUSTOM_STOP_WORDS_MUST_BE_FUNCTION_OR_ARRAY","UNSUPPORTED_COMPONENT","COMPONENT_MUST_BE_FUNCTION","COMPONENT_MUST_BE_FUNCTION_OR_ARRAY_FUNCTIONS","INVALID_SCHEMA_TYPE","DOCUMENT_ID_MUST_BE_STRING","DOCUMENT_ALREADY_EXISTS","DOCUMENT_DOES_NOT_EXIST","MISSING_DOCUMENT_PROPERTY","INVALID_DOCUMENT_PROPERTY","UNKNOWN_INDEX","INVALID_BOOST_VALUE","INVALID_FILTER_OPERATION","SCHEMA_VALIDATION_FAILURE","INVALID_SORT_SCHEMA_TYPE","CANNOT_SORT_BY_ARRAY","UNABLE_TO_SORT_ON_UNKNOWN_FIELD","SORT_DISABLED","UNKNOWN_GROUP_BY_PROPERTY","INVALID_GROUP_BY_PROPERTY","createError","code","_errors$code","_len","arguments","length","args","Array","_key","error","Error","apply","prototype","captureStackTrace"],"sources":["/home/krug/Coding/JavaScript/Websites/Personal/personal/node_modules/.pnpm/@orama+orama@1.0.3/node_modules/@orama/orama/src/errors.ts"],"sourcesContent":["import { SUPPORTED_LANGUAGES } from './components/tokenizer/languages.js'\nimport { sprintf } from './utils.js'\n\nconst allLanguages = SUPPORTED_LANGUAGES.join('\\n - ')\n\nconst errors = {\n  NO_LANGUAGE_WITH_CUSTOM_TOKENIZER: 'Do not pass the language option to create when using a custom tokenizer.',\n  LANGUAGE_NOT_SUPPORTED: `Language \"%s\" is not supported.\\nSupported languages are:\\n - ${allLanguages}`,\n  INVALID_STEMMER_FUNCTION_TYPE: `config.stemmer property must be a function.`,\n  MISSING_STEMMER: `As of version 1.0.0 @orama/orama does not ship non English stemmers by default. To solve this, please explicitly import and specify the \"%s\" stemmer from the package @orama/stemmers. See https://docs.oramasearch.com/text-analysis/stemming for more information.`,\n  CUSTOM_STOP_WORDS_MUST_BE_FUNCTION_OR_ARRAY: 'Custom stop words array must only contain strings.',\n  UNSUPPORTED_COMPONENT: `Unsupported component \"%s\".`,\n  COMPONENT_MUST_BE_FUNCTION: `The component \"%s\" must be a function.`,\n  COMPONENT_MUST_BE_FUNCTION_OR_ARRAY_FUNCTIONS: `The component \"%s\" must be a function or an array of functions.`,\n  INVALID_SCHEMA_TYPE: `Unsupported schema type \"%s\" at \"%s\". Expected \"string\", \"boolean\" or \"number\" or array of them.`,\n  DOCUMENT_ID_MUST_BE_STRING: `Document id must be of type \"string\". Got \"%s\" instead.`,\n  DOCUMENT_ALREADY_EXISTS: `A document with id \"%s\" already exists.`,\n  DOCUMENT_DOES_NOT_EXIST: `A document with id \"%s\" does not exists.`,\n  MISSING_DOCUMENT_PROPERTY: `Missing searchable property \"%s\".`,\n  INVALID_DOCUMENT_PROPERTY: `Invalid document property \"%s\": expected \"%s\", got \"%s\"`,\n  UNKNOWN_INDEX: `Invalid property name \"%s\". Expected a wildcard string (\"*\") or array containing one of the following properties: %s`,\n  INVALID_BOOST_VALUE: `Boost value must be a number greater than, or less than 0.`,\n  INVALID_FILTER_OPERATION: `You can only use one operation per filter, you requested %d.`,\n  SCHEMA_VALIDATION_FAILURE: `Cannot insert document due schema validation failure on \"%s\" property.`,\n  INVALID_SORT_SCHEMA_TYPE: `Unsupported sort schema type \"%s\" at \"%s\". Expected \"string\" or \"number\".`,\n  CANNOT_SORT_BY_ARRAY: `Cannot configure sort for \"%s\" because it is an array (%s).`,\n  UNABLE_TO_SORT_ON_UNKNOWN_FIELD: `Unable to sort on unknown field \"%s\". Allowed fields: %s`,\n  SORT_DISABLED: `Sort is disabled. Please read the documentation at https://docs.oramasearch for more information.`,\n  UNKNOWN_GROUP_BY_PROPERTY: `Unknown groupBy property \"%s\".`,\n  INVALID_GROUP_BY_PROPERTY: `Invalid groupBy property \"%s\". Allowed types: \"%s\", but given \"%s\".`,\n}\n\nexport type ErrorCode = keyof typeof errors\n\nexport interface OramaError extends Error {\n  code: string\n}\n\nexport function createError(code: ErrorCode, ...args: Array<string | number>): OramaError {\n  const error = new Error(sprintf(errors[code] ?? `Unsupported Orama Error code: ${code}`, ...args)) as OramaError\n  error.code = code\n  if ('captureStackTrace' in Error.prototype) {\n    Error.captureStackTrace(error)\n  }\n\n  return error\n}\n"],"mappings":"AAAA,SAASA,mBAAmB,QAAQ;AACpC,SAASC,OAAO,QAAQ;AAExB,IAAMC,YAAA,GAAeF,mBAAA,CAAoBG,IAAI,CAAC;AAE9C,IAAMC,MAAA,GAAS;EACbC,iCAAA,EAAmC;EACnCC,sBAAA,qEAAAC,MAAA,CAAyFL,YAAA,CAAc;EACvGM,6BAAA,+CAA4E;EAC5EC,eAAA,0QAAuR;EACvRC,2CAAA,EAA6C;EAC7CC,qBAAA,iCAAoD;EACpDC,0BAAA,4CAAoE;EACpEC,6CAAA,qEAAgH;EAChHC,mBAAA,8GAAuH;EACvHC,0BAAA,+DAAqF;EACrFC,uBAAA,6CAAkE;EAClEC,uBAAA,8CAAmE;EACnEC,yBAAA,uCAA8D;EAC9DC,yBAAA,iEAAoF;EACpFC,aAAA,4HAAqI;EACrIC,mBAAA,8DAAiF;EACjFC,wBAAA,gEAAwF;EACxFC,yBAAA,4EAAmG;EACnGC,wBAAA,qFAAqG;EACrGC,oBAAA,iEAAmF;EACnFC,+BAAA,8DAA2F;EAC3FC,aAAA,qGAAkH;EAClHC,yBAAA,oCAA2D;EAC3DC,yBAAA;AACF;AAQA,OAAO,SAASC,YAAYC,IAAe,EAA+C;EAAA,IAAAC,YAAA;EAAA,SAAAC,IAAA,GAAAC,SAAA,CAAAC,MAAA,EAA1CC,IAA4B,OAAAC,KAAA,CAAAJ,IAAA,OAAAA,IAAA,WAAAK,IAAA,MAAAA,IAAA,GAAAL,IAAA,EAAAK,IAAA;IAA5BF,IAA4B,CAAAE,IAAA,QAAAJ,SAAA,CAAAI,IAAA;EAAA;EAC1E,IAAMC,KAAA,GAAQ,IAAIC,KAAA,CAAMvC,OAAA,CAAAwC,KAAA,WAAAT,YAAA,GAAQ5B,MAAM,CAAC2B,IAAA,CAAK,cAAAC,YAAA,cAAAA,YAAA,oCAAAzB,MAAA,CAAqCwB,IAAA,GAAAxB,MAAA,CAAW6B,IAAA;EAC5FG,KAAA,CAAMR,IAAI,GAAGA,IAAA;EACb,IAAI,uBAAuBS,KAAA,CAAME,SAAS,EAAE;IAC1CF,KAAA,CAAMG,iBAAiB,CAACJ,KAAA;EAC1B;EAEA,OAAOA,KAAA;AACT"},"metadata":{},"sourceType":"module","externalDependencies":[]}