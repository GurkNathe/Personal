{"ast":null,"code":"var __defProp = Object.defineProperty;\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value\n}) : obj[key] = value;\nvar __publicField = (obj, key, value) => {\n  __defNormalProp(obj, typeof key !== \"symbol\" ? key + \"\" : key, value);\n  return value;\n};\nimport { UniformsUtils, Vector2, ShaderMaterial } from \"three\";\nimport { Pass, FullScreenQuad } from \"./Pass.js\";\nclass WaterPass extends Pass {\n  constructor() {\n    super();\n    __publicField(this, \"material\");\n    __publicField(this, \"fsQuad\");\n    __publicField(this, \"factor\");\n    __publicField(this, \"time\");\n    __publicField(this, \"uniforms\");\n    this.uniforms = UniformsUtils.clone({\n      tex: {\n        value: null\n      },\n      time: {\n        value: 0\n      },\n      factor: {\n        value: 0\n      },\n      resolution: {\n        value: new Vector2(64, 64)\n      }\n    });\n    this.material = new ShaderMaterial({\n      uniforms: this.uniforms,\n      vertexShader: `\n      varying vec2 vUv;\n      void main(){  \n        vUv = uv; \n        vec4 modelViewPosition = modelViewMatrix * vec4(position, 1.0);\n        gl_Position = projectionMatrix * modelViewPosition;\n      }`,\n      fragmentShader: `\n      uniform float time;\n      uniform float factor;\n      uniform vec2 resolution;\n      uniform sampler2D tex;\n      varying vec2 vUv;\n      void main() {  \n        vec2 uv1 = vUv;\n        vec2 uv = gl_FragCoord.xy/resolution.xy;\n        float frequency = 6.0 * factor;\n        float amplitude = 0.015 * factor;\n        float x = uv1.y * frequency + time * .7; \n        float y = uv1.x * frequency + time * .3;\n        uv1.x += cos(x+y) * amplitude * cos(y);\n        uv1.y += sin(x-y) * amplitude * cos(y);\n        vec4 rgba = texture2D(tex, uv1);\n        gl_FragColor = rgba;\n      }`\n    });\n    this.fsQuad = new FullScreenQuad(this.material);\n    this.factor = 0;\n    this.time = 0;\n  }\n  render(renderer, writeBuffer, readBuffer) {\n    this.uniforms[\"tex\"].value = readBuffer.texture;\n    this.uniforms[\"time\"].value = this.time;\n    this.uniforms[\"factor\"].value = this.factor;\n    if (this.renderToScreen) {\n      renderer.setRenderTarget(null);\n      this.fsQuad.render(renderer);\n    } else {\n      renderer.setRenderTarget(writeBuffer);\n      if (this.clear) renderer.clear();\n      this.fsQuad.render(renderer);\n    }\n  }\n}\nexport { WaterPass };","map":{"version":3,"names":["__defProp","Object","defineProperty","__defNormalProp","obj","key","value","enumerable","configurable","writable","__publicField","UniformsUtils","Vector2","ShaderMaterial","Pass","FullScreenQuad","WaterPass","constructor","uniforms","clone","tex","time","factor","resolution","material","vertexShader","fragmentShader","fsQuad","render","renderer","writeBuffer","readBuffer","texture","renderToScreen","setRenderTarget","clear"],"sources":["/home/krug/Coding/JavaScript/Websites/Personal/personal/node_modules/.pnpm/three-stdlib@2.23.7_three@0.151.3/node_modules/three-stdlib/postprocessing/WaterPass.js"],"sourcesContent":["var __defProp = Object.defineProperty;\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;\nvar __publicField = (obj, key, value) => {\n  __defNormalProp(obj, typeof key !== \"symbol\" ? key + \"\" : key, value);\n  return value;\n};\nimport { UniformsUtils, Vector2, ShaderMaterial } from \"three\";\nimport { Pass, FullScreenQuad } from \"./Pass.js\";\nclass WaterPass extends Pass {\n  constructor() {\n    super();\n    __publicField(this, \"material\");\n    __publicField(this, \"fsQuad\");\n    __publicField(this, \"factor\");\n    __publicField(this, \"time\");\n    __publicField(this, \"uniforms\");\n    this.uniforms = UniformsUtils.clone({\n      tex: { value: null },\n      time: { value: 0 },\n      factor: { value: 0 },\n      resolution: { value: new Vector2(64, 64) }\n    });\n    this.material = new ShaderMaterial({\n      uniforms: this.uniforms,\n      vertexShader: `\n      varying vec2 vUv;\n      void main(){  \n        vUv = uv; \n        vec4 modelViewPosition = modelViewMatrix * vec4(position, 1.0);\n        gl_Position = projectionMatrix * modelViewPosition;\n      }`,\n      fragmentShader: `\n      uniform float time;\n      uniform float factor;\n      uniform vec2 resolution;\n      uniform sampler2D tex;\n      varying vec2 vUv;\n      void main() {  \n        vec2 uv1 = vUv;\n        vec2 uv = gl_FragCoord.xy/resolution.xy;\n        float frequency = 6.0 * factor;\n        float amplitude = 0.015 * factor;\n        float x = uv1.y * frequency + time * .7; \n        float y = uv1.x * frequency + time * .3;\n        uv1.x += cos(x+y) * amplitude * cos(y);\n        uv1.y += sin(x-y) * amplitude * cos(y);\n        vec4 rgba = texture2D(tex, uv1);\n        gl_FragColor = rgba;\n      }`\n    });\n    this.fsQuad = new FullScreenQuad(this.material);\n    this.factor = 0;\n    this.time = 0;\n  }\n  render(renderer, writeBuffer, readBuffer) {\n    this.uniforms[\"tex\"].value = readBuffer.texture;\n    this.uniforms[\"time\"].value = this.time;\n    this.uniforms[\"factor\"].value = this.factor;\n    if (this.renderToScreen) {\n      renderer.setRenderTarget(null);\n      this.fsQuad.render(renderer);\n    } else {\n      renderer.setRenderTarget(writeBuffer);\n      if (this.clear)\n        renderer.clear();\n      this.fsQuad.render(renderer);\n    }\n  }\n}\nexport {\n  WaterPass\n};\n"],"mappings":"AAAA,IAAIA,SAAS,GAAGC,MAAM,CAACC,cAAc;AACrC,IAAIC,eAAe,GAAGA,CAACC,GAAG,EAAEC,GAAG,EAAEC,KAAK,KAAKD,GAAG,IAAID,GAAG,GAAGJ,SAAS,CAACI,GAAG,EAAEC,GAAG,EAAE;EAAEE,UAAU,EAAE,IAAI;EAAEC,YAAY,EAAE,IAAI;EAAEC,QAAQ,EAAE,IAAI;EAAEH;AAAM,CAAC,CAAC,GAAGF,GAAG,CAACC,GAAG,CAAC,GAAGC,KAAK;AAC/J,IAAII,aAAa,GAAGA,CAACN,GAAG,EAAEC,GAAG,EAAEC,KAAK,KAAK;EACvCH,eAAe,CAACC,GAAG,EAAE,OAAOC,GAAG,KAAK,QAAQ,GAAGA,GAAG,GAAG,EAAE,GAAGA,GAAG,EAAEC,KAAK,CAAC;EACrE,OAAOA,KAAK;AACd,CAAC;AACD,SAASK,aAAa,EAAEC,OAAO,EAAEC,cAAc,QAAQ,OAAO;AAC9D,SAASC,IAAI,EAAEC,cAAc,QAAQ,WAAW;AAChD,MAAMC,SAAS,SAASF,IAAI,CAAC;EAC3BG,WAAWA,CAAA,EAAG;IACZ,KAAK,CAAC,CAAC;IACPP,aAAa,CAAC,IAAI,EAAE,UAAU,CAAC;IAC/BA,aAAa,CAAC,IAAI,EAAE,QAAQ,CAAC;IAC7BA,aAAa,CAAC,IAAI,EAAE,QAAQ,CAAC;IAC7BA,aAAa,CAAC,IAAI,EAAE,MAAM,CAAC;IAC3BA,aAAa,CAAC,IAAI,EAAE,UAAU,CAAC;IAC/B,IAAI,CAACQ,QAAQ,GAAGP,aAAa,CAACQ,KAAK,CAAC;MAClCC,GAAG,EAAE;QAAEd,KAAK,EAAE;MAAK,CAAC;MACpBe,IAAI,EAAE;QAAEf,KAAK,EAAE;MAAE,CAAC;MAClBgB,MAAM,EAAE;QAAEhB,KAAK,EAAE;MAAE,CAAC;MACpBiB,UAAU,EAAE;QAAEjB,KAAK,EAAE,IAAIM,OAAO,CAAC,EAAE,EAAE,EAAE;MAAE;IAC3C,CAAC,CAAC;IACF,IAAI,CAACY,QAAQ,GAAG,IAAIX,cAAc,CAAC;MACjCK,QAAQ,EAAE,IAAI,CAACA,QAAQ;MACvBO,YAAY,EAAG;AACrB;AACA;AACA;AACA;AACA;AACA,QAAQ;MACFC,cAAc,EAAG;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACI,CAAC,CAAC;IACF,IAAI,CAACC,MAAM,GAAG,IAAIZ,cAAc,CAAC,IAAI,CAACS,QAAQ,CAAC;IAC/C,IAAI,CAACF,MAAM,GAAG,CAAC;IACf,IAAI,CAACD,IAAI,GAAG,CAAC;EACf;EACAO,MAAMA,CAACC,QAAQ,EAAEC,WAAW,EAAEC,UAAU,EAAE;IACxC,IAAI,CAACb,QAAQ,CAAC,KAAK,CAAC,CAACZ,KAAK,GAAGyB,UAAU,CAACC,OAAO;IAC/C,IAAI,CAACd,QAAQ,CAAC,MAAM,CAAC,CAACZ,KAAK,GAAG,IAAI,CAACe,IAAI;IACvC,IAAI,CAACH,QAAQ,CAAC,QAAQ,CAAC,CAACZ,KAAK,GAAG,IAAI,CAACgB,MAAM;IAC3C,IAAI,IAAI,CAACW,cAAc,EAAE;MACvBJ,QAAQ,CAACK,eAAe,CAAC,IAAI,CAAC;MAC9B,IAAI,CAACP,MAAM,CAACC,MAAM,CAACC,QAAQ,CAAC;IAC9B,CAAC,MAAM;MACLA,QAAQ,CAACK,eAAe,CAACJ,WAAW,CAAC;MACrC,IAAI,IAAI,CAACK,KAAK,EACZN,QAAQ,CAACM,KAAK,CAAC,CAAC;MAClB,IAAI,CAACR,MAAM,CAACC,MAAM,CAACC,QAAQ,CAAC;IAC9B;EACF;AACF;AACA,SACEb,SAAS"},"metadata":{},"sourceType":"module","externalDependencies":[]}