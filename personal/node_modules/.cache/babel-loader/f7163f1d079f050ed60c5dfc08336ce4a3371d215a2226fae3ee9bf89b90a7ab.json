{"ast":null,"code":"import { createError } from '../errors.js';\nexport function prioritizeTokenScores(arrays, boost, threshold = 1, keywordsCount) {\n  if (boost === 0) {\n    throw createError('INVALID_BOOST_VALUE');\n  }\n  const tokenScoresMap = new Map();\n  const tokenKeywordsCountMap = new Map();\n  const mapsLength = arrays.length;\n  for (let i = 0; i < mapsLength; i++) {\n    const arr = arrays[i];\n    const entriesLength = arr.length;\n    for (let j = 0; j < entriesLength; j++) {\n      const [token, score] = arr[j];\n      const boostScore = score * boost;\n      const oldScore = tokenScoresMap.get(token);\n      if (oldScore !== undefined) {\n        tokenScoresMap.set(token, oldScore * 1.5 + boostScore);\n        tokenKeywordsCountMap.set(token, tokenKeywordsCountMap.get(token) + 1);\n      } else {\n        tokenScoresMap.set(token, boostScore);\n        tokenKeywordsCountMap.set(token, 1);\n      }\n    }\n  }\n  const tokenScores = [];\n  for (const tokenScoreEntry of tokenScoresMap.entries()) {\n    tokenScores.push(tokenScoreEntry);\n  }\n  const results = tokenScores.sort((a, b) => b[1] - a[1]);\n  // If threshold is 1, it means we will return all the results with at least one search term,\n  // prioritizig the ones that contains more search terms (fuzzy match)\n  if (threshold === 1) {\n    return results;\n  }\n  // Prepare keywords count tracking for threshold handling\n  const allResults = results.length;\n  const tokenKeywordsCount = [];\n  for (const tokenKeywordsCountEntry of tokenKeywordsCountMap.entries()) {\n    tokenKeywordsCount.push(tokenKeywordsCountEntry);\n  }\n  // Find the index of the last result with all keywords.\n  // Note that since score is multipled by 1.5 any time the token is encountered in results it means\n  // that tokenScores and tokenKeywordsCount should always have the same order.\n  const keywordsPerToken = tokenKeywordsCount.sort((a, b) => b[1] - a[1]);\n  let lastTokenWithAllKeywords = undefined;\n  for (let i = 0; i < allResults; i++) {\n    if (keywordsPerToken[i][1] === keywordsCount) {\n      lastTokenWithAllKeywords = i;\n    } else {\n      break;\n    }\n  }\n  // If no results had all the keywords, either bail out earlier or normalize\n  if (typeof lastTokenWithAllKeywords === 'undefined') {\n    if (threshold === 0) {\n      return [];\n    }\n    lastTokenWithAllKeywords = 0;\n  }\n  // If threshold is 0, it means we will only return all the results that contains ALL the search terms (exact match)\n  if (threshold === 0) {\n    return results.slice(0, lastTokenWithAllKeywords + 1);\n  }\n  // If the threshold is between 0 and 1, we will return all the results that contains at least the threshold of search terms\n  // For example, if threshold is 0.5, we will return all the results that contains at least 50% of the search terms\n  // (fuzzy match with a minimum threshold)\n  const thresholdLength = lastTokenWithAllKeywords + Math.ceil(threshold * 100 * (results.length - lastTokenWithAllKeywords) / 100);\n  return results.slice(0, results.length + thresholdLength);\n}\nexport function BM25(tf, matchingCount, docsCount, fieldLength, averageFieldLength, BM25Params) {\n  const {\n    k,\n    b,\n    d\n  } = BM25Params;\n  const idf = Math.log(1 + (docsCount - matchingCount + 0.5) / (matchingCount + 0.5));\n  return idf * (d + tf * (k + 1)) / (tf + k * (1 - b + b * fieldLength / averageFieldLength));\n}","map":{"version":3,"names":["createError","prioritizeTokenScores","arrays","boost","threshold","keywordsCount","tokenScoresMap","Map","tokenKeywordsCountMap","mapsLength","length","i","arr","entriesLength","j","token","score","boostScore","oldScore","get","undefined","set","tokenScores","tokenScoreEntry","entries","push","results","sort","a","b","allResults","tokenKeywordsCount","tokenKeywordsCountEntry","keywordsPerToken","lastTokenWithAllKeywords","slice","thresholdLength","Math","ceil","BM25","tf","matchingCount","docsCount","fieldLength","averageFieldLength","BM25Params","k","d","idf","log"],"sources":["/home/krug/Coding/JavaScript/Websites/Personal/personal/node_modules/.pnpm/@orama+orama@1.2.11/node_modules/@orama/orama/src/components/algorithms.ts"],"sourcesContent":["import { createError } from '../errors.js'\nimport { TokenScore, BM25Params } from '../types.js'\nimport { InternalDocumentID } from './internal-document-id-store.js'\n\nexport function prioritizeTokenScores(\n  arrays: TokenScore[][],\n  boost: number,\n  threshold = 1,\n  keywordsCount: number,\n): TokenScore[] {\n  if (boost === 0) {\n    throw createError('INVALID_BOOST_VALUE')\n  }\n\n  const tokenScoresMap = new Map<InternalDocumentID, number>()\n  const tokenKeywordsCountMap = new Map<InternalDocumentID, number>()\n\n  const mapsLength = arrays.length\n  for (let i = 0; i < mapsLength; i++) {\n    const arr = arrays[i]\n\n    const entriesLength = arr.length\n    for (let j = 0; j < entriesLength; j++) {\n      const [token, score] = arr[j]\n      const boostScore = score * boost\n      const oldScore = tokenScoresMap.get(token)\n\n      if (oldScore !== undefined) {\n        tokenScoresMap.set(token, oldScore * 1.5 + boostScore)\n        tokenKeywordsCountMap.set(token, tokenKeywordsCountMap.get(token)! + 1)\n      } else {\n        tokenScoresMap.set(token, boostScore)\n        tokenKeywordsCountMap.set(token, 1)\n      }\n    }\n  }\n\n  const tokenScores: TokenScore[] = []\n\n  for (const tokenScoreEntry of tokenScoresMap.entries()) {\n    tokenScores.push(tokenScoreEntry)\n  }\n\n  const results = tokenScores.sort((a, b) => b[1] - a[1])\n\n  // If threshold is 1, it means we will return all the results with at least one search term,\n  // prioritizig the ones that contains more search terms (fuzzy match)\n  if (threshold === 1) {\n    return results\n  }\n\n  // Prepare keywords count tracking for threshold handling\n  const allResults = results.length\n  const tokenKeywordsCount: [InternalDocumentID, number][] = []\n\n  for (const tokenKeywordsCountEntry of tokenKeywordsCountMap.entries()) {\n    tokenKeywordsCount.push(tokenKeywordsCountEntry)\n  }\n\n  // Find the index of the last result with all keywords.\n  // Note that since score is multipled by 1.5 any time the token is encountered in results it means\n  // that tokenScores and tokenKeywordsCount should always have the same order.\n  const keywordsPerToken = tokenKeywordsCount.sort((a, b) => b[1] - a[1])\n\n  let lastTokenWithAllKeywords: number | undefined = undefined\n  for (let i = 0; i < allResults; i++) {\n    if (keywordsPerToken[i][1] === keywordsCount) {\n      lastTokenWithAllKeywords = i\n    } else {\n      break\n    }\n  }\n\n  // If no results had all the keywords, either bail out earlier or normalize\n  if (typeof lastTokenWithAllKeywords === 'undefined') {\n    if (threshold === 0) {\n      return []\n    }\n\n    lastTokenWithAllKeywords = 0\n  }\n\n  // If threshold is 0, it means we will only return all the results that contains ALL the search terms (exact match)\n  if (threshold === 0) {\n    return results.slice(0, lastTokenWithAllKeywords + 1)\n  }\n\n  // If the threshold is between 0 and 1, we will return all the results that contains at least the threshold of search terms\n  // For example, if threshold is 0.5, we will return all the results that contains at least 50% of the search terms\n  // (fuzzy match with a minimum threshold)\n  const thresholdLength =\n    lastTokenWithAllKeywords + Math.ceil((threshold * 100 * (results.length - lastTokenWithAllKeywords)) / 100)\n\n  return results.slice(0, results.length + thresholdLength)\n}\n\nexport function BM25(\n  tf: number,\n  matchingCount: number,\n  docsCount: number,\n  fieldLength: number,\n  averageFieldLength: number,\n  BM25Params: Required<BM25Params>,\n) {\n  const { k, b, d } = BM25Params\n  const idf = Math.log(1 + (docsCount - matchingCount + 0.5) / (matchingCount + 0.5))\n  return (idf * (d + tf * (k + 1))) / (tf + k * (1 - b + (b * fieldLength) / averageFieldLength))\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}