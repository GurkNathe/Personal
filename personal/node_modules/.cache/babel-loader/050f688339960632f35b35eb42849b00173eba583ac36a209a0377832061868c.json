{"ast":null,"code":"import { Loader, FileLoader, LoaderUtils, BufferGeometry, Float32BufferAttribute, PointsMaterial, Points } from \"three\";\nclass PCDLoader extends Loader {\n  constructor(manager) {\n    super(manager);\n    this.littleEndian = true;\n  }\n  load(url, onLoad, onProgress, onError) {\n    const scope = this;\n    const loader = new FileLoader(scope.manager);\n    loader.setPath(scope.path);\n    loader.setResponseType(\"arraybuffer\");\n    loader.setRequestHeader(scope.requestHeader);\n    loader.setWithCredentials(scope.withCredentials);\n    loader.load(url, function (data) {\n      try {\n        onLoad(scope.parse(data, url));\n      } catch (e) {\n        if (onError) {\n          onError(e);\n        } else {\n          console.error(e);\n        }\n        scope.manager.itemError(url);\n      }\n    }, onProgress, onError);\n  }\n  parse(data, url) {\n    function decompressLZF(inData, outLength) {\n      const inLength = inData.length;\n      const outData = new Uint8Array(outLength);\n      let inPtr = 0;\n      let outPtr = 0;\n      let ctrl;\n      let len;\n      let ref;\n      do {\n        ctrl = inData[inPtr++];\n        if (ctrl < 1 << 5) {\n          ctrl++;\n          if (outPtr + ctrl > outLength) throw new Error(\"Output buffer is not large enough\");\n          if (inPtr + ctrl > inLength) throw new Error(\"Invalid compressed data\");\n          do {\n            outData[outPtr++] = inData[inPtr++];\n          } while (--ctrl);\n        } else {\n          len = ctrl >> 5;\n          ref = outPtr - ((ctrl & 31) << 8) - 1;\n          if (inPtr >= inLength) throw new Error(\"Invalid compressed data\");\n          if (len === 7) {\n            len += inData[inPtr++];\n            if (inPtr >= inLength) throw new Error(\"Invalid compressed data\");\n          }\n          ref -= inData[inPtr++];\n          if (outPtr + len + 2 > outLength) throw new Error(\"Output buffer is not large enough\");\n          if (ref < 0) throw new Error(\"Invalid compressed data\");\n          if (ref >= outPtr) throw new Error(\"Invalid compressed data\");\n          do {\n            outData[outPtr++] = outData[ref++];\n          } while (--len + 2);\n        }\n      } while (inPtr < inLength);\n      return outData;\n    }\n    function parseHeader(data2) {\n      const PCDheader2 = {};\n      const result1 = data2.search(/[\\r\\n]DATA\\s(\\S*)\\s/i);\n      const result2 = /[\\r\\n]DATA\\s(\\S*)\\s/i.exec(data2.substr(result1 - 1));\n      PCDheader2.data = result2[1];\n      PCDheader2.headerLen = result2[0].length + result1;\n      PCDheader2.str = data2.substr(0, PCDheader2.headerLen);\n      PCDheader2.str = PCDheader2.str.replace(/\\#.*/gi, \"\");\n      PCDheader2.version = /VERSION (.*)/i.exec(PCDheader2.str);\n      PCDheader2.fields = /FIELDS (.*)/i.exec(PCDheader2.str);\n      PCDheader2.size = /SIZE (.*)/i.exec(PCDheader2.str);\n      PCDheader2.type = /TYPE (.*)/i.exec(PCDheader2.str);\n      PCDheader2.count = /COUNT (.*)/i.exec(PCDheader2.str);\n      PCDheader2.width = /WIDTH (.*)/i.exec(PCDheader2.str);\n      PCDheader2.height = /HEIGHT (.*)/i.exec(PCDheader2.str);\n      PCDheader2.viewpoint = /VIEWPOINT (.*)/i.exec(PCDheader2.str);\n      PCDheader2.points = /POINTS (.*)/i.exec(PCDheader2.str);\n      if (PCDheader2.version !== null) PCDheader2.version = parseFloat(PCDheader2.version[1]);\n      if (PCDheader2.fields !== null) PCDheader2.fields = PCDheader2.fields[1].split(\" \");\n      if (PCDheader2.type !== null) PCDheader2.type = PCDheader2.type[1].split(\" \");\n      if (PCDheader2.width !== null) PCDheader2.width = parseInt(PCDheader2.width[1]);\n      if (PCDheader2.height !== null) PCDheader2.height = parseInt(PCDheader2.height[1]);\n      if (PCDheader2.viewpoint !== null) PCDheader2.viewpoint = PCDheader2.viewpoint[1];\n      if (PCDheader2.points !== null) PCDheader2.points = parseInt(PCDheader2.points[1], 10);\n      if (PCDheader2.points === null) PCDheader2.points = PCDheader2.width * PCDheader2.height;\n      if (PCDheader2.size !== null) {\n        PCDheader2.size = PCDheader2.size[1].split(\" \").map(function (x) {\n          return parseInt(x, 10);\n        });\n      }\n      if (PCDheader2.count !== null) {\n        PCDheader2.count = PCDheader2.count[1].split(\" \").map(function (x) {\n          return parseInt(x, 10);\n        });\n      } else {\n        PCDheader2.count = [];\n        for (let i = 0, l = PCDheader2.fields.length; i < l; i++) {\n          PCDheader2.count.push(1);\n        }\n      }\n      PCDheader2.offset = {};\n      let sizeSum = 0;\n      for (let i = 0, l = PCDheader2.fields.length; i < l; i++) {\n        if (PCDheader2.data === \"ascii\") {\n          PCDheader2.offset[PCDheader2.fields[i]] = i;\n        } else {\n          PCDheader2.offset[PCDheader2.fields[i]] = sizeSum;\n          sizeSum += PCDheader2.size[i] * PCDheader2.count[i];\n        }\n      }\n      PCDheader2.rowSize = sizeSum;\n      return PCDheader2;\n    }\n    const textData = LoaderUtils.decodeText(new Uint8Array(data));\n    const PCDheader = parseHeader(textData);\n    const position = [];\n    const normal = [];\n    const color = [];\n    if (PCDheader.data === \"ascii\") {\n      const offset = PCDheader.offset;\n      const pcdData = textData.substr(PCDheader.headerLen);\n      const lines = pcdData.split(\"\\n\");\n      for (let i = 0, l = lines.length; i < l; i++) {\n        if (lines[i] === \"\") continue;\n        const line = lines[i].split(\" \");\n        if (offset.x !== void 0) {\n          position.push(parseFloat(line[offset.x]));\n          position.push(parseFloat(line[offset.y]));\n          position.push(parseFloat(line[offset.z]));\n        }\n        if (offset.rgb !== void 0) {\n          const rgb = parseFloat(line[offset.rgb]);\n          const r = rgb >> 16 & 255;\n          const g = rgb >> 8 & 255;\n          const b = rgb >> 0 & 255;\n          color.push(r / 255, g / 255, b / 255);\n        }\n        if (offset.normal_x !== void 0) {\n          normal.push(parseFloat(line[offset.normal_x]));\n          normal.push(parseFloat(line[offset.normal_y]));\n          normal.push(parseFloat(line[offset.normal_z]));\n        }\n      }\n    }\n    if (PCDheader.data === \"binary_compressed\") {\n      const sizes = new Uint32Array(data.slice(PCDheader.headerLen, PCDheader.headerLen + 8));\n      const compressedSize = sizes[0];\n      const decompressedSize = sizes[1];\n      const decompressed = decompressLZF(new Uint8Array(data, PCDheader.headerLen + 8, compressedSize), decompressedSize);\n      const dataview = new DataView(decompressed.buffer);\n      const offset = PCDheader.offset;\n      for (let i = 0; i < PCDheader.points; i++) {\n        if (offset.x !== void 0) {\n          position.push(dataview.getFloat32(PCDheader.points * offset.x + PCDheader.size[0] * i, this.littleEndian));\n          position.push(dataview.getFloat32(PCDheader.points * offset.y + PCDheader.size[1] * i, this.littleEndian));\n          position.push(dataview.getFloat32(PCDheader.points * offset.z + PCDheader.size[2] * i, this.littleEndian));\n        }\n        if (offset.rgb !== void 0) {\n          color.push(dataview.getUint8(PCDheader.points * offset.rgb + PCDheader.size[3] * i + 2) / 255);\n          color.push(dataview.getUint8(PCDheader.points * offset.rgb + PCDheader.size[3] * i + 1) / 255);\n          color.push(dataview.getUint8(PCDheader.points * offset.rgb + PCDheader.size[3] * i + 0) / 255);\n        }\n        if (offset.normal_x !== void 0) {\n          normal.push(dataview.getFloat32(PCDheader.points * offset.normal_x + PCDheader.size[4] * i, this.littleEndian));\n          normal.push(dataview.getFloat32(PCDheader.points * offset.normal_y + PCDheader.size[5] * i, this.littleEndian));\n          normal.push(dataview.getFloat32(PCDheader.points * offset.normal_z + PCDheader.size[6] * i, this.littleEndian));\n        }\n      }\n    }\n    if (PCDheader.data === \"binary\") {\n      const dataview = new DataView(data, PCDheader.headerLen);\n      const offset = PCDheader.offset;\n      for (let i = 0, row = 0; i < PCDheader.points; i++, row += PCDheader.rowSize) {\n        if (offset.x !== void 0) {\n          position.push(dataview.getFloat32(row + offset.x, this.littleEndian));\n          position.push(dataview.getFloat32(row + offset.y, this.littleEndian));\n          position.push(dataview.getFloat32(row + offset.z, this.littleEndian));\n        }\n        if (offset.rgb !== void 0) {\n          color.push(dataview.getUint8(row + offset.rgb + 2) / 255);\n          color.push(dataview.getUint8(row + offset.rgb + 1) / 255);\n          color.push(dataview.getUint8(row + offset.rgb + 0) / 255);\n        }\n        if (offset.normal_x !== void 0) {\n          normal.push(dataview.getFloat32(row + offset.normal_x, this.littleEndian));\n          normal.push(dataview.getFloat32(row + offset.normal_y, this.littleEndian));\n          normal.push(dataview.getFloat32(row + offset.normal_z, this.littleEndian));\n        }\n      }\n    }\n    const geometry = new BufferGeometry();\n    if (position.length > 0) geometry.setAttribute(\"position\", new Float32BufferAttribute(position, 3));\n    if (normal.length > 0) geometry.setAttribute(\"normal\", new Float32BufferAttribute(normal, 3));\n    if (color.length > 0) geometry.setAttribute(\"color\", new Float32BufferAttribute(color, 3));\n    geometry.computeBoundingSphere();\n    const material = new PointsMaterial({\n      size: 5e-3\n    });\n    if (color.length > 0) {\n      material.vertexColors = true;\n    } else {\n      material.color.setHex(Math.random() * 16777215);\n    }\n    const mesh = new Points(geometry, material);\n    let name = url.split(\"\").reverse().join(\"\");\n    name = /([^\\/]*)/.exec(name);\n    name = name[1].split(\"\").reverse().join(\"\");\n    mesh.name = name;\n    return mesh;\n  }\n}\nexport { PCDLoader };","map":{"version":3,"names":["Loader","FileLoader","LoaderUtils","BufferGeometry","Float32BufferAttribute","PointsMaterial","Points","PCDLoader","constructor","manager","littleEndian","load","url","onLoad","onProgress","onError","scope","loader","setPath","path","setResponseType","setRequestHeader","requestHeader","setWithCredentials","withCredentials","data","parse","e","console","error","itemError","decompressLZF","inData","outLength","inLength","length","outData","Uint8Array","inPtr","outPtr","ctrl","len","ref","Error","parseHeader","data2","PCDheader2","result1","search","result2","exec","substr","headerLen","str","replace","version","fields","size","type","count","width","height","viewpoint","points","parseFloat","split","parseInt","map","x","i","l","push","offset","sizeSum","rowSize","textData","decodeText","PCDheader","position","normal","color","pcdData","lines","line","y","z","rgb","r","g","b","normal_x","normal_y","normal_z","sizes","Uint32Array","slice","compressedSize","decompressedSize","decompressed","dataview","DataView","buffer","getFloat32","getUint8","row","geometry","setAttribute","computeBoundingSphere","material","vertexColors","setHex","Math","random","mesh","name","reverse","join"],"sources":["/home/krug/Coding/JavaScript/Websites/Personal/personal/node_modules/.pnpm/three-stdlib@2.23.7_three@0.151.3/node_modules/three-stdlib/loaders/PCDLoader.js"],"sourcesContent":["import { Loader, FileLoader, LoaderUtils, BufferGeometry, Float32BufferAttribute, PointsMaterial, Points } from \"three\";\nclass PCDLoader extends Loader {\n  constructor(manager) {\n    super(manager);\n    this.littleEndian = true;\n  }\n  load(url, onLoad, onProgress, onError) {\n    const scope = this;\n    const loader = new FileLoader(scope.manager);\n    loader.setPath(scope.path);\n    loader.setResponseType(\"arraybuffer\");\n    loader.setRequestHeader(scope.requestHeader);\n    loader.setWithCredentials(scope.withCredentials);\n    loader.load(\n      url,\n      function(data) {\n        try {\n          onLoad(scope.parse(data, url));\n        } catch (e) {\n          if (onError) {\n            onError(e);\n          } else {\n            console.error(e);\n          }\n          scope.manager.itemError(url);\n        }\n      },\n      onProgress,\n      onError\n    );\n  }\n  parse(data, url) {\n    function decompressLZF(inData, outLength) {\n      const inLength = inData.length;\n      const outData = new Uint8Array(outLength);\n      let inPtr = 0;\n      let outPtr = 0;\n      let ctrl;\n      let len;\n      let ref;\n      do {\n        ctrl = inData[inPtr++];\n        if (ctrl < 1 << 5) {\n          ctrl++;\n          if (outPtr + ctrl > outLength)\n            throw new Error(\"Output buffer is not large enough\");\n          if (inPtr + ctrl > inLength)\n            throw new Error(\"Invalid compressed data\");\n          do {\n            outData[outPtr++] = inData[inPtr++];\n          } while (--ctrl);\n        } else {\n          len = ctrl >> 5;\n          ref = outPtr - ((ctrl & 31) << 8) - 1;\n          if (inPtr >= inLength)\n            throw new Error(\"Invalid compressed data\");\n          if (len === 7) {\n            len += inData[inPtr++];\n            if (inPtr >= inLength)\n              throw new Error(\"Invalid compressed data\");\n          }\n          ref -= inData[inPtr++];\n          if (outPtr + len + 2 > outLength)\n            throw new Error(\"Output buffer is not large enough\");\n          if (ref < 0)\n            throw new Error(\"Invalid compressed data\");\n          if (ref >= outPtr)\n            throw new Error(\"Invalid compressed data\");\n          do {\n            outData[outPtr++] = outData[ref++];\n          } while (--len + 2);\n        }\n      } while (inPtr < inLength);\n      return outData;\n    }\n    function parseHeader(data2) {\n      const PCDheader2 = {};\n      const result1 = data2.search(/[\\r\\n]DATA\\s(\\S*)\\s/i);\n      const result2 = /[\\r\\n]DATA\\s(\\S*)\\s/i.exec(data2.substr(result1 - 1));\n      PCDheader2.data = result2[1];\n      PCDheader2.headerLen = result2[0].length + result1;\n      PCDheader2.str = data2.substr(0, PCDheader2.headerLen);\n      PCDheader2.str = PCDheader2.str.replace(/\\#.*/gi, \"\");\n      PCDheader2.version = /VERSION (.*)/i.exec(PCDheader2.str);\n      PCDheader2.fields = /FIELDS (.*)/i.exec(PCDheader2.str);\n      PCDheader2.size = /SIZE (.*)/i.exec(PCDheader2.str);\n      PCDheader2.type = /TYPE (.*)/i.exec(PCDheader2.str);\n      PCDheader2.count = /COUNT (.*)/i.exec(PCDheader2.str);\n      PCDheader2.width = /WIDTH (.*)/i.exec(PCDheader2.str);\n      PCDheader2.height = /HEIGHT (.*)/i.exec(PCDheader2.str);\n      PCDheader2.viewpoint = /VIEWPOINT (.*)/i.exec(PCDheader2.str);\n      PCDheader2.points = /POINTS (.*)/i.exec(PCDheader2.str);\n      if (PCDheader2.version !== null)\n        PCDheader2.version = parseFloat(PCDheader2.version[1]);\n      if (PCDheader2.fields !== null)\n        PCDheader2.fields = PCDheader2.fields[1].split(\" \");\n      if (PCDheader2.type !== null)\n        PCDheader2.type = PCDheader2.type[1].split(\" \");\n      if (PCDheader2.width !== null)\n        PCDheader2.width = parseInt(PCDheader2.width[1]);\n      if (PCDheader2.height !== null)\n        PCDheader2.height = parseInt(PCDheader2.height[1]);\n      if (PCDheader2.viewpoint !== null)\n        PCDheader2.viewpoint = PCDheader2.viewpoint[1];\n      if (PCDheader2.points !== null)\n        PCDheader2.points = parseInt(PCDheader2.points[1], 10);\n      if (PCDheader2.points === null)\n        PCDheader2.points = PCDheader2.width * PCDheader2.height;\n      if (PCDheader2.size !== null) {\n        PCDheader2.size = PCDheader2.size[1].split(\" \").map(function(x) {\n          return parseInt(x, 10);\n        });\n      }\n      if (PCDheader2.count !== null) {\n        PCDheader2.count = PCDheader2.count[1].split(\" \").map(function(x) {\n          return parseInt(x, 10);\n        });\n      } else {\n        PCDheader2.count = [];\n        for (let i = 0, l = PCDheader2.fields.length; i < l; i++) {\n          PCDheader2.count.push(1);\n        }\n      }\n      PCDheader2.offset = {};\n      let sizeSum = 0;\n      for (let i = 0, l = PCDheader2.fields.length; i < l; i++) {\n        if (PCDheader2.data === \"ascii\") {\n          PCDheader2.offset[PCDheader2.fields[i]] = i;\n        } else {\n          PCDheader2.offset[PCDheader2.fields[i]] = sizeSum;\n          sizeSum += PCDheader2.size[i] * PCDheader2.count[i];\n        }\n      }\n      PCDheader2.rowSize = sizeSum;\n      return PCDheader2;\n    }\n    const textData = LoaderUtils.decodeText(new Uint8Array(data));\n    const PCDheader = parseHeader(textData);\n    const position = [];\n    const normal = [];\n    const color = [];\n    if (PCDheader.data === \"ascii\") {\n      const offset = PCDheader.offset;\n      const pcdData = textData.substr(PCDheader.headerLen);\n      const lines = pcdData.split(\"\\n\");\n      for (let i = 0, l = lines.length; i < l; i++) {\n        if (lines[i] === \"\")\n          continue;\n        const line = lines[i].split(\" \");\n        if (offset.x !== void 0) {\n          position.push(parseFloat(line[offset.x]));\n          position.push(parseFloat(line[offset.y]));\n          position.push(parseFloat(line[offset.z]));\n        }\n        if (offset.rgb !== void 0) {\n          const rgb = parseFloat(line[offset.rgb]);\n          const r = rgb >> 16 & 255;\n          const g = rgb >> 8 & 255;\n          const b = rgb >> 0 & 255;\n          color.push(r / 255, g / 255, b / 255);\n        }\n        if (offset.normal_x !== void 0) {\n          normal.push(parseFloat(line[offset.normal_x]));\n          normal.push(parseFloat(line[offset.normal_y]));\n          normal.push(parseFloat(line[offset.normal_z]));\n        }\n      }\n    }\n    if (PCDheader.data === \"binary_compressed\") {\n      const sizes = new Uint32Array(data.slice(PCDheader.headerLen, PCDheader.headerLen + 8));\n      const compressedSize = sizes[0];\n      const decompressedSize = sizes[1];\n      const decompressed = decompressLZF(\n        new Uint8Array(data, PCDheader.headerLen + 8, compressedSize),\n        decompressedSize\n      );\n      const dataview = new DataView(decompressed.buffer);\n      const offset = PCDheader.offset;\n      for (let i = 0; i < PCDheader.points; i++) {\n        if (offset.x !== void 0) {\n          position.push(dataview.getFloat32(PCDheader.points * offset.x + PCDheader.size[0] * i, this.littleEndian));\n          position.push(dataview.getFloat32(PCDheader.points * offset.y + PCDheader.size[1] * i, this.littleEndian));\n          position.push(dataview.getFloat32(PCDheader.points * offset.z + PCDheader.size[2] * i, this.littleEndian));\n        }\n        if (offset.rgb !== void 0) {\n          color.push(dataview.getUint8(PCDheader.points * offset.rgb + PCDheader.size[3] * i + 2) / 255);\n          color.push(dataview.getUint8(PCDheader.points * offset.rgb + PCDheader.size[3] * i + 1) / 255);\n          color.push(dataview.getUint8(PCDheader.points * offset.rgb + PCDheader.size[3] * i + 0) / 255);\n        }\n        if (offset.normal_x !== void 0) {\n          normal.push(\n            dataview.getFloat32(PCDheader.points * offset.normal_x + PCDheader.size[4] * i, this.littleEndian)\n          );\n          normal.push(\n            dataview.getFloat32(PCDheader.points * offset.normal_y + PCDheader.size[5] * i, this.littleEndian)\n          );\n          normal.push(\n            dataview.getFloat32(PCDheader.points * offset.normal_z + PCDheader.size[6] * i, this.littleEndian)\n          );\n        }\n      }\n    }\n    if (PCDheader.data === \"binary\") {\n      const dataview = new DataView(data, PCDheader.headerLen);\n      const offset = PCDheader.offset;\n      for (let i = 0, row = 0; i < PCDheader.points; i++, row += PCDheader.rowSize) {\n        if (offset.x !== void 0) {\n          position.push(dataview.getFloat32(row + offset.x, this.littleEndian));\n          position.push(dataview.getFloat32(row + offset.y, this.littleEndian));\n          position.push(dataview.getFloat32(row + offset.z, this.littleEndian));\n        }\n        if (offset.rgb !== void 0) {\n          color.push(dataview.getUint8(row + offset.rgb + 2) / 255);\n          color.push(dataview.getUint8(row + offset.rgb + 1) / 255);\n          color.push(dataview.getUint8(row + offset.rgb + 0) / 255);\n        }\n        if (offset.normal_x !== void 0) {\n          normal.push(dataview.getFloat32(row + offset.normal_x, this.littleEndian));\n          normal.push(dataview.getFloat32(row + offset.normal_y, this.littleEndian));\n          normal.push(dataview.getFloat32(row + offset.normal_z, this.littleEndian));\n        }\n      }\n    }\n    const geometry = new BufferGeometry();\n    if (position.length > 0)\n      geometry.setAttribute(\"position\", new Float32BufferAttribute(position, 3));\n    if (normal.length > 0)\n      geometry.setAttribute(\"normal\", new Float32BufferAttribute(normal, 3));\n    if (color.length > 0)\n      geometry.setAttribute(\"color\", new Float32BufferAttribute(color, 3));\n    geometry.computeBoundingSphere();\n    const material = new PointsMaterial({ size: 5e-3 });\n    if (color.length > 0) {\n      material.vertexColors = true;\n    } else {\n      material.color.setHex(Math.random() * 16777215);\n    }\n    const mesh = new Points(geometry, material);\n    let name = url.split(\"\").reverse().join(\"\");\n    name = /([^\\/]*)/.exec(name);\n    name = name[1].split(\"\").reverse().join(\"\");\n    mesh.name = name;\n    return mesh;\n  }\n}\nexport {\n  PCDLoader\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}