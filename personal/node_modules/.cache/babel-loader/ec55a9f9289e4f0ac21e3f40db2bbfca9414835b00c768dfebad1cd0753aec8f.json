{"ast":null,"code":"import _slicedToArray from \"/home/krug/Coding/JavaScript/Websites/Personal/personal/node_modules/.pnpm/@babel+runtime@7.22.3/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _objectSpread from \"/home/krug/Coding/JavaScript/Websites/Personal/personal/node_modules/.pnpm/@babel+runtime@7.22.3/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _classCallCheck from \"/home/krug/Coding/JavaScript/Websites/Personal/personal/node_modules/.pnpm/@babel+runtime@7.22.3/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/home/krug/Coding/JavaScript/Websites/Personal/personal/node_modules/.pnpm/@babel+runtime@7.22.3/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"/home/krug/Coding/JavaScript/Websites/Personal/personal/node_modules/.pnpm/@babel+runtime@7.22.3/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/home/krug/Coding/JavaScript/Websites/Personal/personal/node_modules/.pnpm/@babel+runtime@7.22.3/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nvar __defProp = Object.defineProperty;\nvar __defNormalProp = function __defNormalProp(obj, key, value) {\n  return key in obj ? __defProp(obj, key, {\n    enumerable: true,\n    configurable: true,\n    writable: true,\n    value: value\n  }) : obj[key] = value;\n};\nvar __publicField = function __publicField(obj, key, value) {\n  __defNormalProp(obj, typeof key !== \"symbol\" ? key + \"\" : key, value);\n  return value;\n};\nimport { Loader, RGBAFormat, RGBA_ASTC_4x4_Format, RGBA_BPTC_Format, RGBA_ETC2_EAC_Format, RGBA_PVRTC_4BPPV1_Format, RGBA_S3TC_DXT5_Format, RGB_ETC1_Format, RGB_ETC2_Format, RGB_PVRTC_4BPPV1_Format, RGB_S3TC_DXT1_Format, FileLoader, CompressedTexture, UnsignedByteType, LinearFilter, LinearMipmapLinearFilter } from \"three\";\nvar _taskCache = /* @__PURE__ */new WeakMap();\nvar _BasisTextureLoader = /*#__PURE__*/function (_Loader) {\n  _inherits(_BasisTextureLoader, _Loader);\n  var _super = _createSuper(_BasisTextureLoader);\n  function _BasisTextureLoader(manager) {\n    var _this;\n    _classCallCheck(this, _BasisTextureLoader);\n    _this = _super.call(this, manager);\n    _this.transcoderPath = \"\";\n    _this.transcoderBinary = null;\n    _this.transcoderPending = null;\n    _this.workerLimit = 4;\n    _this.workerPool = [];\n    _this.workerNextTaskID = 1;\n    _this.workerSourceURL = \"\";\n    _this.workerConfig = null;\n    return _this;\n  }\n  _createClass(_BasisTextureLoader, [{\n    key: \"setTranscoderPath\",\n    value: function setTranscoderPath(path) {\n      this.transcoderPath = path;\n      return this;\n    }\n  }, {\n    key: \"setWorkerLimit\",\n    value: function setWorkerLimit(workerLimit) {\n      this.workerLimit = workerLimit;\n      return this;\n    }\n  }, {\n    key: \"detectSupport\",\n    value: function detectSupport(renderer) {\n      this.workerConfig = {\n        astcSupported: renderer.extensions.has(\"WEBGL_compressed_texture_astc\"),\n        etc1Supported: renderer.extensions.has(\"WEBGL_compressed_texture_etc1\"),\n        etc2Supported: renderer.extensions.has(\"WEBGL_compressed_texture_etc\"),\n        dxtSupported: renderer.extensions.has(\"WEBGL_compressed_texture_s3tc\"),\n        bptcSupported: renderer.extensions.has(\"EXT_texture_compression_bptc\"),\n        pvrtcSupported: renderer.extensions.has(\"WEBGL_compressed_texture_pvrtc\") || renderer.extensions.has(\"WEBKIT_WEBGL_compressed_texture_pvrtc\")\n      };\n      return this;\n    }\n  }, {\n    key: \"load\",\n    value: function load(url, onLoad, onProgress, onError) {\n      var _this2 = this;\n      var loader = new FileLoader(this.manager);\n      loader.setResponseType(\"arraybuffer\");\n      loader.setWithCredentials(this.withCredentials);\n      var texture = new CompressedTexture();\n      loader.load(url, function (buffer) {\n        if (_taskCache.has(buffer)) {\n          var cachedTask = _taskCache.get(buffer);\n          return cachedTask.promise.then(onLoad).catch(onError);\n        }\n        _this2._createTexture([buffer]).then(function (_texture) {\n          texture.copy(_texture);\n          texture.needsUpdate = true;\n          if (onLoad) onLoad(texture);\n        }).catch(onError);\n      }, onProgress, onError);\n      return texture;\n    }\n    /** Low-level transcoding API, exposed for use by KTX2Loader. */\n  }, {\n    key: \"parseInternalAsync\",\n    value: function parseInternalAsync(options) {\n      var levels = options.levels;\n      var buffers = /* @__PURE__ */new Set();\n      for (var i = 0; i < levels.length; i++) {\n        buffers.add(levels[i].data.buffer);\n      }\n      return this._createTexture(Array.from(buffers), _objectSpread(_objectSpread({}, options), {}, {\n        lowLevel: true\n      }));\n    }\n    /**\n     * @param {ArrayBuffer[]} buffers\n     * @param {object?} config\n     * @return {Promise<CompressedTexture>}\n     */\n  }, {\n    key: \"_createTexture\",\n    value: function _createTexture(buffers) {\n      var _this3 = this;\n      var config = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      var worker;\n      var taskID;\n      var taskConfig = config;\n      var taskCost = 0;\n      for (var i = 0; i < buffers.length; i++) {\n        taskCost += buffers[i].byteLength;\n      }\n      var texturePending = this._allocateWorker(taskCost).then(function (_worker) {\n        worker = _worker;\n        taskID = _this3.workerNextTaskID++;\n        return new Promise(function (resolve, reject) {\n          worker._callbacks[taskID] = {\n            resolve: resolve,\n            reject: reject\n          };\n          worker.postMessage({\n            type: \"transcode\",\n            id: taskID,\n            buffers: buffers,\n            taskConfig: taskConfig\n          }, buffers);\n        });\n      }).then(function (message) {\n        var mipmaps = message.mipmaps,\n          width = message.width,\n          height = message.height,\n          format = message.format;\n        var texture = new CompressedTexture(mipmaps, width, height, format, UnsignedByteType);\n        texture.minFilter = mipmaps.length === 1 ? LinearFilter : LinearMipmapLinearFilter;\n        texture.magFilter = LinearFilter;\n        texture.generateMipmaps = false;\n        texture.needsUpdate = true;\n        return texture;\n      });\n      texturePending.catch(function () {\n        return true;\n      }).then(function () {\n        if (worker && taskID) {\n          worker._taskLoad -= taskCost;\n          delete worker._callbacks[taskID];\n        }\n      });\n      _taskCache.set(buffers[0], {\n        promise: texturePending\n      });\n      return texturePending;\n    }\n  }, {\n    key: \"_initTranscoder\",\n    value: function _initTranscoder() {\n      var _this4 = this;\n      if (!this.transcoderPending) {\n        var jsLoader = new FileLoader(this.manager);\n        jsLoader.setPath(this.transcoderPath);\n        jsLoader.setWithCredentials(this.withCredentials);\n        var jsContent = new Promise(function (resolve, reject) {\n          jsLoader.load(\"basis_transcoder.js\", resolve, void 0, reject);\n        });\n        var binaryLoader = new FileLoader(this.manager);\n        binaryLoader.setPath(this.transcoderPath);\n        binaryLoader.setResponseType(\"arraybuffer\");\n        binaryLoader.setWithCredentials(this.withCredentials);\n        var binaryContent = new Promise(function (resolve, reject) {\n          binaryLoader.load(\"basis_transcoder.wasm\", resolve, void 0, reject);\n        });\n        this.transcoderPending = Promise.all([jsContent, binaryContent]).then(function (_ref) {\n          var _ref2 = _slicedToArray(_ref, 2),\n            jsContent2 = _ref2[0],\n            binaryContent2 = _ref2[1];\n          var fn = _BasisTextureLoader.BasisWorker.toString();\n          var body = [\"/* constants */\", \"let _EngineFormat = \" + JSON.stringify(_BasisTextureLoader.EngineFormat), \"let _TranscoderFormat = \" + JSON.stringify(_BasisTextureLoader.TranscoderFormat), \"let _BasisFormat = \" + JSON.stringify(_BasisTextureLoader.BasisFormat), \"/* basis_transcoder.js */\", jsContent2, \"/* worker */\", fn.substring(fn.indexOf(\"{\") + 1, fn.lastIndexOf(\"}\"))].join(\"\\n\");\n          _this4.workerSourceURL = URL.createObjectURL(new Blob([body]));\n          _this4.transcoderBinary = binaryContent2;\n        });\n      }\n      return this.transcoderPending;\n    }\n  }, {\n    key: \"_allocateWorker\",\n    value: function _allocateWorker(taskCost) {\n      var _this5 = this;\n      return this._initTranscoder().then(function () {\n        if (_this5.workerPool.length < _this5.workerLimit) {\n          var worker2 = new Worker(_this5.workerSourceURL);\n          worker2._callbacks = {};\n          worker2._taskLoad = 0;\n          worker2.postMessage({\n            type: \"init\",\n            config: _this5.workerConfig,\n            transcoderBinary: _this5.transcoderBinary\n          });\n          worker2.onmessage = function (e) {\n            var message = e.data;\n            switch (message.type) {\n              case \"transcode\":\n                worker2._callbacks[message.id].resolve(message);\n                break;\n              case \"error\":\n                worker2._callbacks[message.id].reject(message);\n                break;\n              default:\n                console.error('THREE.BasisTextureLoader: Unexpected message, \"' + message.type + '\"');\n            }\n          };\n          _this5.workerPool.push(worker2);\n        } else {\n          _this5.workerPool.sort(function (a, b) {\n            return a._taskLoad > b._taskLoad ? -1 : 1;\n          });\n        }\n        var worker = _this5.workerPool[_this5.workerPool.length - 1];\n        worker._taskLoad += taskCost;\n        return worker;\n      });\n    }\n  }, {\n    key: \"dispose\",\n    value: function dispose() {\n      for (var i = 0; i < this.workerPool.length; i++) {\n        this.workerPool[i].terminate();\n      }\n      this.workerPool.length = 0;\n      return this;\n    }\n  }]);\n  return _BasisTextureLoader;\n}(Loader);\nvar BasisTextureLoader = _BasisTextureLoader;\n/* CONSTANTS */\n__publicField(BasisTextureLoader, \"BasisFormat\", {\n  ETC1S: 0,\n  UASTC_4x4: 1\n});\n__publicField(BasisTextureLoader, \"TranscoderFormat\", {\n  ETC1: 0,\n  ETC2: 1,\n  BC1: 2,\n  BC3: 3,\n  BC4: 4,\n  BC5: 5,\n  BC7_M6_OPAQUE_ONLY: 6,\n  BC7_M5: 7,\n  PVRTC1_4_RGB: 8,\n  PVRTC1_4_RGBA: 9,\n  ASTC_4x4: 10,\n  ATC_RGB: 11,\n  ATC_RGBA_INTERPOLATED_ALPHA: 12,\n  RGBA32: 13,\n  RGB565: 14,\n  BGR565: 15,\n  RGBA4444: 16\n});\n__publicField(BasisTextureLoader, \"EngineFormat\", {\n  RGBAFormat: RGBAFormat,\n  RGBA_ASTC_4x4_Format: RGBA_ASTC_4x4_Format,\n  RGBA_BPTC_Format: RGBA_BPTC_Format,\n  RGBA_ETC2_EAC_Format: RGBA_ETC2_EAC_Format,\n  RGBA_PVRTC_4BPPV1_Format: RGBA_PVRTC_4BPPV1_Format,\n  RGBA_S3TC_DXT5_Format: RGBA_S3TC_DXT5_Format,\n  RGB_ETC1_Format: RGB_ETC1_Format,\n  RGB_ETC2_Format: RGB_ETC2_Format,\n  RGB_PVRTC_4BPPV1_Format: RGB_PVRTC_4BPPV1_Format,\n  RGB_S3TC_DXT1_Format: RGB_S3TC_DXT1_Format\n});\n/* WEB WORKER */\n__publicField(BasisTextureLoader, \"BasisWorker\", function () {\n  var config;\n  var transcoderPending;\n  var BasisModule;\n  var EngineFormat = _EngineFormat;\n  var TranscoderFormat = _TranscoderFormat;\n  var BasisFormat = _BasisFormat;\n  onmessage = function onmessage(e) {\n    var message = e.data;\n    switch (message.type) {\n      case \"init\":\n        config = message.config;\n        init(message.transcoderBinary);\n        break;\n      case \"transcode\":\n        transcoderPending.then(function () {\n          try {\n            var _ref3 = message.taskConfig.lowLevel ? transcodeLowLevel(message.taskConfig) : transcode(message.buffers[0]),\n              width = _ref3.width,\n              height = _ref3.height,\n              hasAlpha = _ref3.hasAlpha,\n              mipmaps = _ref3.mipmaps,\n              format = _ref3.format;\n            var buffers = [];\n            for (var i = 0; i < mipmaps.length; ++i) {\n              buffers.push(mipmaps[i].data.buffer);\n            }\n            self.postMessage({\n              type: \"transcode\",\n              id: message.id,\n              width: width,\n              height: height,\n              hasAlpha: hasAlpha,\n              mipmaps: mipmaps,\n              format: format\n            }, buffers);\n          } catch (error) {\n            console.error(error);\n            self.postMessage({\n              type: \"error\",\n              id: message.id,\n              error: error.message\n            });\n          }\n        });\n        break;\n    }\n  };\n  function init(wasmBinary) {\n    transcoderPending = new Promise(function (resolve) {\n      BasisModule = {\n        wasmBinary: wasmBinary,\n        onRuntimeInitialized: resolve\n      };\n      BASIS(BasisModule);\n    }).then(function () {\n      BasisModule.initializeBasis();\n    });\n  }\n  function transcodeLowLevel(taskConfig) {\n    var basisFormat = taskConfig.basisFormat,\n      width = taskConfig.width,\n      height = taskConfig.height,\n      hasAlpha = taskConfig.hasAlpha;\n    var _getTranscoderFormat = getTranscoderFormat(basisFormat, width, height, hasAlpha),\n      transcoderFormat = _getTranscoderFormat.transcoderFormat,\n      engineFormat = _getTranscoderFormat.engineFormat;\n    var blockByteLength = BasisModule.getBytesPerBlockOrPixel(transcoderFormat);\n    assert(BasisModule.isFormatSupported(transcoderFormat), \"THREE.BasisTextureLoader: Unsupported format.\");\n    var mipmaps = [];\n    if (basisFormat === BasisFormat.ETC1S) {\n      var transcoder = new BasisModule.LowLevelETC1SImageTranscoder();\n      var _taskConfig$globalDat = taskConfig.globalData,\n        endpointCount = _taskConfig$globalDat.endpointCount,\n        endpointsData = _taskConfig$globalDat.endpointsData,\n        selectorCount = _taskConfig$globalDat.selectorCount,\n        selectorsData = _taskConfig$globalDat.selectorsData,\n        tablesData = _taskConfig$globalDat.tablesData;\n      try {\n        var ok;\n        ok = transcoder.decodePalettes(endpointCount, endpointsData, selectorCount, selectorsData);\n        assert(ok, \"THREE.BasisTextureLoader: decodePalettes() failed.\");\n        ok = transcoder.decodeTables(tablesData);\n        assert(ok, \"THREE.BasisTextureLoader: decodeTables() failed.\");\n        for (var i = 0; i < taskConfig.levels.length; i++) {\n          var level = taskConfig.levels[i];\n          var imageDesc = taskConfig.globalData.imageDescs[i];\n          var dstByteLength = getTranscodedImageByteLength(transcoderFormat, level.width, level.height);\n          var dst = new Uint8Array(dstByteLength);\n          ok = transcoder.transcodeImage(transcoderFormat, dst, dstByteLength / blockByteLength, level.data, getWidthInBlocks(transcoderFormat, level.width), getHeightInBlocks(transcoderFormat, level.height), level.width, level.height, level.index, imageDesc.rgbSliceByteOffset, imageDesc.rgbSliceByteLength, imageDesc.alphaSliceByteOffset, imageDesc.alphaSliceByteLength, imageDesc.imageFlags, hasAlpha, false, 0, 0);\n          assert(ok, \"THREE.BasisTextureLoader: transcodeImage() failed for level \" + level.index + \".\");\n          mipmaps.push({\n            data: dst,\n            width: level.width,\n            height: level.height\n          });\n        }\n      } finally {\n        transcoder.delete();\n      }\n    } else {\n      for (var _i = 0; _i < taskConfig.levels.length; _i++) {\n        var _level = taskConfig.levels[_i];\n        var _dstByteLength = getTranscodedImageByteLength(transcoderFormat, _level.width, _level.height);\n        var _dst = new Uint8Array(_dstByteLength);\n        var _ok = BasisModule.transcodeUASTCImage(transcoderFormat, _dst, _dstByteLength / blockByteLength, _level.data, getWidthInBlocks(transcoderFormat, _level.width), getHeightInBlocks(transcoderFormat, _level.height), _level.width, _level.height, _level.index, 0, _level.data.byteLength, 0, hasAlpha, false, 0, 0, -1, -1);\n        assert(_ok, \"THREE.BasisTextureLoader: transcodeUASTCImage() failed for level \" + _level.index + \".\");\n        mipmaps.push({\n          data: _dst,\n          width: _level.width,\n          height: _level.height\n        });\n      }\n    }\n    return {\n      width: width,\n      height: height,\n      hasAlpha: hasAlpha,\n      mipmaps: mipmaps,\n      format: engineFormat\n    };\n  }\n  function transcode(buffer) {\n    var basisFile = new BasisModule.BasisFile(new Uint8Array(buffer));\n    var basisFormat = basisFile.isUASTC() ? BasisFormat.UASTC_4x4 : BasisFormat.ETC1S;\n    var width = basisFile.getImageWidth(0, 0);\n    var height = basisFile.getImageHeight(0, 0);\n    var levels = basisFile.getNumLevels(0);\n    var hasAlpha = basisFile.getHasAlpha();\n    function cleanup() {\n      basisFile.close();\n      basisFile.delete();\n    }\n    var _getTranscoderFormat2 = getTranscoderFormat(basisFormat, width, height, hasAlpha),\n      transcoderFormat = _getTranscoderFormat2.transcoderFormat,\n      engineFormat = _getTranscoderFormat2.engineFormat;\n    if (!width || !height || !levels) {\n      cleanup();\n      throw new Error(\"THREE.BasisTextureLoader:\tInvalid texture\");\n    }\n    if (!basisFile.startTranscoding()) {\n      cleanup();\n      throw new Error(\"THREE.BasisTextureLoader: .startTranscoding failed\");\n    }\n    var mipmaps = [];\n    for (var mip = 0; mip < levels; mip++) {\n      var mipWidth = basisFile.getImageWidth(0, mip);\n      var mipHeight = basisFile.getImageHeight(0, mip);\n      var dst = new Uint8Array(basisFile.getImageTranscodedSizeInBytes(0, mip, transcoderFormat));\n      var status = basisFile.transcodeImage(dst, 0, mip, transcoderFormat, 0, hasAlpha);\n      if (!status) {\n        cleanup();\n        throw new Error(\"THREE.BasisTextureLoader: .transcodeImage failed.\");\n      }\n      mipmaps.push({\n        data: dst,\n        width: mipWidth,\n        height: mipHeight\n      });\n    }\n    cleanup();\n    return {\n      width: width,\n      height: height,\n      hasAlpha: hasAlpha,\n      mipmaps: mipmaps,\n      format: engineFormat\n    };\n  }\n  var FORMAT_OPTIONS = [{\n    if: \"astcSupported\",\n    basisFormat: [BasisFormat.UASTC_4x4],\n    transcoderFormat: [TranscoderFormat.ASTC_4x4, TranscoderFormat.ASTC_4x4],\n    engineFormat: [EngineFormat.RGBA_ASTC_4x4_Format, EngineFormat.RGBA_ASTC_4x4_Format],\n    priorityETC1S: Infinity,\n    priorityUASTC: 1,\n    needsPowerOfTwo: false\n  }, {\n    if: \"bptcSupported\",\n    basisFormat: [BasisFormat.ETC1S, BasisFormat.UASTC_4x4],\n    transcoderFormat: [TranscoderFormat.BC7_M5, TranscoderFormat.BC7_M5],\n    engineFormat: [EngineFormat.RGBA_BPTC_Format, EngineFormat.RGBA_BPTC_Format],\n    priorityETC1S: 3,\n    priorityUASTC: 2,\n    needsPowerOfTwo: false\n  }, {\n    if: \"dxtSupported\",\n    basisFormat: [BasisFormat.ETC1S, BasisFormat.UASTC_4x4],\n    transcoderFormat: [TranscoderFormat.BC1, TranscoderFormat.BC3],\n    engineFormat: [EngineFormat.RGB_S3TC_DXT1_Format, EngineFormat.RGBA_S3TC_DXT5_Format],\n    priorityETC1S: 4,\n    priorityUASTC: 5,\n    needsPowerOfTwo: false\n  }, {\n    if: \"etc2Supported\",\n    basisFormat: [BasisFormat.ETC1S, BasisFormat.UASTC_4x4],\n    transcoderFormat: [TranscoderFormat.ETC1, TranscoderFormat.ETC2],\n    engineFormat: [EngineFormat.RGB_ETC2_Format, EngineFormat.RGBA_ETC2_EAC_Format],\n    priorityETC1S: 1,\n    priorityUASTC: 3,\n    needsPowerOfTwo: false\n  }, {\n    if: \"etc1Supported\",\n    basisFormat: [BasisFormat.ETC1S, BasisFormat.UASTC_4x4],\n    transcoderFormat: [TranscoderFormat.ETC1, TranscoderFormat.ETC1],\n    engineFormat: [EngineFormat.RGB_ETC1_Format, EngineFormat.RGB_ETC1_Format],\n    priorityETC1S: 2,\n    priorityUASTC: 4,\n    needsPowerOfTwo: false\n  }, {\n    if: \"pvrtcSupported\",\n    basisFormat: [BasisFormat.ETC1S, BasisFormat.UASTC_4x4],\n    transcoderFormat: [TranscoderFormat.PVRTC1_4_RGB, TranscoderFormat.PVRTC1_4_RGBA],\n    engineFormat: [EngineFormat.RGB_PVRTC_4BPPV1_Format, EngineFormat.RGBA_PVRTC_4BPPV1_Format],\n    priorityETC1S: 5,\n    priorityUASTC: 6,\n    needsPowerOfTwo: true\n  }];\n  var ETC1S_OPTIONS = FORMAT_OPTIONS.sort(function (a, b) {\n    return a.priorityETC1S - b.priorityETC1S;\n  });\n  var UASTC_OPTIONS = FORMAT_OPTIONS.sort(function (a, b) {\n    return a.priorityUASTC - b.priorityUASTC;\n  });\n  function getTranscoderFormat(basisFormat, width, height, hasAlpha) {\n    var transcoderFormat;\n    var engineFormat;\n    var options = basisFormat === BasisFormat.ETC1S ? ETC1S_OPTIONS : UASTC_OPTIONS;\n    for (var i = 0; i < options.length; i++) {\n      var opt = options[i];\n      if (!config[opt.if]) continue;\n      if (!opt.basisFormat.includes(basisFormat)) continue;\n      if (opt.needsPowerOfTwo && !(isPowerOfTwo(width) && isPowerOfTwo(height))) continue;\n      transcoderFormat = opt.transcoderFormat[hasAlpha ? 1 : 0];\n      engineFormat = opt.engineFormat[hasAlpha ? 1 : 0];\n      return {\n        transcoderFormat: transcoderFormat,\n        engineFormat: engineFormat\n      };\n    }\n    console.warn(\"THREE.BasisTextureLoader: No suitable compressed texture format found. Decoding to RGBA32.\");\n    transcoderFormat = TranscoderFormat.RGBA32;\n    engineFormat = EngineFormat.RGBAFormat;\n    return {\n      transcoderFormat: transcoderFormat,\n      engineFormat: engineFormat\n    };\n  }\n  function assert(ok, message) {\n    if (!ok) throw new Error(message);\n  }\n  function getWidthInBlocks(transcoderFormat, width) {\n    return Math.ceil(width / BasisModule.getFormatBlockWidth(transcoderFormat));\n  }\n  function getHeightInBlocks(transcoderFormat, height) {\n    return Math.ceil(height / BasisModule.getFormatBlockHeight(transcoderFormat));\n  }\n  function getTranscodedImageByteLength(transcoderFormat, width, height) {\n    var blockByteLength = BasisModule.getBytesPerBlockOrPixel(transcoderFormat);\n    if (BasisModule.formatIsUncompressed(transcoderFormat)) {\n      return width * height * blockByteLength;\n    }\n    if (transcoderFormat === TranscoderFormat.PVRTC1_4_RGB || transcoderFormat === TranscoderFormat.PVRTC1_4_RGBA) {\n      var paddedWidth = width + 3 & ~3;\n      var paddedHeight = height + 3 & ~3;\n      return (Math.max(8, paddedWidth) * Math.max(8, paddedHeight) * 4 + 7) / 8;\n    }\n    return getWidthInBlocks(transcoderFormat, width) * getHeightInBlocks(transcoderFormat, height) * blockByteLength;\n  }\n  function isPowerOfTwo(value) {\n    if (value <= 2) return true;\n    return (value & value - 1) === 0 && value !== 0;\n  }\n});\nexport { BasisTextureLoader };","map":{"version":3,"names":["__defProp","Object","defineProperty","__defNormalProp","obj","key","value","enumerable","configurable","writable","__publicField","Loader","RGBAFormat","RGBA_ASTC_4x4_Format","RGBA_BPTC_Format","RGBA_ETC2_EAC_Format","RGBA_PVRTC_4BPPV1_Format","RGBA_S3TC_DXT5_Format","RGB_ETC1_Format","RGB_ETC2_Format","RGB_PVRTC_4BPPV1_Format","RGB_S3TC_DXT1_Format","FileLoader","CompressedTexture","UnsignedByteType","LinearFilter","LinearMipmapLinearFilter","_taskCache","WeakMap","_BasisTextureLoader","_Loader","_inherits","_super","_createSuper","manager","_this","_classCallCheck","call","transcoderPath","transcoderBinary","transcoderPending","workerLimit","workerPool","workerNextTaskID","workerSourceURL","workerConfig","_createClass","setTranscoderPath","path","setWorkerLimit","detectSupport","renderer","astcSupported","extensions","has","etc1Supported","etc2Supported","dxtSupported","bptcSupported","pvrtcSupported","load","url","onLoad","onProgress","onError","_this2","loader","setResponseType","setWithCredentials","withCredentials","texture","buffer","cachedTask","get","promise","then","catch","_createTexture","_texture","copy","needsUpdate","parseInternalAsync","options","levels","buffers","Set","i","length","add","data","Array","from","_objectSpread","lowLevel","_this3","config","arguments","undefined","worker","taskID","taskConfig","taskCost","byteLength","texturePending","_allocateWorker","_worker","Promise","resolve","reject","_callbacks","postMessage","type","id","message","mipmaps","width","height","format","minFilter","magFilter","generateMipmaps","_taskLoad","set","_initTranscoder","_this4","jsLoader","setPath","jsContent","binaryLoader","binaryContent","all","_ref","_ref2","_slicedToArray","jsContent2","binaryContent2","fn","BasisWorker","toString","body","JSON","stringify","EngineFormat","TranscoderFormat","BasisFormat","substring","indexOf","lastIndexOf","join","URL","createObjectURL","Blob","_this5","worker2","Worker","onmessage","e","console","error","push","sort","a","b","dispose","terminate","BasisTextureLoader","ETC1S","UASTC_4x4","ETC1","ETC2","BC1","BC3","BC4","BC5","BC7_M6_OPAQUE_ONLY","BC7_M5","PVRTC1_4_RGB","PVRTC1_4_RGBA","ASTC_4x4","ATC_RGB","ATC_RGBA_INTERPOLATED_ALPHA","RGBA32","RGB565","BGR565","RGBA4444","BasisModule","_EngineFormat","_TranscoderFormat","_BasisFormat","init","_ref3","transcodeLowLevel","transcode","hasAlpha","self","wasmBinary","onRuntimeInitialized","BASIS","initializeBasis","basisFormat","_getTranscoderFormat","getTranscoderFormat","transcoderFormat","engineFormat","blockByteLength","getBytesPerBlockOrPixel","assert","isFormatSupported","transcoder","LowLevelETC1SImageTranscoder","_taskConfig$globalDat","globalData","endpointCount","endpointsData","selectorCount","selectorsData","tablesData","ok","decodePalettes","decodeTables","level","imageDesc","imageDescs","dstByteLength","getTranscodedImageByteLength","dst","Uint8Array","transcodeImage","getWidthInBlocks","getHeightInBlocks","index","rgbSliceByteOffset","rgbSliceByteLength","alphaSliceByteOffset","alphaSliceByteLength","imageFlags","delete","transcodeUASTCImage","basisFile","BasisFile","isUASTC","getImageWidth","getImageHeight","getNumLevels","getHasAlpha","cleanup","close","_getTranscoderFormat2","Error","startTranscoding","mip","mipWidth","mipHeight","getImageTranscodedSizeInBytes","status","FORMAT_OPTIONS","if","priorityETC1S","Infinity","priorityUASTC","needsPowerOfTwo","ETC1S_OPTIONS","UASTC_OPTIONS","opt","includes","isPowerOfTwo","warn","Math","ceil","getFormatBlockWidth","getFormatBlockHeight","formatIsUncompressed","paddedWidth","paddedHeight","max"],"sources":["/home/krug/Coding/JavaScript/Websites/Personal/personal/node_modules/.pnpm/three-stdlib@2.23.7_three@0.151.3/node_modules/three-stdlib/loaders/BasisTextureLoader.js"],"sourcesContent":["var __defProp = Object.defineProperty;\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;\nvar __publicField = (obj, key, value) => {\n  __defNormalProp(obj, typeof key !== \"symbol\" ? key + \"\" : key, value);\n  return value;\n};\nimport { Loader, RGBAFormat, RGBA_ASTC_4x4_Format, RGBA_BPTC_Format, RGBA_ETC2_EAC_Format, RGBA_PVRTC_4BPPV1_Format, RGBA_S3TC_DXT5_Format, RGB_ETC1_Format, RGB_ETC2_Format, RGB_PVRTC_4BPPV1_Format, RGB_S3TC_DXT1_Format, FileLoader, CompressedTexture, UnsignedByteType, LinearFilter, LinearMipmapLinearFilter } from \"three\";\nconst _taskCache = /* @__PURE__ */ new WeakMap();\nconst _BasisTextureLoader = class extends Loader {\n  constructor(manager) {\n    super(manager);\n    this.transcoderPath = \"\";\n    this.transcoderBinary = null;\n    this.transcoderPending = null;\n    this.workerLimit = 4;\n    this.workerPool = [];\n    this.workerNextTaskID = 1;\n    this.workerSourceURL = \"\";\n    this.workerConfig = null;\n  }\n  setTranscoderPath(path) {\n    this.transcoderPath = path;\n    return this;\n  }\n  setWorkerLimit(workerLimit) {\n    this.workerLimit = workerLimit;\n    return this;\n  }\n  detectSupport(renderer) {\n    this.workerConfig = {\n      astcSupported: renderer.extensions.has(\"WEBGL_compressed_texture_astc\"),\n      etc1Supported: renderer.extensions.has(\"WEBGL_compressed_texture_etc1\"),\n      etc2Supported: renderer.extensions.has(\"WEBGL_compressed_texture_etc\"),\n      dxtSupported: renderer.extensions.has(\"WEBGL_compressed_texture_s3tc\"),\n      bptcSupported: renderer.extensions.has(\"EXT_texture_compression_bptc\"),\n      pvrtcSupported: renderer.extensions.has(\"WEBGL_compressed_texture_pvrtc\") || renderer.extensions.has(\"WEBKIT_WEBGL_compressed_texture_pvrtc\")\n    };\n    return this;\n  }\n  load(url, onLoad, onProgress, onError) {\n    const loader = new FileLoader(this.manager);\n    loader.setResponseType(\"arraybuffer\");\n    loader.setWithCredentials(this.withCredentials);\n    const texture = new CompressedTexture();\n    loader.load(\n      url,\n      (buffer) => {\n        if (_taskCache.has(buffer)) {\n          const cachedTask = _taskCache.get(buffer);\n          return cachedTask.promise.then(onLoad).catch(onError);\n        }\n        this._createTexture([buffer]).then(function(_texture) {\n          texture.copy(_texture);\n          texture.needsUpdate = true;\n          if (onLoad)\n            onLoad(texture);\n        }).catch(onError);\n      },\n      onProgress,\n      onError\n    );\n    return texture;\n  }\n  /** Low-level transcoding API, exposed for use by KTX2Loader. */\n  parseInternalAsync(options) {\n    const { levels } = options;\n    const buffers = /* @__PURE__ */ new Set();\n    for (let i = 0; i < levels.length; i++) {\n      buffers.add(levels[i].data.buffer);\n    }\n    return this._createTexture(Array.from(buffers), { ...options, lowLevel: true });\n  }\n  /**\n   * @param {ArrayBuffer[]} buffers\n   * @param {object?} config\n   * @return {Promise<CompressedTexture>}\n   */\n  _createTexture(buffers, config = {}) {\n    let worker;\n    let taskID;\n    const taskConfig = config;\n    let taskCost = 0;\n    for (let i = 0; i < buffers.length; i++) {\n      taskCost += buffers[i].byteLength;\n    }\n    const texturePending = this._allocateWorker(taskCost).then((_worker) => {\n      worker = _worker;\n      taskID = this.workerNextTaskID++;\n      return new Promise((resolve, reject) => {\n        worker._callbacks[taskID] = { resolve, reject };\n        worker.postMessage({ type: \"transcode\", id: taskID, buffers, taskConfig }, buffers);\n      });\n    }).then((message) => {\n      const { mipmaps, width, height, format } = message;\n      const texture = new CompressedTexture(mipmaps, width, height, format, UnsignedByteType);\n      texture.minFilter = mipmaps.length === 1 ? LinearFilter : LinearMipmapLinearFilter;\n      texture.magFilter = LinearFilter;\n      texture.generateMipmaps = false;\n      texture.needsUpdate = true;\n      return texture;\n    });\n    texturePending.catch(() => true).then(() => {\n      if (worker && taskID) {\n        worker._taskLoad -= taskCost;\n        delete worker._callbacks[taskID];\n      }\n    });\n    _taskCache.set(buffers[0], { promise: texturePending });\n    return texturePending;\n  }\n  _initTranscoder() {\n    if (!this.transcoderPending) {\n      const jsLoader = new FileLoader(this.manager);\n      jsLoader.setPath(this.transcoderPath);\n      jsLoader.setWithCredentials(this.withCredentials);\n      const jsContent = new Promise((resolve, reject) => {\n        jsLoader.load(\"basis_transcoder.js\", resolve, void 0, reject);\n      });\n      const binaryLoader = new FileLoader(this.manager);\n      binaryLoader.setPath(this.transcoderPath);\n      binaryLoader.setResponseType(\"arraybuffer\");\n      binaryLoader.setWithCredentials(this.withCredentials);\n      const binaryContent = new Promise((resolve, reject) => {\n        binaryLoader.load(\"basis_transcoder.wasm\", resolve, void 0, reject);\n      });\n      this.transcoderPending = Promise.all([jsContent, binaryContent]).then(([jsContent2, binaryContent2]) => {\n        const fn = _BasisTextureLoader.BasisWorker.toString();\n        const body = [\n          \"/* constants */\",\n          \"let _EngineFormat = \" + JSON.stringify(_BasisTextureLoader.EngineFormat),\n          \"let _TranscoderFormat = \" + JSON.stringify(_BasisTextureLoader.TranscoderFormat),\n          \"let _BasisFormat = \" + JSON.stringify(_BasisTextureLoader.BasisFormat),\n          \"/* basis_transcoder.js */\",\n          jsContent2,\n          \"/* worker */\",\n          fn.substring(fn.indexOf(\"{\") + 1, fn.lastIndexOf(\"}\"))\n        ].join(\"\\n\");\n        this.workerSourceURL = URL.createObjectURL(new Blob([body]));\n        this.transcoderBinary = binaryContent2;\n      });\n    }\n    return this.transcoderPending;\n  }\n  _allocateWorker(taskCost) {\n    return this._initTranscoder().then(() => {\n      if (this.workerPool.length < this.workerLimit) {\n        const worker2 = new Worker(this.workerSourceURL);\n        worker2._callbacks = {};\n        worker2._taskLoad = 0;\n        worker2.postMessage({\n          type: \"init\",\n          config: this.workerConfig,\n          transcoderBinary: this.transcoderBinary\n        });\n        worker2.onmessage = function(e) {\n          const message = e.data;\n          switch (message.type) {\n            case \"transcode\":\n              worker2._callbacks[message.id].resolve(message);\n              break;\n            case \"error\":\n              worker2._callbacks[message.id].reject(message);\n              break;\n            default:\n              console.error('THREE.BasisTextureLoader: Unexpected message, \"' + message.type + '\"');\n          }\n        };\n        this.workerPool.push(worker2);\n      } else {\n        this.workerPool.sort(function(a, b) {\n          return a._taskLoad > b._taskLoad ? -1 : 1;\n        });\n      }\n      const worker = this.workerPool[this.workerPool.length - 1];\n      worker._taskLoad += taskCost;\n      return worker;\n    });\n  }\n  dispose() {\n    for (let i = 0; i < this.workerPool.length; i++) {\n      this.workerPool[i].terminate();\n    }\n    this.workerPool.length = 0;\n    return this;\n  }\n};\nlet BasisTextureLoader = _BasisTextureLoader;\n/* CONSTANTS */\n__publicField(BasisTextureLoader, \"BasisFormat\", {\n  ETC1S: 0,\n  UASTC_4x4: 1\n});\n__publicField(BasisTextureLoader, \"TranscoderFormat\", {\n  ETC1: 0,\n  ETC2: 1,\n  BC1: 2,\n  BC3: 3,\n  BC4: 4,\n  BC5: 5,\n  BC7_M6_OPAQUE_ONLY: 6,\n  BC7_M5: 7,\n  PVRTC1_4_RGB: 8,\n  PVRTC1_4_RGBA: 9,\n  ASTC_4x4: 10,\n  ATC_RGB: 11,\n  ATC_RGBA_INTERPOLATED_ALPHA: 12,\n  RGBA32: 13,\n  RGB565: 14,\n  BGR565: 15,\n  RGBA4444: 16\n});\n__publicField(BasisTextureLoader, \"EngineFormat\", {\n  RGBAFormat,\n  RGBA_ASTC_4x4_Format,\n  RGBA_BPTC_Format,\n  RGBA_ETC2_EAC_Format,\n  RGBA_PVRTC_4BPPV1_Format,\n  RGBA_S3TC_DXT5_Format,\n  RGB_ETC1_Format,\n  RGB_ETC2_Format,\n  RGB_PVRTC_4BPPV1_Format,\n  RGB_S3TC_DXT1_Format\n});\n/* WEB WORKER */\n__publicField(BasisTextureLoader, \"BasisWorker\", function() {\n  let config;\n  let transcoderPending;\n  let BasisModule;\n  const EngineFormat = _EngineFormat;\n  const TranscoderFormat = _TranscoderFormat;\n  const BasisFormat = _BasisFormat;\n  onmessage = function(e) {\n    const message = e.data;\n    switch (message.type) {\n      case \"init\":\n        config = message.config;\n        init(message.transcoderBinary);\n        break;\n      case \"transcode\":\n        transcoderPending.then(() => {\n          try {\n            const { width, height, hasAlpha, mipmaps, format } = message.taskConfig.lowLevel ? transcodeLowLevel(message.taskConfig) : transcode(message.buffers[0]);\n            const buffers = [];\n            for (let i = 0; i < mipmaps.length; ++i) {\n              buffers.push(mipmaps[i].data.buffer);\n            }\n            self.postMessage({ type: \"transcode\", id: message.id, width, height, hasAlpha, mipmaps, format }, buffers);\n          } catch (error) {\n            console.error(error);\n            self.postMessage({ type: \"error\", id: message.id, error: error.message });\n          }\n        });\n        break;\n    }\n  };\n  function init(wasmBinary) {\n    transcoderPending = new Promise((resolve) => {\n      BasisModule = { wasmBinary, onRuntimeInitialized: resolve };\n      BASIS(BasisModule);\n    }).then(() => {\n      BasisModule.initializeBasis();\n    });\n  }\n  function transcodeLowLevel(taskConfig) {\n    const { basisFormat, width, height, hasAlpha } = taskConfig;\n    const { transcoderFormat, engineFormat } = getTranscoderFormat(basisFormat, width, height, hasAlpha);\n    const blockByteLength = BasisModule.getBytesPerBlockOrPixel(transcoderFormat);\n    assert(BasisModule.isFormatSupported(transcoderFormat), \"THREE.BasisTextureLoader: Unsupported format.\");\n    const mipmaps = [];\n    if (basisFormat === BasisFormat.ETC1S) {\n      const transcoder = new BasisModule.LowLevelETC1SImageTranscoder();\n      const { endpointCount, endpointsData, selectorCount, selectorsData, tablesData } = taskConfig.globalData;\n      try {\n        let ok;\n        ok = transcoder.decodePalettes(endpointCount, endpointsData, selectorCount, selectorsData);\n        assert(ok, \"THREE.BasisTextureLoader: decodePalettes() failed.\");\n        ok = transcoder.decodeTables(tablesData);\n        assert(ok, \"THREE.BasisTextureLoader: decodeTables() failed.\");\n        for (let i = 0; i < taskConfig.levels.length; i++) {\n          const level = taskConfig.levels[i];\n          const imageDesc = taskConfig.globalData.imageDescs[i];\n          const dstByteLength = getTranscodedImageByteLength(transcoderFormat, level.width, level.height);\n          const dst = new Uint8Array(dstByteLength);\n          ok = transcoder.transcodeImage(\n            transcoderFormat,\n            dst,\n            dstByteLength / blockByteLength,\n            level.data,\n            getWidthInBlocks(transcoderFormat, level.width),\n            getHeightInBlocks(transcoderFormat, level.height),\n            level.width,\n            level.height,\n            level.index,\n            imageDesc.rgbSliceByteOffset,\n            imageDesc.rgbSliceByteLength,\n            imageDesc.alphaSliceByteOffset,\n            imageDesc.alphaSliceByteLength,\n            imageDesc.imageFlags,\n            hasAlpha,\n            false,\n            0,\n            0\n          );\n          assert(ok, \"THREE.BasisTextureLoader: transcodeImage() failed for level \" + level.index + \".\");\n          mipmaps.push({ data: dst, width: level.width, height: level.height });\n        }\n      } finally {\n        transcoder.delete();\n      }\n    } else {\n      for (let i = 0; i < taskConfig.levels.length; i++) {\n        const level = taskConfig.levels[i];\n        const dstByteLength = getTranscodedImageByteLength(transcoderFormat, level.width, level.height);\n        const dst = new Uint8Array(dstByteLength);\n        const ok = BasisModule.transcodeUASTCImage(\n          transcoderFormat,\n          dst,\n          dstByteLength / blockByteLength,\n          level.data,\n          getWidthInBlocks(transcoderFormat, level.width),\n          getHeightInBlocks(transcoderFormat, level.height),\n          level.width,\n          level.height,\n          level.index,\n          0,\n          level.data.byteLength,\n          0,\n          hasAlpha,\n          false,\n          0,\n          0,\n          -1,\n          -1\n        );\n        assert(ok, \"THREE.BasisTextureLoader: transcodeUASTCImage() failed for level \" + level.index + \".\");\n        mipmaps.push({ data: dst, width: level.width, height: level.height });\n      }\n    }\n    return { width, height, hasAlpha, mipmaps, format: engineFormat };\n  }\n  function transcode(buffer) {\n    const basisFile = new BasisModule.BasisFile(new Uint8Array(buffer));\n    const basisFormat = basisFile.isUASTC() ? BasisFormat.UASTC_4x4 : BasisFormat.ETC1S;\n    const width = basisFile.getImageWidth(0, 0);\n    const height = basisFile.getImageHeight(0, 0);\n    const levels = basisFile.getNumLevels(0);\n    const hasAlpha = basisFile.getHasAlpha();\n    function cleanup() {\n      basisFile.close();\n      basisFile.delete();\n    }\n    const { transcoderFormat, engineFormat } = getTranscoderFormat(basisFormat, width, height, hasAlpha);\n    if (!width || !height || !levels) {\n      cleanup();\n      throw new Error(\"THREE.BasisTextureLoader:\tInvalid texture\");\n    }\n    if (!basisFile.startTranscoding()) {\n      cleanup();\n      throw new Error(\"THREE.BasisTextureLoader: .startTranscoding failed\");\n    }\n    const mipmaps = [];\n    for (let mip = 0; mip < levels; mip++) {\n      const mipWidth = basisFile.getImageWidth(0, mip);\n      const mipHeight = basisFile.getImageHeight(0, mip);\n      const dst = new Uint8Array(basisFile.getImageTranscodedSizeInBytes(0, mip, transcoderFormat));\n      const status = basisFile.transcodeImage(dst, 0, mip, transcoderFormat, 0, hasAlpha);\n      if (!status) {\n        cleanup();\n        throw new Error(\"THREE.BasisTextureLoader: .transcodeImage failed.\");\n      }\n      mipmaps.push({ data: dst, width: mipWidth, height: mipHeight });\n    }\n    cleanup();\n    return { width, height, hasAlpha, mipmaps, format: engineFormat };\n  }\n  const FORMAT_OPTIONS = [\n    {\n      if: \"astcSupported\",\n      basisFormat: [BasisFormat.UASTC_4x4],\n      transcoderFormat: [TranscoderFormat.ASTC_4x4, TranscoderFormat.ASTC_4x4],\n      engineFormat: [EngineFormat.RGBA_ASTC_4x4_Format, EngineFormat.RGBA_ASTC_4x4_Format],\n      priorityETC1S: Infinity,\n      priorityUASTC: 1,\n      needsPowerOfTwo: false\n    },\n    {\n      if: \"bptcSupported\",\n      basisFormat: [BasisFormat.ETC1S, BasisFormat.UASTC_4x4],\n      transcoderFormat: [TranscoderFormat.BC7_M5, TranscoderFormat.BC7_M5],\n      engineFormat: [EngineFormat.RGBA_BPTC_Format, EngineFormat.RGBA_BPTC_Format],\n      priorityETC1S: 3,\n      priorityUASTC: 2,\n      needsPowerOfTwo: false\n    },\n    {\n      if: \"dxtSupported\",\n      basisFormat: [BasisFormat.ETC1S, BasisFormat.UASTC_4x4],\n      transcoderFormat: [TranscoderFormat.BC1, TranscoderFormat.BC3],\n      engineFormat: [EngineFormat.RGB_S3TC_DXT1_Format, EngineFormat.RGBA_S3TC_DXT5_Format],\n      priorityETC1S: 4,\n      priorityUASTC: 5,\n      needsPowerOfTwo: false\n    },\n    {\n      if: \"etc2Supported\",\n      basisFormat: [BasisFormat.ETC1S, BasisFormat.UASTC_4x4],\n      transcoderFormat: [TranscoderFormat.ETC1, TranscoderFormat.ETC2],\n      engineFormat: [EngineFormat.RGB_ETC2_Format, EngineFormat.RGBA_ETC2_EAC_Format],\n      priorityETC1S: 1,\n      priorityUASTC: 3,\n      needsPowerOfTwo: false\n    },\n    {\n      if: \"etc1Supported\",\n      basisFormat: [BasisFormat.ETC1S, BasisFormat.UASTC_4x4],\n      transcoderFormat: [TranscoderFormat.ETC1, TranscoderFormat.ETC1],\n      engineFormat: [EngineFormat.RGB_ETC1_Format, EngineFormat.RGB_ETC1_Format],\n      priorityETC1S: 2,\n      priorityUASTC: 4,\n      needsPowerOfTwo: false\n    },\n    {\n      if: \"pvrtcSupported\",\n      basisFormat: [BasisFormat.ETC1S, BasisFormat.UASTC_4x4],\n      transcoderFormat: [TranscoderFormat.PVRTC1_4_RGB, TranscoderFormat.PVRTC1_4_RGBA],\n      engineFormat: [EngineFormat.RGB_PVRTC_4BPPV1_Format, EngineFormat.RGBA_PVRTC_4BPPV1_Format],\n      priorityETC1S: 5,\n      priorityUASTC: 6,\n      needsPowerOfTwo: true\n    }\n  ];\n  const ETC1S_OPTIONS = FORMAT_OPTIONS.sort(function(a, b) {\n    return a.priorityETC1S - b.priorityETC1S;\n  });\n  const UASTC_OPTIONS = FORMAT_OPTIONS.sort(function(a, b) {\n    return a.priorityUASTC - b.priorityUASTC;\n  });\n  function getTranscoderFormat(basisFormat, width, height, hasAlpha) {\n    let transcoderFormat;\n    let engineFormat;\n    const options = basisFormat === BasisFormat.ETC1S ? ETC1S_OPTIONS : UASTC_OPTIONS;\n    for (let i = 0; i < options.length; i++) {\n      const opt = options[i];\n      if (!config[opt.if])\n        continue;\n      if (!opt.basisFormat.includes(basisFormat))\n        continue;\n      if (opt.needsPowerOfTwo && !(isPowerOfTwo(width) && isPowerOfTwo(height)))\n        continue;\n      transcoderFormat = opt.transcoderFormat[hasAlpha ? 1 : 0];\n      engineFormat = opt.engineFormat[hasAlpha ? 1 : 0];\n      return { transcoderFormat, engineFormat };\n    }\n    console.warn(\"THREE.BasisTextureLoader: No suitable compressed texture format found. Decoding to RGBA32.\");\n    transcoderFormat = TranscoderFormat.RGBA32;\n    engineFormat = EngineFormat.RGBAFormat;\n    return { transcoderFormat, engineFormat };\n  }\n  function assert(ok, message) {\n    if (!ok)\n      throw new Error(message);\n  }\n  function getWidthInBlocks(transcoderFormat, width) {\n    return Math.ceil(width / BasisModule.getFormatBlockWidth(transcoderFormat));\n  }\n  function getHeightInBlocks(transcoderFormat, height) {\n    return Math.ceil(height / BasisModule.getFormatBlockHeight(transcoderFormat));\n  }\n  function getTranscodedImageByteLength(transcoderFormat, width, height) {\n    const blockByteLength = BasisModule.getBytesPerBlockOrPixel(transcoderFormat);\n    if (BasisModule.formatIsUncompressed(transcoderFormat)) {\n      return width * height * blockByteLength;\n    }\n    if (transcoderFormat === TranscoderFormat.PVRTC1_4_RGB || transcoderFormat === TranscoderFormat.PVRTC1_4_RGBA) {\n      const paddedWidth = width + 3 & ~3;\n      const paddedHeight = height + 3 & ~3;\n      return (Math.max(8, paddedWidth) * Math.max(8, paddedHeight) * 4 + 7) / 8;\n    }\n    return getWidthInBlocks(transcoderFormat, width) * getHeightInBlocks(transcoderFormat, height) * blockByteLength;\n  }\n  function isPowerOfTwo(value) {\n    if (value <= 2)\n      return true;\n    return (value & value - 1) === 0 && value !== 0;\n  }\n});\nexport {\n  BasisTextureLoader\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}