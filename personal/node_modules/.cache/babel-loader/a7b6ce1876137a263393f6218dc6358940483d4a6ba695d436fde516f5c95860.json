{"ast":null,"code":"import _classCallCheck from \"/home/krug/Coding/JavaScript/Websites/Personal/personal/node_modules/.pnpm/@babel+runtime@7.22.3/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/home/krug/Coding/JavaScript/Websites/Personal/personal/node_modules/.pnpm/@babel+runtime@7.22.3/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nvar __defProp = Object.defineProperty;\nvar __defNormalProp = function __defNormalProp(obj, key, value) {\n  return key in obj ? __defProp(obj, key, {\n    enumerable: true,\n    configurable: true,\n    writable: true,\n    value: value\n  }) : obj[key] = value;\n};\nvar __publicField = function __publicField(obj, key, value) {\n  __defNormalProp(obj, typeof key !== \"symbol\" ? key + \"\" : key, value);\n  return value;\n};\nimport { Vector3, Quaternion, Matrix4 } from \"three\";\nimport { CharsetEncoder } from \"mmd-parser\";\nvar MMDExporter = /*#__PURE__*/function () {\n  function MMDExporter() {\n    _classCallCheck(this, MMDExporter);\n    // Unicode to Shift_JIS table\n    __publicField(this, \"u2sTable\");\n  }\n  /* TODO: implement\n  // mesh -> pmd\n  this.parsePmd = function ( object ) {\n  };\n  */\n  /* TODO: implement\n  // mesh -> pmx\n  this.parsePmx = function ( object ) {\n  };\n  */\n  /* TODO: implement\n  // animation + skeleton -> vmd\n  this.parseVmd = function ( object ) {\n  };\n  */\n  /*\n   * skeleton -> vpd\n   * Returns Shift_JIS encoded Uint8Array. Otherwise return strings.\n   */\n  _createClass(MMDExporter, [{\n    key: \"parseVpd\",\n    value: function parseVpd(skin, outputShiftJis, useOriginalBones) {\n      if (skin.isSkinnedMesh !== true) {\n        console.warn(\"THREE.MMDExporter: parseVpd() requires SkinnedMesh instance.\");\n        return null;\n      }\n      function toStringsFromNumber(num) {\n        if (Math.abs(num) < 1e-6) num = 0;\n        var a = num.toString();\n        if (a.indexOf(\".\") === -1) {\n          a += \".\";\n        }\n        a += \"000000\";\n        var index = a.indexOf(\".\");\n        var d = a.slice(0, index);\n        var p = a.slice(index + 1, index + 7);\n        return d + \".\" + p;\n      }\n      function toStringsFromArray(array2) {\n        var a = [];\n        for (var i = 0, il = array2.length; i < il; i++) {\n          a.push(toStringsFromNumber(array2[i]));\n        }\n        return a.join(\",\");\n      }\n      skin.updateMatrixWorld(true);\n      var bones = skin.skeleton.bones;\n      var bones2 = this.getBindBones(skin);\n      var position = new Vector3();\n      var quaternion = new Quaternion();\n      var quaternion2 = new Quaternion();\n      var matrix = new Matrix4();\n      var array = [];\n      array.push(\"Vocaloid Pose Data file\");\n      array.push(\"\");\n      array.push((skin.name !== \"\" ? skin.name.replace(/\\s/g, \"_\") : \"skin\") + \".osm;\");\n      array.push(bones.length + \";\");\n      array.push(\"\");\n      for (var i = 0, il = bones.length; i < il; i++) {\n        var bone = bones[i];\n        var bone2 = bones2[i];\n        if (useOriginalBones === true && bone.userData.ik !== void 0 && bone.userData.ik.originalMatrix !== void 0) {\n          matrix.fromArray(bone.userData.ik.originalMatrix);\n        } else {\n          matrix.copy(bone.matrix);\n        }\n        position.setFromMatrixPosition(matrix);\n        quaternion.setFromRotationMatrix(matrix);\n        var pArray = position.sub(bone2.position).toArray();\n        var qArray = quaternion2.copy(bone2.quaternion).conjugate().multiply(quaternion).toArray();\n        pArray[2] = -pArray[2];\n        qArray[0] = -qArray[0];\n        qArray[1] = -qArray[1];\n        array.push(\"Bone\" + i + \"{\" + bone.name);\n        array.push(\"  \" + toStringsFromArray(pArray) + \";\");\n        array.push(\"  \" + toStringsFromArray(qArray) + \";\");\n        array.push(\"}\");\n        array.push(\"\");\n      }\n      array.push(\"\");\n      var lines = array.join(\"\\n\");\n      return outputShiftJis === true ? this.unicodeToShiftjis(lines) : lines;\n    }\n  }, {\n    key: \"unicodeToShiftjis\",\n    value: function unicodeToShiftjis(str) {\n      if (this.u2sTable === void 0) {\n        var encoder = new CharsetEncoder();\n        var table = encoder.s2uTable;\n        this.u2sTable = {};\n        var keys = Object.keys(table);\n        for (var i = 0, il = keys.length; i < il; i++) {\n          var key = keys[i];\n          var value = table[key];\n          this.u2sTable[value] = parseInt(key);\n        }\n      }\n      var array = [];\n      for (var _i = 0, _il = str.length; _i < _il; _i++) {\n        var code = str.charCodeAt(_i);\n        var _value = this.u2sTable[code];\n        if (_value === void 0) {\n          throw \"cannot convert charcode 0x\" + code.toString(16);\n        } else if (_value > 255) {\n          array.push(_value >> 8 & 255);\n          array.push(_value & 255);\n        } else {\n          array.push(_value & 255);\n        }\n      }\n      return new Uint8Array(array);\n    }\n  }, {\n    key: \"getBindBones\",\n    value: function getBindBones(skin) {\n      var poseSkin = skin.clone();\n      poseSkin.pose();\n      return poseSkin.skeleton.bones;\n    }\n  }]);\n  return MMDExporter;\n}();\nexport { MMDExporter };","map":{"version":3,"names":["__defProp","Object","defineProperty","__defNormalProp","obj","key","value","enumerable","configurable","writable","__publicField","Vector3","Quaternion","Matrix4","CharsetEncoder","MMDExporter","_classCallCheck","_createClass","parseVpd","skin","outputShiftJis","useOriginalBones","isSkinnedMesh","console","warn","toStringsFromNumber","num","Math","abs","a","toString","indexOf","index","d","slice","p","toStringsFromArray","array2","i","il","length","push","join","updateMatrixWorld","bones","skeleton","bones2","getBindBones","position","quaternion","quaternion2","matrix","array","name","replace","bone","bone2","userData","ik","originalMatrix","fromArray","copy","setFromMatrixPosition","setFromRotationMatrix","pArray","sub","toArray","qArray","conjugate","multiply","lines","unicodeToShiftjis","str","u2sTable","encoder","table","s2uTable","keys","parseInt","code","charCodeAt","Uint8Array","poseSkin","clone","pose"],"sources":["/home/krug/Coding/JavaScript/Websites/Personal/personal/node_modules/.pnpm/three-stdlib@2.23.7_three@0.151.3/node_modules/three-stdlib/exporters/MMDExporter.js"],"sourcesContent":["var __defProp = Object.defineProperty;\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;\nvar __publicField = (obj, key, value) => {\n  __defNormalProp(obj, typeof key !== \"symbol\" ? key + \"\" : key, value);\n  return value;\n};\nimport { Vector3, Quaternion, Matrix4 } from \"three\";\nimport { CharsetEncoder } from \"mmd-parser\";\nclass MMDExporter {\n  constructor() {\n    // Unicode to Shift_JIS table\n    __publicField(this, \"u2sTable\");\n  }\n  /* TODO: implement\n  // mesh -> pmd\n  this.parsePmd = function ( object ) {\n  };\n  */\n  /* TODO: implement\n  // mesh -> pmx\n  this.parsePmx = function ( object ) {\n  };\n  */\n  /* TODO: implement\n  // animation + skeleton -> vmd\n  this.parseVmd = function ( object ) {\n  };\n  */\n  /*\n   * skeleton -> vpd\n   * Returns Shift_JIS encoded Uint8Array. Otherwise return strings.\n   */\n  parseVpd(skin, outputShiftJis, useOriginalBones) {\n    if (skin.isSkinnedMesh !== true) {\n      console.warn(\"THREE.MMDExporter: parseVpd() requires SkinnedMesh instance.\");\n      return null;\n    }\n    function toStringsFromNumber(num) {\n      if (Math.abs(num) < 1e-6)\n        num = 0;\n      let a = num.toString();\n      if (a.indexOf(\".\") === -1) {\n        a += \".\";\n      }\n      a += \"000000\";\n      const index = a.indexOf(\".\");\n      const d = a.slice(0, index);\n      const p = a.slice(index + 1, index + 7);\n      return d + \".\" + p;\n    }\n    function toStringsFromArray(array2) {\n      const a = [];\n      for (let i = 0, il = array2.length; i < il; i++) {\n        a.push(toStringsFromNumber(array2[i]));\n      }\n      return a.join(\",\");\n    }\n    skin.updateMatrixWorld(true);\n    const bones = skin.skeleton.bones;\n    const bones2 = this.getBindBones(skin);\n    const position = new Vector3();\n    const quaternion = new Quaternion();\n    const quaternion2 = new Quaternion();\n    const matrix = new Matrix4();\n    const array = [];\n    array.push(\"Vocaloid Pose Data file\");\n    array.push(\"\");\n    array.push((skin.name !== \"\" ? skin.name.replace(/\\s/g, \"_\") : \"skin\") + \".osm;\");\n    array.push(bones.length + \";\");\n    array.push(\"\");\n    for (let i = 0, il = bones.length; i < il; i++) {\n      const bone = bones[i];\n      const bone2 = bones2[i];\n      if (useOriginalBones === true && bone.userData.ik !== void 0 && bone.userData.ik.originalMatrix !== void 0) {\n        matrix.fromArray(bone.userData.ik.originalMatrix);\n      } else {\n        matrix.copy(bone.matrix);\n      }\n      position.setFromMatrixPosition(matrix);\n      quaternion.setFromRotationMatrix(matrix);\n      const pArray = position.sub(bone2.position).toArray();\n      const qArray = quaternion2.copy(bone2.quaternion).conjugate().multiply(quaternion).toArray();\n      pArray[2] = -pArray[2];\n      qArray[0] = -qArray[0];\n      qArray[1] = -qArray[1];\n      array.push(\"Bone\" + i + \"{\" + bone.name);\n      array.push(\"  \" + toStringsFromArray(pArray) + \";\");\n      array.push(\"  \" + toStringsFromArray(qArray) + \";\");\n      array.push(\"}\");\n      array.push(\"\");\n    }\n    array.push(\"\");\n    const lines = array.join(\"\\n\");\n    return outputShiftJis === true ? this.unicodeToShiftjis(lines) : lines;\n  }\n  unicodeToShiftjis(str) {\n    if (this.u2sTable === void 0) {\n      const encoder = new CharsetEncoder();\n      const table = encoder.s2uTable;\n      this.u2sTable = {};\n      const keys = Object.keys(table);\n      for (let i = 0, il = keys.length; i < il; i++) {\n        let key = keys[i];\n        const value = table[key];\n        this.u2sTable[value] = parseInt(key);\n      }\n    }\n    const array = [];\n    for (let i = 0, il = str.length; i < il; i++) {\n      const code = str.charCodeAt(i);\n      const value = this.u2sTable[code];\n      if (value === void 0) {\n        throw \"cannot convert charcode 0x\" + code.toString(16);\n      } else if (value > 255) {\n        array.push(value >> 8 & 255);\n        array.push(value & 255);\n      } else {\n        array.push(value & 255);\n      }\n    }\n    return new Uint8Array(array);\n  }\n  getBindBones(skin) {\n    const poseSkin = skin.clone();\n    poseSkin.pose();\n    return poseSkin.skeleton.bones;\n  }\n}\nexport {\n  MMDExporter\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}