{"ast":null,"code":"import { Loader, LoaderUtils, FileLoader, TextureLoader, RepeatWrapping, ClampToEdgeWrapping, Texture, MeshPhongMaterial, MeshLambertMaterial, Color, EquirectangularReflectionMapping, Matrix4, Group, Bone, PropertyBinding, Object3D, OrthographicCamera, PerspectiveCamera, PointLight, MathUtils, SpotLight, DirectionalLight, SkinnedMesh, Mesh, LineBasicMaterial, Line, Vector3, Skeleton, AmbientLight, BufferGeometry, Float32BufferAttribute, Uint16BufferAttribute, Matrix3, Vector4, AnimationClip, Quaternion, Euler, VectorKeyframeTrack, QuaternionKeyframeTrack, NumberKeyframeTrack } from \"three\";\nimport { unzlibSync } from \"fflate\";\nimport { NURBSCurve } from \"../curves/NURBSCurve.js\";\nlet fbxTree;\nlet connections;\nlet sceneGraph;\nclass FBXLoader extends Loader {\n  constructor(manager) {\n    super(manager);\n  }\n  load(url, onLoad, onProgress, onError) {\n    const scope = this;\n    const path = scope.path === \"\" ? LoaderUtils.extractUrlBase(url) : scope.path;\n    const loader = new FileLoader(this.manager);\n    loader.setPath(scope.path);\n    loader.setResponseType(\"arraybuffer\");\n    loader.setRequestHeader(scope.requestHeader);\n    loader.setWithCredentials(scope.withCredentials);\n    loader.load(url, function (buffer) {\n      try {\n        onLoad(scope.parse(buffer, path));\n      } catch (e) {\n        if (onError) {\n          onError(e);\n        } else {\n          console.error(e);\n        }\n        scope.manager.itemError(url);\n      }\n    }, onProgress, onError);\n  }\n  parse(FBXBuffer, path) {\n    if (isFbxFormatBinary(FBXBuffer)) {\n      fbxTree = new BinaryParser().parse(FBXBuffer);\n    } else {\n      const FBXText = convertArrayBufferToString(FBXBuffer);\n      if (!isFbxFormatASCII(FBXText)) {\n        throw new Error(\"THREE.FBXLoader: Unknown format.\");\n      }\n      if (getFbxVersion(FBXText) < 7e3) {\n        throw new Error(\"THREE.FBXLoader: FBX version not supported, FileVersion: \" + getFbxVersion(FBXText));\n      }\n      fbxTree = new TextParser().parse(FBXText);\n    }\n    const textureLoader = new TextureLoader(this.manager).setPath(this.resourcePath || path).setCrossOrigin(this.crossOrigin);\n    return new FBXTreeParser(textureLoader, this.manager).parse(fbxTree);\n  }\n}\nclass FBXTreeParser {\n  constructor(textureLoader, manager) {\n    this.textureLoader = textureLoader;\n    this.manager = manager;\n  }\n  parse() {\n    connections = this.parseConnections();\n    const images = this.parseImages();\n    const textures = this.parseTextures(images);\n    const materials = this.parseMaterials(textures);\n    const deformers = this.parseDeformers();\n    const geometryMap = new GeometryParser().parse(deformers);\n    this.parseScene(deformers, geometryMap, materials);\n    return sceneGraph;\n  }\n  // Parses FBXTree.Connections which holds parent-child connections between objects (e.g. material -> texture, model->geometry )\n  // and details the connection type\n  parseConnections() {\n    const connectionMap = /* @__PURE__ */new Map();\n    if (\"Connections\" in fbxTree) {\n      const rawConnections = fbxTree.Connections.connections;\n      rawConnections.forEach(function (rawConnection) {\n        const fromID = rawConnection[0];\n        const toID = rawConnection[1];\n        const relationship = rawConnection[2];\n        if (!connectionMap.has(fromID)) {\n          connectionMap.set(fromID, {\n            parents: [],\n            children: []\n          });\n        }\n        const parentRelationship = {\n          ID: toID,\n          relationship\n        };\n        connectionMap.get(fromID).parents.push(parentRelationship);\n        if (!connectionMap.has(toID)) {\n          connectionMap.set(toID, {\n            parents: [],\n            children: []\n          });\n        }\n        const childRelationship = {\n          ID: fromID,\n          relationship\n        };\n        connectionMap.get(toID).children.push(childRelationship);\n      });\n    }\n    return connectionMap;\n  }\n  // Parse FBXTree.Objects.Video for embedded image data\n  // These images are connected to textures in FBXTree.Objects.Textures\n  // via FBXTree.Connections.\n  parseImages() {\n    const images = {};\n    const blobs = {};\n    if (\"Video\" in fbxTree.Objects) {\n      const videoNodes = fbxTree.Objects.Video;\n      for (const nodeID in videoNodes) {\n        const videoNode = videoNodes[nodeID];\n        const id = parseInt(nodeID);\n        images[id] = videoNode.RelativeFilename || videoNode.Filename;\n        if (\"Content\" in videoNode) {\n          const arrayBufferContent = videoNode.Content instanceof ArrayBuffer && videoNode.Content.byteLength > 0;\n          const base64Content = typeof videoNode.Content === \"string\" && videoNode.Content !== \"\";\n          if (arrayBufferContent || base64Content) {\n            const image = this.parseImage(videoNodes[nodeID]);\n            blobs[videoNode.RelativeFilename || videoNode.Filename] = image;\n          }\n        }\n      }\n    }\n    for (const id in images) {\n      const filename = images[id];\n      if (blobs[filename] !== void 0) images[id] = blobs[filename];else images[id] = images[id].split(\"\\\\\").pop();\n    }\n    return images;\n  }\n  // Parse embedded image data in FBXTree.Video.Content\n  parseImage(videoNode) {\n    const content = videoNode.Content;\n    const fileName = videoNode.RelativeFilename || videoNode.Filename;\n    const extension = fileName.slice(fileName.lastIndexOf(\".\") + 1).toLowerCase();\n    let type;\n    switch (extension) {\n      case \"bmp\":\n        type = \"image/bmp\";\n        break;\n      case \"jpg\":\n      case \"jpeg\":\n        type = \"image/jpeg\";\n        break;\n      case \"png\":\n        type = \"image/png\";\n        break;\n      case \"tif\":\n        type = \"image/tiff\";\n        break;\n      case \"tga\":\n        if (this.manager.getHandler(\".tga\") === null) {\n          console.warn(\"FBXLoader: TGA loader not found, skipping \", fileName);\n        }\n        type = \"image/tga\";\n        break;\n      default:\n        console.warn('FBXLoader: Image type \"' + extension + '\" is not supported.');\n        return;\n    }\n    if (typeof content === \"string\") {\n      return \"data:\" + type + \";base64,\" + content;\n    } else {\n      const array = new Uint8Array(content);\n      return window.URL.createObjectURL(new Blob([array], {\n        type\n      }));\n    }\n  }\n  // Parse nodes in FBXTree.Objects.Texture\n  // These contain details such as UV scaling, cropping, rotation etc and are connected\n  // to images in FBXTree.Objects.Video\n  parseTextures(images) {\n    const textureMap = /* @__PURE__ */new Map();\n    if (\"Texture\" in fbxTree.Objects) {\n      const textureNodes = fbxTree.Objects.Texture;\n      for (const nodeID in textureNodes) {\n        const texture = this.parseTexture(textureNodes[nodeID], images);\n        textureMap.set(parseInt(nodeID), texture);\n      }\n    }\n    return textureMap;\n  }\n  // Parse individual node in FBXTree.Objects.Texture\n  parseTexture(textureNode, images) {\n    const texture = this.loadTexture(textureNode, images);\n    texture.ID = textureNode.id;\n    texture.name = textureNode.attrName;\n    const wrapModeU = textureNode.WrapModeU;\n    const wrapModeV = textureNode.WrapModeV;\n    const valueU = wrapModeU !== void 0 ? wrapModeU.value : 0;\n    const valueV = wrapModeV !== void 0 ? wrapModeV.value : 0;\n    texture.wrapS = valueU === 0 ? RepeatWrapping : ClampToEdgeWrapping;\n    texture.wrapT = valueV === 0 ? RepeatWrapping : ClampToEdgeWrapping;\n    if (\"Scaling\" in textureNode) {\n      const values = textureNode.Scaling.value;\n      texture.repeat.x = values[0];\n      texture.repeat.y = values[1];\n    }\n    return texture;\n  }\n  // load a texture specified as a blob or data URI, or via an external URL using TextureLoader\n  loadTexture(textureNode, images) {\n    let fileName;\n    const currentPath = this.textureLoader.path;\n    const children = connections.get(textureNode.id).children;\n    if (children !== void 0 && children.length > 0 && images[children[0].ID] !== void 0) {\n      fileName = images[children[0].ID];\n      if (fileName.indexOf(\"blob:\") === 0 || fileName.indexOf(\"data:\") === 0) {\n        this.textureLoader.setPath(void 0);\n      }\n    }\n    let texture;\n    const extension = textureNode.FileName.slice(-3).toLowerCase();\n    if (extension === \"tga\") {\n      const loader = this.manager.getHandler(\".tga\");\n      if (loader === null) {\n        console.warn(\"FBXLoader: TGA loader not found, creating placeholder texture for\", textureNode.RelativeFilename);\n        texture = new Texture();\n      } else {\n        loader.setPath(this.textureLoader.path);\n        texture = loader.load(fileName);\n      }\n    } else if (extension === \"psd\") {\n      console.warn(\"FBXLoader: PSD textures are not supported, creating placeholder texture for\", textureNode.RelativeFilename);\n      texture = new Texture();\n    } else {\n      texture = this.textureLoader.load(fileName);\n    }\n    this.textureLoader.setPath(currentPath);\n    return texture;\n  }\n  // Parse nodes in FBXTree.Objects.Material\n  parseMaterials(textureMap) {\n    const materialMap = /* @__PURE__ */new Map();\n    if (\"Material\" in fbxTree.Objects) {\n      const materialNodes = fbxTree.Objects.Material;\n      for (const nodeID in materialNodes) {\n        const material = this.parseMaterial(materialNodes[nodeID], textureMap);\n        if (material !== null) materialMap.set(parseInt(nodeID), material);\n      }\n    }\n    return materialMap;\n  }\n  // Parse single node in FBXTree.Objects.Material\n  // Materials are connected to texture maps in FBXTree.Objects.Textures\n  // FBX format currently only supports Lambert and Phong shading models\n  parseMaterial(materialNode, textureMap) {\n    const ID = materialNode.id;\n    const name = materialNode.attrName;\n    let type = materialNode.ShadingModel;\n    if (typeof type === \"object\") {\n      type = type.value;\n    }\n    if (!connections.has(ID)) return null;\n    const parameters = this.parseParameters(materialNode, textureMap, ID);\n    let material;\n    switch (type.toLowerCase()) {\n      case \"phong\":\n        material = new MeshPhongMaterial();\n        break;\n      case \"lambert\":\n        material = new MeshLambertMaterial();\n        break;\n      default:\n        console.warn('THREE.FBXLoader: unknown material type \"%s\". Defaulting to MeshPhongMaterial.', type);\n        material = new MeshPhongMaterial();\n        break;\n    }\n    material.setValues(parameters);\n    material.name = name;\n    return material;\n  }\n  // Parse FBX material and return parameters suitable for a three.js material\n  // Also parse the texture map and return any textures associated with the material\n  parseParameters(materialNode, textureMap, ID) {\n    const parameters = {};\n    if (materialNode.BumpFactor) {\n      parameters.bumpScale = materialNode.BumpFactor.value;\n    }\n    if (materialNode.Diffuse) {\n      parameters.color = new Color().fromArray(materialNode.Diffuse.value);\n    } else if (materialNode.DiffuseColor && (materialNode.DiffuseColor.type === \"Color\" || materialNode.DiffuseColor.type === \"ColorRGB\")) {\n      parameters.color = new Color().fromArray(materialNode.DiffuseColor.value);\n    }\n    if (materialNode.DisplacementFactor) {\n      parameters.displacementScale = materialNode.DisplacementFactor.value;\n    }\n    if (materialNode.Emissive) {\n      parameters.emissive = new Color().fromArray(materialNode.Emissive.value);\n    } else if (materialNode.EmissiveColor && (materialNode.EmissiveColor.type === \"Color\" || materialNode.EmissiveColor.type === \"ColorRGB\")) {\n      parameters.emissive = new Color().fromArray(materialNode.EmissiveColor.value);\n    }\n    if (materialNode.EmissiveFactor) {\n      parameters.emissiveIntensity = parseFloat(materialNode.EmissiveFactor.value);\n    }\n    if (materialNode.Opacity) {\n      parameters.opacity = parseFloat(materialNode.Opacity.value);\n    }\n    if (parameters.opacity < 1) {\n      parameters.transparent = true;\n    }\n    if (materialNode.ReflectionFactor) {\n      parameters.reflectivity = materialNode.ReflectionFactor.value;\n    }\n    if (materialNode.Shininess) {\n      parameters.shininess = materialNode.Shininess.value;\n    }\n    if (materialNode.Specular) {\n      parameters.specular = new Color().fromArray(materialNode.Specular.value);\n    } else if (materialNode.SpecularColor && materialNode.SpecularColor.type === \"Color\") {\n      parameters.specular = new Color().fromArray(materialNode.SpecularColor.value);\n    }\n    const scope = this;\n    connections.get(ID).children.forEach(function (child) {\n      const type = child.relationship;\n      switch (type) {\n        case \"Bump\":\n          parameters.bumpMap = scope.getTexture(textureMap, child.ID);\n          break;\n        case \"Maya|TEX_ao_map\":\n          parameters.aoMap = scope.getTexture(textureMap, child.ID);\n          break;\n        case \"DiffuseColor\":\n        case \"Maya|TEX_color_map\":\n          parameters.map = scope.getTexture(textureMap, child.ID);\n          if (parameters.map !== void 0) {\n            if (\"colorSpace\" in parameters.map) parameters.map.colorSpace = \"srgb\";else parameters.map.encoding = 3001;\n          }\n          break;\n        case \"DisplacementColor\":\n          parameters.displacementMap = scope.getTexture(textureMap, child.ID);\n          break;\n        case \"EmissiveColor\":\n          parameters.emissiveMap = scope.getTexture(textureMap, child.ID);\n          if (parameters.emissiveMap !== void 0) {\n            if (\"colorSpace\" in parameters.emissiveMap) parameters.emissiveMap.colorSpace = \"srgb\";else parameters.emissiveMap.encoding = 3001;\n          }\n          break;\n        case \"NormalMap\":\n        case \"Maya|TEX_normal_map\":\n          parameters.normalMap = scope.getTexture(textureMap, child.ID);\n          break;\n        case \"ReflectionColor\":\n          parameters.envMap = scope.getTexture(textureMap, child.ID);\n          if (parameters.envMap !== void 0) {\n            parameters.envMap.mapping = EquirectangularReflectionMapping;\n            if (\"colorSpace\" in parameters.envMap) parameters.envMap.colorSpace = \"srgb\";else parameters.envMap.encoding = 3001;\n          }\n          break;\n        case \"SpecularColor\":\n          parameters.specularMap = scope.getTexture(textureMap, child.ID);\n          if (parameters.specularMap !== void 0) {\n            if (\"colorSpace\" in parameters.specularMap) parameters.specularMap.colorSpace = \"srgb\";else parameters.specularMap.encoding = 3001;\n          }\n          break;\n        case \"TransparentColor\":\n        case \"TransparencyFactor\":\n          parameters.alphaMap = scope.getTexture(textureMap, child.ID);\n          parameters.transparent = true;\n          break;\n        case \"AmbientColor\":\n        case \"ShininessExponent\":\n        case \"SpecularFactor\":\n        case \"VectorDisplacementColor\":\n        default:\n          console.warn(\"THREE.FBXLoader: %s map is not supported in three.js, skipping texture.\", type);\n          break;\n      }\n    });\n    return parameters;\n  }\n  // get a texture from the textureMap for use by a material.\n  getTexture(textureMap, id) {\n    if (\"LayeredTexture\" in fbxTree.Objects && id in fbxTree.Objects.LayeredTexture) {\n      console.warn(\"THREE.FBXLoader: layered textures are not supported in three.js. Discarding all but first layer.\");\n      id = connections.get(id).children[0].ID;\n    }\n    return textureMap.get(id);\n  }\n  // Parse nodes in FBXTree.Objects.Deformer\n  // Deformer node can contain skinning or Vertex Cache animation data, however only skinning is supported here\n  // Generates map of Skeleton-like objects for use later when generating and binding skeletons.\n  parseDeformers() {\n    const skeletons = {};\n    const morphTargets = {};\n    if (\"Deformer\" in fbxTree.Objects) {\n      const DeformerNodes = fbxTree.Objects.Deformer;\n      for (const nodeID in DeformerNodes) {\n        const deformerNode = DeformerNodes[nodeID];\n        const relationships = connections.get(parseInt(nodeID));\n        if (deformerNode.attrType === \"Skin\") {\n          const skeleton = this.parseSkeleton(relationships, DeformerNodes);\n          skeleton.ID = nodeID;\n          if (relationships.parents.length > 1) {\n            console.warn(\"THREE.FBXLoader: skeleton attached to more than one geometry is not supported.\");\n          }\n          skeleton.geometryID = relationships.parents[0].ID;\n          skeletons[nodeID] = skeleton;\n        } else if (deformerNode.attrType === \"BlendShape\") {\n          const morphTarget = {\n            id: nodeID\n          };\n          morphTarget.rawTargets = this.parseMorphTargets(relationships, DeformerNodes);\n          morphTarget.id = nodeID;\n          if (relationships.parents.length > 1) {\n            console.warn(\"THREE.FBXLoader: morph target attached to more than one geometry is not supported.\");\n          }\n          morphTargets[nodeID] = morphTarget;\n        }\n      }\n    }\n    return {\n      skeletons,\n      morphTargets\n    };\n  }\n  // Parse single nodes in FBXTree.Objects.Deformer\n  // The top level skeleton node has type 'Skin' and sub nodes have type 'Cluster'\n  // Each skin node represents a skeleton and each cluster node represents a bone\n  parseSkeleton(relationships, deformerNodes) {\n    const rawBones = [];\n    relationships.children.forEach(function (child) {\n      const boneNode = deformerNodes[child.ID];\n      if (boneNode.attrType !== \"Cluster\") return;\n      const rawBone = {\n        ID: child.ID,\n        indices: [],\n        weights: [],\n        transformLink: new Matrix4().fromArray(boneNode.TransformLink.a)\n        // transform: new Matrix4().fromArray( boneNode.Transform.a ),\n        // linkMode: boneNode.Mode,\n      };\n\n      if (\"Indexes\" in boneNode) {\n        rawBone.indices = boneNode.Indexes.a;\n        rawBone.weights = boneNode.Weights.a;\n      }\n      rawBones.push(rawBone);\n    });\n    return {\n      rawBones,\n      bones: []\n    };\n  }\n  // The top level morph deformer node has type \"BlendShape\" and sub nodes have type \"BlendShapeChannel\"\n  parseMorphTargets(relationships, deformerNodes) {\n    const rawMorphTargets = [];\n    for (let i = 0; i < relationships.children.length; i++) {\n      const child = relationships.children[i];\n      const morphTargetNode = deformerNodes[child.ID];\n      const rawMorphTarget = {\n        name: morphTargetNode.attrName,\n        initialWeight: morphTargetNode.DeformPercent,\n        id: morphTargetNode.id,\n        fullWeights: morphTargetNode.FullWeights.a\n      };\n      if (morphTargetNode.attrType !== \"BlendShapeChannel\") return;\n      rawMorphTarget.geoID = connections.get(parseInt(child.ID)).children.filter(function (child2) {\n        return child2.relationship === void 0;\n      })[0].ID;\n      rawMorphTargets.push(rawMorphTarget);\n    }\n    return rawMorphTargets;\n  }\n  // create the main Group() to be returned by the loader\n  parseScene(deformers, geometryMap, materialMap) {\n    sceneGraph = new Group();\n    const modelMap = this.parseModels(deformers.skeletons, geometryMap, materialMap);\n    const modelNodes = fbxTree.Objects.Model;\n    const scope = this;\n    modelMap.forEach(function (model) {\n      const modelNode = modelNodes[model.ID];\n      scope.setLookAtProperties(model, modelNode);\n      const parentConnections = connections.get(model.ID).parents;\n      parentConnections.forEach(function (connection) {\n        const parent = modelMap.get(connection.ID);\n        if (parent !== void 0) parent.add(model);\n      });\n      if (model.parent === null) {\n        sceneGraph.add(model);\n      }\n    });\n    this.bindSkeleton(deformers.skeletons, geometryMap, modelMap);\n    this.createAmbientLight();\n    sceneGraph.traverse(function (node) {\n      if (node.userData.transformData) {\n        if (node.parent) {\n          node.userData.transformData.parentMatrix = node.parent.matrix;\n          node.userData.transformData.parentMatrixWorld = node.parent.matrixWorld;\n        }\n        const transform = generateTransform(node.userData.transformData);\n        node.applyMatrix4(transform);\n        node.updateWorldMatrix();\n      }\n    });\n    const animations = new AnimationParser().parse();\n    if (sceneGraph.children.length === 1 && sceneGraph.children[0].isGroup) {\n      sceneGraph.children[0].animations = animations;\n      sceneGraph = sceneGraph.children[0];\n    }\n    sceneGraph.animations = animations;\n  }\n  // parse nodes in FBXTree.Objects.Model\n  parseModels(skeletons, geometryMap, materialMap) {\n    const modelMap = /* @__PURE__ */new Map();\n    const modelNodes = fbxTree.Objects.Model;\n    for (const nodeID in modelNodes) {\n      const id = parseInt(nodeID);\n      const node = modelNodes[nodeID];\n      const relationships = connections.get(id);\n      let model = this.buildSkeleton(relationships, skeletons, id, node.attrName);\n      if (!model) {\n        switch (node.attrType) {\n          case \"Camera\":\n            model = this.createCamera(relationships);\n            break;\n          case \"Light\":\n            model = this.createLight(relationships);\n            break;\n          case \"Mesh\":\n            model = this.createMesh(relationships, geometryMap, materialMap);\n            break;\n          case \"NurbsCurve\":\n            model = this.createCurve(relationships, geometryMap);\n            break;\n          case \"LimbNode\":\n          case \"Root\":\n            model = new Bone();\n            break;\n          case \"Null\":\n          default:\n            model = new Group();\n            break;\n        }\n        model.name = node.attrName ? PropertyBinding.sanitizeNodeName(node.attrName) : \"\";\n        model.ID = id;\n      }\n      this.getTransformData(model, node);\n      modelMap.set(id, model);\n    }\n    return modelMap;\n  }\n  buildSkeleton(relationships, skeletons, id, name) {\n    let bone = null;\n    relationships.parents.forEach(function (parent) {\n      for (const ID in skeletons) {\n        const skeleton = skeletons[ID];\n        skeleton.rawBones.forEach(function (rawBone, i) {\n          if (rawBone.ID === parent.ID) {\n            const subBone = bone;\n            bone = new Bone();\n            bone.matrixWorld.copy(rawBone.transformLink);\n            bone.name = name ? PropertyBinding.sanitizeNodeName(name) : \"\";\n            bone.ID = id;\n            skeleton.bones[i] = bone;\n            if (subBone !== null) {\n              bone.add(subBone);\n            }\n          }\n        });\n      }\n    });\n    return bone;\n  }\n  // create a PerspectiveCamera or OrthographicCamera\n  createCamera(relationships) {\n    let model;\n    let cameraAttribute;\n    relationships.children.forEach(function (child) {\n      const attr = fbxTree.Objects.NodeAttribute[child.ID];\n      if (attr !== void 0) {\n        cameraAttribute = attr;\n      }\n    });\n    if (cameraAttribute === void 0) {\n      model = new Object3D();\n    } else {\n      let type = 0;\n      if (cameraAttribute.CameraProjectionType !== void 0 && cameraAttribute.CameraProjectionType.value === 1) {\n        type = 1;\n      }\n      let nearClippingPlane = 1;\n      if (cameraAttribute.NearPlane !== void 0) {\n        nearClippingPlane = cameraAttribute.NearPlane.value / 1e3;\n      }\n      let farClippingPlane = 1e3;\n      if (cameraAttribute.FarPlane !== void 0) {\n        farClippingPlane = cameraAttribute.FarPlane.value / 1e3;\n      }\n      let width = window.innerWidth;\n      let height = window.innerHeight;\n      if (cameraAttribute.AspectWidth !== void 0 && cameraAttribute.AspectHeight !== void 0) {\n        width = cameraAttribute.AspectWidth.value;\n        height = cameraAttribute.AspectHeight.value;\n      }\n      const aspect = width / height;\n      let fov = 45;\n      if (cameraAttribute.FieldOfView !== void 0) {\n        fov = cameraAttribute.FieldOfView.value;\n      }\n      const focalLength = cameraAttribute.FocalLength ? cameraAttribute.FocalLength.value : null;\n      switch (type) {\n        case 0:\n          model = new PerspectiveCamera(fov, aspect, nearClippingPlane, farClippingPlane);\n          if (focalLength !== null) model.setFocalLength(focalLength);\n          break;\n        case 1:\n          model = new OrthographicCamera(-width / 2, width / 2, height / 2, -height / 2, nearClippingPlane, farClippingPlane);\n          break;\n        default:\n          console.warn(\"THREE.FBXLoader: Unknown camera type \" + type + \".\");\n          model = new Object3D();\n          break;\n      }\n    }\n    return model;\n  }\n  // Create a DirectionalLight, PointLight or SpotLight\n  createLight(relationships) {\n    let model;\n    let lightAttribute;\n    relationships.children.forEach(function (child) {\n      const attr = fbxTree.Objects.NodeAttribute[child.ID];\n      if (attr !== void 0) {\n        lightAttribute = attr;\n      }\n    });\n    if (lightAttribute === void 0) {\n      model = new Object3D();\n    } else {\n      let type;\n      if (lightAttribute.LightType === void 0) {\n        type = 0;\n      } else {\n        type = lightAttribute.LightType.value;\n      }\n      let color = 16777215;\n      if (lightAttribute.Color !== void 0) {\n        color = new Color().fromArray(lightAttribute.Color.value);\n      }\n      let intensity = lightAttribute.Intensity === void 0 ? 1 : lightAttribute.Intensity.value / 100;\n      if (lightAttribute.CastLightOnObject !== void 0 && lightAttribute.CastLightOnObject.value === 0) {\n        intensity = 0;\n      }\n      let distance = 0;\n      if (lightAttribute.FarAttenuationEnd !== void 0) {\n        if (lightAttribute.EnableFarAttenuation !== void 0 && lightAttribute.EnableFarAttenuation.value === 0) {\n          distance = 0;\n        } else {\n          distance = lightAttribute.FarAttenuationEnd.value;\n        }\n      }\n      const decay = 1;\n      switch (type) {\n        case 0:\n          model = new PointLight(color, intensity, distance, decay);\n          break;\n        case 1:\n          model = new DirectionalLight(color, intensity);\n          break;\n        case 2:\n          let angle = Math.PI / 3;\n          if (lightAttribute.InnerAngle !== void 0) {\n            angle = MathUtils.degToRad(lightAttribute.InnerAngle.value);\n          }\n          let penumbra = 0;\n          if (lightAttribute.OuterAngle !== void 0) {\n            penumbra = MathUtils.degToRad(lightAttribute.OuterAngle.value);\n            penumbra = Math.max(penumbra, 1);\n          }\n          model = new SpotLight(color, intensity, distance, angle, penumbra, decay);\n          break;\n        default:\n          console.warn(\"THREE.FBXLoader: Unknown light type \" + lightAttribute.LightType.value + \", defaulting to a PointLight.\");\n          model = new PointLight(color, intensity);\n          break;\n      }\n      if (lightAttribute.CastShadows !== void 0 && lightAttribute.CastShadows.value === 1) {\n        model.castShadow = true;\n      }\n    }\n    return model;\n  }\n  createMesh(relationships, geometryMap, materialMap) {\n    let model;\n    let geometry = null;\n    let material = null;\n    const materials = [];\n    relationships.children.forEach(function (child) {\n      if (geometryMap.has(child.ID)) {\n        geometry = geometryMap.get(child.ID);\n      }\n      if (materialMap.has(child.ID)) {\n        materials.push(materialMap.get(child.ID));\n      }\n    });\n    if (materials.length > 1) {\n      material = materials;\n    } else if (materials.length > 0) {\n      material = materials[0];\n    } else {\n      material = new MeshPhongMaterial({\n        color: 13421772\n      });\n      materials.push(material);\n    }\n    if (\"color\" in geometry.attributes) {\n      materials.forEach(function (material2) {\n        material2.vertexColors = true;\n      });\n    }\n    if (geometry.FBX_Deformer) {\n      model = new SkinnedMesh(geometry, material);\n      model.normalizeSkinWeights();\n    } else {\n      model = new Mesh(geometry, material);\n    }\n    return model;\n  }\n  createCurve(relationships, geometryMap) {\n    const geometry = relationships.children.reduce(function (geo, child) {\n      if (geometryMap.has(child.ID)) geo = geometryMap.get(child.ID);\n      return geo;\n    }, null);\n    const material = new LineBasicMaterial({\n      color: 3342591,\n      linewidth: 1\n    });\n    return new Line(geometry, material);\n  }\n  // parse the model node for transform data\n  getTransformData(model, modelNode) {\n    const transformData = {};\n    if (\"InheritType\" in modelNode) transformData.inheritType = parseInt(modelNode.InheritType.value);\n    if (\"RotationOrder\" in modelNode) transformData.eulerOrder = getEulerOrder(modelNode.RotationOrder.value);else transformData.eulerOrder = \"ZYX\";\n    if (\"Lcl_Translation\" in modelNode) transformData.translation = modelNode.Lcl_Translation.value;\n    if (\"PreRotation\" in modelNode) transformData.preRotation = modelNode.PreRotation.value;\n    if (\"Lcl_Rotation\" in modelNode) transformData.rotation = modelNode.Lcl_Rotation.value;\n    if (\"PostRotation\" in modelNode) transformData.postRotation = modelNode.PostRotation.value;\n    if (\"Lcl_Scaling\" in modelNode) transformData.scale = modelNode.Lcl_Scaling.value;\n    if (\"ScalingOffset\" in modelNode) transformData.scalingOffset = modelNode.ScalingOffset.value;\n    if (\"ScalingPivot\" in modelNode) transformData.scalingPivot = modelNode.ScalingPivot.value;\n    if (\"RotationOffset\" in modelNode) transformData.rotationOffset = modelNode.RotationOffset.value;\n    if (\"RotationPivot\" in modelNode) transformData.rotationPivot = modelNode.RotationPivot.value;\n    model.userData.transformData = transformData;\n  }\n  setLookAtProperties(model, modelNode) {\n    if (\"LookAtProperty\" in modelNode) {\n      const children = connections.get(model.ID).children;\n      children.forEach(function (child) {\n        if (child.relationship === \"LookAtProperty\") {\n          const lookAtTarget = fbxTree.Objects.Model[child.ID];\n          if (\"Lcl_Translation\" in lookAtTarget) {\n            const pos = lookAtTarget.Lcl_Translation.value;\n            if (model.target !== void 0) {\n              model.target.position.fromArray(pos);\n              sceneGraph.add(model.target);\n            } else {\n              model.lookAt(new Vector3().fromArray(pos));\n            }\n          }\n        }\n      });\n    }\n  }\n  bindSkeleton(skeletons, geometryMap, modelMap) {\n    const bindMatrices = this.parsePoseNodes();\n    for (const ID in skeletons) {\n      const skeleton = skeletons[ID];\n      const parents = connections.get(parseInt(skeleton.ID)).parents;\n      parents.forEach(function (parent) {\n        if (geometryMap.has(parent.ID)) {\n          const geoID = parent.ID;\n          const geoRelationships = connections.get(geoID);\n          geoRelationships.parents.forEach(function (geoConnParent) {\n            if (modelMap.has(geoConnParent.ID)) {\n              const model = modelMap.get(geoConnParent.ID);\n              model.bind(new Skeleton(skeleton.bones), bindMatrices[geoConnParent.ID]);\n            }\n          });\n        }\n      });\n    }\n  }\n  parsePoseNodes() {\n    const bindMatrices = {};\n    if (\"Pose\" in fbxTree.Objects) {\n      const BindPoseNode = fbxTree.Objects.Pose;\n      for (const nodeID in BindPoseNode) {\n        if (BindPoseNode[nodeID].attrType === \"BindPose\" && BindPoseNode[nodeID].NbPoseNodes > 0) {\n          const poseNodes = BindPoseNode[nodeID].PoseNode;\n          if (Array.isArray(poseNodes)) {\n            poseNodes.forEach(function (poseNode) {\n              bindMatrices[poseNode.Node] = new Matrix4().fromArray(poseNode.Matrix.a);\n            });\n          } else {\n            bindMatrices[poseNodes.Node] = new Matrix4().fromArray(poseNodes.Matrix.a);\n          }\n        }\n      }\n    }\n    return bindMatrices;\n  }\n  // Parse ambient color in FBXTree.GlobalSettings - if it's not set to black (default), create an ambient light\n  createAmbientLight() {\n    if (\"GlobalSettings\" in fbxTree && \"AmbientColor\" in fbxTree.GlobalSettings) {\n      const ambientColor = fbxTree.GlobalSettings.AmbientColor.value;\n      const r = ambientColor[0];\n      const g = ambientColor[1];\n      const b = ambientColor[2];\n      if (r !== 0 || g !== 0 || b !== 0) {\n        const color = new Color(r, g, b);\n        sceneGraph.add(new AmbientLight(color, 1));\n      }\n    }\n  }\n}\nclass GeometryParser {\n  // Parse nodes in FBXTree.Objects.Geometry\n  parse(deformers) {\n    const geometryMap = /* @__PURE__ */new Map();\n    if (\"Geometry\" in fbxTree.Objects) {\n      const geoNodes = fbxTree.Objects.Geometry;\n      for (const nodeID in geoNodes) {\n        const relationships = connections.get(parseInt(nodeID));\n        const geo = this.parseGeometry(relationships, geoNodes[nodeID], deformers);\n        geometryMap.set(parseInt(nodeID), geo);\n      }\n    }\n    return geometryMap;\n  }\n  // Parse single node in FBXTree.Objects.Geometry\n  parseGeometry(relationships, geoNode, deformers) {\n    switch (geoNode.attrType) {\n      case \"Mesh\":\n        return this.parseMeshGeometry(relationships, geoNode, deformers);\n        break;\n      case \"NurbsCurve\":\n        return this.parseNurbsGeometry(geoNode);\n        break;\n    }\n  }\n  // Parse single node mesh geometry in FBXTree.Objects.Geometry\n  parseMeshGeometry(relationships, geoNode, deformers) {\n    const skeletons = deformers.skeletons;\n    const morphTargets = [];\n    const modelNodes = relationships.parents.map(function (parent) {\n      return fbxTree.Objects.Model[parent.ID];\n    });\n    if (modelNodes.length === 0) return;\n    const skeleton = relationships.children.reduce(function (skeleton2, child) {\n      if (skeletons[child.ID] !== void 0) skeleton2 = skeletons[child.ID];\n      return skeleton2;\n    }, null);\n    relationships.children.forEach(function (child) {\n      if (deformers.morphTargets[child.ID] !== void 0) {\n        morphTargets.push(deformers.morphTargets[child.ID]);\n      }\n    });\n    const modelNode = modelNodes[0];\n    const transformData = {};\n    if (\"RotationOrder\" in modelNode) transformData.eulerOrder = getEulerOrder(modelNode.RotationOrder.value);\n    if (\"InheritType\" in modelNode) transformData.inheritType = parseInt(modelNode.InheritType.value);\n    if (\"GeometricTranslation\" in modelNode) transformData.translation = modelNode.GeometricTranslation.value;\n    if (\"GeometricRotation\" in modelNode) transformData.rotation = modelNode.GeometricRotation.value;\n    if (\"GeometricScaling\" in modelNode) transformData.scale = modelNode.GeometricScaling.value;\n    const transform = generateTransform(transformData);\n    return this.genGeometry(geoNode, skeleton, morphTargets, transform);\n  }\n  // Generate a BufferGeometry from a node in FBXTree.Objects.Geometry\n  genGeometry(geoNode, skeleton, morphTargets, preTransform) {\n    const geo = new BufferGeometry();\n    if (geoNode.attrName) geo.name = geoNode.attrName;\n    const geoInfo = this.parseGeoNode(geoNode, skeleton);\n    const buffers = this.genBuffers(geoInfo);\n    const positionAttribute = new Float32BufferAttribute(buffers.vertex, 3);\n    positionAttribute.applyMatrix4(preTransform);\n    geo.setAttribute(\"position\", positionAttribute);\n    if (buffers.colors.length > 0) {\n      geo.setAttribute(\"color\", new Float32BufferAttribute(buffers.colors, 3));\n    }\n    if (skeleton) {\n      geo.setAttribute(\"skinIndex\", new Uint16BufferAttribute(buffers.weightsIndices, 4));\n      geo.setAttribute(\"skinWeight\", new Float32BufferAttribute(buffers.vertexWeights, 4));\n      geo.FBX_Deformer = skeleton;\n    }\n    if (buffers.normal.length > 0) {\n      const normalMatrix = new Matrix3().getNormalMatrix(preTransform);\n      const normalAttribute = new Float32BufferAttribute(buffers.normal, 3);\n      normalAttribute.applyNormalMatrix(normalMatrix);\n      geo.setAttribute(\"normal\", normalAttribute);\n    }\n    buffers.uvs.forEach(function (uvBuffer, i) {\n      let name = \"uv\" + (i + 1).toString();\n      if (i === 0) {\n        name = \"uv\";\n      }\n      geo.setAttribute(name, new Float32BufferAttribute(buffers.uvs[i], 2));\n    });\n    if (geoInfo.material && geoInfo.material.mappingType !== \"AllSame\") {\n      let prevMaterialIndex = buffers.materialIndex[0];\n      let startIndex = 0;\n      buffers.materialIndex.forEach(function (currentIndex, i) {\n        if (currentIndex !== prevMaterialIndex) {\n          geo.addGroup(startIndex, i - startIndex, prevMaterialIndex);\n          prevMaterialIndex = currentIndex;\n          startIndex = i;\n        }\n      });\n      if (geo.groups.length > 0) {\n        const lastGroup = geo.groups[geo.groups.length - 1];\n        const lastIndex = lastGroup.start + lastGroup.count;\n        if (lastIndex !== buffers.materialIndex.length) {\n          geo.addGroup(lastIndex, buffers.materialIndex.length - lastIndex, prevMaterialIndex);\n        }\n      }\n      if (geo.groups.length === 0) {\n        geo.addGroup(0, buffers.materialIndex.length, buffers.materialIndex[0]);\n      }\n    }\n    this.addMorphTargets(geo, geoNode, morphTargets, preTransform);\n    return geo;\n  }\n  parseGeoNode(geoNode, skeleton) {\n    const geoInfo = {};\n    geoInfo.vertexPositions = geoNode.Vertices !== void 0 ? geoNode.Vertices.a : [];\n    geoInfo.vertexIndices = geoNode.PolygonVertexIndex !== void 0 ? geoNode.PolygonVertexIndex.a : [];\n    if (geoNode.LayerElementColor) {\n      geoInfo.color = this.parseVertexColors(geoNode.LayerElementColor[0]);\n    }\n    if (geoNode.LayerElementMaterial) {\n      geoInfo.material = this.parseMaterialIndices(geoNode.LayerElementMaterial[0]);\n    }\n    if (geoNode.LayerElementNormal) {\n      geoInfo.normal = this.parseNormals(geoNode.LayerElementNormal[0]);\n    }\n    if (geoNode.LayerElementUV) {\n      geoInfo.uv = [];\n      let i = 0;\n      while (geoNode.LayerElementUV[i]) {\n        if (geoNode.LayerElementUV[i].UV) {\n          geoInfo.uv.push(this.parseUVs(geoNode.LayerElementUV[i]));\n        }\n        i++;\n      }\n    }\n    geoInfo.weightTable = {};\n    if (skeleton !== null) {\n      geoInfo.skeleton = skeleton;\n      skeleton.rawBones.forEach(function (rawBone, i) {\n        rawBone.indices.forEach(function (index, j) {\n          if (geoInfo.weightTable[index] === void 0) geoInfo.weightTable[index] = [];\n          geoInfo.weightTable[index].push({\n            id: i,\n            weight: rawBone.weights[j]\n          });\n        });\n      });\n    }\n    return geoInfo;\n  }\n  genBuffers(geoInfo) {\n    const buffers = {\n      vertex: [],\n      normal: [],\n      colors: [],\n      uvs: [],\n      materialIndex: [],\n      vertexWeights: [],\n      weightsIndices: []\n    };\n    let polygonIndex = 0;\n    let faceLength = 0;\n    let displayedWeightsWarning = false;\n    let facePositionIndexes = [];\n    let faceNormals = [];\n    let faceColors = [];\n    let faceUVs = [];\n    let faceWeights = [];\n    let faceWeightIndices = [];\n    const scope = this;\n    geoInfo.vertexIndices.forEach(function (vertexIndex, polygonVertexIndex) {\n      let materialIndex;\n      let endOfFace = false;\n      if (vertexIndex < 0) {\n        vertexIndex = vertexIndex ^ -1;\n        endOfFace = true;\n      }\n      let weightIndices = [];\n      let weights = [];\n      facePositionIndexes.push(vertexIndex * 3, vertexIndex * 3 + 1, vertexIndex * 3 + 2);\n      if (geoInfo.color) {\n        const data = getData(polygonVertexIndex, polygonIndex, vertexIndex, geoInfo.color);\n        faceColors.push(data[0], data[1], data[2]);\n      }\n      if (geoInfo.skeleton) {\n        if (geoInfo.weightTable[vertexIndex] !== void 0) {\n          geoInfo.weightTable[vertexIndex].forEach(function (wt) {\n            weights.push(wt.weight);\n            weightIndices.push(wt.id);\n          });\n        }\n        if (weights.length > 4) {\n          if (!displayedWeightsWarning) {\n            console.warn(\"THREE.FBXLoader: Vertex has more than 4 skinning weights assigned to vertex. Deleting additional weights.\");\n            displayedWeightsWarning = true;\n          }\n          const wIndex = [0, 0, 0, 0];\n          const Weight = [0, 0, 0, 0];\n          weights.forEach(function (weight, weightIndex) {\n            let currentWeight = weight;\n            let currentIndex = weightIndices[weightIndex];\n            Weight.forEach(function (comparedWeight, comparedWeightIndex, comparedWeightArray) {\n              if (currentWeight > comparedWeight) {\n                comparedWeightArray[comparedWeightIndex] = currentWeight;\n                currentWeight = comparedWeight;\n                const tmp = wIndex[comparedWeightIndex];\n                wIndex[comparedWeightIndex] = currentIndex;\n                currentIndex = tmp;\n              }\n            });\n          });\n          weightIndices = wIndex;\n          weights = Weight;\n        }\n        while (weights.length < 4) {\n          weights.push(0);\n          weightIndices.push(0);\n        }\n        for (let i = 0; i < 4; ++i) {\n          faceWeights.push(weights[i]);\n          faceWeightIndices.push(weightIndices[i]);\n        }\n      }\n      if (geoInfo.normal) {\n        const data = getData(polygonVertexIndex, polygonIndex, vertexIndex, geoInfo.normal);\n        faceNormals.push(data[0], data[1], data[2]);\n      }\n      if (geoInfo.material && geoInfo.material.mappingType !== \"AllSame\") {\n        materialIndex = getData(polygonVertexIndex, polygonIndex, vertexIndex, geoInfo.material)[0];\n      }\n      if (geoInfo.uv) {\n        geoInfo.uv.forEach(function (uv, i) {\n          const data = getData(polygonVertexIndex, polygonIndex, vertexIndex, uv);\n          if (faceUVs[i] === void 0) {\n            faceUVs[i] = [];\n          }\n          faceUVs[i].push(data[0]);\n          faceUVs[i].push(data[1]);\n        });\n      }\n      faceLength++;\n      if (endOfFace) {\n        scope.genFace(buffers, geoInfo, facePositionIndexes, materialIndex, faceNormals, faceColors, faceUVs, faceWeights, faceWeightIndices, faceLength);\n        polygonIndex++;\n        faceLength = 0;\n        facePositionIndexes = [];\n        faceNormals = [];\n        faceColors = [];\n        faceUVs = [];\n        faceWeights = [];\n        faceWeightIndices = [];\n      }\n    });\n    return buffers;\n  }\n  // Generate data for a single face in a geometry. If the face is a quad then split it into 2 tris\n  genFace(buffers, geoInfo, facePositionIndexes, materialIndex, faceNormals, faceColors, faceUVs, faceWeights, faceWeightIndices, faceLength) {\n    for (let i = 2; i < faceLength; i++) {\n      buffers.vertex.push(geoInfo.vertexPositions[facePositionIndexes[0]]);\n      buffers.vertex.push(geoInfo.vertexPositions[facePositionIndexes[1]]);\n      buffers.vertex.push(geoInfo.vertexPositions[facePositionIndexes[2]]);\n      buffers.vertex.push(geoInfo.vertexPositions[facePositionIndexes[(i - 1) * 3]]);\n      buffers.vertex.push(geoInfo.vertexPositions[facePositionIndexes[(i - 1) * 3 + 1]]);\n      buffers.vertex.push(geoInfo.vertexPositions[facePositionIndexes[(i - 1) * 3 + 2]]);\n      buffers.vertex.push(geoInfo.vertexPositions[facePositionIndexes[i * 3]]);\n      buffers.vertex.push(geoInfo.vertexPositions[facePositionIndexes[i * 3 + 1]]);\n      buffers.vertex.push(geoInfo.vertexPositions[facePositionIndexes[i * 3 + 2]]);\n      if (geoInfo.skeleton) {\n        buffers.vertexWeights.push(faceWeights[0]);\n        buffers.vertexWeights.push(faceWeights[1]);\n        buffers.vertexWeights.push(faceWeights[2]);\n        buffers.vertexWeights.push(faceWeights[3]);\n        buffers.vertexWeights.push(faceWeights[(i - 1) * 4]);\n        buffers.vertexWeights.push(faceWeights[(i - 1) * 4 + 1]);\n        buffers.vertexWeights.push(faceWeights[(i - 1) * 4 + 2]);\n        buffers.vertexWeights.push(faceWeights[(i - 1) * 4 + 3]);\n        buffers.vertexWeights.push(faceWeights[i * 4]);\n        buffers.vertexWeights.push(faceWeights[i * 4 + 1]);\n        buffers.vertexWeights.push(faceWeights[i * 4 + 2]);\n        buffers.vertexWeights.push(faceWeights[i * 4 + 3]);\n        buffers.weightsIndices.push(faceWeightIndices[0]);\n        buffers.weightsIndices.push(faceWeightIndices[1]);\n        buffers.weightsIndices.push(faceWeightIndices[2]);\n        buffers.weightsIndices.push(faceWeightIndices[3]);\n        buffers.weightsIndices.push(faceWeightIndices[(i - 1) * 4]);\n        buffers.weightsIndices.push(faceWeightIndices[(i - 1) * 4 + 1]);\n        buffers.weightsIndices.push(faceWeightIndices[(i - 1) * 4 + 2]);\n        buffers.weightsIndices.push(faceWeightIndices[(i - 1) * 4 + 3]);\n        buffers.weightsIndices.push(faceWeightIndices[i * 4]);\n        buffers.weightsIndices.push(faceWeightIndices[i * 4 + 1]);\n        buffers.weightsIndices.push(faceWeightIndices[i * 4 + 2]);\n        buffers.weightsIndices.push(faceWeightIndices[i * 4 + 3]);\n      }\n      if (geoInfo.color) {\n        buffers.colors.push(faceColors[0]);\n        buffers.colors.push(faceColors[1]);\n        buffers.colors.push(faceColors[2]);\n        buffers.colors.push(faceColors[(i - 1) * 3]);\n        buffers.colors.push(faceColors[(i - 1) * 3 + 1]);\n        buffers.colors.push(faceColors[(i - 1) * 3 + 2]);\n        buffers.colors.push(faceColors[i * 3]);\n        buffers.colors.push(faceColors[i * 3 + 1]);\n        buffers.colors.push(faceColors[i * 3 + 2]);\n      }\n      if (geoInfo.material && geoInfo.material.mappingType !== \"AllSame\") {\n        buffers.materialIndex.push(materialIndex);\n        buffers.materialIndex.push(materialIndex);\n        buffers.materialIndex.push(materialIndex);\n      }\n      if (geoInfo.normal) {\n        buffers.normal.push(faceNormals[0]);\n        buffers.normal.push(faceNormals[1]);\n        buffers.normal.push(faceNormals[2]);\n        buffers.normal.push(faceNormals[(i - 1) * 3]);\n        buffers.normal.push(faceNormals[(i - 1) * 3 + 1]);\n        buffers.normal.push(faceNormals[(i - 1) * 3 + 2]);\n        buffers.normal.push(faceNormals[i * 3]);\n        buffers.normal.push(faceNormals[i * 3 + 1]);\n        buffers.normal.push(faceNormals[i * 3 + 2]);\n      }\n      if (geoInfo.uv) {\n        geoInfo.uv.forEach(function (uv, j) {\n          if (buffers.uvs[j] === void 0) buffers.uvs[j] = [];\n          buffers.uvs[j].push(faceUVs[j][0]);\n          buffers.uvs[j].push(faceUVs[j][1]);\n          buffers.uvs[j].push(faceUVs[j][(i - 1) * 2]);\n          buffers.uvs[j].push(faceUVs[j][(i - 1) * 2 + 1]);\n          buffers.uvs[j].push(faceUVs[j][i * 2]);\n          buffers.uvs[j].push(faceUVs[j][i * 2 + 1]);\n        });\n      }\n    }\n  }\n  addMorphTargets(parentGeo, parentGeoNode, morphTargets, preTransform) {\n    if (morphTargets.length === 0) return;\n    parentGeo.morphTargetsRelative = true;\n    parentGeo.morphAttributes.position = [];\n    const scope = this;\n    morphTargets.forEach(function (morphTarget) {\n      morphTarget.rawTargets.forEach(function (rawTarget) {\n        const morphGeoNode = fbxTree.Objects.Geometry[rawTarget.geoID];\n        if (morphGeoNode !== void 0) {\n          scope.genMorphGeometry(parentGeo, parentGeoNode, morphGeoNode, preTransform, rawTarget.name);\n        }\n      });\n    });\n  }\n  // a morph geometry node is similar to a standard  node, and the node is also contained\n  // in FBXTree.Objects.Geometry, however it can only have attributes for position, normal\n  // and a special attribute Index defining which vertices of the original geometry are affected\n  // Normal and position attributes only have data for the vertices that are affected by the morph\n  genMorphGeometry(parentGeo, parentGeoNode, morphGeoNode, preTransform, name) {\n    const vertexIndices = parentGeoNode.PolygonVertexIndex !== void 0 ? parentGeoNode.PolygonVertexIndex.a : [];\n    const morphPositionsSparse = morphGeoNode.Vertices !== void 0 ? morphGeoNode.Vertices.a : [];\n    const indices = morphGeoNode.Indexes !== void 0 ? morphGeoNode.Indexes.a : [];\n    const length = parentGeo.attributes.position.count * 3;\n    const morphPositions = new Float32Array(length);\n    for (let i = 0; i < indices.length; i++) {\n      const morphIndex = indices[i] * 3;\n      morphPositions[morphIndex] = morphPositionsSparse[i * 3];\n      morphPositions[morphIndex + 1] = morphPositionsSparse[i * 3 + 1];\n      morphPositions[morphIndex + 2] = morphPositionsSparse[i * 3 + 2];\n    }\n    const morphGeoInfo = {\n      vertexIndices,\n      vertexPositions: morphPositions\n    };\n    const morphBuffers = this.genBuffers(morphGeoInfo);\n    const positionAttribute = new Float32BufferAttribute(morphBuffers.vertex, 3);\n    positionAttribute.name = name || morphGeoNode.attrName;\n    positionAttribute.applyMatrix4(preTransform);\n    parentGeo.morphAttributes.position.push(positionAttribute);\n  }\n  // Parse normal from FBXTree.Objects.Geometry.LayerElementNormal if it exists\n  parseNormals(NormalNode) {\n    const mappingType = NormalNode.MappingInformationType;\n    const referenceType = NormalNode.ReferenceInformationType;\n    const buffer = NormalNode.Normals.a;\n    let indexBuffer = [];\n    if (referenceType === \"IndexToDirect\") {\n      if (\"NormalIndex\" in NormalNode) {\n        indexBuffer = NormalNode.NormalIndex.a;\n      } else if (\"NormalsIndex\" in NormalNode) {\n        indexBuffer = NormalNode.NormalsIndex.a;\n      }\n    }\n    return {\n      dataSize: 3,\n      buffer,\n      indices: indexBuffer,\n      mappingType,\n      referenceType\n    };\n  }\n  // Parse UVs from FBXTree.Objects.Geometry.LayerElementUV if it exists\n  parseUVs(UVNode) {\n    const mappingType = UVNode.MappingInformationType;\n    const referenceType = UVNode.ReferenceInformationType;\n    const buffer = UVNode.UV.a;\n    let indexBuffer = [];\n    if (referenceType === \"IndexToDirect\") {\n      indexBuffer = UVNode.UVIndex.a;\n    }\n    return {\n      dataSize: 2,\n      buffer,\n      indices: indexBuffer,\n      mappingType,\n      referenceType\n    };\n  }\n  // Parse Vertex Colors from FBXTree.Objects.Geometry.LayerElementColor if it exists\n  parseVertexColors(ColorNode) {\n    const mappingType = ColorNode.MappingInformationType;\n    const referenceType = ColorNode.ReferenceInformationType;\n    const buffer = ColorNode.Colors.a;\n    let indexBuffer = [];\n    if (referenceType === \"IndexToDirect\") {\n      indexBuffer = ColorNode.ColorIndex.a;\n    }\n    return {\n      dataSize: 4,\n      buffer,\n      indices: indexBuffer,\n      mappingType,\n      referenceType\n    };\n  }\n  // Parse mapping and material data in FBXTree.Objects.Geometry.LayerElementMaterial if it exists\n  parseMaterialIndices(MaterialNode) {\n    const mappingType = MaterialNode.MappingInformationType;\n    const referenceType = MaterialNode.ReferenceInformationType;\n    if (mappingType === \"NoMappingInformation\") {\n      return {\n        dataSize: 1,\n        buffer: [0],\n        indices: [0],\n        mappingType: \"AllSame\",\n        referenceType\n      };\n    }\n    const materialIndexBuffer = MaterialNode.Materials.a;\n    const materialIndices = [];\n    for (let i = 0; i < materialIndexBuffer.length; ++i) {\n      materialIndices.push(i);\n    }\n    return {\n      dataSize: 1,\n      buffer: materialIndexBuffer,\n      indices: materialIndices,\n      mappingType,\n      referenceType\n    };\n  }\n  // Generate a NurbGeometry from a node in FBXTree.Objects.Geometry\n  parseNurbsGeometry(geoNode) {\n    if (NURBSCurve === void 0) {\n      console.error(\"THREE.FBXLoader: The loader relies on NURBSCurve for any nurbs present in the model. Nurbs will show up as empty geometry.\");\n      return new BufferGeometry();\n    }\n    const order = parseInt(geoNode.Order);\n    if (isNaN(order)) {\n      console.error(\"THREE.FBXLoader: Invalid Order %s given for geometry ID: %s\", geoNode.Order, geoNode.id);\n      return new BufferGeometry();\n    }\n    const degree = order - 1;\n    const knots = geoNode.KnotVector.a;\n    const controlPoints = [];\n    const pointsValues = geoNode.Points.a;\n    for (let i = 0, l = pointsValues.length; i < l; i += 4) {\n      controlPoints.push(new Vector4().fromArray(pointsValues, i));\n    }\n    let startKnot, endKnot;\n    if (geoNode.Form === \"Closed\") {\n      controlPoints.push(controlPoints[0]);\n    } else if (geoNode.Form === \"Periodic\") {\n      startKnot = degree;\n      endKnot = knots.length - 1 - startKnot;\n      for (let i = 0; i < degree; ++i) {\n        controlPoints.push(controlPoints[i]);\n      }\n    }\n    const curve = new NURBSCurve(degree, knots, controlPoints, startKnot, endKnot);\n    const points = curve.getPoints(controlPoints.length * 12);\n    return new BufferGeometry().setFromPoints(points);\n  }\n}\nclass AnimationParser {\n  // take raw animation clips and turn them into three.js animation clips\n  parse() {\n    const animationClips = [];\n    const rawClips = this.parseClips();\n    if (rawClips !== void 0) {\n      for (const key in rawClips) {\n        const rawClip = rawClips[key];\n        const clip = this.addClip(rawClip);\n        animationClips.push(clip);\n      }\n    }\n    return animationClips;\n  }\n  parseClips() {\n    if (fbxTree.Objects.AnimationCurve === void 0) return void 0;\n    const curveNodesMap = this.parseAnimationCurveNodes();\n    this.parseAnimationCurves(curveNodesMap);\n    const layersMap = this.parseAnimationLayers(curveNodesMap);\n    const rawClips = this.parseAnimStacks(layersMap);\n    return rawClips;\n  }\n  // parse nodes in FBXTree.Objects.AnimationCurveNode\n  // each AnimationCurveNode holds data for an animation transform for a model (e.g. left arm rotation )\n  // and is referenced by an AnimationLayer\n  parseAnimationCurveNodes() {\n    const rawCurveNodes = fbxTree.Objects.AnimationCurveNode;\n    const curveNodesMap = /* @__PURE__ */new Map();\n    for (const nodeID in rawCurveNodes) {\n      const rawCurveNode = rawCurveNodes[nodeID];\n      if (rawCurveNode.attrName.match(/S|R|T|DeformPercent/) !== null) {\n        const curveNode = {\n          id: rawCurveNode.id,\n          attr: rawCurveNode.attrName,\n          curves: {}\n        };\n        curveNodesMap.set(curveNode.id, curveNode);\n      }\n    }\n    return curveNodesMap;\n  }\n  // parse nodes in FBXTree.Objects.AnimationCurve and connect them up to\n  // previously parsed AnimationCurveNodes. Each AnimationCurve holds data for a single animated\n  // axis ( e.g. times and values of x rotation)\n  parseAnimationCurves(curveNodesMap) {\n    const rawCurves = fbxTree.Objects.AnimationCurve;\n    for (const nodeID in rawCurves) {\n      const animationCurve = {\n        id: rawCurves[nodeID].id,\n        times: rawCurves[nodeID].KeyTime.a.map(convertFBXTimeToSeconds),\n        values: rawCurves[nodeID].KeyValueFloat.a\n      };\n      const relationships = connections.get(animationCurve.id);\n      if (relationships !== void 0) {\n        const animationCurveID = relationships.parents[0].ID;\n        const animationCurveRelationship = relationships.parents[0].relationship;\n        if (animationCurveRelationship.match(/X/)) {\n          curveNodesMap.get(animationCurveID).curves[\"x\"] = animationCurve;\n        } else if (animationCurveRelationship.match(/Y/)) {\n          curveNodesMap.get(animationCurveID).curves[\"y\"] = animationCurve;\n        } else if (animationCurveRelationship.match(/Z/)) {\n          curveNodesMap.get(animationCurveID).curves[\"z\"] = animationCurve;\n        } else if (animationCurveRelationship.match(/d|DeformPercent/) && curveNodesMap.has(animationCurveID)) {\n          curveNodesMap.get(animationCurveID).curves[\"morph\"] = animationCurve;\n        }\n      }\n    }\n  }\n  // parse nodes in FBXTree.Objects.AnimationLayer. Each layers holds references\n  // to various AnimationCurveNodes and is referenced by an AnimationStack node\n  // note: theoretically a stack can have multiple layers, however in practice there always seems to be one per stack\n  parseAnimationLayers(curveNodesMap) {\n    const rawLayers = fbxTree.Objects.AnimationLayer;\n    const layersMap = /* @__PURE__ */new Map();\n    for (const nodeID in rawLayers) {\n      const layerCurveNodes = [];\n      const connection = connections.get(parseInt(nodeID));\n      if (connection !== void 0) {\n        const children = connection.children;\n        children.forEach(function (child, i) {\n          if (curveNodesMap.has(child.ID)) {\n            const curveNode = curveNodesMap.get(child.ID);\n            if (curveNode.curves.x !== void 0 || curveNode.curves.y !== void 0 || curveNode.curves.z !== void 0) {\n              if (layerCurveNodes[i] === void 0) {\n                const modelID = connections.get(child.ID).parents.filter(function (parent) {\n                  return parent.relationship !== void 0;\n                })[0].ID;\n                if (modelID !== void 0) {\n                  const rawModel = fbxTree.Objects.Model[modelID.toString()];\n                  if (rawModel === void 0) {\n                    console.warn(\"THREE.FBXLoader: Encountered a unused curve.\", child);\n                    return;\n                  }\n                  const node = {\n                    modelName: rawModel.attrName ? PropertyBinding.sanitizeNodeName(rawModel.attrName) : \"\",\n                    ID: rawModel.id,\n                    initialPosition: [0, 0, 0],\n                    initialRotation: [0, 0, 0],\n                    initialScale: [1, 1, 1]\n                  };\n                  sceneGraph.traverse(function (child2) {\n                    if (child2.ID === rawModel.id) {\n                      node.transform = child2.matrix;\n                      if (child2.userData.transformData) node.eulerOrder = child2.userData.transformData.eulerOrder;\n                    }\n                  });\n                  if (!node.transform) node.transform = new Matrix4();\n                  if (\"PreRotation\" in rawModel) node.preRotation = rawModel.PreRotation.value;\n                  if (\"PostRotation\" in rawModel) node.postRotation = rawModel.PostRotation.value;\n                  layerCurveNodes[i] = node;\n                }\n              }\n              if (layerCurveNodes[i]) layerCurveNodes[i][curveNode.attr] = curveNode;\n            } else if (curveNode.curves.morph !== void 0) {\n              if (layerCurveNodes[i] === void 0) {\n                const deformerID = connections.get(child.ID).parents.filter(function (parent) {\n                  return parent.relationship !== void 0;\n                })[0].ID;\n                const morpherID = connections.get(deformerID).parents[0].ID;\n                const geoID = connections.get(morpherID).parents[0].ID;\n                const modelID = connections.get(geoID).parents[0].ID;\n                const rawModel = fbxTree.Objects.Model[modelID];\n                const node = {\n                  modelName: rawModel.attrName ? PropertyBinding.sanitizeNodeName(rawModel.attrName) : \"\",\n                  morphName: fbxTree.Objects.Deformer[deformerID].attrName\n                };\n                layerCurveNodes[i] = node;\n              }\n              layerCurveNodes[i][curveNode.attr] = curveNode;\n            }\n          }\n        });\n        layersMap.set(parseInt(nodeID), layerCurveNodes);\n      }\n    }\n    return layersMap;\n  }\n  // parse nodes in FBXTree.Objects.AnimationStack. These are the top level node in the animation\n  // hierarchy. Each Stack node will be used to create a AnimationClip\n  parseAnimStacks(layersMap) {\n    const rawStacks = fbxTree.Objects.AnimationStack;\n    const rawClips = {};\n    for (const nodeID in rawStacks) {\n      const children = connections.get(parseInt(nodeID)).children;\n      if (children.length > 1) {\n        console.warn(\"THREE.FBXLoader: Encountered an animation stack with multiple layers, this is currently not supported. Ignoring subsequent layers.\");\n      }\n      const layer = layersMap.get(children[0].ID);\n      rawClips[nodeID] = {\n        name: rawStacks[nodeID].attrName,\n        layer\n      };\n    }\n    return rawClips;\n  }\n  addClip(rawClip) {\n    let tracks = [];\n    const scope = this;\n    rawClip.layer.forEach(function (rawTracks) {\n      tracks = tracks.concat(scope.generateTracks(rawTracks));\n    });\n    return new AnimationClip(rawClip.name, -1, tracks);\n  }\n  generateTracks(rawTracks) {\n    const tracks = [];\n    let initialPosition = new Vector3();\n    let initialRotation = new Quaternion();\n    let initialScale = new Vector3();\n    if (rawTracks.transform) rawTracks.transform.decompose(initialPosition, initialRotation, initialScale);\n    initialPosition = initialPosition.toArray();\n    initialRotation = new Euler().setFromQuaternion(initialRotation, rawTracks.eulerOrder).toArray();\n    initialScale = initialScale.toArray();\n    if (rawTracks.T !== void 0 && Object.keys(rawTracks.T.curves).length > 0) {\n      const positionTrack = this.generateVectorTrack(rawTracks.modelName, rawTracks.T.curves, initialPosition, \"position\");\n      if (positionTrack !== void 0) tracks.push(positionTrack);\n    }\n    if (rawTracks.R !== void 0 && Object.keys(rawTracks.R.curves).length > 0) {\n      const rotationTrack = this.generateRotationTrack(rawTracks.modelName, rawTracks.R.curves, initialRotation, rawTracks.preRotation, rawTracks.postRotation, rawTracks.eulerOrder);\n      if (rotationTrack !== void 0) tracks.push(rotationTrack);\n    }\n    if (rawTracks.S !== void 0 && Object.keys(rawTracks.S.curves).length > 0) {\n      const scaleTrack = this.generateVectorTrack(rawTracks.modelName, rawTracks.S.curves, initialScale, \"scale\");\n      if (scaleTrack !== void 0) tracks.push(scaleTrack);\n    }\n    if (rawTracks.DeformPercent !== void 0) {\n      const morphTrack = this.generateMorphTrack(rawTracks);\n      if (morphTrack !== void 0) tracks.push(morphTrack);\n    }\n    return tracks;\n  }\n  generateVectorTrack(modelName, curves, initialValue, type) {\n    const times = this.getTimesForAllAxes(curves);\n    const values = this.getKeyframeTrackValues(times, curves, initialValue);\n    return new VectorKeyframeTrack(modelName + \".\" + type, times, values);\n  }\n  generateRotationTrack(modelName, curves, initialValue, preRotation, postRotation, eulerOrder) {\n    if (curves.x !== void 0) {\n      this.interpolateRotations(curves.x);\n      curves.x.values = curves.x.values.map(MathUtils.degToRad);\n    }\n    if (curves.y !== void 0) {\n      this.interpolateRotations(curves.y);\n      curves.y.values = curves.y.values.map(MathUtils.degToRad);\n    }\n    if (curves.z !== void 0) {\n      this.interpolateRotations(curves.z);\n      curves.z.values = curves.z.values.map(MathUtils.degToRad);\n    }\n    const times = this.getTimesForAllAxes(curves);\n    const values = this.getKeyframeTrackValues(times, curves, initialValue);\n    if (preRotation !== void 0) {\n      preRotation = preRotation.map(MathUtils.degToRad);\n      preRotation.push(eulerOrder);\n      preRotation = new Euler().fromArray(preRotation);\n      preRotation = new Quaternion().setFromEuler(preRotation);\n    }\n    if (postRotation !== void 0) {\n      postRotation = postRotation.map(MathUtils.degToRad);\n      postRotation.push(eulerOrder);\n      postRotation = new Euler().fromArray(postRotation);\n      postRotation = new Quaternion().setFromEuler(postRotation).invert();\n    }\n    const quaternion = new Quaternion();\n    const euler = new Euler();\n    const quaternionValues = [];\n    for (let i = 0; i < values.length; i += 3) {\n      euler.set(values[i], values[i + 1], values[i + 2], eulerOrder);\n      quaternion.setFromEuler(euler);\n      if (preRotation !== void 0) quaternion.premultiply(preRotation);\n      if (postRotation !== void 0) quaternion.multiply(postRotation);\n      quaternion.toArray(quaternionValues, i / 3 * 4);\n    }\n    return new QuaternionKeyframeTrack(modelName + \".quaternion\", times, quaternionValues);\n  }\n  generateMorphTrack(rawTracks) {\n    const curves = rawTracks.DeformPercent.curves.morph;\n    const values = curves.values.map(function (val) {\n      return val / 100;\n    });\n    const morphNum = sceneGraph.getObjectByName(rawTracks.modelName).morphTargetDictionary[rawTracks.morphName];\n    return new NumberKeyframeTrack(rawTracks.modelName + \".morphTargetInfluences[\" + morphNum + \"]\", curves.times, values);\n  }\n  // For all animated objects, times are defined separately for each axis\n  // Here we'll combine the times into one sorted array without duplicates\n  getTimesForAllAxes(curves) {\n    let times = [];\n    if (curves.x !== void 0) times = times.concat(curves.x.times);\n    if (curves.y !== void 0) times = times.concat(curves.y.times);\n    if (curves.z !== void 0) times = times.concat(curves.z.times);\n    times = times.sort(function (a, b) {\n      return a - b;\n    });\n    if (times.length > 1) {\n      let targetIndex = 1;\n      let lastValue = times[0];\n      for (let i = 1; i < times.length; i++) {\n        const currentValue = times[i];\n        if (currentValue !== lastValue) {\n          times[targetIndex] = currentValue;\n          lastValue = currentValue;\n          targetIndex++;\n        }\n      }\n      times = times.slice(0, targetIndex);\n    }\n    return times;\n  }\n  getKeyframeTrackValues(times, curves, initialValue) {\n    const prevValue = initialValue;\n    const values = [];\n    let xIndex = -1;\n    let yIndex = -1;\n    let zIndex = -1;\n    times.forEach(function (time) {\n      if (curves.x) xIndex = curves.x.times.indexOf(time);\n      if (curves.y) yIndex = curves.y.times.indexOf(time);\n      if (curves.z) zIndex = curves.z.times.indexOf(time);\n      if (xIndex !== -1) {\n        const xValue = curves.x.values[xIndex];\n        values.push(xValue);\n        prevValue[0] = xValue;\n      } else {\n        values.push(prevValue[0]);\n      }\n      if (yIndex !== -1) {\n        const yValue = curves.y.values[yIndex];\n        values.push(yValue);\n        prevValue[1] = yValue;\n      } else {\n        values.push(prevValue[1]);\n      }\n      if (zIndex !== -1) {\n        const zValue = curves.z.values[zIndex];\n        values.push(zValue);\n        prevValue[2] = zValue;\n      } else {\n        values.push(prevValue[2]);\n      }\n    });\n    return values;\n  }\n  // Rotations are defined as Euler angles which can have values  of any size\n  // These will be converted to quaternions which don't support values greater than\n  // PI, so we'll interpolate large rotations\n  interpolateRotations(curve) {\n    for (let i = 1; i < curve.values.length; i++) {\n      const initialValue = curve.values[i - 1];\n      const valuesSpan = curve.values[i] - initialValue;\n      const absoluteSpan = Math.abs(valuesSpan);\n      if (absoluteSpan >= 180) {\n        const numSubIntervals = absoluteSpan / 180;\n        const step = valuesSpan / numSubIntervals;\n        let nextValue = initialValue + step;\n        const initialTime = curve.times[i - 1];\n        const timeSpan = curve.times[i] - initialTime;\n        const interval = timeSpan / numSubIntervals;\n        let nextTime = initialTime + interval;\n        const interpolatedTimes = [];\n        const interpolatedValues = [];\n        while (nextTime < curve.times[i]) {\n          interpolatedTimes.push(nextTime);\n          nextTime += interval;\n          interpolatedValues.push(nextValue);\n          nextValue += step;\n        }\n        curve.times = inject(curve.times, i, interpolatedTimes);\n        curve.values = inject(curve.values, i, interpolatedValues);\n      }\n    }\n  }\n}\nclass TextParser {\n  getPrevNode() {\n    return this.nodeStack[this.currentIndent - 2];\n  }\n  getCurrentNode() {\n    return this.nodeStack[this.currentIndent - 1];\n  }\n  getCurrentProp() {\n    return this.currentProp;\n  }\n  pushStack(node) {\n    this.nodeStack.push(node);\n    this.currentIndent += 1;\n  }\n  popStack() {\n    this.nodeStack.pop();\n    this.currentIndent -= 1;\n  }\n  setCurrentProp(val, name) {\n    this.currentProp = val;\n    this.currentPropName = name;\n  }\n  parse(text) {\n    this.currentIndent = 0;\n    this.allNodes = new FBXTree();\n    this.nodeStack = [];\n    this.currentProp = [];\n    this.currentPropName = \"\";\n    const scope = this;\n    const split = text.split(/[\\r\\n]+/);\n    split.forEach(function (line, i) {\n      const matchComment = line.match(/^[\\s\\t]*;/);\n      const matchEmpty = line.match(/^[\\s\\t]*$/);\n      if (matchComment || matchEmpty) return;\n      const matchBeginning = line.match(\"^\\\\t{\" + scope.currentIndent + \"}(\\\\w+):(.*){\", \"\");\n      const matchProperty = line.match(\"^\\\\t{\" + scope.currentIndent + \"}(\\\\w+):[\\\\s\\\\t\\\\r\\\\n](.*)\");\n      const matchEnd = line.match(\"^\\\\t{\" + (scope.currentIndent - 1) + \"}}\");\n      if (matchBeginning) {\n        scope.parseNodeBegin(line, matchBeginning);\n      } else if (matchProperty) {\n        scope.parseNodeProperty(line, matchProperty, split[++i]);\n      } else if (matchEnd) {\n        scope.popStack();\n      } else if (line.match(/^[^\\s\\t}]/)) {\n        scope.parseNodePropertyContinued(line);\n      }\n    });\n    return this.allNodes;\n  }\n  parseNodeBegin(line, property) {\n    const nodeName = property[1].trim().replace(/^\"/, \"\").replace(/\"$/, \"\");\n    const nodeAttrs = property[2].split(\",\").map(function (attr) {\n      return attr.trim().replace(/^\"/, \"\").replace(/\"$/, \"\");\n    });\n    const node = {\n      name: nodeName\n    };\n    const attrs = this.parseNodeAttr(nodeAttrs);\n    const currentNode = this.getCurrentNode();\n    if (this.currentIndent === 0) {\n      this.allNodes.add(nodeName, node);\n    } else {\n      if (nodeName in currentNode) {\n        if (nodeName === \"PoseNode\") {\n          currentNode.PoseNode.push(node);\n        } else if (currentNode[nodeName].id !== void 0) {\n          currentNode[nodeName] = {};\n          currentNode[nodeName][currentNode[nodeName].id] = currentNode[nodeName];\n        }\n        if (attrs.id !== \"\") currentNode[nodeName][attrs.id] = node;\n      } else if (typeof attrs.id === \"number\") {\n        currentNode[nodeName] = {};\n        currentNode[nodeName][attrs.id] = node;\n      } else if (nodeName !== \"Properties70\") {\n        if (nodeName === \"PoseNode\") currentNode[nodeName] = [node];else currentNode[nodeName] = node;\n      }\n    }\n    if (typeof attrs.id === \"number\") node.id = attrs.id;\n    if (attrs.name !== \"\") node.attrName = attrs.name;\n    if (attrs.type !== \"\") node.attrType = attrs.type;\n    this.pushStack(node);\n  }\n  parseNodeAttr(attrs) {\n    let id = attrs[0];\n    if (attrs[0] !== \"\") {\n      id = parseInt(attrs[0]);\n      if (isNaN(id)) {\n        id = attrs[0];\n      }\n    }\n    let name = \"\",\n      type = \"\";\n    if (attrs.length > 1) {\n      name = attrs[1].replace(/^(\\w+)::/, \"\");\n      type = attrs[2];\n    }\n    return {\n      id,\n      name,\n      type\n    };\n  }\n  parseNodeProperty(line, property, contentLine) {\n    let propName = property[1].replace(/^\"/, \"\").replace(/\"$/, \"\").trim();\n    let propValue = property[2].replace(/^\"/, \"\").replace(/\"$/, \"\").trim();\n    if (propName === \"Content\" && propValue === \",\") {\n      propValue = contentLine.replace(/\"/g, \"\").replace(/,$/, \"\").trim();\n    }\n    const currentNode = this.getCurrentNode();\n    const parentName = currentNode.name;\n    if (parentName === \"Properties70\") {\n      this.parseNodeSpecialProperty(line, propName, propValue);\n      return;\n    }\n    if (propName === \"C\") {\n      const connProps = propValue.split(\",\").slice(1);\n      const from = parseInt(connProps[0]);\n      const to = parseInt(connProps[1]);\n      let rest = propValue.split(\",\").slice(3);\n      rest = rest.map(function (elem) {\n        return elem.trim().replace(/^\"/, \"\");\n      });\n      propName = \"connections\";\n      propValue = [from, to];\n      append(propValue, rest);\n      if (currentNode[propName] === void 0) {\n        currentNode[propName] = [];\n      }\n    }\n    if (propName === \"Node\") currentNode.id = propValue;\n    if (propName in currentNode && Array.isArray(currentNode[propName])) {\n      currentNode[propName].push(propValue);\n    } else {\n      if (propName !== \"a\") currentNode[propName] = propValue;else currentNode.a = propValue;\n    }\n    this.setCurrentProp(currentNode, propName);\n    if (propName === \"a\" && propValue.slice(-1) !== \",\") {\n      currentNode.a = parseNumberArray(propValue);\n    }\n  }\n  parseNodePropertyContinued(line) {\n    const currentNode = this.getCurrentNode();\n    currentNode.a += line;\n    if (line.slice(-1) !== \",\") {\n      currentNode.a = parseNumberArray(currentNode.a);\n    }\n  }\n  // parse \"Property70\"\n  parseNodeSpecialProperty(line, propName, propValue) {\n    const props = propValue.split('\",').map(function (prop) {\n      return prop.trim().replace(/^\\\"/, \"\").replace(/\\s/, \"_\");\n    });\n    const innerPropName = props[0];\n    const innerPropType1 = props[1];\n    const innerPropType2 = props[2];\n    const innerPropFlag = props[3];\n    let innerPropValue = props[4];\n    switch (innerPropType1) {\n      case \"int\":\n      case \"enum\":\n      case \"bool\":\n      case \"ULongLong\":\n      case \"double\":\n      case \"Number\":\n      case \"FieldOfView\":\n        innerPropValue = parseFloat(innerPropValue);\n        break;\n      case \"Color\":\n      case \"ColorRGB\":\n      case \"Vector3D\":\n      case \"Lcl_Translation\":\n      case \"Lcl_Rotation\":\n      case \"Lcl_Scaling\":\n        innerPropValue = parseNumberArray(innerPropValue);\n        break;\n    }\n    this.getPrevNode()[innerPropName] = {\n      type: innerPropType1,\n      type2: innerPropType2,\n      flag: innerPropFlag,\n      value: innerPropValue\n    };\n    this.setCurrentProp(this.getPrevNode(), innerPropName);\n  }\n}\nclass BinaryParser {\n  parse(buffer) {\n    const reader = new BinaryReader(buffer);\n    reader.skip(23);\n    const version = reader.getUint32();\n    if (version < 6400) {\n      throw new Error(\"THREE.FBXLoader: FBX version not supported, FileVersion: \" + version);\n    }\n    const allNodes = new FBXTree();\n    while (!this.endOfContent(reader)) {\n      const node = this.parseNode(reader, version);\n      if (node !== null) allNodes.add(node.name, node);\n    }\n    return allNodes;\n  }\n  // Check if reader has reached the end of content.\n  endOfContent(reader) {\n    if (reader.size() % 16 === 0) {\n      return (reader.getOffset() + 160 + 16 & ~15) >= reader.size();\n    } else {\n      return reader.getOffset() + 160 + 16 >= reader.size();\n    }\n  }\n  // recursively parse nodes until the end of the file is reached\n  parseNode(reader, version) {\n    const node = {};\n    const endOffset = version >= 7500 ? reader.getUint64() : reader.getUint32();\n    const numProperties = version >= 7500 ? reader.getUint64() : reader.getUint32();\n    version >= 7500 ? reader.getUint64() : reader.getUint32();\n    const nameLen = reader.getUint8();\n    const name = reader.getString(nameLen);\n    if (endOffset === 0) return null;\n    const propertyList = [];\n    for (let i = 0; i < numProperties; i++) {\n      propertyList.push(this.parseProperty(reader));\n    }\n    const id = propertyList.length > 0 ? propertyList[0] : \"\";\n    const attrName = propertyList.length > 1 ? propertyList[1] : \"\";\n    const attrType = propertyList.length > 2 ? propertyList[2] : \"\";\n    node.singleProperty = numProperties === 1 && reader.getOffset() === endOffset ? true : false;\n    while (endOffset > reader.getOffset()) {\n      const subNode = this.parseNode(reader, version);\n      if (subNode !== null) this.parseSubNode(name, node, subNode);\n    }\n    node.propertyList = propertyList;\n    if (typeof id === \"number\") node.id = id;\n    if (attrName !== \"\") node.attrName = attrName;\n    if (attrType !== \"\") node.attrType = attrType;\n    if (name !== \"\") node.name = name;\n    return node;\n  }\n  parseSubNode(name, node, subNode) {\n    if (subNode.singleProperty === true) {\n      const value = subNode.propertyList[0];\n      if (Array.isArray(value)) {\n        node[subNode.name] = subNode;\n        subNode.a = value;\n      } else {\n        node[subNode.name] = value;\n      }\n    } else if (name === \"Connections\" && subNode.name === \"C\") {\n      const array = [];\n      subNode.propertyList.forEach(function (property, i) {\n        if (i !== 0) array.push(property);\n      });\n      if (node.connections === void 0) {\n        node.connections = [];\n      }\n      node.connections.push(array);\n    } else if (subNode.name === \"Properties70\") {\n      const keys = Object.keys(subNode);\n      keys.forEach(function (key) {\n        node[key] = subNode[key];\n      });\n    } else if (name === \"Properties70\" && subNode.name === \"P\") {\n      let innerPropName = subNode.propertyList[0];\n      let innerPropType1 = subNode.propertyList[1];\n      const innerPropType2 = subNode.propertyList[2];\n      const innerPropFlag = subNode.propertyList[3];\n      let innerPropValue;\n      if (innerPropName.indexOf(\"Lcl \") === 0) innerPropName = innerPropName.replace(\"Lcl \", \"Lcl_\");\n      if (innerPropType1.indexOf(\"Lcl \") === 0) innerPropType1 = innerPropType1.replace(\"Lcl \", \"Lcl_\");\n      if (innerPropType1 === \"Color\" || innerPropType1 === \"ColorRGB\" || innerPropType1 === \"Vector\" || innerPropType1 === \"Vector3D\" || innerPropType1.indexOf(\"Lcl_\") === 0) {\n        innerPropValue = [subNode.propertyList[4], subNode.propertyList[5], subNode.propertyList[6]];\n      } else {\n        innerPropValue = subNode.propertyList[4];\n      }\n      node[innerPropName] = {\n        type: innerPropType1,\n        type2: innerPropType2,\n        flag: innerPropFlag,\n        value: innerPropValue\n      };\n    } else if (node[subNode.name] === void 0) {\n      if (typeof subNode.id === \"number\") {\n        node[subNode.name] = {};\n        node[subNode.name][subNode.id] = subNode;\n      } else {\n        node[subNode.name] = subNode;\n      }\n    } else {\n      if (subNode.name === \"PoseNode\") {\n        if (!Array.isArray(node[subNode.name])) {\n          node[subNode.name] = [node[subNode.name]];\n        }\n        node[subNode.name].push(subNode);\n      } else if (node[subNode.name][subNode.id] === void 0) {\n        node[subNode.name][subNode.id] = subNode;\n      }\n    }\n  }\n  parseProperty(reader) {\n    const type = reader.getString(1);\n    let length;\n    switch (type) {\n      case \"C\":\n        return reader.getBoolean();\n      case \"D\":\n        return reader.getFloat64();\n      case \"F\":\n        return reader.getFloat32();\n      case \"I\":\n        return reader.getInt32();\n      case \"L\":\n        return reader.getInt64();\n      case \"R\":\n        length = reader.getUint32();\n        return reader.getArrayBuffer(length);\n      case \"S\":\n        length = reader.getUint32();\n        return reader.getString(length);\n      case \"Y\":\n        return reader.getInt16();\n      case \"b\":\n      case \"c\":\n      case \"d\":\n      case \"f\":\n      case \"i\":\n      case \"l\":\n        const arrayLength = reader.getUint32();\n        const encoding = reader.getUint32();\n        const compressedLength = reader.getUint32();\n        if (encoding === 0) {\n          switch (type) {\n            case \"b\":\n            case \"c\":\n              return reader.getBooleanArray(arrayLength);\n            case \"d\":\n              return reader.getFloat64Array(arrayLength);\n            case \"f\":\n              return reader.getFloat32Array(arrayLength);\n            case \"i\":\n              return reader.getInt32Array(arrayLength);\n            case \"l\":\n              return reader.getInt64Array(arrayLength);\n          }\n        }\n        const data = unzlibSync(new Uint8Array(reader.getArrayBuffer(compressedLength)));\n        const reader2 = new BinaryReader(data.buffer);\n        switch (type) {\n          case \"b\":\n          case \"c\":\n            return reader2.getBooleanArray(arrayLength);\n          case \"d\":\n            return reader2.getFloat64Array(arrayLength);\n          case \"f\":\n            return reader2.getFloat32Array(arrayLength);\n          case \"i\":\n            return reader2.getInt32Array(arrayLength);\n          case \"l\":\n            return reader2.getInt64Array(arrayLength);\n        }\n      default:\n        throw new Error(\"THREE.FBXLoader: Unknown property type \" + type);\n    }\n  }\n}\nclass BinaryReader {\n  constructor(buffer, littleEndian) {\n    this.dv = new DataView(buffer);\n    this.offset = 0;\n    this.littleEndian = littleEndian !== void 0 ? littleEndian : true;\n  }\n  getOffset() {\n    return this.offset;\n  }\n  size() {\n    return this.dv.buffer.byteLength;\n  }\n  skip(length) {\n    this.offset += length;\n  }\n  // seems like true/false representation depends on exporter.\n  // true: 1 or 'Y'(=0x59), false: 0 or 'T'(=0x54)\n  // then sees LSB.\n  getBoolean() {\n    return (this.getUint8() & 1) === 1;\n  }\n  getBooleanArray(size) {\n    const a = [];\n    for (let i = 0; i < size; i++) {\n      a.push(this.getBoolean());\n    }\n    return a;\n  }\n  getUint8() {\n    const value = this.dv.getUint8(this.offset);\n    this.offset += 1;\n    return value;\n  }\n  getInt16() {\n    const value = this.dv.getInt16(this.offset, this.littleEndian);\n    this.offset += 2;\n    return value;\n  }\n  getInt32() {\n    const value = this.dv.getInt32(this.offset, this.littleEndian);\n    this.offset += 4;\n    return value;\n  }\n  getInt32Array(size) {\n    const a = [];\n    for (let i = 0; i < size; i++) {\n      a.push(this.getInt32());\n    }\n    return a;\n  }\n  getUint32() {\n    const value = this.dv.getUint32(this.offset, this.littleEndian);\n    this.offset += 4;\n    return value;\n  }\n  // JavaScript doesn't support 64-bit integer so calculate this here\n  // 1 << 32 will return 1 so using multiply operation instead here.\n  // There's a possibility that this method returns wrong value if the value\n  // is out of the range between Number.MAX_SAFE_INTEGER and Number.MIN_SAFE_INTEGER.\n  // TODO: safely handle 64-bit integer\n  getInt64() {\n    let low, high;\n    if (this.littleEndian) {\n      low = this.getUint32();\n      high = this.getUint32();\n    } else {\n      high = this.getUint32();\n      low = this.getUint32();\n    }\n    if (high & 2147483648) {\n      high = ~high & 4294967295;\n      low = ~low & 4294967295;\n      if (low === 4294967295) high = high + 1 & 4294967295;\n      low = low + 1 & 4294967295;\n      return -(high * 4294967296 + low);\n    }\n    return high * 4294967296 + low;\n  }\n  getInt64Array(size) {\n    const a = [];\n    for (let i = 0; i < size; i++) {\n      a.push(this.getInt64());\n    }\n    return a;\n  }\n  // Note: see getInt64() comment\n  getUint64() {\n    let low, high;\n    if (this.littleEndian) {\n      low = this.getUint32();\n      high = this.getUint32();\n    } else {\n      high = this.getUint32();\n      low = this.getUint32();\n    }\n    return high * 4294967296 + low;\n  }\n  getFloat32() {\n    const value = this.dv.getFloat32(this.offset, this.littleEndian);\n    this.offset += 4;\n    return value;\n  }\n  getFloat32Array(size) {\n    const a = [];\n    for (let i = 0; i < size; i++) {\n      a.push(this.getFloat32());\n    }\n    return a;\n  }\n  getFloat64() {\n    const value = this.dv.getFloat64(this.offset, this.littleEndian);\n    this.offset += 8;\n    return value;\n  }\n  getFloat64Array(size) {\n    const a = [];\n    for (let i = 0; i < size; i++) {\n      a.push(this.getFloat64());\n    }\n    return a;\n  }\n  getArrayBuffer(size) {\n    const value = this.dv.buffer.slice(this.offset, this.offset + size);\n    this.offset += size;\n    return value;\n  }\n  getString(size) {\n    let a = [];\n    for (let i = 0; i < size; i++) {\n      a[i] = this.getUint8();\n    }\n    const nullByte = a.indexOf(0);\n    if (nullByte >= 0) a = a.slice(0, nullByte);\n    return LoaderUtils.decodeText(new Uint8Array(a));\n  }\n}\nclass FBXTree {\n  add(key, val) {\n    this[key] = val;\n  }\n}\nfunction isFbxFormatBinary(buffer) {\n  const CORRECT = \"Kaydara FBX Binary  \\0\";\n  return buffer.byteLength >= CORRECT.length && CORRECT === convertArrayBufferToString(buffer, 0, CORRECT.length);\n}\nfunction isFbxFormatASCII(text) {\n  const CORRECT = [\"K\", \"a\", \"y\", \"d\", \"a\", \"r\", \"a\", \"\\\\\", \"F\", \"B\", \"X\", \"\\\\\", \"B\", \"i\", \"n\", \"a\", \"r\", \"y\", \"\\\\\", \"\\\\\"];\n  let cursor = 0;\n  function read(offset) {\n    const result = text[offset - 1];\n    text = text.slice(cursor + offset);\n    cursor++;\n    return result;\n  }\n  for (let i = 0; i < CORRECT.length; ++i) {\n    const num = read(1);\n    if (num === CORRECT[i]) {\n      return false;\n    }\n  }\n  return true;\n}\nfunction getFbxVersion(text) {\n  const versionRegExp = /FBXVersion: (\\d+)/;\n  const match = text.match(versionRegExp);\n  if (match) {\n    const version = parseInt(match[1]);\n    return version;\n  }\n  throw new Error(\"THREE.FBXLoader: Cannot find the version number for the file given.\");\n}\nfunction convertFBXTimeToSeconds(time) {\n  return time / 46186158e3;\n}\nconst dataArray = [];\nfunction getData(polygonVertexIndex, polygonIndex, vertexIndex, infoObject) {\n  let index;\n  switch (infoObject.mappingType) {\n    case \"ByPolygonVertex\":\n      index = polygonVertexIndex;\n      break;\n    case \"ByPolygon\":\n      index = polygonIndex;\n      break;\n    case \"ByVertice\":\n      index = vertexIndex;\n      break;\n    case \"AllSame\":\n      index = infoObject.indices[0];\n      break;\n    default:\n      console.warn(\"THREE.FBXLoader: unknown attribute mapping type \" + infoObject.mappingType);\n  }\n  if (infoObject.referenceType === \"IndexToDirect\") index = infoObject.indices[index];\n  const from = index * infoObject.dataSize;\n  const to = from + infoObject.dataSize;\n  return slice(dataArray, infoObject.buffer, from, to);\n}\nconst tempEuler = /* @__PURE__ */new Euler();\nconst tempVec = /* @__PURE__ */new Vector3();\nfunction generateTransform(transformData) {\n  const lTranslationM = new Matrix4();\n  const lPreRotationM = new Matrix4();\n  const lRotationM = new Matrix4();\n  const lPostRotationM = new Matrix4();\n  const lScalingM = new Matrix4();\n  const lScalingPivotM = new Matrix4();\n  const lScalingOffsetM = new Matrix4();\n  const lRotationOffsetM = new Matrix4();\n  const lRotationPivotM = new Matrix4();\n  const lParentGX = new Matrix4();\n  const lParentLX = new Matrix4();\n  const lGlobalT = new Matrix4();\n  const inheritType = transformData.inheritType ? transformData.inheritType : 0;\n  if (transformData.translation) lTranslationM.setPosition(tempVec.fromArray(transformData.translation));\n  if (transformData.preRotation) {\n    const array = transformData.preRotation.map(MathUtils.degToRad);\n    array.push(transformData.eulerOrder);\n    lPreRotationM.makeRotationFromEuler(tempEuler.fromArray(array));\n  }\n  if (transformData.rotation) {\n    const array = transformData.rotation.map(MathUtils.degToRad);\n    array.push(transformData.eulerOrder);\n    lRotationM.makeRotationFromEuler(tempEuler.fromArray(array));\n  }\n  if (transformData.postRotation) {\n    const array = transformData.postRotation.map(MathUtils.degToRad);\n    array.push(transformData.eulerOrder);\n    lPostRotationM.makeRotationFromEuler(tempEuler.fromArray(array));\n    lPostRotationM.invert();\n  }\n  if (transformData.scale) lScalingM.scale(tempVec.fromArray(transformData.scale));\n  if (transformData.scalingOffset) lScalingOffsetM.setPosition(tempVec.fromArray(transformData.scalingOffset));\n  if (transformData.scalingPivot) lScalingPivotM.setPosition(tempVec.fromArray(transformData.scalingPivot));\n  if (transformData.rotationOffset) lRotationOffsetM.setPosition(tempVec.fromArray(transformData.rotationOffset));\n  if (transformData.rotationPivot) lRotationPivotM.setPosition(tempVec.fromArray(transformData.rotationPivot));\n  if (transformData.parentMatrixWorld) {\n    lParentLX.copy(transformData.parentMatrix);\n    lParentGX.copy(transformData.parentMatrixWorld);\n  }\n  const lLRM = lPreRotationM.clone().multiply(lRotationM).multiply(lPostRotationM);\n  const lParentGRM = new Matrix4();\n  lParentGRM.extractRotation(lParentGX);\n  const lParentTM = new Matrix4();\n  lParentTM.copyPosition(lParentGX);\n  const lParentGRSM = lParentTM.clone().invert().multiply(lParentGX);\n  const lParentGSM = lParentGRM.clone().invert().multiply(lParentGRSM);\n  const lLSM = lScalingM;\n  const lGlobalRS = new Matrix4();\n  if (inheritType === 0) {\n    lGlobalRS.copy(lParentGRM).multiply(lLRM).multiply(lParentGSM).multiply(lLSM);\n  } else if (inheritType === 1) {\n    lGlobalRS.copy(lParentGRM).multiply(lParentGSM).multiply(lLRM).multiply(lLSM);\n  } else {\n    const lParentLSM = new Matrix4().scale(new Vector3().setFromMatrixScale(lParentLX));\n    const lParentLSM_inv = lParentLSM.clone().invert();\n    const lParentGSM_noLocal = lParentGSM.clone().multiply(lParentLSM_inv);\n    lGlobalRS.copy(lParentGRM).multiply(lLRM).multiply(lParentGSM_noLocal).multiply(lLSM);\n  }\n  const lRotationPivotM_inv = lRotationPivotM.clone().invert();\n  const lScalingPivotM_inv = lScalingPivotM.clone().invert();\n  let lTransform = lTranslationM.clone().multiply(lRotationOffsetM).multiply(lRotationPivotM).multiply(lPreRotationM).multiply(lRotationM).multiply(lPostRotationM).multiply(lRotationPivotM_inv).multiply(lScalingOffsetM).multiply(lScalingPivotM).multiply(lScalingM).multiply(lScalingPivotM_inv);\n  const lLocalTWithAllPivotAndOffsetInfo = new Matrix4().copyPosition(lTransform);\n  const lGlobalTranslation = lParentGX.clone().multiply(lLocalTWithAllPivotAndOffsetInfo);\n  lGlobalT.copyPosition(lGlobalTranslation);\n  lTransform = lGlobalT.clone().multiply(lGlobalRS);\n  lTransform.premultiply(lParentGX.invert());\n  return lTransform;\n}\nfunction getEulerOrder(order) {\n  order = order || 0;\n  const enums = [\"ZYX\",\n  // -> XYZ extrinsic\n  \"YZX\",\n  // -> XZY extrinsic\n  \"XZY\",\n  // -> YZX extrinsic\n  \"ZXY\",\n  // -> YXZ extrinsic\n  \"YXZ\",\n  // -> ZXY extrinsic\n  \"XYZ\"\n  // -> ZYX extrinsic\n  //'SphericXYZ', // not possible to support\n  ];\n\n  if (order === 6) {\n    console.warn(\"THREE.FBXLoader: unsupported Euler Order: Spherical XYZ. Animations and rotations may be incorrect.\");\n    return enums[0];\n  }\n  return enums[order];\n}\nfunction parseNumberArray(value) {\n  const array = value.split(\",\").map(function (val) {\n    return parseFloat(val);\n  });\n  return array;\n}\nfunction convertArrayBufferToString(buffer, from, to) {\n  if (from === void 0) from = 0;\n  if (to === void 0) to = buffer.byteLength;\n  return LoaderUtils.decodeText(new Uint8Array(buffer, from, to));\n}\nfunction append(a, b) {\n  for (let i = 0, j = a.length, l = b.length; i < l; i++, j++) {\n    a[j] = b[i];\n  }\n}\nfunction slice(a, b, from, to) {\n  for (let i = from, j = 0; i < to; i++, j++) {\n    a[j] = b[i];\n  }\n  return a;\n}\nfunction inject(a1, index, a2) {\n  return a1.slice(0, index).concat(a2).concat(a1.slice(index));\n}\nexport { FBXLoader };","map":{"version":3,"names":["Loader","LoaderUtils","FileLoader","TextureLoader","RepeatWrapping","ClampToEdgeWrapping","Texture","MeshPhongMaterial","MeshLambertMaterial","Color","EquirectangularReflectionMapping","Matrix4","Group","Bone","PropertyBinding","Object3D","OrthographicCamera","PerspectiveCamera","PointLight","MathUtils","SpotLight","DirectionalLight","SkinnedMesh","Mesh","LineBasicMaterial","Line","Vector3","Skeleton","AmbientLight","BufferGeometry","Float32BufferAttribute","Uint16BufferAttribute","Matrix3","Vector4","AnimationClip","Quaternion","Euler","VectorKeyframeTrack","QuaternionKeyframeTrack","NumberKeyframeTrack","unzlibSync","NURBSCurve","fbxTree","connections","sceneGraph","FBXLoader","constructor","manager","load","url","onLoad","onProgress","onError","scope","path","extractUrlBase","loader","setPath","setResponseType","setRequestHeader","requestHeader","setWithCredentials","withCredentials","buffer","parse","e","console","error","itemError","FBXBuffer","isFbxFormatBinary","BinaryParser","FBXText","convertArrayBufferToString","isFbxFormatASCII","Error","getFbxVersion","TextParser","textureLoader","resourcePath","setCrossOrigin","crossOrigin","FBXTreeParser","parseConnections","images","parseImages","textures","parseTextures","materials","parseMaterials","deformers","parseDeformers","geometryMap","GeometryParser","parseScene","connectionMap","Map","rawConnections","Connections","forEach","rawConnection","fromID","toID","relationship","has","set","parents","children","parentRelationship","ID","get","push","childRelationship","blobs","Objects","videoNodes","Video","nodeID","videoNode","id","parseInt","RelativeFilename","Filename","arrayBufferContent","Content","ArrayBuffer","byteLength","base64Content","image","parseImage","filename","split","pop","content","fileName","extension","slice","lastIndexOf","toLowerCase","type","getHandler","warn","array","Uint8Array","window","URL","createObjectURL","Blob","textureMap","textureNodes","texture","parseTexture","textureNode","loadTexture","name","attrName","wrapModeU","WrapModeU","wrapModeV","WrapModeV","valueU","value","valueV","wrapS","wrapT","values","Scaling","repeat","x","y","currentPath","length","indexOf","FileName","materialMap","materialNodes","Material","material","parseMaterial","materialNode","ShadingModel","parameters","parseParameters","setValues","BumpFactor","bumpScale","Diffuse","color","fromArray","DiffuseColor","DisplacementFactor","displacementScale","Emissive","emissive","EmissiveColor","EmissiveFactor","emissiveIntensity","parseFloat","Opacity","opacity","transparent","ReflectionFactor","reflectivity","Shininess","shininess","Specular","specular","SpecularColor","child","bumpMap","getTexture","aoMap","map","colorSpace","encoding","displacementMap","emissiveMap","normalMap","envMap","mapping","specularMap","alphaMap","LayeredTexture","skeletons","morphTargets","DeformerNodes","Deformer","deformerNode","relationships","attrType","skeleton","parseSkeleton","geometryID","morphTarget","rawTargets","parseMorphTargets","deformerNodes","rawBones","boneNode","rawBone","indices","weights","transformLink","TransformLink","a","Indexes","Weights","bones","rawMorphTargets","i","morphTargetNode","rawMorphTarget","initialWeight","DeformPercent","fullWeights","FullWeights","geoID","filter","child2","modelMap","parseModels","modelNodes","Model","model","modelNode","setLookAtProperties","parentConnections","connection","parent","add","bindSkeleton","createAmbientLight","traverse","node","userData","transformData","parentMatrix","matrix","parentMatrixWorld","matrixWorld","transform","generateTransform","applyMatrix4","updateWorldMatrix","animations","AnimationParser","isGroup","buildSkeleton","createCamera","createLight","createMesh","createCurve","sanitizeNodeName","getTransformData","bone","subBone","copy","cameraAttribute","attr","NodeAttribute","CameraProjectionType","nearClippingPlane","NearPlane","farClippingPlane","FarPlane","width","innerWidth","height","innerHeight","AspectWidth","AspectHeight","aspect","fov","FieldOfView","focalLength","FocalLength","setFocalLength","lightAttribute","LightType","intensity","Intensity","CastLightOnObject","distance","FarAttenuationEnd","EnableFarAttenuation","decay","angle","Math","PI","InnerAngle","degToRad","penumbra","OuterAngle","max","CastShadows","castShadow","geometry","attributes","material2","vertexColors","FBX_Deformer","normalizeSkinWeights","reduce","geo","linewidth","inheritType","InheritType","eulerOrder","getEulerOrder","RotationOrder","translation","Lcl_Translation","preRotation","PreRotation","rotation","Lcl_Rotation","postRotation","PostRotation","scale","Lcl_Scaling","scalingOffset","ScalingOffset","scalingPivot","ScalingPivot","rotationOffset","RotationOffset","rotationPivot","RotationPivot","lookAtTarget","pos","target","position","lookAt","bindMatrices","parsePoseNodes","geoRelationships","geoConnParent","bind","BindPoseNode","Pose","NbPoseNodes","poseNodes","PoseNode","Array","isArray","poseNode","Node","Matrix","GlobalSettings","ambientColor","AmbientColor","r","g","b","geoNodes","Geometry","parseGeometry","geoNode","parseMeshGeometry","parseNurbsGeometry","skeleton2","GeometricTranslation","GeometricRotation","GeometricScaling","genGeometry","preTransform","geoInfo","parseGeoNode","buffers","genBuffers","positionAttribute","vertex","setAttribute","colors","weightsIndices","vertexWeights","normal","normalMatrix","getNormalMatrix","normalAttribute","applyNormalMatrix","uvs","uvBuffer","toString","mappingType","prevMaterialIndex","materialIndex","startIndex","currentIndex","addGroup","groups","lastGroup","lastIndex","start","count","addMorphTargets","vertexPositions","Vertices","vertexIndices","PolygonVertexIndex","LayerElementColor","parseVertexColors","LayerElementMaterial","parseMaterialIndices","LayerElementNormal","parseNormals","LayerElementUV","uv","UV","parseUVs","weightTable","index","j","weight","polygonIndex","faceLength","displayedWeightsWarning","facePositionIndexes","faceNormals","faceColors","faceUVs","faceWeights","faceWeightIndices","vertexIndex","polygonVertexIndex","endOfFace","weightIndices","data","getData","wt","wIndex","Weight","weightIndex","currentWeight","comparedWeight","comparedWeightIndex","comparedWeightArray","tmp","genFace","parentGeo","parentGeoNode","morphTargetsRelative","morphAttributes","rawTarget","morphGeoNode","genMorphGeometry","morphPositionsSparse","morphPositions","Float32Array","morphIndex","morphGeoInfo","morphBuffers","NormalNode","MappingInformationType","referenceType","ReferenceInformationType","Normals","indexBuffer","NormalIndex","NormalsIndex","dataSize","UVNode","UVIndex","ColorNode","Colors","ColorIndex","MaterialNode","materialIndexBuffer","Materials","materialIndices","order","Order","isNaN","degree","knots","KnotVector","controlPoints","pointsValues","Points","l","startKnot","endKnot","Form","curve","points","getPoints","setFromPoints","animationClips","rawClips","parseClips","key","rawClip","clip","addClip","AnimationCurve","curveNodesMap","parseAnimationCurveNodes","parseAnimationCurves","layersMap","parseAnimationLayers","parseAnimStacks","rawCurveNodes","AnimationCurveNode","rawCurveNode","match","curveNode","curves","rawCurves","animationCurve","times","KeyTime","convertFBXTimeToSeconds","KeyValueFloat","animationCurveID","animationCurveRelationship","rawLayers","AnimationLayer","layerCurveNodes","z","modelID","rawModel","modelName","initialPosition","initialRotation","initialScale","morph","deformerID","morpherID","morphName","rawStacks","AnimationStack","layer","tracks","rawTracks","concat","generateTracks","decompose","toArray","setFromQuaternion","T","Object","keys","positionTrack","generateVectorTrack","R","rotationTrack","generateRotationTrack","S","scaleTrack","morphTrack","generateMorphTrack","initialValue","getTimesForAllAxes","getKeyframeTrackValues","interpolateRotations","setFromEuler","invert","quaternion","euler","quaternionValues","premultiply","multiply","val","morphNum","getObjectByName","morphTargetDictionary","sort","targetIndex","lastValue","currentValue","prevValue","xIndex","yIndex","zIndex","time","xValue","yValue","zValue","valuesSpan","absoluteSpan","abs","numSubIntervals","step","nextValue","initialTime","timeSpan","interval","nextTime","interpolatedTimes","interpolatedValues","inject","getPrevNode","nodeStack","currentIndent","getCurrentNode","getCurrentProp","currentProp","pushStack","popStack","setCurrentProp","currentPropName","text","allNodes","FBXTree","line","matchComment","matchEmpty","matchBeginning","matchProperty","matchEnd","parseNodeBegin","parseNodeProperty","parseNodePropertyContinued","property","nodeName","trim","replace","nodeAttrs","attrs","parseNodeAttr","currentNode","contentLine","propName","propValue","parentName","parseNodeSpecialProperty","connProps","from","to","rest","elem","append","parseNumberArray","props","prop","innerPropName","innerPropType1","innerPropType2","innerPropFlag","innerPropValue","type2","flag","reader","BinaryReader","skip","version","getUint32","endOfContent","parseNode","size","getOffset","endOffset","getUint64","numProperties","nameLen","getUint8","getString","propertyList","parseProperty","singleProperty","subNode","parseSubNode","getBoolean","getFloat64","getFloat32","getInt32","getInt64","getArrayBuffer","getInt16","arrayLength","compressedLength","getBooleanArray","getFloat64Array","getFloat32Array","getInt32Array","getInt64Array","reader2","littleEndian","dv","DataView","offset","low","high","nullByte","decodeText","CORRECT","cursor","read","result","num","versionRegExp","dataArray","infoObject","tempEuler","tempVec","lTranslationM","lPreRotationM","lRotationM","lPostRotationM","lScalingM","lScalingPivotM","lScalingOffsetM","lRotationOffsetM","lRotationPivotM","lParentGX","lParentLX","lGlobalT","setPosition","makeRotationFromEuler","lLRM","clone","lParentGRM","extractRotation","lParentTM","copyPosition","lParentGRSM","lParentGSM","lLSM","lGlobalRS","lParentLSM","setFromMatrixScale","lParentLSM_inv","lParentGSM_noLocal","lRotationPivotM_inv","lScalingPivotM_inv","lTransform","lLocalTWithAllPivotAndOffsetInfo","lGlobalTranslation","enums","a1","a2"],"sources":["/home/krug/Coding/JavaScript/Websites/Personal/personal/node_modules/.pnpm/three-stdlib@2.23.7_three@0.151.3/node_modules/three-stdlib/loaders/FBXLoader.js"],"sourcesContent":["import { Loader, LoaderUtils, FileLoader, TextureLoader, RepeatWrapping, ClampToEdgeWrapping, Texture, MeshPhongMaterial, MeshLambertMaterial, Color, EquirectangularReflectionMapping, Matrix4, Group, Bone, PropertyBinding, Object3D, OrthographicCamera, PerspectiveCamera, PointLight, MathUtils, SpotLight, DirectionalLight, SkinnedMesh, Mesh, LineBasicMaterial, Line, Vector3, Skeleton, AmbientLight, BufferGeometry, Float32BufferAttribute, Uint16BufferAttribute, Matrix3, Vector4, AnimationClip, Quaternion, Euler, VectorKeyframeTrack, QuaternionKeyframeTrack, NumberKeyframeTrack } from \"three\";\nimport { unzlibSync } from \"fflate\";\nimport { NURBSCurve } from \"../curves/NURBSCurve.js\";\nlet fbxTree;\nlet connections;\nlet sceneGraph;\nclass FBXLoader extends Loader {\n  constructor(manager) {\n    super(manager);\n  }\n  load(url, onLoad, onProgress, onError) {\n    const scope = this;\n    const path = scope.path === \"\" ? LoaderUtils.extractUrlBase(url) : scope.path;\n    const loader = new FileLoader(this.manager);\n    loader.setPath(scope.path);\n    loader.setResponseType(\"arraybuffer\");\n    loader.setRequestHeader(scope.requestHeader);\n    loader.setWithCredentials(scope.withCredentials);\n    loader.load(\n      url,\n      function(buffer) {\n        try {\n          onLoad(scope.parse(buffer, path));\n        } catch (e) {\n          if (onError) {\n            onError(e);\n          } else {\n            console.error(e);\n          }\n          scope.manager.itemError(url);\n        }\n      },\n      onProgress,\n      onError\n    );\n  }\n  parse(FBXBuffer, path) {\n    if (isFbxFormatBinary(FBXBuffer)) {\n      fbxTree = new BinaryParser().parse(FBXBuffer);\n    } else {\n      const FBXText = convertArrayBufferToString(FBXBuffer);\n      if (!isFbxFormatASCII(FBXText)) {\n        throw new Error(\"THREE.FBXLoader: Unknown format.\");\n      }\n      if (getFbxVersion(FBXText) < 7e3) {\n        throw new Error(\"THREE.FBXLoader: FBX version not supported, FileVersion: \" + getFbxVersion(FBXText));\n      }\n      fbxTree = new TextParser().parse(FBXText);\n    }\n    const textureLoader = new TextureLoader(this.manager).setPath(this.resourcePath || path).setCrossOrigin(this.crossOrigin);\n    return new FBXTreeParser(textureLoader, this.manager).parse(fbxTree);\n  }\n}\nclass FBXTreeParser {\n  constructor(textureLoader, manager) {\n    this.textureLoader = textureLoader;\n    this.manager = manager;\n  }\n  parse() {\n    connections = this.parseConnections();\n    const images = this.parseImages();\n    const textures = this.parseTextures(images);\n    const materials = this.parseMaterials(textures);\n    const deformers = this.parseDeformers();\n    const geometryMap = new GeometryParser().parse(deformers);\n    this.parseScene(deformers, geometryMap, materials);\n    return sceneGraph;\n  }\n  // Parses FBXTree.Connections which holds parent-child connections between objects (e.g. material -> texture, model->geometry )\n  // and details the connection type\n  parseConnections() {\n    const connectionMap = /* @__PURE__ */ new Map();\n    if (\"Connections\" in fbxTree) {\n      const rawConnections = fbxTree.Connections.connections;\n      rawConnections.forEach(function(rawConnection) {\n        const fromID = rawConnection[0];\n        const toID = rawConnection[1];\n        const relationship = rawConnection[2];\n        if (!connectionMap.has(fromID)) {\n          connectionMap.set(fromID, {\n            parents: [],\n            children: []\n          });\n        }\n        const parentRelationship = { ID: toID, relationship };\n        connectionMap.get(fromID).parents.push(parentRelationship);\n        if (!connectionMap.has(toID)) {\n          connectionMap.set(toID, {\n            parents: [],\n            children: []\n          });\n        }\n        const childRelationship = { ID: fromID, relationship };\n        connectionMap.get(toID).children.push(childRelationship);\n      });\n    }\n    return connectionMap;\n  }\n  // Parse FBXTree.Objects.Video for embedded image data\n  // These images are connected to textures in FBXTree.Objects.Textures\n  // via FBXTree.Connections.\n  parseImages() {\n    const images = {};\n    const blobs = {};\n    if (\"Video\" in fbxTree.Objects) {\n      const videoNodes = fbxTree.Objects.Video;\n      for (const nodeID in videoNodes) {\n        const videoNode = videoNodes[nodeID];\n        const id = parseInt(nodeID);\n        images[id] = videoNode.RelativeFilename || videoNode.Filename;\n        if (\"Content\" in videoNode) {\n          const arrayBufferContent = videoNode.Content instanceof ArrayBuffer && videoNode.Content.byteLength > 0;\n          const base64Content = typeof videoNode.Content === \"string\" && videoNode.Content !== \"\";\n          if (arrayBufferContent || base64Content) {\n            const image = this.parseImage(videoNodes[nodeID]);\n            blobs[videoNode.RelativeFilename || videoNode.Filename] = image;\n          }\n        }\n      }\n    }\n    for (const id in images) {\n      const filename = images[id];\n      if (blobs[filename] !== void 0)\n        images[id] = blobs[filename];\n      else\n        images[id] = images[id].split(\"\\\\\").pop();\n    }\n    return images;\n  }\n  // Parse embedded image data in FBXTree.Video.Content\n  parseImage(videoNode) {\n    const content = videoNode.Content;\n    const fileName = videoNode.RelativeFilename || videoNode.Filename;\n    const extension = fileName.slice(fileName.lastIndexOf(\".\") + 1).toLowerCase();\n    let type;\n    switch (extension) {\n      case \"bmp\":\n        type = \"image/bmp\";\n        break;\n      case \"jpg\":\n      case \"jpeg\":\n        type = \"image/jpeg\";\n        break;\n      case \"png\":\n        type = \"image/png\";\n        break;\n      case \"tif\":\n        type = \"image/tiff\";\n        break;\n      case \"tga\":\n        if (this.manager.getHandler(\".tga\") === null) {\n          console.warn(\"FBXLoader: TGA loader not found, skipping \", fileName);\n        }\n        type = \"image/tga\";\n        break;\n      default:\n        console.warn('FBXLoader: Image type \"' + extension + '\" is not supported.');\n        return;\n    }\n    if (typeof content === \"string\") {\n      return \"data:\" + type + \";base64,\" + content;\n    } else {\n      const array = new Uint8Array(content);\n      return window.URL.createObjectURL(new Blob([array], { type }));\n    }\n  }\n  // Parse nodes in FBXTree.Objects.Texture\n  // These contain details such as UV scaling, cropping, rotation etc and are connected\n  // to images in FBXTree.Objects.Video\n  parseTextures(images) {\n    const textureMap = /* @__PURE__ */ new Map();\n    if (\"Texture\" in fbxTree.Objects) {\n      const textureNodes = fbxTree.Objects.Texture;\n      for (const nodeID in textureNodes) {\n        const texture = this.parseTexture(textureNodes[nodeID], images);\n        textureMap.set(parseInt(nodeID), texture);\n      }\n    }\n    return textureMap;\n  }\n  // Parse individual node in FBXTree.Objects.Texture\n  parseTexture(textureNode, images) {\n    const texture = this.loadTexture(textureNode, images);\n    texture.ID = textureNode.id;\n    texture.name = textureNode.attrName;\n    const wrapModeU = textureNode.WrapModeU;\n    const wrapModeV = textureNode.WrapModeV;\n    const valueU = wrapModeU !== void 0 ? wrapModeU.value : 0;\n    const valueV = wrapModeV !== void 0 ? wrapModeV.value : 0;\n    texture.wrapS = valueU === 0 ? RepeatWrapping : ClampToEdgeWrapping;\n    texture.wrapT = valueV === 0 ? RepeatWrapping : ClampToEdgeWrapping;\n    if (\"Scaling\" in textureNode) {\n      const values = textureNode.Scaling.value;\n      texture.repeat.x = values[0];\n      texture.repeat.y = values[1];\n    }\n    return texture;\n  }\n  // load a texture specified as a blob or data URI, or via an external URL using TextureLoader\n  loadTexture(textureNode, images) {\n    let fileName;\n    const currentPath = this.textureLoader.path;\n    const children = connections.get(textureNode.id).children;\n    if (children !== void 0 && children.length > 0 && images[children[0].ID] !== void 0) {\n      fileName = images[children[0].ID];\n      if (fileName.indexOf(\"blob:\") === 0 || fileName.indexOf(\"data:\") === 0) {\n        this.textureLoader.setPath(void 0);\n      }\n    }\n    let texture;\n    const extension = textureNode.FileName.slice(-3).toLowerCase();\n    if (extension === \"tga\") {\n      const loader = this.manager.getHandler(\".tga\");\n      if (loader === null) {\n        console.warn(\"FBXLoader: TGA loader not found, creating placeholder texture for\", textureNode.RelativeFilename);\n        texture = new Texture();\n      } else {\n        loader.setPath(this.textureLoader.path);\n        texture = loader.load(fileName);\n      }\n    } else if (extension === \"psd\") {\n      console.warn(\n        \"FBXLoader: PSD textures are not supported, creating placeholder texture for\",\n        textureNode.RelativeFilename\n      );\n      texture = new Texture();\n    } else {\n      texture = this.textureLoader.load(fileName);\n    }\n    this.textureLoader.setPath(currentPath);\n    return texture;\n  }\n  // Parse nodes in FBXTree.Objects.Material\n  parseMaterials(textureMap) {\n    const materialMap = /* @__PURE__ */ new Map();\n    if (\"Material\" in fbxTree.Objects) {\n      const materialNodes = fbxTree.Objects.Material;\n      for (const nodeID in materialNodes) {\n        const material = this.parseMaterial(materialNodes[nodeID], textureMap);\n        if (material !== null)\n          materialMap.set(parseInt(nodeID), material);\n      }\n    }\n    return materialMap;\n  }\n  // Parse single node in FBXTree.Objects.Material\n  // Materials are connected to texture maps in FBXTree.Objects.Textures\n  // FBX format currently only supports Lambert and Phong shading models\n  parseMaterial(materialNode, textureMap) {\n    const ID = materialNode.id;\n    const name = materialNode.attrName;\n    let type = materialNode.ShadingModel;\n    if (typeof type === \"object\") {\n      type = type.value;\n    }\n    if (!connections.has(ID))\n      return null;\n    const parameters = this.parseParameters(materialNode, textureMap, ID);\n    let material;\n    switch (type.toLowerCase()) {\n      case \"phong\":\n        material = new MeshPhongMaterial();\n        break;\n      case \"lambert\":\n        material = new MeshLambertMaterial();\n        break;\n      default:\n        console.warn('THREE.FBXLoader: unknown material type \"%s\". Defaulting to MeshPhongMaterial.', type);\n        material = new MeshPhongMaterial();\n        break;\n    }\n    material.setValues(parameters);\n    material.name = name;\n    return material;\n  }\n  // Parse FBX material and return parameters suitable for a three.js material\n  // Also parse the texture map and return any textures associated with the material\n  parseParameters(materialNode, textureMap, ID) {\n    const parameters = {};\n    if (materialNode.BumpFactor) {\n      parameters.bumpScale = materialNode.BumpFactor.value;\n    }\n    if (materialNode.Diffuse) {\n      parameters.color = new Color().fromArray(materialNode.Diffuse.value);\n    } else if (materialNode.DiffuseColor && (materialNode.DiffuseColor.type === \"Color\" || materialNode.DiffuseColor.type === \"ColorRGB\")) {\n      parameters.color = new Color().fromArray(materialNode.DiffuseColor.value);\n    }\n    if (materialNode.DisplacementFactor) {\n      parameters.displacementScale = materialNode.DisplacementFactor.value;\n    }\n    if (materialNode.Emissive) {\n      parameters.emissive = new Color().fromArray(materialNode.Emissive.value);\n    } else if (materialNode.EmissiveColor && (materialNode.EmissiveColor.type === \"Color\" || materialNode.EmissiveColor.type === \"ColorRGB\")) {\n      parameters.emissive = new Color().fromArray(materialNode.EmissiveColor.value);\n    }\n    if (materialNode.EmissiveFactor) {\n      parameters.emissiveIntensity = parseFloat(materialNode.EmissiveFactor.value);\n    }\n    if (materialNode.Opacity) {\n      parameters.opacity = parseFloat(materialNode.Opacity.value);\n    }\n    if (parameters.opacity < 1) {\n      parameters.transparent = true;\n    }\n    if (materialNode.ReflectionFactor) {\n      parameters.reflectivity = materialNode.ReflectionFactor.value;\n    }\n    if (materialNode.Shininess) {\n      parameters.shininess = materialNode.Shininess.value;\n    }\n    if (materialNode.Specular) {\n      parameters.specular = new Color().fromArray(materialNode.Specular.value);\n    } else if (materialNode.SpecularColor && materialNode.SpecularColor.type === \"Color\") {\n      parameters.specular = new Color().fromArray(materialNode.SpecularColor.value);\n    }\n    const scope = this;\n    connections.get(ID).children.forEach(function(child) {\n      const type = child.relationship;\n      switch (type) {\n        case \"Bump\":\n          parameters.bumpMap = scope.getTexture(textureMap, child.ID);\n          break;\n        case \"Maya|TEX_ao_map\":\n          parameters.aoMap = scope.getTexture(textureMap, child.ID);\n          break;\n        case \"DiffuseColor\":\n        case \"Maya|TEX_color_map\":\n          parameters.map = scope.getTexture(textureMap, child.ID);\n          if (parameters.map !== void 0) {\n            if (\"colorSpace\" in parameters.map)\n              parameters.map.colorSpace = \"srgb\";\n            else\n              parameters.map.encoding = 3001;\n          }\n          break;\n        case \"DisplacementColor\":\n          parameters.displacementMap = scope.getTexture(textureMap, child.ID);\n          break;\n        case \"EmissiveColor\":\n          parameters.emissiveMap = scope.getTexture(textureMap, child.ID);\n          if (parameters.emissiveMap !== void 0) {\n            if (\"colorSpace\" in parameters.emissiveMap)\n              parameters.emissiveMap.colorSpace = \"srgb\";\n            else\n              parameters.emissiveMap.encoding = 3001;\n          }\n          break;\n        case \"NormalMap\":\n        case \"Maya|TEX_normal_map\":\n          parameters.normalMap = scope.getTexture(textureMap, child.ID);\n          break;\n        case \"ReflectionColor\":\n          parameters.envMap = scope.getTexture(textureMap, child.ID);\n          if (parameters.envMap !== void 0) {\n            parameters.envMap.mapping = EquirectangularReflectionMapping;\n            if (\"colorSpace\" in parameters.envMap)\n              parameters.envMap.colorSpace = \"srgb\";\n            else\n              parameters.envMap.encoding = 3001;\n          }\n          break;\n        case \"SpecularColor\":\n          parameters.specularMap = scope.getTexture(textureMap, child.ID);\n          if (parameters.specularMap !== void 0) {\n            if (\"colorSpace\" in parameters.specularMap)\n              parameters.specularMap.colorSpace = \"srgb\";\n            else\n              parameters.specularMap.encoding = 3001;\n          }\n          break;\n        case \"TransparentColor\":\n        case \"TransparencyFactor\":\n          parameters.alphaMap = scope.getTexture(textureMap, child.ID);\n          parameters.transparent = true;\n          break;\n        case \"AmbientColor\":\n        case \"ShininessExponent\":\n        case \"SpecularFactor\":\n        case \"VectorDisplacementColor\":\n        default:\n          console.warn(\"THREE.FBXLoader: %s map is not supported in three.js, skipping texture.\", type);\n          break;\n      }\n    });\n    return parameters;\n  }\n  // get a texture from the textureMap for use by a material.\n  getTexture(textureMap, id) {\n    if (\"LayeredTexture\" in fbxTree.Objects && id in fbxTree.Objects.LayeredTexture) {\n      console.warn(\"THREE.FBXLoader: layered textures are not supported in three.js. Discarding all but first layer.\");\n      id = connections.get(id).children[0].ID;\n    }\n    return textureMap.get(id);\n  }\n  // Parse nodes in FBXTree.Objects.Deformer\n  // Deformer node can contain skinning or Vertex Cache animation data, however only skinning is supported here\n  // Generates map of Skeleton-like objects for use later when generating and binding skeletons.\n  parseDeformers() {\n    const skeletons = {};\n    const morphTargets = {};\n    if (\"Deformer\" in fbxTree.Objects) {\n      const DeformerNodes = fbxTree.Objects.Deformer;\n      for (const nodeID in DeformerNodes) {\n        const deformerNode = DeformerNodes[nodeID];\n        const relationships = connections.get(parseInt(nodeID));\n        if (deformerNode.attrType === \"Skin\") {\n          const skeleton = this.parseSkeleton(relationships, DeformerNodes);\n          skeleton.ID = nodeID;\n          if (relationships.parents.length > 1) {\n            console.warn(\"THREE.FBXLoader: skeleton attached to more than one geometry is not supported.\");\n          }\n          skeleton.geometryID = relationships.parents[0].ID;\n          skeletons[nodeID] = skeleton;\n        } else if (deformerNode.attrType === \"BlendShape\") {\n          const morphTarget = {\n            id: nodeID\n          };\n          morphTarget.rawTargets = this.parseMorphTargets(relationships, DeformerNodes);\n          morphTarget.id = nodeID;\n          if (relationships.parents.length > 1) {\n            console.warn(\"THREE.FBXLoader: morph target attached to more than one geometry is not supported.\");\n          }\n          morphTargets[nodeID] = morphTarget;\n        }\n      }\n    }\n    return {\n      skeletons,\n      morphTargets\n    };\n  }\n  // Parse single nodes in FBXTree.Objects.Deformer\n  // The top level skeleton node has type 'Skin' and sub nodes have type 'Cluster'\n  // Each skin node represents a skeleton and each cluster node represents a bone\n  parseSkeleton(relationships, deformerNodes) {\n    const rawBones = [];\n    relationships.children.forEach(function(child) {\n      const boneNode = deformerNodes[child.ID];\n      if (boneNode.attrType !== \"Cluster\")\n        return;\n      const rawBone = {\n        ID: child.ID,\n        indices: [],\n        weights: [],\n        transformLink: new Matrix4().fromArray(boneNode.TransformLink.a)\n        // transform: new Matrix4().fromArray( boneNode.Transform.a ),\n        // linkMode: boneNode.Mode,\n      };\n      if (\"Indexes\" in boneNode) {\n        rawBone.indices = boneNode.Indexes.a;\n        rawBone.weights = boneNode.Weights.a;\n      }\n      rawBones.push(rawBone);\n    });\n    return {\n      rawBones,\n      bones: []\n    };\n  }\n  // The top level morph deformer node has type \"BlendShape\" and sub nodes have type \"BlendShapeChannel\"\n  parseMorphTargets(relationships, deformerNodes) {\n    const rawMorphTargets = [];\n    for (let i = 0; i < relationships.children.length; i++) {\n      const child = relationships.children[i];\n      const morphTargetNode = deformerNodes[child.ID];\n      const rawMorphTarget = {\n        name: morphTargetNode.attrName,\n        initialWeight: morphTargetNode.DeformPercent,\n        id: morphTargetNode.id,\n        fullWeights: morphTargetNode.FullWeights.a\n      };\n      if (morphTargetNode.attrType !== \"BlendShapeChannel\")\n        return;\n      rawMorphTarget.geoID = connections.get(parseInt(child.ID)).children.filter(function(child2) {\n        return child2.relationship === void 0;\n      })[0].ID;\n      rawMorphTargets.push(rawMorphTarget);\n    }\n    return rawMorphTargets;\n  }\n  // create the main Group() to be returned by the loader\n  parseScene(deformers, geometryMap, materialMap) {\n    sceneGraph = new Group();\n    const modelMap = this.parseModels(deformers.skeletons, geometryMap, materialMap);\n    const modelNodes = fbxTree.Objects.Model;\n    const scope = this;\n    modelMap.forEach(function(model) {\n      const modelNode = modelNodes[model.ID];\n      scope.setLookAtProperties(model, modelNode);\n      const parentConnections = connections.get(model.ID).parents;\n      parentConnections.forEach(function(connection) {\n        const parent = modelMap.get(connection.ID);\n        if (parent !== void 0)\n          parent.add(model);\n      });\n      if (model.parent === null) {\n        sceneGraph.add(model);\n      }\n    });\n    this.bindSkeleton(deformers.skeletons, geometryMap, modelMap);\n    this.createAmbientLight();\n    sceneGraph.traverse(function(node) {\n      if (node.userData.transformData) {\n        if (node.parent) {\n          node.userData.transformData.parentMatrix = node.parent.matrix;\n          node.userData.transformData.parentMatrixWorld = node.parent.matrixWorld;\n        }\n        const transform = generateTransform(node.userData.transformData);\n        node.applyMatrix4(transform);\n        node.updateWorldMatrix();\n      }\n    });\n    const animations = new AnimationParser().parse();\n    if (sceneGraph.children.length === 1 && sceneGraph.children[0].isGroup) {\n      sceneGraph.children[0].animations = animations;\n      sceneGraph = sceneGraph.children[0];\n    }\n    sceneGraph.animations = animations;\n  }\n  // parse nodes in FBXTree.Objects.Model\n  parseModels(skeletons, geometryMap, materialMap) {\n    const modelMap = /* @__PURE__ */ new Map();\n    const modelNodes = fbxTree.Objects.Model;\n    for (const nodeID in modelNodes) {\n      const id = parseInt(nodeID);\n      const node = modelNodes[nodeID];\n      const relationships = connections.get(id);\n      let model = this.buildSkeleton(relationships, skeletons, id, node.attrName);\n      if (!model) {\n        switch (node.attrType) {\n          case \"Camera\":\n            model = this.createCamera(relationships);\n            break;\n          case \"Light\":\n            model = this.createLight(relationships);\n            break;\n          case \"Mesh\":\n            model = this.createMesh(relationships, geometryMap, materialMap);\n            break;\n          case \"NurbsCurve\":\n            model = this.createCurve(relationships, geometryMap);\n            break;\n          case \"LimbNode\":\n          case \"Root\":\n            model = new Bone();\n            break;\n          case \"Null\":\n          default:\n            model = new Group();\n            break;\n        }\n        model.name = node.attrName ? PropertyBinding.sanitizeNodeName(node.attrName) : \"\";\n        model.ID = id;\n      }\n      this.getTransformData(model, node);\n      modelMap.set(id, model);\n    }\n    return modelMap;\n  }\n  buildSkeleton(relationships, skeletons, id, name) {\n    let bone = null;\n    relationships.parents.forEach(function(parent) {\n      for (const ID in skeletons) {\n        const skeleton = skeletons[ID];\n        skeleton.rawBones.forEach(function(rawBone, i) {\n          if (rawBone.ID === parent.ID) {\n            const subBone = bone;\n            bone = new Bone();\n            bone.matrixWorld.copy(rawBone.transformLink);\n            bone.name = name ? PropertyBinding.sanitizeNodeName(name) : \"\";\n            bone.ID = id;\n            skeleton.bones[i] = bone;\n            if (subBone !== null) {\n              bone.add(subBone);\n            }\n          }\n        });\n      }\n    });\n    return bone;\n  }\n  // create a PerspectiveCamera or OrthographicCamera\n  createCamera(relationships) {\n    let model;\n    let cameraAttribute;\n    relationships.children.forEach(function(child) {\n      const attr = fbxTree.Objects.NodeAttribute[child.ID];\n      if (attr !== void 0) {\n        cameraAttribute = attr;\n      }\n    });\n    if (cameraAttribute === void 0) {\n      model = new Object3D();\n    } else {\n      let type = 0;\n      if (cameraAttribute.CameraProjectionType !== void 0 && cameraAttribute.CameraProjectionType.value === 1) {\n        type = 1;\n      }\n      let nearClippingPlane = 1;\n      if (cameraAttribute.NearPlane !== void 0) {\n        nearClippingPlane = cameraAttribute.NearPlane.value / 1e3;\n      }\n      let farClippingPlane = 1e3;\n      if (cameraAttribute.FarPlane !== void 0) {\n        farClippingPlane = cameraAttribute.FarPlane.value / 1e3;\n      }\n      let width = window.innerWidth;\n      let height = window.innerHeight;\n      if (cameraAttribute.AspectWidth !== void 0 && cameraAttribute.AspectHeight !== void 0) {\n        width = cameraAttribute.AspectWidth.value;\n        height = cameraAttribute.AspectHeight.value;\n      }\n      const aspect = width / height;\n      let fov = 45;\n      if (cameraAttribute.FieldOfView !== void 0) {\n        fov = cameraAttribute.FieldOfView.value;\n      }\n      const focalLength = cameraAttribute.FocalLength ? cameraAttribute.FocalLength.value : null;\n      switch (type) {\n        case 0:\n          model = new PerspectiveCamera(fov, aspect, nearClippingPlane, farClippingPlane);\n          if (focalLength !== null)\n            model.setFocalLength(focalLength);\n          break;\n        case 1:\n          model = new OrthographicCamera(\n            -width / 2,\n            width / 2,\n            height / 2,\n            -height / 2,\n            nearClippingPlane,\n            farClippingPlane\n          );\n          break;\n        default:\n          console.warn(\"THREE.FBXLoader: Unknown camera type \" + type + \".\");\n          model = new Object3D();\n          break;\n      }\n    }\n    return model;\n  }\n  // Create a DirectionalLight, PointLight or SpotLight\n  createLight(relationships) {\n    let model;\n    let lightAttribute;\n    relationships.children.forEach(function(child) {\n      const attr = fbxTree.Objects.NodeAttribute[child.ID];\n      if (attr !== void 0) {\n        lightAttribute = attr;\n      }\n    });\n    if (lightAttribute === void 0) {\n      model = new Object3D();\n    } else {\n      let type;\n      if (lightAttribute.LightType === void 0) {\n        type = 0;\n      } else {\n        type = lightAttribute.LightType.value;\n      }\n      let color = 16777215;\n      if (lightAttribute.Color !== void 0) {\n        color = new Color().fromArray(lightAttribute.Color.value);\n      }\n      let intensity = lightAttribute.Intensity === void 0 ? 1 : lightAttribute.Intensity.value / 100;\n      if (lightAttribute.CastLightOnObject !== void 0 && lightAttribute.CastLightOnObject.value === 0) {\n        intensity = 0;\n      }\n      let distance = 0;\n      if (lightAttribute.FarAttenuationEnd !== void 0) {\n        if (lightAttribute.EnableFarAttenuation !== void 0 && lightAttribute.EnableFarAttenuation.value === 0) {\n          distance = 0;\n        } else {\n          distance = lightAttribute.FarAttenuationEnd.value;\n        }\n      }\n      const decay = 1;\n      switch (type) {\n        case 0:\n          model = new PointLight(color, intensity, distance, decay);\n          break;\n        case 1:\n          model = new DirectionalLight(color, intensity);\n          break;\n        case 2:\n          let angle = Math.PI / 3;\n          if (lightAttribute.InnerAngle !== void 0) {\n            angle = MathUtils.degToRad(lightAttribute.InnerAngle.value);\n          }\n          let penumbra = 0;\n          if (lightAttribute.OuterAngle !== void 0) {\n            penumbra = MathUtils.degToRad(lightAttribute.OuterAngle.value);\n            penumbra = Math.max(penumbra, 1);\n          }\n          model = new SpotLight(color, intensity, distance, angle, penumbra, decay);\n          break;\n        default:\n          console.warn(\n            \"THREE.FBXLoader: Unknown light type \" + lightAttribute.LightType.value + \", defaulting to a PointLight.\"\n          );\n          model = new PointLight(color, intensity);\n          break;\n      }\n      if (lightAttribute.CastShadows !== void 0 && lightAttribute.CastShadows.value === 1) {\n        model.castShadow = true;\n      }\n    }\n    return model;\n  }\n  createMesh(relationships, geometryMap, materialMap) {\n    let model;\n    let geometry = null;\n    let material = null;\n    const materials = [];\n    relationships.children.forEach(function(child) {\n      if (geometryMap.has(child.ID)) {\n        geometry = geometryMap.get(child.ID);\n      }\n      if (materialMap.has(child.ID)) {\n        materials.push(materialMap.get(child.ID));\n      }\n    });\n    if (materials.length > 1) {\n      material = materials;\n    } else if (materials.length > 0) {\n      material = materials[0];\n    } else {\n      material = new MeshPhongMaterial({ color: 13421772 });\n      materials.push(material);\n    }\n    if (\"color\" in geometry.attributes) {\n      materials.forEach(function(material2) {\n        material2.vertexColors = true;\n      });\n    }\n    if (geometry.FBX_Deformer) {\n      model = new SkinnedMesh(geometry, material);\n      model.normalizeSkinWeights();\n    } else {\n      model = new Mesh(geometry, material);\n    }\n    return model;\n  }\n  createCurve(relationships, geometryMap) {\n    const geometry = relationships.children.reduce(function(geo, child) {\n      if (geometryMap.has(child.ID))\n        geo = geometryMap.get(child.ID);\n      return geo;\n    }, null);\n    const material = new LineBasicMaterial({ color: 3342591, linewidth: 1 });\n    return new Line(geometry, material);\n  }\n  // parse the model node for transform data\n  getTransformData(model, modelNode) {\n    const transformData = {};\n    if (\"InheritType\" in modelNode)\n      transformData.inheritType = parseInt(modelNode.InheritType.value);\n    if (\"RotationOrder\" in modelNode)\n      transformData.eulerOrder = getEulerOrder(modelNode.RotationOrder.value);\n    else\n      transformData.eulerOrder = \"ZYX\";\n    if (\"Lcl_Translation\" in modelNode)\n      transformData.translation = modelNode.Lcl_Translation.value;\n    if (\"PreRotation\" in modelNode)\n      transformData.preRotation = modelNode.PreRotation.value;\n    if (\"Lcl_Rotation\" in modelNode)\n      transformData.rotation = modelNode.Lcl_Rotation.value;\n    if (\"PostRotation\" in modelNode)\n      transformData.postRotation = modelNode.PostRotation.value;\n    if (\"Lcl_Scaling\" in modelNode)\n      transformData.scale = modelNode.Lcl_Scaling.value;\n    if (\"ScalingOffset\" in modelNode)\n      transformData.scalingOffset = modelNode.ScalingOffset.value;\n    if (\"ScalingPivot\" in modelNode)\n      transformData.scalingPivot = modelNode.ScalingPivot.value;\n    if (\"RotationOffset\" in modelNode)\n      transformData.rotationOffset = modelNode.RotationOffset.value;\n    if (\"RotationPivot\" in modelNode)\n      transformData.rotationPivot = modelNode.RotationPivot.value;\n    model.userData.transformData = transformData;\n  }\n  setLookAtProperties(model, modelNode) {\n    if (\"LookAtProperty\" in modelNode) {\n      const children = connections.get(model.ID).children;\n      children.forEach(function(child) {\n        if (child.relationship === \"LookAtProperty\") {\n          const lookAtTarget = fbxTree.Objects.Model[child.ID];\n          if (\"Lcl_Translation\" in lookAtTarget) {\n            const pos = lookAtTarget.Lcl_Translation.value;\n            if (model.target !== void 0) {\n              model.target.position.fromArray(pos);\n              sceneGraph.add(model.target);\n            } else {\n              model.lookAt(new Vector3().fromArray(pos));\n            }\n          }\n        }\n      });\n    }\n  }\n  bindSkeleton(skeletons, geometryMap, modelMap) {\n    const bindMatrices = this.parsePoseNodes();\n    for (const ID in skeletons) {\n      const skeleton = skeletons[ID];\n      const parents = connections.get(parseInt(skeleton.ID)).parents;\n      parents.forEach(function(parent) {\n        if (geometryMap.has(parent.ID)) {\n          const geoID = parent.ID;\n          const geoRelationships = connections.get(geoID);\n          geoRelationships.parents.forEach(function(geoConnParent) {\n            if (modelMap.has(geoConnParent.ID)) {\n              const model = modelMap.get(geoConnParent.ID);\n              model.bind(new Skeleton(skeleton.bones), bindMatrices[geoConnParent.ID]);\n            }\n          });\n        }\n      });\n    }\n  }\n  parsePoseNodes() {\n    const bindMatrices = {};\n    if (\"Pose\" in fbxTree.Objects) {\n      const BindPoseNode = fbxTree.Objects.Pose;\n      for (const nodeID in BindPoseNode) {\n        if (BindPoseNode[nodeID].attrType === \"BindPose\" && BindPoseNode[nodeID].NbPoseNodes > 0) {\n          const poseNodes = BindPoseNode[nodeID].PoseNode;\n          if (Array.isArray(poseNodes)) {\n            poseNodes.forEach(function(poseNode) {\n              bindMatrices[poseNode.Node] = new Matrix4().fromArray(poseNode.Matrix.a);\n            });\n          } else {\n            bindMatrices[poseNodes.Node] = new Matrix4().fromArray(poseNodes.Matrix.a);\n          }\n        }\n      }\n    }\n    return bindMatrices;\n  }\n  // Parse ambient color in FBXTree.GlobalSettings - if it's not set to black (default), create an ambient light\n  createAmbientLight() {\n    if (\"GlobalSettings\" in fbxTree && \"AmbientColor\" in fbxTree.GlobalSettings) {\n      const ambientColor = fbxTree.GlobalSettings.AmbientColor.value;\n      const r = ambientColor[0];\n      const g = ambientColor[1];\n      const b = ambientColor[2];\n      if (r !== 0 || g !== 0 || b !== 0) {\n        const color = new Color(r, g, b);\n        sceneGraph.add(new AmbientLight(color, 1));\n      }\n    }\n  }\n}\nclass GeometryParser {\n  // Parse nodes in FBXTree.Objects.Geometry\n  parse(deformers) {\n    const geometryMap = /* @__PURE__ */ new Map();\n    if (\"Geometry\" in fbxTree.Objects) {\n      const geoNodes = fbxTree.Objects.Geometry;\n      for (const nodeID in geoNodes) {\n        const relationships = connections.get(parseInt(nodeID));\n        const geo = this.parseGeometry(relationships, geoNodes[nodeID], deformers);\n        geometryMap.set(parseInt(nodeID), geo);\n      }\n    }\n    return geometryMap;\n  }\n  // Parse single node in FBXTree.Objects.Geometry\n  parseGeometry(relationships, geoNode, deformers) {\n    switch (geoNode.attrType) {\n      case \"Mesh\":\n        return this.parseMeshGeometry(relationships, geoNode, deformers);\n        break;\n      case \"NurbsCurve\":\n        return this.parseNurbsGeometry(geoNode);\n        break;\n    }\n  }\n  // Parse single node mesh geometry in FBXTree.Objects.Geometry\n  parseMeshGeometry(relationships, geoNode, deformers) {\n    const skeletons = deformers.skeletons;\n    const morphTargets = [];\n    const modelNodes = relationships.parents.map(function(parent) {\n      return fbxTree.Objects.Model[parent.ID];\n    });\n    if (modelNodes.length === 0)\n      return;\n    const skeleton = relationships.children.reduce(function(skeleton2, child) {\n      if (skeletons[child.ID] !== void 0)\n        skeleton2 = skeletons[child.ID];\n      return skeleton2;\n    }, null);\n    relationships.children.forEach(function(child) {\n      if (deformers.morphTargets[child.ID] !== void 0) {\n        morphTargets.push(deformers.morphTargets[child.ID]);\n      }\n    });\n    const modelNode = modelNodes[0];\n    const transformData = {};\n    if (\"RotationOrder\" in modelNode)\n      transformData.eulerOrder = getEulerOrder(modelNode.RotationOrder.value);\n    if (\"InheritType\" in modelNode)\n      transformData.inheritType = parseInt(modelNode.InheritType.value);\n    if (\"GeometricTranslation\" in modelNode)\n      transformData.translation = modelNode.GeometricTranslation.value;\n    if (\"GeometricRotation\" in modelNode)\n      transformData.rotation = modelNode.GeometricRotation.value;\n    if (\"GeometricScaling\" in modelNode)\n      transformData.scale = modelNode.GeometricScaling.value;\n    const transform = generateTransform(transformData);\n    return this.genGeometry(geoNode, skeleton, morphTargets, transform);\n  }\n  // Generate a BufferGeometry from a node in FBXTree.Objects.Geometry\n  genGeometry(geoNode, skeleton, morphTargets, preTransform) {\n    const geo = new BufferGeometry();\n    if (geoNode.attrName)\n      geo.name = geoNode.attrName;\n    const geoInfo = this.parseGeoNode(geoNode, skeleton);\n    const buffers = this.genBuffers(geoInfo);\n    const positionAttribute = new Float32BufferAttribute(buffers.vertex, 3);\n    positionAttribute.applyMatrix4(preTransform);\n    geo.setAttribute(\"position\", positionAttribute);\n    if (buffers.colors.length > 0) {\n      geo.setAttribute(\"color\", new Float32BufferAttribute(buffers.colors, 3));\n    }\n    if (skeleton) {\n      geo.setAttribute(\"skinIndex\", new Uint16BufferAttribute(buffers.weightsIndices, 4));\n      geo.setAttribute(\"skinWeight\", new Float32BufferAttribute(buffers.vertexWeights, 4));\n      geo.FBX_Deformer = skeleton;\n    }\n    if (buffers.normal.length > 0) {\n      const normalMatrix = new Matrix3().getNormalMatrix(preTransform);\n      const normalAttribute = new Float32BufferAttribute(buffers.normal, 3);\n      normalAttribute.applyNormalMatrix(normalMatrix);\n      geo.setAttribute(\"normal\", normalAttribute);\n    }\n    buffers.uvs.forEach(function(uvBuffer, i) {\n      let name = \"uv\" + (i + 1).toString();\n      if (i === 0) {\n        name = \"uv\";\n      }\n      geo.setAttribute(name, new Float32BufferAttribute(buffers.uvs[i], 2));\n    });\n    if (geoInfo.material && geoInfo.material.mappingType !== \"AllSame\") {\n      let prevMaterialIndex = buffers.materialIndex[0];\n      let startIndex = 0;\n      buffers.materialIndex.forEach(function(currentIndex, i) {\n        if (currentIndex !== prevMaterialIndex) {\n          geo.addGroup(startIndex, i - startIndex, prevMaterialIndex);\n          prevMaterialIndex = currentIndex;\n          startIndex = i;\n        }\n      });\n      if (geo.groups.length > 0) {\n        const lastGroup = geo.groups[geo.groups.length - 1];\n        const lastIndex = lastGroup.start + lastGroup.count;\n        if (lastIndex !== buffers.materialIndex.length) {\n          geo.addGroup(lastIndex, buffers.materialIndex.length - lastIndex, prevMaterialIndex);\n        }\n      }\n      if (geo.groups.length === 0) {\n        geo.addGroup(0, buffers.materialIndex.length, buffers.materialIndex[0]);\n      }\n    }\n    this.addMorphTargets(geo, geoNode, morphTargets, preTransform);\n    return geo;\n  }\n  parseGeoNode(geoNode, skeleton) {\n    const geoInfo = {};\n    geoInfo.vertexPositions = geoNode.Vertices !== void 0 ? geoNode.Vertices.a : [];\n    geoInfo.vertexIndices = geoNode.PolygonVertexIndex !== void 0 ? geoNode.PolygonVertexIndex.a : [];\n    if (geoNode.LayerElementColor) {\n      geoInfo.color = this.parseVertexColors(geoNode.LayerElementColor[0]);\n    }\n    if (geoNode.LayerElementMaterial) {\n      geoInfo.material = this.parseMaterialIndices(geoNode.LayerElementMaterial[0]);\n    }\n    if (geoNode.LayerElementNormal) {\n      geoInfo.normal = this.parseNormals(geoNode.LayerElementNormal[0]);\n    }\n    if (geoNode.LayerElementUV) {\n      geoInfo.uv = [];\n      let i = 0;\n      while (geoNode.LayerElementUV[i]) {\n        if (geoNode.LayerElementUV[i].UV) {\n          geoInfo.uv.push(this.parseUVs(geoNode.LayerElementUV[i]));\n        }\n        i++;\n      }\n    }\n    geoInfo.weightTable = {};\n    if (skeleton !== null) {\n      geoInfo.skeleton = skeleton;\n      skeleton.rawBones.forEach(function(rawBone, i) {\n        rawBone.indices.forEach(function(index, j) {\n          if (geoInfo.weightTable[index] === void 0)\n            geoInfo.weightTable[index] = [];\n          geoInfo.weightTable[index].push({\n            id: i,\n            weight: rawBone.weights[j]\n          });\n        });\n      });\n    }\n    return geoInfo;\n  }\n  genBuffers(geoInfo) {\n    const buffers = {\n      vertex: [],\n      normal: [],\n      colors: [],\n      uvs: [],\n      materialIndex: [],\n      vertexWeights: [],\n      weightsIndices: []\n    };\n    let polygonIndex = 0;\n    let faceLength = 0;\n    let displayedWeightsWarning = false;\n    let facePositionIndexes = [];\n    let faceNormals = [];\n    let faceColors = [];\n    let faceUVs = [];\n    let faceWeights = [];\n    let faceWeightIndices = [];\n    const scope = this;\n    geoInfo.vertexIndices.forEach(function(vertexIndex, polygonVertexIndex) {\n      let materialIndex;\n      let endOfFace = false;\n      if (vertexIndex < 0) {\n        vertexIndex = vertexIndex ^ -1;\n        endOfFace = true;\n      }\n      let weightIndices = [];\n      let weights = [];\n      facePositionIndexes.push(vertexIndex * 3, vertexIndex * 3 + 1, vertexIndex * 3 + 2);\n      if (geoInfo.color) {\n        const data = getData(polygonVertexIndex, polygonIndex, vertexIndex, geoInfo.color);\n        faceColors.push(data[0], data[1], data[2]);\n      }\n      if (geoInfo.skeleton) {\n        if (geoInfo.weightTable[vertexIndex] !== void 0) {\n          geoInfo.weightTable[vertexIndex].forEach(function(wt) {\n            weights.push(wt.weight);\n            weightIndices.push(wt.id);\n          });\n        }\n        if (weights.length > 4) {\n          if (!displayedWeightsWarning) {\n            console.warn(\n              \"THREE.FBXLoader: Vertex has more than 4 skinning weights assigned to vertex. Deleting additional weights.\"\n            );\n            displayedWeightsWarning = true;\n          }\n          const wIndex = [0, 0, 0, 0];\n          const Weight = [0, 0, 0, 0];\n          weights.forEach(function(weight, weightIndex) {\n            let currentWeight = weight;\n            let currentIndex = weightIndices[weightIndex];\n            Weight.forEach(function(comparedWeight, comparedWeightIndex, comparedWeightArray) {\n              if (currentWeight > comparedWeight) {\n                comparedWeightArray[comparedWeightIndex] = currentWeight;\n                currentWeight = comparedWeight;\n                const tmp = wIndex[comparedWeightIndex];\n                wIndex[comparedWeightIndex] = currentIndex;\n                currentIndex = tmp;\n              }\n            });\n          });\n          weightIndices = wIndex;\n          weights = Weight;\n        }\n        while (weights.length < 4) {\n          weights.push(0);\n          weightIndices.push(0);\n        }\n        for (let i = 0; i < 4; ++i) {\n          faceWeights.push(weights[i]);\n          faceWeightIndices.push(weightIndices[i]);\n        }\n      }\n      if (geoInfo.normal) {\n        const data = getData(polygonVertexIndex, polygonIndex, vertexIndex, geoInfo.normal);\n        faceNormals.push(data[0], data[1], data[2]);\n      }\n      if (geoInfo.material && geoInfo.material.mappingType !== \"AllSame\") {\n        materialIndex = getData(polygonVertexIndex, polygonIndex, vertexIndex, geoInfo.material)[0];\n      }\n      if (geoInfo.uv) {\n        geoInfo.uv.forEach(function(uv, i) {\n          const data = getData(polygonVertexIndex, polygonIndex, vertexIndex, uv);\n          if (faceUVs[i] === void 0) {\n            faceUVs[i] = [];\n          }\n          faceUVs[i].push(data[0]);\n          faceUVs[i].push(data[1]);\n        });\n      }\n      faceLength++;\n      if (endOfFace) {\n        scope.genFace(\n          buffers,\n          geoInfo,\n          facePositionIndexes,\n          materialIndex,\n          faceNormals,\n          faceColors,\n          faceUVs,\n          faceWeights,\n          faceWeightIndices,\n          faceLength\n        );\n        polygonIndex++;\n        faceLength = 0;\n        facePositionIndexes = [];\n        faceNormals = [];\n        faceColors = [];\n        faceUVs = [];\n        faceWeights = [];\n        faceWeightIndices = [];\n      }\n    });\n    return buffers;\n  }\n  // Generate data for a single face in a geometry. If the face is a quad then split it into 2 tris\n  genFace(buffers, geoInfo, facePositionIndexes, materialIndex, faceNormals, faceColors, faceUVs, faceWeights, faceWeightIndices, faceLength) {\n    for (let i = 2; i < faceLength; i++) {\n      buffers.vertex.push(geoInfo.vertexPositions[facePositionIndexes[0]]);\n      buffers.vertex.push(geoInfo.vertexPositions[facePositionIndexes[1]]);\n      buffers.vertex.push(geoInfo.vertexPositions[facePositionIndexes[2]]);\n      buffers.vertex.push(geoInfo.vertexPositions[facePositionIndexes[(i - 1) * 3]]);\n      buffers.vertex.push(geoInfo.vertexPositions[facePositionIndexes[(i - 1) * 3 + 1]]);\n      buffers.vertex.push(geoInfo.vertexPositions[facePositionIndexes[(i - 1) * 3 + 2]]);\n      buffers.vertex.push(geoInfo.vertexPositions[facePositionIndexes[i * 3]]);\n      buffers.vertex.push(geoInfo.vertexPositions[facePositionIndexes[i * 3 + 1]]);\n      buffers.vertex.push(geoInfo.vertexPositions[facePositionIndexes[i * 3 + 2]]);\n      if (geoInfo.skeleton) {\n        buffers.vertexWeights.push(faceWeights[0]);\n        buffers.vertexWeights.push(faceWeights[1]);\n        buffers.vertexWeights.push(faceWeights[2]);\n        buffers.vertexWeights.push(faceWeights[3]);\n        buffers.vertexWeights.push(faceWeights[(i - 1) * 4]);\n        buffers.vertexWeights.push(faceWeights[(i - 1) * 4 + 1]);\n        buffers.vertexWeights.push(faceWeights[(i - 1) * 4 + 2]);\n        buffers.vertexWeights.push(faceWeights[(i - 1) * 4 + 3]);\n        buffers.vertexWeights.push(faceWeights[i * 4]);\n        buffers.vertexWeights.push(faceWeights[i * 4 + 1]);\n        buffers.vertexWeights.push(faceWeights[i * 4 + 2]);\n        buffers.vertexWeights.push(faceWeights[i * 4 + 3]);\n        buffers.weightsIndices.push(faceWeightIndices[0]);\n        buffers.weightsIndices.push(faceWeightIndices[1]);\n        buffers.weightsIndices.push(faceWeightIndices[2]);\n        buffers.weightsIndices.push(faceWeightIndices[3]);\n        buffers.weightsIndices.push(faceWeightIndices[(i - 1) * 4]);\n        buffers.weightsIndices.push(faceWeightIndices[(i - 1) * 4 + 1]);\n        buffers.weightsIndices.push(faceWeightIndices[(i - 1) * 4 + 2]);\n        buffers.weightsIndices.push(faceWeightIndices[(i - 1) * 4 + 3]);\n        buffers.weightsIndices.push(faceWeightIndices[i * 4]);\n        buffers.weightsIndices.push(faceWeightIndices[i * 4 + 1]);\n        buffers.weightsIndices.push(faceWeightIndices[i * 4 + 2]);\n        buffers.weightsIndices.push(faceWeightIndices[i * 4 + 3]);\n      }\n      if (geoInfo.color) {\n        buffers.colors.push(faceColors[0]);\n        buffers.colors.push(faceColors[1]);\n        buffers.colors.push(faceColors[2]);\n        buffers.colors.push(faceColors[(i - 1) * 3]);\n        buffers.colors.push(faceColors[(i - 1) * 3 + 1]);\n        buffers.colors.push(faceColors[(i - 1) * 3 + 2]);\n        buffers.colors.push(faceColors[i * 3]);\n        buffers.colors.push(faceColors[i * 3 + 1]);\n        buffers.colors.push(faceColors[i * 3 + 2]);\n      }\n      if (geoInfo.material && geoInfo.material.mappingType !== \"AllSame\") {\n        buffers.materialIndex.push(materialIndex);\n        buffers.materialIndex.push(materialIndex);\n        buffers.materialIndex.push(materialIndex);\n      }\n      if (geoInfo.normal) {\n        buffers.normal.push(faceNormals[0]);\n        buffers.normal.push(faceNormals[1]);\n        buffers.normal.push(faceNormals[2]);\n        buffers.normal.push(faceNormals[(i - 1) * 3]);\n        buffers.normal.push(faceNormals[(i - 1) * 3 + 1]);\n        buffers.normal.push(faceNormals[(i - 1) * 3 + 2]);\n        buffers.normal.push(faceNormals[i * 3]);\n        buffers.normal.push(faceNormals[i * 3 + 1]);\n        buffers.normal.push(faceNormals[i * 3 + 2]);\n      }\n      if (geoInfo.uv) {\n        geoInfo.uv.forEach(function(uv, j) {\n          if (buffers.uvs[j] === void 0)\n            buffers.uvs[j] = [];\n          buffers.uvs[j].push(faceUVs[j][0]);\n          buffers.uvs[j].push(faceUVs[j][1]);\n          buffers.uvs[j].push(faceUVs[j][(i - 1) * 2]);\n          buffers.uvs[j].push(faceUVs[j][(i - 1) * 2 + 1]);\n          buffers.uvs[j].push(faceUVs[j][i * 2]);\n          buffers.uvs[j].push(faceUVs[j][i * 2 + 1]);\n        });\n      }\n    }\n  }\n  addMorphTargets(parentGeo, parentGeoNode, morphTargets, preTransform) {\n    if (morphTargets.length === 0)\n      return;\n    parentGeo.morphTargetsRelative = true;\n    parentGeo.morphAttributes.position = [];\n    const scope = this;\n    morphTargets.forEach(function(morphTarget) {\n      morphTarget.rawTargets.forEach(function(rawTarget) {\n        const morphGeoNode = fbxTree.Objects.Geometry[rawTarget.geoID];\n        if (morphGeoNode !== void 0) {\n          scope.genMorphGeometry(parentGeo, parentGeoNode, morphGeoNode, preTransform, rawTarget.name);\n        }\n      });\n    });\n  }\n  // a morph geometry node is similar to a standard  node, and the node is also contained\n  // in FBXTree.Objects.Geometry, however it can only have attributes for position, normal\n  // and a special attribute Index defining which vertices of the original geometry are affected\n  // Normal and position attributes only have data for the vertices that are affected by the morph\n  genMorphGeometry(parentGeo, parentGeoNode, morphGeoNode, preTransform, name) {\n    const vertexIndices = parentGeoNode.PolygonVertexIndex !== void 0 ? parentGeoNode.PolygonVertexIndex.a : [];\n    const morphPositionsSparse = morphGeoNode.Vertices !== void 0 ? morphGeoNode.Vertices.a : [];\n    const indices = morphGeoNode.Indexes !== void 0 ? morphGeoNode.Indexes.a : [];\n    const length = parentGeo.attributes.position.count * 3;\n    const morphPositions = new Float32Array(length);\n    for (let i = 0; i < indices.length; i++) {\n      const morphIndex = indices[i] * 3;\n      morphPositions[morphIndex] = morphPositionsSparse[i * 3];\n      morphPositions[morphIndex + 1] = morphPositionsSparse[i * 3 + 1];\n      morphPositions[morphIndex + 2] = morphPositionsSparse[i * 3 + 2];\n    }\n    const morphGeoInfo = {\n      vertexIndices,\n      vertexPositions: morphPositions\n    };\n    const morphBuffers = this.genBuffers(morphGeoInfo);\n    const positionAttribute = new Float32BufferAttribute(morphBuffers.vertex, 3);\n    positionAttribute.name = name || morphGeoNode.attrName;\n    positionAttribute.applyMatrix4(preTransform);\n    parentGeo.morphAttributes.position.push(positionAttribute);\n  }\n  // Parse normal from FBXTree.Objects.Geometry.LayerElementNormal if it exists\n  parseNormals(NormalNode) {\n    const mappingType = NormalNode.MappingInformationType;\n    const referenceType = NormalNode.ReferenceInformationType;\n    const buffer = NormalNode.Normals.a;\n    let indexBuffer = [];\n    if (referenceType === \"IndexToDirect\") {\n      if (\"NormalIndex\" in NormalNode) {\n        indexBuffer = NormalNode.NormalIndex.a;\n      } else if (\"NormalsIndex\" in NormalNode) {\n        indexBuffer = NormalNode.NormalsIndex.a;\n      }\n    }\n    return {\n      dataSize: 3,\n      buffer,\n      indices: indexBuffer,\n      mappingType,\n      referenceType\n    };\n  }\n  // Parse UVs from FBXTree.Objects.Geometry.LayerElementUV if it exists\n  parseUVs(UVNode) {\n    const mappingType = UVNode.MappingInformationType;\n    const referenceType = UVNode.ReferenceInformationType;\n    const buffer = UVNode.UV.a;\n    let indexBuffer = [];\n    if (referenceType === \"IndexToDirect\") {\n      indexBuffer = UVNode.UVIndex.a;\n    }\n    return {\n      dataSize: 2,\n      buffer,\n      indices: indexBuffer,\n      mappingType,\n      referenceType\n    };\n  }\n  // Parse Vertex Colors from FBXTree.Objects.Geometry.LayerElementColor if it exists\n  parseVertexColors(ColorNode) {\n    const mappingType = ColorNode.MappingInformationType;\n    const referenceType = ColorNode.ReferenceInformationType;\n    const buffer = ColorNode.Colors.a;\n    let indexBuffer = [];\n    if (referenceType === \"IndexToDirect\") {\n      indexBuffer = ColorNode.ColorIndex.a;\n    }\n    return {\n      dataSize: 4,\n      buffer,\n      indices: indexBuffer,\n      mappingType,\n      referenceType\n    };\n  }\n  // Parse mapping and material data in FBXTree.Objects.Geometry.LayerElementMaterial if it exists\n  parseMaterialIndices(MaterialNode) {\n    const mappingType = MaterialNode.MappingInformationType;\n    const referenceType = MaterialNode.ReferenceInformationType;\n    if (mappingType === \"NoMappingInformation\") {\n      return {\n        dataSize: 1,\n        buffer: [0],\n        indices: [0],\n        mappingType: \"AllSame\",\n        referenceType\n      };\n    }\n    const materialIndexBuffer = MaterialNode.Materials.a;\n    const materialIndices = [];\n    for (let i = 0; i < materialIndexBuffer.length; ++i) {\n      materialIndices.push(i);\n    }\n    return {\n      dataSize: 1,\n      buffer: materialIndexBuffer,\n      indices: materialIndices,\n      mappingType,\n      referenceType\n    };\n  }\n  // Generate a NurbGeometry from a node in FBXTree.Objects.Geometry\n  parseNurbsGeometry(geoNode) {\n    if (NURBSCurve === void 0) {\n      console.error(\n        \"THREE.FBXLoader: The loader relies on NURBSCurve for any nurbs present in the model. Nurbs will show up as empty geometry.\"\n      );\n      return new BufferGeometry();\n    }\n    const order = parseInt(geoNode.Order);\n    if (isNaN(order)) {\n      console.error(\"THREE.FBXLoader: Invalid Order %s given for geometry ID: %s\", geoNode.Order, geoNode.id);\n      return new BufferGeometry();\n    }\n    const degree = order - 1;\n    const knots = geoNode.KnotVector.a;\n    const controlPoints = [];\n    const pointsValues = geoNode.Points.a;\n    for (let i = 0, l = pointsValues.length; i < l; i += 4) {\n      controlPoints.push(new Vector4().fromArray(pointsValues, i));\n    }\n    let startKnot, endKnot;\n    if (geoNode.Form === \"Closed\") {\n      controlPoints.push(controlPoints[0]);\n    } else if (geoNode.Form === \"Periodic\") {\n      startKnot = degree;\n      endKnot = knots.length - 1 - startKnot;\n      for (let i = 0; i < degree; ++i) {\n        controlPoints.push(controlPoints[i]);\n      }\n    }\n    const curve = new NURBSCurve(degree, knots, controlPoints, startKnot, endKnot);\n    const points = curve.getPoints(controlPoints.length * 12);\n    return new BufferGeometry().setFromPoints(points);\n  }\n}\nclass AnimationParser {\n  // take raw animation clips and turn them into three.js animation clips\n  parse() {\n    const animationClips = [];\n    const rawClips = this.parseClips();\n    if (rawClips !== void 0) {\n      for (const key in rawClips) {\n        const rawClip = rawClips[key];\n        const clip = this.addClip(rawClip);\n        animationClips.push(clip);\n      }\n    }\n    return animationClips;\n  }\n  parseClips() {\n    if (fbxTree.Objects.AnimationCurve === void 0)\n      return void 0;\n    const curveNodesMap = this.parseAnimationCurveNodes();\n    this.parseAnimationCurves(curveNodesMap);\n    const layersMap = this.parseAnimationLayers(curveNodesMap);\n    const rawClips = this.parseAnimStacks(layersMap);\n    return rawClips;\n  }\n  // parse nodes in FBXTree.Objects.AnimationCurveNode\n  // each AnimationCurveNode holds data for an animation transform for a model (e.g. left arm rotation )\n  // and is referenced by an AnimationLayer\n  parseAnimationCurveNodes() {\n    const rawCurveNodes = fbxTree.Objects.AnimationCurveNode;\n    const curveNodesMap = /* @__PURE__ */ new Map();\n    for (const nodeID in rawCurveNodes) {\n      const rawCurveNode = rawCurveNodes[nodeID];\n      if (rawCurveNode.attrName.match(/S|R|T|DeformPercent/) !== null) {\n        const curveNode = {\n          id: rawCurveNode.id,\n          attr: rawCurveNode.attrName,\n          curves: {}\n        };\n        curveNodesMap.set(curveNode.id, curveNode);\n      }\n    }\n    return curveNodesMap;\n  }\n  // parse nodes in FBXTree.Objects.AnimationCurve and connect them up to\n  // previously parsed AnimationCurveNodes. Each AnimationCurve holds data for a single animated\n  // axis ( e.g. times and values of x rotation)\n  parseAnimationCurves(curveNodesMap) {\n    const rawCurves = fbxTree.Objects.AnimationCurve;\n    for (const nodeID in rawCurves) {\n      const animationCurve = {\n        id: rawCurves[nodeID].id,\n        times: rawCurves[nodeID].KeyTime.a.map(convertFBXTimeToSeconds),\n        values: rawCurves[nodeID].KeyValueFloat.a\n      };\n      const relationships = connections.get(animationCurve.id);\n      if (relationships !== void 0) {\n        const animationCurveID = relationships.parents[0].ID;\n        const animationCurveRelationship = relationships.parents[0].relationship;\n        if (animationCurveRelationship.match(/X/)) {\n          curveNodesMap.get(animationCurveID).curves[\"x\"] = animationCurve;\n        } else if (animationCurveRelationship.match(/Y/)) {\n          curveNodesMap.get(animationCurveID).curves[\"y\"] = animationCurve;\n        } else if (animationCurveRelationship.match(/Z/)) {\n          curveNodesMap.get(animationCurveID).curves[\"z\"] = animationCurve;\n        } else if (animationCurveRelationship.match(/d|DeformPercent/) && curveNodesMap.has(animationCurveID)) {\n          curveNodesMap.get(animationCurveID).curves[\"morph\"] = animationCurve;\n        }\n      }\n    }\n  }\n  // parse nodes in FBXTree.Objects.AnimationLayer. Each layers holds references\n  // to various AnimationCurveNodes and is referenced by an AnimationStack node\n  // note: theoretically a stack can have multiple layers, however in practice there always seems to be one per stack\n  parseAnimationLayers(curveNodesMap) {\n    const rawLayers = fbxTree.Objects.AnimationLayer;\n    const layersMap = /* @__PURE__ */ new Map();\n    for (const nodeID in rawLayers) {\n      const layerCurveNodes = [];\n      const connection = connections.get(parseInt(nodeID));\n      if (connection !== void 0) {\n        const children = connection.children;\n        children.forEach(function(child, i) {\n          if (curveNodesMap.has(child.ID)) {\n            const curveNode = curveNodesMap.get(child.ID);\n            if (curveNode.curves.x !== void 0 || curveNode.curves.y !== void 0 || curveNode.curves.z !== void 0) {\n              if (layerCurveNodes[i] === void 0) {\n                const modelID = connections.get(child.ID).parents.filter(function(parent) {\n                  return parent.relationship !== void 0;\n                })[0].ID;\n                if (modelID !== void 0) {\n                  const rawModel = fbxTree.Objects.Model[modelID.toString()];\n                  if (rawModel === void 0) {\n                    console.warn(\"THREE.FBXLoader: Encountered a unused curve.\", child);\n                    return;\n                  }\n                  const node = {\n                    modelName: rawModel.attrName ? PropertyBinding.sanitizeNodeName(rawModel.attrName) : \"\",\n                    ID: rawModel.id,\n                    initialPosition: [0, 0, 0],\n                    initialRotation: [0, 0, 0],\n                    initialScale: [1, 1, 1]\n                  };\n                  sceneGraph.traverse(function(child2) {\n                    if (child2.ID === rawModel.id) {\n                      node.transform = child2.matrix;\n                      if (child2.userData.transformData)\n                        node.eulerOrder = child2.userData.transformData.eulerOrder;\n                    }\n                  });\n                  if (!node.transform)\n                    node.transform = new Matrix4();\n                  if (\"PreRotation\" in rawModel)\n                    node.preRotation = rawModel.PreRotation.value;\n                  if (\"PostRotation\" in rawModel)\n                    node.postRotation = rawModel.PostRotation.value;\n                  layerCurveNodes[i] = node;\n                }\n              }\n              if (layerCurveNodes[i])\n                layerCurveNodes[i][curveNode.attr] = curveNode;\n            } else if (curveNode.curves.morph !== void 0) {\n              if (layerCurveNodes[i] === void 0) {\n                const deformerID = connections.get(child.ID).parents.filter(function(parent) {\n                  return parent.relationship !== void 0;\n                })[0].ID;\n                const morpherID = connections.get(deformerID).parents[0].ID;\n                const geoID = connections.get(morpherID).parents[0].ID;\n                const modelID = connections.get(geoID).parents[0].ID;\n                const rawModel = fbxTree.Objects.Model[modelID];\n                const node = {\n                  modelName: rawModel.attrName ? PropertyBinding.sanitizeNodeName(rawModel.attrName) : \"\",\n                  morphName: fbxTree.Objects.Deformer[deformerID].attrName\n                };\n                layerCurveNodes[i] = node;\n              }\n              layerCurveNodes[i][curveNode.attr] = curveNode;\n            }\n          }\n        });\n        layersMap.set(parseInt(nodeID), layerCurveNodes);\n      }\n    }\n    return layersMap;\n  }\n  // parse nodes in FBXTree.Objects.AnimationStack. These are the top level node in the animation\n  // hierarchy. Each Stack node will be used to create a AnimationClip\n  parseAnimStacks(layersMap) {\n    const rawStacks = fbxTree.Objects.AnimationStack;\n    const rawClips = {};\n    for (const nodeID in rawStacks) {\n      const children = connections.get(parseInt(nodeID)).children;\n      if (children.length > 1) {\n        console.warn(\n          \"THREE.FBXLoader: Encountered an animation stack with multiple layers, this is currently not supported. Ignoring subsequent layers.\"\n        );\n      }\n      const layer = layersMap.get(children[0].ID);\n      rawClips[nodeID] = {\n        name: rawStacks[nodeID].attrName,\n        layer\n      };\n    }\n    return rawClips;\n  }\n  addClip(rawClip) {\n    let tracks = [];\n    const scope = this;\n    rawClip.layer.forEach(function(rawTracks) {\n      tracks = tracks.concat(scope.generateTracks(rawTracks));\n    });\n    return new AnimationClip(rawClip.name, -1, tracks);\n  }\n  generateTracks(rawTracks) {\n    const tracks = [];\n    let initialPosition = new Vector3();\n    let initialRotation = new Quaternion();\n    let initialScale = new Vector3();\n    if (rawTracks.transform)\n      rawTracks.transform.decompose(initialPosition, initialRotation, initialScale);\n    initialPosition = initialPosition.toArray();\n    initialRotation = new Euler().setFromQuaternion(initialRotation, rawTracks.eulerOrder).toArray();\n    initialScale = initialScale.toArray();\n    if (rawTracks.T !== void 0 && Object.keys(rawTracks.T.curves).length > 0) {\n      const positionTrack = this.generateVectorTrack(\n        rawTracks.modelName,\n        rawTracks.T.curves,\n        initialPosition,\n        \"position\"\n      );\n      if (positionTrack !== void 0)\n        tracks.push(positionTrack);\n    }\n    if (rawTracks.R !== void 0 && Object.keys(rawTracks.R.curves).length > 0) {\n      const rotationTrack = this.generateRotationTrack(\n        rawTracks.modelName,\n        rawTracks.R.curves,\n        initialRotation,\n        rawTracks.preRotation,\n        rawTracks.postRotation,\n        rawTracks.eulerOrder\n      );\n      if (rotationTrack !== void 0)\n        tracks.push(rotationTrack);\n    }\n    if (rawTracks.S !== void 0 && Object.keys(rawTracks.S.curves).length > 0) {\n      const scaleTrack = this.generateVectorTrack(rawTracks.modelName, rawTracks.S.curves, initialScale, \"scale\");\n      if (scaleTrack !== void 0)\n        tracks.push(scaleTrack);\n    }\n    if (rawTracks.DeformPercent !== void 0) {\n      const morphTrack = this.generateMorphTrack(rawTracks);\n      if (morphTrack !== void 0)\n        tracks.push(morphTrack);\n    }\n    return tracks;\n  }\n  generateVectorTrack(modelName, curves, initialValue, type) {\n    const times = this.getTimesForAllAxes(curves);\n    const values = this.getKeyframeTrackValues(times, curves, initialValue);\n    return new VectorKeyframeTrack(modelName + \".\" + type, times, values);\n  }\n  generateRotationTrack(modelName, curves, initialValue, preRotation, postRotation, eulerOrder) {\n    if (curves.x !== void 0) {\n      this.interpolateRotations(curves.x);\n      curves.x.values = curves.x.values.map(MathUtils.degToRad);\n    }\n    if (curves.y !== void 0) {\n      this.interpolateRotations(curves.y);\n      curves.y.values = curves.y.values.map(MathUtils.degToRad);\n    }\n    if (curves.z !== void 0) {\n      this.interpolateRotations(curves.z);\n      curves.z.values = curves.z.values.map(MathUtils.degToRad);\n    }\n    const times = this.getTimesForAllAxes(curves);\n    const values = this.getKeyframeTrackValues(times, curves, initialValue);\n    if (preRotation !== void 0) {\n      preRotation = preRotation.map(MathUtils.degToRad);\n      preRotation.push(eulerOrder);\n      preRotation = new Euler().fromArray(preRotation);\n      preRotation = new Quaternion().setFromEuler(preRotation);\n    }\n    if (postRotation !== void 0) {\n      postRotation = postRotation.map(MathUtils.degToRad);\n      postRotation.push(eulerOrder);\n      postRotation = new Euler().fromArray(postRotation);\n      postRotation = new Quaternion().setFromEuler(postRotation).invert();\n    }\n    const quaternion = new Quaternion();\n    const euler = new Euler();\n    const quaternionValues = [];\n    for (let i = 0; i < values.length; i += 3) {\n      euler.set(values[i], values[i + 1], values[i + 2], eulerOrder);\n      quaternion.setFromEuler(euler);\n      if (preRotation !== void 0)\n        quaternion.premultiply(preRotation);\n      if (postRotation !== void 0)\n        quaternion.multiply(postRotation);\n      quaternion.toArray(quaternionValues, i / 3 * 4);\n    }\n    return new QuaternionKeyframeTrack(modelName + \".quaternion\", times, quaternionValues);\n  }\n  generateMorphTrack(rawTracks) {\n    const curves = rawTracks.DeformPercent.curves.morph;\n    const values = curves.values.map(function(val) {\n      return val / 100;\n    });\n    const morphNum = sceneGraph.getObjectByName(rawTracks.modelName).morphTargetDictionary[rawTracks.morphName];\n    return new NumberKeyframeTrack(\n      rawTracks.modelName + \".morphTargetInfluences[\" + morphNum + \"]\",\n      curves.times,\n      values\n    );\n  }\n  // For all animated objects, times are defined separately for each axis\n  // Here we'll combine the times into one sorted array without duplicates\n  getTimesForAllAxes(curves) {\n    let times = [];\n    if (curves.x !== void 0)\n      times = times.concat(curves.x.times);\n    if (curves.y !== void 0)\n      times = times.concat(curves.y.times);\n    if (curves.z !== void 0)\n      times = times.concat(curves.z.times);\n    times = times.sort(function(a, b) {\n      return a - b;\n    });\n    if (times.length > 1) {\n      let targetIndex = 1;\n      let lastValue = times[0];\n      for (let i = 1; i < times.length; i++) {\n        const currentValue = times[i];\n        if (currentValue !== lastValue) {\n          times[targetIndex] = currentValue;\n          lastValue = currentValue;\n          targetIndex++;\n        }\n      }\n      times = times.slice(0, targetIndex);\n    }\n    return times;\n  }\n  getKeyframeTrackValues(times, curves, initialValue) {\n    const prevValue = initialValue;\n    const values = [];\n    let xIndex = -1;\n    let yIndex = -1;\n    let zIndex = -1;\n    times.forEach(function(time) {\n      if (curves.x)\n        xIndex = curves.x.times.indexOf(time);\n      if (curves.y)\n        yIndex = curves.y.times.indexOf(time);\n      if (curves.z)\n        zIndex = curves.z.times.indexOf(time);\n      if (xIndex !== -1) {\n        const xValue = curves.x.values[xIndex];\n        values.push(xValue);\n        prevValue[0] = xValue;\n      } else {\n        values.push(prevValue[0]);\n      }\n      if (yIndex !== -1) {\n        const yValue = curves.y.values[yIndex];\n        values.push(yValue);\n        prevValue[1] = yValue;\n      } else {\n        values.push(prevValue[1]);\n      }\n      if (zIndex !== -1) {\n        const zValue = curves.z.values[zIndex];\n        values.push(zValue);\n        prevValue[2] = zValue;\n      } else {\n        values.push(prevValue[2]);\n      }\n    });\n    return values;\n  }\n  // Rotations are defined as Euler angles which can have values  of any size\n  // These will be converted to quaternions which don't support values greater than\n  // PI, so we'll interpolate large rotations\n  interpolateRotations(curve) {\n    for (let i = 1; i < curve.values.length; i++) {\n      const initialValue = curve.values[i - 1];\n      const valuesSpan = curve.values[i] - initialValue;\n      const absoluteSpan = Math.abs(valuesSpan);\n      if (absoluteSpan >= 180) {\n        const numSubIntervals = absoluteSpan / 180;\n        const step = valuesSpan / numSubIntervals;\n        let nextValue = initialValue + step;\n        const initialTime = curve.times[i - 1];\n        const timeSpan = curve.times[i] - initialTime;\n        const interval = timeSpan / numSubIntervals;\n        let nextTime = initialTime + interval;\n        const interpolatedTimes = [];\n        const interpolatedValues = [];\n        while (nextTime < curve.times[i]) {\n          interpolatedTimes.push(nextTime);\n          nextTime += interval;\n          interpolatedValues.push(nextValue);\n          nextValue += step;\n        }\n        curve.times = inject(curve.times, i, interpolatedTimes);\n        curve.values = inject(curve.values, i, interpolatedValues);\n      }\n    }\n  }\n}\nclass TextParser {\n  getPrevNode() {\n    return this.nodeStack[this.currentIndent - 2];\n  }\n  getCurrentNode() {\n    return this.nodeStack[this.currentIndent - 1];\n  }\n  getCurrentProp() {\n    return this.currentProp;\n  }\n  pushStack(node) {\n    this.nodeStack.push(node);\n    this.currentIndent += 1;\n  }\n  popStack() {\n    this.nodeStack.pop();\n    this.currentIndent -= 1;\n  }\n  setCurrentProp(val, name) {\n    this.currentProp = val;\n    this.currentPropName = name;\n  }\n  parse(text) {\n    this.currentIndent = 0;\n    this.allNodes = new FBXTree();\n    this.nodeStack = [];\n    this.currentProp = [];\n    this.currentPropName = \"\";\n    const scope = this;\n    const split = text.split(/[\\r\\n]+/);\n    split.forEach(function(line, i) {\n      const matchComment = line.match(/^[\\s\\t]*;/);\n      const matchEmpty = line.match(/^[\\s\\t]*$/);\n      if (matchComment || matchEmpty)\n        return;\n      const matchBeginning = line.match(\"^\\\\t{\" + scope.currentIndent + \"}(\\\\w+):(.*){\", \"\");\n      const matchProperty = line.match(\"^\\\\t{\" + scope.currentIndent + \"}(\\\\w+):[\\\\s\\\\t\\\\r\\\\n](.*)\");\n      const matchEnd = line.match(\"^\\\\t{\" + (scope.currentIndent - 1) + \"}}\");\n      if (matchBeginning) {\n        scope.parseNodeBegin(line, matchBeginning);\n      } else if (matchProperty) {\n        scope.parseNodeProperty(line, matchProperty, split[++i]);\n      } else if (matchEnd) {\n        scope.popStack();\n      } else if (line.match(/^[^\\s\\t}]/)) {\n        scope.parseNodePropertyContinued(line);\n      }\n    });\n    return this.allNodes;\n  }\n  parseNodeBegin(line, property) {\n    const nodeName = property[1].trim().replace(/^\"/, \"\").replace(/\"$/, \"\");\n    const nodeAttrs = property[2].split(\",\").map(function(attr) {\n      return attr.trim().replace(/^\"/, \"\").replace(/\"$/, \"\");\n    });\n    const node = { name: nodeName };\n    const attrs = this.parseNodeAttr(nodeAttrs);\n    const currentNode = this.getCurrentNode();\n    if (this.currentIndent === 0) {\n      this.allNodes.add(nodeName, node);\n    } else {\n      if (nodeName in currentNode) {\n        if (nodeName === \"PoseNode\") {\n          currentNode.PoseNode.push(node);\n        } else if (currentNode[nodeName].id !== void 0) {\n          currentNode[nodeName] = {};\n          currentNode[nodeName][currentNode[nodeName].id] = currentNode[nodeName];\n        }\n        if (attrs.id !== \"\")\n          currentNode[nodeName][attrs.id] = node;\n      } else if (typeof attrs.id === \"number\") {\n        currentNode[nodeName] = {};\n        currentNode[nodeName][attrs.id] = node;\n      } else if (nodeName !== \"Properties70\") {\n        if (nodeName === \"PoseNode\")\n          currentNode[nodeName] = [node];\n        else\n          currentNode[nodeName] = node;\n      }\n    }\n    if (typeof attrs.id === \"number\")\n      node.id = attrs.id;\n    if (attrs.name !== \"\")\n      node.attrName = attrs.name;\n    if (attrs.type !== \"\")\n      node.attrType = attrs.type;\n    this.pushStack(node);\n  }\n  parseNodeAttr(attrs) {\n    let id = attrs[0];\n    if (attrs[0] !== \"\") {\n      id = parseInt(attrs[0]);\n      if (isNaN(id)) {\n        id = attrs[0];\n      }\n    }\n    let name = \"\", type = \"\";\n    if (attrs.length > 1) {\n      name = attrs[1].replace(/^(\\w+)::/, \"\");\n      type = attrs[2];\n    }\n    return { id, name, type };\n  }\n  parseNodeProperty(line, property, contentLine) {\n    let propName = property[1].replace(/^\"/, \"\").replace(/\"$/, \"\").trim();\n    let propValue = property[2].replace(/^\"/, \"\").replace(/\"$/, \"\").trim();\n    if (propName === \"Content\" && propValue === \",\") {\n      propValue = contentLine.replace(/\"/g, \"\").replace(/,$/, \"\").trim();\n    }\n    const currentNode = this.getCurrentNode();\n    const parentName = currentNode.name;\n    if (parentName === \"Properties70\") {\n      this.parseNodeSpecialProperty(line, propName, propValue);\n      return;\n    }\n    if (propName === \"C\") {\n      const connProps = propValue.split(\",\").slice(1);\n      const from = parseInt(connProps[0]);\n      const to = parseInt(connProps[1]);\n      let rest = propValue.split(\",\").slice(3);\n      rest = rest.map(function(elem) {\n        return elem.trim().replace(/^\"/, \"\");\n      });\n      propName = \"connections\";\n      propValue = [from, to];\n      append(propValue, rest);\n      if (currentNode[propName] === void 0) {\n        currentNode[propName] = [];\n      }\n    }\n    if (propName === \"Node\")\n      currentNode.id = propValue;\n    if (propName in currentNode && Array.isArray(currentNode[propName])) {\n      currentNode[propName].push(propValue);\n    } else {\n      if (propName !== \"a\")\n        currentNode[propName] = propValue;\n      else\n        currentNode.a = propValue;\n    }\n    this.setCurrentProp(currentNode, propName);\n    if (propName === \"a\" && propValue.slice(-1) !== \",\") {\n      currentNode.a = parseNumberArray(propValue);\n    }\n  }\n  parseNodePropertyContinued(line) {\n    const currentNode = this.getCurrentNode();\n    currentNode.a += line;\n    if (line.slice(-1) !== \",\") {\n      currentNode.a = parseNumberArray(currentNode.a);\n    }\n  }\n  // parse \"Property70\"\n  parseNodeSpecialProperty(line, propName, propValue) {\n    const props = propValue.split('\",').map(function(prop) {\n      return prop.trim().replace(/^\\\"/, \"\").replace(/\\s/, \"_\");\n    });\n    const innerPropName = props[0];\n    const innerPropType1 = props[1];\n    const innerPropType2 = props[2];\n    const innerPropFlag = props[3];\n    let innerPropValue = props[4];\n    switch (innerPropType1) {\n      case \"int\":\n      case \"enum\":\n      case \"bool\":\n      case \"ULongLong\":\n      case \"double\":\n      case \"Number\":\n      case \"FieldOfView\":\n        innerPropValue = parseFloat(innerPropValue);\n        break;\n      case \"Color\":\n      case \"ColorRGB\":\n      case \"Vector3D\":\n      case \"Lcl_Translation\":\n      case \"Lcl_Rotation\":\n      case \"Lcl_Scaling\":\n        innerPropValue = parseNumberArray(innerPropValue);\n        break;\n    }\n    this.getPrevNode()[innerPropName] = {\n      type: innerPropType1,\n      type2: innerPropType2,\n      flag: innerPropFlag,\n      value: innerPropValue\n    };\n    this.setCurrentProp(this.getPrevNode(), innerPropName);\n  }\n}\nclass BinaryParser {\n  parse(buffer) {\n    const reader = new BinaryReader(buffer);\n    reader.skip(23);\n    const version = reader.getUint32();\n    if (version < 6400) {\n      throw new Error(\"THREE.FBXLoader: FBX version not supported, FileVersion: \" + version);\n    }\n    const allNodes = new FBXTree();\n    while (!this.endOfContent(reader)) {\n      const node = this.parseNode(reader, version);\n      if (node !== null)\n        allNodes.add(node.name, node);\n    }\n    return allNodes;\n  }\n  // Check if reader has reached the end of content.\n  endOfContent(reader) {\n    if (reader.size() % 16 === 0) {\n      return (reader.getOffset() + 160 + 16 & ~15) >= reader.size();\n    } else {\n      return reader.getOffset() + 160 + 16 >= reader.size();\n    }\n  }\n  // recursively parse nodes until the end of the file is reached\n  parseNode(reader, version) {\n    const node = {};\n    const endOffset = version >= 7500 ? reader.getUint64() : reader.getUint32();\n    const numProperties = version >= 7500 ? reader.getUint64() : reader.getUint32();\n    version >= 7500 ? reader.getUint64() : reader.getUint32();\n    const nameLen = reader.getUint8();\n    const name = reader.getString(nameLen);\n    if (endOffset === 0)\n      return null;\n    const propertyList = [];\n    for (let i = 0; i < numProperties; i++) {\n      propertyList.push(this.parseProperty(reader));\n    }\n    const id = propertyList.length > 0 ? propertyList[0] : \"\";\n    const attrName = propertyList.length > 1 ? propertyList[1] : \"\";\n    const attrType = propertyList.length > 2 ? propertyList[2] : \"\";\n    node.singleProperty = numProperties === 1 && reader.getOffset() === endOffset ? true : false;\n    while (endOffset > reader.getOffset()) {\n      const subNode = this.parseNode(reader, version);\n      if (subNode !== null)\n        this.parseSubNode(name, node, subNode);\n    }\n    node.propertyList = propertyList;\n    if (typeof id === \"number\")\n      node.id = id;\n    if (attrName !== \"\")\n      node.attrName = attrName;\n    if (attrType !== \"\")\n      node.attrType = attrType;\n    if (name !== \"\")\n      node.name = name;\n    return node;\n  }\n  parseSubNode(name, node, subNode) {\n    if (subNode.singleProperty === true) {\n      const value = subNode.propertyList[0];\n      if (Array.isArray(value)) {\n        node[subNode.name] = subNode;\n        subNode.a = value;\n      } else {\n        node[subNode.name] = value;\n      }\n    } else if (name === \"Connections\" && subNode.name === \"C\") {\n      const array = [];\n      subNode.propertyList.forEach(function(property, i) {\n        if (i !== 0)\n          array.push(property);\n      });\n      if (node.connections === void 0) {\n        node.connections = [];\n      }\n      node.connections.push(array);\n    } else if (subNode.name === \"Properties70\") {\n      const keys = Object.keys(subNode);\n      keys.forEach(function(key) {\n        node[key] = subNode[key];\n      });\n    } else if (name === \"Properties70\" && subNode.name === \"P\") {\n      let innerPropName = subNode.propertyList[0];\n      let innerPropType1 = subNode.propertyList[1];\n      const innerPropType2 = subNode.propertyList[2];\n      const innerPropFlag = subNode.propertyList[3];\n      let innerPropValue;\n      if (innerPropName.indexOf(\"Lcl \") === 0)\n        innerPropName = innerPropName.replace(\"Lcl \", \"Lcl_\");\n      if (innerPropType1.indexOf(\"Lcl \") === 0)\n        innerPropType1 = innerPropType1.replace(\"Lcl \", \"Lcl_\");\n      if (innerPropType1 === \"Color\" || innerPropType1 === \"ColorRGB\" || innerPropType1 === \"Vector\" || innerPropType1 === \"Vector3D\" || innerPropType1.indexOf(\"Lcl_\") === 0) {\n        innerPropValue = [subNode.propertyList[4], subNode.propertyList[5], subNode.propertyList[6]];\n      } else {\n        innerPropValue = subNode.propertyList[4];\n      }\n      node[innerPropName] = {\n        type: innerPropType1,\n        type2: innerPropType2,\n        flag: innerPropFlag,\n        value: innerPropValue\n      };\n    } else if (node[subNode.name] === void 0) {\n      if (typeof subNode.id === \"number\") {\n        node[subNode.name] = {};\n        node[subNode.name][subNode.id] = subNode;\n      } else {\n        node[subNode.name] = subNode;\n      }\n    } else {\n      if (subNode.name === \"PoseNode\") {\n        if (!Array.isArray(node[subNode.name])) {\n          node[subNode.name] = [node[subNode.name]];\n        }\n        node[subNode.name].push(subNode);\n      } else if (node[subNode.name][subNode.id] === void 0) {\n        node[subNode.name][subNode.id] = subNode;\n      }\n    }\n  }\n  parseProperty(reader) {\n    const type = reader.getString(1);\n    let length;\n    switch (type) {\n      case \"C\":\n        return reader.getBoolean();\n      case \"D\":\n        return reader.getFloat64();\n      case \"F\":\n        return reader.getFloat32();\n      case \"I\":\n        return reader.getInt32();\n      case \"L\":\n        return reader.getInt64();\n      case \"R\":\n        length = reader.getUint32();\n        return reader.getArrayBuffer(length);\n      case \"S\":\n        length = reader.getUint32();\n        return reader.getString(length);\n      case \"Y\":\n        return reader.getInt16();\n      case \"b\":\n      case \"c\":\n      case \"d\":\n      case \"f\":\n      case \"i\":\n      case \"l\":\n        const arrayLength = reader.getUint32();\n        const encoding = reader.getUint32();\n        const compressedLength = reader.getUint32();\n        if (encoding === 0) {\n          switch (type) {\n            case \"b\":\n            case \"c\":\n              return reader.getBooleanArray(arrayLength);\n            case \"d\":\n              return reader.getFloat64Array(arrayLength);\n            case \"f\":\n              return reader.getFloat32Array(arrayLength);\n            case \"i\":\n              return reader.getInt32Array(arrayLength);\n            case \"l\":\n              return reader.getInt64Array(arrayLength);\n          }\n        }\n        const data = unzlibSync(new Uint8Array(reader.getArrayBuffer(compressedLength)));\n        const reader2 = new BinaryReader(data.buffer);\n        switch (type) {\n          case \"b\":\n          case \"c\":\n            return reader2.getBooleanArray(arrayLength);\n          case \"d\":\n            return reader2.getFloat64Array(arrayLength);\n          case \"f\":\n            return reader2.getFloat32Array(arrayLength);\n          case \"i\":\n            return reader2.getInt32Array(arrayLength);\n          case \"l\":\n            return reader2.getInt64Array(arrayLength);\n        }\n      default:\n        throw new Error(\"THREE.FBXLoader: Unknown property type \" + type);\n    }\n  }\n}\nclass BinaryReader {\n  constructor(buffer, littleEndian) {\n    this.dv = new DataView(buffer);\n    this.offset = 0;\n    this.littleEndian = littleEndian !== void 0 ? littleEndian : true;\n  }\n  getOffset() {\n    return this.offset;\n  }\n  size() {\n    return this.dv.buffer.byteLength;\n  }\n  skip(length) {\n    this.offset += length;\n  }\n  // seems like true/false representation depends on exporter.\n  // true: 1 or 'Y'(=0x59), false: 0 or 'T'(=0x54)\n  // then sees LSB.\n  getBoolean() {\n    return (this.getUint8() & 1) === 1;\n  }\n  getBooleanArray(size) {\n    const a = [];\n    for (let i = 0; i < size; i++) {\n      a.push(this.getBoolean());\n    }\n    return a;\n  }\n  getUint8() {\n    const value = this.dv.getUint8(this.offset);\n    this.offset += 1;\n    return value;\n  }\n  getInt16() {\n    const value = this.dv.getInt16(this.offset, this.littleEndian);\n    this.offset += 2;\n    return value;\n  }\n  getInt32() {\n    const value = this.dv.getInt32(this.offset, this.littleEndian);\n    this.offset += 4;\n    return value;\n  }\n  getInt32Array(size) {\n    const a = [];\n    for (let i = 0; i < size; i++) {\n      a.push(this.getInt32());\n    }\n    return a;\n  }\n  getUint32() {\n    const value = this.dv.getUint32(this.offset, this.littleEndian);\n    this.offset += 4;\n    return value;\n  }\n  // JavaScript doesn't support 64-bit integer so calculate this here\n  // 1 << 32 will return 1 so using multiply operation instead here.\n  // There's a possibility that this method returns wrong value if the value\n  // is out of the range between Number.MAX_SAFE_INTEGER and Number.MIN_SAFE_INTEGER.\n  // TODO: safely handle 64-bit integer\n  getInt64() {\n    let low, high;\n    if (this.littleEndian) {\n      low = this.getUint32();\n      high = this.getUint32();\n    } else {\n      high = this.getUint32();\n      low = this.getUint32();\n    }\n    if (high & 2147483648) {\n      high = ~high & 4294967295;\n      low = ~low & 4294967295;\n      if (low === 4294967295)\n        high = high + 1 & 4294967295;\n      low = low + 1 & 4294967295;\n      return -(high * 4294967296 + low);\n    }\n    return high * 4294967296 + low;\n  }\n  getInt64Array(size) {\n    const a = [];\n    for (let i = 0; i < size; i++) {\n      a.push(this.getInt64());\n    }\n    return a;\n  }\n  // Note: see getInt64() comment\n  getUint64() {\n    let low, high;\n    if (this.littleEndian) {\n      low = this.getUint32();\n      high = this.getUint32();\n    } else {\n      high = this.getUint32();\n      low = this.getUint32();\n    }\n    return high * 4294967296 + low;\n  }\n  getFloat32() {\n    const value = this.dv.getFloat32(this.offset, this.littleEndian);\n    this.offset += 4;\n    return value;\n  }\n  getFloat32Array(size) {\n    const a = [];\n    for (let i = 0; i < size; i++) {\n      a.push(this.getFloat32());\n    }\n    return a;\n  }\n  getFloat64() {\n    const value = this.dv.getFloat64(this.offset, this.littleEndian);\n    this.offset += 8;\n    return value;\n  }\n  getFloat64Array(size) {\n    const a = [];\n    for (let i = 0; i < size; i++) {\n      a.push(this.getFloat64());\n    }\n    return a;\n  }\n  getArrayBuffer(size) {\n    const value = this.dv.buffer.slice(this.offset, this.offset + size);\n    this.offset += size;\n    return value;\n  }\n  getString(size) {\n    let a = [];\n    for (let i = 0; i < size; i++) {\n      a[i] = this.getUint8();\n    }\n    const nullByte = a.indexOf(0);\n    if (nullByte >= 0)\n      a = a.slice(0, nullByte);\n    return LoaderUtils.decodeText(new Uint8Array(a));\n  }\n}\nclass FBXTree {\n  add(key, val) {\n    this[key] = val;\n  }\n}\nfunction isFbxFormatBinary(buffer) {\n  const CORRECT = \"Kaydara FBX Binary  \\0\";\n  return buffer.byteLength >= CORRECT.length && CORRECT === convertArrayBufferToString(buffer, 0, CORRECT.length);\n}\nfunction isFbxFormatASCII(text) {\n  const CORRECT = [\n    \"K\",\n    \"a\",\n    \"y\",\n    \"d\",\n    \"a\",\n    \"r\",\n    \"a\",\n    \"\\\\\",\n    \"F\",\n    \"B\",\n    \"X\",\n    \"\\\\\",\n    \"B\",\n    \"i\",\n    \"n\",\n    \"a\",\n    \"r\",\n    \"y\",\n    \"\\\\\",\n    \"\\\\\"\n  ];\n  let cursor = 0;\n  function read(offset) {\n    const result = text[offset - 1];\n    text = text.slice(cursor + offset);\n    cursor++;\n    return result;\n  }\n  for (let i = 0; i < CORRECT.length; ++i) {\n    const num = read(1);\n    if (num === CORRECT[i]) {\n      return false;\n    }\n  }\n  return true;\n}\nfunction getFbxVersion(text) {\n  const versionRegExp = /FBXVersion: (\\d+)/;\n  const match = text.match(versionRegExp);\n  if (match) {\n    const version = parseInt(match[1]);\n    return version;\n  }\n  throw new Error(\"THREE.FBXLoader: Cannot find the version number for the file given.\");\n}\nfunction convertFBXTimeToSeconds(time) {\n  return time / 46186158e3;\n}\nconst dataArray = [];\nfunction getData(polygonVertexIndex, polygonIndex, vertexIndex, infoObject) {\n  let index;\n  switch (infoObject.mappingType) {\n    case \"ByPolygonVertex\":\n      index = polygonVertexIndex;\n      break;\n    case \"ByPolygon\":\n      index = polygonIndex;\n      break;\n    case \"ByVertice\":\n      index = vertexIndex;\n      break;\n    case \"AllSame\":\n      index = infoObject.indices[0];\n      break;\n    default:\n      console.warn(\"THREE.FBXLoader: unknown attribute mapping type \" + infoObject.mappingType);\n  }\n  if (infoObject.referenceType === \"IndexToDirect\")\n    index = infoObject.indices[index];\n  const from = index * infoObject.dataSize;\n  const to = from + infoObject.dataSize;\n  return slice(dataArray, infoObject.buffer, from, to);\n}\nconst tempEuler = /* @__PURE__ */ new Euler();\nconst tempVec = /* @__PURE__ */ new Vector3();\nfunction generateTransform(transformData) {\n  const lTranslationM = new Matrix4();\n  const lPreRotationM = new Matrix4();\n  const lRotationM = new Matrix4();\n  const lPostRotationM = new Matrix4();\n  const lScalingM = new Matrix4();\n  const lScalingPivotM = new Matrix4();\n  const lScalingOffsetM = new Matrix4();\n  const lRotationOffsetM = new Matrix4();\n  const lRotationPivotM = new Matrix4();\n  const lParentGX = new Matrix4();\n  const lParentLX = new Matrix4();\n  const lGlobalT = new Matrix4();\n  const inheritType = transformData.inheritType ? transformData.inheritType : 0;\n  if (transformData.translation)\n    lTranslationM.setPosition(tempVec.fromArray(transformData.translation));\n  if (transformData.preRotation) {\n    const array = transformData.preRotation.map(MathUtils.degToRad);\n    array.push(transformData.eulerOrder);\n    lPreRotationM.makeRotationFromEuler(tempEuler.fromArray(array));\n  }\n  if (transformData.rotation) {\n    const array = transformData.rotation.map(MathUtils.degToRad);\n    array.push(transformData.eulerOrder);\n    lRotationM.makeRotationFromEuler(tempEuler.fromArray(array));\n  }\n  if (transformData.postRotation) {\n    const array = transformData.postRotation.map(MathUtils.degToRad);\n    array.push(transformData.eulerOrder);\n    lPostRotationM.makeRotationFromEuler(tempEuler.fromArray(array));\n    lPostRotationM.invert();\n  }\n  if (transformData.scale)\n    lScalingM.scale(tempVec.fromArray(transformData.scale));\n  if (transformData.scalingOffset)\n    lScalingOffsetM.setPosition(tempVec.fromArray(transformData.scalingOffset));\n  if (transformData.scalingPivot)\n    lScalingPivotM.setPosition(tempVec.fromArray(transformData.scalingPivot));\n  if (transformData.rotationOffset)\n    lRotationOffsetM.setPosition(tempVec.fromArray(transformData.rotationOffset));\n  if (transformData.rotationPivot)\n    lRotationPivotM.setPosition(tempVec.fromArray(transformData.rotationPivot));\n  if (transformData.parentMatrixWorld) {\n    lParentLX.copy(transformData.parentMatrix);\n    lParentGX.copy(transformData.parentMatrixWorld);\n  }\n  const lLRM = lPreRotationM.clone().multiply(lRotationM).multiply(lPostRotationM);\n  const lParentGRM = new Matrix4();\n  lParentGRM.extractRotation(lParentGX);\n  const lParentTM = new Matrix4();\n  lParentTM.copyPosition(lParentGX);\n  const lParentGRSM = lParentTM.clone().invert().multiply(lParentGX);\n  const lParentGSM = lParentGRM.clone().invert().multiply(lParentGRSM);\n  const lLSM = lScalingM;\n  const lGlobalRS = new Matrix4();\n  if (inheritType === 0) {\n    lGlobalRS.copy(lParentGRM).multiply(lLRM).multiply(lParentGSM).multiply(lLSM);\n  } else if (inheritType === 1) {\n    lGlobalRS.copy(lParentGRM).multiply(lParentGSM).multiply(lLRM).multiply(lLSM);\n  } else {\n    const lParentLSM = new Matrix4().scale(new Vector3().setFromMatrixScale(lParentLX));\n    const lParentLSM_inv = lParentLSM.clone().invert();\n    const lParentGSM_noLocal = lParentGSM.clone().multiply(lParentLSM_inv);\n    lGlobalRS.copy(lParentGRM).multiply(lLRM).multiply(lParentGSM_noLocal).multiply(lLSM);\n  }\n  const lRotationPivotM_inv = lRotationPivotM.clone().invert();\n  const lScalingPivotM_inv = lScalingPivotM.clone().invert();\n  let lTransform = lTranslationM.clone().multiply(lRotationOffsetM).multiply(lRotationPivotM).multiply(lPreRotationM).multiply(lRotationM).multiply(lPostRotationM).multiply(lRotationPivotM_inv).multiply(lScalingOffsetM).multiply(lScalingPivotM).multiply(lScalingM).multiply(lScalingPivotM_inv);\n  const lLocalTWithAllPivotAndOffsetInfo = new Matrix4().copyPosition(lTransform);\n  const lGlobalTranslation = lParentGX.clone().multiply(lLocalTWithAllPivotAndOffsetInfo);\n  lGlobalT.copyPosition(lGlobalTranslation);\n  lTransform = lGlobalT.clone().multiply(lGlobalRS);\n  lTransform.premultiply(lParentGX.invert());\n  return lTransform;\n}\nfunction getEulerOrder(order) {\n  order = order || 0;\n  const enums = [\n    \"ZYX\",\n    // -> XYZ extrinsic\n    \"YZX\",\n    // -> XZY extrinsic\n    \"XZY\",\n    // -> YZX extrinsic\n    \"ZXY\",\n    // -> YXZ extrinsic\n    \"YXZ\",\n    // -> ZXY extrinsic\n    \"XYZ\"\n    // -> ZYX extrinsic\n    //'SphericXYZ', // not possible to support\n  ];\n  if (order === 6) {\n    console.warn(\"THREE.FBXLoader: unsupported Euler Order: Spherical XYZ. Animations and rotations may be incorrect.\");\n    return enums[0];\n  }\n  return enums[order];\n}\nfunction parseNumberArray(value) {\n  const array = value.split(\",\").map(function(val) {\n    return parseFloat(val);\n  });\n  return array;\n}\nfunction convertArrayBufferToString(buffer, from, to) {\n  if (from === void 0)\n    from = 0;\n  if (to === void 0)\n    to = buffer.byteLength;\n  return LoaderUtils.decodeText(new Uint8Array(buffer, from, to));\n}\nfunction append(a, b) {\n  for (let i = 0, j = a.length, l = b.length; i < l; i++, j++) {\n    a[j] = b[i];\n  }\n}\nfunction slice(a, b, from, to) {\n  for (let i = from, j = 0; i < to; i++, j++) {\n    a[j] = b[i];\n  }\n  return a;\n}\nfunction inject(a1, index, a2) {\n  return a1.slice(0, index).concat(a2).concat(a1.slice(index));\n}\nexport {\n  FBXLoader\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}