{"ast":null,"code":"import _get from \"/home/krug/Coding/JavaScript/Websites/Personal/personal/node_modules/.pnpm/@babel+runtime@7.22.3/node_modules/@babel/runtime/helpers/esm/get.js\";\nimport _getPrototypeOf from \"/home/krug/Coding/JavaScript/Websites/Personal/personal/node_modules/.pnpm/@babel+runtime@7.22.3/node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js\";\nimport _classCallCheck from \"/home/krug/Coding/JavaScript/Websites/Personal/personal/node_modules/.pnpm/@babel+runtime@7.22.3/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/home/krug/Coding/JavaScript/Websites/Personal/personal/node_modules/.pnpm/@babel+runtime@7.22.3/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"/home/krug/Coding/JavaScript/Websites/Personal/personal/node_modules/.pnpm/@babel+runtime@7.22.3/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/home/krug/Coding/JavaScript/Websites/Personal/personal/node_modules/.pnpm/@babel+runtime@7.22.3/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { LineBasicMaterial, BufferAttribute, Box3, Group, MeshBasicMaterial, Object3D, BufferGeometry } from 'three';\nimport { arrayToBox } from '../utils/ArrayBoxUtilities.js';\nvar boundingBox = /* @__PURE__ */new Box3();\nvar MeshBVHRootVisualizer = /*#__PURE__*/function (_Object3D) {\n  _inherits(MeshBVHRootVisualizer, _Object3D);\n  var _super = _createSuper(MeshBVHRootVisualizer);\n  function MeshBVHRootVisualizer(mesh, material) {\n    var _this;\n    var depth = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 10;\n    var group = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;\n    _classCallCheck(this, MeshBVHRootVisualizer);\n    _this = _super.call(this);\n    _this.material = material;\n    _this.geometry = new BufferGeometry();\n    _this.name = 'MeshBVHRootVisualizer';\n    _this.depth = depth;\n    _this.displayParents = false;\n    _this.mesh = mesh;\n    _this.displayEdges = true;\n    _this._group = group;\n    return _this;\n  }\n  _createClass(MeshBVHRootVisualizer, [{\n    key: \"isMesh\",\n    get: function get() {\n      return !this.displayEdges;\n    }\n  }, {\n    key: \"isLineSegments\",\n    get: function get() {\n      return this.displayEdges;\n    }\n  }, {\n    key: \"isLine\",\n    get: function get() {\n      return this.displayEdges;\n    }\n  }, {\n    key: \"raycast\",\n    value: function raycast() {}\n  }, {\n    key: \"update\",\n    value: function update() {\n      var geometry = this.geometry;\n      var boundsTree = this.mesh.geometry.boundsTree;\n      var group = this._group;\n      geometry.dispose();\n      this.visible = false;\n      if (boundsTree) {\n        // count the number of bounds required\n        var targetDepth = this.depth - 1;\n        var displayParents = this.displayParents;\n        var boundsCount = 0;\n        boundsTree.traverse(function (depth, isLeaf) {\n          if (depth === targetDepth || isLeaf) {\n            boundsCount++;\n            return true;\n          } else if (displayParents) {\n            boundsCount++;\n          }\n        }, group);\n\n        // fill in the position buffer with the bounds corners\n        var posIndex = 0;\n        var positionArray = new Float32Array(8 * 3 * boundsCount);\n        boundsTree.traverse(function (depth, isLeaf, boundingData) {\n          var terminate = depth === targetDepth || isLeaf;\n          if (terminate || displayParents) {\n            arrayToBox(0, boundingData, boundingBox);\n            var min = boundingBox.min,\n              max = boundingBox.max;\n            for (var x = -1; x <= 1; x += 2) {\n              var xVal = x < 0 ? min.x : max.x;\n              for (var y = -1; y <= 1; y += 2) {\n                var yVal = y < 0 ? min.y : max.y;\n                for (var z = -1; z <= 1; z += 2) {\n                  var zVal = z < 0 ? min.z : max.z;\n                  positionArray[posIndex + 0] = xVal;\n                  positionArray[posIndex + 1] = yVal;\n                  positionArray[posIndex + 2] = zVal;\n                  posIndex += 3;\n                }\n              }\n            }\n            return terminate;\n          }\n        }, group);\n        var indexArray;\n        var indices;\n        if (this.displayEdges) {\n          // fill in the index buffer to point to the corner points\n          indices = new Uint8Array([\n          // x axis\n          0, 4, 1, 5, 2, 6, 3, 7,\n          // y axis\n          0, 2, 1, 3, 4, 6, 5, 7,\n          // z axis\n          0, 1, 2, 3, 4, 5, 6, 7]);\n        } else {\n          indices = new Uint8Array([\n          // X-, X+\n          0, 1, 2, 2, 1, 3, 4, 6, 5, 6, 7, 5,\n          // Y-, Y+\n          1, 4, 5, 0, 4, 1, 2, 3, 6, 3, 7, 6,\n          // Z-, Z+\n          0, 2, 4, 2, 6, 4, 1, 5, 3, 3, 5, 7]);\n        }\n        if (positionArray.length > 65535) {\n          indexArray = new Uint32Array(indices.length * boundsCount);\n        } else {\n          indexArray = new Uint16Array(indices.length * boundsCount);\n        }\n        var indexLength = indices.length;\n        for (var i = 0; i < boundsCount; i++) {\n          var posOffset = i * 8;\n          var indexOffset = i * indexLength;\n          for (var j = 0; j < indexLength; j++) {\n            indexArray[indexOffset + j] = posOffset + indices[j];\n          }\n        }\n\n        // update the geometry\n        geometry.setIndex(new BufferAttribute(indexArray, 1, false));\n        geometry.setAttribute('position', new BufferAttribute(positionArray, 3, false));\n        this.visible = true;\n      }\n    }\n  }]);\n  return MeshBVHRootVisualizer;\n}(Object3D);\nvar MeshBVHVisualizer = /*#__PURE__*/function (_Group) {\n  _inherits(MeshBVHVisualizer, _Group);\n  var _super2 = _createSuper(MeshBVHVisualizer);\n  function MeshBVHVisualizer(mesh) {\n    var _this2;\n    var depth = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 10;\n    _classCallCheck(this, MeshBVHVisualizer);\n    _this2 = _super2.call(this);\n    _this2.name = 'MeshBVHVisualizer';\n    _this2.depth = depth;\n    _this2.mesh = mesh;\n    _this2.displayParents = false;\n    _this2.displayEdges = true;\n    _this2._roots = [];\n    var edgeMaterial = new LineBasicMaterial({\n      color: 0x00FF88,\n      transparent: true,\n      opacity: 0.3,\n      depthWrite: false\n    });\n    var meshMaterial = new MeshBasicMaterial({\n      color: 0x00FF88,\n      transparent: true,\n      opacity: 0.3,\n      depthWrite: false\n    });\n    meshMaterial.color = edgeMaterial.color;\n    _this2.edgeMaterial = edgeMaterial;\n    _this2.meshMaterial = meshMaterial;\n    _this2.update();\n    return _this2;\n  }\n  _createClass(MeshBVHVisualizer, [{\n    key: \"color\",\n    get: function get() {\n      return this.edgeMaterial.color;\n    }\n  }, {\n    key: \"opacity\",\n    get: function get() {\n      return this.edgeMaterial.opacity;\n    },\n    set: function set(v) {\n      this.edgeMaterial.opacity = v;\n      this.meshMaterial.opacity = v;\n    }\n  }, {\n    key: \"update\",\n    value: function update() {\n      var bvh = this.mesh.geometry.boundsTree;\n      var totalRoots = bvh ? bvh._roots.length : 0;\n      while (this._roots.length > totalRoots) {\n        var root = this._roots.pop();\n        root.geometry.dispose();\n        this.remove(root);\n      }\n      for (var i = 0; i < totalRoots; i++) {\n        if (i >= this._roots.length) {\n          var _root = new MeshBVHRootVisualizer(this.mesh, this.edgeMaterial, this.depth, i);\n          this.add(_root);\n          this._roots.push(_root);\n        }\n        var _root2 = this._roots[i];\n        _root2.depth = this.depth;\n        _root2.mesh = this.mesh;\n        _root2.displayParents = this.displayParents;\n        _root2.displayEdges = this.displayEdges;\n        _root2.material = this.displayEdges ? this.edgeMaterial : this.meshMaterial;\n        _root2.update();\n      }\n    }\n  }, {\n    key: \"updateMatrixWorld\",\n    value: function updateMatrixWorld() {\n      var _get2;\n      this.position.copy(this.mesh.position);\n      this.rotation.copy(this.mesh.rotation);\n      this.scale.copy(this.mesh.scale);\n      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n      (_get2 = _get(_getPrototypeOf(MeshBVHVisualizer.prototype), \"updateMatrixWorld\", this)).call.apply(_get2, [this].concat(args));\n    }\n  }, {\n    key: \"copy\",\n    value: function copy(source) {\n      this.depth = source.depth;\n      this.mesh = source.mesh;\n    }\n  }, {\n    key: \"clone\",\n    value: function clone() {\n      return new MeshBVHVisualizer(this.mesh, this.depth);\n    }\n  }, {\n    key: \"dispose\",\n    value: function dispose() {\n      this.edgeMaterial.dispose();\n      this.meshMaterial.dispose();\n      var children = this.children;\n      for (var i = 0, l = children.length; i < l; i++) {\n        children[i].geometry.dispose();\n      }\n    }\n  }]);\n  return MeshBVHVisualizer;\n}(Group);\nexport { MeshBVHVisualizer };","map":{"version":3,"names":["LineBasicMaterial","BufferAttribute","Box3","Group","MeshBasicMaterial","Object3D","BufferGeometry","arrayToBox","boundingBox","MeshBVHRootVisualizer","_Object3D","_inherits","_super","_createSuper","mesh","material","_this","depth","arguments","length","undefined","group","_classCallCheck","call","geometry","name","displayParents","displayEdges","_group","_createClass","key","get","value","raycast","update","boundsTree","dispose","visible","targetDepth","boundsCount","traverse","isLeaf","posIndex","positionArray","Float32Array","boundingData","terminate","min","max","x","xVal","y","yVal","z","zVal","indexArray","indices","Uint8Array","Uint32Array","Uint16Array","indexLength","i","posOffset","indexOffset","j","setIndex","setAttribute","MeshBVHVisualizer","_Group","_super2","_this2","_roots","edgeMaterial","color","transparent","opacity","depthWrite","meshMaterial","set","v","bvh","totalRoots","root","pop","remove","add","push","updateMatrixWorld","_get2","position","copy","rotation","scale","_len","args","Array","_key","_get","_getPrototypeOf","prototype","apply","concat","source","clone","children","l"],"sources":["/home/krug/Coding/JavaScript/Websites/Personal/personal/node_modules/.pnpm/three-mesh-bvh@0.5.24_three@0.151.3/node_modules/three-mesh-bvh/src/objects/MeshBVHVisualizer.js"],"sourcesContent":["import { LineBasicMaterial, BufferAttribute, Box3, Group, MeshBasicMaterial, Object3D, BufferGeometry } from 'three';\nimport { arrayToBox } from '../utils/ArrayBoxUtilities.js';\n\nconst boundingBox = /* @__PURE__ */ new Box3();\nclass MeshBVHRootVisualizer extends Object3D {\n\n\tget isMesh() {\n\n\t\treturn ! this.displayEdges;\n\n\t}\n\n\tget isLineSegments() {\n\n\t\treturn this.displayEdges;\n\n\t}\n\n\tget isLine() {\n\n\t\treturn this.displayEdges;\n\n\t}\n\n\tconstructor( mesh, material, depth = 10, group = 0 ) {\n\n\t\tsuper();\n\n\t\tthis.material = material;\n\t\tthis.geometry = new BufferGeometry();\n\t\tthis.name = 'MeshBVHRootVisualizer';\n\t\tthis.depth = depth;\n\t\tthis.displayParents = false;\n\t\tthis.mesh = mesh;\n\t\tthis.displayEdges = true;\n\t\tthis._group = group;\n\n\t}\n\n\traycast() {}\n\n\tupdate() {\n\n\t\tconst geometry = this.geometry;\n\t\tconst boundsTree = this.mesh.geometry.boundsTree;\n\t\tconst group = this._group;\n\t\tgeometry.dispose();\n\t\tthis.visible = false;\n\t\tif ( boundsTree ) {\n\n\t\t\t// count the number of bounds required\n\t\t\tconst targetDepth = this.depth - 1;\n\t\t\tconst displayParents = this.displayParents;\n\t\t\tlet boundsCount = 0;\n\t\t\tboundsTree.traverse( ( depth, isLeaf ) => {\n\n\t\t\t\tif ( depth === targetDepth || isLeaf ) {\n\n\t\t\t\t\tboundsCount ++;\n\t\t\t\t\treturn true;\n\n\t\t\t\t} else if ( displayParents ) {\n\n\t\t\t\t\tboundsCount ++;\n\n\t\t\t\t}\n\n\t\t\t}, group );\n\n\t\t\t// fill in the position buffer with the bounds corners\n\t\t\tlet posIndex = 0;\n\t\t\tconst positionArray = new Float32Array( 8 * 3 * boundsCount );\n\t\t\tboundsTree.traverse( ( depth, isLeaf, boundingData ) => {\n\n\t\t\t\tconst terminate = depth === targetDepth || isLeaf;\n\t\t\t\tif ( terminate || displayParents ) {\n\n\t\t\t\t\tarrayToBox( 0, boundingData, boundingBox );\n\n\t\t\t\t\tconst { min, max } = boundingBox;\n\t\t\t\t\tfor ( let x = - 1; x <= 1; x += 2 ) {\n\n\t\t\t\t\t\tconst xVal = x < 0 ? min.x : max.x;\n\t\t\t\t\t\tfor ( let y = - 1; y <= 1; y += 2 ) {\n\n\t\t\t\t\t\t\tconst yVal = y < 0 ? min.y : max.y;\n\t\t\t\t\t\t\tfor ( let z = - 1; z <= 1; z += 2 ) {\n\n\t\t\t\t\t\t\t\tconst zVal = z < 0 ? min.z : max.z;\n\t\t\t\t\t\t\t\tpositionArray[ posIndex + 0 ] = xVal;\n\t\t\t\t\t\t\t\tpositionArray[ posIndex + 1 ] = yVal;\n\t\t\t\t\t\t\t\tpositionArray[ posIndex + 2 ] = zVal;\n\n\t\t\t\t\t\t\t\tposIndex += 3;\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\treturn terminate;\n\n\t\t\t\t}\n\n\t\t\t}, group );\n\n\t\t\tlet indexArray;\n\t\t\tlet indices;\n\t\t\tif ( this.displayEdges ) {\n\n\t\t\t\t// fill in the index buffer to point to the corner points\n\t\t\t\tindices = new Uint8Array( [\n\t\t\t\t\t// x axis\n\t\t\t\t\t0, 4,\n\t\t\t\t\t1, 5,\n\t\t\t\t\t2, 6,\n\t\t\t\t\t3, 7,\n\n\t\t\t\t\t// y axis\n\t\t\t\t\t0, 2,\n\t\t\t\t\t1, 3,\n\t\t\t\t\t4, 6,\n\t\t\t\t\t5, 7,\n\n\t\t\t\t\t// z axis\n\t\t\t\t\t0, 1,\n\t\t\t\t\t2, 3,\n\t\t\t\t\t4, 5,\n\t\t\t\t\t6, 7,\n\t\t\t\t] );\n\n\t\t\t} else {\n\n\t\t\t\tindices = new Uint8Array( [\n\n\t\t\t\t\t// X-, X+\n\t\t\t\t\t0, 1, 2,\n\t\t\t\t\t2, 1, 3,\n\n\t\t\t\t\t4, 6, 5,\n\t\t\t\t\t6, 7, 5,\n\n\t\t\t\t\t// Y-, Y+\n\t\t\t\t\t1, 4, 5,\n\t\t\t\t\t0, 4, 1,\n\n\t\t\t\t\t2, 3, 6,\n\t\t\t\t\t3, 7, 6,\n\n\t\t\t\t\t// Z-, Z+\n\t\t\t\t\t0, 2, 4,\n\t\t\t\t\t2, 6, 4,\n\n\t\t\t\t\t1, 5, 3,\n\t\t\t\t\t3, 5, 7,\n\n\t\t\t\t] );\n\n\t\t\t}\n\n\t\t\tif ( positionArray.length > 65535 ) {\n\n\t\t\t\tindexArray = new Uint32Array( indices.length * boundsCount );\n\n\t\t\t} else {\n\n\t\t\t\tindexArray = new Uint16Array( indices.length * boundsCount );\n\n\t\t\t}\n\n\t\t\tconst indexLength = indices.length;\n\t\t\tfor ( let i = 0; i < boundsCount; i ++ ) {\n\n\t\t\t\tconst posOffset = i * 8;\n\t\t\t\tconst indexOffset = i * indexLength;\n\t\t\t\tfor ( let j = 0; j < indexLength; j ++ ) {\n\n\t\t\t\t\tindexArray[ indexOffset + j ] = posOffset + indices[ j ];\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// update the geometry\n\t\t\tgeometry.setIndex(\n\t\t\t\tnew BufferAttribute( indexArray, 1, false ),\n\t\t\t);\n\t\t\tgeometry.setAttribute(\n\t\t\t\t'position',\n\t\t\t\tnew BufferAttribute( positionArray, 3, false ),\n\t\t\t);\n\t\t\tthis.visible = true;\n\n\t\t}\n\n\t}\n\n}\n\nclass MeshBVHVisualizer extends Group {\n\n\tget color() {\n\n\t\treturn this.edgeMaterial.color;\n\n\t}\n\n\tget opacity() {\n\n\t\treturn this.edgeMaterial.opacity;\n\n\t}\n\n\tset opacity( v ) {\n\n\t\tthis.edgeMaterial.opacity = v;\n\t\tthis.meshMaterial.opacity = v;\n\n\t}\n\n\tconstructor( mesh, depth = 10 ) {\n\n\t\tsuper();\n\n\t\tthis.name = 'MeshBVHVisualizer';\n\t\tthis.depth = depth;\n\t\tthis.mesh = mesh;\n\t\tthis.displayParents = false;\n\t\tthis.displayEdges = true;\n\t\tthis._roots = [];\n\n\t\tconst edgeMaterial = new LineBasicMaterial( {\n\t\t\tcolor: 0x00FF88,\n\t\t\ttransparent: true,\n\t\t\topacity: 0.3,\n\t\t\tdepthWrite: false,\n\t\t} );\n\n\t\tconst meshMaterial = new MeshBasicMaterial( {\n\t\t\tcolor: 0x00FF88,\n\t\t\ttransparent: true,\n\t\t\topacity: 0.3,\n\t\t\tdepthWrite: false,\n\t\t} );\n\n\t\tmeshMaterial.color = edgeMaterial.color;\n\n\t\tthis.edgeMaterial = edgeMaterial;\n\t\tthis.meshMaterial = meshMaterial;\n\n\t\tthis.update();\n\n\t}\n\n\tupdate() {\n\n\t\tconst bvh = this.mesh.geometry.boundsTree;\n\t\tconst totalRoots = bvh ? bvh._roots.length : 0;\n\t\twhile ( this._roots.length > totalRoots ) {\n\n\t\t\tconst root = this._roots.pop();\n\t\t\troot.geometry.dispose();\n\t\t\tthis.remove( root );\n\n\t\t}\n\n\t\tfor ( let i = 0; i < totalRoots; i ++ ) {\n\n\t\t\tif ( i >= this._roots.length ) {\n\n\t\t\t\tconst root = new MeshBVHRootVisualizer( this.mesh, this.edgeMaterial, this.depth, i );\n\t\t\t\tthis.add( root );\n\t\t\t\tthis._roots.push( root );\n\n\t\t\t}\n\n\t\t\tconst root = this._roots[ i ];\n\t\t\troot.depth = this.depth;\n\t\t\troot.mesh = this.mesh;\n\t\t\troot.displayParents = this.displayParents;\n\t\t\troot.displayEdges = this.displayEdges;\n\t\t\troot.material = this.displayEdges ? this.edgeMaterial : this.meshMaterial;\n\t\t\troot.update();\n\n\t\t}\n\n\t}\n\n\tupdateMatrixWorld( ...args ) {\n\n\t\tthis.position.copy( this.mesh.position );\n\t\tthis.rotation.copy( this.mesh.rotation );\n\t\tthis.scale.copy( this.mesh.scale );\n\n\t\tsuper.updateMatrixWorld( ...args );\n\n\t}\n\n\tcopy( source ) {\n\n\t\tthis.depth = source.depth;\n\t\tthis.mesh = source.mesh;\n\n\t}\n\n\tclone() {\n\n\t\treturn new MeshBVHVisualizer( this.mesh, this.depth );\n\n\t}\n\n\tdispose() {\n\n\t\tthis.edgeMaterial.dispose();\n\t\tthis.meshMaterial.dispose();\n\n\t\tconst children = this.children;\n\t\tfor ( let i = 0, l = children.length; i < l; i ++ ) {\n\n\t\t\tchildren[ i ].geometry.dispose();\n\n\t\t}\n\n\t}\n\n}\n\n\nexport { MeshBVHVisualizer };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}