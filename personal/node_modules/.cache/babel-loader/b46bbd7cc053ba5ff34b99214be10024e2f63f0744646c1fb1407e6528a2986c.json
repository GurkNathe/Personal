{"ast":null,"code":"import { Loader, FileLoader, TextureLoader, LoaderUtils, Color, Matrix4, RepeatWrapping, ClampToEdgeWrapping, MirroredRepeatWrapping, LinearFilter, LinearMipmapLinearFilter, NearestFilter, BufferGeometry, Float32BufferAttribute, Mesh, MeshPhongMaterial, BufferAttribute, Group, MeshStandardMaterial } from \"three\";\nimport { unzipSync } from \"fflate\";\nclass ThreeMFLoader extends Loader {\n  constructor(manager) {\n    super(manager);\n    this.availableExtensions = [];\n  }\n  load(url, onLoad, onProgress, onError) {\n    const scope = this;\n    const loader = new FileLoader(scope.manager);\n    loader.setPath(scope.path);\n    loader.setResponseType(\"arraybuffer\");\n    loader.setRequestHeader(scope.requestHeader);\n    loader.setWithCredentials(scope.withCredentials);\n    loader.load(url, function (buffer) {\n      try {\n        onLoad(scope.parse(buffer));\n      } catch (e) {\n        if (onError) {\n          onError(e);\n        } else {\n          console.error(e);\n        }\n        scope.manager.itemError(url);\n      }\n    }, onProgress, onError);\n  }\n  parse(data) {\n    const scope = this;\n    const textureLoader = new TextureLoader(this.manager);\n    function loadDocument(data2) {\n      let zip = null;\n      let file = null;\n      let relsName;\n      let modelRelsName;\n      const modelPartNames = [];\n      const printTicketPartNames = [];\n      const texturesPartNames = [];\n      const otherPartNames = [];\n      let modelRels;\n      const modelParts = {};\n      const printTicketParts = {};\n      const texturesParts = {};\n      const otherParts = {};\n      try {\n        zip = unzipSync(new Uint8Array(data2));\n      } catch (e) {\n        if (e instanceof ReferenceError) {\n          console.error(\"THREE.3MFLoader: fflate missing and file is compressed.\");\n          return null;\n        }\n      }\n      for (file in zip) {\n        if (file.match(/\\_rels\\/.rels$/)) {\n          relsName = file;\n        } else if (file.match(/3D\\/_rels\\/.*\\.model\\.rels$/)) {\n          modelRelsName = file;\n        } else if (file.match(/^3D\\/.*\\.model$/)) {\n          modelPartNames.push(file);\n        } else if (file.match(/^3D\\/Metadata\\/.*\\.xml$/)) {\n          printTicketPartNames.push(file);\n        } else if (file.match(/^3D\\/Textures?\\/.*/)) {\n          texturesPartNames.push(file);\n        } else if (file.match(/^3D\\/Other\\/.*/)) {\n          otherPartNames.push(file);\n        }\n      }\n      const relsView = zip[relsName];\n      const relsFileText = LoaderUtils.decodeText(relsView);\n      const rels = parseRelsXml(relsFileText);\n      if (modelRelsName) {\n        const relsView2 = zip[modelRelsName];\n        const relsFileText2 = LoaderUtils.decodeText(relsView2);\n        modelRels = parseRelsXml(relsFileText2);\n      }\n      for (let i = 0; i < modelPartNames.length; i++) {\n        const modelPart = modelPartNames[i];\n        const view = zip[modelPart];\n        const fileText = LoaderUtils.decodeText(view);\n        const xmlData = new DOMParser().parseFromString(fileText, \"application/xml\");\n        if (xmlData.documentElement.nodeName.toLowerCase() !== \"model\") {\n          console.error(\"THREE.3MFLoader: Error loading 3MF - no 3MF document found: \", modelPart);\n        }\n        const modelNode = xmlData.querySelector(\"model\");\n        const extensions = {};\n        for (let i2 = 0; i2 < modelNode.attributes.length; i2++) {\n          const attr = modelNode.attributes[i2];\n          if (attr.name.match(/^xmlns:(.+)$/)) {\n            extensions[attr.value] = RegExp.$1;\n          }\n        }\n        const modelData = parseModelNode(modelNode);\n        modelData[\"xml\"] = modelNode;\n        if (0 < Object.keys(extensions).length) {\n          modelData[\"extensions\"] = extensions;\n        }\n        modelParts[modelPart] = modelData;\n      }\n      for (let i = 0; i < texturesPartNames.length; i++) {\n        const texturesPartName = texturesPartNames[i];\n        texturesParts[texturesPartName] = zip[texturesPartName].buffer;\n      }\n      return {\n        rels,\n        modelRels,\n        model: modelParts,\n        printTicket: printTicketParts,\n        texture: texturesParts,\n        other: otherParts\n      };\n    }\n    function parseRelsXml(relsFileText) {\n      const relationships = [];\n      const relsXmlData = new DOMParser().parseFromString(relsFileText, \"application/xml\");\n      const relsNodes = relsXmlData.querySelectorAll(\"Relationship\");\n      for (let i = 0; i < relsNodes.length; i++) {\n        const relsNode = relsNodes[i];\n        const relationship = {\n          target: relsNode.getAttribute(\"Target\"),\n          //required\n          id: relsNode.getAttribute(\"Id\"),\n          //required\n          type: relsNode.getAttribute(\"Type\")\n          //required\n        };\n\n        relationships.push(relationship);\n      }\n      return relationships;\n    }\n    function parseMetadataNodes(metadataNodes) {\n      const metadataData = {};\n      for (let i = 0; i < metadataNodes.length; i++) {\n        const metadataNode = metadataNodes[i];\n        const name = metadataNode.getAttribute(\"name\");\n        const validNames = [\"Title\", \"Designer\", \"Description\", \"Copyright\", \"LicenseTerms\", \"Rating\", \"CreationDate\", \"ModificationDate\"];\n        if (0 <= validNames.indexOf(name)) {\n          metadataData[name] = metadataNode.textContent;\n        }\n      }\n      return metadataData;\n    }\n    function parseBasematerialsNode(basematerialsNode) {\n      const basematerialsData = {\n        id: basematerialsNode.getAttribute(\"id\"),\n        // required\n        basematerials: []\n      };\n      const basematerialNodes = basematerialsNode.querySelectorAll(\"base\");\n      for (let i = 0; i < basematerialNodes.length; i++) {\n        const basematerialNode = basematerialNodes[i];\n        const basematerialData = parseBasematerialNode(basematerialNode);\n        basematerialData.index = i;\n        basematerialsData.basematerials.push(basematerialData);\n      }\n      return basematerialsData;\n    }\n    function parseTexture2DNode(texture2DNode) {\n      const texture2dData = {\n        id: texture2DNode.getAttribute(\"id\"),\n        // required\n        path: texture2DNode.getAttribute(\"path\"),\n        // required\n        contenttype: texture2DNode.getAttribute(\"contenttype\"),\n        // required\n        tilestyleu: texture2DNode.getAttribute(\"tilestyleu\"),\n        tilestylev: texture2DNode.getAttribute(\"tilestylev\"),\n        filter: texture2DNode.getAttribute(\"filter\")\n      };\n      return texture2dData;\n    }\n    function parseTextures2DGroupNode(texture2DGroupNode) {\n      const texture2DGroupData = {\n        id: texture2DGroupNode.getAttribute(\"id\"),\n        // required\n        texid: texture2DGroupNode.getAttribute(\"texid\"),\n        // required\n        displaypropertiesid: texture2DGroupNode.getAttribute(\"displaypropertiesid\")\n      };\n      const tex2coordNodes = texture2DGroupNode.querySelectorAll(\"tex2coord\");\n      const uvs = [];\n      for (let i = 0; i < tex2coordNodes.length; i++) {\n        const tex2coordNode = tex2coordNodes[i];\n        const u = tex2coordNode.getAttribute(\"u\");\n        const v = tex2coordNode.getAttribute(\"v\");\n        uvs.push(parseFloat(u), parseFloat(v));\n      }\n      texture2DGroupData[\"uvs\"] = new Float32Array(uvs);\n      return texture2DGroupData;\n    }\n    function parseColorGroupNode(colorGroupNode) {\n      const colorGroupData = {\n        id: colorGroupNode.getAttribute(\"id\"),\n        // required\n        displaypropertiesid: colorGroupNode.getAttribute(\"displaypropertiesid\")\n      };\n      const colorNodes = colorGroupNode.querySelectorAll(\"color\");\n      const colors = [];\n      const colorObject = new Color();\n      for (let i = 0; i < colorNodes.length; i++) {\n        const colorNode = colorNodes[i];\n        const color = colorNode.getAttribute(\"color\");\n        colorObject.setStyle(color.substring(0, 7));\n        colorObject.convertSRGBToLinear();\n        colors.push(colorObject.r, colorObject.g, colorObject.b);\n      }\n      colorGroupData[\"colors\"] = new Float32Array(colors);\n      return colorGroupData;\n    }\n    function parseMetallicDisplaypropertiesNode(metallicDisplaypropetiesNode) {\n      const metallicDisplaypropertiesData = {\n        id: metallicDisplaypropetiesNode.getAttribute(\"id\")\n        // required\n      };\n\n      const metallicNodes = metallicDisplaypropetiesNode.querySelectorAll(\"pbmetallic\");\n      const metallicData = [];\n      for (let i = 0; i < metallicNodes.length; i++) {\n        const metallicNode = metallicNodes[i];\n        metallicData.push({\n          name: metallicNode.getAttribute(\"name\"),\n          // required\n          metallicness: parseFloat(metallicNode.getAttribute(\"metallicness\")),\n          // required\n          roughness: parseFloat(metallicNode.getAttribute(\"roughness\"))\n          // required\n        });\n      }\n\n      metallicDisplaypropertiesData.data = metallicData;\n      return metallicDisplaypropertiesData;\n    }\n    function parseBasematerialNode(basematerialNode) {\n      const basematerialData = {};\n      basematerialData[\"name\"] = basematerialNode.getAttribute(\"name\");\n      basematerialData[\"displaycolor\"] = basematerialNode.getAttribute(\"displaycolor\");\n      basematerialData[\"displaypropertiesid\"] = basematerialNode.getAttribute(\"displaypropertiesid\");\n      return basematerialData;\n    }\n    function parseMeshNode(meshNode) {\n      const meshData = {};\n      const vertices = [];\n      const vertexNodes = meshNode.querySelectorAll(\"vertices vertex\");\n      for (let i = 0; i < vertexNodes.length; i++) {\n        const vertexNode = vertexNodes[i];\n        const x = vertexNode.getAttribute(\"x\");\n        const y = vertexNode.getAttribute(\"y\");\n        const z = vertexNode.getAttribute(\"z\");\n        vertices.push(parseFloat(x), parseFloat(y), parseFloat(z));\n      }\n      meshData[\"vertices\"] = new Float32Array(vertices);\n      const triangleProperties = [];\n      const triangles = [];\n      const triangleNodes = meshNode.querySelectorAll(\"triangles triangle\");\n      for (let i = 0; i < triangleNodes.length; i++) {\n        const triangleNode = triangleNodes[i];\n        const v1 = triangleNode.getAttribute(\"v1\");\n        const v2 = triangleNode.getAttribute(\"v2\");\n        const v3 = triangleNode.getAttribute(\"v3\");\n        const p1 = triangleNode.getAttribute(\"p1\");\n        const p2 = triangleNode.getAttribute(\"p2\");\n        const p3 = triangleNode.getAttribute(\"p3\");\n        const pid = triangleNode.getAttribute(\"pid\");\n        const triangleProperty = {};\n        triangleProperty[\"v1\"] = parseInt(v1, 10);\n        triangleProperty[\"v2\"] = parseInt(v2, 10);\n        triangleProperty[\"v3\"] = parseInt(v3, 10);\n        triangles.push(triangleProperty[\"v1\"], triangleProperty[\"v2\"], triangleProperty[\"v3\"]);\n        if (p1) {\n          triangleProperty[\"p1\"] = parseInt(p1, 10);\n        }\n        if (p2) {\n          triangleProperty[\"p2\"] = parseInt(p2, 10);\n        }\n        if (p3) {\n          triangleProperty[\"p3\"] = parseInt(p3, 10);\n        }\n        if (pid) {\n          triangleProperty[\"pid\"] = pid;\n        }\n        if (0 < Object.keys(triangleProperty).length) {\n          triangleProperties.push(triangleProperty);\n        }\n      }\n      meshData[\"triangleProperties\"] = triangleProperties;\n      meshData[\"triangles\"] = new Uint32Array(triangles);\n      return meshData;\n    }\n    function parseComponentsNode(componentsNode) {\n      const components = [];\n      const componentNodes = componentsNode.querySelectorAll(\"component\");\n      for (let i = 0; i < componentNodes.length; i++) {\n        const componentNode = componentNodes[i];\n        const componentData = parseComponentNode(componentNode);\n        components.push(componentData);\n      }\n      return components;\n    }\n    function parseComponentNode(componentNode) {\n      const componentData = {};\n      componentData[\"objectId\"] = componentNode.getAttribute(\"objectid\");\n      const transform = componentNode.getAttribute(\"transform\");\n      if (transform) {\n        componentData[\"transform\"] = parseTransform(transform);\n      }\n      return componentData;\n    }\n    function parseTransform(transform) {\n      const t = [];\n      transform.split(\" \").forEach(function (s) {\n        t.push(parseFloat(s));\n      });\n      const matrix = new Matrix4();\n      matrix.set(t[0], t[3], t[6], t[9], t[1], t[4], t[7], t[10], t[2], t[5], t[8], t[11], 0, 0, 0, 1);\n      return matrix;\n    }\n    function parseObjectNode(objectNode) {\n      const objectData = {\n        type: objectNode.getAttribute(\"type\")\n      };\n      const id = objectNode.getAttribute(\"id\");\n      if (id) {\n        objectData[\"id\"] = id;\n      }\n      const pid = objectNode.getAttribute(\"pid\");\n      if (pid) {\n        objectData[\"pid\"] = pid;\n      }\n      const pindex = objectNode.getAttribute(\"pindex\");\n      if (pindex) {\n        objectData[\"pindex\"] = pindex;\n      }\n      const thumbnail = objectNode.getAttribute(\"thumbnail\");\n      if (thumbnail) {\n        objectData[\"thumbnail\"] = thumbnail;\n      }\n      const partnumber = objectNode.getAttribute(\"partnumber\");\n      if (partnumber) {\n        objectData[\"partnumber\"] = partnumber;\n      }\n      const name = objectNode.getAttribute(\"name\");\n      if (name) {\n        objectData[\"name\"] = name;\n      }\n      const meshNode = objectNode.querySelector(\"mesh\");\n      if (meshNode) {\n        objectData[\"mesh\"] = parseMeshNode(meshNode);\n      }\n      const componentsNode = objectNode.querySelector(\"components\");\n      if (componentsNode) {\n        objectData[\"components\"] = parseComponentsNode(componentsNode);\n      }\n      return objectData;\n    }\n    function parseResourcesNode(resourcesNode) {\n      const resourcesData = {};\n      resourcesData[\"basematerials\"] = {};\n      const basematerialsNodes = resourcesNode.querySelectorAll(\"basematerials\");\n      for (let i = 0; i < basematerialsNodes.length; i++) {\n        const basematerialsNode = basematerialsNodes[i];\n        const basematerialsData = parseBasematerialsNode(basematerialsNode);\n        resourcesData[\"basematerials\"][basematerialsData[\"id\"]] = basematerialsData;\n      }\n      resourcesData[\"texture2d\"] = {};\n      const textures2DNodes = resourcesNode.querySelectorAll(\"texture2d\");\n      for (let i = 0; i < textures2DNodes.length; i++) {\n        const textures2DNode = textures2DNodes[i];\n        const texture2DData = parseTexture2DNode(textures2DNode);\n        resourcesData[\"texture2d\"][texture2DData[\"id\"]] = texture2DData;\n      }\n      resourcesData[\"colorgroup\"] = {};\n      const colorGroupNodes = resourcesNode.querySelectorAll(\"colorgroup\");\n      for (let i = 0; i < colorGroupNodes.length; i++) {\n        const colorGroupNode = colorGroupNodes[i];\n        const colorGroupData = parseColorGroupNode(colorGroupNode);\n        resourcesData[\"colorgroup\"][colorGroupData[\"id\"]] = colorGroupData;\n      }\n      resourcesData[\"pbmetallicdisplayproperties\"] = {};\n      const pbmetallicdisplaypropertiesNodes = resourcesNode.querySelectorAll(\"pbmetallicdisplayproperties\");\n      for (let i = 0; i < pbmetallicdisplaypropertiesNodes.length; i++) {\n        const pbmetallicdisplaypropertiesNode = pbmetallicdisplaypropertiesNodes[i];\n        const pbmetallicdisplaypropertiesData = parseMetallicDisplaypropertiesNode(pbmetallicdisplaypropertiesNode);\n        resourcesData[\"pbmetallicdisplayproperties\"][pbmetallicdisplaypropertiesData[\"id\"]] = pbmetallicdisplaypropertiesData;\n      }\n      resourcesData[\"texture2dgroup\"] = {};\n      const textures2DGroupNodes = resourcesNode.querySelectorAll(\"texture2dgroup\");\n      for (let i = 0; i < textures2DGroupNodes.length; i++) {\n        const textures2DGroupNode = textures2DGroupNodes[i];\n        const textures2DGroupData = parseTextures2DGroupNode(textures2DGroupNode);\n        resourcesData[\"texture2dgroup\"][textures2DGroupData[\"id\"]] = textures2DGroupData;\n      }\n      resourcesData[\"object\"] = {};\n      const objectNodes = resourcesNode.querySelectorAll(\"object\");\n      for (let i = 0; i < objectNodes.length; i++) {\n        const objectNode = objectNodes[i];\n        const objectData = parseObjectNode(objectNode);\n        resourcesData[\"object\"][objectData[\"id\"]] = objectData;\n      }\n      return resourcesData;\n    }\n    function parseBuildNode(buildNode) {\n      const buildData = [];\n      const itemNodes = buildNode.querySelectorAll(\"item\");\n      for (let i = 0; i < itemNodes.length; i++) {\n        const itemNode = itemNodes[i];\n        const buildItem = {\n          objectId: itemNode.getAttribute(\"objectid\")\n        };\n        const transform = itemNode.getAttribute(\"transform\");\n        if (transform) {\n          buildItem[\"transform\"] = parseTransform(transform);\n        }\n        buildData.push(buildItem);\n      }\n      return buildData;\n    }\n    function parseModelNode(modelNode) {\n      const modelData = {\n        unit: modelNode.getAttribute(\"unit\") || \"millimeter\"\n      };\n      const metadataNodes = modelNode.querySelectorAll(\"metadata\");\n      if (metadataNodes) {\n        modelData[\"metadata\"] = parseMetadataNodes(metadataNodes);\n      }\n      const resourcesNode = modelNode.querySelector(\"resources\");\n      if (resourcesNode) {\n        modelData[\"resources\"] = parseResourcesNode(resourcesNode);\n      }\n      const buildNode = modelNode.querySelector(\"build\");\n      if (buildNode) {\n        modelData[\"build\"] = parseBuildNode(buildNode);\n      }\n      return modelData;\n    }\n    function buildTexture(texture2dgroup, objects2, modelData, textureData) {\n      const texid = texture2dgroup.texid;\n      const texture2ds = modelData.resources.texture2d;\n      const texture2d = texture2ds[texid];\n      if (texture2d) {\n        const data2 = textureData[texture2d.path];\n        const type = texture2d.contenttype;\n        const blob = new Blob([data2], {\n          type\n        });\n        const sourceURI = URL.createObjectURL(blob);\n        const texture = textureLoader.load(sourceURI, function () {\n          URL.revokeObjectURL(sourceURI);\n        });\n        if (\"colorSpace\" in texture) texture.colorSpace = \"srgb\";else texture.encoding = 3001;\n        switch (texture2d.tilestyleu) {\n          case \"wrap\":\n            texture.wrapS = RepeatWrapping;\n            break;\n          case \"mirror\":\n            texture.wrapS = MirroredRepeatWrapping;\n            break;\n          case \"none\":\n          case \"clamp\":\n            texture.wrapS = ClampToEdgeWrapping;\n            break;\n          default:\n            texture.wrapS = RepeatWrapping;\n        }\n        switch (texture2d.tilestylev) {\n          case \"wrap\":\n            texture.wrapT = RepeatWrapping;\n            break;\n          case \"mirror\":\n            texture.wrapT = MirroredRepeatWrapping;\n            break;\n          case \"none\":\n          case \"clamp\":\n            texture.wrapT = ClampToEdgeWrapping;\n            break;\n          default:\n            texture.wrapT = RepeatWrapping;\n        }\n        switch (texture2d.filter) {\n          case \"auto\":\n            texture.magFilter = LinearFilter;\n            texture.minFilter = LinearMipmapLinearFilter;\n            break;\n          case \"linear\":\n            texture.magFilter = LinearFilter;\n            texture.minFilter = LinearFilter;\n            break;\n          case \"nearest\":\n            texture.magFilter = NearestFilter;\n            texture.minFilter = NearestFilter;\n            break;\n          default:\n            texture.magFilter = LinearFilter;\n            texture.minFilter = LinearMipmapLinearFilter;\n        }\n        return texture;\n      } else {\n        return null;\n      }\n    }\n    function buildBasematerialsMeshes(basematerials, triangleProperties, meshData, objects2, modelData, textureData, objectData) {\n      const objectPindex = objectData.pindex;\n      const materialMap = {};\n      for (let i = 0, l = triangleProperties.length; i < l; i++) {\n        const triangleProperty = triangleProperties[i];\n        const pindex = triangleProperty.p1 !== void 0 ? triangleProperty.p1 : objectPindex;\n        if (materialMap[pindex] === void 0) materialMap[pindex] = [];\n        materialMap[pindex].push(triangleProperty);\n      }\n      const keys = Object.keys(materialMap);\n      const meshes = [];\n      for (let i = 0, l = keys.length; i < l; i++) {\n        const materialIndex = keys[i];\n        const trianglePropertiesProps = materialMap[materialIndex];\n        const basematerialData = basematerials.basematerials[materialIndex];\n        const material = getBuild(basematerialData, objects2, modelData, textureData, objectData, buildBasematerial);\n        const geometry = new BufferGeometry();\n        const positionData = [];\n        const vertices = meshData.vertices;\n        for (let j = 0, jl = trianglePropertiesProps.length; j < jl; j++) {\n          const triangleProperty = trianglePropertiesProps[j];\n          positionData.push(vertices[triangleProperty.v1 * 3 + 0]);\n          positionData.push(vertices[triangleProperty.v1 * 3 + 1]);\n          positionData.push(vertices[triangleProperty.v1 * 3 + 2]);\n          positionData.push(vertices[triangleProperty.v2 * 3 + 0]);\n          positionData.push(vertices[triangleProperty.v2 * 3 + 1]);\n          positionData.push(vertices[triangleProperty.v2 * 3 + 2]);\n          positionData.push(vertices[triangleProperty.v3 * 3 + 0]);\n          positionData.push(vertices[triangleProperty.v3 * 3 + 1]);\n          positionData.push(vertices[triangleProperty.v3 * 3 + 2]);\n        }\n        geometry.setAttribute(\"position\", new Float32BufferAttribute(positionData, 3));\n        const mesh = new Mesh(geometry, material);\n        meshes.push(mesh);\n      }\n      return meshes;\n    }\n    function buildTexturedMesh(texture2dgroup, triangleProperties, meshData, objects2, modelData, textureData, objectData) {\n      const geometry = new BufferGeometry();\n      const positionData = [];\n      const uvData = [];\n      const vertices = meshData.vertices;\n      const uvs = texture2dgroup.uvs;\n      for (let i = 0, l = triangleProperties.length; i < l; i++) {\n        const triangleProperty = triangleProperties[i];\n        positionData.push(vertices[triangleProperty.v1 * 3 + 0]);\n        positionData.push(vertices[triangleProperty.v1 * 3 + 1]);\n        positionData.push(vertices[triangleProperty.v1 * 3 + 2]);\n        positionData.push(vertices[triangleProperty.v2 * 3 + 0]);\n        positionData.push(vertices[triangleProperty.v2 * 3 + 1]);\n        positionData.push(vertices[triangleProperty.v2 * 3 + 2]);\n        positionData.push(vertices[triangleProperty.v3 * 3 + 0]);\n        positionData.push(vertices[triangleProperty.v3 * 3 + 1]);\n        positionData.push(vertices[triangleProperty.v3 * 3 + 2]);\n        uvData.push(uvs[triangleProperty.p1 * 2 + 0]);\n        uvData.push(uvs[triangleProperty.p1 * 2 + 1]);\n        uvData.push(uvs[triangleProperty.p2 * 2 + 0]);\n        uvData.push(uvs[triangleProperty.p2 * 2 + 1]);\n        uvData.push(uvs[triangleProperty.p3 * 2 + 0]);\n        uvData.push(uvs[triangleProperty.p3 * 2 + 1]);\n      }\n      geometry.setAttribute(\"position\", new Float32BufferAttribute(positionData, 3));\n      geometry.setAttribute(\"uv\", new Float32BufferAttribute(uvData, 2));\n      const texture = getBuild(texture2dgroup, objects2, modelData, textureData, objectData, buildTexture);\n      const material = new MeshPhongMaterial({\n        map: texture,\n        flatShading: true\n      });\n      const mesh = new Mesh(geometry, material);\n      return mesh;\n    }\n    function buildVertexColorMesh(colorgroup, triangleProperties, meshData, objects2, modelData, objectData) {\n      const geometry = new BufferGeometry();\n      const positionData = [];\n      const colorData = [];\n      const vertices = meshData.vertices;\n      const colors = colorgroup.colors;\n      for (let i = 0, l = triangleProperties.length; i < l; i++) {\n        const triangleProperty = triangleProperties[i];\n        const v1 = triangleProperty.v1;\n        const v2 = triangleProperty.v2;\n        const v3 = triangleProperty.v3;\n        positionData.push(vertices[v1 * 3 + 0]);\n        positionData.push(vertices[v1 * 3 + 1]);\n        positionData.push(vertices[v1 * 3 + 2]);\n        positionData.push(vertices[v2 * 3 + 0]);\n        positionData.push(vertices[v2 * 3 + 1]);\n        positionData.push(vertices[v2 * 3 + 2]);\n        positionData.push(vertices[v3 * 3 + 0]);\n        positionData.push(vertices[v3 * 3 + 1]);\n        positionData.push(vertices[v3 * 3 + 2]);\n        const p1 = triangleProperty.p1 !== void 0 ? triangleProperty.p1 : objectData.pindex;\n        const p2 = triangleProperty.p2 !== void 0 ? triangleProperty.p2 : p1;\n        const p3 = triangleProperty.p3 !== void 0 ? triangleProperty.p3 : p1;\n        colorData.push(colors[p1 * 3 + 0]);\n        colorData.push(colors[p1 * 3 + 1]);\n        colorData.push(colors[p1 * 3 + 2]);\n        colorData.push(colors[p2 * 3 + 0]);\n        colorData.push(colors[p2 * 3 + 1]);\n        colorData.push(colors[p2 * 3 + 2]);\n        colorData.push(colors[p3 * 3 + 0]);\n        colorData.push(colors[p3 * 3 + 1]);\n        colorData.push(colors[p3 * 3 + 2]);\n      }\n      geometry.setAttribute(\"position\", new Float32BufferAttribute(positionData, 3));\n      geometry.setAttribute(\"color\", new Float32BufferAttribute(colorData, 3));\n      const material = new MeshPhongMaterial({\n        vertexColors: true,\n        flatShading: true\n      });\n      const mesh = new Mesh(geometry, material);\n      return mesh;\n    }\n    function buildDefaultMesh(meshData) {\n      const geometry = new BufferGeometry();\n      geometry.setIndex(new BufferAttribute(meshData[\"triangles\"], 1));\n      geometry.setAttribute(\"position\", new BufferAttribute(meshData[\"vertices\"], 3));\n      const material = new MeshPhongMaterial({\n        color: 11184895,\n        flatShading: true\n      });\n      const mesh = new Mesh(geometry, material);\n      return mesh;\n    }\n    function buildMeshes(resourceMap, meshData, objects2, modelData, textureData, objectData) {\n      const keys = Object.keys(resourceMap);\n      const meshes = [];\n      for (let i = 0, il = keys.length; i < il; i++) {\n        const resourceId = keys[i];\n        const triangleProperties = resourceMap[resourceId];\n        const resourceType = getResourceType(resourceId, modelData);\n        switch (resourceType) {\n          case \"material\":\n            const basematerials = modelData.resources.basematerials[resourceId];\n            const newMeshes = buildBasematerialsMeshes(basematerials, triangleProperties, meshData, objects2, modelData, textureData, objectData);\n            for (let j = 0, jl = newMeshes.length; j < jl; j++) {\n              meshes.push(newMeshes[j]);\n            }\n            break;\n          case \"texture\":\n            const texture2dgroup = modelData.resources.texture2dgroup[resourceId];\n            meshes.push(buildTexturedMesh(texture2dgroup, triangleProperties, meshData, objects2, modelData, textureData, objectData));\n            break;\n          case \"vertexColors\":\n            const colorgroup = modelData.resources.colorgroup[resourceId];\n            meshes.push(buildVertexColorMesh(colorgroup, triangleProperties, meshData, objects2, modelData, objectData));\n            break;\n          case \"default\":\n            meshes.push(buildDefaultMesh(meshData));\n            break;\n          default:\n            console.error(\"THREE.3MFLoader: Unsupported resource type.\");\n        }\n      }\n      return meshes;\n    }\n    function getResourceType(pid, modelData) {\n      if (modelData.resources.texture2dgroup[pid] !== void 0) {\n        return \"texture\";\n      } else if (modelData.resources.basematerials[pid] !== void 0) {\n        return \"material\";\n      } else if (modelData.resources.colorgroup[pid] !== void 0) {\n        return \"vertexColors\";\n      } else if (pid === \"default\") {\n        return \"default\";\n      } else {\n        return void 0;\n      }\n    }\n    function analyzeObject(modelData, meshData, objectData) {\n      const resourceMap = {};\n      const triangleProperties = meshData[\"triangleProperties\"];\n      const objectPid = objectData.pid;\n      for (let i = 0, l = triangleProperties.length; i < l; i++) {\n        const triangleProperty = triangleProperties[i];\n        let pid = triangleProperty.pid !== void 0 ? triangleProperty.pid : objectPid;\n        if (pid === void 0) pid = \"default\";\n        if (resourceMap[pid] === void 0) resourceMap[pid] = [];\n        resourceMap[pid].push(triangleProperty);\n      }\n      return resourceMap;\n    }\n    function buildGroup(meshData, objects2, modelData, textureData, objectData) {\n      const group = new Group();\n      const resourceMap = analyzeObject(modelData, meshData, objectData);\n      const meshes = buildMeshes(resourceMap, meshData, objects2, modelData, textureData, objectData);\n      for (let i = 0, l = meshes.length; i < l; i++) {\n        group.add(meshes[i]);\n      }\n      return group;\n    }\n    function applyExtensions(extensions, meshData, modelXml) {\n      if (!extensions) {\n        return;\n      }\n      const availableExtensions = [];\n      const keys = Object.keys(extensions);\n      for (let i = 0; i < keys.length; i++) {\n        const ns = keys[i];\n        for (let j = 0; j < scope.availableExtensions.length; j++) {\n          const extension = scope.availableExtensions[j];\n          if (extension.ns === ns) {\n            availableExtensions.push(extension);\n          }\n        }\n      }\n      for (let i = 0; i < availableExtensions.length; i++) {\n        const extension = availableExtensions[i];\n        extension.apply(modelXml, extensions[extension[\"ns\"]], meshData);\n      }\n    }\n    function getBuild(data2, objects2, modelData, textureData, objectData, builder) {\n      if (data2.build !== void 0) return data2.build;\n      data2.build = builder(data2, objects2, modelData, textureData, objectData);\n      return data2.build;\n    }\n    function buildBasematerial(materialData, objects2, modelData) {\n      let material;\n      const displaypropertiesid = materialData.displaypropertiesid;\n      const pbmetallicdisplayproperties = modelData.resources.pbmetallicdisplayproperties;\n      if (displaypropertiesid !== null && pbmetallicdisplayproperties[displaypropertiesid] !== void 0) {\n        const pbmetallicdisplayproperty = pbmetallicdisplayproperties[displaypropertiesid];\n        const metallicData = pbmetallicdisplayproperty.data[materialData.index];\n        material = new MeshStandardMaterial({\n          flatShading: true,\n          roughness: metallicData.roughness,\n          metalness: metallicData.metallicness\n        });\n      } else {\n        material = new MeshPhongMaterial({\n          flatShading: true\n        });\n      }\n      material.name = materialData.name;\n      const displaycolor = materialData.displaycolor;\n      const color = displaycolor.substring(0, 7);\n      material.color.setStyle(color);\n      material.color.convertSRGBToLinear();\n      if (displaycolor.length === 9) {\n        material.opacity = parseInt(displaycolor.charAt(7) + displaycolor.charAt(8), 16) / 255;\n      }\n      return material;\n    }\n    function buildComposite(compositeData, objects2, modelData, textureData) {\n      const composite = new Group();\n      for (let j = 0; j < compositeData.length; j++) {\n        const component = compositeData[j];\n        let build2 = objects2[component.objectId];\n        if (build2 === void 0) {\n          buildObject(component.objectId, objects2, modelData, textureData);\n          build2 = objects2[component.objectId];\n        }\n        const object3D = build2.clone();\n        const transform = component.transform;\n        if (transform) {\n          object3D.applyMatrix4(transform);\n        }\n        composite.add(object3D);\n      }\n      return composite;\n    }\n    function buildObject(objectId, objects2, modelData, textureData) {\n      const objectData = modelData[\"resources\"][\"object\"][objectId];\n      if (objectData[\"mesh\"]) {\n        const meshData = objectData[\"mesh\"];\n        const extensions = modelData[\"extensions\"];\n        const modelXml = modelData[\"xml\"];\n        applyExtensions(extensions, meshData, modelXml);\n        objects2[objectData.id] = getBuild(meshData, objects2, modelData, textureData, objectData, buildGroup);\n      } else {\n        const compositeData = objectData[\"components\"];\n        objects2[objectData.id] = getBuild(compositeData, objects2, modelData, textureData, objectData, buildComposite);\n      }\n    }\n    function buildObjects(data3mf2) {\n      const modelsData = data3mf2.model;\n      const modelRels = data3mf2.modelRels;\n      const objects2 = {};\n      const modelsKeys = Object.keys(modelsData);\n      const textureData = {};\n      if (modelRels) {\n        for (let i = 0, l = modelRels.length; i < l; i++) {\n          const modelRel = modelRels[i];\n          const textureKey = modelRel.target.substring(1);\n          if (data3mf2.texture[textureKey]) {\n            textureData[modelRel.target] = data3mf2.texture[textureKey];\n          }\n        }\n      }\n      for (let i = 0; i < modelsKeys.length; i++) {\n        const modelsKey = modelsKeys[i];\n        const modelData = modelsData[modelsKey];\n        const objectIds = Object.keys(modelData[\"resources\"][\"object\"]);\n        for (let j = 0; j < objectIds.length; j++) {\n          const objectId = objectIds[j];\n          buildObject(objectId, objects2, modelData, textureData);\n        }\n      }\n      return objects2;\n    }\n    function fetch3DModelPart(rels) {\n      for (let i = 0; i < rels.length; i++) {\n        const rel = rels[i];\n        const extension = rel.target.split(\".\").pop();\n        if (extension.toLowerCase() === \"model\") return rel;\n      }\n    }\n    function build(objects2, data3mf2) {\n      const group = new Group();\n      const relationship = fetch3DModelPart(data3mf2[\"rels\"]);\n      const buildData = data3mf2.model[relationship[\"target\"].substring(1)][\"build\"];\n      for (let i = 0; i < buildData.length; i++) {\n        const buildItem = buildData[i];\n        const object3D = objects2[buildItem[\"objectId\"]];\n        const transform = buildItem[\"transform\"];\n        if (transform) {\n          object3D.applyMatrix4(transform);\n        }\n        group.add(object3D);\n      }\n      return group;\n    }\n    const data3mf = loadDocument(data);\n    const objects = buildObjects(data3mf);\n    return build(objects, data3mf);\n  }\n  addExtension(extension) {\n    this.availableExtensions.push(extension);\n  }\n}\nexport { ThreeMFLoader };","map":{"version":3,"names":["Loader","FileLoader","TextureLoader","LoaderUtils","Color","Matrix4","RepeatWrapping","ClampToEdgeWrapping","MirroredRepeatWrapping","LinearFilter","LinearMipmapLinearFilter","NearestFilter","BufferGeometry","Float32BufferAttribute","Mesh","MeshPhongMaterial","BufferAttribute","Group","MeshStandardMaterial","unzipSync","ThreeMFLoader","constructor","manager","availableExtensions","load","url","onLoad","onProgress","onError","scope","loader","setPath","path","setResponseType","setRequestHeader","requestHeader","setWithCredentials","withCredentials","buffer","parse","e","console","error","itemError","data","textureLoader","loadDocument","data2","zip","file","relsName","modelRelsName","modelPartNames","printTicketPartNames","texturesPartNames","otherPartNames","modelRels","modelParts","printTicketParts","texturesParts","otherParts","Uint8Array","ReferenceError","match","push","relsView","relsFileText","decodeText","rels","parseRelsXml","relsView2","relsFileText2","i","length","modelPart","view","fileText","xmlData","DOMParser","parseFromString","documentElement","nodeName","toLowerCase","modelNode","querySelector","extensions","i2","attributes","attr","name","value","RegExp","$1","modelData","parseModelNode","Object","keys","texturesPartName","model","printTicket","texture","other","relationships","relsXmlData","relsNodes","querySelectorAll","relsNode","relationship","target","getAttribute","id","type","parseMetadataNodes","metadataNodes","metadataData","metadataNode","validNames","indexOf","textContent","parseBasematerialsNode","basematerialsNode","basematerialsData","basematerials","basematerialNodes","basematerialNode","basematerialData","parseBasematerialNode","index","parseTexture2DNode","texture2DNode","texture2dData","contenttype","tilestyleu","tilestylev","filter","parseTextures2DGroupNode","texture2DGroupNode","texture2DGroupData","texid","displaypropertiesid","tex2coordNodes","uvs","tex2coordNode","u","v","parseFloat","Float32Array","parseColorGroupNode","colorGroupNode","colorGroupData","colorNodes","colors","colorObject","colorNode","color","setStyle","substring","convertSRGBToLinear","r","g","b","parseMetallicDisplaypropertiesNode","metallicDisplaypropetiesNode","metallicDisplaypropertiesData","metallicNodes","metallicData","metallicNode","metallicness","roughness","parseMeshNode","meshNode","meshData","vertices","vertexNodes","vertexNode","x","y","z","triangleProperties","triangles","triangleNodes","triangleNode","v1","v2","v3","p1","p2","p3","pid","triangleProperty","parseInt","Uint32Array","parseComponentsNode","componentsNode","components","componentNodes","componentNode","componentData","parseComponentNode","transform","parseTransform","t","split","forEach","s","matrix","set","parseObjectNode","objectNode","objectData","pindex","thumbnail","partnumber","parseResourcesNode","resourcesNode","resourcesData","basematerialsNodes","textures2DNodes","textures2DNode","texture2DData","colorGroupNodes","pbmetallicdisplaypropertiesNodes","pbmetallicdisplaypropertiesNode","pbmetallicdisplaypropertiesData","textures2DGroupNodes","textures2DGroupNode","textures2DGroupData","objectNodes","parseBuildNode","buildNode","buildData","itemNodes","itemNode","buildItem","objectId","unit","buildTexture","texture2dgroup","objects2","textureData","texture2ds","resources","texture2d","blob","Blob","sourceURI","URL","createObjectURL","revokeObjectURL","colorSpace","encoding","wrapS","wrapT","magFilter","minFilter","buildBasematerialsMeshes","objectPindex","materialMap","l","meshes","materialIndex","trianglePropertiesProps","material","getBuild","buildBasematerial","geometry","positionData","j","jl","setAttribute","mesh","buildTexturedMesh","uvData","map","flatShading","buildVertexColorMesh","colorgroup","colorData","vertexColors","buildDefaultMesh","setIndex","buildMeshes","resourceMap","il","resourceId","resourceType","getResourceType","newMeshes","analyzeObject","objectPid","buildGroup","group","add","applyExtensions","modelXml","ns","extension","apply","builder","build","materialData","pbmetallicdisplayproperties","pbmetallicdisplayproperty","metalness","displaycolor","opacity","charAt","buildComposite","compositeData","composite","component","build2","buildObject","object3D","clone","applyMatrix4","buildObjects","data3mf2","modelsData","modelsKeys","modelRel","textureKey","modelsKey","objectIds","fetch3DModelPart","rel","pop","data3mf","objects","addExtension"],"sources":["/home/krug/Coding/JavaScript/Websites/Personal/personal/node_modules/.pnpm/three-stdlib@2.23.7_three@0.151.3/node_modules/three-stdlib/loaders/3MFLoader.js"],"sourcesContent":["import { Loader, FileLoader, TextureLoader, LoaderUtils, Color, Matrix4, RepeatWrapping, ClampToEdgeWrapping, MirroredRepeatWrapping, LinearFilter, LinearMipmapLinearFilter, NearestFilter, BufferGeometry, Float32BufferAttribute, Mesh, MeshPhongMaterial, BufferAttribute, Group, MeshStandardMaterial } from \"three\";\nimport { unzipSync } from \"fflate\";\nclass ThreeMFLoader extends Loader {\n  constructor(manager) {\n    super(manager);\n    this.availableExtensions = [];\n  }\n  load(url, onLoad, onProgress, onError) {\n    const scope = this;\n    const loader = new FileLoader(scope.manager);\n    loader.setPath(scope.path);\n    loader.setResponseType(\"arraybuffer\");\n    loader.setRequestHeader(scope.requestHeader);\n    loader.setWithCredentials(scope.withCredentials);\n    loader.load(\n      url,\n      function(buffer) {\n        try {\n          onLoad(scope.parse(buffer));\n        } catch (e) {\n          if (onError) {\n            onError(e);\n          } else {\n            console.error(e);\n          }\n          scope.manager.itemError(url);\n        }\n      },\n      onProgress,\n      onError\n    );\n  }\n  parse(data) {\n    const scope = this;\n    const textureLoader = new TextureLoader(this.manager);\n    function loadDocument(data2) {\n      let zip = null;\n      let file = null;\n      let relsName;\n      let modelRelsName;\n      const modelPartNames = [];\n      const printTicketPartNames = [];\n      const texturesPartNames = [];\n      const otherPartNames = [];\n      let modelRels;\n      const modelParts = {};\n      const printTicketParts = {};\n      const texturesParts = {};\n      const otherParts = {};\n      try {\n        zip = unzipSync(new Uint8Array(data2));\n      } catch (e) {\n        if (e instanceof ReferenceError) {\n          console.error(\"THREE.3MFLoader: fflate missing and file is compressed.\");\n          return null;\n        }\n      }\n      for (file in zip) {\n        if (file.match(/\\_rels\\/.rels$/)) {\n          relsName = file;\n        } else if (file.match(/3D\\/_rels\\/.*\\.model\\.rels$/)) {\n          modelRelsName = file;\n        } else if (file.match(/^3D\\/.*\\.model$/)) {\n          modelPartNames.push(file);\n        } else if (file.match(/^3D\\/Metadata\\/.*\\.xml$/)) {\n          printTicketPartNames.push(file);\n        } else if (file.match(/^3D\\/Textures?\\/.*/)) {\n          texturesPartNames.push(file);\n        } else if (file.match(/^3D\\/Other\\/.*/)) {\n          otherPartNames.push(file);\n        }\n      }\n      const relsView = zip[relsName];\n      const relsFileText = LoaderUtils.decodeText(relsView);\n      const rels = parseRelsXml(relsFileText);\n      if (modelRelsName) {\n        const relsView2 = zip[modelRelsName];\n        const relsFileText2 = LoaderUtils.decodeText(relsView2);\n        modelRels = parseRelsXml(relsFileText2);\n      }\n      for (let i = 0; i < modelPartNames.length; i++) {\n        const modelPart = modelPartNames[i];\n        const view = zip[modelPart];\n        const fileText = LoaderUtils.decodeText(view);\n        const xmlData = new DOMParser().parseFromString(fileText, \"application/xml\");\n        if (xmlData.documentElement.nodeName.toLowerCase() !== \"model\") {\n          console.error(\"THREE.3MFLoader: Error loading 3MF - no 3MF document found: \", modelPart);\n        }\n        const modelNode = xmlData.querySelector(\"model\");\n        const extensions = {};\n        for (let i2 = 0; i2 < modelNode.attributes.length; i2++) {\n          const attr = modelNode.attributes[i2];\n          if (attr.name.match(/^xmlns:(.+)$/)) {\n            extensions[attr.value] = RegExp.$1;\n          }\n        }\n        const modelData = parseModelNode(modelNode);\n        modelData[\"xml\"] = modelNode;\n        if (0 < Object.keys(extensions).length) {\n          modelData[\"extensions\"] = extensions;\n        }\n        modelParts[modelPart] = modelData;\n      }\n      for (let i = 0; i < texturesPartNames.length; i++) {\n        const texturesPartName = texturesPartNames[i];\n        texturesParts[texturesPartName] = zip[texturesPartName].buffer;\n      }\n      return {\n        rels,\n        modelRels,\n        model: modelParts,\n        printTicket: printTicketParts,\n        texture: texturesParts,\n        other: otherParts\n      };\n    }\n    function parseRelsXml(relsFileText) {\n      const relationships = [];\n      const relsXmlData = new DOMParser().parseFromString(relsFileText, \"application/xml\");\n      const relsNodes = relsXmlData.querySelectorAll(\"Relationship\");\n      for (let i = 0; i < relsNodes.length; i++) {\n        const relsNode = relsNodes[i];\n        const relationship = {\n          target: relsNode.getAttribute(\"Target\"),\n          //required\n          id: relsNode.getAttribute(\"Id\"),\n          //required\n          type: relsNode.getAttribute(\"Type\")\n          //required\n        };\n        relationships.push(relationship);\n      }\n      return relationships;\n    }\n    function parseMetadataNodes(metadataNodes) {\n      const metadataData = {};\n      for (let i = 0; i < metadataNodes.length; i++) {\n        const metadataNode = metadataNodes[i];\n        const name = metadataNode.getAttribute(\"name\");\n        const validNames = [\n          \"Title\",\n          \"Designer\",\n          \"Description\",\n          \"Copyright\",\n          \"LicenseTerms\",\n          \"Rating\",\n          \"CreationDate\",\n          \"ModificationDate\"\n        ];\n        if (0 <= validNames.indexOf(name)) {\n          metadataData[name] = metadataNode.textContent;\n        }\n      }\n      return metadataData;\n    }\n    function parseBasematerialsNode(basematerialsNode) {\n      const basematerialsData = {\n        id: basematerialsNode.getAttribute(\"id\"),\n        // required\n        basematerials: []\n      };\n      const basematerialNodes = basematerialsNode.querySelectorAll(\"base\");\n      for (let i = 0; i < basematerialNodes.length; i++) {\n        const basematerialNode = basematerialNodes[i];\n        const basematerialData = parseBasematerialNode(basematerialNode);\n        basematerialData.index = i;\n        basematerialsData.basematerials.push(basematerialData);\n      }\n      return basematerialsData;\n    }\n    function parseTexture2DNode(texture2DNode) {\n      const texture2dData = {\n        id: texture2DNode.getAttribute(\"id\"),\n        // required\n        path: texture2DNode.getAttribute(\"path\"),\n        // required\n        contenttype: texture2DNode.getAttribute(\"contenttype\"),\n        // required\n        tilestyleu: texture2DNode.getAttribute(\"tilestyleu\"),\n        tilestylev: texture2DNode.getAttribute(\"tilestylev\"),\n        filter: texture2DNode.getAttribute(\"filter\")\n      };\n      return texture2dData;\n    }\n    function parseTextures2DGroupNode(texture2DGroupNode) {\n      const texture2DGroupData = {\n        id: texture2DGroupNode.getAttribute(\"id\"),\n        // required\n        texid: texture2DGroupNode.getAttribute(\"texid\"),\n        // required\n        displaypropertiesid: texture2DGroupNode.getAttribute(\"displaypropertiesid\")\n      };\n      const tex2coordNodes = texture2DGroupNode.querySelectorAll(\"tex2coord\");\n      const uvs = [];\n      for (let i = 0; i < tex2coordNodes.length; i++) {\n        const tex2coordNode = tex2coordNodes[i];\n        const u = tex2coordNode.getAttribute(\"u\");\n        const v = tex2coordNode.getAttribute(\"v\");\n        uvs.push(parseFloat(u), parseFloat(v));\n      }\n      texture2DGroupData[\"uvs\"] = new Float32Array(uvs);\n      return texture2DGroupData;\n    }\n    function parseColorGroupNode(colorGroupNode) {\n      const colorGroupData = {\n        id: colorGroupNode.getAttribute(\"id\"),\n        // required\n        displaypropertiesid: colorGroupNode.getAttribute(\"displaypropertiesid\")\n      };\n      const colorNodes = colorGroupNode.querySelectorAll(\"color\");\n      const colors = [];\n      const colorObject = new Color();\n      for (let i = 0; i < colorNodes.length; i++) {\n        const colorNode = colorNodes[i];\n        const color = colorNode.getAttribute(\"color\");\n        colorObject.setStyle(color.substring(0, 7));\n        colorObject.convertSRGBToLinear();\n        colors.push(colorObject.r, colorObject.g, colorObject.b);\n      }\n      colorGroupData[\"colors\"] = new Float32Array(colors);\n      return colorGroupData;\n    }\n    function parseMetallicDisplaypropertiesNode(metallicDisplaypropetiesNode) {\n      const metallicDisplaypropertiesData = {\n        id: metallicDisplaypropetiesNode.getAttribute(\"id\")\n        // required\n      };\n      const metallicNodes = metallicDisplaypropetiesNode.querySelectorAll(\"pbmetallic\");\n      const metallicData = [];\n      for (let i = 0; i < metallicNodes.length; i++) {\n        const metallicNode = metallicNodes[i];\n        metallicData.push({\n          name: metallicNode.getAttribute(\"name\"),\n          // required\n          metallicness: parseFloat(metallicNode.getAttribute(\"metallicness\")),\n          // required\n          roughness: parseFloat(metallicNode.getAttribute(\"roughness\"))\n          // required\n        });\n      }\n      metallicDisplaypropertiesData.data = metallicData;\n      return metallicDisplaypropertiesData;\n    }\n    function parseBasematerialNode(basematerialNode) {\n      const basematerialData = {};\n      basematerialData[\"name\"] = basematerialNode.getAttribute(\"name\");\n      basematerialData[\"displaycolor\"] = basematerialNode.getAttribute(\"displaycolor\");\n      basematerialData[\"displaypropertiesid\"] = basematerialNode.getAttribute(\"displaypropertiesid\");\n      return basematerialData;\n    }\n    function parseMeshNode(meshNode) {\n      const meshData = {};\n      const vertices = [];\n      const vertexNodes = meshNode.querySelectorAll(\"vertices vertex\");\n      for (let i = 0; i < vertexNodes.length; i++) {\n        const vertexNode = vertexNodes[i];\n        const x = vertexNode.getAttribute(\"x\");\n        const y = vertexNode.getAttribute(\"y\");\n        const z = vertexNode.getAttribute(\"z\");\n        vertices.push(parseFloat(x), parseFloat(y), parseFloat(z));\n      }\n      meshData[\"vertices\"] = new Float32Array(vertices);\n      const triangleProperties = [];\n      const triangles = [];\n      const triangleNodes = meshNode.querySelectorAll(\"triangles triangle\");\n      for (let i = 0; i < triangleNodes.length; i++) {\n        const triangleNode = triangleNodes[i];\n        const v1 = triangleNode.getAttribute(\"v1\");\n        const v2 = triangleNode.getAttribute(\"v2\");\n        const v3 = triangleNode.getAttribute(\"v3\");\n        const p1 = triangleNode.getAttribute(\"p1\");\n        const p2 = triangleNode.getAttribute(\"p2\");\n        const p3 = triangleNode.getAttribute(\"p3\");\n        const pid = triangleNode.getAttribute(\"pid\");\n        const triangleProperty = {};\n        triangleProperty[\"v1\"] = parseInt(v1, 10);\n        triangleProperty[\"v2\"] = parseInt(v2, 10);\n        triangleProperty[\"v3\"] = parseInt(v3, 10);\n        triangles.push(triangleProperty[\"v1\"], triangleProperty[\"v2\"], triangleProperty[\"v3\"]);\n        if (p1) {\n          triangleProperty[\"p1\"] = parseInt(p1, 10);\n        }\n        if (p2) {\n          triangleProperty[\"p2\"] = parseInt(p2, 10);\n        }\n        if (p3) {\n          triangleProperty[\"p3\"] = parseInt(p3, 10);\n        }\n        if (pid) {\n          triangleProperty[\"pid\"] = pid;\n        }\n        if (0 < Object.keys(triangleProperty).length) {\n          triangleProperties.push(triangleProperty);\n        }\n      }\n      meshData[\"triangleProperties\"] = triangleProperties;\n      meshData[\"triangles\"] = new Uint32Array(triangles);\n      return meshData;\n    }\n    function parseComponentsNode(componentsNode) {\n      const components = [];\n      const componentNodes = componentsNode.querySelectorAll(\"component\");\n      for (let i = 0; i < componentNodes.length; i++) {\n        const componentNode = componentNodes[i];\n        const componentData = parseComponentNode(componentNode);\n        components.push(componentData);\n      }\n      return components;\n    }\n    function parseComponentNode(componentNode) {\n      const componentData = {};\n      componentData[\"objectId\"] = componentNode.getAttribute(\"objectid\");\n      const transform = componentNode.getAttribute(\"transform\");\n      if (transform) {\n        componentData[\"transform\"] = parseTransform(transform);\n      }\n      return componentData;\n    }\n    function parseTransform(transform) {\n      const t = [];\n      transform.split(\" \").forEach(function(s) {\n        t.push(parseFloat(s));\n      });\n      const matrix = new Matrix4();\n      matrix.set(t[0], t[3], t[6], t[9], t[1], t[4], t[7], t[10], t[2], t[5], t[8], t[11], 0, 0, 0, 1);\n      return matrix;\n    }\n    function parseObjectNode(objectNode) {\n      const objectData = {\n        type: objectNode.getAttribute(\"type\")\n      };\n      const id = objectNode.getAttribute(\"id\");\n      if (id) {\n        objectData[\"id\"] = id;\n      }\n      const pid = objectNode.getAttribute(\"pid\");\n      if (pid) {\n        objectData[\"pid\"] = pid;\n      }\n      const pindex = objectNode.getAttribute(\"pindex\");\n      if (pindex) {\n        objectData[\"pindex\"] = pindex;\n      }\n      const thumbnail = objectNode.getAttribute(\"thumbnail\");\n      if (thumbnail) {\n        objectData[\"thumbnail\"] = thumbnail;\n      }\n      const partnumber = objectNode.getAttribute(\"partnumber\");\n      if (partnumber) {\n        objectData[\"partnumber\"] = partnumber;\n      }\n      const name = objectNode.getAttribute(\"name\");\n      if (name) {\n        objectData[\"name\"] = name;\n      }\n      const meshNode = objectNode.querySelector(\"mesh\");\n      if (meshNode) {\n        objectData[\"mesh\"] = parseMeshNode(meshNode);\n      }\n      const componentsNode = objectNode.querySelector(\"components\");\n      if (componentsNode) {\n        objectData[\"components\"] = parseComponentsNode(componentsNode);\n      }\n      return objectData;\n    }\n    function parseResourcesNode(resourcesNode) {\n      const resourcesData = {};\n      resourcesData[\"basematerials\"] = {};\n      const basematerialsNodes = resourcesNode.querySelectorAll(\"basematerials\");\n      for (let i = 0; i < basematerialsNodes.length; i++) {\n        const basematerialsNode = basematerialsNodes[i];\n        const basematerialsData = parseBasematerialsNode(basematerialsNode);\n        resourcesData[\"basematerials\"][basematerialsData[\"id\"]] = basematerialsData;\n      }\n      resourcesData[\"texture2d\"] = {};\n      const textures2DNodes = resourcesNode.querySelectorAll(\"texture2d\");\n      for (let i = 0; i < textures2DNodes.length; i++) {\n        const textures2DNode = textures2DNodes[i];\n        const texture2DData = parseTexture2DNode(textures2DNode);\n        resourcesData[\"texture2d\"][texture2DData[\"id\"]] = texture2DData;\n      }\n      resourcesData[\"colorgroup\"] = {};\n      const colorGroupNodes = resourcesNode.querySelectorAll(\"colorgroup\");\n      for (let i = 0; i < colorGroupNodes.length; i++) {\n        const colorGroupNode = colorGroupNodes[i];\n        const colorGroupData = parseColorGroupNode(colorGroupNode);\n        resourcesData[\"colorgroup\"][colorGroupData[\"id\"]] = colorGroupData;\n      }\n      resourcesData[\"pbmetallicdisplayproperties\"] = {};\n      const pbmetallicdisplaypropertiesNodes = resourcesNode.querySelectorAll(\"pbmetallicdisplayproperties\");\n      for (let i = 0; i < pbmetallicdisplaypropertiesNodes.length; i++) {\n        const pbmetallicdisplaypropertiesNode = pbmetallicdisplaypropertiesNodes[i];\n        const pbmetallicdisplaypropertiesData = parseMetallicDisplaypropertiesNode(pbmetallicdisplaypropertiesNode);\n        resourcesData[\"pbmetallicdisplayproperties\"][pbmetallicdisplaypropertiesData[\"id\"]] = pbmetallicdisplaypropertiesData;\n      }\n      resourcesData[\"texture2dgroup\"] = {};\n      const textures2DGroupNodes = resourcesNode.querySelectorAll(\"texture2dgroup\");\n      for (let i = 0; i < textures2DGroupNodes.length; i++) {\n        const textures2DGroupNode = textures2DGroupNodes[i];\n        const textures2DGroupData = parseTextures2DGroupNode(textures2DGroupNode);\n        resourcesData[\"texture2dgroup\"][textures2DGroupData[\"id\"]] = textures2DGroupData;\n      }\n      resourcesData[\"object\"] = {};\n      const objectNodes = resourcesNode.querySelectorAll(\"object\");\n      for (let i = 0; i < objectNodes.length; i++) {\n        const objectNode = objectNodes[i];\n        const objectData = parseObjectNode(objectNode);\n        resourcesData[\"object\"][objectData[\"id\"]] = objectData;\n      }\n      return resourcesData;\n    }\n    function parseBuildNode(buildNode) {\n      const buildData = [];\n      const itemNodes = buildNode.querySelectorAll(\"item\");\n      for (let i = 0; i < itemNodes.length; i++) {\n        const itemNode = itemNodes[i];\n        const buildItem = {\n          objectId: itemNode.getAttribute(\"objectid\")\n        };\n        const transform = itemNode.getAttribute(\"transform\");\n        if (transform) {\n          buildItem[\"transform\"] = parseTransform(transform);\n        }\n        buildData.push(buildItem);\n      }\n      return buildData;\n    }\n    function parseModelNode(modelNode) {\n      const modelData = { unit: modelNode.getAttribute(\"unit\") || \"millimeter\" };\n      const metadataNodes = modelNode.querySelectorAll(\"metadata\");\n      if (metadataNodes) {\n        modelData[\"metadata\"] = parseMetadataNodes(metadataNodes);\n      }\n      const resourcesNode = modelNode.querySelector(\"resources\");\n      if (resourcesNode) {\n        modelData[\"resources\"] = parseResourcesNode(resourcesNode);\n      }\n      const buildNode = modelNode.querySelector(\"build\");\n      if (buildNode) {\n        modelData[\"build\"] = parseBuildNode(buildNode);\n      }\n      return modelData;\n    }\n    function buildTexture(texture2dgroup, objects2, modelData, textureData) {\n      const texid = texture2dgroup.texid;\n      const texture2ds = modelData.resources.texture2d;\n      const texture2d = texture2ds[texid];\n      if (texture2d) {\n        const data2 = textureData[texture2d.path];\n        const type = texture2d.contenttype;\n        const blob = new Blob([data2], { type });\n        const sourceURI = URL.createObjectURL(blob);\n        const texture = textureLoader.load(sourceURI, function() {\n          URL.revokeObjectURL(sourceURI);\n        });\n        if (\"colorSpace\" in texture)\n          texture.colorSpace = \"srgb\";\n        else\n          texture.encoding = 3001;\n        switch (texture2d.tilestyleu) {\n          case \"wrap\":\n            texture.wrapS = RepeatWrapping;\n            break;\n          case \"mirror\":\n            texture.wrapS = MirroredRepeatWrapping;\n            break;\n          case \"none\":\n          case \"clamp\":\n            texture.wrapS = ClampToEdgeWrapping;\n            break;\n          default:\n            texture.wrapS = RepeatWrapping;\n        }\n        switch (texture2d.tilestylev) {\n          case \"wrap\":\n            texture.wrapT = RepeatWrapping;\n            break;\n          case \"mirror\":\n            texture.wrapT = MirroredRepeatWrapping;\n            break;\n          case \"none\":\n          case \"clamp\":\n            texture.wrapT = ClampToEdgeWrapping;\n            break;\n          default:\n            texture.wrapT = RepeatWrapping;\n        }\n        switch (texture2d.filter) {\n          case \"auto\":\n            texture.magFilter = LinearFilter;\n            texture.minFilter = LinearMipmapLinearFilter;\n            break;\n          case \"linear\":\n            texture.magFilter = LinearFilter;\n            texture.minFilter = LinearFilter;\n            break;\n          case \"nearest\":\n            texture.magFilter = NearestFilter;\n            texture.minFilter = NearestFilter;\n            break;\n          default:\n            texture.magFilter = LinearFilter;\n            texture.minFilter = LinearMipmapLinearFilter;\n        }\n        return texture;\n      } else {\n        return null;\n      }\n    }\n    function buildBasematerialsMeshes(basematerials, triangleProperties, meshData, objects2, modelData, textureData, objectData) {\n      const objectPindex = objectData.pindex;\n      const materialMap = {};\n      for (let i = 0, l = triangleProperties.length; i < l; i++) {\n        const triangleProperty = triangleProperties[i];\n        const pindex = triangleProperty.p1 !== void 0 ? triangleProperty.p1 : objectPindex;\n        if (materialMap[pindex] === void 0)\n          materialMap[pindex] = [];\n        materialMap[pindex].push(triangleProperty);\n      }\n      const keys = Object.keys(materialMap);\n      const meshes = [];\n      for (let i = 0, l = keys.length; i < l; i++) {\n        const materialIndex = keys[i];\n        const trianglePropertiesProps = materialMap[materialIndex];\n        const basematerialData = basematerials.basematerials[materialIndex];\n        const material = getBuild(basematerialData, objects2, modelData, textureData, objectData, buildBasematerial);\n        const geometry = new BufferGeometry();\n        const positionData = [];\n        const vertices = meshData.vertices;\n        for (let j = 0, jl = trianglePropertiesProps.length; j < jl; j++) {\n          const triangleProperty = trianglePropertiesProps[j];\n          positionData.push(vertices[triangleProperty.v1 * 3 + 0]);\n          positionData.push(vertices[triangleProperty.v1 * 3 + 1]);\n          positionData.push(vertices[triangleProperty.v1 * 3 + 2]);\n          positionData.push(vertices[triangleProperty.v2 * 3 + 0]);\n          positionData.push(vertices[triangleProperty.v2 * 3 + 1]);\n          positionData.push(vertices[triangleProperty.v2 * 3 + 2]);\n          positionData.push(vertices[triangleProperty.v3 * 3 + 0]);\n          positionData.push(vertices[triangleProperty.v3 * 3 + 1]);\n          positionData.push(vertices[triangleProperty.v3 * 3 + 2]);\n        }\n        geometry.setAttribute(\"position\", new Float32BufferAttribute(positionData, 3));\n        const mesh = new Mesh(geometry, material);\n        meshes.push(mesh);\n      }\n      return meshes;\n    }\n    function buildTexturedMesh(texture2dgroup, triangleProperties, meshData, objects2, modelData, textureData, objectData) {\n      const geometry = new BufferGeometry();\n      const positionData = [];\n      const uvData = [];\n      const vertices = meshData.vertices;\n      const uvs = texture2dgroup.uvs;\n      for (let i = 0, l = triangleProperties.length; i < l; i++) {\n        const triangleProperty = triangleProperties[i];\n        positionData.push(vertices[triangleProperty.v1 * 3 + 0]);\n        positionData.push(vertices[triangleProperty.v1 * 3 + 1]);\n        positionData.push(vertices[triangleProperty.v1 * 3 + 2]);\n        positionData.push(vertices[triangleProperty.v2 * 3 + 0]);\n        positionData.push(vertices[triangleProperty.v2 * 3 + 1]);\n        positionData.push(vertices[triangleProperty.v2 * 3 + 2]);\n        positionData.push(vertices[triangleProperty.v3 * 3 + 0]);\n        positionData.push(vertices[triangleProperty.v3 * 3 + 1]);\n        positionData.push(vertices[triangleProperty.v3 * 3 + 2]);\n        uvData.push(uvs[triangleProperty.p1 * 2 + 0]);\n        uvData.push(uvs[triangleProperty.p1 * 2 + 1]);\n        uvData.push(uvs[triangleProperty.p2 * 2 + 0]);\n        uvData.push(uvs[triangleProperty.p2 * 2 + 1]);\n        uvData.push(uvs[triangleProperty.p3 * 2 + 0]);\n        uvData.push(uvs[triangleProperty.p3 * 2 + 1]);\n      }\n      geometry.setAttribute(\"position\", new Float32BufferAttribute(positionData, 3));\n      geometry.setAttribute(\"uv\", new Float32BufferAttribute(uvData, 2));\n      const texture = getBuild(texture2dgroup, objects2, modelData, textureData, objectData, buildTexture);\n      const material = new MeshPhongMaterial({ map: texture, flatShading: true });\n      const mesh = new Mesh(geometry, material);\n      return mesh;\n    }\n    function buildVertexColorMesh(colorgroup, triangleProperties, meshData, objects2, modelData, objectData) {\n      const geometry = new BufferGeometry();\n      const positionData = [];\n      const colorData = [];\n      const vertices = meshData.vertices;\n      const colors = colorgroup.colors;\n      for (let i = 0, l = triangleProperties.length; i < l; i++) {\n        const triangleProperty = triangleProperties[i];\n        const v1 = triangleProperty.v1;\n        const v2 = triangleProperty.v2;\n        const v3 = triangleProperty.v3;\n        positionData.push(vertices[v1 * 3 + 0]);\n        positionData.push(vertices[v1 * 3 + 1]);\n        positionData.push(vertices[v1 * 3 + 2]);\n        positionData.push(vertices[v2 * 3 + 0]);\n        positionData.push(vertices[v2 * 3 + 1]);\n        positionData.push(vertices[v2 * 3 + 2]);\n        positionData.push(vertices[v3 * 3 + 0]);\n        positionData.push(vertices[v3 * 3 + 1]);\n        positionData.push(vertices[v3 * 3 + 2]);\n        const p1 = triangleProperty.p1 !== void 0 ? triangleProperty.p1 : objectData.pindex;\n        const p2 = triangleProperty.p2 !== void 0 ? triangleProperty.p2 : p1;\n        const p3 = triangleProperty.p3 !== void 0 ? triangleProperty.p3 : p1;\n        colorData.push(colors[p1 * 3 + 0]);\n        colorData.push(colors[p1 * 3 + 1]);\n        colorData.push(colors[p1 * 3 + 2]);\n        colorData.push(colors[p2 * 3 + 0]);\n        colorData.push(colors[p2 * 3 + 1]);\n        colorData.push(colors[p2 * 3 + 2]);\n        colorData.push(colors[p3 * 3 + 0]);\n        colorData.push(colors[p3 * 3 + 1]);\n        colorData.push(colors[p3 * 3 + 2]);\n      }\n      geometry.setAttribute(\"position\", new Float32BufferAttribute(positionData, 3));\n      geometry.setAttribute(\"color\", new Float32BufferAttribute(colorData, 3));\n      const material = new MeshPhongMaterial({ vertexColors: true, flatShading: true });\n      const mesh = new Mesh(geometry, material);\n      return mesh;\n    }\n    function buildDefaultMesh(meshData) {\n      const geometry = new BufferGeometry();\n      geometry.setIndex(new BufferAttribute(meshData[\"triangles\"], 1));\n      geometry.setAttribute(\"position\", new BufferAttribute(meshData[\"vertices\"], 3));\n      const material = new MeshPhongMaterial({ color: 11184895, flatShading: true });\n      const mesh = new Mesh(geometry, material);\n      return mesh;\n    }\n    function buildMeshes(resourceMap, meshData, objects2, modelData, textureData, objectData) {\n      const keys = Object.keys(resourceMap);\n      const meshes = [];\n      for (let i = 0, il = keys.length; i < il; i++) {\n        const resourceId = keys[i];\n        const triangleProperties = resourceMap[resourceId];\n        const resourceType = getResourceType(resourceId, modelData);\n        switch (resourceType) {\n          case \"material\":\n            const basematerials = modelData.resources.basematerials[resourceId];\n            const newMeshes = buildBasematerialsMeshes(\n              basematerials,\n              triangleProperties,\n              meshData,\n              objects2,\n              modelData,\n              textureData,\n              objectData\n            );\n            for (let j = 0, jl = newMeshes.length; j < jl; j++) {\n              meshes.push(newMeshes[j]);\n            }\n            break;\n          case \"texture\":\n            const texture2dgroup = modelData.resources.texture2dgroup[resourceId];\n            meshes.push(\n              buildTexturedMesh(\n                texture2dgroup,\n                triangleProperties,\n                meshData,\n                objects2,\n                modelData,\n                textureData,\n                objectData\n              )\n            );\n            break;\n          case \"vertexColors\":\n            const colorgroup = modelData.resources.colorgroup[resourceId];\n            meshes.push(buildVertexColorMesh(colorgroup, triangleProperties, meshData, objects2, modelData, objectData));\n            break;\n          case \"default\":\n            meshes.push(buildDefaultMesh(meshData));\n            break;\n          default:\n            console.error(\"THREE.3MFLoader: Unsupported resource type.\");\n        }\n      }\n      return meshes;\n    }\n    function getResourceType(pid, modelData) {\n      if (modelData.resources.texture2dgroup[pid] !== void 0) {\n        return \"texture\";\n      } else if (modelData.resources.basematerials[pid] !== void 0) {\n        return \"material\";\n      } else if (modelData.resources.colorgroup[pid] !== void 0) {\n        return \"vertexColors\";\n      } else if (pid === \"default\") {\n        return \"default\";\n      } else {\n        return void 0;\n      }\n    }\n    function analyzeObject(modelData, meshData, objectData) {\n      const resourceMap = {};\n      const triangleProperties = meshData[\"triangleProperties\"];\n      const objectPid = objectData.pid;\n      for (let i = 0, l = triangleProperties.length; i < l; i++) {\n        const triangleProperty = triangleProperties[i];\n        let pid = triangleProperty.pid !== void 0 ? triangleProperty.pid : objectPid;\n        if (pid === void 0)\n          pid = \"default\";\n        if (resourceMap[pid] === void 0)\n          resourceMap[pid] = [];\n        resourceMap[pid].push(triangleProperty);\n      }\n      return resourceMap;\n    }\n    function buildGroup(meshData, objects2, modelData, textureData, objectData) {\n      const group = new Group();\n      const resourceMap = analyzeObject(modelData, meshData, objectData);\n      const meshes = buildMeshes(resourceMap, meshData, objects2, modelData, textureData, objectData);\n      for (let i = 0, l = meshes.length; i < l; i++) {\n        group.add(meshes[i]);\n      }\n      return group;\n    }\n    function applyExtensions(extensions, meshData, modelXml) {\n      if (!extensions) {\n        return;\n      }\n      const availableExtensions = [];\n      const keys = Object.keys(extensions);\n      for (let i = 0; i < keys.length; i++) {\n        const ns = keys[i];\n        for (let j = 0; j < scope.availableExtensions.length; j++) {\n          const extension = scope.availableExtensions[j];\n          if (extension.ns === ns) {\n            availableExtensions.push(extension);\n          }\n        }\n      }\n      for (let i = 0; i < availableExtensions.length; i++) {\n        const extension = availableExtensions[i];\n        extension.apply(modelXml, extensions[extension[\"ns\"]], meshData);\n      }\n    }\n    function getBuild(data2, objects2, modelData, textureData, objectData, builder) {\n      if (data2.build !== void 0)\n        return data2.build;\n      data2.build = builder(data2, objects2, modelData, textureData, objectData);\n      return data2.build;\n    }\n    function buildBasematerial(materialData, objects2, modelData) {\n      let material;\n      const displaypropertiesid = materialData.displaypropertiesid;\n      const pbmetallicdisplayproperties = modelData.resources.pbmetallicdisplayproperties;\n      if (displaypropertiesid !== null && pbmetallicdisplayproperties[displaypropertiesid] !== void 0) {\n        const pbmetallicdisplayproperty = pbmetallicdisplayproperties[displaypropertiesid];\n        const metallicData = pbmetallicdisplayproperty.data[materialData.index];\n        material = new MeshStandardMaterial({\n          flatShading: true,\n          roughness: metallicData.roughness,\n          metalness: metallicData.metallicness\n        });\n      } else {\n        material = new MeshPhongMaterial({ flatShading: true });\n      }\n      material.name = materialData.name;\n      const displaycolor = materialData.displaycolor;\n      const color = displaycolor.substring(0, 7);\n      material.color.setStyle(color);\n      material.color.convertSRGBToLinear();\n      if (displaycolor.length === 9) {\n        material.opacity = parseInt(displaycolor.charAt(7) + displaycolor.charAt(8), 16) / 255;\n      }\n      return material;\n    }\n    function buildComposite(compositeData, objects2, modelData, textureData) {\n      const composite = new Group();\n      for (let j = 0; j < compositeData.length; j++) {\n        const component = compositeData[j];\n        let build2 = objects2[component.objectId];\n        if (build2 === void 0) {\n          buildObject(component.objectId, objects2, modelData, textureData);\n          build2 = objects2[component.objectId];\n        }\n        const object3D = build2.clone();\n        const transform = component.transform;\n        if (transform) {\n          object3D.applyMatrix4(transform);\n        }\n        composite.add(object3D);\n      }\n      return composite;\n    }\n    function buildObject(objectId, objects2, modelData, textureData) {\n      const objectData = modelData[\"resources\"][\"object\"][objectId];\n      if (objectData[\"mesh\"]) {\n        const meshData = objectData[\"mesh\"];\n        const extensions = modelData[\"extensions\"];\n        const modelXml = modelData[\"xml\"];\n        applyExtensions(extensions, meshData, modelXml);\n        objects2[objectData.id] = getBuild(meshData, objects2, modelData, textureData, objectData, buildGroup);\n      } else {\n        const compositeData = objectData[\"components\"];\n        objects2[objectData.id] = getBuild(compositeData, objects2, modelData, textureData, objectData, buildComposite);\n      }\n    }\n    function buildObjects(data3mf2) {\n      const modelsData = data3mf2.model;\n      const modelRels = data3mf2.modelRels;\n      const objects2 = {};\n      const modelsKeys = Object.keys(modelsData);\n      const textureData = {};\n      if (modelRels) {\n        for (let i = 0, l = modelRels.length; i < l; i++) {\n          const modelRel = modelRels[i];\n          const textureKey = modelRel.target.substring(1);\n          if (data3mf2.texture[textureKey]) {\n            textureData[modelRel.target] = data3mf2.texture[textureKey];\n          }\n        }\n      }\n      for (let i = 0; i < modelsKeys.length; i++) {\n        const modelsKey = modelsKeys[i];\n        const modelData = modelsData[modelsKey];\n        const objectIds = Object.keys(modelData[\"resources\"][\"object\"]);\n        for (let j = 0; j < objectIds.length; j++) {\n          const objectId = objectIds[j];\n          buildObject(objectId, objects2, modelData, textureData);\n        }\n      }\n      return objects2;\n    }\n    function fetch3DModelPart(rels) {\n      for (let i = 0; i < rels.length; i++) {\n        const rel = rels[i];\n        const extension = rel.target.split(\".\").pop();\n        if (extension.toLowerCase() === \"model\")\n          return rel;\n      }\n    }\n    function build(objects2, data3mf2) {\n      const group = new Group();\n      const relationship = fetch3DModelPart(data3mf2[\"rels\"]);\n      const buildData = data3mf2.model[relationship[\"target\"].substring(1)][\"build\"];\n      for (let i = 0; i < buildData.length; i++) {\n        const buildItem = buildData[i];\n        const object3D = objects2[buildItem[\"objectId\"]];\n        const transform = buildItem[\"transform\"];\n        if (transform) {\n          object3D.applyMatrix4(transform);\n        }\n        group.add(object3D);\n      }\n      return group;\n    }\n    const data3mf = loadDocument(data);\n    const objects = buildObjects(data3mf);\n    return build(objects, data3mf);\n  }\n  addExtension(extension) {\n    this.availableExtensions.push(extension);\n  }\n}\nexport {\n  ThreeMFLoader\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}