{"ast":null,"code":"import _classCallCheck from \"/home/krug/Coding/JavaScript/Websites/Personal/personal/node_modules/.pnpm/@babel+runtime@7.22.3/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/home/krug/Coding/JavaScript/Websites/Personal/personal/node_modules/.pnpm/@babel+runtime@7.22.3/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport { Vector3, Matrix4, Line3 } from 'three';\nimport { SeparatingAxisBounds } from './SeparatingAxisBounds.js';\nimport { ExtendedTriangle } from './ExtendedTriangle.js';\nimport { closestPointsSegmentToSegment } from './MathUtilities.js';\nexport var OrientedBox = /*#__PURE__*/function () {\n  function OrientedBox(min, max, matrix) {\n    _classCallCheck(this, OrientedBox);\n    this.isOrientedBox = true;\n    this.min = new Vector3();\n    this.max = new Vector3();\n    this.matrix = new Matrix4();\n    this.invMatrix = new Matrix4();\n    this.points = new Array(8).fill().map(function () {\n      return new Vector3();\n    });\n    this.satAxes = new Array(3).fill().map(function () {\n      return new Vector3();\n    });\n    this.satBounds = new Array(3).fill().map(function () {\n      return new SeparatingAxisBounds();\n    });\n    this.alignedSatBounds = new Array(3).fill().map(function () {\n      return new SeparatingAxisBounds();\n    });\n    this.needsUpdate = false;\n    if (min) this.min.copy(min);\n    if (max) this.max.copy(max);\n    if (matrix) this.matrix.copy(matrix);\n  }\n  _createClass(OrientedBox, [{\n    key: \"set\",\n    value: function set(min, max, matrix) {\n      this.min.copy(min);\n      this.max.copy(max);\n      this.matrix.copy(matrix);\n      this.needsUpdate = true;\n    }\n  }, {\n    key: \"copy\",\n    value: function copy(other) {\n      this.min.copy(other.min);\n      this.max.copy(other.max);\n      this.matrix.copy(other.matrix);\n      this.needsUpdate = true;\n    }\n  }]);\n  return OrientedBox;\n}();\nOrientedBox.prototype.update = function () {\n  return function update() {\n    var matrix = this.matrix;\n    var min = this.min;\n    var max = this.max;\n    var points = this.points;\n    for (var x = 0; x <= 1; x++) {\n      for (var y = 0; y <= 1; y++) {\n        for (var z = 0; z <= 1; z++) {\n          var i = (1 << 0) * x | (1 << 1) * y | (1 << 2) * z;\n          var v = points[i];\n          v.x = x ? max.x : min.x;\n          v.y = y ? max.y : min.y;\n          v.z = z ? max.z : min.z;\n          v.applyMatrix4(matrix);\n        }\n      }\n    }\n    var satBounds = this.satBounds;\n    var satAxes = this.satAxes;\n    var minVec = points[0];\n    for (var _i = 0; _i < 3; _i++) {\n      var axis = satAxes[_i];\n      var sb = satBounds[_i];\n      var index = 1 << _i;\n      var pi = points[index];\n      axis.subVectors(minVec, pi);\n      sb.setFromPoints(axis, points);\n    }\n    var alignedSatBounds = this.alignedSatBounds;\n    alignedSatBounds[0].setFromPointsField(points, 'x');\n    alignedSatBounds[1].setFromPointsField(points, 'y');\n    alignedSatBounds[2].setFromPointsField(points, 'z');\n    this.invMatrix.copy(this.matrix).invert();\n    this.needsUpdate = false;\n  };\n}();\nOrientedBox.prototype.intersectsBox = function () {\n  var aabbBounds = new SeparatingAxisBounds();\n  return function intersectsBox(box) {\n    // TODO: should this be doing SAT against the AABB?\n    if (this.needsUpdate) {\n      this.update();\n    }\n    var min = box.min;\n    var max = box.max;\n    var satBounds = this.satBounds;\n    var satAxes = this.satAxes;\n    var alignedSatBounds = this.alignedSatBounds;\n    aabbBounds.min = min.x;\n    aabbBounds.max = max.x;\n    if (alignedSatBounds[0].isSeparated(aabbBounds)) return false;\n    aabbBounds.min = min.y;\n    aabbBounds.max = max.y;\n    if (alignedSatBounds[1].isSeparated(aabbBounds)) return false;\n    aabbBounds.min = min.z;\n    aabbBounds.max = max.z;\n    if (alignedSatBounds[2].isSeparated(aabbBounds)) return false;\n    for (var i = 0; i < 3; i++) {\n      var axis = satAxes[i];\n      var sb = satBounds[i];\n      aabbBounds.setFromBox(axis, box);\n      if (sb.isSeparated(aabbBounds)) return false;\n    }\n    return true;\n  };\n}();\nOrientedBox.prototype.intersectsTriangle = function () {\n  var saTri = new ExtendedTriangle();\n  var pointsArr = new Array(3);\n  var cachedSatBounds = new SeparatingAxisBounds();\n  var cachedSatBounds2 = new SeparatingAxisBounds();\n  var cachedAxis = new Vector3();\n  return function intersectsTriangle(triangle) {\n    if (this.needsUpdate) {\n      this.update();\n    }\n    if (!triangle.isExtendedTriangle) {\n      saTri.copy(triangle);\n      saTri.update();\n      triangle = saTri;\n    } else if (triangle.needsUpdate) {\n      triangle.update();\n    }\n    var satBounds = this.satBounds;\n    var satAxes = this.satAxes;\n    pointsArr[0] = triangle.a;\n    pointsArr[1] = triangle.b;\n    pointsArr[2] = triangle.c;\n    for (var i = 0; i < 3; i++) {\n      var sb = satBounds[i];\n      var sa = satAxes[i];\n      cachedSatBounds.setFromPoints(sa, pointsArr);\n      if (sb.isSeparated(cachedSatBounds)) return false;\n    }\n    var triSatBounds = triangle.satBounds;\n    var triSatAxes = triangle.satAxes;\n    var points = this.points;\n    for (var _i2 = 0; _i2 < 3; _i2++) {\n      var _sb = triSatBounds[_i2];\n      var _sa = triSatAxes[_i2];\n      cachedSatBounds.setFromPoints(_sa, points);\n      if (_sb.isSeparated(cachedSatBounds)) return false;\n    }\n\n    // check crossed axes\n    for (var _i3 = 0; _i3 < 3; _i3++) {\n      var sa1 = satAxes[_i3];\n      for (var i2 = 0; i2 < 4; i2++) {\n        var sa2 = triSatAxes[i2];\n        cachedAxis.crossVectors(sa1, sa2);\n        cachedSatBounds.setFromPoints(cachedAxis, pointsArr);\n        cachedSatBounds2.setFromPoints(cachedAxis, points);\n        if (cachedSatBounds.isSeparated(cachedSatBounds2)) return false;\n      }\n    }\n    return true;\n  };\n}();\nOrientedBox.prototype.closestPointToPoint = function () {\n  return function closestPointToPoint(point, target1) {\n    if (this.needsUpdate) {\n      this.update();\n    }\n    target1.copy(point).applyMatrix4(this.invMatrix).clamp(this.min, this.max).applyMatrix4(this.matrix);\n    return target1;\n  };\n}();\nOrientedBox.prototype.distanceToPoint = function () {\n  var target = new Vector3();\n  return function distanceToPoint(point) {\n    this.closestPointToPoint(point, target);\n    return point.distanceTo(target);\n  };\n}();\nOrientedBox.prototype.distanceToBox = function () {\n  var xyzFields = ['x', 'y', 'z'];\n  var segments1 = new Array(12).fill().map(function () {\n    return new Line3();\n  });\n  var segments2 = new Array(12).fill().map(function () {\n    return new Line3();\n  });\n  var point1 = new Vector3();\n  var point2 = new Vector3();\n\n  // early out if we find a value below threshold\n  return function distanceToBox(box) {\n    var threshold = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n    var target1 = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n    var target2 = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;\n    if (this.needsUpdate) {\n      this.update();\n    }\n    if (this.intersectsBox(box)) {\n      if (target1 || target2) {\n        box.getCenter(point2);\n        this.closestPointToPoint(point2, point1);\n        box.closestPointToPoint(point1, point2);\n        if (target1) target1.copy(point1);\n        if (target2) target2.copy(point2);\n      }\n      return 0;\n    }\n    var threshold2 = threshold * threshold;\n    var min = box.min;\n    var max = box.max;\n    var points = this.points;\n\n    // iterate over every edge and compare distances\n    var closestDistanceSq = Infinity;\n\n    // check over all these points\n    for (var i = 0; i < 8; i++) {\n      var p = points[i];\n      point2.copy(p).clamp(min, max);\n      var dist = p.distanceToSquared(point2);\n      if (dist < closestDistanceSq) {\n        closestDistanceSq = dist;\n        if (target1) target1.copy(p);\n        if (target2) target2.copy(point2);\n        if (dist < threshold2) return Math.sqrt(dist);\n      }\n    }\n\n    // generate and check all line segment distances\n    var count = 0;\n    for (var _i4 = 0; _i4 < 3; _i4++) {\n      for (var i1 = 0; i1 <= 1; i1++) {\n        for (var i2 = 0; i2 <= 1; i2++) {\n          var nextIndex = (_i4 + 1) % 3;\n          var nextIndex2 = (_i4 + 2) % 3;\n\n          // get obb line segments\n          var index = i1 << nextIndex | i2 << nextIndex2;\n          var index2 = 1 << _i4 | i1 << nextIndex | i2 << nextIndex2;\n          var p1 = points[index];\n          var p2 = points[index2];\n          var line1 = segments1[count];\n          line1.set(p1, p2);\n\n          // get aabb line segments\n          var f1 = xyzFields[_i4];\n          var f2 = xyzFields[nextIndex];\n          var f3 = xyzFields[nextIndex2];\n          var line2 = segments2[count];\n          var start = line2.start;\n          var end = line2.end;\n          start[f1] = min[f1];\n          start[f2] = i1 ? min[f2] : max[f2];\n          start[f3] = i2 ? min[f3] : max[f2];\n          end[f1] = max[f1];\n          end[f2] = i1 ? min[f2] : max[f2];\n          end[f3] = i2 ? min[f3] : max[f2];\n          count++;\n        }\n      }\n    }\n\n    // check all the other boxes point\n    for (var x = 0; x <= 1; x++) {\n      for (var y = 0; y <= 1; y++) {\n        for (var z = 0; z <= 1; z++) {\n          point2.x = x ? max.x : min.x;\n          point2.y = y ? max.y : min.y;\n          point2.z = z ? max.z : min.z;\n          this.closestPointToPoint(point2, point1);\n          var _dist = point2.distanceToSquared(point1);\n          if (_dist < closestDistanceSq) {\n            closestDistanceSq = _dist;\n            if (target1) target1.copy(point1);\n            if (target2) target2.copy(point2);\n            if (_dist < threshold2) return Math.sqrt(_dist);\n          }\n        }\n      }\n    }\n    for (var _i5 = 0; _i5 < 12; _i5++) {\n      var l1 = segments1[_i5];\n      for (var _i6 = 0; _i6 < 12; _i6++) {\n        var l2 = segments2[_i6];\n        closestPointsSegmentToSegment(l1, l2, point1, point2);\n        var _dist2 = point1.distanceToSquared(point2);\n        if (_dist2 < closestDistanceSq) {\n          closestDistanceSq = _dist2;\n          if (target1) target1.copy(point1);\n          if (target2) target2.copy(point2);\n          if (_dist2 < threshold2) return Math.sqrt(_dist2);\n        }\n      }\n    }\n    return Math.sqrt(closestDistanceSq);\n  };\n}();","map":{"version":3,"names":["Vector3","Matrix4","Line3","SeparatingAxisBounds","ExtendedTriangle","closestPointsSegmentToSegment","OrientedBox","min","max","matrix","_classCallCheck","isOrientedBox","invMatrix","points","Array","fill","map","satAxes","satBounds","alignedSatBounds","needsUpdate","copy","_createClass","key","value","set","other","prototype","update","x","y","z","i","v","applyMatrix4","minVec","axis","sb","index","pi","subVectors","setFromPoints","setFromPointsField","invert","intersectsBox","aabbBounds","box","isSeparated","setFromBox","intersectsTriangle","saTri","pointsArr","cachedSatBounds","cachedSatBounds2","cachedAxis","triangle","isExtendedTriangle","a","b","c","sa","triSatBounds","triSatAxes","sa1","i2","sa2","crossVectors","closestPointToPoint","point","target1","clamp","distanceToPoint","target","distanceTo","distanceToBox","xyzFields","segments1","segments2","point1","point2","threshold","arguments","length","undefined","target2","getCenter","threshold2","closestDistanceSq","Infinity","p","dist","distanceToSquared","Math","sqrt","count","i1","nextIndex","nextIndex2","index2","p1","p2","line1","f1","f2","f3","line2","start","end","l1","l2"],"sources":["/home/krug/Coding/JavaScript/Websites/Personal/personal/node_modules/.pnpm/three-mesh-bvh@0.5.24_three@0.151.3/node_modules/three-mesh-bvh/src/math/OrientedBox.js"],"sourcesContent":["import { Vector3, Matrix4, Line3 } from 'three';\nimport { SeparatingAxisBounds } from './SeparatingAxisBounds.js';\nimport { ExtendedTriangle } from './ExtendedTriangle.js';\nimport { closestPointsSegmentToSegment } from './MathUtilities.js';\n\nexport class OrientedBox {\n\n\tconstructor( min, max, matrix ) {\n\n\t\tthis.isOrientedBox = true;\n\t\tthis.min = new Vector3();\n\t\tthis.max = new Vector3();\n\t\tthis.matrix = new Matrix4();\n\t\tthis.invMatrix = new Matrix4();\n\t\tthis.points = new Array( 8 ).fill().map( () => new Vector3() );\n\t\tthis.satAxes = new Array( 3 ).fill().map( () => new Vector3() );\n\t\tthis.satBounds = new Array( 3 ).fill().map( () => new SeparatingAxisBounds() );\n\t\tthis.alignedSatBounds = new Array( 3 ).fill().map( () => new SeparatingAxisBounds() );\n\t\tthis.needsUpdate = false;\n\n\t\tif ( min ) this.min.copy( min );\n\t\tif ( max ) this.max.copy( max );\n\t\tif ( matrix ) this.matrix.copy( matrix );\n\n\t}\n\n\tset( min, max, matrix ) {\n\n\t\tthis.min.copy( min );\n\t\tthis.max.copy( max );\n\t\tthis.matrix.copy( matrix );\n\t\tthis.needsUpdate = true;\n\n\t}\n\n\tcopy( other ) {\n\n\t\tthis.min.copy( other.min );\n\t\tthis.max.copy( other.max );\n\t\tthis.matrix.copy( other.matrix );\n\t\tthis.needsUpdate = true;\n\n\t}\n\n}\n\nOrientedBox.prototype.update = ( function () {\n\n\treturn function update() {\n\n\t\tconst matrix = this.matrix;\n\t\tconst min = this.min;\n\t\tconst max = this.max;\n\n\t\tconst points = this.points;\n\t\tfor ( let x = 0; x <= 1; x ++ ) {\n\n\t\t\tfor ( let y = 0; y <= 1; y ++ ) {\n\n\t\t\t\tfor ( let z = 0; z <= 1; z ++ ) {\n\n\t\t\t\t\tconst i = ( ( 1 << 0 ) * x ) | ( ( 1 << 1 ) * y ) | ( ( 1 << 2 ) * z );\n\t\t\t\t\tconst v = points[ i ];\n\t\t\t\t\tv.x = x ? max.x : min.x;\n\t\t\t\t\tv.y = y ? max.y : min.y;\n\t\t\t\t\tv.z = z ? max.z : min.z;\n\n\t\t\t\t\tv.applyMatrix4( matrix );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tconst satBounds = this.satBounds;\n\t\tconst satAxes = this.satAxes;\n\t\tconst minVec = points[ 0 ];\n\t\tfor ( let i = 0; i < 3; i ++ ) {\n\n\t\t\tconst axis = satAxes[ i ];\n\t\t\tconst sb = satBounds[ i ];\n\t\t\tconst index = 1 << i;\n\t\t\tconst pi = points[ index ];\n\n\t\t\taxis.subVectors( minVec, pi );\n\t\t\tsb.setFromPoints( axis, points );\n\n\t\t}\n\n\t\tconst alignedSatBounds = this.alignedSatBounds;\n\t\talignedSatBounds[ 0 ].setFromPointsField( points, 'x' );\n\t\talignedSatBounds[ 1 ].setFromPointsField( points, 'y' );\n\t\talignedSatBounds[ 2 ].setFromPointsField( points, 'z' );\n\n\t\tthis.invMatrix.copy( this.matrix ).invert();\n\t\tthis.needsUpdate = false;\n\n\t};\n\n} )();\n\nOrientedBox.prototype.intersectsBox = ( function () {\n\n\tconst aabbBounds = new SeparatingAxisBounds();\n\treturn function intersectsBox( box ) {\n\n\t\t// TODO: should this be doing SAT against the AABB?\n\t\tif ( this.needsUpdate ) {\n\n\t\t\tthis.update();\n\n\t\t}\n\n\t\tconst min = box.min;\n\t\tconst max = box.max;\n\t\tconst satBounds = this.satBounds;\n\t\tconst satAxes = this.satAxes;\n\t\tconst alignedSatBounds = this.alignedSatBounds;\n\n\t\taabbBounds.min = min.x;\n\t\taabbBounds.max = max.x;\n\t\tif ( alignedSatBounds[ 0 ].isSeparated( aabbBounds ) ) return false;\n\n\t\taabbBounds.min = min.y;\n\t\taabbBounds.max = max.y;\n\t\tif ( alignedSatBounds[ 1 ].isSeparated( aabbBounds ) ) return false;\n\n\t\taabbBounds.min = min.z;\n\t\taabbBounds.max = max.z;\n\t\tif ( alignedSatBounds[ 2 ].isSeparated( aabbBounds ) ) return false;\n\n\t\tfor ( let i = 0; i < 3; i ++ ) {\n\n\t\t\tconst axis = satAxes[ i ];\n\t\t\tconst sb = satBounds[ i ];\n\t\t\taabbBounds.setFromBox( axis, box );\n\t\t\tif ( sb.isSeparated( aabbBounds ) ) return false;\n\n\t\t}\n\n\t\treturn true;\n\n\t};\n\n} )();\n\nOrientedBox.prototype.intersectsTriangle = ( function () {\n\n\tconst saTri = new ExtendedTriangle();\n\tconst pointsArr = new Array( 3 );\n\tconst cachedSatBounds = new SeparatingAxisBounds();\n\tconst cachedSatBounds2 = new SeparatingAxisBounds();\n\tconst cachedAxis = new Vector3();\n\treturn function intersectsTriangle( triangle ) {\n\n\t\tif ( this.needsUpdate ) {\n\n\t\t\tthis.update();\n\n\t\t}\n\n\t\tif ( ! triangle.isExtendedTriangle ) {\n\n\t\t\tsaTri.copy( triangle );\n\t\t\tsaTri.update();\n\t\t\ttriangle = saTri;\n\n\t\t} else if ( triangle.needsUpdate ) {\n\n\t\t\ttriangle.update();\n\n\t\t}\n\n\t\tconst satBounds = this.satBounds;\n\t\tconst satAxes = this.satAxes;\n\n\t\tpointsArr[ 0 ] = triangle.a;\n\t\tpointsArr[ 1 ] = triangle.b;\n\t\tpointsArr[ 2 ] = triangle.c;\n\n\t\tfor ( let i = 0; i < 3; i ++ ) {\n\n\t\t\tconst sb = satBounds[ i ];\n\t\t\tconst sa = satAxes[ i ];\n\t\t\tcachedSatBounds.setFromPoints( sa, pointsArr );\n\t\t\tif ( sb.isSeparated( cachedSatBounds ) ) return false;\n\n\t\t}\n\n\t\tconst triSatBounds = triangle.satBounds;\n\t\tconst triSatAxes = triangle.satAxes;\n\t\tconst points = this.points;\n\t\tfor ( let i = 0; i < 3; i ++ ) {\n\n\t\t\tconst sb = triSatBounds[ i ];\n\t\t\tconst sa = triSatAxes[ i ];\n\t\t\tcachedSatBounds.setFromPoints( sa, points );\n\t\t\tif ( sb.isSeparated( cachedSatBounds ) ) return false;\n\n\t\t}\n\n\t\t// check crossed axes\n\t\tfor ( let i = 0; i < 3; i ++ ) {\n\n\t\t\tconst sa1 = satAxes[ i ];\n\t\t\tfor ( let i2 = 0; i2 < 4; i2 ++ ) {\n\n\t\t\t\tconst sa2 = triSatAxes[ i2 ];\n\t\t\t\tcachedAxis.crossVectors( sa1, sa2 );\n\t\t\t\tcachedSatBounds.setFromPoints( cachedAxis, pointsArr );\n\t\t\t\tcachedSatBounds2.setFromPoints( cachedAxis, points );\n\t\t\t\tif ( cachedSatBounds.isSeparated( cachedSatBounds2 ) ) return false;\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn true;\n\n\t};\n\n} )();\n\nOrientedBox.prototype.closestPointToPoint = ( function () {\n\n\treturn function closestPointToPoint( point, target1 ) {\n\n\t\tif ( this.needsUpdate ) {\n\n\t\t\tthis.update();\n\n\t\t}\n\n\t\ttarget1\n\t\t\t.copy( point )\n\t\t\t.applyMatrix4( this.invMatrix )\n\t\t\t.clamp( this.min, this.max )\n\t\t\t.applyMatrix4( this.matrix );\n\n\t\treturn target1;\n\n\t};\n\n} )();\n\nOrientedBox.prototype.distanceToPoint = ( function () {\n\n\tconst target = new Vector3();\n\treturn function distanceToPoint( point ) {\n\n\t\tthis.closestPointToPoint( point, target );\n\t\treturn point.distanceTo( target );\n\n\t};\n\n} )();\n\nOrientedBox.prototype.distanceToBox = ( function () {\n\n\tconst xyzFields = [ 'x', 'y', 'z' ];\n\tconst segments1 = new Array( 12 ).fill().map( () => new Line3() );\n\tconst segments2 = new Array( 12 ).fill().map( () => new Line3() );\n\n\tconst point1 = new Vector3();\n\tconst point2 = new Vector3();\n\n\t// early out if we find a value below threshold\n\treturn function distanceToBox( box, threshold = 0, target1 = null, target2 = null ) {\n\n\t\tif ( this.needsUpdate ) {\n\n\t\t\tthis.update();\n\n\t\t}\n\n\t\tif ( this.intersectsBox( box ) ) {\n\n\t\t\tif ( target1 || target2 ) {\n\n\t\t\t\tbox.getCenter( point2 );\n\t\t\t\tthis.closestPointToPoint( point2, point1 );\n\t\t\t\tbox.closestPointToPoint( point1, point2 );\n\n\t\t\t\tif ( target1 ) target1.copy( point1 );\n\t\t\t\tif ( target2 ) target2.copy( point2 );\n\n\t\t\t}\n\n\t\t\treturn 0;\n\n\t\t}\n\n\t\tconst threshold2 = threshold * threshold;\n\t\tconst min = box.min;\n\t\tconst max = box.max;\n\t\tconst points = this.points;\n\n\n\t\t// iterate over every edge and compare distances\n\t\tlet closestDistanceSq = Infinity;\n\n\t\t// check over all these points\n\t\tfor ( let i = 0; i < 8; i ++ ) {\n\n\t\t\tconst p = points[ i ];\n\t\t\tpoint2.copy( p ).clamp( min, max );\n\n\t\t\tconst dist = p.distanceToSquared( point2 );\n\t\t\tif ( dist < closestDistanceSq ) {\n\n\t\t\t\tclosestDistanceSq = dist;\n\t\t\t\tif ( target1 ) target1.copy( p );\n\t\t\t\tif ( target2 ) target2.copy( point2 );\n\n\t\t\t\tif ( dist < threshold2 ) return Math.sqrt( dist );\n\n\t\t\t}\n\n\t\t}\n\n\t\t// generate and check all line segment distances\n\t\tlet count = 0;\n\t\tfor ( let i = 0; i < 3; i ++ ) {\n\n\t\t\tfor ( let i1 = 0; i1 <= 1; i1 ++ ) {\n\n\t\t\t\tfor ( let i2 = 0; i2 <= 1; i2 ++ ) {\n\n\t\t\t\t\tconst nextIndex = ( i + 1 ) % 3;\n\t\t\t\t\tconst nextIndex2 = ( i + 2 ) % 3;\n\n\t\t\t\t\t// get obb line segments\n\t\t\t\t\tconst index = i1 << nextIndex | i2 << nextIndex2;\n\t\t\t\t\tconst index2 = 1 << i | i1 << nextIndex | i2 << nextIndex2;\n\t\t\t\t\tconst p1 = points[ index ];\n\t\t\t\t\tconst p2 = points[ index2 ];\n\t\t\t\t\tconst line1 = segments1[ count ];\n\t\t\t\t\tline1.set( p1, p2 );\n\n\n\t\t\t\t\t// get aabb line segments\n\t\t\t\t\tconst f1 = xyzFields[ i ];\n\t\t\t\t\tconst f2 = xyzFields[ nextIndex ];\n\t\t\t\t\tconst f3 = xyzFields[ nextIndex2 ];\n\t\t\t\t\tconst line2 = segments2[ count ];\n\t\t\t\t\tconst start = line2.start;\n\t\t\t\t\tconst end = line2.end;\n\n\t\t\t\t\tstart[ f1 ] = min[ f1 ];\n\t\t\t\t\tstart[ f2 ] = i1 ? min[ f2 ] : max[ f2 ];\n\t\t\t\t\tstart[ f3 ] = i2 ? min[ f3 ] : max[ f2 ];\n\n\t\t\t\t\tend[ f1 ] = max[ f1 ];\n\t\t\t\t\tend[ f2 ] = i1 ? min[ f2 ] : max[ f2 ];\n\t\t\t\t\tend[ f3 ] = i2 ? min[ f3 ] : max[ f2 ];\n\n\t\t\t\t\tcount ++;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\t// check all the other boxes point\n\t\tfor ( let x = 0; x <= 1; x ++ ) {\n\n\t\t\tfor ( let y = 0; y <= 1; y ++ ) {\n\n\t\t\t\tfor ( let z = 0; z <= 1; z ++ ) {\n\n\t\t\t\t\tpoint2.x = x ? max.x : min.x;\n\t\t\t\t\tpoint2.y = y ? max.y : min.y;\n\t\t\t\t\tpoint2.z = z ? max.z : min.z;\n\n\t\t\t\t\tthis.closestPointToPoint( point2, point1 );\n\t\t\t\t\tconst dist = point2.distanceToSquared( point1 );\n\t\t\t\t\tif ( dist < closestDistanceSq ) {\n\n\t\t\t\t\t\tclosestDistanceSq = dist;\n\t\t\t\t\t\tif ( target1 ) target1.copy( point1 );\n\t\t\t\t\t\tif ( target2 ) target2.copy( point2 );\n\n\t\t\t\t\t\tif ( dist < threshold2 ) return Math.sqrt( dist );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tfor ( let i = 0; i < 12; i ++ ) {\n\n\t\t\tconst l1 = segments1[ i ];\n\t\t\tfor ( let i2 = 0; i2 < 12; i2 ++ ) {\n\n\t\t\t\tconst l2 = segments2[ i2 ];\n\t\t\t\tclosestPointsSegmentToSegment( l1, l2, point1, point2 );\n\t\t\t\tconst dist = point1.distanceToSquared( point2 );\n\t\t\t\tif ( dist < closestDistanceSq ) {\n\n\t\t\t\t\tclosestDistanceSq = dist;\n\t\t\t\t\tif ( target1 ) target1.copy( point1 );\n\t\t\t\t\tif ( target2 ) target2.copy( point2 );\n\n\t\t\t\t\tif ( dist < threshold2 ) return Math.sqrt( dist );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn Math.sqrt( closestDistanceSq );\n\n\t};\n\n} )();\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}