{"ast":null,"code":"import { Object3D, TextureLoader, UVMapping, Box3, MathUtils, MeshLambertMaterial } from \"three\";\nimport { MD2Loader } from \"../loaders/MD2Loader.js\";\nimport { MorphBlendMesh } from \"./MorphBlendMesh.js\";\nclass MD2CharacterComplex {\n  constructor() {\n    this.scale = 1;\n    this.animationFPS = 6;\n    this.transitionFrames = 15;\n    this.maxSpeed = 275;\n    this.maxReverseSpeed = -275;\n    this.frontAcceleration = 600;\n    this.backAcceleration = 600;\n    this.frontDecceleration = 600;\n    this.angularSpeed = 2.5;\n    this.root = new Object3D();\n    this.meshBody = null;\n    this.meshWeapon = null;\n    this.controls = null;\n    this.skinsBody = [];\n    this.skinsWeapon = [];\n    this.weapons = [];\n    this.currentSkin = void 0;\n    this.onLoadComplete = function () {};\n    this.meshes = [];\n    this.animations = {};\n    this.loadCounter = 0;\n    this.speed = 0;\n    this.bodyOrientation = 0;\n    this.walkSpeed = this.maxSpeed;\n    this.crouchSpeed = this.maxSpeed * 0.5;\n    this.activeAnimation = null;\n    this.oldAnimation = null;\n  }\n  enableShadows(enable) {\n    for (let i = 0; i < this.meshes.length; i++) {\n      this.meshes[i].castShadow = enable;\n      this.meshes[i].receiveShadow = enable;\n    }\n  }\n  setVisible(enable) {\n    for (let i = 0; i < this.meshes.length; i++) {\n      this.meshes[i].visible = enable;\n      this.meshes[i].visible = enable;\n    }\n  }\n  shareParts(original) {\n    this.animations = original.animations;\n    this.walkSpeed = original.walkSpeed;\n    this.crouchSpeed = original.crouchSpeed;\n    this.skinsBody = original.skinsBody;\n    this.skinsWeapon = original.skinsWeapon;\n    const mesh = this._createPart(original.meshBody.geometry, this.skinsBody[0]);\n    mesh.scale.set(this.scale, this.scale, this.scale);\n    this.root.position.y = original.root.position.y;\n    this.root.add(mesh);\n    this.meshBody = mesh;\n    this.meshes.push(mesh);\n    for (let i = 0; i < original.weapons.length; i++) {\n      const meshWeapon = this._createPart(original.weapons[i].geometry, this.skinsWeapon[i]);\n      meshWeapon.scale.set(this.scale, this.scale, this.scale);\n      meshWeapon.visible = false;\n      meshWeapon.name = original.weapons[i].name;\n      this.root.add(meshWeapon);\n      this.weapons[i] = meshWeapon;\n      this.meshWeapon = meshWeapon;\n      this.meshes.push(meshWeapon);\n    }\n  }\n  loadParts(config) {\n    const scope = this;\n    function loadTextures(baseUrl, textureUrls) {\n      const textureLoader = new TextureLoader();\n      const textures = [];\n      for (let i = 0; i < textureUrls.length; i++) {\n        textures[i] = textureLoader.load(baseUrl + textureUrls[i], checkLoadingComplete);\n        textures[i].mapping = UVMapping;\n        textures[i].name = textureUrls[i];\n        if (\"colorSpace\" in textures[i]) textures[i].colorSpace = \"srgb\";else textures[i].encoding = 3001;\n      }\n      return textures;\n    }\n    function checkLoadingComplete() {\n      scope.loadCounter -= 1;\n      if (scope.loadCounter === 0) scope.onLoadComplete();\n    }\n    this.animations = config.animations;\n    this.walkSpeed = config.walkSpeed;\n    this.crouchSpeed = config.crouchSpeed;\n    this.loadCounter = config.weapons.length * 2 + config.skins.length + 1;\n    const weaponsTextures = [];\n    for (let i = 0; i < config.weapons.length; i++) weaponsTextures[i] = config.weapons[i][1];\n    this.skinsBody = loadTextures(config.baseUrl + \"skins/\", config.skins);\n    this.skinsWeapon = loadTextures(config.baseUrl + \"skins/\", weaponsTextures);\n    const loader = new MD2Loader();\n    loader.load(config.baseUrl + config.body, function (geo) {\n      const boundingBox = new Box3();\n      boundingBox.setFromBufferAttribute(geo.attributes.position);\n      scope.root.position.y = -scope.scale * boundingBox.min.y;\n      const mesh = scope._createPart(geo, scope.skinsBody[0]);\n      mesh.scale.set(scope.scale, scope.scale, scope.scale);\n      scope.root.add(mesh);\n      scope.meshBody = mesh;\n      scope.meshes.push(mesh);\n      checkLoadingComplete();\n    });\n    const generateCallback = function (index, name) {\n      return function (geo) {\n        const mesh = scope._createPart(geo, scope.skinsWeapon[index]);\n        mesh.scale.set(scope.scale, scope.scale, scope.scale);\n        mesh.visible = false;\n        mesh.name = name;\n        scope.root.add(mesh);\n        scope.weapons[index] = mesh;\n        scope.meshWeapon = mesh;\n        scope.meshes.push(mesh);\n        checkLoadingComplete();\n      };\n    };\n    for (let i = 0; i < config.weapons.length; i++) {\n      loader.load(config.baseUrl + config.weapons[i][0], generateCallback(i, config.weapons[i][0]));\n    }\n  }\n  setPlaybackRate(rate) {\n    if (this.meshBody) this.meshBody.duration = this.meshBody.baseDuration / rate;\n    if (this.meshWeapon) this.meshWeapon.duration = this.meshWeapon.baseDuration / rate;\n  }\n  setWireframe(wireframeEnabled) {\n    if (wireframeEnabled) {\n      if (this.meshBody) this.meshBody.material = this.meshBody.materialWireframe;\n      if (this.meshWeapon) this.meshWeapon.material = this.meshWeapon.materialWireframe;\n    } else {\n      if (this.meshBody) this.meshBody.material = this.meshBody.materialTexture;\n      if (this.meshWeapon) this.meshWeapon.material = this.meshWeapon.materialTexture;\n    }\n  }\n  setSkin(index) {\n    if (this.meshBody && this.meshBody.material.wireframe === false) {\n      this.meshBody.material.map = this.skinsBody[index];\n      this.currentSkin = index;\n    }\n  }\n  setWeapon(index) {\n    for (let i = 0; i < this.weapons.length; i++) this.weapons[i].visible = false;\n    const activeWeapon = this.weapons[index];\n    if (activeWeapon) {\n      activeWeapon.visible = true;\n      this.meshWeapon = activeWeapon;\n      if (this.activeAnimation) {\n        activeWeapon.playAnimation(this.activeAnimation);\n        this.meshWeapon.setAnimationTime(this.activeAnimation, this.meshBody.getAnimationTime(this.activeAnimation));\n      }\n    }\n  }\n  setAnimation(animationName) {\n    if (animationName === this.activeAnimation || !animationName) return;\n    if (this.meshBody) {\n      this.meshBody.setAnimationWeight(animationName, 0);\n      this.meshBody.playAnimation(animationName);\n      this.oldAnimation = this.activeAnimation;\n      this.activeAnimation = animationName;\n      this.blendCounter = this.transitionFrames;\n    }\n    if (this.meshWeapon) {\n      this.meshWeapon.setAnimationWeight(animationName, 0);\n      this.meshWeapon.playAnimation(animationName);\n    }\n  }\n  update(delta) {\n    if (this.controls) this.updateMovementModel(delta);\n    if (this.animations) {\n      this.updateBehaviors();\n      this.updateAnimations(delta);\n    }\n  }\n  updateAnimations(delta) {\n    let mix = 1;\n    if (this.blendCounter > 0) {\n      mix = (this.transitionFrames - this.blendCounter) / this.transitionFrames;\n      this.blendCounter -= 1;\n    }\n    if (this.meshBody) {\n      this.meshBody.update(delta);\n      this.meshBody.setAnimationWeight(this.activeAnimation, mix);\n      this.meshBody.setAnimationWeight(this.oldAnimation, 1 - mix);\n    }\n    if (this.meshWeapon) {\n      this.meshWeapon.update(delta);\n      this.meshWeapon.setAnimationWeight(this.activeAnimation, mix);\n      this.meshWeapon.setAnimationWeight(this.oldAnimation, 1 - mix);\n    }\n  }\n  updateBehaviors() {\n    const controls = this.controls;\n    const animations = this.animations;\n    let moveAnimation, idleAnimation;\n    if (controls.crouch) {\n      moveAnimation = animations[\"crouchMove\"];\n      idleAnimation = animations[\"crouchIdle\"];\n    } else {\n      moveAnimation = animations[\"move\"];\n      idleAnimation = animations[\"idle\"];\n    }\n    if (controls.jump) {\n      moveAnimation = animations[\"jump\"];\n      idleAnimation = animations[\"jump\"];\n    }\n    if (controls.attack) {\n      if (controls.crouch) {\n        moveAnimation = animations[\"crouchAttack\"];\n        idleAnimation = animations[\"crouchAttack\"];\n      } else {\n        moveAnimation = animations[\"attack\"];\n        idleAnimation = animations[\"attack\"];\n      }\n    }\n    if (controls.moveForward || controls.moveBackward || controls.moveLeft || controls.moveRight) {\n      if (this.activeAnimation !== moveAnimation) {\n        this.setAnimation(moveAnimation);\n      }\n    }\n    if (Math.abs(this.speed) < 0.2 * this.maxSpeed && !(controls.moveLeft || controls.moveRight || controls.moveForward || controls.moveBackward)) {\n      if (this.activeAnimation !== idleAnimation) {\n        this.setAnimation(idleAnimation);\n      }\n    }\n    if (controls.moveForward) {\n      if (this.meshBody) {\n        this.meshBody.setAnimationDirectionForward(this.activeAnimation);\n        this.meshBody.setAnimationDirectionForward(this.oldAnimation);\n      }\n      if (this.meshWeapon) {\n        this.meshWeapon.setAnimationDirectionForward(this.activeAnimation);\n        this.meshWeapon.setAnimationDirectionForward(this.oldAnimation);\n      }\n    }\n    if (controls.moveBackward) {\n      if (this.meshBody) {\n        this.meshBody.setAnimationDirectionBackward(this.activeAnimation);\n        this.meshBody.setAnimationDirectionBackward(this.oldAnimation);\n      }\n      if (this.meshWeapon) {\n        this.meshWeapon.setAnimationDirectionBackward(this.activeAnimation);\n        this.meshWeapon.setAnimationDirectionBackward(this.oldAnimation);\n      }\n    }\n  }\n  updateMovementModel(delta) {\n    function exponentialEaseOut(k) {\n      return k === 1 ? 1 : -Math.pow(2, -10 * k) + 1;\n    }\n    const controls = this.controls;\n    if (controls.crouch) this.maxSpeed = this.crouchSpeed;else this.maxSpeed = this.walkSpeed;\n    this.maxReverseSpeed = -this.maxSpeed;\n    if (controls.moveForward) this.speed = MathUtils.clamp(this.speed + delta * this.frontAcceleration, this.maxReverseSpeed, this.maxSpeed);\n    if (controls.moveBackward) this.speed = MathUtils.clamp(this.speed - delta * this.backAcceleration, this.maxReverseSpeed, this.maxSpeed);\n    const dir = 1;\n    if (controls.moveLeft) {\n      this.bodyOrientation += delta * this.angularSpeed;\n      this.speed = MathUtils.clamp(this.speed + dir * delta * this.frontAcceleration, this.maxReverseSpeed, this.maxSpeed);\n    }\n    if (controls.moveRight) {\n      this.bodyOrientation -= delta * this.angularSpeed;\n      this.speed = MathUtils.clamp(this.speed + dir * delta * this.frontAcceleration, this.maxReverseSpeed, this.maxSpeed);\n    }\n    if (!(controls.moveForward || controls.moveBackward)) {\n      if (this.speed > 0) {\n        const k = exponentialEaseOut(this.speed / this.maxSpeed);\n        this.speed = MathUtils.clamp(this.speed - k * delta * this.frontDecceleration, 0, this.maxSpeed);\n      } else {\n        const k = exponentialEaseOut(this.speed / this.maxReverseSpeed);\n        this.speed = MathUtils.clamp(this.speed + k * delta * this.backAcceleration, this.maxReverseSpeed, 0);\n      }\n    }\n    const forwardDelta = this.speed * delta;\n    this.root.position.x += Math.sin(this.bodyOrientation) * forwardDelta;\n    this.root.position.z += Math.cos(this.bodyOrientation) * forwardDelta;\n    this.root.rotation.y = this.bodyOrientation;\n  }\n  // internal\n  _createPart(geometry, skinMap) {\n    const materialWireframe = new MeshLambertMaterial({\n      color: 16755200,\n      wireframe: true,\n      morphTargets: true,\n      morphNormals: true\n    });\n    const materialTexture = new MeshLambertMaterial({\n      color: 16777215,\n      wireframe: false,\n      map: skinMap,\n      morphTargets: true,\n      morphNormals: true\n    });\n    const mesh = new MorphBlendMesh(geometry, materialTexture);\n    mesh.rotation.y = -Math.PI / 2;\n    mesh.materialTexture = materialTexture;\n    mesh.materialWireframe = materialWireframe;\n    mesh.autoCreateAnimations(this.animationFPS);\n    return mesh;\n  }\n}\nexport { MD2CharacterComplex };","map":{"version":3,"names":["Object3D","TextureLoader","UVMapping","Box3","MathUtils","MeshLambertMaterial","MD2Loader","MorphBlendMesh","MD2CharacterComplex","constructor","scale","animationFPS","transitionFrames","maxSpeed","maxReverseSpeed","frontAcceleration","backAcceleration","frontDecceleration","angularSpeed","root","meshBody","meshWeapon","controls","skinsBody","skinsWeapon","weapons","currentSkin","onLoadComplete","meshes","animations","loadCounter","speed","bodyOrientation","walkSpeed","crouchSpeed","activeAnimation","oldAnimation","enableShadows","enable","i","length","castShadow","receiveShadow","setVisible","visible","shareParts","original","mesh","_createPart","geometry","set","position","y","add","push","name","loadParts","config","scope","loadTextures","baseUrl","textureUrls","textureLoader","textures","load","checkLoadingComplete","mapping","colorSpace","encoding","skins","weaponsTextures","loader","body","geo","boundingBox","setFromBufferAttribute","attributes","min","generateCallback","index","setPlaybackRate","rate","duration","baseDuration","setWireframe","wireframeEnabled","material","materialWireframe","materialTexture","setSkin","wireframe","map","setWeapon","activeWeapon","playAnimation","setAnimationTime","getAnimationTime","setAnimation","animationName","setAnimationWeight","blendCounter","update","delta","updateMovementModel","updateBehaviors","updateAnimations","mix","moveAnimation","idleAnimation","crouch","jump","attack","moveForward","moveBackward","moveLeft","moveRight","Math","abs","setAnimationDirectionForward","setAnimationDirectionBackward","exponentialEaseOut","k","pow","clamp","dir","forwardDelta","x","sin","z","cos","rotation","skinMap","color","morphTargets","morphNormals","PI","autoCreateAnimations"],"sources":["/home/krug/Coding/JavaScript/Websites/Personal/personal/node_modules/.pnpm/three-stdlib@2.23.7_three@0.151.3/node_modules/three-stdlib/misc/MD2CharacterComplex.js"],"sourcesContent":["import { Object3D, TextureLoader, UVMapping, Box3, MathUtils, MeshLambertMaterial } from \"three\";\nimport { MD2Loader } from \"../loaders/MD2Loader.js\";\nimport { MorphBlendMesh } from \"./MorphBlendMesh.js\";\nclass MD2CharacterComplex {\n  constructor() {\n    this.scale = 1;\n    this.animationFPS = 6;\n    this.transitionFrames = 15;\n    this.maxSpeed = 275;\n    this.maxReverseSpeed = -275;\n    this.frontAcceleration = 600;\n    this.backAcceleration = 600;\n    this.frontDecceleration = 600;\n    this.angularSpeed = 2.5;\n    this.root = new Object3D();\n    this.meshBody = null;\n    this.meshWeapon = null;\n    this.controls = null;\n    this.skinsBody = [];\n    this.skinsWeapon = [];\n    this.weapons = [];\n    this.currentSkin = void 0;\n    this.onLoadComplete = function() {\n    };\n    this.meshes = [];\n    this.animations = {};\n    this.loadCounter = 0;\n    this.speed = 0;\n    this.bodyOrientation = 0;\n    this.walkSpeed = this.maxSpeed;\n    this.crouchSpeed = this.maxSpeed * 0.5;\n    this.activeAnimation = null;\n    this.oldAnimation = null;\n  }\n  enableShadows(enable) {\n    for (let i = 0; i < this.meshes.length; i++) {\n      this.meshes[i].castShadow = enable;\n      this.meshes[i].receiveShadow = enable;\n    }\n  }\n  setVisible(enable) {\n    for (let i = 0; i < this.meshes.length; i++) {\n      this.meshes[i].visible = enable;\n      this.meshes[i].visible = enable;\n    }\n  }\n  shareParts(original) {\n    this.animations = original.animations;\n    this.walkSpeed = original.walkSpeed;\n    this.crouchSpeed = original.crouchSpeed;\n    this.skinsBody = original.skinsBody;\n    this.skinsWeapon = original.skinsWeapon;\n    const mesh = this._createPart(original.meshBody.geometry, this.skinsBody[0]);\n    mesh.scale.set(this.scale, this.scale, this.scale);\n    this.root.position.y = original.root.position.y;\n    this.root.add(mesh);\n    this.meshBody = mesh;\n    this.meshes.push(mesh);\n    for (let i = 0; i < original.weapons.length; i++) {\n      const meshWeapon = this._createPart(original.weapons[i].geometry, this.skinsWeapon[i]);\n      meshWeapon.scale.set(this.scale, this.scale, this.scale);\n      meshWeapon.visible = false;\n      meshWeapon.name = original.weapons[i].name;\n      this.root.add(meshWeapon);\n      this.weapons[i] = meshWeapon;\n      this.meshWeapon = meshWeapon;\n      this.meshes.push(meshWeapon);\n    }\n  }\n  loadParts(config) {\n    const scope = this;\n    function loadTextures(baseUrl, textureUrls) {\n      const textureLoader = new TextureLoader();\n      const textures = [];\n      for (let i = 0; i < textureUrls.length; i++) {\n        textures[i] = textureLoader.load(baseUrl + textureUrls[i], checkLoadingComplete);\n        textures[i].mapping = UVMapping;\n        textures[i].name = textureUrls[i];\n        if (\"colorSpace\" in textures[i])\n          textures[i].colorSpace = \"srgb\";\n        else\n          textures[i].encoding = 3001;\n      }\n      return textures;\n    }\n    function checkLoadingComplete() {\n      scope.loadCounter -= 1;\n      if (scope.loadCounter === 0)\n        scope.onLoadComplete();\n    }\n    this.animations = config.animations;\n    this.walkSpeed = config.walkSpeed;\n    this.crouchSpeed = config.crouchSpeed;\n    this.loadCounter = config.weapons.length * 2 + config.skins.length + 1;\n    const weaponsTextures = [];\n    for (let i = 0; i < config.weapons.length; i++)\n      weaponsTextures[i] = config.weapons[i][1];\n    this.skinsBody = loadTextures(config.baseUrl + \"skins/\", config.skins);\n    this.skinsWeapon = loadTextures(config.baseUrl + \"skins/\", weaponsTextures);\n    const loader = new MD2Loader();\n    loader.load(config.baseUrl + config.body, function(geo) {\n      const boundingBox = new Box3();\n      boundingBox.setFromBufferAttribute(geo.attributes.position);\n      scope.root.position.y = -scope.scale * boundingBox.min.y;\n      const mesh = scope._createPart(geo, scope.skinsBody[0]);\n      mesh.scale.set(scope.scale, scope.scale, scope.scale);\n      scope.root.add(mesh);\n      scope.meshBody = mesh;\n      scope.meshes.push(mesh);\n      checkLoadingComplete();\n    });\n    const generateCallback = function(index, name) {\n      return function(geo) {\n        const mesh = scope._createPart(geo, scope.skinsWeapon[index]);\n        mesh.scale.set(scope.scale, scope.scale, scope.scale);\n        mesh.visible = false;\n        mesh.name = name;\n        scope.root.add(mesh);\n        scope.weapons[index] = mesh;\n        scope.meshWeapon = mesh;\n        scope.meshes.push(mesh);\n        checkLoadingComplete();\n      };\n    };\n    for (let i = 0; i < config.weapons.length; i++) {\n      loader.load(config.baseUrl + config.weapons[i][0], generateCallback(i, config.weapons[i][0]));\n    }\n  }\n  setPlaybackRate(rate) {\n    if (this.meshBody)\n      this.meshBody.duration = this.meshBody.baseDuration / rate;\n    if (this.meshWeapon)\n      this.meshWeapon.duration = this.meshWeapon.baseDuration / rate;\n  }\n  setWireframe(wireframeEnabled) {\n    if (wireframeEnabled) {\n      if (this.meshBody)\n        this.meshBody.material = this.meshBody.materialWireframe;\n      if (this.meshWeapon)\n        this.meshWeapon.material = this.meshWeapon.materialWireframe;\n    } else {\n      if (this.meshBody)\n        this.meshBody.material = this.meshBody.materialTexture;\n      if (this.meshWeapon)\n        this.meshWeapon.material = this.meshWeapon.materialTexture;\n    }\n  }\n  setSkin(index) {\n    if (this.meshBody && this.meshBody.material.wireframe === false) {\n      this.meshBody.material.map = this.skinsBody[index];\n      this.currentSkin = index;\n    }\n  }\n  setWeapon(index) {\n    for (let i = 0; i < this.weapons.length; i++)\n      this.weapons[i].visible = false;\n    const activeWeapon = this.weapons[index];\n    if (activeWeapon) {\n      activeWeapon.visible = true;\n      this.meshWeapon = activeWeapon;\n      if (this.activeAnimation) {\n        activeWeapon.playAnimation(this.activeAnimation);\n        this.meshWeapon.setAnimationTime(this.activeAnimation, this.meshBody.getAnimationTime(this.activeAnimation));\n      }\n    }\n  }\n  setAnimation(animationName) {\n    if (animationName === this.activeAnimation || !animationName)\n      return;\n    if (this.meshBody) {\n      this.meshBody.setAnimationWeight(animationName, 0);\n      this.meshBody.playAnimation(animationName);\n      this.oldAnimation = this.activeAnimation;\n      this.activeAnimation = animationName;\n      this.blendCounter = this.transitionFrames;\n    }\n    if (this.meshWeapon) {\n      this.meshWeapon.setAnimationWeight(animationName, 0);\n      this.meshWeapon.playAnimation(animationName);\n    }\n  }\n  update(delta) {\n    if (this.controls)\n      this.updateMovementModel(delta);\n    if (this.animations) {\n      this.updateBehaviors();\n      this.updateAnimations(delta);\n    }\n  }\n  updateAnimations(delta) {\n    let mix = 1;\n    if (this.blendCounter > 0) {\n      mix = (this.transitionFrames - this.blendCounter) / this.transitionFrames;\n      this.blendCounter -= 1;\n    }\n    if (this.meshBody) {\n      this.meshBody.update(delta);\n      this.meshBody.setAnimationWeight(this.activeAnimation, mix);\n      this.meshBody.setAnimationWeight(this.oldAnimation, 1 - mix);\n    }\n    if (this.meshWeapon) {\n      this.meshWeapon.update(delta);\n      this.meshWeapon.setAnimationWeight(this.activeAnimation, mix);\n      this.meshWeapon.setAnimationWeight(this.oldAnimation, 1 - mix);\n    }\n  }\n  updateBehaviors() {\n    const controls = this.controls;\n    const animations = this.animations;\n    let moveAnimation, idleAnimation;\n    if (controls.crouch) {\n      moveAnimation = animations[\"crouchMove\"];\n      idleAnimation = animations[\"crouchIdle\"];\n    } else {\n      moveAnimation = animations[\"move\"];\n      idleAnimation = animations[\"idle\"];\n    }\n    if (controls.jump) {\n      moveAnimation = animations[\"jump\"];\n      idleAnimation = animations[\"jump\"];\n    }\n    if (controls.attack) {\n      if (controls.crouch) {\n        moveAnimation = animations[\"crouchAttack\"];\n        idleAnimation = animations[\"crouchAttack\"];\n      } else {\n        moveAnimation = animations[\"attack\"];\n        idleAnimation = animations[\"attack\"];\n      }\n    }\n    if (controls.moveForward || controls.moveBackward || controls.moveLeft || controls.moveRight) {\n      if (this.activeAnimation !== moveAnimation) {\n        this.setAnimation(moveAnimation);\n      }\n    }\n    if (Math.abs(this.speed) < 0.2 * this.maxSpeed && !(controls.moveLeft || controls.moveRight || controls.moveForward || controls.moveBackward)) {\n      if (this.activeAnimation !== idleAnimation) {\n        this.setAnimation(idleAnimation);\n      }\n    }\n    if (controls.moveForward) {\n      if (this.meshBody) {\n        this.meshBody.setAnimationDirectionForward(this.activeAnimation);\n        this.meshBody.setAnimationDirectionForward(this.oldAnimation);\n      }\n      if (this.meshWeapon) {\n        this.meshWeapon.setAnimationDirectionForward(this.activeAnimation);\n        this.meshWeapon.setAnimationDirectionForward(this.oldAnimation);\n      }\n    }\n    if (controls.moveBackward) {\n      if (this.meshBody) {\n        this.meshBody.setAnimationDirectionBackward(this.activeAnimation);\n        this.meshBody.setAnimationDirectionBackward(this.oldAnimation);\n      }\n      if (this.meshWeapon) {\n        this.meshWeapon.setAnimationDirectionBackward(this.activeAnimation);\n        this.meshWeapon.setAnimationDirectionBackward(this.oldAnimation);\n      }\n    }\n  }\n  updateMovementModel(delta) {\n    function exponentialEaseOut(k) {\n      return k === 1 ? 1 : -Math.pow(2, -10 * k) + 1;\n    }\n    const controls = this.controls;\n    if (controls.crouch)\n      this.maxSpeed = this.crouchSpeed;\n    else\n      this.maxSpeed = this.walkSpeed;\n    this.maxReverseSpeed = -this.maxSpeed;\n    if (controls.moveForward)\n      this.speed = MathUtils.clamp(this.speed + delta * this.frontAcceleration, this.maxReverseSpeed, this.maxSpeed);\n    if (controls.moveBackward)\n      this.speed = MathUtils.clamp(this.speed - delta * this.backAcceleration, this.maxReverseSpeed, this.maxSpeed);\n    const dir = 1;\n    if (controls.moveLeft) {\n      this.bodyOrientation += delta * this.angularSpeed;\n      this.speed = MathUtils.clamp(\n        this.speed + dir * delta * this.frontAcceleration,\n        this.maxReverseSpeed,\n        this.maxSpeed\n      );\n    }\n    if (controls.moveRight) {\n      this.bodyOrientation -= delta * this.angularSpeed;\n      this.speed = MathUtils.clamp(\n        this.speed + dir * delta * this.frontAcceleration,\n        this.maxReverseSpeed,\n        this.maxSpeed\n      );\n    }\n    if (!(controls.moveForward || controls.moveBackward)) {\n      if (this.speed > 0) {\n        const k = exponentialEaseOut(this.speed / this.maxSpeed);\n        this.speed = MathUtils.clamp(this.speed - k * delta * this.frontDecceleration, 0, this.maxSpeed);\n      } else {\n        const k = exponentialEaseOut(this.speed / this.maxReverseSpeed);\n        this.speed = MathUtils.clamp(this.speed + k * delta * this.backAcceleration, this.maxReverseSpeed, 0);\n      }\n    }\n    const forwardDelta = this.speed * delta;\n    this.root.position.x += Math.sin(this.bodyOrientation) * forwardDelta;\n    this.root.position.z += Math.cos(this.bodyOrientation) * forwardDelta;\n    this.root.rotation.y = this.bodyOrientation;\n  }\n  // internal\n  _createPart(geometry, skinMap) {\n    const materialWireframe = new MeshLambertMaterial({\n      color: 16755200,\n      wireframe: true,\n      morphTargets: true,\n      morphNormals: true\n    });\n    const materialTexture = new MeshLambertMaterial({\n      color: 16777215,\n      wireframe: false,\n      map: skinMap,\n      morphTargets: true,\n      morphNormals: true\n    });\n    const mesh = new MorphBlendMesh(geometry, materialTexture);\n    mesh.rotation.y = -Math.PI / 2;\n    mesh.materialTexture = materialTexture;\n    mesh.materialWireframe = materialWireframe;\n    mesh.autoCreateAnimations(this.animationFPS);\n    return mesh;\n  }\n}\nexport {\n  MD2CharacterComplex\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}