{"ast":null,"code":"import _classCallCheck from \"/home/krug/Coding/JavaScript/Websites/Personal/personal/node_modules/.pnpm/@babel+runtime@7.22.3/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/home/krug/Coding/JavaScript/Websites/Personal/personal/node_modules/.pnpm/@babel+runtime@7.22.3/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"/home/krug/Coding/JavaScript/Websites/Personal/personal/node_modules/.pnpm/@babel+runtime@7.22.3/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/home/krug/Coding/JavaScript/Websites/Personal/personal/node_modules/.pnpm/@babel+runtime@7.22.3/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { Vector2, RGBAFormat, MeshNormalMaterial, ShaderMaterial, Vector4, WebGLRenderTarget, DepthTexture, NearestFilter } from \"three\";\nimport { Pass, FullScreenQuad } from \"./Pass.js\";\nvar RenderPixelatedPass = /*#__PURE__*/function (_Pass) {\n  _inherits(RenderPixelatedPass, _Pass);\n  var _super = _createSuper(RenderPixelatedPass);\n  function RenderPixelatedPass(resolution, pixelSize, scene, camera) {\n    var _this;\n    var options = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : {};\n    _classCallCheck(this, RenderPixelatedPass);\n    var _a, _b;\n    _this = _super.call(this);\n    _this.pixelSize = pixelSize;\n    _this.resolution = new Vector2();\n    _this.renderResolution = new Vector2();\n    _this.setSize(resolution.x, resolution.y);\n    _this.fsQuad = new FullScreenQuad(_this.material());\n    _this.scene = scene;\n    _this.camera = camera;\n    _this.normalEdgeStrength = (_a = options.normalEdgeStrength) != null ? _a : 0.3;\n    _this.depthEdgeStrength = (_b = options.depthEdgeStrength) != null ? _b : 0.4;\n    _this.rgbRenderTarget = pixelRenderTarget(_this.renderResolution, RGBAFormat, true);\n    _this.normalRenderTarget = pixelRenderTarget(_this.renderResolution, RGBAFormat, false);\n    _this.normalMaterial = new MeshNormalMaterial();\n    return _this;\n  }\n  _createClass(RenderPixelatedPass, [{\n    key: \"dispose\",\n    value: function dispose() {\n      this.rgbRenderTarget.dispose();\n      this.normalRenderTarget.dispose();\n      this.fsQuad.dispose();\n    }\n  }, {\n    key: \"setSize\",\n    value: function setSize(width, height) {\n      var _a, _b, _c;\n      this.resolution.set(width, height);\n      this.renderResolution.set(width / this.pixelSize | 0, height / this.pixelSize | 0);\n      var _this$renderResolutio = this.renderResolution,\n        x = _this$renderResolutio.x,\n        y = _this$renderResolutio.y;\n      (_a = this.rgbRenderTarget) == null ? void 0 : _a.setSize(x, y);\n      (_b = this.normalRenderTarget) == null ? void 0 : _b.setSize(x, y);\n      (_c = this.fsQuad) == null ? void 0 : _c.material.uniforms.resolution.value.set(x, y, 1 / x, 1 / y);\n    }\n  }, {\n    key: \"setPixelSize\",\n    value: function setPixelSize(pixelSize) {\n      this.pixelSize = pixelSize;\n      this.setSize(this.resolution.x, this.resolution.y);\n    }\n  }, {\n    key: \"render\",\n    value: function render(renderer, writeBuffer) {\n      var uniforms = this.fsQuad.material.uniforms;\n      uniforms.normalEdgeStrength.value = this.normalEdgeStrength;\n      uniforms.depthEdgeStrength.value = this.depthEdgeStrength;\n      renderer.setRenderTarget(this.rgbRenderTarget);\n      renderer.render(this.scene, this.camera);\n      var overrideMaterial_old = this.scene.overrideMaterial;\n      renderer.setRenderTarget(this.normalRenderTarget);\n      this.scene.overrideMaterial = this.normalMaterial;\n      renderer.render(this.scene, this.camera);\n      this.scene.overrideMaterial = overrideMaterial_old;\n      uniforms.tDiffuse.value = this.rgbRenderTarget.texture;\n      uniforms.tDepth.value = this.rgbRenderTarget.depthTexture;\n      uniforms.tNormal.value = this.normalRenderTarget.texture;\n      if (this.renderToScreen) {\n        renderer.setRenderTarget(null);\n      } else {\n        renderer.setRenderTarget(writeBuffer);\n        if (this.clear) renderer.clear();\n      }\n      this.fsQuad.render(renderer);\n    }\n  }, {\n    key: \"material\",\n    value: function material() {\n      return new ShaderMaterial({\n        uniforms: {\n          tDiffuse: {\n            value: null\n          },\n          tDepth: {\n            value: null\n          },\n          tNormal: {\n            value: null\n          },\n          resolution: {\n            value: new Vector4(this.renderResolution.x, this.renderResolution.y, 1 / this.renderResolution.x, 1 / this.renderResolution.y)\n          },\n          normalEdgeStrength: {\n            value: 0\n          },\n          depthEdgeStrength: {\n            value: 0\n          }\n        },\n        vertexShader: \"\\n\\t\\t\\t\\tvarying vec2 vUv;\\n\\n\\t\\t\\t\\tvoid main() {\\n\\n\\t\\t\\t\\t\\tvUv = uv;\\n\\t\\t\\t\\t\\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\\n\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\t\",\n        fragmentShader: \"\\n\\t\\t\\t\\tuniform sampler2D tDiffuse;\\n\\t\\t\\t\\tuniform sampler2D tDepth;\\n\\t\\t\\t\\tuniform sampler2D tNormal;\\n\\t\\t\\t\\tuniform vec4 resolution;\\n\\t\\t\\t\\tuniform float normalEdgeStrength;\\n\\t\\t\\t\\tuniform float depthEdgeStrength;\\n\\t\\t\\t\\tvarying vec2 vUv;\\n\\n\\t\\t\\t\\tfloat getDepth(int x, int y) {\\n\\n\\t\\t\\t\\t\\treturn texture2D( tDepth, vUv + vec2(x, y) * resolution.zw ).r;\\n\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\tvec3 getNormal(int x, int y) {\\n\\n\\t\\t\\t\\t\\treturn texture2D( tNormal, vUv + vec2(x, y) * resolution.zw ).rgb * 2.0 - 1.0;\\n\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\tfloat depthEdgeIndicator(float depth, vec3 normal) {\\n\\n\\t\\t\\t\\t\\tfloat diff = 0.0;\\n\\t\\t\\t\\t\\tdiff += clamp(getDepth(1, 0) - depth, 0.0, 1.0);\\n\\t\\t\\t\\t\\tdiff += clamp(getDepth(-1, 0) - depth, 0.0, 1.0);\\n\\t\\t\\t\\t\\tdiff += clamp(getDepth(0, 1) - depth, 0.0, 1.0);\\n\\t\\t\\t\\t\\tdiff += clamp(getDepth(0, -1) - depth, 0.0, 1.0);\\n\\t\\t\\t\\t\\treturn floor(smoothstep(0.01, 0.02, diff) * 2.) / 2.;\\n\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\tfloat neighborNormalEdgeIndicator(int x, int y, float depth, vec3 normal) {\\n\\n\\t\\t\\t\\t\\tfloat depthDiff = getDepth(x, y) - depth;\\n\\t\\t\\t\\t\\tvec3 neighborNormal = getNormal(x, y);\\n\\t\\t\\t\\t\\t\\n\\t\\t\\t\\t\\t// Edge pixels should yield to faces who's normals are closer to the bias normal.\\n\\t\\t\\t\\t\\tvec3 normalEdgeBias = vec3(1., 1., 1.); // This should probably be a parameter.\\n\\t\\t\\t\\t\\tfloat normalDiff = dot(normal - neighborNormal, normalEdgeBias);\\n\\t\\t\\t\\t\\tfloat normalIndicator = clamp(smoothstep(-.01, .01, normalDiff), 0.0, 1.0);\\n\\t\\t\\t\\t\\t\\n\\t\\t\\t\\t\\t// Only the shallower pixel should detect the normal edge.\\n\\t\\t\\t\\t\\tfloat depthIndicator = clamp(sign(depthDiff * .25 + .0025), 0.0, 1.0);\\n\\n\\t\\t\\t\\t\\treturn (1.0 - dot(normal, neighborNormal)) * depthIndicator * normalIndicator;\\n\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\tfloat normalEdgeIndicator(float depth, vec3 normal) {\\n\\t\\t\\t\\t\\t\\n\\t\\t\\t\\t\\tfloat indicator = 0.0;\\n\\n\\t\\t\\t\\t\\tindicator += neighborNormalEdgeIndicator(0, -1, depth, normal);\\n\\t\\t\\t\\t\\tindicator += neighborNormalEdgeIndicator(0, 1, depth, normal);\\n\\t\\t\\t\\t\\tindicator += neighborNormalEdgeIndicator(-1, 0, depth, normal);\\n\\t\\t\\t\\t\\tindicator += neighborNormalEdgeIndicator(1, 0, depth, normal);\\n\\n\\t\\t\\t\\t\\treturn step(0.1, indicator);\\n\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\tvoid main() {\\n\\n\\t\\t\\t\\t\\tvec4 texel = texture2D( tDiffuse, vUv );\\n\\n\\t\\t\\t\\t\\tfloat depth = 0.0;\\n\\t\\t\\t\\t\\tvec3 normal = vec3(0.0);\\n\\n\\t\\t\\t\\t\\tif (depthEdgeStrength > 0.0 || normalEdgeStrength > 0.0) {\\n\\n\\t\\t\\t\\t\\t\\tdepth = getDepth(0, 0);\\n\\t\\t\\t\\t\\t\\tnormal = getNormal(0, 0);\\n\\n\\t\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t\\tfloat dei = 0.0;\\n\\t\\t\\t\\t\\tif (depthEdgeStrength > 0.0) \\n\\t\\t\\t\\t\\t\\tdei = depthEdgeIndicator(depth, normal);\\n\\n\\t\\t\\t\\t\\tfloat nei = 0.0; \\n\\t\\t\\t\\t\\tif (normalEdgeStrength > 0.0) \\n\\t\\t\\t\\t\\t\\tnei = normalEdgeIndicator(depth, normal);\\n\\n\\t\\t\\t\\t\\tfloat Strength = dei > 0.0 ? (1.0 - depthEdgeStrength * dei) : (1.0 + normalEdgeStrength * nei);\\n\\n\\t\\t\\t\\t\\tgl_FragColor = texel * Strength;\\n\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\t\"\n      });\n    }\n  }]);\n  return RenderPixelatedPass;\n}(Pass);\nfunction pixelRenderTarget(resolution, pixelFormat, useDepthTexture) {\n  var renderTarget = new WebGLRenderTarget(resolution.x, resolution.y, !useDepthTexture ? void 0 : {\n    depthTexture: new DepthTexture(resolution.x, resolution.y),\n    depthBuffer: true\n  });\n  renderTarget.texture.format = pixelFormat;\n  renderTarget.texture.minFilter = NearestFilter;\n  renderTarget.texture.magFilter = NearestFilter;\n  renderTarget.texture.generateMipmaps = false;\n  renderTarget.stencilBuffer = false;\n  return renderTarget;\n}\nexport { RenderPixelatedPass };","map":{"version":3,"names":["Vector2","RGBAFormat","MeshNormalMaterial","ShaderMaterial","Vector4","WebGLRenderTarget","DepthTexture","NearestFilter","Pass","FullScreenQuad","RenderPixelatedPass","_Pass","_inherits","_super","_createSuper","resolution","pixelSize","scene","camera","_this","options","arguments","length","undefined","_classCallCheck","_a","_b","call","renderResolution","setSize","x","y","fsQuad","material","normalEdgeStrength","depthEdgeStrength","rgbRenderTarget","pixelRenderTarget","normalRenderTarget","normalMaterial","_createClass","key","value","dispose","width","height","_c","set","_this$renderResolutio","uniforms","setPixelSize","render","renderer","writeBuffer","setRenderTarget","overrideMaterial_old","overrideMaterial","tDiffuse","texture","tDepth","depthTexture","tNormal","renderToScreen","clear","vertexShader","fragmentShader","pixelFormat","useDepthTexture","renderTarget","depthBuffer","format","minFilter","magFilter","generateMipmaps","stencilBuffer"],"sources":["/home/krug/Coding/JavaScript/Websites/Personal/personal/node_modules/.pnpm/three-stdlib@2.23.7_three@0.151.3/node_modules/three-stdlib/postprocessing/RenderPixelatedPass.js"],"sourcesContent":["import { Vector2, RGBAFormat, MeshNormalMaterial, ShaderMaterial, Vector4, WebGLRenderTarget, DepthTexture, NearestFilter } from \"three\";\nimport { Pass, FullScreenQuad } from \"./Pass.js\";\nclass RenderPixelatedPass extends Pass {\n  constructor(resolution, pixelSize, scene, camera, options = {}) {\n    var _a, _b;\n    super();\n    this.pixelSize = pixelSize;\n    this.resolution = new Vector2();\n    this.renderResolution = new Vector2();\n    this.setSize(resolution.x, resolution.y);\n    this.fsQuad = new FullScreenQuad(this.material());\n    this.scene = scene;\n    this.camera = camera;\n    this.normalEdgeStrength = (_a = options.normalEdgeStrength) != null ? _a : 0.3;\n    this.depthEdgeStrength = (_b = options.depthEdgeStrength) != null ? _b : 0.4;\n    this.rgbRenderTarget = pixelRenderTarget(this.renderResolution, RGBAFormat, true);\n    this.normalRenderTarget = pixelRenderTarget(this.renderResolution, RGBAFormat, false);\n    this.normalMaterial = new MeshNormalMaterial();\n  }\n  dispose() {\n    this.rgbRenderTarget.dispose();\n    this.normalRenderTarget.dispose();\n    this.fsQuad.dispose();\n  }\n  setSize(width, height) {\n    var _a, _b, _c;\n    this.resolution.set(width, height);\n    this.renderResolution.set(width / this.pixelSize | 0, height / this.pixelSize | 0);\n    const { x, y } = this.renderResolution;\n    (_a = this.rgbRenderTarget) == null ? void 0 : _a.setSize(x, y);\n    (_b = this.normalRenderTarget) == null ? void 0 : _b.setSize(x, y);\n    (_c = this.fsQuad) == null ? void 0 : _c.material.uniforms.resolution.value.set(x, y, 1 / x, 1 / y);\n  }\n  setPixelSize(pixelSize) {\n    this.pixelSize = pixelSize;\n    this.setSize(this.resolution.x, this.resolution.y);\n  }\n  render(renderer, writeBuffer) {\n    const uniforms = this.fsQuad.material.uniforms;\n    uniforms.normalEdgeStrength.value = this.normalEdgeStrength;\n    uniforms.depthEdgeStrength.value = this.depthEdgeStrength;\n    renderer.setRenderTarget(this.rgbRenderTarget);\n    renderer.render(this.scene, this.camera);\n    const overrideMaterial_old = this.scene.overrideMaterial;\n    renderer.setRenderTarget(this.normalRenderTarget);\n    this.scene.overrideMaterial = this.normalMaterial;\n    renderer.render(this.scene, this.camera);\n    this.scene.overrideMaterial = overrideMaterial_old;\n    uniforms.tDiffuse.value = this.rgbRenderTarget.texture;\n    uniforms.tDepth.value = this.rgbRenderTarget.depthTexture;\n    uniforms.tNormal.value = this.normalRenderTarget.texture;\n    if (this.renderToScreen) {\n      renderer.setRenderTarget(null);\n    } else {\n      renderer.setRenderTarget(writeBuffer);\n      if (this.clear)\n        renderer.clear();\n    }\n    this.fsQuad.render(renderer);\n  }\n  material() {\n    return new ShaderMaterial({\n      uniforms: {\n        tDiffuse: { value: null },\n        tDepth: { value: null },\n        tNormal: { value: null },\n        resolution: {\n          value: new Vector4(\n            this.renderResolution.x,\n            this.renderResolution.y,\n            1 / this.renderResolution.x,\n            1 / this.renderResolution.y\n          )\n        },\n        normalEdgeStrength: { value: 0 },\n        depthEdgeStrength: { value: 0 }\n      },\n      vertexShader: `\n\t\t\t\tvarying vec2 vUv;\n\n\t\t\t\tvoid main() {\n\n\t\t\t\t\tvUv = uv;\n\t\t\t\t\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n\n\t\t\t\t}\n\t\t\t\t`,\n      fragmentShader: `\n\t\t\t\tuniform sampler2D tDiffuse;\n\t\t\t\tuniform sampler2D tDepth;\n\t\t\t\tuniform sampler2D tNormal;\n\t\t\t\tuniform vec4 resolution;\n\t\t\t\tuniform float normalEdgeStrength;\n\t\t\t\tuniform float depthEdgeStrength;\n\t\t\t\tvarying vec2 vUv;\n\n\t\t\t\tfloat getDepth(int x, int y) {\n\n\t\t\t\t\treturn texture2D( tDepth, vUv + vec2(x, y) * resolution.zw ).r;\n\n\t\t\t\t}\n\n\t\t\t\tvec3 getNormal(int x, int y) {\n\n\t\t\t\t\treturn texture2D( tNormal, vUv + vec2(x, y) * resolution.zw ).rgb * 2.0 - 1.0;\n\n\t\t\t\t}\n\n\t\t\t\tfloat depthEdgeIndicator(float depth, vec3 normal) {\n\n\t\t\t\t\tfloat diff = 0.0;\n\t\t\t\t\tdiff += clamp(getDepth(1, 0) - depth, 0.0, 1.0);\n\t\t\t\t\tdiff += clamp(getDepth(-1, 0) - depth, 0.0, 1.0);\n\t\t\t\t\tdiff += clamp(getDepth(0, 1) - depth, 0.0, 1.0);\n\t\t\t\t\tdiff += clamp(getDepth(0, -1) - depth, 0.0, 1.0);\n\t\t\t\t\treturn floor(smoothstep(0.01, 0.02, diff) * 2.) / 2.;\n\n\t\t\t\t}\n\n\t\t\t\tfloat neighborNormalEdgeIndicator(int x, int y, float depth, vec3 normal) {\n\n\t\t\t\t\tfloat depthDiff = getDepth(x, y) - depth;\n\t\t\t\t\tvec3 neighborNormal = getNormal(x, y);\n\t\t\t\t\t\n\t\t\t\t\t// Edge pixels should yield to faces who's normals are closer to the bias normal.\n\t\t\t\t\tvec3 normalEdgeBias = vec3(1., 1., 1.); // This should probably be a parameter.\n\t\t\t\t\tfloat normalDiff = dot(normal - neighborNormal, normalEdgeBias);\n\t\t\t\t\tfloat normalIndicator = clamp(smoothstep(-.01, .01, normalDiff), 0.0, 1.0);\n\t\t\t\t\t\n\t\t\t\t\t// Only the shallower pixel should detect the normal edge.\n\t\t\t\t\tfloat depthIndicator = clamp(sign(depthDiff * .25 + .0025), 0.0, 1.0);\n\n\t\t\t\t\treturn (1.0 - dot(normal, neighborNormal)) * depthIndicator * normalIndicator;\n\n\t\t\t\t}\n\n\t\t\t\tfloat normalEdgeIndicator(float depth, vec3 normal) {\n\t\t\t\t\t\n\t\t\t\t\tfloat indicator = 0.0;\n\n\t\t\t\t\tindicator += neighborNormalEdgeIndicator(0, -1, depth, normal);\n\t\t\t\t\tindicator += neighborNormalEdgeIndicator(0, 1, depth, normal);\n\t\t\t\t\tindicator += neighborNormalEdgeIndicator(-1, 0, depth, normal);\n\t\t\t\t\tindicator += neighborNormalEdgeIndicator(1, 0, depth, normal);\n\n\t\t\t\t\treturn step(0.1, indicator);\n\n\t\t\t\t}\n\n\t\t\t\tvoid main() {\n\n\t\t\t\t\tvec4 texel = texture2D( tDiffuse, vUv );\n\n\t\t\t\t\tfloat depth = 0.0;\n\t\t\t\t\tvec3 normal = vec3(0.0);\n\n\t\t\t\t\tif (depthEdgeStrength > 0.0 || normalEdgeStrength > 0.0) {\n\n\t\t\t\t\t\tdepth = getDepth(0, 0);\n\t\t\t\t\t\tnormal = getNormal(0, 0);\n\n\t\t\t\t\t}\n\n\t\t\t\t\tfloat dei = 0.0;\n\t\t\t\t\tif (depthEdgeStrength > 0.0) \n\t\t\t\t\t\tdei = depthEdgeIndicator(depth, normal);\n\n\t\t\t\t\tfloat nei = 0.0; \n\t\t\t\t\tif (normalEdgeStrength > 0.0) \n\t\t\t\t\t\tnei = normalEdgeIndicator(depth, normal);\n\n\t\t\t\t\tfloat Strength = dei > 0.0 ? (1.0 - depthEdgeStrength * dei) : (1.0 + normalEdgeStrength * nei);\n\n\t\t\t\t\tgl_FragColor = texel * Strength;\n\n\t\t\t\t}\n\t\t\t\t`\n    });\n  }\n}\nfunction pixelRenderTarget(resolution, pixelFormat, useDepthTexture) {\n  const renderTarget = new WebGLRenderTarget(\n    resolution.x,\n    resolution.y,\n    !useDepthTexture ? void 0 : {\n      depthTexture: new DepthTexture(resolution.x, resolution.y),\n      depthBuffer: true\n    }\n  );\n  renderTarget.texture.format = pixelFormat;\n  renderTarget.texture.minFilter = NearestFilter;\n  renderTarget.texture.magFilter = NearestFilter;\n  renderTarget.texture.generateMipmaps = false;\n  renderTarget.stencilBuffer = false;\n  return renderTarget;\n}\nexport {\n  RenderPixelatedPass\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}