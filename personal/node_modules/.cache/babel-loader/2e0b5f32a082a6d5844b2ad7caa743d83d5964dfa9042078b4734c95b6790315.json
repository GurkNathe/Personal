{"ast":null,"code":"var __defProp = Object.defineProperty;\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value\n}) : obj[key] = value;\nvar __publicField = (obj, key, value) => {\n  __defNormalProp(obj, typeof key !== \"symbol\" ? key + \"\" : key, value);\n  return value;\n};\nimport { Vector3, Quaternion, Matrix4 } from \"three\";\nimport { CharsetEncoder } from \"mmd-parser\";\nclass MMDExporter {\n  constructor() {\n    // Unicode to Shift_JIS table\n    __publicField(this, \"u2sTable\");\n  }\n  /* TODO: implement\n  // mesh -> pmd\n  this.parsePmd = function ( object ) {\n  };\n  */\n  /* TODO: implement\n  // mesh -> pmx\n  this.parsePmx = function ( object ) {\n  };\n  */\n  /* TODO: implement\n  // animation + skeleton -> vmd\n  this.parseVmd = function ( object ) {\n  };\n  */\n  /*\n   * skeleton -> vpd\n   * Returns Shift_JIS encoded Uint8Array. Otherwise return strings.\n   */\n  parseVpd(skin, outputShiftJis, useOriginalBones) {\n    if (skin.isSkinnedMesh !== true) {\n      console.warn(\"THREE.MMDExporter: parseVpd() requires SkinnedMesh instance.\");\n      return null;\n    }\n    function toStringsFromNumber(num) {\n      if (Math.abs(num) < 1e-6) num = 0;\n      let a = num.toString();\n      if (a.indexOf(\".\") === -1) {\n        a += \".\";\n      }\n      a += \"000000\";\n      const index = a.indexOf(\".\");\n      const d = a.slice(0, index);\n      const p = a.slice(index + 1, index + 7);\n      return d + \".\" + p;\n    }\n    function toStringsFromArray(array2) {\n      const a = [];\n      for (let i = 0, il = array2.length; i < il; i++) {\n        a.push(toStringsFromNumber(array2[i]));\n      }\n      return a.join(\",\");\n    }\n    skin.updateMatrixWorld(true);\n    const bones = skin.skeleton.bones;\n    const bones2 = this.getBindBones(skin);\n    const position = new Vector3();\n    const quaternion = new Quaternion();\n    const quaternion2 = new Quaternion();\n    const matrix = new Matrix4();\n    const array = [];\n    array.push(\"Vocaloid Pose Data file\");\n    array.push(\"\");\n    array.push((skin.name !== \"\" ? skin.name.replace(/\\s/g, \"_\") : \"skin\") + \".osm;\");\n    array.push(bones.length + \";\");\n    array.push(\"\");\n    for (let i = 0, il = bones.length; i < il; i++) {\n      const bone = bones[i];\n      const bone2 = bones2[i];\n      if (useOriginalBones === true && bone.userData.ik !== void 0 && bone.userData.ik.originalMatrix !== void 0) {\n        matrix.fromArray(bone.userData.ik.originalMatrix);\n      } else {\n        matrix.copy(bone.matrix);\n      }\n      position.setFromMatrixPosition(matrix);\n      quaternion.setFromRotationMatrix(matrix);\n      const pArray = position.sub(bone2.position).toArray();\n      const qArray = quaternion2.copy(bone2.quaternion).conjugate().multiply(quaternion).toArray();\n      pArray[2] = -pArray[2];\n      qArray[0] = -qArray[0];\n      qArray[1] = -qArray[1];\n      array.push(\"Bone\" + i + \"{\" + bone.name);\n      array.push(\"  \" + toStringsFromArray(pArray) + \";\");\n      array.push(\"  \" + toStringsFromArray(qArray) + \";\");\n      array.push(\"}\");\n      array.push(\"\");\n    }\n    array.push(\"\");\n    const lines = array.join(\"\\n\");\n    return outputShiftJis === true ? this.unicodeToShiftjis(lines) : lines;\n  }\n  unicodeToShiftjis(str) {\n    if (this.u2sTable === void 0) {\n      const encoder = new CharsetEncoder();\n      const table = encoder.s2uTable;\n      this.u2sTable = {};\n      const keys = Object.keys(table);\n      for (let i = 0, il = keys.length; i < il; i++) {\n        let key = keys[i];\n        const value = table[key];\n        this.u2sTable[value] = parseInt(key);\n      }\n    }\n    const array = [];\n    for (let i = 0, il = str.length; i < il; i++) {\n      const code = str.charCodeAt(i);\n      const value = this.u2sTable[code];\n      if (value === void 0) {\n        throw \"cannot convert charcode 0x\" + code.toString(16);\n      } else if (value > 255) {\n        array.push(value >> 8 & 255);\n        array.push(value & 255);\n      } else {\n        array.push(value & 255);\n      }\n    }\n    return new Uint8Array(array);\n  }\n  getBindBones(skin) {\n    const poseSkin = skin.clone();\n    poseSkin.pose();\n    return poseSkin.skeleton.bones;\n  }\n}\nexport { MMDExporter };","map":{"version":3,"names":["__defProp","Object","defineProperty","__defNormalProp","obj","key","value","enumerable","configurable","writable","__publicField","Vector3","Quaternion","Matrix4","CharsetEncoder","MMDExporter","constructor","parseVpd","skin","outputShiftJis","useOriginalBones","isSkinnedMesh","console","warn","toStringsFromNumber","num","Math","abs","a","toString","indexOf","index","d","slice","p","toStringsFromArray","array2","i","il","length","push","join","updateMatrixWorld","bones","skeleton","bones2","getBindBones","position","quaternion","quaternion2","matrix","array","name","replace","bone","bone2","userData","ik","originalMatrix","fromArray","copy","setFromMatrixPosition","setFromRotationMatrix","pArray","sub","toArray","qArray","conjugate","multiply","lines","unicodeToShiftjis","str","u2sTable","encoder","table","s2uTable","keys","parseInt","code","charCodeAt","Uint8Array","poseSkin","clone","pose"],"sources":["/home/krug/Coding/JavaScript/Websites/Personal/personal/node_modules/.pnpm/three-stdlib@2.23.7_three@0.151.3/node_modules/three-stdlib/exporters/MMDExporter.js"],"sourcesContent":["var __defProp = Object.defineProperty;\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;\nvar __publicField = (obj, key, value) => {\n  __defNormalProp(obj, typeof key !== \"symbol\" ? key + \"\" : key, value);\n  return value;\n};\nimport { Vector3, Quaternion, Matrix4 } from \"three\";\nimport { CharsetEncoder } from \"mmd-parser\";\nclass MMDExporter {\n  constructor() {\n    // Unicode to Shift_JIS table\n    __publicField(this, \"u2sTable\");\n  }\n  /* TODO: implement\n  // mesh -> pmd\n  this.parsePmd = function ( object ) {\n  };\n  */\n  /* TODO: implement\n  // mesh -> pmx\n  this.parsePmx = function ( object ) {\n  };\n  */\n  /* TODO: implement\n  // animation + skeleton -> vmd\n  this.parseVmd = function ( object ) {\n  };\n  */\n  /*\n   * skeleton -> vpd\n   * Returns Shift_JIS encoded Uint8Array. Otherwise return strings.\n   */\n  parseVpd(skin, outputShiftJis, useOriginalBones) {\n    if (skin.isSkinnedMesh !== true) {\n      console.warn(\"THREE.MMDExporter: parseVpd() requires SkinnedMesh instance.\");\n      return null;\n    }\n    function toStringsFromNumber(num) {\n      if (Math.abs(num) < 1e-6)\n        num = 0;\n      let a = num.toString();\n      if (a.indexOf(\".\") === -1) {\n        a += \".\";\n      }\n      a += \"000000\";\n      const index = a.indexOf(\".\");\n      const d = a.slice(0, index);\n      const p = a.slice(index + 1, index + 7);\n      return d + \".\" + p;\n    }\n    function toStringsFromArray(array2) {\n      const a = [];\n      for (let i = 0, il = array2.length; i < il; i++) {\n        a.push(toStringsFromNumber(array2[i]));\n      }\n      return a.join(\",\");\n    }\n    skin.updateMatrixWorld(true);\n    const bones = skin.skeleton.bones;\n    const bones2 = this.getBindBones(skin);\n    const position = new Vector3();\n    const quaternion = new Quaternion();\n    const quaternion2 = new Quaternion();\n    const matrix = new Matrix4();\n    const array = [];\n    array.push(\"Vocaloid Pose Data file\");\n    array.push(\"\");\n    array.push((skin.name !== \"\" ? skin.name.replace(/\\s/g, \"_\") : \"skin\") + \".osm;\");\n    array.push(bones.length + \";\");\n    array.push(\"\");\n    for (let i = 0, il = bones.length; i < il; i++) {\n      const bone = bones[i];\n      const bone2 = bones2[i];\n      if (useOriginalBones === true && bone.userData.ik !== void 0 && bone.userData.ik.originalMatrix !== void 0) {\n        matrix.fromArray(bone.userData.ik.originalMatrix);\n      } else {\n        matrix.copy(bone.matrix);\n      }\n      position.setFromMatrixPosition(matrix);\n      quaternion.setFromRotationMatrix(matrix);\n      const pArray = position.sub(bone2.position).toArray();\n      const qArray = quaternion2.copy(bone2.quaternion).conjugate().multiply(quaternion).toArray();\n      pArray[2] = -pArray[2];\n      qArray[0] = -qArray[0];\n      qArray[1] = -qArray[1];\n      array.push(\"Bone\" + i + \"{\" + bone.name);\n      array.push(\"  \" + toStringsFromArray(pArray) + \";\");\n      array.push(\"  \" + toStringsFromArray(qArray) + \";\");\n      array.push(\"}\");\n      array.push(\"\");\n    }\n    array.push(\"\");\n    const lines = array.join(\"\\n\");\n    return outputShiftJis === true ? this.unicodeToShiftjis(lines) : lines;\n  }\n  unicodeToShiftjis(str) {\n    if (this.u2sTable === void 0) {\n      const encoder = new CharsetEncoder();\n      const table = encoder.s2uTable;\n      this.u2sTable = {};\n      const keys = Object.keys(table);\n      for (let i = 0, il = keys.length; i < il; i++) {\n        let key = keys[i];\n        const value = table[key];\n        this.u2sTable[value] = parseInt(key);\n      }\n    }\n    const array = [];\n    for (let i = 0, il = str.length; i < il; i++) {\n      const code = str.charCodeAt(i);\n      const value = this.u2sTable[code];\n      if (value === void 0) {\n        throw \"cannot convert charcode 0x\" + code.toString(16);\n      } else if (value > 255) {\n        array.push(value >> 8 & 255);\n        array.push(value & 255);\n      } else {\n        array.push(value & 255);\n      }\n    }\n    return new Uint8Array(array);\n  }\n  getBindBones(skin) {\n    const poseSkin = skin.clone();\n    poseSkin.pose();\n    return poseSkin.skeleton.bones;\n  }\n}\nexport {\n  MMDExporter\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}