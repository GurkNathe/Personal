{"ast":null,"code":"import _classCallCheck from \"/home/krug/Coding/JavaScript/Websites/Personal/personal/node_modules/.pnpm/@babel+runtime@7.22.3/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/home/krug/Coding/JavaScript/Websites/Personal/personal/node_modules/.pnpm/@babel+runtime@7.22.3/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nvar __defProp = Object.defineProperty;\nvar __defNormalProp = function __defNormalProp(obj, key, value) {\n  return key in obj ? __defProp(obj, key, {\n    enumerable: true,\n    configurable: true,\n    writable: true,\n    value: value\n  }) : obj[key] = value;\n};\nvar __publicField = function __publicField(obj, key, value) {\n  __defNormalProp(obj, typeof key !== \"symbol\" ? key + \"\" : key, value);\n  return value;\n};\nimport { LinearFilter, RGBAFormat, Vector2, WebGLRenderTarget, Clock } from \"three\";\nimport { CopyShader } from \"../shaders/CopyShader.js\";\nimport { ShaderPass } from \"./ShaderPass.js\";\nimport { MaskPass, ClearMaskPass } from \"./MaskPass.js\";\nvar EffectComposer = /*#__PURE__*/function () {\n  function EffectComposer(renderer, renderTarget) {\n    _classCallCheck(this, EffectComposer);\n    __publicField(this, \"renderer\");\n    __publicField(this, \"_pixelRatio\");\n    __publicField(this, \"_width\");\n    __publicField(this, \"_height\");\n    __publicField(this, \"renderTarget1\");\n    __publicField(this, \"renderTarget2\");\n    __publicField(this, \"writeBuffer\");\n    __publicField(this, \"readBuffer\");\n    __publicField(this, \"renderToScreen\");\n    __publicField(this, \"passes\", []);\n    __publicField(this, \"copyPass\");\n    __publicField(this, \"clock\");\n    this.renderer = renderer;\n    if (renderTarget === void 0) {\n      var parameters = {\n        minFilter: LinearFilter,\n        magFilter: LinearFilter,\n        format: RGBAFormat\n      };\n      var size = renderer.getSize(new Vector2());\n      this._pixelRatio = renderer.getPixelRatio();\n      this._width = size.width;\n      this._height = size.height;\n      renderTarget = new WebGLRenderTarget(this._width * this._pixelRatio, this._height * this._pixelRatio, parameters);\n      renderTarget.texture.name = \"EffectComposer.rt1\";\n    } else {\n      this._pixelRatio = 1;\n      this._width = renderTarget.width;\n      this._height = renderTarget.height;\n    }\n    this.renderTarget1 = renderTarget;\n    this.renderTarget2 = renderTarget.clone();\n    this.renderTarget2.texture.name = \"EffectComposer.rt2\";\n    this.writeBuffer = this.renderTarget1;\n    this.readBuffer = this.renderTarget2;\n    this.renderToScreen = true;\n    if (CopyShader === void 0) {\n      console.error(\"THREE.EffectComposer relies on CopyShader\");\n    }\n    if (ShaderPass === void 0) {\n      console.error(\"THREE.EffectComposer relies on ShaderPass\");\n    }\n    this.copyPass = new ShaderPass(CopyShader);\n    this.clock = new Clock();\n  }\n  _createClass(EffectComposer, [{\n    key: \"swapBuffers\",\n    value: function swapBuffers() {\n      var tmp = this.readBuffer;\n      this.readBuffer = this.writeBuffer;\n      this.writeBuffer = tmp;\n    }\n  }, {\n    key: \"addPass\",\n    value: function addPass(pass) {\n      this.passes.push(pass);\n      pass.setSize(this._width * this._pixelRatio, this._height * this._pixelRatio);\n    }\n  }, {\n    key: \"insertPass\",\n    value: function insertPass(pass, index) {\n      this.passes.splice(index, 0, pass);\n      pass.setSize(this._width * this._pixelRatio, this._height * this._pixelRatio);\n    }\n  }, {\n    key: \"removePass\",\n    value: function removePass(pass) {\n      var index = this.passes.indexOf(pass);\n      if (index !== -1) {\n        this.passes.splice(index, 1);\n      }\n    }\n  }, {\n    key: \"isLastEnabledPass\",\n    value: function isLastEnabledPass(passIndex) {\n      for (var i = passIndex + 1; i < this.passes.length; i++) {\n        if (this.passes[i].enabled) {\n          return false;\n        }\n      }\n      return true;\n    }\n  }, {\n    key: \"render\",\n    value: function render(deltaTime) {\n      if (deltaTime === void 0) {\n        deltaTime = this.clock.getDelta();\n      }\n      var currentRenderTarget = this.renderer.getRenderTarget();\n      var maskActive = false;\n      var il = this.passes.length;\n      for (var i = 0; i < il; i++) {\n        var pass = this.passes[i];\n        if (pass.enabled === false) continue;\n        pass.renderToScreen = this.renderToScreen && this.isLastEnabledPass(i);\n        pass.render(this.renderer, this.writeBuffer, this.readBuffer, deltaTime, maskActive);\n        if (pass.needsSwap) {\n          if (maskActive) {\n            var context = this.renderer.getContext();\n            var stencil = this.renderer.state.buffers.stencil;\n            stencil.setFunc(context.NOTEQUAL, 1, 4294967295);\n            this.copyPass.render(this.renderer, this.writeBuffer, this.readBuffer, deltaTime);\n            stencil.setFunc(context.EQUAL, 1, 4294967295);\n          }\n          this.swapBuffers();\n        }\n        if (MaskPass !== void 0) {\n          if (pass instanceof MaskPass) {\n            maskActive = true;\n          } else if (pass instanceof ClearMaskPass) {\n            maskActive = false;\n          }\n        }\n      }\n      this.renderer.setRenderTarget(currentRenderTarget);\n    }\n  }, {\n    key: \"reset\",\n    value: function reset(renderTarget) {\n      if (renderTarget === void 0) {\n        var size = this.renderer.getSize(new Vector2());\n        this._pixelRatio = this.renderer.getPixelRatio();\n        this._width = size.width;\n        this._height = size.height;\n        renderTarget = this.renderTarget1.clone();\n        renderTarget.setSize(this._width * this._pixelRatio, this._height * this._pixelRatio);\n      }\n      this.renderTarget1.dispose();\n      this.renderTarget2.dispose();\n      this.renderTarget1 = renderTarget;\n      this.renderTarget2 = renderTarget.clone();\n      this.writeBuffer = this.renderTarget1;\n      this.readBuffer = this.renderTarget2;\n    }\n  }, {\n    key: \"setSize\",\n    value: function setSize(width, height) {\n      this._width = width;\n      this._height = height;\n      var effectiveWidth = this._width * this._pixelRatio;\n      var effectiveHeight = this._height * this._pixelRatio;\n      this.renderTarget1.setSize(effectiveWidth, effectiveHeight);\n      this.renderTarget2.setSize(effectiveWidth, effectiveHeight);\n      for (var i = 0; i < this.passes.length; i++) {\n        this.passes[i].setSize(effectiveWidth, effectiveHeight);\n      }\n    }\n  }, {\n    key: \"setPixelRatio\",\n    value: function setPixelRatio(pixelRatio) {\n      this._pixelRatio = pixelRatio;\n      this.setSize(this._width, this._height);\n    }\n  }]);\n  return EffectComposer;\n}();\nexport { EffectComposer };","map":{"version":3,"names":["__defProp","Object","defineProperty","__defNormalProp","obj","key","value","enumerable","configurable","writable","__publicField","LinearFilter","RGBAFormat","Vector2","WebGLRenderTarget","Clock","CopyShader","ShaderPass","MaskPass","ClearMaskPass","EffectComposer","renderer","renderTarget","_classCallCheck","parameters","minFilter","magFilter","format","size","getSize","_pixelRatio","getPixelRatio","_width","width","_height","height","texture","name","renderTarget1","renderTarget2","clone","writeBuffer","readBuffer","renderToScreen","console","error","copyPass","clock","_createClass","swapBuffers","tmp","addPass","pass","passes","push","setSize","insertPass","index","splice","removePass","indexOf","isLastEnabledPass","passIndex","i","length","enabled","render","deltaTime","getDelta","currentRenderTarget","getRenderTarget","maskActive","il","needsSwap","context","getContext","stencil","state","buffers","setFunc","NOTEQUAL","EQUAL","setRenderTarget","reset","dispose","effectiveWidth","effectiveHeight","setPixelRatio","pixelRatio"],"sources":["/home/krug/Coding/JavaScript/Websites/Personal/personal/node_modules/.pnpm/three-stdlib@2.23.7_three@0.151.3/node_modules/three-stdlib/postprocessing/EffectComposer.js"],"sourcesContent":["var __defProp = Object.defineProperty;\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;\nvar __publicField = (obj, key, value) => {\n  __defNormalProp(obj, typeof key !== \"symbol\" ? key + \"\" : key, value);\n  return value;\n};\nimport { LinearFilter, RGBAFormat, Vector2, WebGLRenderTarget, Clock } from \"three\";\nimport { CopyShader } from \"../shaders/CopyShader.js\";\nimport { ShaderPass } from \"./ShaderPass.js\";\nimport { MaskPass, ClearMaskPass } from \"./MaskPass.js\";\nclass EffectComposer {\n  constructor(renderer, renderTarget) {\n    __publicField(this, \"renderer\");\n    __publicField(this, \"_pixelRatio\");\n    __publicField(this, \"_width\");\n    __publicField(this, \"_height\");\n    __publicField(this, \"renderTarget1\");\n    __publicField(this, \"renderTarget2\");\n    __publicField(this, \"writeBuffer\");\n    __publicField(this, \"readBuffer\");\n    __publicField(this, \"renderToScreen\");\n    __publicField(this, \"passes\", []);\n    __publicField(this, \"copyPass\");\n    __publicField(this, \"clock\");\n    this.renderer = renderer;\n    if (renderTarget === void 0) {\n      const parameters = {\n        minFilter: LinearFilter,\n        magFilter: LinearFilter,\n        format: RGBAFormat\n      };\n      const size = renderer.getSize(new Vector2());\n      this._pixelRatio = renderer.getPixelRatio();\n      this._width = size.width;\n      this._height = size.height;\n      renderTarget = new WebGLRenderTarget(\n        this._width * this._pixelRatio,\n        this._height * this._pixelRatio,\n        parameters\n      );\n      renderTarget.texture.name = \"EffectComposer.rt1\";\n    } else {\n      this._pixelRatio = 1;\n      this._width = renderTarget.width;\n      this._height = renderTarget.height;\n    }\n    this.renderTarget1 = renderTarget;\n    this.renderTarget2 = renderTarget.clone();\n    this.renderTarget2.texture.name = \"EffectComposer.rt2\";\n    this.writeBuffer = this.renderTarget1;\n    this.readBuffer = this.renderTarget2;\n    this.renderToScreen = true;\n    if (CopyShader === void 0) {\n      console.error(\"THREE.EffectComposer relies on CopyShader\");\n    }\n    if (ShaderPass === void 0) {\n      console.error(\"THREE.EffectComposer relies on ShaderPass\");\n    }\n    this.copyPass = new ShaderPass(CopyShader);\n    this.clock = new Clock();\n  }\n  swapBuffers() {\n    const tmp = this.readBuffer;\n    this.readBuffer = this.writeBuffer;\n    this.writeBuffer = tmp;\n  }\n  addPass(pass) {\n    this.passes.push(pass);\n    pass.setSize(this._width * this._pixelRatio, this._height * this._pixelRatio);\n  }\n  insertPass(pass, index) {\n    this.passes.splice(index, 0, pass);\n    pass.setSize(this._width * this._pixelRatio, this._height * this._pixelRatio);\n  }\n  removePass(pass) {\n    const index = this.passes.indexOf(pass);\n    if (index !== -1) {\n      this.passes.splice(index, 1);\n    }\n  }\n  isLastEnabledPass(passIndex) {\n    for (let i = passIndex + 1; i < this.passes.length; i++) {\n      if (this.passes[i].enabled) {\n        return false;\n      }\n    }\n    return true;\n  }\n  render(deltaTime) {\n    if (deltaTime === void 0) {\n      deltaTime = this.clock.getDelta();\n    }\n    const currentRenderTarget = this.renderer.getRenderTarget();\n    let maskActive = false;\n    const il = this.passes.length;\n    for (let i = 0; i < il; i++) {\n      const pass = this.passes[i];\n      if (pass.enabled === false)\n        continue;\n      pass.renderToScreen = this.renderToScreen && this.isLastEnabledPass(i);\n      pass.render(this.renderer, this.writeBuffer, this.readBuffer, deltaTime, maskActive);\n      if (pass.needsSwap) {\n        if (maskActive) {\n          const context = this.renderer.getContext();\n          const stencil = this.renderer.state.buffers.stencil;\n          stencil.setFunc(context.NOTEQUAL, 1, 4294967295);\n          this.copyPass.render(this.renderer, this.writeBuffer, this.readBuffer, deltaTime);\n          stencil.setFunc(context.EQUAL, 1, 4294967295);\n        }\n        this.swapBuffers();\n      }\n      if (MaskPass !== void 0) {\n        if (pass instanceof MaskPass) {\n          maskActive = true;\n        } else if (pass instanceof ClearMaskPass) {\n          maskActive = false;\n        }\n      }\n    }\n    this.renderer.setRenderTarget(currentRenderTarget);\n  }\n  reset(renderTarget) {\n    if (renderTarget === void 0) {\n      const size = this.renderer.getSize(new Vector2());\n      this._pixelRatio = this.renderer.getPixelRatio();\n      this._width = size.width;\n      this._height = size.height;\n      renderTarget = this.renderTarget1.clone();\n      renderTarget.setSize(this._width * this._pixelRatio, this._height * this._pixelRatio);\n    }\n    this.renderTarget1.dispose();\n    this.renderTarget2.dispose();\n    this.renderTarget1 = renderTarget;\n    this.renderTarget2 = renderTarget.clone();\n    this.writeBuffer = this.renderTarget1;\n    this.readBuffer = this.renderTarget2;\n  }\n  setSize(width, height) {\n    this._width = width;\n    this._height = height;\n    const effectiveWidth = this._width * this._pixelRatio;\n    const effectiveHeight = this._height * this._pixelRatio;\n    this.renderTarget1.setSize(effectiveWidth, effectiveHeight);\n    this.renderTarget2.setSize(effectiveWidth, effectiveHeight);\n    for (let i = 0; i < this.passes.length; i++) {\n      this.passes[i].setSize(effectiveWidth, effectiveHeight);\n    }\n  }\n  setPixelRatio(pixelRatio) {\n    this._pixelRatio = pixelRatio;\n    this.setSize(this._width, this._height);\n  }\n}\nexport {\n  EffectComposer\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}