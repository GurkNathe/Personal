{"ast":null,"code":"var __defProp = Object.defineProperty;\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value\n}) : obj[key] = value;\nvar __publicField = (obj, key, value) => {\n  __defNormalProp(obj, typeof key !== \"symbol\" ? key + \"\" : key, value);\n  return value;\n};\nimport { Mesh, Vector4, Color, Vector2, Matrix4, Clock, ShaderMaterial, UniformsUtils, UniformsLib, RepeatWrapping } from \"three\";\nimport { Reflector } from \"./Reflector.js\";\nimport { Refractor } from \"./Refractor.js\";\nconst _Water2 = class extends Mesh {\n  constructor(geometry) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    super(geometry);\n    this.isWater = true;\n    this.type = \"Water\";\n    const scope = this;\n    const color = options.color !== void 0 ? new Color(options.color) : new Color(16777215);\n    const textureWidth = options.textureWidth || 512;\n    const textureHeight = options.textureHeight || 512;\n    const clipBias = options.clipBias || 0;\n    const flowDirection = options.flowDirection || new Vector2(1, 0);\n    const flowSpeed = options.flowSpeed || 0.03;\n    const reflectivity = options.reflectivity || 0.02;\n    const scale = options.scale || 1;\n    const shader = options.shader || _Water2.WaterShader;\n    const encoding = options.encoding !== void 0 ? options.encoding : 3e3;\n    const flowMap = options.flowMap || void 0;\n    const normalMap0 = options.normalMap0;\n    const normalMap1 = options.normalMap1;\n    const cycle = 0.15;\n    const halfCycle = cycle * 0.5;\n    const textureMatrix = new Matrix4();\n    const clock = new Clock();\n    if (Reflector === void 0) {\n      console.error(\"THREE.Water: Required component Reflector not found.\");\n      return;\n    }\n    if (Refractor === void 0) {\n      console.error(\"THREE.Water: Required component Refractor not found.\");\n      return;\n    }\n    const reflector = new Reflector(geometry, {\n      textureWidth,\n      textureHeight,\n      clipBias,\n      encoding\n    });\n    const refractor = new Refractor(geometry, {\n      textureWidth,\n      textureHeight,\n      clipBias,\n      encoding\n    });\n    reflector.matrixAutoUpdate = false;\n    refractor.matrixAutoUpdate = false;\n    this.material = new ShaderMaterial({\n      uniforms: UniformsUtils.merge([UniformsLib[\"fog\"], shader.uniforms]),\n      vertexShader: shader.vertexShader,\n      fragmentShader: shader.fragmentShader,\n      transparent: true,\n      fog: true\n    });\n    if (flowMap !== void 0) {\n      this.material.defines.USE_FLOWMAP = \"\";\n      this.material.uniforms[\"tFlowMap\"] = {\n        type: \"t\",\n        value: flowMap\n      };\n    } else {\n      this.material.uniforms[\"flowDirection\"] = {\n        type: \"v2\",\n        value: flowDirection\n      };\n    }\n    normalMap0.wrapS = normalMap0.wrapT = RepeatWrapping;\n    normalMap1.wrapS = normalMap1.wrapT = RepeatWrapping;\n    this.material.uniforms[\"tReflectionMap\"].value = reflector.getRenderTarget().texture;\n    this.material.uniforms[\"tRefractionMap\"].value = refractor.getRenderTarget().texture;\n    this.material.uniforms[\"tNormalMap0\"].value = normalMap0;\n    this.material.uniforms[\"tNormalMap1\"].value = normalMap1;\n    this.material.uniforms[\"color\"].value = color;\n    this.material.uniforms[\"reflectivity\"].value = reflectivity;\n    this.material.uniforms[\"textureMatrix\"].value = textureMatrix;\n    this.material.uniforms[\"config\"].value.x = 0;\n    this.material.uniforms[\"config\"].value.y = halfCycle;\n    this.material.uniforms[\"config\"].value.z = halfCycle;\n    this.material.uniforms[\"config\"].value.w = scale;\n    function updateTextureMatrix(camera) {\n      textureMatrix.set(0.5, 0, 0, 0.5, 0, 0.5, 0, 0.5, 0, 0, 0.5, 0.5, 0, 0, 0, 1);\n      textureMatrix.multiply(camera.projectionMatrix);\n      textureMatrix.multiply(camera.matrixWorldInverse);\n      textureMatrix.multiply(scope.matrixWorld);\n    }\n    function updateFlow() {\n      const delta = clock.getDelta();\n      const config = scope.material.uniforms[\"config\"];\n      config.value.x += flowSpeed * delta;\n      config.value.y = config.value.x + halfCycle;\n      if (config.value.x >= cycle) {\n        config.value.x = 0;\n        config.value.y = halfCycle;\n      } else if (config.value.y >= cycle) {\n        config.value.y = config.value.y - cycle;\n      }\n    }\n    this.onBeforeRender = function (renderer, scene, camera) {\n      updateTextureMatrix(camera);\n      updateFlow();\n      scope.visible = false;\n      reflector.matrixWorld.copy(scope.matrixWorld);\n      refractor.matrixWorld.copy(scope.matrixWorld);\n      reflector.onBeforeRender(renderer, scene, camera);\n      refractor.onBeforeRender(renderer, scene, camera);\n      scope.visible = true;\n    };\n  }\n};\nlet Water2 = _Water2;\n__publicField(Water2, \"WaterShader\", {\n  uniforms: {\n    color: {\n      value: null\n    },\n    reflectivity: {\n      value: 0\n    },\n    tReflectionMap: {\n      value: null\n    },\n    tRefractionMap: {\n      value: null\n    },\n    tNormalMap0: {\n      value: null\n    },\n    tNormalMap1: {\n      value: null\n    },\n    textureMatrix: {\n      value: null\n    },\n    config: {\n      value: /* @__PURE__ */new Vector4()\n    }\n  },\n  vertexShader: /* glsl */\n  `\n\n\t\t#include <common>\n\t\t#include <fog_pars_vertex>\n\t\t#include <logdepthbuf_pars_vertex>\n\n\t\tuniform mat4 textureMatrix;\n\n\t\tvarying vec4 vCoord;\n\t\tvarying vec2 vUv;\n\t\tvarying vec3 vToEye;\n\n\t\tvoid main() {\n\n\t\t\tvUv = uv;\n\t\t\tvCoord = textureMatrix * vec4( position, 1.0 );\n\n\t\t\tvec4 worldPosition = modelMatrix * vec4( position, 1.0 );\n\t\t\tvToEye = cameraPosition - worldPosition.xyz;\n\n\t\t\tvec4 mvPosition =  viewMatrix * worldPosition; // used in fog_vertex\n\t\t\tgl_Position = projectionMatrix * mvPosition;\n\n\t\t\t#include <logdepthbuf_vertex>\n\t\t\t#include <fog_vertex>\n\n\t\t}`,\n  fragmentShader: /* glsl */\n  `\n\n\t\t#include <common>\n\t\t#include <fog_pars_fragment>\n\t\t#include <logdepthbuf_pars_fragment>\n\n\t\tuniform sampler2D tReflectionMap;\n\t\tuniform sampler2D tRefractionMap;\n\t\tuniform sampler2D tNormalMap0;\n\t\tuniform sampler2D tNormalMap1;\n\n\t\t#ifdef USE_FLOWMAP\n\t\t\tuniform sampler2D tFlowMap;\n\t\t#else\n\t\t\tuniform vec2 flowDirection;\n\t\t#endif\n\n\t\tuniform vec3 color;\n\t\tuniform float reflectivity;\n\t\tuniform vec4 config;\n\n\t\tvarying vec4 vCoord;\n\t\tvarying vec2 vUv;\n\t\tvarying vec3 vToEye;\n\n\t\tvoid main() {\n\n\t\t\t#include <logdepthbuf_fragment>\n\n\t\t\tfloat flowMapOffset0 = config.x;\n\t\t\tfloat flowMapOffset1 = config.y;\n\t\t\tfloat halfCycle = config.z;\n\t\t\tfloat scale = config.w;\n\n\t\t\tvec3 toEye = normalize( vToEye );\n\n\t\t\t// determine flow direction\n\t\t\tvec2 flow;\n\t\t\t#ifdef USE_FLOWMAP\n\t\t\t\tflow = texture2D( tFlowMap, vUv ).rg * 2.0 - 1.0;\n\t\t\t#else\n\t\t\t\tflow = flowDirection;\n\t\t\t#endif\n\t\t\tflow.x *= - 1.0;\n\n\t\t\t// sample normal maps (distort uvs with flowdata)\n\t\t\tvec4 normalColor0 = texture2D( tNormalMap0, ( vUv * scale ) + flow * flowMapOffset0 );\n\t\t\tvec4 normalColor1 = texture2D( tNormalMap1, ( vUv * scale ) + flow * flowMapOffset1 );\n\n\t\t\t// linear interpolate to get the final normal color\n\t\t\tfloat flowLerp = abs( halfCycle - flowMapOffset0 ) / halfCycle;\n\t\t\tvec4 normalColor = mix( normalColor0, normalColor1, flowLerp );\n\n\t\t\t// calculate normal vector\n\t\t\tvec3 normal = normalize( vec3( normalColor.r * 2.0 - 1.0, normalColor.b,  normalColor.g * 2.0 - 1.0 ) );\n\n\t\t\t// calculate the fresnel term to blend reflection and refraction maps\n\t\t\tfloat theta = max( dot( toEye, normal ), 0.0 );\n\t\t\tfloat reflectance = reflectivity + ( 1.0 - reflectivity ) * pow( ( 1.0 - theta ), 5.0 );\n\n\t\t\t// calculate final uv coords\n\t\t\tvec3 coord = vCoord.xyz / vCoord.w;\n\t\t\tvec2 uv = coord.xy + coord.z * normal.xz * 0.05;\n\n\t\t\tvec4 reflectColor = texture2D( tReflectionMap, vec2( 1.0 - uv.x, uv.y ) );\n\t\t\tvec4 refractColor = texture2D( tRefractionMap, uv );\n\n\t\t\t// multiply water color with the mix of both textures\n\t\t\tgl_FragColor = vec4( color, 1.0 ) * mix( refractColor, reflectColor, reflectance );\n\n\t\t\t#include <tonemapping_fragment>\n\t\t\t#include <encodings_fragment>\n\t\t\t#include <fog_fragment>\n\n\t\t}`\n});\nexport { Water2 };","map":{"version":3,"names":["__defProp","Object","defineProperty","__defNormalProp","obj","key","value","enumerable","configurable","writable","__publicField","Mesh","Vector4","Color","Vector2","Matrix4","Clock","ShaderMaterial","UniformsUtils","UniformsLib","RepeatWrapping","Reflector","Refractor","_Water2","constructor","geometry","options","arguments","length","undefined","isWater","type","scope","color","textureWidth","textureHeight","clipBias","flowDirection","flowSpeed","reflectivity","scale","shader","WaterShader","encoding","flowMap","normalMap0","normalMap1","cycle","halfCycle","textureMatrix","clock","console","error","reflector","refractor","matrixAutoUpdate","material","uniforms","merge","vertexShader","fragmentShader","transparent","fog","defines","USE_FLOWMAP","wrapS","wrapT","getRenderTarget","texture","x","y","z","w","updateTextureMatrix","camera","set","multiply","projectionMatrix","matrixWorldInverse","matrixWorld","updateFlow","delta","getDelta","config","onBeforeRender","renderer","scene","visible","copy","Water2","tReflectionMap","tRefractionMap","tNormalMap0","tNormalMap1"],"sources":["/home/krug/Coding/JavaScript/Websites/Personal/personal/node_modules/.pnpm/three-stdlib@2.23.7_three@0.151.3/node_modules/three-stdlib/objects/Water2.js"],"sourcesContent":["var __defProp = Object.defineProperty;\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;\nvar __publicField = (obj, key, value) => {\n  __defNormalProp(obj, typeof key !== \"symbol\" ? key + \"\" : key, value);\n  return value;\n};\nimport { Mesh, Vector4, Color, Vector2, Matrix4, Clock, ShaderMaterial, UniformsUtils, UniformsLib, RepeatWrapping } from \"three\";\nimport { Reflector } from \"./Reflector.js\";\nimport { Refractor } from \"./Refractor.js\";\nconst _Water2 = class extends Mesh {\n  constructor(geometry, options = {}) {\n    super(geometry);\n    this.isWater = true;\n    this.type = \"Water\";\n    const scope = this;\n    const color = options.color !== void 0 ? new Color(options.color) : new Color(16777215);\n    const textureWidth = options.textureWidth || 512;\n    const textureHeight = options.textureHeight || 512;\n    const clipBias = options.clipBias || 0;\n    const flowDirection = options.flowDirection || new Vector2(1, 0);\n    const flowSpeed = options.flowSpeed || 0.03;\n    const reflectivity = options.reflectivity || 0.02;\n    const scale = options.scale || 1;\n    const shader = options.shader || _Water2.WaterShader;\n    const encoding = options.encoding !== void 0 ? options.encoding : 3e3;\n    const flowMap = options.flowMap || void 0;\n    const normalMap0 = options.normalMap0;\n    const normalMap1 = options.normalMap1;\n    const cycle = 0.15;\n    const halfCycle = cycle * 0.5;\n    const textureMatrix = new Matrix4();\n    const clock = new Clock();\n    if (Reflector === void 0) {\n      console.error(\"THREE.Water: Required component Reflector not found.\");\n      return;\n    }\n    if (Refractor === void 0) {\n      console.error(\"THREE.Water: Required component Refractor not found.\");\n      return;\n    }\n    const reflector = new Reflector(geometry, {\n      textureWidth,\n      textureHeight,\n      clipBias,\n      encoding\n    });\n    const refractor = new Refractor(geometry, {\n      textureWidth,\n      textureHeight,\n      clipBias,\n      encoding\n    });\n    reflector.matrixAutoUpdate = false;\n    refractor.matrixAutoUpdate = false;\n    this.material = new ShaderMaterial({\n      uniforms: UniformsUtils.merge([UniformsLib[\"fog\"], shader.uniforms]),\n      vertexShader: shader.vertexShader,\n      fragmentShader: shader.fragmentShader,\n      transparent: true,\n      fog: true\n    });\n    if (flowMap !== void 0) {\n      this.material.defines.USE_FLOWMAP = \"\";\n      this.material.uniforms[\"tFlowMap\"] = {\n        type: \"t\",\n        value: flowMap\n      };\n    } else {\n      this.material.uniforms[\"flowDirection\"] = {\n        type: \"v2\",\n        value: flowDirection\n      };\n    }\n    normalMap0.wrapS = normalMap0.wrapT = RepeatWrapping;\n    normalMap1.wrapS = normalMap1.wrapT = RepeatWrapping;\n    this.material.uniforms[\"tReflectionMap\"].value = reflector.getRenderTarget().texture;\n    this.material.uniforms[\"tRefractionMap\"].value = refractor.getRenderTarget().texture;\n    this.material.uniforms[\"tNormalMap0\"].value = normalMap0;\n    this.material.uniforms[\"tNormalMap1\"].value = normalMap1;\n    this.material.uniforms[\"color\"].value = color;\n    this.material.uniforms[\"reflectivity\"].value = reflectivity;\n    this.material.uniforms[\"textureMatrix\"].value = textureMatrix;\n    this.material.uniforms[\"config\"].value.x = 0;\n    this.material.uniforms[\"config\"].value.y = halfCycle;\n    this.material.uniforms[\"config\"].value.z = halfCycle;\n    this.material.uniforms[\"config\"].value.w = scale;\n    function updateTextureMatrix(camera) {\n      textureMatrix.set(0.5, 0, 0, 0.5, 0, 0.5, 0, 0.5, 0, 0, 0.5, 0.5, 0, 0, 0, 1);\n      textureMatrix.multiply(camera.projectionMatrix);\n      textureMatrix.multiply(camera.matrixWorldInverse);\n      textureMatrix.multiply(scope.matrixWorld);\n    }\n    function updateFlow() {\n      const delta = clock.getDelta();\n      const config = scope.material.uniforms[\"config\"];\n      config.value.x += flowSpeed * delta;\n      config.value.y = config.value.x + halfCycle;\n      if (config.value.x >= cycle) {\n        config.value.x = 0;\n        config.value.y = halfCycle;\n      } else if (config.value.y >= cycle) {\n        config.value.y = config.value.y - cycle;\n      }\n    }\n    this.onBeforeRender = function(renderer, scene, camera) {\n      updateTextureMatrix(camera);\n      updateFlow();\n      scope.visible = false;\n      reflector.matrixWorld.copy(scope.matrixWorld);\n      refractor.matrixWorld.copy(scope.matrixWorld);\n      reflector.onBeforeRender(renderer, scene, camera);\n      refractor.onBeforeRender(renderer, scene, camera);\n      scope.visible = true;\n    };\n  }\n};\nlet Water2 = _Water2;\n__publicField(Water2, \"WaterShader\", {\n  uniforms: {\n    color: {\n      value: null\n    },\n    reflectivity: {\n      value: 0\n    },\n    tReflectionMap: {\n      value: null\n    },\n    tRefractionMap: {\n      value: null\n    },\n    tNormalMap0: {\n      value: null\n    },\n    tNormalMap1: {\n      value: null\n    },\n    textureMatrix: {\n      value: null\n    },\n    config: {\n      value: /* @__PURE__ */ new Vector4()\n    }\n  },\n  vertexShader: (\n    /* glsl */\n    `\n\n\t\t#include <common>\n\t\t#include <fog_pars_vertex>\n\t\t#include <logdepthbuf_pars_vertex>\n\n\t\tuniform mat4 textureMatrix;\n\n\t\tvarying vec4 vCoord;\n\t\tvarying vec2 vUv;\n\t\tvarying vec3 vToEye;\n\n\t\tvoid main() {\n\n\t\t\tvUv = uv;\n\t\t\tvCoord = textureMatrix * vec4( position, 1.0 );\n\n\t\t\tvec4 worldPosition = modelMatrix * vec4( position, 1.0 );\n\t\t\tvToEye = cameraPosition - worldPosition.xyz;\n\n\t\t\tvec4 mvPosition =  viewMatrix * worldPosition; // used in fog_vertex\n\t\t\tgl_Position = projectionMatrix * mvPosition;\n\n\t\t\t#include <logdepthbuf_vertex>\n\t\t\t#include <fog_vertex>\n\n\t\t}`\n  ),\n  fragmentShader: (\n    /* glsl */\n    `\n\n\t\t#include <common>\n\t\t#include <fog_pars_fragment>\n\t\t#include <logdepthbuf_pars_fragment>\n\n\t\tuniform sampler2D tReflectionMap;\n\t\tuniform sampler2D tRefractionMap;\n\t\tuniform sampler2D tNormalMap0;\n\t\tuniform sampler2D tNormalMap1;\n\n\t\t#ifdef USE_FLOWMAP\n\t\t\tuniform sampler2D tFlowMap;\n\t\t#else\n\t\t\tuniform vec2 flowDirection;\n\t\t#endif\n\n\t\tuniform vec3 color;\n\t\tuniform float reflectivity;\n\t\tuniform vec4 config;\n\n\t\tvarying vec4 vCoord;\n\t\tvarying vec2 vUv;\n\t\tvarying vec3 vToEye;\n\n\t\tvoid main() {\n\n\t\t\t#include <logdepthbuf_fragment>\n\n\t\t\tfloat flowMapOffset0 = config.x;\n\t\t\tfloat flowMapOffset1 = config.y;\n\t\t\tfloat halfCycle = config.z;\n\t\t\tfloat scale = config.w;\n\n\t\t\tvec3 toEye = normalize( vToEye );\n\n\t\t\t// determine flow direction\n\t\t\tvec2 flow;\n\t\t\t#ifdef USE_FLOWMAP\n\t\t\t\tflow = texture2D( tFlowMap, vUv ).rg * 2.0 - 1.0;\n\t\t\t#else\n\t\t\t\tflow = flowDirection;\n\t\t\t#endif\n\t\t\tflow.x *= - 1.0;\n\n\t\t\t// sample normal maps (distort uvs with flowdata)\n\t\t\tvec4 normalColor0 = texture2D( tNormalMap0, ( vUv * scale ) + flow * flowMapOffset0 );\n\t\t\tvec4 normalColor1 = texture2D( tNormalMap1, ( vUv * scale ) + flow * flowMapOffset1 );\n\n\t\t\t// linear interpolate to get the final normal color\n\t\t\tfloat flowLerp = abs( halfCycle - flowMapOffset0 ) / halfCycle;\n\t\t\tvec4 normalColor = mix( normalColor0, normalColor1, flowLerp );\n\n\t\t\t// calculate normal vector\n\t\t\tvec3 normal = normalize( vec3( normalColor.r * 2.0 - 1.0, normalColor.b,  normalColor.g * 2.0 - 1.0 ) );\n\n\t\t\t// calculate the fresnel term to blend reflection and refraction maps\n\t\t\tfloat theta = max( dot( toEye, normal ), 0.0 );\n\t\t\tfloat reflectance = reflectivity + ( 1.0 - reflectivity ) * pow( ( 1.0 - theta ), 5.0 );\n\n\t\t\t// calculate final uv coords\n\t\t\tvec3 coord = vCoord.xyz / vCoord.w;\n\t\t\tvec2 uv = coord.xy + coord.z * normal.xz * 0.05;\n\n\t\t\tvec4 reflectColor = texture2D( tReflectionMap, vec2( 1.0 - uv.x, uv.y ) );\n\t\t\tvec4 refractColor = texture2D( tRefractionMap, uv );\n\n\t\t\t// multiply water color with the mix of both textures\n\t\t\tgl_FragColor = vec4( color, 1.0 ) * mix( refractColor, reflectColor, reflectance );\n\n\t\t\t#include <tonemapping_fragment>\n\t\t\t#include <encodings_fragment>\n\t\t\t#include <fog_fragment>\n\n\t\t}`\n  )\n});\nexport {\n  Water2\n};\n"],"mappings":"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AImC,MAAM,CAAC7E,KAAK,CAACgE,CAAC,IAAIvB,KAAK,EAAE;QAClCoC,MAAM,CAAC7E,KAAK,CAACgE,CAAC,GAAGa,MAAM,CAAC7E,KAAK,CAACgE,CAAC,GAAGvB,KAAK;MACzC;IACF;IACA,IAAI,CAACqC,cAAc,GAAG,UAASC,QAAQ,EAAEC,KAAK,EAAEZ,MAAM,EAAE;MACtDD,mBAAmB,CAACC,MAAM,CAAC;MAC3BM,UAAU,CAAC,CAAC;MACZhD,KAAK,CAACuD,OAAO,GAAG,KAAK;MACrBlC,SAAS,CAAC0B,WAAW,CAACS,IAAI,CAACxD,KAAK,CAAC+C,WAAW,CAAC;MAC7CzB,SAAS,CAACyB,WAAW,CAACS,IAAI,CAACxD,KAAK,CAAC+C,WAAW,CAAC;MAC7C1B,SAAS,CAAC+B,cAAc,CAACC,QAAQ,EAAEC,KAAK,EAAEZ,MAAM,CAAC;MACjDpB,SAAS,CAAC8B,cAAc,CAACC,QAAQ,EAAEC,KAAK,EAAEZ,MAAM,CAAC;MACjD1C,KAAK,CAACuD,OAAO,GAAG,IAAI;IACtB,CAAC;EACH;AACF,CAAC;AACD,IAAIE,MAAM,GAAGlE,OAAO;AACpBb,aAAa,CAAC+E,MAAM,EAAE,aAAa,EAAE;EACnChC,QAAQ,EAAE;IACRxB,KAAK,EAAE;MACL3B,KAAK,EAAE;IACT,CAAC;IACDiC,YAAY,EAAE;MACZjC,KAAK,EAAE;IACT,CAAC;IACDoF,cAAc,EAAE;MACdpF,KAAK,EAAE;IACT,CAAC;IACDqF,cAAc,EAAE;MACdrF,KAAK,EAAE;IACT,CAAC;IACDsF,WAAW,EAAE;MACXtF,KAAK,EAAE;IACT,CAAC;IACDuF,WAAW,EAAE;MACXvF,KAAK,EAAE;IACT,CAAC;IACD2C,aAAa,EAAE;MACb3C,KAAK,EAAE;IACT,CAAC;IACD6E,MAAM,EAAE;MACN7E,KAAK,EAAE,eAAgB,IAAIM,OAAO,CAAC;IACrC;EACF,CAAC;EACD+C,YAAY,EACV;EACC;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IACG;EACDC,cAAc,EACZ;EACC;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,CAAC,CAAC;AACF,SACE6B,MAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}