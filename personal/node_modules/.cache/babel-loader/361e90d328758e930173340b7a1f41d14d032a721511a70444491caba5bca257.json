{"ast":null,"code":"import _classCallCheck from \"/home/krug/Coding/JavaScript/Websites/Personal/personal/node_modules/.pnpm/@babel+runtime@7.22.3/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/home/krug/Coding/JavaScript/Websites/Personal/personal/node_modules/.pnpm/@babel+runtime@7.22.3/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"/home/krug/Coding/JavaScript/Websites/Personal/personal/node_modules/.pnpm/@babel+runtime@7.22.3/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/home/krug/Coding/JavaScript/Websites/Personal/personal/node_modules/.pnpm/@babel+runtime@7.22.3/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nvar __defProp = Object.defineProperty;\nvar __defNormalProp = function __defNormalProp(obj, key, value) {\n  return key in obj ? __defProp(obj, key, {\n    enumerable: true,\n    configurable: true,\n    writable: true,\n    value: value\n  }) : obj[key] = value;\n};\nvar __publicField = function __publicField(obj, key, value) {\n  __defNormalProp(obj, typeof key !== \"symbol\" ? key + \"\" : key, value);\n  return value;\n};\nimport { Vector2, Color, WebGLRenderTarget, HalfFloatType, UniformsUtils, ShaderMaterial, Vector3, AdditiveBlending, MeshBasicMaterial } from \"three\";\nimport { Pass, FullScreenQuad } from \"./Pass.js\";\nimport { CopyShader } from \"../shaders/CopyShader.js\";\nimport { LuminosityHighPassShader } from \"../shaders/LuminosityHighPassShader.js\";\nvar _UnrealBloomPass = /*#__PURE__*/function (_Pass) {\n  _inherits(_UnrealBloomPass, _Pass);\n  var _super = _createSuper(_UnrealBloomPass);\n  function _UnrealBloomPass(resolution, strength, radius, threshold) {\n    var _this;\n    _classCallCheck(this, _UnrealBloomPass);\n    _this = _super.call(this);\n    _this.strength = strength !== void 0 ? strength : 1;\n    _this.radius = radius;\n    _this.threshold = threshold;\n    _this.resolution = resolution !== void 0 ? new Vector2(resolution.x, resolution.y) : new Vector2(256, 256);\n    _this.clearColor = new Color(0, 0, 0);\n    _this.renderTargetsHorizontal = [];\n    _this.renderTargetsVertical = [];\n    _this.nMips = 5;\n    var resx = Math.round(_this.resolution.x / 2);\n    var resy = Math.round(_this.resolution.y / 2);\n    _this.renderTargetBright = new WebGLRenderTarget(resx, resy, {\n      type: HalfFloatType\n    });\n    _this.renderTargetBright.texture.name = \"UnrealBloomPass.bright\";\n    _this.renderTargetBright.texture.generateMipmaps = false;\n    for (var i = 0; i < _this.nMips; i++) {\n      var renderTargetHorizonal = new WebGLRenderTarget(resx, resy, {\n        type: HalfFloatType\n      });\n      renderTargetHorizonal.texture.name = \"UnrealBloomPass.h\" + i;\n      renderTargetHorizonal.texture.generateMipmaps = false;\n      _this.renderTargetsHorizontal.push(renderTargetHorizonal);\n      var renderTargetVertical = new WebGLRenderTarget(resx, resy, {\n        type: HalfFloatType\n      });\n      renderTargetVertical.texture.name = \"UnrealBloomPass.v\" + i;\n      renderTargetVertical.texture.generateMipmaps = false;\n      _this.renderTargetsVertical.push(renderTargetVertical);\n      resx = Math.round(resx / 2);\n      resy = Math.round(resy / 2);\n    }\n    var highPassShader = LuminosityHighPassShader;\n    _this.highPassUniforms = UniformsUtils.clone(highPassShader.uniforms);\n    _this.highPassUniforms[\"luminosityThreshold\"].value = threshold;\n    _this.highPassUniforms[\"smoothWidth\"].value = 0.01;\n    _this.materialHighPassFilter = new ShaderMaterial({\n      uniforms: _this.highPassUniforms,\n      vertexShader: highPassShader.vertexShader,\n      fragmentShader: highPassShader.fragmentShader,\n      defines: {}\n    });\n    _this.separableBlurMaterials = [];\n    var kernelSizeArray = [3, 5, 7, 9, 11];\n    resx = Math.round(_this.resolution.x / 2);\n    resy = Math.round(_this.resolution.y / 2);\n    for (var _i = 0; _i < _this.nMips; _i++) {\n      _this.separableBlurMaterials.push(_this.getSeperableBlurMaterial(kernelSizeArray[_i]));\n      _this.separableBlurMaterials[_i].uniforms[\"texSize\"].value = new Vector2(resx, resy);\n      resx = Math.round(resx / 2);\n      resy = Math.round(resy / 2);\n    }\n    _this.compositeMaterial = _this.getCompositeMaterial(_this.nMips);\n    _this.compositeMaterial.uniforms[\"blurTexture1\"].value = _this.renderTargetsVertical[0].texture;\n    _this.compositeMaterial.uniforms[\"blurTexture2\"].value = _this.renderTargetsVertical[1].texture;\n    _this.compositeMaterial.uniforms[\"blurTexture3\"].value = _this.renderTargetsVertical[2].texture;\n    _this.compositeMaterial.uniforms[\"blurTexture4\"].value = _this.renderTargetsVertical[3].texture;\n    _this.compositeMaterial.uniforms[\"blurTexture5\"].value = _this.renderTargetsVertical[4].texture;\n    _this.compositeMaterial.uniforms[\"bloomStrength\"].value = strength;\n    _this.compositeMaterial.uniforms[\"bloomRadius\"].value = 0.1;\n    _this.compositeMaterial.needsUpdate = true;\n    var bloomFactors = [1, 0.8, 0.6, 0.4, 0.2];\n    _this.compositeMaterial.uniforms[\"bloomFactors\"].value = bloomFactors;\n    _this.bloomTintColors = [new Vector3(1, 1, 1), new Vector3(1, 1, 1), new Vector3(1, 1, 1), new Vector3(1, 1, 1), new Vector3(1, 1, 1)];\n    _this.compositeMaterial.uniforms[\"bloomTintColors\"].value = _this.bloomTintColors;\n    var copyShader = CopyShader;\n    _this.copyUniforms = UniformsUtils.clone(copyShader.uniforms);\n    _this.copyUniforms[\"opacity\"].value = 1;\n    _this.materialCopy = new ShaderMaterial({\n      uniforms: _this.copyUniforms,\n      vertexShader: copyShader.vertexShader,\n      fragmentShader: copyShader.fragmentShader,\n      blending: AdditiveBlending,\n      depthTest: false,\n      depthWrite: false,\n      transparent: true\n    });\n    _this.enabled = true;\n    _this.needsSwap = false;\n    _this._oldClearColor = new Color();\n    _this.oldClearAlpha = 1;\n    _this.basic = new MeshBasicMaterial();\n    _this.fsQuad = new FullScreenQuad(null);\n    return _this;\n  }\n  _createClass(_UnrealBloomPass, [{\n    key: \"dispose\",\n    value: function dispose() {\n      for (var i = 0; i < this.renderTargetsHorizontal.length; i++) {\n        this.renderTargetsHorizontal[i].dispose();\n      }\n      for (var _i2 = 0; _i2 < this.renderTargetsVertical.length; _i2++) {\n        this.renderTargetsVertical[_i2].dispose();\n      }\n      this.renderTargetBright.dispose();\n      for (var _i3 = 0; _i3 < this.separableBlurMaterials.length; _i3++) {\n        this.separableBlurMaterials[_i3].dispose();\n      }\n      this.compositeMaterial.dispose();\n      this.materialCopy.dispose();\n      this.basic.dispose();\n      this.fsQuad.dispose();\n    }\n  }, {\n    key: \"setSize\",\n    value: function setSize(width, height) {\n      var resx = Math.round(width / 2);\n      var resy = Math.round(height / 2);\n      this.renderTargetBright.setSize(resx, resy);\n      for (var i = 0; i < this.nMips; i++) {\n        this.renderTargetsHorizontal[i].setSize(resx, resy);\n        this.renderTargetsVertical[i].setSize(resx, resy);\n        this.separableBlurMaterials[i].uniforms[\"texSize\"].value = new Vector2(resx, resy);\n        resx = Math.round(resx / 2);\n        resy = Math.round(resy / 2);\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render(renderer, writeBuffer, readBuffer, deltaTime, maskActive) {\n      renderer.getClearColor(this._oldClearColor);\n      this.oldClearAlpha = renderer.getClearAlpha();\n      var oldAutoClear = renderer.autoClear;\n      renderer.autoClear = false;\n      renderer.setClearColor(this.clearColor, 0);\n      if (maskActive) renderer.state.buffers.stencil.setTest(false);\n      if (this.renderToScreen) {\n        this.fsQuad.material = this.basic;\n        this.basic.map = readBuffer.texture;\n        renderer.setRenderTarget(null);\n        renderer.clear();\n        this.fsQuad.render(renderer);\n      }\n      this.highPassUniforms[\"tDiffuse\"].value = readBuffer.texture;\n      this.highPassUniforms[\"luminosityThreshold\"].value = this.threshold;\n      this.fsQuad.material = this.materialHighPassFilter;\n      renderer.setRenderTarget(this.renderTargetBright);\n      renderer.clear();\n      this.fsQuad.render(renderer);\n      var inputRenderTarget = this.renderTargetBright;\n      for (var i = 0; i < this.nMips; i++) {\n        this.fsQuad.material = this.separableBlurMaterials[i];\n        this.separableBlurMaterials[i].uniforms[\"colorTexture\"].value = inputRenderTarget.texture;\n        this.separableBlurMaterials[i].uniforms[\"direction\"].value = _UnrealBloomPass.BlurDirectionX;\n        renderer.setRenderTarget(this.renderTargetsHorizontal[i]);\n        renderer.clear();\n        this.fsQuad.render(renderer);\n        this.separableBlurMaterials[i].uniforms[\"colorTexture\"].value = this.renderTargetsHorizontal[i].texture;\n        this.separableBlurMaterials[i].uniforms[\"direction\"].value = _UnrealBloomPass.BlurDirectionY;\n        renderer.setRenderTarget(this.renderTargetsVertical[i]);\n        renderer.clear();\n        this.fsQuad.render(renderer);\n        inputRenderTarget = this.renderTargetsVertical[i];\n      }\n      this.fsQuad.material = this.compositeMaterial;\n      this.compositeMaterial.uniforms[\"bloomStrength\"].value = this.strength;\n      this.compositeMaterial.uniforms[\"bloomRadius\"].value = this.radius;\n      this.compositeMaterial.uniforms[\"bloomTintColors\"].value = this.bloomTintColors;\n      renderer.setRenderTarget(this.renderTargetsHorizontal[0]);\n      renderer.clear();\n      this.fsQuad.render(renderer);\n      this.fsQuad.material = this.materialCopy;\n      this.copyUniforms[\"tDiffuse\"].value = this.renderTargetsHorizontal[0].texture;\n      if (maskActive) renderer.state.buffers.stencil.setTest(true);\n      if (this.renderToScreen) {\n        renderer.setRenderTarget(null);\n        this.fsQuad.render(renderer);\n      } else {\n        renderer.setRenderTarget(readBuffer);\n        this.fsQuad.render(renderer);\n      }\n      renderer.setClearColor(this._oldClearColor, this.oldClearAlpha);\n      renderer.autoClear = oldAutoClear;\n    }\n  }, {\n    key: \"getSeperableBlurMaterial\",\n    value: function getSeperableBlurMaterial(kernelRadius) {\n      return new ShaderMaterial({\n        defines: {\n          KERNEL_RADIUS: kernelRadius,\n          SIGMA: kernelRadius\n        },\n        uniforms: {\n          colorTexture: {\n            value: null\n          },\n          texSize: {\n            value: new Vector2(0.5, 0.5)\n          },\n          direction: {\n            value: new Vector2(0.5, 0.5)\n          }\n        },\n        vertexShader: \"varying vec2 vUv;\\n\\t\\t\\t\\tvoid main() {\\n\\t\\t\\t\\t\\tvUv = uv;\\n\\t\\t\\t\\t\\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\\n\\t\\t\\t\\t}\",\n        fragmentShader: \"#include <common>\\n\\t\\t\\t\\tvarying vec2 vUv;\\n\\t\\t\\t\\tuniform sampler2D colorTexture;\\n\\t\\t\\t\\tuniform vec2 texSize;\\n\\t\\t\\t\\tuniform vec2 direction;\\n\\n\\t\\t\\t\\tfloat gaussianPdf(in float x, in float sigma) {\\n\\t\\t\\t\\t\\treturn 0.39894 * exp( -0.5 * x * x/( sigma * sigma))/sigma;\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tvoid main() {\\n\\t\\t\\t\\t\\tvec2 invSize = 1.0 / texSize;\\n\\t\\t\\t\\t\\tfloat fSigma = float(SIGMA);\\n\\t\\t\\t\\t\\tfloat weightSum = gaussianPdf(0.0, fSigma);\\n\\t\\t\\t\\t\\tvec3 diffuseSum = texture2D( colorTexture, vUv).rgb * weightSum;\\n\\t\\t\\t\\t\\tfor( int i = 1; i < KERNEL_RADIUS; i ++ ) {\\n\\t\\t\\t\\t\\t\\tfloat x = float(i);\\n\\t\\t\\t\\t\\t\\tfloat w = gaussianPdf(x, fSigma);\\n\\t\\t\\t\\t\\t\\tvec2 uvOffset = direction * invSize * x;\\n\\t\\t\\t\\t\\t\\tvec3 sample1 = texture2D( colorTexture, vUv + uvOffset).rgb;\\n\\t\\t\\t\\t\\t\\tvec3 sample2 = texture2D( colorTexture, vUv - uvOffset).rgb;\\n\\t\\t\\t\\t\\t\\tdiffuseSum += (sample1 + sample2) * w;\\n\\t\\t\\t\\t\\t\\tweightSum += 2.0 * w;\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\tgl_FragColor = vec4(diffuseSum/weightSum, 1.0);\\n\\t\\t\\t\\t}\"\n      });\n    }\n  }, {\n    key: \"getCompositeMaterial\",\n    value: function getCompositeMaterial(nMips) {\n      return new ShaderMaterial({\n        defines: {\n          NUM_MIPS: nMips\n        },\n        uniforms: {\n          blurTexture1: {\n            value: null\n          },\n          blurTexture2: {\n            value: null\n          },\n          blurTexture3: {\n            value: null\n          },\n          blurTexture4: {\n            value: null\n          },\n          blurTexture5: {\n            value: null\n          },\n          bloomStrength: {\n            value: 1\n          },\n          bloomFactors: {\n            value: null\n          },\n          bloomTintColors: {\n            value: null\n          },\n          bloomRadius: {\n            value: 0\n          }\n        },\n        vertexShader: \"varying vec2 vUv;\\n\\t\\t\\t\\tvoid main() {\\n\\t\\t\\t\\t\\tvUv = uv;\\n\\t\\t\\t\\t\\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\\n\\t\\t\\t\\t}\",\n        fragmentShader: \"varying vec2 vUv;\\n\\t\\t\\t\\tuniform sampler2D blurTexture1;\\n\\t\\t\\t\\tuniform sampler2D blurTexture2;\\n\\t\\t\\t\\tuniform sampler2D blurTexture3;\\n\\t\\t\\t\\tuniform sampler2D blurTexture4;\\n\\t\\t\\t\\tuniform sampler2D blurTexture5;\\n\\t\\t\\t\\tuniform float bloomStrength;\\n\\t\\t\\t\\tuniform float bloomRadius;\\n\\t\\t\\t\\tuniform float bloomFactors[NUM_MIPS];\\n\\t\\t\\t\\tuniform vec3 bloomTintColors[NUM_MIPS];\\n\\n\\t\\t\\t\\tfloat lerpBloomFactor(const in float factor) {\\n\\t\\t\\t\\t\\tfloat mirrorFactor = 1.2 - factor;\\n\\t\\t\\t\\t\\treturn mix(factor, mirrorFactor, bloomRadius);\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\tvoid main() {\\n\\t\\t\\t\\t\\tgl_FragColor = bloomStrength * ( lerpBloomFactor(bloomFactors[0]) * vec4(bloomTintColors[0], 1.0) * texture2D(blurTexture1, vUv) +\\n\\t\\t\\t\\t\\t\\tlerpBloomFactor(bloomFactors[1]) * vec4(bloomTintColors[1], 1.0) * texture2D(blurTexture2, vUv) +\\n\\t\\t\\t\\t\\t\\tlerpBloomFactor(bloomFactors[2]) * vec4(bloomTintColors[2], 1.0) * texture2D(blurTexture3, vUv) +\\n\\t\\t\\t\\t\\t\\tlerpBloomFactor(bloomFactors[3]) * vec4(bloomTintColors[3], 1.0) * texture2D(blurTexture4, vUv) +\\n\\t\\t\\t\\t\\t\\tlerpBloomFactor(bloomFactors[4]) * vec4(bloomTintColors[4], 1.0) * texture2D(blurTexture5, vUv) );\\n\\t\\t\\t\\t}\"\n      });\n    }\n  }]);\n  return _UnrealBloomPass;\n}(Pass);\nvar UnrealBloomPass = _UnrealBloomPass;\n__publicField(UnrealBloomPass, \"BlurDirectionX\", /* @__PURE__ */new Vector2(1, 0));\n__publicField(UnrealBloomPass, \"BlurDirectionY\", /* @__PURE__ */new Vector2(0, 1));\nexport { UnrealBloomPass };","map":{"version":3,"names":["__defProp","Object","defineProperty","__defNormalProp","obj","key","value","enumerable","configurable","writable","__publicField","Vector2","Color","WebGLRenderTarget","HalfFloatType","UniformsUtils","ShaderMaterial","Vector3","AdditiveBlending","MeshBasicMaterial","Pass","FullScreenQuad","CopyShader","LuminosityHighPassShader","_UnrealBloomPass","_Pass","_inherits","_super","_createSuper","resolution","strength","radius","threshold","_this","_classCallCheck","call","x","y","clearColor","renderTargetsHorizontal","renderTargetsVertical","nMips","resx","Math","round","resy","renderTargetBright","type","texture","name","generateMipmaps","i","renderTargetHorizonal","push","renderTargetVertical","highPassShader","highPassUniforms","clone","uniforms","materialHighPassFilter","vertexShader","fragmentShader","defines","separableBlurMaterials","kernelSizeArray","getSeperableBlurMaterial","compositeMaterial","getCompositeMaterial","needsUpdate","bloomFactors","bloomTintColors","copyShader","copyUniforms","materialCopy","blending","depthTest","depthWrite","transparent","enabled","needsSwap","_oldClearColor","oldClearAlpha","basic","fsQuad","_createClass","dispose","length","setSize","width","height","render","renderer","writeBuffer","readBuffer","deltaTime","maskActive","getClearColor","getClearAlpha","oldAutoClear","autoClear","setClearColor","state","buffers","stencil","setTest","renderToScreen","material","map","setRenderTarget","clear","inputRenderTarget","BlurDirectionX","BlurDirectionY","kernelRadius","KERNEL_RADIUS","SIGMA","colorTexture","texSize","direction","NUM_MIPS","blurTexture1","blurTexture2","blurTexture3","blurTexture4","blurTexture5","bloomStrength","bloomRadius","UnrealBloomPass"],"sources":["/home/krug/Coding/JavaScript/Websites/Personal/personal/node_modules/.pnpm/three-stdlib@2.23.7_three@0.151.3/node_modules/three-stdlib/postprocessing/UnrealBloomPass.js"],"sourcesContent":["var __defProp = Object.defineProperty;\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;\nvar __publicField = (obj, key, value) => {\n  __defNormalProp(obj, typeof key !== \"symbol\" ? key + \"\" : key, value);\n  return value;\n};\nimport { Vector2, Color, WebGLRenderTarget, HalfFloatType, UniformsUtils, ShaderMaterial, Vector3, AdditiveBlending, MeshBasicMaterial } from \"three\";\nimport { Pass, FullScreenQuad } from \"./Pass.js\";\nimport { CopyShader } from \"../shaders/CopyShader.js\";\nimport { LuminosityHighPassShader } from \"../shaders/LuminosityHighPassShader.js\";\nconst _UnrealBloomPass = class extends Pass {\n  constructor(resolution, strength, radius, threshold) {\n    super();\n    this.strength = strength !== void 0 ? strength : 1;\n    this.radius = radius;\n    this.threshold = threshold;\n    this.resolution = resolution !== void 0 ? new Vector2(resolution.x, resolution.y) : new Vector2(256, 256);\n    this.clearColor = new Color(0, 0, 0);\n    this.renderTargetsHorizontal = [];\n    this.renderTargetsVertical = [];\n    this.nMips = 5;\n    let resx = Math.round(this.resolution.x / 2);\n    let resy = Math.round(this.resolution.y / 2);\n    this.renderTargetBright = new WebGLRenderTarget(resx, resy, { type: HalfFloatType });\n    this.renderTargetBright.texture.name = \"UnrealBloomPass.bright\";\n    this.renderTargetBright.texture.generateMipmaps = false;\n    for (let i = 0; i < this.nMips; i++) {\n      const renderTargetHorizonal = new WebGLRenderTarget(resx, resy, { type: HalfFloatType });\n      renderTargetHorizonal.texture.name = \"UnrealBloomPass.h\" + i;\n      renderTargetHorizonal.texture.generateMipmaps = false;\n      this.renderTargetsHorizontal.push(renderTargetHorizonal);\n      const renderTargetVertical = new WebGLRenderTarget(resx, resy, { type: HalfFloatType });\n      renderTargetVertical.texture.name = \"UnrealBloomPass.v\" + i;\n      renderTargetVertical.texture.generateMipmaps = false;\n      this.renderTargetsVertical.push(renderTargetVertical);\n      resx = Math.round(resx / 2);\n      resy = Math.round(resy / 2);\n    }\n    const highPassShader = LuminosityHighPassShader;\n    this.highPassUniforms = UniformsUtils.clone(highPassShader.uniforms);\n    this.highPassUniforms[\"luminosityThreshold\"].value = threshold;\n    this.highPassUniforms[\"smoothWidth\"].value = 0.01;\n    this.materialHighPassFilter = new ShaderMaterial({\n      uniforms: this.highPassUniforms,\n      vertexShader: highPassShader.vertexShader,\n      fragmentShader: highPassShader.fragmentShader,\n      defines: {}\n    });\n    this.separableBlurMaterials = [];\n    const kernelSizeArray = [3, 5, 7, 9, 11];\n    resx = Math.round(this.resolution.x / 2);\n    resy = Math.round(this.resolution.y / 2);\n    for (let i = 0; i < this.nMips; i++) {\n      this.separableBlurMaterials.push(this.getSeperableBlurMaterial(kernelSizeArray[i]));\n      this.separableBlurMaterials[i].uniforms[\"texSize\"].value = new Vector2(resx, resy);\n      resx = Math.round(resx / 2);\n      resy = Math.round(resy / 2);\n    }\n    this.compositeMaterial = this.getCompositeMaterial(this.nMips);\n    this.compositeMaterial.uniforms[\"blurTexture1\"].value = this.renderTargetsVertical[0].texture;\n    this.compositeMaterial.uniforms[\"blurTexture2\"].value = this.renderTargetsVertical[1].texture;\n    this.compositeMaterial.uniforms[\"blurTexture3\"].value = this.renderTargetsVertical[2].texture;\n    this.compositeMaterial.uniforms[\"blurTexture4\"].value = this.renderTargetsVertical[3].texture;\n    this.compositeMaterial.uniforms[\"blurTexture5\"].value = this.renderTargetsVertical[4].texture;\n    this.compositeMaterial.uniforms[\"bloomStrength\"].value = strength;\n    this.compositeMaterial.uniforms[\"bloomRadius\"].value = 0.1;\n    this.compositeMaterial.needsUpdate = true;\n    const bloomFactors = [1, 0.8, 0.6, 0.4, 0.2];\n    this.compositeMaterial.uniforms[\"bloomFactors\"].value = bloomFactors;\n    this.bloomTintColors = [\n      new Vector3(1, 1, 1),\n      new Vector3(1, 1, 1),\n      new Vector3(1, 1, 1),\n      new Vector3(1, 1, 1),\n      new Vector3(1, 1, 1)\n    ];\n    this.compositeMaterial.uniforms[\"bloomTintColors\"].value = this.bloomTintColors;\n    const copyShader = CopyShader;\n    this.copyUniforms = UniformsUtils.clone(copyShader.uniforms);\n    this.copyUniforms[\"opacity\"].value = 1;\n    this.materialCopy = new ShaderMaterial({\n      uniforms: this.copyUniforms,\n      vertexShader: copyShader.vertexShader,\n      fragmentShader: copyShader.fragmentShader,\n      blending: AdditiveBlending,\n      depthTest: false,\n      depthWrite: false,\n      transparent: true\n    });\n    this.enabled = true;\n    this.needsSwap = false;\n    this._oldClearColor = new Color();\n    this.oldClearAlpha = 1;\n    this.basic = new MeshBasicMaterial();\n    this.fsQuad = new FullScreenQuad(null);\n  }\n  dispose() {\n    for (let i = 0; i < this.renderTargetsHorizontal.length; i++) {\n      this.renderTargetsHorizontal[i].dispose();\n    }\n    for (let i = 0; i < this.renderTargetsVertical.length; i++) {\n      this.renderTargetsVertical[i].dispose();\n    }\n    this.renderTargetBright.dispose();\n    for (let i = 0; i < this.separableBlurMaterials.length; i++) {\n      this.separableBlurMaterials[i].dispose();\n    }\n    this.compositeMaterial.dispose();\n    this.materialCopy.dispose();\n    this.basic.dispose();\n    this.fsQuad.dispose();\n  }\n  setSize(width, height) {\n    let resx = Math.round(width / 2);\n    let resy = Math.round(height / 2);\n    this.renderTargetBright.setSize(resx, resy);\n    for (let i = 0; i < this.nMips; i++) {\n      this.renderTargetsHorizontal[i].setSize(resx, resy);\n      this.renderTargetsVertical[i].setSize(resx, resy);\n      this.separableBlurMaterials[i].uniforms[\"texSize\"].value = new Vector2(resx, resy);\n      resx = Math.round(resx / 2);\n      resy = Math.round(resy / 2);\n    }\n  }\n  render(renderer, writeBuffer, readBuffer, deltaTime, maskActive) {\n    renderer.getClearColor(this._oldClearColor);\n    this.oldClearAlpha = renderer.getClearAlpha();\n    const oldAutoClear = renderer.autoClear;\n    renderer.autoClear = false;\n    renderer.setClearColor(this.clearColor, 0);\n    if (maskActive)\n      renderer.state.buffers.stencil.setTest(false);\n    if (this.renderToScreen) {\n      this.fsQuad.material = this.basic;\n      this.basic.map = readBuffer.texture;\n      renderer.setRenderTarget(null);\n      renderer.clear();\n      this.fsQuad.render(renderer);\n    }\n    this.highPassUniforms[\"tDiffuse\"].value = readBuffer.texture;\n    this.highPassUniforms[\"luminosityThreshold\"].value = this.threshold;\n    this.fsQuad.material = this.materialHighPassFilter;\n    renderer.setRenderTarget(this.renderTargetBright);\n    renderer.clear();\n    this.fsQuad.render(renderer);\n    let inputRenderTarget = this.renderTargetBright;\n    for (let i = 0; i < this.nMips; i++) {\n      this.fsQuad.material = this.separableBlurMaterials[i];\n      this.separableBlurMaterials[i].uniforms[\"colorTexture\"].value = inputRenderTarget.texture;\n      this.separableBlurMaterials[i].uniforms[\"direction\"].value = _UnrealBloomPass.BlurDirectionX;\n      renderer.setRenderTarget(this.renderTargetsHorizontal[i]);\n      renderer.clear();\n      this.fsQuad.render(renderer);\n      this.separableBlurMaterials[i].uniforms[\"colorTexture\"].value = this.renderTargetsHorizontal[i].texture;\n      this.separableBlurMaterials[i].uniforms[\"direction\"].value = _UnrealBloomPass.BlurDirectionY;\n      renderer.setRenderTarget(this.renderTargetsVertical[i]);\n      renderer.clear();\n      this.fsQuad.render(renderer);\n      inputRenderTarget = this.renderTargetsVertical[i];\n    }\n    this.fsQuad.material = this.compositeMaterial;\n    this.compositeMaterial.uniforms[\"bloomStrength\"].value = this.strength;\n    this.compositeMaterial.uniforms[\"bloomRadius\"].value = this.radius;\n    this.compositeMaterial.uniforms[\"bloomTintColors\"].value = this.bloomTintColors;\n    renderer.setRenderTarget(this.renderTargetsHorizontal[0]);\n    renderer.clear();\n    this.fsQuad.render(renderer);\n    this.fsQuad.material = this.materialCopy;\n    this.copyUniforms[\"tDiffuse\"].value = this.renderTargetsHorizontal[0].texture;\n    if (maskActive)\n      renderer.state.buffers.stencil.setTest(true);\n    if (this.renderToScreen) {\n      renderer.setRenderTarget(null);\n      this.fsQuad.render(renderer);\n    } else {\n      renderer.setRenderTarget(readBuffer);\n      this.fsQuad.render(renderer);\n    }\n    renderer.setClearColor(this._oldClearColor, this.oldClearAlpha);\n    renderer.autoClear = oldAutoClear;\n  }\n  getSeperableBlurMaterial(kernelRadius) {\n    return new ShaderMaterial({\n      defines: {\n        KERNEL_RADIUS: kernelRadius,\n        SIGMA: kernelRadius\n      },\n      uniforms: {\n        colorTexture: { value: null },\n        texSize: { value: new Vector2(0.5, 0.5) },\n        direction: { value: new Vector2(0.5, 0.5) }\n      },\n      vertexShader: `varying vec2 vUv;\n\t\t\t\tvoid main() {\n\t\t\t\t\tvUv = uv;\n\t\t\t\t\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n\t\t\t\t}`,\n      fragmentShader: `#include <common>\n\t\t\t\tvarying vec2 vUv;\n\t\t\t\tuniform sampler2D colorTexture;\n\t\t\t\tuniform vec2 texSize;\n\t\t\t\tuniform vec2 direction;\n\n\t\t\t\tfloat gaussianPdf(in float x, in float sigma) {\n\t\t\t\t\treturn 0.39894 * exp( -0.5 * x * x/( sigma * sigma))/sigma;\n\t\t\t\t}\n\t\t\t\tvoid main() {\n\t\t\t\t\tvec2 invSize = 1.0 / texSize;\n\t\t\t\t\tfloat fSigma = float(SIGMA);\n\t\t\t\t\tfloat weightSum = gaussianPdf(0.0, fSigma);\n\t\t\t\t\tvec3 diffuseSum = texture2D( colorTexture, vUv).rgb * weightSum;\n\t\t\t\t\tfor( int i = 1; i < KERNEL_RADIUS; i ++ ) {\n\t\t\t\t\t\tfloat x = float(i);\n\t\t\t\t\t\tfloat w = gaussianPdf(x, fSigma);\n\t\t\t\t\t\tvec2 uvOffset = direction * invSize * x;\n\t\t\t\t\t\tvec3 sample1 = texture2D( colorTexture, vUv + uvOffset).rgb;\n\t\t\t\t\t\tvec3 sample2 = texture2D( colorTexture, vUv - uvOffset).rgb;\n\t\t\t\t\t\tdiffuseSum += (sample1 + sample2) * w;\n\t\t\t\t\t\tweightSum += 2.0 * w;\n\t\t\t\t\t}\n\t\t\t\t\tgl_FragColor = vec4(diffuseSum/weightSum, 1.0);\n\t\t\t\t}`\n    });\n  }\n  getCompositeMaterial(nMips) {\n    return new ShaderMaterial({\n      defines: {\n        NUM_MIPS: nMips\n      },\n      uniforms: {\n        blurTexture1: { value: null },\n        blurTexture2: { value: null },\n        blurTexture3: { value: null },\n        blurTexture4: { value: null },\n        blurTexture5: { value: null },\n        bloomStrength: { value: 1 },\n        bloomFactors: { value: null },\n        bloomTintColors: { value: null },\n        bloomRadius: { value: 0 }\n      },\n      vertexShader: `varying vec2 vUv;\n\t\t\t\tvoid main() {\n\t\t\t\t\tvUv = uv;\n\t\t\t\t\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n\t\t\t\t}`,\n      fragmentShader: `varying vec2 vUv;\n\t\t\t\tuniform sampler2D blurTexture1;\n\t\t\t\tuniform sampler2D blurTexture2;\n\t\t\t\tuniform sampler2D blurTexture3;\n\t\t\t\tuniform sampler2D blurTexture4;\n\t\t\t\tuniform sampler2D blurTexture5;\n\t\t\t\tuniform float bloomStrength;\n\t\t\t\tuniform float bloomRadius;\n\t\t\t\tuniform float bloomFactors[NUM_MIPS];\n\t\t\t\tuniform vec3 bloomTintColors[NUM_MIPS];\n\n\t\t\t\tfloat lerpBloomFactor(const in float factor) {\n\t\t\t\t\tfloat mirrorFactor = 1.2 - factor;\n\t\t\t\t\treturn mix(factor, mirrorFactor, bloomRadius);\n\t\t\t\t}\n\n\t\t\t\tvoid main() {\n\t\t\t\t\tgl_FragColor = bloomStrength * ( lerpBloomFactor(bloomFactors[0]) * vec4(bloomTintColors[0], 1.0) * texture2D(blurTexture1, vUv) +\n\t\t\t\t\t\tlerpBloomFactor(bloomFactors[1]) * vec4(bloomTintColors[1], 1.0) * texture2D(blurTexture2, vUv) +\n\t\t\t\t\t\tlerpBloomFactor(bloomFactors[2]) * vec4(bloomTintColors[2], 1.0) * texture2D(blurTexture3, vUv) +\n\t\t\t\t\t\tlerpBloomFactor(bloomFactors[3]) * vec4(bloomTintColors[3], 1.0) * texture2D(blurTexture4, vUv) +\n\t\t\t\t\t\tlerpBloomFactor(bloomFactors[4]) * vec4(bloomTintColors[4], 1.0) * texture2D(blurTexture5, vUv) );\n\t\t\t\t}`\n    });\n  }\n};\nlet UnrealBloomPass = _UnrealBloomPass;\n__publicField(UnrealBloomPass, \"BlurDirectionX\", /* @__PURE__ */ new Vector2(1, 0));\n__publicField(UnrealBloomPass, \"BlurDirectionY\", /* @__PURE__ */ new Vector2(0, 1));\nexport {\n  UnrealBloomPass\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}