{"ast":null,"code":"import _classCallCheck from \"/home/krug/Coding/JavaScript/Websites/Personal/personal/node_modules/.pnpm/@babel+runtime@7.22.3/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/home/krug/Coding/JavaScript/Websites/Personal/personal/node_modules/.pnpm/@babel+runtime@7.22.3/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"/home/krug/Coding/JavaScript/Websites/Personal/personal/node_modules/.pnpm/@babel+runtime@7.22.3/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/home/krug/Coding/JavaScript/Websites/Personal/personal/node_modules/.pnpm/@babel+runtime@7.22.3/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { Vector3, Vector4, Matrix4, Line3, Box3, Sphere, MathUtils, Mesh, InstancedInterleavedBuffer, InterleavedBufferAttribute } from \"three\";\nimport { LineSegmentsGeometry } from \"./LineSegmentsGeometry.js\";\nimport { LineMaterial } from \"./LineMaterial.js\";\nvar _start = /* @__PURE__ */new Vector3();\nvar _end = /* @__PURE__ */new Vector3();\nvar _start4 = /* @__PURE__ */new Vector4();\nvar _end4 = /* @__PURE__ */new Vector4();\nvar _ssOrigin = /* @__PURE__ */new Vector4();\nvar _ssOrigin3 = /* @__PURE__ */new Vector3();\nvar _mvMatrix = /* @__PURE__ */new Matrix4();\nvar _line = /* @__PURE__ */new Line3();\nvar _closestPoint = /* @__PURE__ */new Vector3();\nvar _box = /* @__PURE__ */new Box3();\nvar _sphere = /* @__PURE__ */new Sphere();\nvar _clipToWorldVector = /* @__PURE__ */new Vector4();\nvar _ray, _instanceStart, _instanceEnd, _lineWidth;\nfunction getWorldSpaceHalfWidth(camera, distance, resolution) {\n  _clipToWorldVector.set(0, 0, -distance, 1).applyMatrix4(camera.projectionMatrix);\n  _clipToWorldVector.multiplyScalar(1 / _clipToWorldVector.w);\n  _clipToWorldVector.x = _lineWidth / resolution.width;\n  _clipToWorldVector.y = _lineWidth / resolution.height;\n  _clipToWorldVector.applyMatrix4(camera.projectionMatrixInverse);\n  _clipToWorldVector.multiplyScalar(1 / _clipToWorldVector.w);\n  return Math.abs(Math.max(_clipToWorldVector.x, _clipToWorldVector.y));\n}\nfunction raycastWorldUnits(lineSegments, intersects) {\n  for (var i = 0, l = _instanceStart.count; i < l; i++) {\n    _line.start.fromBufferAttribute(_instanceStart, i);\n    _line.end.fromBufferAttribute(_instanceEnd, i);\n    var pointOnLine = new Vector3();\n    var point = new Vector3();\n    _ray.distanceSqToSegment(_line.start, _line.end, point, pointOnLine);\n    var isInside = point.distanceTo(pointOnLine) < _lineWidth * 0.5;\n    if (isInside) {\n      intersects.push({\n        point: point,\n        pointOnLine: pointOnLine,\n        distance: _ray.origin.distanceTo(point),\n        object: lineSegments,\n        face: null,\n        faceIndex: i,\n        uv: null,\n        uv2: null\n      });\n    }\n  }\n}\nfunction raycastScreenSpace(lineSegments, camera, intersects) {\n  var projectionMatrix = camera.projectionMatrix;\n  var material = lineSegments.material;\n  var resolution = material.resolution;\n  var matrixWorld = lineSegments.matrixWorld;\n  var geometry = lineSegments.geometry;\n  var instanceStart = geometry.attributes.instanceStart;\n  var instanceEnd = geometry.attributes.instanceEnd;\n  var near = -camera.near;\n  _ray.at(1, _ssOrigin);\n  _ssOrigin.w = 1;\n  _ssOrigin.applyMatrix4(camera.matrixWorldInverse);\n  _ssOrigin.applyMatrix4(projectionMatrix);\n  _ssOrigin.multiplyScalar(1 / _ssOrigin.w);\n  _ssOrigin.x *= resolution.x / 2;\n  _ssOrigin.y *= resolution.y / 2;\n  _ssOrigin.z = 0;\n  _ssOrigin3.copy(_ssOrigin);\n  _mvMatrix.multiplyMatrices(camera.matrixWorldInverse, matrixWorld);\n  for (var i = 0, l = instanceStart.count; i < l; i++) {\n    _start4.fromBufferAttribute(instanceStart, i);\n    _end4.fromBufferAttribute(instanceEnd, i);\n    _start4.w = 1;\n    _end4.w = 1;\n    _start4.applyMatrix4(_mvMatrix);\n    _end4.applyMatrix4(_mvMatrix);\n    var isBehindCameraNear = _start4.z > near && _end4.z > near;\n    if (isBehindCameraNear) {\n      continue;\n    }\n    if (_start4.z > near) {\n      var deltaDist = _start4.z - _end4.z;\n      var t = (_start4.z - near) / deltaDist;\n      _start4.lerp(_end4, t);\n    } else if (_end4.z > near) {\n      var _deltaDist = _end4.z - _start4.z;\n      var _t = (_end4.z - near) / _deltaDist;\n      _end4.lerp(_start4, _t);\n    }\n    _start4.applyMatrix4(projectionMatrix);\n    _end4.applyMatrix4(projectionMatrix);\n    _start4.multiplyScalar(1 / _start4.w);\n    _end4.multiplyScalar(1 / _end4.w);\n    _start4.x *= resolution.x / 2;\n    _start4.y *= resolution.y / 2;\n    _end4.x *= resolution.x / 2;\n    _end4.y *= resolution.y / 2;\n    _line.start.copy(_start4);\n    _line.start.z = 0;\n    _line.end.copy(_end4);\n    _line.end.z = 0;\n    var param = _line.closestPointToPointParameter(_ssOrigin3, true);\n    _line.at(param, _closestPoint);\n    var zPos = MathUtils.lerp(_start4.z, _end4.z, param);\n    var isInClipSpace = zPos >= -1 && zPos <= 1;\n    var isInside = _ssOrigin3.distanceTo(_closestPoint) < _lineWidth * 0.5;\n    if (isInClipSpace && isInside) {\n      _line.start.fromBufferAttribute(instanceStart, i);\n      _line.end.fromBufferAttribute(instanceEnd, i);\n      _line.start.applyMatrix4(matrixWorld);\n      _line.end.applyMatrix4(matrixWorld);\n      var pointOnLine = new Vector3();\n      var point = new Vector3();\n      _ray.distanceSqToSegment(_line.start, _line.end, point, pointOnLine);\n      intersects.push({\n        point: point,\n        pointOnLine: pointOnLine,\n        distance: _ray.origin.distanceTo(point),\n        object: lineSegments,\n        face: null,\n        faceIndex: i,\n        uv: null,\n        uv2: null\n      });\n    }\n  }\n}\nvar LineSegments2 = /*#__PURE__*/function (_Mesh) {\n  _inherits(LineSegments2, _Mesh);\n  var _super = _createSuper(LineSegments2);\n  function LineSegments2() {\n    var _this;\n    var geometry = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : new LineSegmentsGeometry();\n    var material = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : new LineMaterial({\n      color: Math.random() * 16777215\n    });\n    _classCallCheck(this, LineSegments2);\n    _this = _super.call(this, geometry, material);\n    _this.isLineSegments2 = true;\n    _this.type = \"LineSegments2\";\n    return _this;\n  }\n  // for backwards-compatibility, but could be a method of LineSegmentsGeometry...\n  _createClass(LineSegments2, [{\n    key: \"computeLineDistances\",\n    value: function computeLineDistances() {\n      var geometry = this.geometry;\n      var instanceStart = geometry.attributes.instanceStart;\n      var instanceEnd = geometry.attributes.instanceEnd;\n      var lineDistances = new Float32Array(2 * instanceStart.count);\n      for (var i = 0, j = 0, l = instanceStart.count; i < l; i++, j += 2) {\n        _start.fromBufferAttribute(instanceStart, i);\n        _end.fromBufferAttribute(instanceEnd, i);\n        lineDistances[j] = j === 0 ? 0 : lineDistances[j - 1];\n        lineDistances[j + 1] = lineDistances[j] + _start.distanceTo(_end);\n      }\n      var instanceDistanceBuffer = new InstancedInterleavedBuffer(lineDistances, 2, 1);\n      geometry.setAttribute(\"instanceDistanceStart\", new InterleavedBufferAttribute(instanceDistanceBuffer, 1, 0));\n      geometry.setAttribute(\"instanceDistanceEnd\", new InterleavedBufferAttribute(instanceDistanceBuffer, 1, 1));\n      return this;\n    }\n  }, {\n    key: \"raycast\",\n    value: function raycast(raycaster, intersects) {\n      var worldUnits = this.material.worldUnits;\n      var camera = raycaster.camera;\n      if (camera === null && !worldUnits) {\n        console.error('LineSegments2: \"Raycaster.camera\" needs to be set in order to raycast against LineSegments2 while worldUnits is set to false.');\n      }\n      var threshold = raycaster.params.Line2 !== void 0 ? raycaster.params.Line2.threshold || 0 : 0;\n      _ray = raycaster.ray;\n      var matrixWorld = this.matrixWorld;\n      var geometry = this.geometry;\n      var material = this.material;\n      _lineWidth = material.linewidth + threshold;\n      _instanceStart = geometry.attributes.instanceStart;\n      _instanceEnd = geometry.attributes.instanceEnd;\n      if (geometry.boundingSphere === null) {\n        geometry.computeBoundingSphere();\n      }\n      _sphere.copy(geometry.boundingSphere).applyMatrix4(matrixWorld);\n      var sphereMargin;\n      if (worldUnits) {\n        sphereMargin = _lineWidth * 0.5;\n      } else {\n        var distanceToSphere = Math.max(camera.near, _sphere.distanceToPoint(_ray.origin));\n        sphereMargin = getWorldSpaceHalfWidth(camera, distanceToSphere, material.resolution);\n      }\n      _sphere.radius += sphereMargin;\n      if (_ray.intersectsSphere(_sphere) === false) {\n        return;\n      }\n      if (geometry.boundingBox === null) {\n        geometry.computeBoundingBox();\n      }\n      _box.copy(geometry.boundingBox).applyMatrix4(matrixWorld);\n      var boxMargin;\n      if (worldUnits) {\n        boxMargin = _lineWidth * 0.5;\n      } else {\n        var distanceToBox = Math.max(camera.near, _box.distanceToPoint(_ray.origin));\n        boxMargin = getWorldSpaceHalfWidth(camera, distanceToBox, material.resolution);\n      }\n      _box.expandByScalar(boxMargin);\n      if (_ray.intersectsBox(_box) === false) {\n        return;\n      }\n      if (worldUnits) {\n        raycastWorldUnits(this, intersects);\n      } else {\n        raycastScreenSpace(this, camera, intersects);\n      }\n    }\n  }]);\n  return LineSegments2;\n}(Mesh);\nexport { LineSegments2 };","map":{"version":3,"names":["Vector3","Vector4","Matrix4","Line3","Box3","Sphere","MathUtils","Mesh","InstancedInterleavedBuffer","InterleavedBufferAttribute","LineSegmentsGeometry","LineMaterial","_start","_end","_start4","_end4","_ssOrigin","_ssOrigin3","_mvMatrix","_line","_closestPoint","_box","_sphere","_clipToWorldVector","_ray","_instanceStart","_instanceEnd","_lineWidth","getWorldSpaceHalfWidth","camera","distance","resolution","set","applyMatrix4","projectionMatrix","multiplyScalar","w","x","width","y","height","projectionMatrixInverse","Math","abs","max","raycastWorldUnits","lineSegments","intersects","i","l","count","start","fromBufferAttribute","end","pointOnLine","point","distanceSqToSegment","isInside","distanceTo","push","origin","object","face","faceIndex","uv","uv2","raycastScreenSpace","material","matrixWorld","geometry","instanceStart","attributes","instanceEnd","near","at","matrixWorldInverse","z","copy","multiplyMatrices","isBehindCameraNear","deltaDist","t","lerp","param","closestPointToPointParameter","zPos","isInClipSpace","LineSegments2","_Mesh","_inherits","_super","_createSuper","_this","arguments","length","undefined","color","random","_classCallCheck","call","isLineSegments2","type","_createClass","key","value","computeLineDistances","lineDistances","Float32Array","j","instanceDistanceBuffer","setAttribute","raycast","raycaster","worldUnits","console","error","threshold","params","Line2","ray","linewidth","boundingSphere","computeBoundingSphere","sphereMargin","distanceToSphere","distanceToPoint","radius","intersectsSphere","boundingBox","computeBoundingBox","boxMargin","distanceToBox","expandByScalar","intersectsBox"],"sources":["/home/krug/Coding/JavaScript/Websites/Personal/personal/node_modules/.pnpm/three-stdlib@2.23.7_three@0.151.3/node_modules/three-stdlib/lines/LineSegments2.js"],"sourcesContent":["import { Vector3, Vector4, Matrix4, Line3, Box3, Sphere, MathUtils, Mesh, InstancedInterleavedBuffer, InterleavedBufferAttribute } from \"three\";\nimport { LineSegmentsGeometry } from \"./LineSegmentsGeometry.js\";\nimport { LineMaterial } from \"./LineMaterial.js\";\nconst _start = /* @__PURE__ */ new Vector3();\nconst _end = /* @__PURE__ */ new Vector3();\nconst _start4 = /* @__PURE__ */ new Vector4();\nconst _end4 = /* @__PURE__ */ new Vector4();\nconst _ssOrigin = /* @__PURE__ */ new Vector4();\nconst _ssOrigin3 = /* @__PURE__ */ new Vector3();\nconst _mvMatrix = /* @__PURE__ */ new Matrix4();\nconst _line = /* @__PURE__ */ new Line3();\nconst _closestPoint = /* @__PURE__ */ new Vector3();\nconst _box = /* @__PURE__ */ new Box3();\nconst _sphere = /* @__PURE__ */ new Sphere();\nconst _clipToWorldVector = /* @__PURE__ */ new Vector4();\nlet _ray, _instanceStart, _instanceEnd, _lineWidth;\nfunction getWorldSpaceHalfWidth(camera, distance, resolution) {\n  _clipToWorldVector.set(0, 0, -distance, 1).applyMatrix4(camera.projectionMatrix);\n  _clipToWorldVector.multiplyScalar(1 / _clipToWorldVector.w);\n  _clipToWorldVector.x = _lineWidth / resolution.width;\n  _clipToWorldVector.y = _lineWidth / resolution.height;\n  _clipToWorldVector.applyMatrix4(camera.projectionMatrixInverse);\n  _clipToWorldVector.multiplyScalar(1 / _clipToWorldVector.w);\n  return Math.abs(Math.max(_clipToWorldVector.x, _clipToWorldVector.y));\n}\nfunction raycastWorldUnits(lineSegments, intersects) {\n  for (let i = 0, l = _instanceStart.count; i < l; i++) {\n    _line.start.fromBufferAttribute(_instanceStart, i);\n    _line.end.fromBufferAttribute(_instanceEnd, i);\n    const pointOnLine = new Vector3();\n    const point = new Vector3();\n    _ray.distanceSqToSegment(_line.start, _line.end, point, pointOnLine);\n    const isInside = point.distanceTo(pointOnLine) < _lineWidth * 0.5;\n    if (isInside) {\n      intersects.push({\n        point,\n        pointOnLine,\n        distance: _ray.origin.distanceTo(point),\n        object: lineSegments,\n        face: null,\n        faceIndex: i,\n        uv: null,\n        uv2: null\n      });\n    }\n  }\n}\nfunction raycastScreenSpace(lineSegments, camera, intersects) {\n  const projectionMatrix = camera.projectionMatrix;\n  const material = lineSegments.material;\n  const resolution = material.resolution;\n  const matrixWorld = lineSegments.matrixWorld;\n  const geometry = lineSegments.geometry;\n  const instanceStart = geometry.attributes.instanceStart;\n  const instanceEnd = geometry.attributes.instanceEnd;\n  const near = -camera.near;\n  _ray.at(1, _ssOrigin);\n  _ssOrigin.w = 1;\n  _ssOrigin.applyMatrix4(camera.matrixWorldInverse);\n  _ssOrigin.applyMatrix4(projectionMatrix);\n  _ssOrigin.multiplyScalar(1 / _ssOrigin.w);\n  _ssOrigin.x *= resolution.x / 2;\n  _ssOrigin.y *= resolution.y / 2;\n  _ssOrigin.z = 0;\n  _ssOrigin3.copy(_ssOrigin);\n  _mvMatrix.multiplyMatrices(camera.matrixWorldInverse, matrixWorld);\n  for (let i = 0, l = instanceStart.count; i < l; i++) {\n    _start4.fromBufferAttribute(instanceStart, i);\n    _end4.fromBufferAttribute(instanceEnd, i);\n    _start4.w = 1;\n    _end4.w = 1;\n    _start4.applyMatrix4(_mvMatrix);\n    _end4.applyMatrix4(_mvMatrix);\n    const isBehindCameraNear = _start4.z > near && _end4.z > near;\n    if (isBehindCameraNear) {\n      continue;\n    }\n    if (_start4.z > near) {\n      const deltaDist = _start4.z - _end4.z;\n      const t = (_start4.z - near) / deltaDist;\n      _start4.lerp(_end4, t);\n    } else if (_end4.z > near) {\n      const deltaDist = _end4.z - _start4.z;\n      const t = (_end4.z - near) / deltaDist;\n      _end4.lerp(_start4, t);\n    }\n    _start4.applyMatrix4(projectionMatrix);\n    _end4.applyMatrix4(projectionMatrix);\n    _start4.multiplyScalar(1 / _start4.w);\n    _end4.multiplyScalar(1 / _end4.w);\n    _start4.x *= resolution.x / 2;\n    _start4.y *= resolution.y / 2;\n    _end4.x *= resolution.x / 2;\n    _end4.y *= resolution.y / 2;\n    _line.start.copy(_start4);\n    _line.start.z = 0;\n    _line.end.copy(_end4);\n    _line.end.z = 0;\n    const param = _line.closestPointToPointParameter(_ssOrigin3, true);\n    _line.at(param, _closestPoint);\n    const zPos = MathUtils.lerp(_start4.z, _end4.z, param);\n    const isInClipSpace = zPos >= -1 && zPos <= 1;\n    const isInside = _ssOrigin3.distanceTo(_closestPoint) < _lineWidth * 0.5;\n    if (isInClipSpace && isInside) {\n      _line.start.fromBufferAttribute(instanceStart, i);\n      _line.end.fromBufferAttribute(instanceEnd, i);\n      _line.start.applyMatrix4(matrixWorld);\n      _line.end.applyMatrix4(matrixWorld);\n      const pointOnLine = new Vector3();\n      const point = new Vector3();\n      _ray.distanceSqToSegment(_line.start, _line.end, point, pointOnLine);\n      intersects.push({\n        point,\n        pointOnLine,\n        distance: _ray.origin.distanceTo(point),\n        object: lineSegments,\n        face: null,\n        faceIndex: i,\n        uv: null,\n        uv2: null\n      });\n    }\n  }\n}\nclass LineSegments2 extends Mesh {\n  constructor(geometry = new LineSegmentsGeometry(), material = new LineMaterial({ color: Math.random() * 16777215 })) {\n    super(geometry, material);\n    this.isLineSegments2 = true;\n    this.type = \"LineSegments2\";\n  }\n  // for backwards-compatibility, but could be a method of LineSegmentsGeometry...\n  computeLineDistances() {\n    const geometry = this.geometry;\n    const instanceStart = geometry.attributes.instanceStart;\n    const instanceEnd = geometry.attributes.instanceEnd;\n    const lineDistances = new Float32Array(2 * instanceStart.count);\n    for (let i = 0, j = 0, l = instanceStart.count; i < l; i++, j += 2) {\n      _start.fromBufferAttribute(instanceStart, i);\n      _end.fromBufferAttribute(instanceEnd, i);\n      lineDistances[j] = j === 0 ? 0 : lineDistances[j - 1];\n      lineDistances[j + 1] = lineDistances[j] + _start.distanceTo(_end);\n    }\n    const instanceDistanceBuffer = new InstancedInterleavedBuffer(lineDistances, 2, 1);\n    geometry.setAttribute(\"instanceDistanceStart\", new InterleavedBufferAttribute(instanceDistanceBuffer, 1, 0));\n    geometry.setAttribute(\"instanceDistanceEnd\", new InterleavedBufferAttribute(instanceDistanceBuffer, 1, 1));\n    return this;\n  }\n  raycast(raycaster, intersects) {\n    const worldUnits = this.material.worldUnits;\n    const camera = raycaster.camera;\n    if (camera === null && !worldUnits) {\n      console.error(\n        'LineSegments2: \"Raycaster.camera\" needs to be set in order to raycast against LineSegments2 while worldUnits is set to false.'\n      );\n    }\n    const threshold = raycaster.params.Line2 !== void 0 ? raycaster.params.Line2.threshold || 0 : 0;\n    _ray = raycaster.ray;\n    const matrixWorld = this.matrixWorld;\n    const geometry = this.geometry;\n    const material = this.material;\n    _lineWidth = material.linewidth + threshold;\n    _instanceStart = geometry.attributes.instanceStart;\n    _instanceEnd = geometry.attributes.instanceEnd;\n    if (geometry.boundingSphere === null) {\n      geometry.computeBoundingSphere();\n    }\n    _sphere.copy(geometry.boundingSphere).applyMatrix4(matrixWorld);\n    let sphereMargin;\n    if (worldUnits) {\n      sphereMargin = _lineWidth * 0.5;\n    } else {\n      const distanceToSphere = Math.max(camera.near, _sphere.distanceToPoint(_ray.origin));\n      sphereMargin = getWorldSpaceHalfWidth(camera, distanceToSphere, material.resolution);\n    }\n    _sphere.radius += sphereMargin;\n    if (_ray.intersectsSphere(_sphere) === false) {\n      return;\n    }\n    if (geometry.boundingBox === null) {\n      geometry.computeBoundingBox();\n    }\n    _box.copy(geometry.boundingBox).applyMatrix4(matrixWorld);\n    let boxMargin;\n    if (worldUnits) {\n      boxMargin = _lineWidth * 0.5;\n    } else {\n      const distanceToBox = Math.max(camera.near, _box.distanceToPoint(_ray.origin));\n      boxMargin = getWorldSpaceHalfWidth(camera, distanceToBox, material.resolution);\n    }\n    _box.expandByScalar(boxMargin);\n    if (_ray.intersectsBox(_box) === false) {\n      return;\n    }\n    if (worldUnits) {\n      raycastWorldUnits(this, intersects);\n    } else {\n      raycastScreenSpace(this, camera, intersects);\n    }\n  }\n}\nexport {\n  LineSegments2\n};\n"],"mappings":";;;;AAAA,SAASA,OAAO,EAAEC,OAAO,EAAEC,OAAO,EAAEC,KAAK,EAAEC,IAAI,EAAEC,MAAM,EAAEC,SAAS,EAAEC,IAAI,EAAEC,0BAA0B,EAAEC,0BAA0B,QAAQ,OAAO;AAC/I,SAASC,oBAAoB,QAAQ,2BAA2B;AAChE,SAASC,YAAY,QAAQ,mBAAmB;AAChD,IAAMC,MAAM,GAAG,eAAgB,IAAIZ,OAAO,CAAC,CAAC;AAC5C,IAAMa,IAAI,GAAG,eAAgB,IAAIb,OAAO,CAAC,CAAC;AAC1C,IAAMc,OAAO,GAAG,eAAgB,IAAIb,OAAO,CAAC,CAAC;AAC7C,IAAMc,KAAK,GAAG,eAAgB,IAAId,OAAO,CAAC,CAAC;AAC3C,IAAMe,SAAS,GAAG,eAAgB,IAAIf,OAAO,CAAC,CAAC;AAC/C,IAAMgB,UAAU,GAAG,eAAgB,IAAIjB,OAAO,CAAC,CAAC;AAChD,IAAMkB,SAAS,GAAG,eAAgB,IAAIhB,OAAO,CAAC,CAAC;AAC/C,IAAMiB,KAAK,GAAG,eAAgB,IAAIhB,KAAK,CAAC,CAAC;AACzC,IAAMiB,aAAa,GAAG,eAAgB,IAAIpB,OAAO,CAAC,CAAC;AACnD,IAAMqB,IAAI,GAAG,eAAgB,IAAIjB,IAAI,CAAC,CAAC;AACvC,IAAMkB,OAAO,GAAG,eAAgB,IAAIjB,MAAM,CAAC,CAAC;AAC5C,IAAMkB,kBAAkB,GAAG,eAAgB,IAAItB,OAAO,CAAC,CAAC;AACxD,IAAIuB,IAAI,EAAEC,cAAc,EAAEC,YAAY,EAAEC,UAAU;AAClD,SAASC,sBAAsBA,CAACC,MAAM,EAAEC,QAAQ,EAAEC,UAAU,EAAE;EAC5DR,kBAAkB,CAACS,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE,CAACF,QAAQ,EAAE,CAAC,CAAC,CAACG,YAAY,CAACJ,MAAM,CAACK,gBAAgB,CAAC;EAChFX,kBAAkB,CAACY,cAAc,CAAC,CAAC,GAAGZ,kBAAkB,CAACa,CAAC,CAAC;EAC3Db,kBAAkB,CAACc,CAAC,GAAGV,UAAU,GAAGI,UAAU,CAACO,KAAK;EACpDf,kBAAkB,CAACgB,CAAC,GAAGZ,UAAU,GAAGI,UAAU,CAACS,MAAM;EACrDjB,kBAAkB,CAACU,YAAY,CAACJ,MAAM,CAACY,uBAAuB,CAAC;EAC/DlB,kBAAkB,CAACY,cAAc,CAAC,CAAC,GAAGZ,kBAAkB,CAACa,CAAC,CAAC;EAC3D,OAAOM,IAAI,CAACC,GAAG,CAACD,IAAI,CAACE,GAAG,CAACrB,kBAAkB,CAACc,CAAC,EAAEd,kBAAkB,CAACgB,CAAC,CAAC,CAAC;AACvE;AACA,SAASM,iBAAiBA,CAACC,YAAY,EAAEC,UAAU,EAAE;EACnD,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEC,CAAC,GAAGxB,cAAc,CAACyB,KAAK,EAAEF,CAAC,GAAGC,CAAC,EAAED,CAAC,EAAE,EAAE;IACpD7B,KAAK,CAACgC,KAAK,CAACC,mBAAmB,CAAC3B,cAAc,EAAEuB,CAAC,CAAC;IAClD7B,KAAK,CAACkC,GAAG,CAACD,mBAAmB,CAAC1B,YAAY,EAAEsB,CAAC,CAAC;IAC9C,IAAMM,WAAW,GAAG,IAAItD,OAAO,CAAC,CAAC;IACjC,IAAMuD,KAAK,GAAG,IAAIvD,OAAO,CAAC,CAAC;IAC3BwB,IAAI,CAACgC,mBAAmB,CAACrC,KAAK,CAACgC,KAAK,EAAEhC,KAAK,CAACkC,GAAG,EAAEE,KAAK,EAAED,WAAW,CAAC;IACpE,IAAMG,QAAQ,GAAGF,KAAK,CAACG,UAAU,CAACJ,WAAW,CAAC,GAAG3B,UAAU,GAAG,GAAG;IACjE,IAAI8B,QAAQ,EAAE;MACZV,UAAU,CAACY,IAAI,CAAC;QACdJ,KAAK,EAALA,KAAK;QACLD,WAAW,EAAXA,WAAW;QACXxB,QAAQ,EAAEN,IAAI,CAACoC,MAAM,CAACF,UAAU,CAACH,KAAK,CAAC;QACvCM,MAAM,EAAEf,YAAY;QACpBgB,IAAI,EAAE,IAAI;QACVC,SAAS,EAAEf,CAAC;QACZgB,EAAE,EAAE,IAAI;QACRC,GAAG,EAAE;MACP,CAAC,CAAC;IACJ;EACF;AACF;AACA,SAASC,kBAAkBA,CAACpB,YAAY,EAAEjB,MAAM,EAAEkB,UAAU,EAAE;EAC5D,IAAMb,gBAAgB,GAAGL,MAAM,CAACK,gBAAgB;EAChD,IAAMiC,QAAQ,GAAGrB,YAAY,CAACqB,QAAQ;EACtC,IAAMpC,UAAU,GAAGoC,QAAQ,CAACpC,UAAU;EACtC,IAAMqC,WAAW,GAAGtB,YAAY,CAACsB,WAAW;EAC5C,IAAMC,QAAQ,GAAGvB,YAAY,CAACuB,QAAQ;EACtC,IAAMC,aAAa,GAAGD,QAAQ,CAACE,UAAU,CAACD,aAAa;EACvD,IAAME,WAAW,GAAGH,QAAQ,CAACE,UAAU,CAACC,WAAW;EACnD,IAAMC,IAAI,GAAG,CAAC5C,MAAM,CAAC4C,IAAI;EACzBjD,IAAI,CAACkD,EAAE,CAAC,CAAC,EAAE1D,SAAS,CAAC;EACrBA,SAAS,CAACoB,CAAC,GAAG,CAAC;EACfpB,SAAS,CAACiB,YAAY,CAACJ,MAAM,CAAC8C,kBAAkB,CAAC;EACjD3D,SAAS,CAACiB,YAAY,CAACC,gBAAgB,CAAC;EACxClB,SAAS,CAACmB,cAAc,CAAC,CAAC,GAAGnB,SAAS,CAACoB,CAAC,CAAC;EACzCpB,SAAS,CAACqB,CAAC,IAAIN,UAAU,CAACM,CAAC,GAAG,CAAC;EAC/BrB,SAAS,CAACuB,CAAC,IAAIR,UAAU,CAACQ,CAAC,GAAG,CAAC;EAC/BvB,SAAS,CAAC4D,CAAC,GAAG,CAAC;EACf3D,UAAU,CAAC4D,IAAI,CAAC7D,SAAS,CAAC;EAC1BE,SAAS,CAAC4D,gBAAgB,CAACjD,MAAM,CAAC8C,kBAAkB,EAAEP,WAAW,CAAC;EAClE,KAAK,IAAIpB,CAAC,GAAG,CAAC,EAAEC,CAAC,GAAGqB,aAAa,CAACpB,KAAK,EAAEF,CAAC,GAAGC,CAAC,EAAED,CAAC,EAAE,EAAE;IACnDlC,OAAO,CAACsC,mBAAmB,CAACkB,aAAa,EAAEtB,CAAC,CAAC;IAC7CjC,KAAK,CAACqC,mBAAmB,CAACoB,WAAW,EAAExB,CAAC,CAAC;IACzClC,OAAO,CAACsB,CAAC,GAAG,CAAC;IACbrB,KAAK,CAACqB,CAAC,GAAG,CAAC;IACXtB,OAAO,CAACmB,YAAY,CAACf,SAAS,CAAC;IAC/BH,KAAK,CAACkB,YAAY,CAACf,SAAS,CAAC;IAC7B,IAAM6D,kBAAkB,GAAGjE,OAAO,CAAC8D,CAAC,GAAGH,IAAI,IAAI1D,KAAK,CAAC6D,CAAC,GAAGH,IAAI;IAC7D,IAAIM,kBAAkB,EAAE;MACtB;IACF;IACA,IAAIjE,OAAO,CAAC8D,CAAC,GAAGH,IAAI,EAAE;MACpB,IAAMO,SAAS,GAAGlE,OAAO,CAAC8D,CAAC,GAAG7D,KAAK,CAAC6D,CAAC;MACrC,IAAMK,CAAC,GAAG,CAACnE,OAAO,CAAC8D,CAAC,GAAGH,IAAI,IAAIO,SAAS;MACxClE,OAAO,CAACoE,IAAI,CAACnE,KAAK,EAAEkE,CAAC,CAAC;IACxB,CAAC,MAAM,IAAIlE,KAAK,CAAC6D,CAAC,GAAGH,IAAI,EAAE;MACzB,IAAMO,UAAS,GAAGjE,KAAK,CAAC6D,CAAC,GAAG9D,OAAO,CAAC8D,CAAC;MACrC,IAAMK,EAAC,GAAG,CAAClE,KAAK,CAAC6D,CAAC,GAAGH,IAAI,IAAIO,UAAS;MACtCjE,KAAK,CAACmE,IAAI,CAACpE,OAAO,EAAEmE,EAAC,CAAC;IACxB;IACAnE,OAAO,CAACmB,YAAY,CAACC,gBAAgB,CAAC;IACtCnB,KAAK,CAACkB,YAAY,CAACC,gBAAgB,CAAC;IACpCpB,OAAO,CAACqB,cAAc,CAAC,CAAC,GAAGrB,OAAO,CAACsB,CAAC,CAAC;IACrCrB,KAAK,CAACoB,cAAc,CAAC,CAAC,GAAGpB,KAAK,CAACqB,CAAC,CAAC;IACjCtB,OAAO,CAACuB,CAAC,IAAIN,UAAU,CAACM,CAAC,GAAG,CAAC;IAC7BvB,OAAO,CAACyB,CAAC,IAAIR,UAAU,CAACQ,CAAC,GAAG,CAAC;IAC7BxB,KAAK,CAACsB,CAAC,IAAIN,UAAU,CAACM,CAAC,GAAG,CAAC;IAC3BtB,KAAK,CAACwB,CAAC,IAAIR,UAAU,CAACQ,CAAC,GAAG,CAAC;IAC3BpB,KAAK,CAACgC,KAAK,CAAC0B,IAAI,CAAC/D,OAAO,CAAC;IACzBK,KAAK,CAACgC,KAAK,CAACyB,CAAC,GAAG,CAAC;IACjBzD,KAAK,CAACkC,GAAG,CAACwB,IAAI,CAAC9D,KAAK,CAAC;IACrBI,KAAK,CAACkC,GAAG,CAACuB,CAAC,GAAG,CAAC;IACf,IAAMO,KAAK,GAAGhE,KAAK,CAACiE,4BAA4B,CAACnE,UAAU,EAAE,IAAI,CAAC;IAClEE,KAAK,CAACuD,EAAE,CAACS,KAAK,EAAE/D,aAAa,CAAC;IAC9B,IAAMiE,IAAI,GAAG/E,SAAS,CAAC4E,IAAI,CAACpE,OAAO,CAAC8D,CAAC,EAAE7D,KAAK,CAAC6D,CAAC,EAAEO,KAAK,CAAC;IACtD,IAAMG,aAAa,GAAGD,IAAI,IAAI,CAAC,CAAC,IAAIA,IAAI,IAAI,CAAC;IAC7C,IAAM5B,QAAQ,GAAGxC,UAAU,CAACyC,UAAU,CAACtC,aAAa,CAAC,GAAGO,UAAU,GAAG,GAAG;IACxE,IAAI2D,aAAa,IAAI7B,QAAQ,EAAE;MAC7BtC,KAAK,CAACgC,KAAK,CAACC,mBAAmB,CAACkB,aAAa,EAAEtB,CAAC,CAAC;MACjD7B,KAAK,CAACkC,GAAG,CAACD,mBAAmB,CAACoB,WAAW,EAAExB,CAAC,CAAC;MAC7C7B,KAAK,CAACgC,KAAK,CAAClB,YAAY,CAACmC,WAAW,CAAC;MACrCjD,KAAK,CAACkC,GAAG,CAACpB,YAAY,CAACmC,WAAW,CAAC;MACnC,IAAMd,WAAW,GAAG,IAAItD,OAAO,CAAC,CAAC;MACjC,IAAMuD,KAAK,GAAG,IAAIvD,OAAO,CAAC,CAAC;MAC3BwB,IAAI,CAACgC,mBAAmB,CAACrC,KAAK,CAACgC,KAAK,EAAEhC,KAAK,CAACkC,GAAG,EAAEE,KAAK,EAAED,WAAW,CAAC;MACpEP,UAAU,CAACY,IAAI,CAAC;QACdJ,KAAK,EAALA,KAAK;QACLD,WAAW,EAAXA,WAAW;QACXxB,QAAQ,EAAEN,IAAI,CAACoC,MAAM,CAACF,UAAU,CAACH,KAAK,CAAC;QACvCM,MAAM,EAAEf,YAAY;QACpBgB,IAAI,EAAE,IAAI;QACVC,SAAS,EAAEf,CAAC;QACZgB,EAAE,EAAE,IAAI;QACRC,GAAG,EAAE;MACP,CAAC,CAAC;IACJ;EACF;AACF;AAAC,IACKsB,aAAa,0BAAAC,KAAA;EAAAC,SAAA,CAAAF,aAAA,EAAAC,KAAA;EAAA,IAAAE,MAAA,GAAAC,YAAA,CAAAJ,aAAA;EACjB,SAAAA,cAAA,EAAqH;IAAA,IAAAK,KAAA;IAAA,IAAzGvB,QAAQ,GAAAwB,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,IAAInF,oBAAoB,CAAC,CAAC;IAAA,IAAEyD,QAAQ,GAAA0B,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,IAAIlF,YAAY,CAAC;MAAEqF,KAAK,EAAEtD,IAAI,CAACuD,MAAM,CAAC,CAAC,GAAG;IAAS,CAAC,CAAC;IAAAC,eAAA,OAAAX,aAAA;IACjHK,KAAA,GAAAF,MAAA,CAAAS,IAAA,OAAM9B,QAAQ,EAAEF,QAAQ;IACxByB,KAAA,CAAKQ,eAAe,GAAG,IAAI;IAC3BR,KAAA,CAAKS,IAAI,GAAG,eAAe;IAAC,OAAAT,KAAA;EAC9B;EACA;EAAAU,YAAA,CAAAf,aAAA;IAAAgB,GAAA;IAAAC,KAAA,EACA,SAAAC,qBAAA,EAAuB;MACrB,IAAMpC,QAAQ,GAAG,IAAI,CAACA,QAAQ;MAC9B,IAAMC,aAAa,GAAGD,QAAQ,CAACE,UAAU,CAACD,aAAa;MACvD,IAAME,WAAW,GAAGH,QAAQ,CAACE,UAAU,CAACC,WAAW;MACnD,IAAMkC,aAAa,GAAG,IAAIC,YAAY,CAAC,CAAC,GAAGrC,aAAa,CAACpB,KAAK,CAAC;MAC/D,KAAK,IAAIF,CAAC,GAAG,CAAC,EAAE4D,CAAC,GAAG,CAAC,EAAE3D,CAAC,GAAGqB,aAAa,CAACpB,KAAK,EAAEF,CAAC,GAAGC,CAAC,EAAED,CAAC,EAAE,EAAE4D,CAAC,IAAI,CAAC,EAAE;QAClEhG,MAAM,CAACwC,mBAAmB,CAACkB,aAAa,EAAEtB,CAAC,CAAC;QAC5CnC,IAAI,CAACuC,mBAAmB,CAACoB,WAAW,EAAExB,CAAC,CAAC;QACxC0D,aAAa,CAACE,CAAC,CAAC,GAAGA,CAAC,KAAK,CAAC,GAAG,CAAC,GAAGF,aAAa,CAACE,CAAC,GAAG,CAAC,CAAC;QACrDF,aAAa,CAACE,CAAC,GAAG,CAAC,CAAC,GAAGF,aAAa,CAACE,CAAC,CAAC,GAAGhG,MAAM,CAAC8C,UAAU,CAAC7C,IAAI,CAAC;MACnE;MACA,IAAMgG,sBAAsB,GAAG,IAAIrG,0BAA0B,CAACkG,aAAa,EAAE,CAAC,EAAE,CAAC,CAAC;MAClFrC,QAAQ,CAACyC,YAAY,CAAC,uBAAuB,EAAE,IAAIrG,0BAA0B,CAACoG,sBAAsB,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;MAC5GxC,QAAQ,CAACyC,YAAY,CAAC,qBAAqB,EAAE,IAAIrG,0BAA0B,CAACoG,sBAAsB,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;MAC1G,OAAO,IAAI;IACb;EAAC;IAAAN,GAAA;IAAAC,KAAA,EACD,SAAAO,QAAQC,SAAS,EAAEjE,UAAU,EAAE;MAC7B,IAAMkE,UAAU,GAAG,IAAI,CAAC9C,QAAQ,CAAC8C,UAAU;MAC3C,IAAMpF,MAAM,GAAGmF,SAAS,CAACnF,MAAM;MAC/B,IAAIA,MAAM,KAAK,IAAI,IAAI,CAACoF,UAAU,EAAE;QAClCC,OAAO,CAACC,KAAK,CACX,+HACF,CAAC;MACH;MACA,IAAMC,SAAS,GAAGJ,SAAS,CAACK,MAAM,CAACC,KAAK,KAAK,KAAK,CAAC,GAAGN,SAAS,CAACK,MAAM,CAACC,KAAK,CAACF,SAAS,IAAI,CAAC,GAAG,CAAC;MAC/F5F,IAAI,GAAGwF,SAAS,CAACO,GAAG;MACpB,IAAMnD,WAAW,GAAG,IAAI,CAACA,WAAW;MACpC,IAAMC,QAAQ,GAAG,IAAI,CAACA,QAAQ;MAC9B,IAAMF,QAAQ,GAAG,IAAI,CAACA,QAAQ;MAC9BxC,UAAU,GAAGwC,QAAQ,CAACqD,SAAS,GAAGJ,SAAS;MAC3C3F,cAAc,GAAG4C,QAAQ,CAACE,UAAU,CAACD,aAAa;MAClD5C,YAAY,GAAG2C,QAAQ,CAACE,UAAU,CAACC,WAAW;MAC9C,IAAIH,QAAQ,CAACoD,cAAc,KAAK,IAAI,EAAE;QACpCpD,QAAQ,CAACqD,qBAAqB,CAAC,CAAC;MAClC;MACApG,OAAO,CAACuD,IAAI,CAACR,QAAQ,CAACoD,cAAc,CAAC,CAACxF,YAAY,CAACmC,WAAW,CAAC;MAC/D,IAAIuD,YAAY;MAChB,IAAIV,UAAU,EAAE;QACdU,YAAY,GAAGhG,UAAU,GAAG,GAAG;MACjC,CAAC,MAAM;QACL,IAAMiG,gBAAgB,GAAGlF,IAAI,CAACE,GAAG,CAACf,MAAM,CAAC4C,IAAI,EAAEnD,OAAO,CAACuG,eAAe,CAACrG,IAAI,CAACoC,MAAM,CAAC,CAAC;QACpF+D,YAAY,GAAG/F,sBAAsB,CAACC,MAAM,EAAE+F,gBAAgB,EAAEzD,QAAQ,CAACpC,UAAU,CAAC;MACtF;MACAT,OAAO,CAACwG,MAAM,IAAIH,YAAY;MAC9B,IAAInG,IAAI,CAACuG,gBAAgB,CAACzG,OAAO,CAAC,KAAK,KAAK,EAAE;QAC5C;MACF;MACA,IAAI+C,QAAQ,CAAC2D,WAAW,KAAK,IAAI,EAAE;QACjC3D,QAAQ,CAAC4D,kBAAkB,CAAC,CAAC;MAC/B;MACA5G,IAAI,CAACwD,IAAI,CAACR,QAAQ,CAAC2D,WAAW,CAAC,CAAC/F,YAAY,CAACmC,WAAW,CAAC;MACzD,IAAI8D,SAAS;MACb,IAAIjB,UAAU,EAAE;QACdiB,SAAS,GAAGvG,UAAU,GAAG,GAAG;MAC9B,CAAC,MAAM;QACL,IAAMwG,aAAa,GAAGzF,IAAI,CAACE,GAAG,CAACf,MAAM,CAAC4C,IAAI,EAAEpD,IAAI,CAACwG,eAAe,CAACrG,IAAI,CAACoC,MAAM,CAAC,CAAC;QAC9EsE,SAAS,GAAGtG,sBAAsB,CAACC,MAAM,EAAEsG,aAAa,EAAEhE,QAAQ,CAACpC,UAAU,CAAC;MAChF;MACAV,IAAI,CAAC+G,cAAc,CAACF,SAAS,CAAC;MAC9B,IAAI1G,IAAI,CAAC6G,aAAa,CAAChH,IAAI,CAAC,KAAK,KAAK,EAAE;QACtC;MACF;MACA,IAAI4F,UAAU,EAAE;QACdpE,iBAAiB,CAAC,IAAI,EAAEE,UAAU,CAAC;MACrC,CAAC,MAAM;QACLmB,kBAAkB,CAAC,IAAI,EAAErC,MAAM,EAAEkB,UAAU,CAAC;MAC9C;IACF;EAAC;EAAA,OAAAwC,aAAA;AAAA,EA1EyBhF,IAAI;AA4EhC,SACEgF,aAAa"},"metadata":{},"sourceType":"module","externalDependencies":[]}