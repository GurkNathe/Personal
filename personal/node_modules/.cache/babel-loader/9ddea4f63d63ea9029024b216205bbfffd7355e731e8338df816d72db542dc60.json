{"ast":null,"code":"var __defProp = Object.defineProperty;\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value\n}) : obj[key] = value;\nvar __publicField = (obj, key, value) => {\n  __defNormalProp(obj, typeof key !== \"symbol\" ? key + \"\" : key, value);\n  return value;\n};\nconst MotionControllerConstants = {\n  Handedness: {\n    NONE: \"none\",\n    LEFT: \"left\",\n    RIGHT: \"right\"\n  },\n  ComponentState: {\n    DEFAULT: \"default\",\n    TOUCHED: \"touched\",\n    PRESSED: \"pressed\"\n  },\n  ComponentProperty: {\n    BUTTON: \"button\",\n    X_AXIS: \"xAxis\",\n    Y_AXIS: \"yAxis\",\n    STATE: \"state\"\n  },\n  ComponentType: {\n    TRIGGER: \"trigger\",\n    SQUEEZE: \"squeeze\",\n    TOUCHPAD: \"touchpad\",\n    THUMBSTICK: \"thumbstick\",\n    BUTTON: \"button\"\n  },\n  ButtonTouchThreshold: 0.05,\n  AxisTouchThreshold: 0.1,\n  VisualResponseProperty: {\n    TRANSFORM: \"transform\",\n    VISIBILITY: \"visibility\"\n  }\n};\nasync function fetchJsonFile(path) {\n  const response = await fetch(path);\n  if (!response.ok) {\n    throw new Error(response.statusText);\n  } else {\n    return response.json();\n  }\n}\nasync function fetchProfilesList(basePath) {\n  if (!basePath) {\n    throw new Error(\"No basePath supplied\");\n  }\n  const profileListFileName = \"profilesList.json\";\n  const profilesList = await fetchJsonFile(`${basePath}/${profileListFileName}`);\n  return profilesList;\n}\nasync function fetchProfile(xrInputSource, basePath) {\n  let defaultProfile = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n  let getAssetPath = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : true;\n  if (!xrInputSource) {\n    throw new Error(\"No xrInputSource supplied\");\n  }\n  if (!basePath) {\n    throw new Error(\"No basePath supplied\");\n  }\n  const supportedProfilesList = await fetchProfilesList(basePath);\n  let match = void 0;\n  xrInputSource.profiles.some(profileId => {\n    const supportedProfile = supportedProfilesList[profileId];\n    if (supportedProfile) {\n      match = {\n        profileId,\n        profilePath: `${basePath}/${supportedProfile.path}`,\n        deprecated: !!supportedProfile.deprecated\n      };\n    }\n    return !!match;\n  });\n  if (!match) {\n    if (!defaultProfile) {\n      throw new Error(\"No matching profile name found\");\n    }\n    const supportedProfile = supportedProfilesList[defaultProfile];\n    if (!supportedProfile) {\n      throw new Error(`No matching profile name found and default profile \"${defaultProfile}\" missing.`);\n    }\n    match = {\n      profileId: defaultProfile,\n      profilePath: `${basePath}/${supportedProfile.path}`,\n      deprecated: !!supportedProfile.deprecated\n    };\n  }\n  const profile = await fetchJsonFile(match.profilePath);\n  let assetPath = void 0;\n  if (getAssetPath) {\n    let layout;\n    if (xrInputSource.handedness === \"any\") {\n      layout = profile.layouts[Object.keys(profile.layouts)[0]];\n    } else {\n      layout = profile.layouts[xrInputSource.handedness];\n    }\n    if (!layout) {\n      throw new Error(`No matching handedness, ${xrInputSource.handedness}, in profile ${match.profileId}`);\n    }\n    if (layout.assetPath) {\n      assetPath = match.profilePath.replace(\"profile.json\", layout.assetPath);\n    }\n  }\n  return {\n    profile,\n    assetPath\n  };\n}\nconst defaultComponentValues = {\n  xAxis: 0,\n  yAxis: 0,\n  button: 0,\n  state: MotionControllerConstants.ComponentState.DEFAULT\n};\nfunction normalizeAxes() {\n  let x = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n  let y = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n  let xAxis = x;\n  let yAxis = y;\n  const hypotenuse = Math.sqrt(x * x + y * y);\n  if (hypotenuse > 1) {\n    const theta = Math.atan2(y, x);\n    xAxis = Math.cos(theta);\n    yAxis = Math.sin(theta);\n  }\n  const result = {\n    normalizedXAxis: xAxis * 0.5 + 0.5,\n    normalizedYAxis: yAxis * 0.5 + 0.5\n  };\n  return result;\n}\nclass VisualResponse {\n  constructor(visualResponseDescription) {\n    __publicField(this, \"value\");\n    __publicField(this, \"componentProperty\");\n    __publicField(this, \"states\");\n    __publicField(this, \"valueNodeName\");\n    __publicField(this, \"valueNodeProperty\");\n    __publicField(this, \"minNodeName\");\n    __publicField(this, \"maxNodeName\");\n    __publicField(this, \"valueNode\");\n    __publicField(this, \"minNode\");\n    __publicField(this, \"maxNode\");\n    this.componentProperty = visualResponseDescription.componentProperty;\n    this.states = visualResponseDescription.states;\n    this.valueNodeName = visualResponseDescription.valueNodeName;\n    this.valueNodeProperty = visualResponseDescription.valueNodeProperty;\n    if (this.valueNodeProperty === MotionControllerConstants.VisualResponseProperty.TRANSFORM) {\n      this.minNodeName = visualResponseDescription.minNodeName;\n      this.maxNodeName = visualResponseDescription.maxNodeName;\n    }\n    this.value = 0;\n    this.updateFromComponent(defaultComponentValues);\n  }\n  /**\n   * Computes the visual response's interpolation weight based on component state\n   * @param {Object} componentValues - The component from which to update\n   * @param {number | undefined} xAxis - The reported X axis value of the component\n   * @param {number | undefined} yAxis - The reported Y axis value of the component\n   * @param {number | undefined} button - The reported value of the component's button\n   * @param {string} state - The component's active state\n   */\n  updateFromComponent(_ref) {\n    let {\n      xAxis,\n      yAxis,\n      button,\n      state\n    } = _ref;\n    const {\n      normalizedXAxis,\n      normalizedYAxis\n    } = normalizeAxes(xAxis, yAxis);\n    switch (this.componentProperty) {\n      case MotionControllerConstants.ComponentProperty.X_AXIS:\n        this.value = this.states.includes(state) ? normalizedXAxis : 0.5;\n        break;\n      case MotionControllerConstants.ComponentProperty.Y_AXIS:\n        this.value = this.states.includes(state) ? normalizedYAxis : 0.5;\n        break;\n      case MotionControllerConstants.ComponentProperty.BUTTON:\n        this.value = this.states.includes(state) && button ? button : 0;\n        break;\n      case MotionControllerConstants.ComponentProperty.STATE:\n        if (this.valueNodeProperty === MotionControllerConstants.VisualResponseProperty.VISIBILITY) {\n          this.value = this.states.includes(state);\n        } else {\n          this.value = this.states.includes(state) ? 1 : 0;\n        }\n        break;\n      default:\n        throw new Error(`Unexpected visualResponse componentProperty ${this.componentProperty}`);\n    }\n  }\n}\nclass Component {\n  /**\n   * @param {string} componentId - Id of the component\n   * @param {InputProfileComponent} componentDescription - Description of the component to be created\n   */\n  constructor(componentId, componentDescription) {\n    __publicField(this, \"id\");\n    __publicField(this, \"values\");\n    __publicField(this, \"type\");\n    __publicField(this, \"gamepadIndices\");\n    __publicField(this, \"rootNodeName\");\n    __publicField(this, \"visualResponses\");\n    __publicField(this, \"touchPointNodeName\");\n    __publicField(this, \"touchPointNode\");\n    if (!componentId || !componentDescription || !componentDescription.visualResponses || !componentDescription.gamepadIndices || Object.keys(componentDescription.gamepadIndices).length === 0) {\n      throw new Error(\"Invalid arguments supplied\");\n    }\n    this.id = componentId;\n    this.type = componentDescription.type;\n    this.rootNodeName = componentDescription.rootNodeName;\n    this.touchPointNodeName = componentDescription.touchPointNodeName;\n    this.visualResponses = {};\n    Object.keys(componentDescription.visualResponses).forEach(responseName => {\n      const visualResponse = new VisualResponse(componentDescription.visualResponses[responseName]);\n      this.visualResponses[responseName] = visualResponse;\n    });\n    this.gamepadIndices = Object.assign({}, componentDescription.gamepadIndices);\n    this.values = {\n      state: MotionControllerConstants.ComponentState.DEFAULT,\n      button: this.gamepadIndices.button !== void 0 ? 0 : void 0,\n      xAxis: this.gamepadIndices.xAxis !== void 0 ? 0 : void 0,\n      yAxis: this.gamepadIndices.yAxis !== void 0 ? 0 : void 0\n    };\n  }\n  get data() {\n    const data = {\n      id: this.id,\n      ...this.values\n    };\n    return data;\n  }\n  /**\n   * @description Poll for updated data based on current gamepad state\n   * @param {Object} gamepad - The gamepad object from which the component data should be polled\n   */\n  updateFromGamepad(gamepad) {\n    this.values.state = MotionControllerConstants.ComponentState.DEFAULT;\n    if (this.gamepadIndices.button !== void 0 && gamepad.buttons.length > this.gamepadIndices.button) {\n      const gamepadButton = gamepad.buttons[this.gamepadIndices.button];\n      this.values.button = gamepadButton.value;\n      this.values.button = this.values.button < 0 ? 0 : this.values.button;\n      this.values.button = this.values.button > 1 ? 1 : this.values.button;\n      if (gamepadButton.pressed || this.values.button === 1) {\n        this.values.state = MotionControllerConstants.ComponentState.PRESSED;\n      } else if (gamepadButton.touched || this.values.button > MotionControllerConstants.ButtonTouchThreshold) {\n        this.values.state = MotionControllerConstants.ComponentState.TOUCHED;\n      }\n    }\n    if (this.gamepadIndices.xAxis !== void 0 && gamepad.axes.length > this.gamepadIndices.xAxis) {\n      this.values.xAxis = gamepad.axes[this.gamepadIndices.xAxis];\n      this.values.xAxis = this.values.xAxis < -1 ? -1 : this.values.xAxis;\n      this.values.xAxis = this.values.xAxis > 1 ? 1 : this.values.xAxis;\n      if (this.values.state === MotionControllerConstants.ComponentState.DEFAULT && Math.abs(this.values.xAxis) > MotionControllerConstants.AxisTouchThreshold) {\n        this.values.state = MotionControllerConstants.ComponentState.TOUCHED;\n      }\n    }\n    if (this.gamepadIndices.yAxis !== void 0 && gamepad.axes.length > this.gamepadIndices.yAxis) {\n      this.values.yAxis = gamepad.axes[this.gamepadIndices.yAxis];\n      this.values.yAxis = this.values.yAxis < -1 ? -1 : this.values.yAxis;\n      this.values.yAxis = this.values.yAxis > 1 ? 1 : this.values.yAxis;\n      if (this.values.state === MotionControllerConstants.ComponentState.DEFAULT && Math.abs(this.values.yAxis) > MotionControllerConstants.AxisTouchThreshold) {\n        this.values.state = MotionControllerConstants.ComponentState.TOUCHED;\n      }\n    }\n    Object.values(this.visualResponses).forEach(visualResponse => {\n      visualResponse.updateFromComponent(this.values);\n    });\n  }\n}\nclass MotionController {\n  /**\n   * @param {XRInputSource} xrInputSource - The XRInputSource to build the MotionController around\n   * @param {Profile} profile - The best matched profile description for the supplied xrInputSource\n   * @param {string} assetUrl\n   */\n  constructor(xrInputSource, profile, assetUrl) {\n    __publicField(this, \"xrInputSource\");\n    __publicField(this, \"assetUrl\");\n    __publicField(this, \"layoutDescription\");\n    __publicField(this, \"id\");\n    __publicField(this, \"components\");\n    if (!xrInputSource) {\n      throw new Error(\"No xrInputSource supplied\");\n    }\n    if (!profile) {\n      throw new Error(\"No profile supplied\");\n    }\n    if (!profile.layouts[xrInputSource.handedness]) {\n      throw new Error(\"No layout for \" + xrInputSource.handedness + \" handedness\");\n    }\n    this.xrInputSource = xrInputSource;\n    this.assetUrl = assetUrl;\n    this.id = profile.profileId;\n    this.layoutDescription = profile.layouts[xrInputSource.handedness];\n    this.components = {};\n    Object.keys(this.layoutDescription.components).forEach(componentId => {\n      const componentDescription = this.layoutDescription.components[componentId];\n      this.components[componentId] = new Component(componentId, componentDescription);\n    });\n    this.updateFromGamepad();\n  }\n  get gripSpace() {\n    return this.xrInputSource.gripSpace;\n  }\n  get targetRaySpace() {\n    return this.xrInputSource.targetRaySpace;\n  }\n  /**\n   * @description Returns a subset of component data for simplified debugging\n   */\n  get data() {\n    const data = [];\n    Object.values(this.components).forEach(component => {\n      data.push(component.data);\n    });\n    return data;\n  }\n  /**\n   * @description Poll for updated data based on current gamepad state\n   */\n  updateFromGamepad() {\n    Object.values(this.components).forEach(component => {\n      component.updateFromGamepad(this.xrInputSource.gamepad);\n    });\n  }\n}\nexport { MotionController, MotionControllerConstants, fetchProfile, fetchProfilesList };","map":{"version":3,"names":["__defProp","Object","defineProperty","__defNormalProp","obj","key","value","enumerable","configurable","writable","__publicField","MotionControllerConstants","Handedness","NONE","LEFT","RIGHT","ComponentState","DEFAULT","TOUCHED","PRESSED","ComponentProperty","BUTTON","X_AXIS","Y_AXIS","STATE","ComponentType","TRIGGER","SQUEEZE","TOUCHPAD","THUMBSTICK","ButtonTouchThreshold","AxisTouchThreshold","VisualResponseProperty","TRANSFORM","VISIBILITY","fetchJsonFile","path","response","fetch","ok","Error","statusText","json","fetchProfilesList","basePath","profileListFileName","profilesList","fetchProfile","xrInputSource","defaultProfile","arguments","length","undefined","getAssetPath","supportedProfilesList","match","profiles","some","profileId","supportedProfile","profilePath","deprecated","profile","assetPath","layout","handedness","layouts","keys","replace","defaultComponentValues","xAxis","yAxis","button","state","normalizeAxes","x","y","hypotenuse","Math","sqrt","theta","atan2","cos","sin","result","normalizedXAxis","normalizedYAxis","VisualResponse","constructor","visualResponseDescription","componentProperty","states","valueNodeName","valueNodeProperty","minNodeName","maxNodeName","updateFromComponent","_ref","includes","Component","componentId","componentDescription","visualResponses","gamepadIndices","id","type","rootNodeName","touchPointNodeName","forEach","responseName","visualResponse","assign","values","data","updateFromGamepad","gamepad","buttons","gamepadButton","pressed","touched","axes","abs","MotionController","assetUrl","layoutDescription","components","gripSpace","targetRaySpace","component","push"],"sources":["/home/krug/Coding/JavaScript/Websites/Personal/personal/node_modules/.pnpm/three-stdlib@2.23.7_three@0.151.3/node_modules/three-stdlib/libs/MotionControllers.js"],"sourcesContent":["var __defProp = Object.defineProperty;\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;\nvar __publicField = (obj, key, value) => {\n  __defNormalProp(obj, typeof key !== \"symbol\" ? key + \"\" : key, value);\n  return value;\n};\nconst MotionControllerConstants = {\n  Handedness: {\n    NONE: \"none\",\n    LEFT: \"left\",\n    RIGHT: \"right\"\n  },\n  ComponentState: {\n    DEFAULT: \"default\",\n    TOUCHED: \"touched\",\n    PRESSED: \"pressed\"\n  },\n  ComponentProperty: {\n    BUTTON: \"button\",\n    X_AXIS: \"xAxis\",\n    Y_AXIS: \"yAxis\",\n    STATE: \"state\"\n  },\n  ComponentType: {\n    TRIGGER: \"trigger\",\n    SQUEEZE: \"squeeze\",\n    TOUCHPAD: \"touchpad\",\n    THUMBSTICK: \"thumbstick\",\n    BUTTON: \"button\"\n  },\n  ButtonTouchThreshold: 0.05,\n  AxisTouchThreshold: 0.1,\n  VisualResponseProperty: {\n    TRANSFORM: \"transform\",\n    VISIBILITY: \"visibility\"\n  }\n};\nasync function fetchJsonFile(path) {\n  const response = await fetch(path);\n  if (!response.ok) {\n    throw new Error(response.statusText);\n  } else {\n    return response.json();\n  }\n}\nasync function fetchProfilesList(basePath) {\n  if (!basePath) {\n    throw new Error(\"No basePath supplied\");\n  }\n  const profileListFileName = \"profilesList.json\";\n  const profilesList = await fetchJsonFile(`${basePath}/${profileListFileName}`);\n  return profilesList;\n}\nasync function fetchProfile(xrInputSource, basePath, defaultProfile = null, getAssetPath = true) {\n  if (!xrInputSource) {\n    throw new Error(\"No xrInputSource supplied\");\n  }\n  if (!basePath) {\n    throw new Error(\"No basePath supplied\");\n  }\n  const supportedProfilesList = await fetchProfilesList(basePath);\n  let match = void 0;\n  xrInputSource.profiles.some((profileId) => {\n    const supportedProfile = supportedProfilesList[profileId];\n    if (supportedProfile) {\n      match = {\n        profileId,\n        profilePath: `${basePath}/${supportedProfile.path}`,\n        deprecated: !!supportedProfile.deprecated\n      };\n    }\n    return !!match;\n  });\n  if (!match) {\n    if (!defaultProfile) {\n      throw new Error(\"No matching profile name found\");\n    }\n    const supportedProfile = supportedProfilesList[defaultProfile];\n    if (!supportedProfile) {\n      throw new Error(`No matching profile name found and default profile \"${defaultProfile}\" missing.`);\n    }\n    match = {\n      profileId: defaultProfile,\n      profilePath: `${basePath}/${supportedProfile.path}`,\n      deprecated: !!supportedProfile.deprecated\n    };\n  }\n  const profile = await fetchJsonFile(match.profilePath);\n  let assetPath = void 0;\n  if (getAssetPath) {\n    let layout;\n    if (xrInputSource.handedness === \"any\") {\n      layout = profile.layouts[Object.keys(profile.layouts)[0]];\n    } else {\n      layout = profile.layouts[xrInputSource.handedness];\n    }\n    if (!layout) {\n      throw new Error(`No matching handedness, ${xrInputSource.handedness}, in profile ${match.profileId}`);\n    }\n    if (layout.assetPath) {\n      assetPath = match.profilePath.replace(\"profile.json\", layout.assetPath);\n    }\n  }\n  return { profile, assetPath };\n}\nconst defaultComponentValues = {\n  xAxis: 0,\n  yAxis: 0,\n  button: 0,\n  state: MotionControllerConstants.ComponentState.DEFAULT\n};\nfunction normalizeAxes(x = 0, y = 0) {\n  let xAxis = x;\n  let yAxis = y;\n  const hypotenuse = Math.sqrt(x * x + y * y);\n  if (hypotenuse > 1) {\n    const theta = Math.atan2(y, x);\n    xAxis = Math.cos(theta);\n    yAxis = Math.sin(theta);\n  }\n  const result = {\n    normalizedXAxis: xAxis * 0.5 + 0.5,\n    normalizedYAxis: yAxis * 0.5 + 0.5\n  };\n  return result;\n}\nclass VisualResponse {\n  constructor(visualResponseDescription) {\n    __publicField(this, \"value\");\n    __publicField(this, \"componentProperty\");\n    __publicField(this, \"states\");\n    __publicField(this, \"valueNodeName\");\n    __publicField(this, \"valueNodeProperty\");\n    __publicField(this, \"minNodeName\");\n    __publicField(this, \"maxNodeName\");\n    __publicField(this, \"valueNode\");\n    __publicField(this, \"minNode\");\n    __publicField(this, \"maxNode\");\n    this.componentProperty = visualResponseDescription.componentProperty;\n    this.states = visualResponseDescription.states;\n    this.valueNodeName = visualResponseDescription.valueNodeName;\n    this.valueNodeProperty = visualResponseDescription.valueNodeProperty;\n    if (this.valueNodeProperty === MotionControllerConstants.VisualResponseProperty.TRANSFORM) {\n      this.minNodeName = visualResponseDescription.minNodeName;\n      this.maxNodeName = visualResponseDescription.maxNodeName;\n    }\n    this.value = 0;\n    this.updateFromComponent(defaultComponentValues);\n  }\n  /**\n   * Computes the visual response's interpolation weight based on component state\n   * @param {Object} componentValues - The component from which to update\n   * @param {number | undefined} xAxis - The reported X axis value of the component\n   * @param {number | undefined} yAxis - The reported Y axis value of the component\n   * @param {number | undefined} button - The reported value of the component's button\n   * @param {string} state - The component's active state\n   */\n  updateFromComponent({\n    xAxis,\n    yAxis,\n    button,\n    state\n  }) {\n    const { normalizedXAxis, normalizedYAxis } = normalizeAxes(xAxis, yAxis);\n    switch (this.componentProperty) {\n      case MotionControllerConstants.ComponentProperty.X_AXIS:\n        this.value = this.states.includes(state) ? normalizedXAxis : 0.5;\n        break;\n      case MotionControllerConstants.ComponentProperty.Y_AXIS:\n        this.value = this.states.includes(state) ? normalizedYAxis : 0.5;\n        break;\n      case MotionControllerConstants.ComponentProperty.BUTTON:\n        this.value = this.states.includes(state) && button ? button : 0;\n        break;\n      case MotionControllerConstants.ComponentProperty.STATE:\n        if (this.valueNodeProperty === MotionControllerConstants.VisualResponseProperty.VISIBILITY) {\n          this.value = this.states.includes(state);\n        } else {\n          this.value = this.states.includes(state) ? 1 : 0;\n        }\n        break;\n      default:\n        throw new Error(`Unexpected visualResponse componentProperty ${this.componentProperty}`);\n    }\n  }\n}\nclass Component {\n  /**\n   * @param {string} componentId - Id of the component\n   * @param {InputProfileComponent} componentDescription - Description of the component to be created\n   */\n  constructor(componentId, componentDescription) {\n    __publicField(this, \"id\");\n    __publicField(this, \"values\");\n    __publicField(this, \"type\");\n    __publicField(this, \"gamepadIndices\");\n    __publicField(this, \"rootNodeName\");\n    __publicField(this, \"visualResponses\");\n    __publicField(this, \"touchPointNodeName\");\n    __publicField(this, \"touchPointNode\");\n    if (!componentId || !componentDescription || !componentDescription.visualResponses || !componentDescription.gamepadIndices || Object.keys(componentDescription.gamepadIndices).length === 0) {\n      throw new Error(\"Invalid arguments supplied\");\n    }\n    this.id = componentId;\n    this.type = componentDescription.type;\n    this.rootNodeName = componentDescription.rootNodeName;\n    this.touchPointNodeName = componentDescription.touchPointNodeName;\n    this.visualResponses = {};\n    Object.keys(componentDescription.visualResponses).forEach((responseName) => {\n      const visualResponse = new VisualResponse(componentDescription.visualResponses[responseName]);\n      this.visualResponses[responseName] = visualResponse;\n    });\n    this.gamepadIndices = Object.assign({}, componentDescription.gamepadIndices);\n    this.values = {\n      state: MotionControllerConstants.ComponentState.DEFAULT,\n      button: this.gamepadIndices.button !== void 0 ? 0 : void 0,\n      xAxis: this.gamepadIndices.xAxis !== void 0 ? 0 : void 0,\n      yAxis: this.gamepadIndices.yAxis !== void 0 ? 0 : void 0\n    };\n  }\n  get data() {\n    const data = { id: this.id, ...this.values };\n    return data;\n  }\n  /**\n   * @description Poll for updated data based on current gamepad state\n   * @param {Object} gamepad - The gamepad object from which the component data should be polled\n   */\n  updateFromGamepad(gamepad) {\n    this.values.state = MotionControllerConstants.ComponentState.DEFAULT;\n    if (this.gamepadIndices.button !== void 0 && gamepad.buttons.length > this.gamepadIndices.button) {\n      const gamepadButton = gamepad.buttons[this.gamepadIndices.button];\n      this.values.button = gamepadButton.value;\n      this.values.button = this.values.button < 0 ? 0 : this.values.button;\n      this.values.button = this.values.button > 1 ? 1 : this.values.button;\n      if (gamepadButton.pressed || this.values.button === 1) {\n        this.values.state = MotionControllerConstants.ComponentState.PRESSED;\n      } else if (gamepadButton.touched || this.values.button > MotionControllerConstants.ButtonTouchThreshold) {\n        this.values.state = MotionControllerConstants.ComponentState.TOUCHED;\n      }\n    }\n    if (this.gamepadIndices.xAxis !== void 0 && gamepad.axes.length > this.gamepadIndices.xAxis) {\n      this.values.xAxis = gamepad.axes[this.gamepadIndices.xAxis];\n      this.values.xAxis = this.values.xAxis < -1 ? -1 : this.values.xAxis;\n      this.values.xAxis = this.values.xAxis > 1 ? 1 : this.values.xAxis;\n      if (this.values.state === MotionControllerConstants.ComponentState.DEFAULT && Math.abs(this.values.xAxis) > MotionControllerConstants.AxisTouchThreshold) {\n        this.values.state = MotionControllerConstants.ComponentState.TOUCHED;\n      }\n    }\n    if (this.gamepadIndices.yAxis !== void 0 && gamepad.axes.length > this.gamepadIndices.yAxis) {\n      this.values.yAxis = gamepad.axes[this.gamepadIndices.yAxis];\n      this.values.yAxis = this.values.yAxis < -1 ? -1 : this.values.yAxis;\n      this.values.yAxis = this.values.yAxis > 1 ? 1 : this.values.yAxis;\n      if (this.values.state === MotionControllerConstants.ComponentState.DEFAULT && Math.abs(this.values.yAxis) > MotionControllerConstants.AxisTouchThreshold) {\n        this.values.state = MotionControllerConstants.ComponentState.TOUCHED;\n      }\n    }\n    Object.values(this.visualResponses).forEach((visualResponse) => {\n      visualResponse.updateFromComponent(this.values);\n    });\n  }\n}\nclass MotionController {\n  /**\n   * @param {XRInputSource} xrInputSource - The XRInputSource to build the MotionController around\n   * @param {Profile} profile - The best matched profile description for the supplied xrInputSource\n   * @param {string} assetUrl\n   */\n  constructor(xrInputSource, profile, assetUrl) {\n    __publicField(this, \"xrInputSource\");\n    __publicField(this, \"assetUrl\");\n    __publicField(this, \"layoutDescription\");\n    __publicField(this, \"id\");\n    __publicField(this, \"components\");\n    if (!xrInputSource) {\n      throw new Error(\"No xrInputSource supplied\");\n    }\n    if (!profile) {\n      throw new Error(\"No profile supplied\");\n    }\n    if (!profile.layouts[xrInputSource.handedness]) {\n      throw new Error(\"No layout for \" + xrInputSource.handedness + \" handedness\");\n    }\n    this.xrInputSource = xrInputSource;\n    this.assetUrl = assetUrl;\n    this.id = profile.profileId;\n    this.layoutDescription = profile.layouts[xrInputSource.handedness];\n    this.components = {};\n    Object.keys(this.layoutDescription.components).forEach((componentId) => {\n      const componentDescription = this.layoutDescription.components[componentId];\n      this.components[componentId] = new Component(componentId, componentDescription);\n    });\n    this.updateFromGamepad();\n  }\n  get gripSpace() {\n    return this.xrInputSource.gripSpace;\n  }\n  get targetRaySpace() {\n    return this.xrInputSource.targetRaySpace;\n  }\n  /**\n   * @description Returns a subset of component data for simplified debugging\n   */\n  get data() {\n    const data = [];\n    Object.values(this.components).forEach((component) => {\n      data.push(component.data);\n    });\n    return data;\n  }\n  /**\n   * @description Poll for updated data based on current gamepad state\n   */\n  updateFromGamepad() {\n    Object.values(this.components).forEach((component) => {\n      component.updateFromGamepad(this.xrInputSource.gamepad);\n    });\n  }\n}\nexport {\n  MotionController,\n  MotionControllerConstants,\n  fetchProfile,\n  fetchProfilesList\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}