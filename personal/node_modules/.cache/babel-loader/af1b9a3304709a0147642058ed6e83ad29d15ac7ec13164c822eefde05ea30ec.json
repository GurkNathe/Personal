{"ast":null,"code":"import { Loader, FileLoader, MeshStandardMaterial, Color, TextureLoader, Object3D, Matrix4, BufferGeometryLoader, DirectionalLight, PointLight, RectAreaLight, Vector3, SpotLight, CanvasTexture, LinearFilter, ClampToEdgeWrapping, SpriteMaterial, Sprite, LineBasicMaterial, Line, Mesh, PointsMaterial, Points } from \"three\";\nconst _taskCache = /* @__PURE__ */new WeakMap();\nclass Rhino3dmLoader extends Loader {\n  constructor(manager) {\n    super(manager);\n    this.libraryPath = \"\";\n    this.libraryPending = null;\n    this.libraryBinary = null;\n    this.libraryConfig = {};\n    this.url = \"\";\n    this.workerLimit = 4;\n    this.workerPool = [];\n    this.workerNextTaskID = 1;\n    this.workerSourceURL = \"\";\n    this.workerConfig = {};\n    this.materials = [];\n  }\n  setLibraryPath(path) {\n    this.libraryPath = path;\n    return this;\n  }\n  setWorkerLimit(workerLimit) {\n    this.workerLimit = workerLimit;\n    return this;\n  }\n  load(url, onLoad, onProgress, onError) {\n    const loader = new FileLoader(this.manager);\n    loader.setPath(this.path);\n    loader.setResponseType(\"arraybuffer\");\n    loader.setRequestHeader(this.requestHeader);\n    this.url = url;\n    loader.load(url, buffer => {\n      if (_taskCache.has(buffer)) {\n        const cachedTask = _taskCache.get(buffer);\n        return cachedTask.promise.then(onLoad).catch(onError);\n      }\n      this.decodeObjects(buffer, url).then(onLoad).catch(onError);\n    }, onProgress, onError);\n  }\n  debug() {\n    console.log(\"Task load: \", this.workerPool.map(worker => worker._taskLoad));\n  }\n  decodeObjects(buffer, url) {\n    let worker;\n    let taskID;\n    const taskCost = buffer.byteLength;\n    const objectPending = this._getWorker(taskCost).then(_worker => {\n      worker = _worker;\n      taskID = this.workerNextTaskID++;\n      return new Promise((resolve, reject) => {\n        worker._callbacks[taskID] = {\n          resolve,\n          reject\n        };\n        worker.postMessage({\n          type: \"decode\",\n          id: taskID,\n          buffer\n        }, [buffer]);\n      });\n    }).then(message => this._createGeometry(message.data));\n    objectPending.catch(() => true).then(() => {\n      if (worker && taskID) {\n        this._releaseTask(worker, taskID);\n      }\n    });\n    _taskCache.set(buffer, {\n      url,\n      promise: objectPending\n    });\n    return objectPending;\n  }\n  parse(data, onLoad, onError) {\n    this.decodeObjects(data, \"\").then(onLoad).catch(onError);\n  }\n  _compareMaterials(material) {\n    const mat = {};\n    mat.name = material.name;\n    mat.color = {};\n    mat.color.r = material.color.r;\n    mat.color.g = material.color.g;\n    mat.color.b = material.color.b;\n    mat.type = material.type;\n    for (let i = 0; i < this.materials.length; i++) {\n      const m = this.materials[i];\n      const _mat = {};\n      _mat.name = m.name;\n      _mat.color = {};\n      _mat.color.r = m.color.r;\n      _mat.color.g = m.color.g;\n      _mat.color.b = m.color.b;\n      _mat.type = m.type;\n      if (JSON.stringify(mat) === JSON.stringify(_mat)) {\n        return m;\n      }\n    }\n    this.materials.push(material);\n    return material;\n  }\n  _createMaterial(material) {\n    if (material === void 0) {\n      return new MeshStandardMaterial({\n        color: new Color(1, 1, 1),\n        metalness: 0.8,\n        name: \"default\",\n        side: 2\n      });\n    }\n    const _diffuseColor = material.diffuseColor;\n    const diffusecolor = new Color(_diffuseColor.r / 255, _diffuseColor.g / 255, _diffuseColor.b / 255);\n    if (_diffuseColor.r === 0 && _diffuseColor.g === 0 && _diffuseColor.b === 0) {\n      diffusecolor.r = 1;\n      diffusecolor.g = 1;\n      diffusecolor.b = 1;\n    }\n    const mat = new MeshStandardMaterial({\n      color: diffusecolor,\n      name: material.name,\n      side: 2,\n      transparent: material.transparency > 0 ? true : false,\n      opacity: 1 - material.transparency\n    });\n    const textureLoader = new TextureLoader();\n    for (let i = 0; i < material.textures.length; i++) {\n      const texture = material.textures[i];\n      if (texture.image !== null) {\n        const map = textureLoader.load(texture.image);\n        switch (texture.type) {\n          case \"Diffuse\":\n            mat.map = map;\n            break;\n          case \"Bump\":\n            mat.bumpMap = map;\n            break;\n          case \"Transparency\":\n            mat.alphaMap = map;\n            mat.transparent = true;\n            break;\n          case \"Emap\":\n            mat.envMap = map;\n            break;\n        }\n      }\n    }\n    return mat;\n  }\n  _createGeometry(data) {\n    const object = new Object3D();\n    const instanceDefinitionObjects = [];\n    const instanceDefinitions = [];\n    const instanceReferences = [];\n    object.userData[\"layers\"] = data.layers;\n    object.userData[\"groups\"] = data.groups;\n    object.userData[\"settings\"] = data.settings;\n    object.userData[\"objectType\"] = \"File3dm\";\n    object.userData[\"materials\"] = null;\n    object.name = this.url;\n    let objects = data.objects;\n    const materials = data.materials;\n    for (let i = 0; i < objects.length; i++) {\n      const obj = objects[i];\n      const attributes = obj.attributes;\n      switch (obj.objectType) {\n        case \"InstanceDefinition\":\n          instanceDefinitions.push(obj);\n          break;\n        case \"InstanceReference\":\n          instanceReferences.push(obj);\n          break;\n        default:\n          let _object;\n          if (attributes.materialIndex >= 0) {\n            const rMaterial = materials[attributes.materialIndex];\n            let material = this._createMaterial(rMaterial);\n            material = this._compareMaterials(material);\n            _object = this._createObject(obj, material);\n          } else {\n            const material = this._createMaterial();\n            _object = this._createObject(obj, material);\n          }\n          if (_object === void 0) {\n            continue;\n          }\n          const layer = data.layers[attributes.layerIndex];\n          _object.visible = layer ? data.layers[attributes.layerIndex].visible : true;\n          if (attributes.isInstanceDefinitionObject) {\n            instanceDefinitionObjects.push(_object);\n          } else {\n            object.add(_object);\n          }\n          break;\n      }\n    }\n    for (let i = 0; i < instanceDefinitions.length; i++) {\n      const iDef = instanceDefinitions[i];\n      objects = [];\n      for (let j = 0; j < iDef.attributes.objectIds.length; j++) {\n        const objId = iDef.attributes.objectIds[j];\n        for (let p = 0; p < instanceDefinitionObjects.length; p++) {\n          const idoId = instanceDefinitionObjects[p].userData.attributes.id;\n          if (objId === idoId) {\n            objects.push(instanceDefinitionObjects[p]);\n          }\n        }\n      }\n      for (let j = 0; j < instanceReferences.length; j++) {\n        const iRef = instanceReferences[j];\n        if (iRef.geometry.parentIdefId === iDef.attributes.id) {\n          const iRefObject = new Object3D();\n          const xf = iRef.geometry.xform.array;\n          const matrix = new Matrix4();\n          matrix.set(xf[0], xf[1], xf[2], xf[3], xf[4], xf[5], xf[6], xf[7], xf[8], xf[9], xf[10], xf[11], xf[12], xf[13], xf[14], xf[15]);\n          iRefObject.applyMatrix4(matrix);\n          for (let p = 0; p < objects.length; p++) {\n            iRefObject.add(objects[p].clone(true));\n          }\n          object.add(iRefObject);\n        }\n      }\n    }\n    object.userData[\"materials\"] = this.materials;\n    return object;\n  }\n  _createObject(obj, mat) {\n    const loader = new BufferGeometryLoader();\n    const attributes = obj.attributes;\n    let geometry, material, _color, color;\n    switch (obj.objectType) {\n      case \"Point\":\n      case \"PointSet\":\n        geometry = loader.parse(obj.geometry);\n        if (geometry.attributes.hasOwnProperty(\"color\")) {\n          material = new PointsMaterial({\n            vertexColors: true,\n            sizeAttenuation: false,\n            size: 2\n          });\n        } else {\n          _color = attributes.drawColor;\n          color = new Color(_color.r / 255, _color.g / 255, _color.b / 255);\n          material = new PointsMaterial({\n            color,\n            sizeAttenuation: false,\n            size: 2\n          });\n        }\n        material = this._compareMaterials(material);\n        const points = new Points(geometry, material);\n        points.userData[\"attributes\"] = attributes;\n        points.userData[\"objectType\"] = obj.objectType;\n        if (attributes.name) {\n          points.name = attributes.name;\n        }\n        return points;\n      case \"Mesh\":\n      case \"Extrusion\":\n      case \"SubD\":\n      case \"Brep\":\n        if (obj.geometry === null) return;\n        geometry = loader.parse(obj.geometry);\n        if (geometry.attributes.hasOwnProperty(\"color\")) {\n          mat.vertexColors = true;\n        }\n        if (mat === null) {\n          mat = this._createMaterial();\n          mat = this._compareMaterials(mat);\n        }\n        const mesh = new Mesh(geometry, mat);\n        mesh.castShadow = attributes.castsShadows;\n        mesh.receiveShadow = attributes.receivesShadows;\n        mesh.userData[\"attributes\"] = attributes;\n        mesh.userData[\"objectType\"] = obj.objectType;\n        if (attributes.name) {\n          mesh.name = attributes.name;\n        }\n        return mesh;\n      case \"Curve\":\n        geometry = loader.parse(obj.geometry);\n        _color = attributes.drawColor;\n        color = new Color(_color.r / 255, _color.g / 255, _color.b / 255);\n        material = new LineBasicMaterial({\n          color\n        });\n        material = this._compareMaterials(material);\n        const lines = new Line(geometry, material);\n        lines.userData[\"attributes\"] = attributes;\n        lines.userData[\"objectType\"] = obj.objectType;\n        if (attributes.name) {\n          lines.name = attributes.name;\n        }\n        return lines;\n      case \"TextDot\":\n        geometry = obj.geometry;\n        const ctx = document.createElement(\"canvas\").getContext(\"2d\");\n        const font = `${geometry.fontHeight}px ${geometry.fontFace}`;\n        ctx.font = font;\n        const width = ctx.measureText(geometry.text).width + 10;\n        const height = geometry.fontHeight + 10;\n        const r = window.devicePixelRatio;\n        ctx.canvas.width = width * r;\n        ctx.canvas.height = height * r;\n        ctx.canvas.style.width = width + \"px\";\n        ctx.canvas.style.height = height + \"px\";\n        ctx.setTransform(r, 0, 0, r, 0, 0);\n        ctx.font = font;\n        ctx.textBaseline = \"middle\";\n        ctx.textAlign = \"center\";\n        color = attributes.drawColor;\n        ctx.fillStyle = `rgba(${color.r},${color.g},${color.b},${color.a})`;\n        ctx.fillRect(0, 0, width, height);\n        ctx.fillStyle = \"white\";\n        ctx.fillText(geometry.text, width / 2, height / 2);\n        const texture = new CanvasTexture(ctx.canvas);\n        texture.minFilter = LinearFilter;\n        texture.wrapS = ClampToEdgeWrapping;\n        texture.wrapT = ClampToEdgeWrapping;\n        material = new SpriteMaterial({\n          map: texture,\n          depthTest: false\n        });\n        const sprite = new Sprite(material);\n        sprite.position.set(geometry.point[0], geometry.point[1], geometry.point[2]);\n        sprite.scale.set(width / 10, height / 10, 1);\n        sprite.userData[\"attributes\"] = attributes;\n        sprite.userData[\"objectType\"] = obj.objectType;\n        if (attributes.name) {\n          sprite.name = attributes.name;\n        }\n        return sprite;\n      case \"Light\":\n        geometry = obj.geometry;\n        let light;\n        if (geometry.isDirectionalLight) {\n          light = new DirectionalLight();\n          light.castShadow = attributes.castsShadows;\n          light.position.set(geometry.location[0], geometry.location[1], geometry.location[2]);\n          light.target.position.set(geometry.direction[0], geometry.direction[1], geometry.direction[2]);\n          light.shadow.normalBias = 0.1;\n        } else if (geometry.isPointLight) {\n          light = new PointLight();\n          light.castShadow = attributes.castsShadows;\n          light.position.set(geometry.location[0], geometry.location[1], geometry.location[2]);\n          light.shadow.normalBias = 0.1;\n        } else if (geometry.isRectangularLight) {\n          light = new RectAreaLight();\n          const width2 = Math.abs(geometry.width[2]);\n          const height2 = Math.abs(geometry.length[0]);\n          light.position.set(geometry.location[0] - height2 / 2, geometry.location[1], geometry.location[2] - width2 / 2);\n          light.height = height2;\n          light.width = width2;\n          light.lookAt(new Vector3(geometry.direction[0], geometry.direction[1], geometry.direction[2]));\n        } else if (geometry.isSpotLight) {\n          light = new SpotLight();\n          light.castShadow = attributes.castsShadows;\n          light.position.set(geometry.location[0], geometry.location[1], geometry.location[2]);\n          light.target.position.set(geometry.direction[0], geometry.direction[1], geometry.direction[2]);\n          light.angle = geometry.spotAngleRadians;\n          light.shadow.normalBias = 0.1;\n        } else if (geometry.isLinearLight) {\n          console.warn(\"THREE.3DMLoader:  No conversion exists for linear lights.\");\n          return;\n        }\n        if (light) {\n          light.intensity = geometry.intensity;\n          _color = geometry.diffuse;\n          color = new Color(_color.r / 255, _color.g / 255, _color.b / 255);\n          light.color = color;\n          light.userData[\"attributes\"] = attributes;\n          light.userData[\"objectType\"] = obj.objectType;\n        }\n        return light;\n    }\n  }\n  _initLibrary() {\n    if (!this.libraryPending) {\n      const jsLoader = new FileLoader(this.manager);\n      jsLoader.setPath(this.libraryPath);\n      const jsContent = new Promise((resolve, reject) => {\n        jsLoader.load(\"rhino3dm.js\", resolve, void 0, reject);\n      });\n      const binaryLoader = new FileLoader(this.manager);\n      binaryLoader.setPath(this.libraryPath);\n      binaryLoader.setResponseType(\"arraybuffer\");\n      const binaryContent = new Promise((resolve, reject) => {\n        binaryLoader.load(\"rhino3dm.wasm\", resolve, void 0, reject);\n      });\n      this.libraryPending = Promise.all([jsContent, binaryContent]).then(_ref => {\n        let [jsContent2, binaryContent2] = _ref;\n        this.libraryConfig.wasmBinary = binaryContent2;\n        const fn = Rhino3dmWorker.toString();\n        const body = [\"/* rhino3dm.js */\", jsContent2, \"/* worker */\", fn.substring(fn.indexOf(\"{\") + 1, fn.lastIndexOf(\"}\"))].join(\"\\n\");\n        this.workerSourceURL = URL.createObjectURL(new Blob([body]));\n      });\n    }\n    return this.libraryPending;\n  }\n  _getWorker(taskCost) {\n    return this._initLibrary().then(() => {\n      if (this.workerPool.length < this.workerLimit) {\n        const worker2 = new Worker(this.workerSourceURL);\n        worker2._callbacks = {};\n        worker2._taskCosts = {};\n        worker2._taskLoad = 0;\n        worker2.postMessage({\n          type: \"init\",\n          libraryConfig: this.libraryConfig\n        });\n        worker2.onmessage = function (e) {\n          const message = e.data;\n          switch (message.type) {\n            case \"decode\":\n              worker2._callbacks[message.id].resolve(message);\n              break;\n            case \"error\":\n              worker2._callbacks[message.id].reject(message);\n              break;\n            default:\n              console.error('THREE.Rhino3dmLoader: Unexpected message, \"' + message.type + '\"');\n          }\n        };\n        this.workerPool.push(worker2);\n      } else {\n        this.workerPool.sort(function (a, b) {\n          return a._taskLoad > b._taskLoad ? -1 : 1;\n        });\n      }\n      const worker = this.workerPool[this.workerPool.length - 1];\n      worker._taskLoad += taskCost;\n      return worker;\n    });\n  }\n  _releaseTask(worker, taskID) {\n    worker._taskLoad -= worker._taskCosts[taskID];\n    delete worker._callbacks[taskID];\n    delete worker._taskCosts[taskID];\n  }\n  dispose() {\n    for (let i = 0; i < this.workerPool.length; ++i) {\n      this.workerPool[i].terminate();\n    }\n    this.workerPool.length = 0;\n    return this;\n  }\n}\nfunction Rhino3dmWorker() {\n  let libraryPending;\n  let libraryConfig;\n  let rhino;\n  onmessage = function (e) {\n    const message = e.data;\n    switch (message.type) {\n      case \"init\":\n        libraryConfig = message.libraryConfig;\n        const wasmBinary = libraryConfig.wasmBinary;\n        let RhinoModule;\n        libraryPending = new Promise(function (resolve) {\n          RhinoModule = {\n            wasmBinary,\n            onRuntimeInitialized: resolve\n          };\n          rhino3dm(RhinoModule);\n        }).then(() => {\n          rhino = RhinoModule;\n        });\n        break;\n      case \"decode\":\n        const buffer = message.buffer;\n        libraryPending.then(() => {\n          const data = decodeObjects(rhino, buffer);\n          self.postMessage({\n            type: \"decode\",\n            id: message.id,\n            data\n          });\n        });\n        break;\n    }\n  };\n  function decodeObjects(rhino2, buffer) {\n    const arr = new Uint8Array(buffer);\n    const doc = rhino2.File3dm.fromByteArray(arr);\n    const objects = [];\n    const materials = [];\n    const layers = [];\n    const views = [];\n    const namedViews = [];\n    const groups = [];\n    const objs = doc.objects();\n    const cnt = objs.count;\n    for (let i = 0; i < cnt; i++) {\n      const _object = objs.get(i);\n      const object = extractObjectData(_object, doc);\n      _object.delete();\n      if (object) {\n        objects.push(object);\n      }\n    }\n    for (let i = 0; i < doc.instanceDefinitions().count(); i++) {\n      const idef = doc.instanceDefinitions().get(i);\n      const idefAttributes = extractProperties(idef);\n      idefAttributes.objectIds = idef.getObjectIds();\n      objects.push({\n        geometry: null,\n        attributes: idefAttributes,\n        objectType: \"InstanceDefinition\"\n      });\n    }\n    const textureTypes = [\n    // rhino.TextureType.Bitmap,\n    rhino2.TextureType.Diffuse, rhino2.TextureType.Bump, rhino2.TextureType.Transparency, rhino2.TextureType.Opacity, rhino2.TextureType.Emap];\n    const pbrTextureTypes = [rhino2.TextureType.PBR_BaseColor, rhino2.TextureType.PBR_Subsurface, rhino2.TextureType.PBR_SubsurfaceScattering, rhino2.TextureType.PBR_SubsurfaceScatteringRadius, rhino2.TextureType.PBR_Metallic, rhino2.TextureType.PBR_Specular, rhino2.TextureType.PBR_SpecularTint, rhino2.TextureType.PBR_Roughness, rhino2.TextureType.PBR_Anisotropic, rhino2.TextureType.PBR_Anisotropic_Rotation, rhino2.TextureType.PBR_Sheen, rhino2.TextureType.PBR_SheenTint, rhino2.TextureType.PBR_Clearcoat, rhino2.TextureType.PBR_ClearcoatBump, rhino2.TextureType.PBR_ClearcoatRoughness, rhino2.TextureType.PBR_OpacityIor, rhino2.TextureType.PBR_OpacityRoughness, rhino2.TextureType.PBR_Emission, rhino2.TextureType.PBR_AmbientOcclusion, rhino2.TextureType.PBR_Displacement];\n    for (let i = 0; i < doc.materials().count(); i++) {\n      const _material = doc.materials().get(i);\n      const _pbrMaterial = _material.physicallyBased();\n      let material = extractProperties(_material);\n      const textures = [];\n      for (let j = 0; j < textureTypes.length; j++) {\n        const _texture = _material.getTexture(textureTypes[j]);\n        if (_texture) {\n          let textureType = textureTypes[j].constructor.name;\n          textureType = textureType.substring(12, textureType.length);\n          const texture = {\n            type: textureType\n          };\n          const image = doc.getEmbeddedFileAsBase64(_texture.fileName);\n          if (image) {\n            texture.image = \"data:image/png;base64,\" + image;\n          } else {\n            console.warn(`THREE.3DMLoader: Image for ${textureType} texture not embedded in file.`);\n            texture.image = null;\n          }\n          textures.push(texture);\n          _texture.delete();\n        }\n      }\n      material.textures = textures;\n      if (_pbrMaterial.supported) {\n        console.log(\"pbr true\");\n        for (let j = 0; j < pbrTextureTypes.length; j++) {\n          const _texture = _material.getTexture(textureTypes[j]);\n          if (_texture) {\n            const image = doc.getEmbeddedFileAsBase64(_texture.fileName);\n            let textureType = textureTypes[j].constructor.name;\n            textureType = textureType.substring(12, textureType.length);\n            const texture = {\n              type: textureType,\n              image: \"data:image/png;base64,\" + image\n            };\n            textures.push(texture);\n            _texture.delete();\n          }\n        }\n        const pbMaterialProperties = extractProperties(_material.physicallyBased());\n        material = Object.assign(pbMaterialProperties, material);\n      }\n      materials.push(material);\n      _material.delete();\n      _pbrMaterial.delete();\n    }\n    for (let i = 0; i < doc.layers().count(); i++) {\n      const _layer = doc.layers().get(i);\n      const layer = extractProperties(_layer);\n      layers.push(layer);\n      _layer.delete();\n    }\n    for (let i = 0; i < doc.views().count(); i++) {\n      const _view = doc.views().get(i);\n      const view = extractProperties(_view);\n      views.push(view);\n      _view.delete();\n    }\n    for (let i = 0; i < doc.namedViews().count(); i++) {\n      const _namedView = doc.namedViews().get(i);\n      const namedView = extractProperties(_namedView);\n      namedViews.push(namedView);\n      _namedView.delete();\n    }\n    for (let i = 0; i < doc.groups().count(); i++) {\n      const _group = doc.groups().get(i);\n      const group = extractProperties(_group);\n      groups.push(group);\n      _group.delete();\n    }\n    const settings = extractProperties(doc.settings());\n    doc.delete();\n    return {\n      objects,\n      materials,\n      layers,\n      views,\n      namedViews,\n      groups,\n      settings\n    };\n  }\n  function extractObjectData(object, doc) {\n    const _geometry = object.geometry();\n    const _attributes = object.attributes();\n    let objectType = _geometry.objectType;\n    let geometry, attributes, position, data, mesh;\n    switch (objectType) {\n      case rhino.ObjectType.Curve:\n        const pts = curveToPoints(_geometry, 100);\n        position = {};\n        attributes = {};\n        data = {};\n        position.itemSize = 3;\n        position.type = \"Float32Array\";\n        position.array = [];\n        for (let j = 0; j < pts.length; j++) {\n          position.array.push(pts[j][0]);\n          position.array.push(pts[j][1]);\n          position.array.push(pts[j][2]);\n        }\n        attributes.position = position;\n        data.attributes = attributes;\n        geometry = {\n          data\n        };\n        break;\n      case rhino.ObjectType.Point:\n        const pt = _geometry.location;\n        position = {};\n        const color = {};\n        attributes = {};\n        data = {};\n        position.itemSize = 3;\n        position.type = \"Float32Array\";\n        position.array = [pt[0], pt[1], pt[2]];\n        const _color = _attributes.drawColor(doc);\n        color.itemSize = 3;\n        color.type = \"Float32Array\";\n        color.array = [_color.r / 255, _color.g / 255, _color.b / 255];\n        attributes.position = position;\n        attributes.color = color;\n        data.attributes = attributes;\n        geometry = {\n          data\n        };\n        break;\n      case rhino.ObjectType.PointSet:\n      case rhino.ObjectType.Mesh:\n        geometry = _geometry.toThreejsJSON();\n        break;\n      case rhino.ObjectType.Brep:\n        const faces = _geometry.faces();\n        mesh = new rhino.Mesh();\n        for (let faceIndex = 0; faceIndex < faces.count; faceIndex++) {\n          const face = faces.get(faceIndex);\n          const _mesh = face.getMesh(rhino.MeshType.Any);\n          if (_mesh) {\n            mesh.append(_mesh);\n            _mesh.delete();\n          }\n          face.delete();\n        }\n        if (mesh.faces().count > 0) {\n          mesh.compact();\n          geometry = mesh.toThreejsJSON();\n          faces.delete();\n        }\n        mesh.delete();\n        break;\n      case rhino.ObjectType.Extrusion:\n        mesh = _geometry.getMesh(rhino.MeshType.Any);\n        if (mesh) {\n          geometry = mesh.toThreejsJSON();\n          mesh.delete();\n        }\n        break;\n      case rhino.ObjectType.TextDot:\n        geometry = extractProperties(_geometry);\n        break;\n      case rhino.ObjectType.Light:\n        geometry = extractProperties(_geometry);\n        break;\n      case rhino.ObjectType.InstanceReference:\n        geometry = extractProperties(_geometry);\n        geometry.xform = extractProperties(_geometry.xform);\n        geometry.xform.array = _geometry.xform.toFloatArray(true);\n        break;\n      case rhino.ObjectType.SubD:\n        _geometry.subdivide(3);\n        mesh = rhino.Mesh.createFromSubDControlNet(_geometry);\n        if (mesh) {\n          geometry = mesh.toThreejsJSON();\n          mesh.delete();\n        }\n        break;\n      default:\n        console.warn(`THREE.3DMLoader: TODO: Implement ${objectType.constructor.name}`);\n        break;\n    }\n    if (geometry) {\n      attributes = extractProperties(_attributes);\n      attributes.geometry = extractProperties(_geometry);\n      if (_attributes.groupCount > 0) {\n        attributes.groupIds = _attributes.getGroupList();\n      }\n      if (_attributes.userStringCount > 0) {\n        attributes.userStrings = _attributes.getUserStrings();\n      }\n      if (_geometry.userStringCount > 0) {\n        attributes.geometry.userStrings = _geometry.getUserStrings();\n      }\n      attributes.drawColor = _attributes.drawColor(doc);\n      objectType = objectType.constructor.name;\n      objectType = objectType.substring(11, objectType.length);\n      return {\n        geometry,\n        attributes,\n        objectType\n      };\n    } else {\n      console.warn(`THREE.3DMLoader: ${objectType.constructor.name} has no associated mesh geometry.`);\n    }\n  }\n  function extractProperties(object) {\n    const result = {};\n    for (const property in object) {\n      const value = object[property];\n      if (typeof value !== \"function\") {\n        if (typeof value === \"object\" && value !== null && value.hasOwnProperty(\"constructor\")) {\n          result[property] = {\n            name: value.constructor.name,\n            value: value.value\n          };\n        } else {\n          result[property] = value;\n        }\n      } else {}\n    }\n    return result;\n  }\n  function curveToPoints(curve, pointLimit) {\n    let pointCount = pointLimit;\n    let rc = [];\n    const ts = [];\n    if (curve instanceof rhino.LineCurve) {\n      return [curve.pointAtStart, curve.pointAtEnd];\n    }\n    if (curve instanceof rhino.PolylineCurve) {\n      pointCount = curve.pointCount;\n      for (let i = 0; i < pointCount; i++) {\n        rc.push(curve.point(i));\n      }\n      return rc;\n    }\n    if (curve instanceof rhino.PolyCurve) {\n      const segmentCount = curve.segmentCount;\n      for (let i = 0; i < segmentCount; i++) {\n        const segment = curve.segmentCurve(i);\n        const segmentArray = curveToPoints(segment, pointCount);\n        rc = rc.concat(segmentArray);\n        segment.delete();\n      }\n      return rc;\n    }\n    if (curve instanceof rhino.ArcCurve) {\n      pointCount = Math.floor(curve.angleDegrees / 5);\n      pointCount = pointCount < 2 ? 2 : pointCount;\n    }\n    if (curve instanceof rhino.NurbsCurve && curve.degree === 1) {\n      const pLine = curve.tryGetPolyline();\n      for (let i = 0; i < pLine.count; i++) {\n        rc.push(pLine.get(i));\n      }\n      pLine.delete();\n      return rc;\n    }\n    const domain = curve.domain;\n    const divisions = pointCount - 1;\n    for (let j = 0; j < pointCount; j++) {\n      const t = domain[0] + j / divisions * (domain[1] - domain[0]);\n      if (t === domain[0] || t === domain[1]) {\n        ts.push(t);\n        continue;\n      }\n      const tan = curve.tangentAt(t);\n      const prevTan = curve.tangentAt(ts.slice(-1)[0]);\n      const tS = tan[0] * tan[0] + tan[1] * tan[1] + tan[2] * tan[2];\n      const ptS = prevTan[0] * prevTan[0] + prevTan[1] * prevTan[1] + prevTan[2] * prevTan[2];\n      const denominator = Math.sqrt(tS * ptS);\n      let angle;\n      if (denominator === 0) {\n        angle = Math.PI / 2;\n      } else {\n        const theta = (tan.x * prevTan.x + tan.y * prevTan.y + tan.z * prevTan.z) / denominator;\n        angle = Math.acos(Math.max(-1, Math.min(1, theta)));\n      }\n      if (angle < 0.1) continue;\n      ts.push(t);\n    }\n    rc = ts.map(t => curve.pointAt(t));\n    return rc;\n  }\n}\nexport { Rhino3dmLoader };","map":{"version":3,"names":["Loader","FileLoader","MeshStandardMaterial","Color","TextureLoader","Object3D","Matrix4","BufferGeometryLoader","DirectionalLight","PointLight","RectAreaLight","Vector3","SpotLight","CanvasTexture","LinearFilter","ClampToEdgeWrapping","SpriteMaterial","Sprite","LineBasicMaterial","Line","Mesh","PointsMaterial","Points","_taskCache","WeakMap","Rhino3dmLoader","constructor","manager","libraryPath","libraryPending","libraryBinary","libraryConfig","url","workerLimit","workerPool","workerNextTaskID","workerSourceURL","workerConfig","materials","setLibraryPath","path","setWorkerLimit","load","onLoad","onProgress","onError","loader","setPath","setResponseType","setRequestHeader","requestHeader","buffer","has","cachedTask","get","promise","then","catch","decodeObjects","debug","console","log","map","worker","_taskLoad","taskID","taskCost","byteLength","objectPending","_getWorker","_worker","Promise","resolve","reject","_callbacks","postMessage","type","id","message","_createGeometry","data","_releaseTask","set","parse","_compareMaterials","material","mat","name","color","r","g","b","i","length","m","_mat","JSON","stringify","push","_createMaterial","metalness","side","_diffuseColor","diffuseColor","diffusecolor","transparent","transparency","opacity","textureLoader","textures","texture","image","bumpMap","alphaMap","envMap","object","instanceDefinitionObjects","instanceDefinitions","instanceReferences","userData","layers","groups","settings","objects","obj","attributes","objectType","_object","materialIndex","rMaterial","_createObject","layer","layerIndex","visible","isInstanceDefinitionObject","add","iDef","j","objectIds","objId","p","idoId","iRef","geometry","parentIdefId","iRefObject","xf","xform","array","matrix","applyMatrix4","clone","_color","hasOwnProperty","vertexColors","sizeAttenuation","size","drawColor","points","mesh","castShadow","castsShadows","receiveShadow","receivesShadows","lines","ctx","document","createElement","getContext","font","fontHeight","fontFace","width","measureText","text","height","window","devicePixelRatio","canvas","style","setTransform","textBaseline","textAlign","fillStyle","a","fillRect","fillText","minFilter","wrapS","wrapT","depthTest","sprite","position","point","scale","light","isDirectionalLight","location","target","direction","shadow","normalBias","isPointLight","isRectangularLight","width2","Math","abs","height2","lookAt","isSpotLight","angle","spotAngleRadians","isLinearLight","warn","intensity","diffuse","_initLibrary","jsLoader","jsContent","binaryLoader","binaryContent","all","_ref","jsContent2","binaryContent2","wasmBinary","fn","Rhino3dmWorker","toString","body","substring","indexOf","lastIndexOf","join","URL","createObjectURL","Blob","worker2","Worker","_taskCosts","onmessage","e","error","sort","dispose","terminate","rhino","RhinoModule","onRuntimeInitialized","rhino3dm","self","rhino2","arr","Uint8Array","doc","File3dm","fromByteArray","views","namedViews","objs","cnt","count","extractObjectData","delete","idef","idefAttributes","extractProperties","getObjectIds","textureTypes","TextureType","Diffuse","Bump","Transparency","Opacity","Emap","pbrTextureTypes","PBR_BaseColor","PBR_Subsurface","PBR_SubsurfaceScattering","PBR_SubsurfaceScatteringRadius","PBR_Metallic","PBR_Specular","PBR_SpecularTint","PBR_Roughness","PBR_Anisotropic","PBR_Anisotropic_Rotation","PBR_Sheen","PBR_SheenTint","PBR_Clearcoat","PBR_ClearcoatBump","PBR_ClearcoatRoughness","PBR_OpacityIor","PBR_OpacityRoughness","PBR_Emission","PBR_AmbientOcclusion","PBR_Displacement","_material","_pbrMaterial","physicallyBased","_texture","getTexture","textureType","getEmbeddedFileAsBase64","fileName","supported","pbMaterialProperties","Object","assign","_layer","_view","view","_namedView","namedView","_group","group","_geometry","_attributes","ObjectType","Curve","pts","curveToPoints","itemSize","Point","pt","PointSet","toThreejsJSON","Brep","faces","faceIndex","face","_mesh","getMesh","MeshType","Any","append","compact","Extrusion","TextDot","Light","InstanceReference","toFloatArray","SubD","subdivide","createFromSubDControlNet","groupCount","groupIds","getGroupList","userStringCount","userStrings","getUserStrings","result","property","value","curve","pointLimit","pointCount","rc","ts","LineCurve","pointAtStart","pointAtEnd","PolylineCurve","PolyCurve","segmentCount","segment","segmentCurve","segmentArray","concat","ArcCurve","floor","angleDegrees","NurbsCurve","degree","pLine","tryGetPolyline","domain","divisions","t","tan","tangentAt","prevTan","slice","tS","ptS","denominator","sqrt","PI","theta","x","y","z","acos","max","min","pointAt"],"sources":["/home/krug/Coding/JavaScript/Websites/Personal/personal/node_modules/.pnpm/three-stdlib@2.23.7_three@0.151.3/node_modules/three-stdlib/loaders/3DMLoader.js"],"sourcesContent":["import { Loader, FileLoader, MeshStandardMaterial, Color, TextureLoader, Object3D, Matrix4, BufferGeometryLoader, DirectionalLight, PointLight, RectAreaLight, Vector3, SpotLight, CanvasTexture, LinearFilter, ClampToEdgeWrapping, SpriteMaterial, Sprite, LineBasicMaterial, Line, Mesh, PointsMaterial, Points } from \"three\";\nconst _taskCache = /* @__PURE__ */ new WeakMap();\nclass Rhino3dmLoader extends Loader {\n  constructor(manager) {\n    super(manager);\n    this.libraryPath = \"\";\n    this.libraryPending = null;\n    this.libraryBinary = null;\n    this.libraryConfig = {};\n    this.url = \"\";\n    this.workerLimit = 4;\n    this.workerPool = [];\n    this.workerNextTaskID = 1;\n    this.workerSourceURL = \"\";\n    this.workerConfig = {};\n    this.materials = [];\n  }\n  setLibraryPath(path) {\n    this.libraryPath = path;\n    return this;\n  }\n  setWorkerLimit(workerLimit) {\n    this.workerLimit = workerLimit;\n    return this;\n  }\n  load(url, onLoad, onProgress, onError) {\n    const loader = new FileLoader(this.manager);\n    loader.setPath(this.path);\n    loader.setResponseType(\"arraybuffer\");\n    loader.setRequestHeader(this.requestHeader);\n    this.url = url;\n    loader.load(\n      url,\n      (buffer) => {\n        if (_taskCache.has(buffer)) {\n          const cachedTask = _taskCache.get(buffer);\n          return cachedTask.promise.then(onLoad).catch(onError);\n        }\n        this.decodeObjects(buffer, url).then(onLoad).catch(onError);\n      },\n      onProgress,\n      onError\n    );\n  }\n  debug() {\n    console.log(\n      \"Task load: \",\n      this.workerPool.map((worker) => worker._taskLoad)\n    );\n  }\n  decodeObjects(buffer, url) {\n    let worker;\n    let taskID;\n    const taskCost = buffer.byteLength;\n    const objectPending = this._getWorker(taskCost).then((_worker) => {\n      worker = _worker;\n      taskID = this.workerNextTaskID++;\n      return new Promise((resolve, reject) => {\n        worker._callbacks[taskID] = { resolve, reject };\n        worker.postMessage({ type: \"decode\", id: taskID, buffer }, [buffer]);\n      });\n    }).then((message) => this._createGeometry(message.data));\n    objectPending.catch(() => true).then(() => {\n      if (worker && taskID) {\n        this._releaseTask(worker, taskID);\n      }\n    });\n    _taskCache.set(buffer, {\n      url,\n      promise: objectPending\n    });\n    return objectPending;\n  }\n  parse(data, onLoad, onError) {\n    this.decodeObjects(data, \"\").then(onLoad).catch(onError);\n  }\n  _compareMaterials(material) {\n    const mat = {};\n    mat.name = material.name;\n    mat.color = {};\n    mat.color.r = material.color.r;\n    mat.color.g = material.color.g;\n    mat.color.b = material.color.b;\n    mat.type = material.type;\n    for (let i = 0; i < this.materials.length; i++) {\n      const m = this.materials[i];\n      const _mat = {};\n      _mat.name = m.name;\n      _mat.color = {};\n      _mat.color.r = m.color.r;\n      _mat.color.g = m.color.g;\n      _mat.color.b = m.color.b;\n      _mat.type = m.type;\n      if (JSON.stringify(mat) === JSON.stringify(_mat)) {\n        return m;\n      }\n    }\n    this.materials.push(material);\n    return material;\n  }\n  _createMaterial(material) {\n    if (material === void 0) {\n      return new MeshStandardMaterial({\n        color: new Color(1, 1, 1),\n        metalness: 0.8,\n        name: \"default\",\n        side: 2\n      });\n    }\n    const _diffuseColor = material.diffuseColor;\n    const diffusecolor = new Color(_diffuseColor.r / 255, _diffuseColor.g / 255, _diffuseColor.b / 255);\n    if (_diffuseColor.r === 0 && _diffuseColor.g === 0 && _diffuseColor.b === 0) {\n      diffusecolor.r = 1;\n      diffusecolor.g = 1;\n      diffusecolor.b = 1;\n    }\n    const mat = new MeshStandardMaterial({\n      color: diffusecolor,\n      name: material.name,\n      side: 2,\n      transparent: material.transparency > 0 ? true : false,\n      opacity: 1 - material.transparency\n    });\n    const textureLoader = new TextureLoader();\n    for (let i = 0; i < material.textures.length; i++) {\n      const texture = material.textures[i];\n      if (texture.image !== null) {\n        const map = textureLoader.load(texture.image);\n        switch (texture.type) {\n          case \"Diffuse\":\n            mat.map = map;\n            break;\n          case \"Bump\":\n            mat.bumpMap = map;\n            break;\n          case \"Transparency\":\n            mat.alphaMap = map;\n            mat.transparent = true;\n            break;\n          case \"Emap\":\n            mat.envMap = map;\n            break;\n        }\n      }\n    }\n    return mat;\n  }\n  _createGeometry(data) {\n    const object = new Object3D();\n    const instanceDefinitionObjects = [];\n    const instanceDefinitions = [];\n    const instanceReferences = [];\n    object.userData[\"layers\"] = data.layers;\n    object.userData[\"groups\"] = data.groups;\n    object.userData[\"settings\"] = data.settings;\n    object.userData[\"objectType\"] = \"File3dm\";\n    object.userData[\"materials\"] = null;\n    object.name = this.url;\n    let objects = data.objects;\n    const materials = data.materials;\n    for (let i = 0; i < objects.length; i++) {\n      const obj = objects[i];\n      const attributes = obj.attributes;\n      switch (obj.objectType) {\n        case \"InstanceDefinition\":\n          instanceDefinitions.push(obj);\n          break;\n        case \"InstanceReference\":\n          instanceReferences.push(obj);\n          break;\n        default:\n          let _object;\n          if (attributes.materialIndex >= 0) {\n            const rMaterial = materials[attributes.materialIndex];\n            let material = this._createMaterial(rMaterial);\n            material = this._compareMaterials(material);\n            _object = this._createObject(obj, material);\n          } else {\n            const material = this._createMaterial();\n            _object = this._createObject(obj, material);\n          }\n          if (_object === void 0) {\n            continue;\n          }\n          const layer = data.layers[attributes.layerIndex];\n          _object.visible = layer ? data.layers[attributes.layerIndex].visible : true;\n          if (attributes.isInstanceDefinitionObject) {\n            instanceDefinitionObjects.push(_object);\n          } else {\n            object.add(_object);\n          }\n          break;\n      }\n    }\n    for (let i = 0; i < instanceDefinitions.length; i++) {\n      const iDef = instanceDefinitions[i];\n      objects = [];\n      for (let j = 0; j < iDef.attributes.objectIds.length; j++) {\n        const objId = iDef.attributes.objectIds[j];\n        for (let p = 0; p < instanceDefinitionObjects.length; p++) {\n          const idoId = instanceDefinitionObjects[p].userData.attributes.id;\n          if (objId === idoId) {\n            objects.push(instanceDefinitionObjects[p]);\n          }\n        }\n      }\n      for (let j = 0; j < instanceReferences.length; j++) {\n        const iRef = instanceReferences[j];\n        if (iRef.geometry.parentIdefId === iDef.attributes.id) {\n          const iRefObject = new Object3D();\n          const xf = iRef.geometry.xform.array;\n          const matrix = new Matrix4();\n          matrix.set(\n            xf[0],\n            xf[1],\n            xf[2],\n            xf[3],\n            xf[4],\n            xf[5],\n            xf[6],\n            xf[7],\n            xf[8],\n            xf[9],\n            xf[10],\n            xf[11],\n            xf[12],\n            xf[13],\n            xf[14],\n            xf[15]\n          );\n          iRefObject.applyMatrix4(matrix);\n          for (let p = 0; p < objects.length; p++) {\n            iRefObject.add(objects[p].clone(true));\n          }\n          object.add(iRefObject);\n        }\n      }\n    }\n    object.userData[\"materials\"] = this.materials;\n    return object;\n  }\n  _createObject(obj, mat) {\n    const loader = new BufferGeometryLoader();\n    const attributes = obj.attributes;\n    let geometry, material, _color, color;\n    switch (obj.objectType) {\n      case \"Point\":\n      case \"PointSet\":\n        geometry = loader.parse(obj.geometry);\n        if (geometry.attributes.hasOwnProperty(\"color\")) {\n          material = new PointsMaterial({ vertexColors: true, sizeAttenuation: false, size: 2 });\n        } else {\n          _color = attributes.drawColor;\n          color = new Color(_color.r / 255, _color.g / 255, _color.b / 255);\n          material = new PointsMaterial({ color, sizeAttenuation: false, size: 2 });\n        }\n        material = this._compareMaterials(material);\n        const points = new Points(geometry, material);\n        points.userData[\"attributes\"] = attributes;\n        points.userData[\"objectType\"] = obj.objectType;\n        if (attributes.name) {\n          points.name = attributes.name;\n        }\n        return points;\n      case \"Mesh\":\n      case \"Extrusion\":\n      case \"SubD\":\n      case \"Brep\":\n        if (obj.geometry === null)\n          return;\n        geometry = loader.parse(obj.geometry);\n        if (geometry.attributes.hasOwnProperty(\"color\")) {\n          mat.vertexColors = true;\n        }\n        if (mat === null) {\n          mat = this._createMaterial();\n          mat = this._compareMaterials(mat);\n        }\n        const mesh = new Mesh(geometry, mat);\n        mesh.castShadow = attributes.castsShadows;\n        mesh.receiveShadow = attributes.receivesShadows;\n        mesh.userData[\"attributes\"] = attributes;\n        mesh.userData[\"objectType\"] = obj.objectType;\n        if (attributes.name) {\n          mesh.name = attributes.name;\n        }\n        return mesh;\n      case \"Curve\":\n        geometry = loader.parse(obj.geometry);\n        _color = attributes.drawColor;\n        color = new Color(_color.r / 255, _color.g / 255, _color.b / 255);\n        material = new LineBasicMaterial({ color });\n        material = this._compareMaterials(material);\n        const lines = new Line(geometry, material);\n        lines.userData[\"attributes\"] = attributes;\n        lines.userData[\"objectType\"] = obj.objectType;\n        if (attributes.name) {\n          lines.name = attributes.name;\n        }\n        return lines;\n      case \"TextDot\":\n        geometry = obj.geometry;\n        const ctx = document.createElement(\"canvas\").getContext(\"2d\");\n        const font = `${geometry.fontHeight}px ${geometry.fontFace}`;\n        ctx.font = font;\n        const width = ctx.measureText(geometry.text).width + 10;\n        const height = geometry.fontHeight + 10;\n        const r = window.devicePixelRatio;\n        ctx.canvas.width = width * r;\n        ctx.canvas.height = height * r;\n        ctx.canvas.style.width = width + \"px\";\n        ctx.canvas.style.height = height + \"px\";\n        ctx.setTransform(r, 0, 0, r, 0, 0);\n        ctx.font = font;\n        ctx.textBaseline = \"middle\";\n        ctx.textAlign = \"center\";\n        color = attributes.drawColor;\n        ctx.fillStyle = `rgba(${color.r},${color.g},${color.b},${color.a})`;\n        ctx.fillRect(0, 0, width, height);\n        ctx.fillStyle = \"white\";\n        ctx.fillText(geometry.text, width / 2, height / 2);\n        const texture = new CanvasTexture(ctx.canvas);\n        texture.minFilter = LinearFilter;\n        texture.wrapS = ClampToEdgeWrapping;\n        texture.wrapT = ClampToEdgeWrapping;\n        material = new SpriteMaterial({ map: texture, depthTest: false });\n        const sprite = new Sprite(material);\n        sprite.position.set(geometry.point[0], geometry.point[1], geometry.point[2]);\n        sprite.scale.set(width / 10, height / 10, 1);\n        sprite.userData[\"attributes\"] = attributes;\n        sprite.userData[\"objectType\"] = obj.objectType;\n        if (attributes.name) {\n          sprite.name = attributes.name;\n        }\n        return sprite;\n      case \"Light\":\n        geometry = obj.geometry;\n        let light;\n        if (geometry.isDirectionalLight) {\n          light = new DirectionalLight();\n          light.castShadow = attributes.castsShadows;\n          light.position.set(geometry.location[0], geometry.location[1], geometry.location[2]);\n          light.target.position.set(geometry.direction[0], geometry.direction[1], geometry.direction[2]);\n          light.shadow.normalBias = 0.1;\n        } else if (geometry.isPointLight) {\n          light = new PointLight();\n          light.castShadow = attributes.castsShadows;\n          light.position.set(geometry.location[0], geometry.location[1], geometry.location[2]);\n          light.shadow.normalBias = 0.1;\n        } else if (geometry.isRectangularLight) {\n          light = new RectAreaLight();\n          const width2 = Math.abs(geometry.width[2]);\n          const height2 = Math.abs(geometry.length[0]);\n          light.position.set(geometry.location[0] - height2 / 2, geometry.location[1], geometry.location[2] - width2 / 2);\n          light.height = height2;\n          light.width = width2;\n          light.lookAt(new Vector3(geometry.direction[0], geometry.direction[1], geometry.direction[2]));\n        } else if (geometry.isSpotLight) {\n          light = new SpotLight();\n          light.castShadow = attributes.castsShadows;\n          light.position.set(geometry.location[0], geometry.location[1], geometry.location[2]);\n          light.target.position.set(geometry.direction[0], geometry.direction[1], geometry.direction[2]);\n          light.angle = geometry.spotAngleRadians;\n          light.shadow.normalBias = 0.1;\n        } else if (geometry.isLinearLight) {\n          console.warn(\"THREE.3DMLoader:  No conversion exists for linear lights.\");\n          return;\n        }\n        if (light) {\n          light.intensity = geometry.intensity;\n          _color = geometry.diffuse;\n          color = new Color(_color.r / 255, _color.g / 255, _color.b / 255);\n          light.color = color;\n          light.userData[\"attributes\"] = attributes;\n          light.userData[\"objectType\"] = obj.objectType;\n        }\n        return light;\n    }\n  }\n  _initLibrary() {\n    if (!this.libraryPending) {\n      const jsLoader = new FileLoader(this.manager);\n      jsLoader.setPath(this.libraryPath);\n      const jsContent = new Promise((resolve, reject) => {\n        jsLoader.load(\"rhino3dm.js\", resolve, void 0, reject);\n      });\n      const binaryLoader = new FileLoader(this.manager);\n      binaryLoader.setPath(this.libraryPath);\n      binaryLoader.setResponseType(\"arraybuffer\");\n      const binaryContent = new Promise((resolve, reject) => {\n        binaryLoader.load(\"rhino3dm.wasm\", resolve, void 0, reject);\n      });\n      this.libraryPending = Promise.all([jsContent, binaryContent]).then(([jsContent2, binaryContent2]) => {\n        this.libraryConfig.wasmBinary = binaryContent2;\n        const fn = Rhino3dmWorker.toString();\n        const body = [\n          \"/* rhino3dm.js */\",\n          jsContent2,\n          \"/* worker */\",\n          fn.substring(fn.indexOf(\"{\") + 1, fn.lastIndexOf(\"}\"))\n        ].join(\"\\n\");\n        this.workerSourceURL = URL.createObjectURL(new Blob([body]));\n      });\n    }\n    return this.libraryPending;\n  }\n  _getWorker(taskCost) {\n    return this._initLibrary().then(() => {\n      if (this.workerPool.length < this.workerLimit) {\n        const worker2 = new Worker(this.workerSourceURL);\n        worker2._callbacks = {};\n        worker2._taskCosts = {};\n        worker2._taskLoad = 0;\n        worker2.postMessage({\n          type: \"init\",\n          libraryConfig: this.libraryConfig\n        });\n        worker2.onmessage = function(e) {\n          const message = e.data;\n          switch (message.type) {\n            case \"decode\":\n              worker2._callbacks[message.id].resolve(message);\n              break;\n            case \"error\":\n              worker2._callbacks[message.id].reject(message);\n              break;\n            default:\n              console.error('THREE.Rhino3dmLoader: Unexpected message, \"' + message.type + '\"');\n          }\n        };\n        this.workerPool.push(worker2);\n      } else {\n        this.workerPool.sort(function(a, b) {\n          return a._taskLoad > b._taskLoad ? -1 : 1;\n        });\n      }\n      const worker = this.workerPool[this.workerPool.length - 1];\n      worker._taskLoad += taskCost;\n      return worker;\n    });\n  }\n  _releaseTask(worker, taskID) {\n    worker._taskLoad -= worker._taskCosts[taskID];\n    delete worker._callbacks[taskID];\n    delete worker._taskCosts[taskID];\n  }\n  dispose() {\n    for (let i = 0; i < this.workerPool.length; ++i) {\n      this.workerPool[i].terminate();\n    }\n    this.workerPool.length = 0;\n    return this;\n  }\n}\nfunction Rhino3dmWorker() {\n  let libraryPending;\n  let libraryConfig;\n  let rhino;\n  onmessage = function(e) {\n    const message = e.data;\n    switch (message.type) {\n      case \"init\":\n        libraryConfig = message.libraryConfig;\n        const wasmBinary = libraryConfig.wasmBinary;\n        let RhinoModule;\n        libraryPending = new Promise(function(resolve) {\n          RhinoModule = { wasmBinary, onRuntimeInitialized: resolve };\n          rhino3dm(RhinoModule);\n        }).then(() => {\n          rhino = RhinoModule;\n        });\n        break;\n      case \"decode\":\n        const buffer = message.buffer;\n        libraryPending.then(() => {\n          const data = decodeObjects(rhino, buffer);\n          self.postMessage({ type: \"decode\", id: message.id, data });\n        });\n        break;\n    }\n  };\n  function decodeObjects(rhino2, buffer) {\n    const arr = new Uint8Array(buffer);\n    const doc = rhino2.File3dm.fromByteArray(arr);\n    const objects = [];\n    const materials = [];\n    const layers = [];\n    const views = [];\n    const namedViews = [];\n    const groups = [];\n    const objs = doc.objects();\n    const cnt = objs.count;\n    for (let i = 0; i < cnt; i++) {\n      const _object = objs.get(i);\n      const object = extractObjectData(_object, doc);\n      _object.delete();\n      if (object) {\n        objects.push(object);\n      }\n    }\n    for (let i = 0; i < doc.instanceDefinitions().count(); i++) {\n      const idef = doc.instanceDefinitions().get(i);\n      const idefAttributes = extractProperties(idef);\n      idefAttributes.objectIds = idef.getObjectIds();\n      objects.push({ geometry: null, attributes: idefAttributes, objectType: \"InstanceDefinition\" });\n    }\n    const textureTypes = [\n      // rhino.TextureType.Bitmap,\n      rhino2.TextureType.Diffuse,\n      rhino2.TextureType.Bump,\n      rhino2.TextureType.Transparency,\n      rhino2.TextureType.Opacity,\n      rhino2.TextureType.Emap\n    ];\n    const pbrTextureTypes = [\n      rhino2.TextureType.PBR_BaseColor,\n      rhino2.TextureType.PBR_Subsurface,\n      rhino2.TextureType.PBR_SubsurfaceScattering,\n      rhino2.TextureType.PBR_SubsurfaceScatteringRadius,\n      rhino2.TextureType.PBR_Metallic,\n      rhino2.TextureType.PBR_Specular,\n      rhino2.TextureType.PBR_SpecularTint,\n      rhino2.TextureType.PBR_Roughness,\n      rhino2.TextureType.PBR_Anisotropic,\n      rhino2.TextureType.PBR_Anisotropic_Rotation,\n      rhino2.TextureType.PBR_Sheen,\n      rhino2.TextureType.PBR_SheenTint,\n      rhino2.TextureType.PBR_Clearcoat,\n      rhino2.TextureType.PBR_ClearcoatBump,\n      rhino2.TextureType.PBR_ClearcoatRoughness,\n      rhino2.TextureType.PBR_OpacityIor,\n      rhino2.TextureType.PBR_OpacityRoughness,\n      rhino2.TextureType.PBR_Emission,\n      rhino2.TextureType.PBR_AmbientOcclusion,\n      rhino2.TextureType.PBR_Displacement\n    ];\n    for (let i = 0; i < doc.materials().count(); i++) {\n      const _material = doc.materials().get(i);\n      const _pbrMaterial = _material.physicallyBased();\n      let material = extractProperties(_material);\n      const textures = [];\n      for (let j = 0; j < textureTypes.length; j++) {\n        const _texture = _material.getTexture(textureTypes[j]);\n        if (_texture) {\n          let textureType = textureTypes[j].constructor.name;\n          textureType = textureType.substring(12, textureType.length);\n          const texture = { type: textureType };\n          const image = doc.getEmbeddedFileAsBase64(_texture.fileName);\n          if (image) {\n            texture.image = \"data:image/png;base64,\" + image;\n          } else {\n            console.warn(`THREE.3DMLoader: Image for ${textureType} texture not embedded in file.`);\n            texture.image = null;\n          }\n          textures.push(texture);\n          _texture.delete();\n        }\n      }\n      material.textures = textures;\n      if (_pbrMaterial.supported) {\n        console.log(\"pbr true\");\n        for (let j = 0; j < pbrTextureTypes.length; j++) {\n          const _texture = _material.getTexture(textureTypes[j]);\n          if (_texture) {\n            const image = doc.getEmbeddedFileAsBase64(_texture.fileName);\n            let textureType = textureTypes[j].constructor.name;\n            textureType = textureType.substring(12, textureType.length);\n            const texture = { type: textureType, image: \"data:image/png;base64,\" + image };\n            textures.push(texture);\n            _texture.delete();\n          }\n        }\n        const pbMaterialProperties = extractProperties(_material.physicallyBased());\n        material = Object.assign(pbMaterialProperties, material);\n      }\n      materials.push(material);\n      _material.delete();\n      _pbrMaterial.delete();\n    }\n    for (let i = 0; i < doc.layers().count(); i++) {\n      const _layer = doc.layers().get(i);\n      const layer = extractProperties(_layer);\n      layers.push(layer);\n      _layer.delete();\n    }\n    for (let i = 0; i < doc.views().count(); i++) {\n      const _view = doc.views().get(i);\n      const view = extractProperties(_view);\n      views.push(view);\n      _view.delete();\n    }\n    for (let i = 0; i < doc.namedViews().count(); i++) {\n      const _namedView = doc.namedViews().get(i);\n      const namedView = extractProperties(_namedView);\n      namedViews.push(namedView);\n      _namedView.delete();\n    }\n    for (let i = 0; i < doc.groups().count(); i++) {\n      const _group = doc.groups().get(i);\n      const group = extractProperties(_group);\n      groups.push(group);\n      _group.delete();\n    }\n    const settings = extractProperties(doc.settings());\n    doc.delete();\n    return { objects, materials, layers, views, namedViews, groups, settings };\n  }\n  function extractObjectData(object, doc) {\n    const _geometry = object.geometry();\n    const _attributes = object.attributes();\n    let objectType = _geometry.objectType;\n    let geometry, attributes, position, data, mesh;\n    switch (objectType) {\n      case rhino.ObjectType.Curve:\n        const pts = curveToPoints(_geometry, 100);\n        position = {};\n        attributes = {};\n        data = {};\n        position.itemSize = 3;\n        position.type = \"Float32Array\";\n        position.array = [];\n        for (let j = 0; j < pts.length; j++) {\n          position.array.push(pts[j][0]);\n          position.array.push(pts[j][1]);\n          position.array.push(pts[j][2]);\n        }\n        attributes.position = position;\n        data.attributes = attributes;\n        geometry = { data };\n        break;\n      case rhino.ObjectType.Point:\n        const pt = _geometry.location;\n        position = {};\n        const color = {};\n        attributes = {};\n        data = {};\n        position.itemSize = 3;\n        position.type = \"Float32Array\";\n        position.array = [pt[0], pt[1], pt[2]];\n        const _color = _attributes.drawColor(doc);\n        color.itemSize = 3;\n        color.type = \"Float32Array\";\n        color.array = [_color.r / 255, _color.g / 255, _color.b / 255];\n        attributes.position = position;\n        attributes.color = color;\n        data.attributes = attributes;\n        geometry = { data };\n        break;\n      case rhino.ObjectType.PointSet:\n      case rhino.ObjectType.Mesh:\n        geometry = _geometry.toThreejsJSON();\n        break;\n      case rhino.ObjectType.Brep:\n        const faces = _geometry.faces();\n        mesh = new rhino.Mesh();\n        for (let faceIndex = 0; faceIndex < faces.count; faceIndex++) {\n          const face = faces.get(faceIndex);\n          const _mesh = face.getMesh(rhino.MeshType.Any);\n          if (_mesh) {\n            mesh.append(_mesh);\n            _mesh.delete();\n          }\n          face.delete();\n        }\n        if (mesh.faces().count > 0) {\n          mesh.compact();\n          geometry = mesh.toThreejsJSON();\n          faces.delete();\n        }\n        mesh.delete();\n        break;\n      case rhino.ObjectType.Extrusion:\n        mesh = _geometry.getMesh(rhino.MeshType.Any);\n        if (mesh) {\n          geometry = mesh.toThreejsJSON();\n          mesh.delete();\n        }\n        break;\n      case rhino.ObjectType.TextDot:\n        geometry = extractProperties(_geometry);\n        break;\n      case rhino.ObjectType.Light:\n        geometry = extractProperties(_geometry);\n        break;\n      case rhino.ObjectType.InstanceReference:\n        geometry = extractProperties(_geometry);\n        geometry.xform = extractProperties(_geometry.xform);\n        geometry.xform.array = _geometry.xform.toFloatArray(true);\n        break;\n      case rhino.ObjectType.SubD:\n        _geometry.subdivide(3);\n        mesh = rhino.Mesh.createFromSubDControlNet(_geometry);\n        if (mesh) {\n          geometry = mesh.toThreejsJSON();\n          mesh.delete();\n        }\n        break;\n      default:\n        console.warn(`THREE.3DMLoader: TODO: Implement ${objectType.constructor.name}`);\n        break;\n    }\n    if (geometry) {\n      attributes = extractProperties(_attributes);\n      attributes.geometry = extractProperties(_geometry);\n      if (_attributes.groupCount > 0) {\n        attributes.groupIds = _attributes.getGroupList();\n      }\n      if (_attributes.userStringCount > 0) {\n        attributes.userStrings = _attributes.getUserStrings();\n      }\n      if (_geometry.userStringCount > 0) {\n        attributes.geometry.userStrings = _geometry.getUserStrings();\n      }\n      attributes.drawColor = _attributes.drawColor(doc);\n      objectType = objectType.constructor.name;\n      objectType = objectType.substring(11, objectType.length);\n      return { geometry, attributes, objectType };\n    } else {\n      console.warn(`THREE.3DMLoader: ${objectType.constructor.name} has no associated mesh geometry.`);\n    }\n  }\n  function extractProperties(object) {\n    const result = {};\n    for (const property in object) {\n      const value = object[property];\n      if (typeof value !== \"function\") {\n        if (typeof value === \"object\" && value !== null && value.hasOwnProperty(\"constructor\")) {\n          result[property] = { name: value.constructor.name, value: value.value };\n        } else {\n          result[property] = value;\n        }\n      } else {\n      }\n    }\n    return result;\n  }\n  function curveToPoints(curve, pointLimit) {\n    let pointCount = pointLimit;\n    let rc = [];\n    const ts = [];\n    if (curve instanceof rhino.LineCurve) {\n      return [curve.pointAtStart, curve.pointAtEnd];\n    }\n    if (curve instanceof rhino.PolylineCurve) {\n      pointCount = curve.pointCount;\n      for (let i = 0; i < pointCount; i++) {\n        rc.push(curve.point(i));\n      }\n      return rc;\n    }\n    if (curve instanceof rhino.PolyCurve) {\n      const segmentCount = curve.segmentCount;\n      for (let i = 0; i < segmentCount; i++) {\n        const segment = curve.segmentCurve(i);\n        const segmentArray = curveToPoints(segment, pointCount);\n        rc = rc.concat(segmentArray);\n        segment.delete();\n      }\n      return rc;\n    }\n    if (curve instanceof rhino.ArcCurve) {\n      pointCount = Math.floor(curve.angleDegrees / 5);\n      pointCount = pointCount < 2 ? 2 : pointCount;\n    }\n    if (curve instanceof rhino.NurbsCurve && curve.degree === 1) {\n      const pLine = curve.tryGetPolyline();\n      for (let i = 0; i < pLine.count; i++) {\n        rc.push(pLine.get(i));\n      }\n      pLine.delete();\n      return rc;\n    }\n    const domain = curve.domain;\n    const divisions = pointCount - 1;\n    for (let j = 0; j < pointCount; j++) {\n      const t = domain[0] + j / divisions * (domain[1] - domain[0]);\n      if (t === domain[0] || t === domain[1]) {\n        ts.push(t);\n        continue;\n      }\n      const tan = curve.tangentAt(t);\n      const prevTan = curve.tangentAt(ts.slice(-1)[0]);\n      const tS = tan[0] * tan[0] + tan[1] * tan[1] + tan[2] * tan[2];\n      const ptS = prevTan[0] * prevTan[0] + prevTan[1] * prevTan[1] + prevTan[2] * prevTan[2];\n      const denominator = Math.sqrt(tS * ptS);\n      let angle;\n      if (denominator === 0) {\n        angle = Math.PI / 2;\n      } else {\n        const theta = (tan.x * prevTan.x + tan.y * prevTan.y + tan.z * prevTan.z) / denominator;\n        angle = Math.acos(Math.max(-1, Math.min(1, theta)));\n      }\n      if (angle < 0.1)\n        continue;\n      ts.push(t);\n    }\n    rc = ts.map((t) => curve.pointAt(t));\n    return rc;\n  }\n}\nexport {\n  Rhino3dmLoader\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}