{"ast":null,"code":"import { Loader, FileLoader, ShapePath, Vector2, Path, Matrix3, Vector3, ShapeUtils, Box2, Shape, BufferGeometry, Float32BufferAttribute } from \"three\";\nclass SVGLoader extends Loader {\n  constructor(manager) {\n    super(manager);\n    this.defaultDPI = 90;\n    this.defaultUnit = \"px\";\n  }\n  load(url, onLoad, onProgress, onError) {\n    const scope = this;\n    const loader = new FileLoader(scope.manager);\n    loader.setPath(scope.path);\n    loader.setRequestHeader(scope.requestHeader);\n    loader.setWithCredentials(scope.withCredentials);\n    loader.load(url, function (text) {\n      try {\n        onLoad(scope.parse(text));\n      } catch (e) {\n        if (onError) {\n          onError(e);\n        } else {\n          console.error(e);\n        }\n        scope.manager.itemError(url);\n      }\n    }, onProgress, onError);\n  }\n  parse(text) {\n    const scope = this;\n    function parseNode(node, style) {\n      if (node.nodeType !== 1) return;\n      const transform = getNodeTransform(node);\n      let traverseChildNodes = true;\n      let path = null;\n      switch (node.nodeName) {\n        case \"svg\":\n          break;\n        case \"style\":\n          parseCSSStylesheet(node);\n          break;\n        case \"g\":\n          style = parseStyle(node, style);\n          break;\n        case \"path\":\n          style = parseStyle(node, style);\n          if (node.hasAttribute(\"d\")) path = parsePathNode(node);\n          break;\n        case \"rect\":\n          style = parseStyle(node, style);\n          path = parseRectNode(node);\n          break;\n        case \"polygon\":\n          style = parseStyle(node, style);\n          path = parsePolygonNode(node);\n          break;\n        case \"polyline\":\n          style = parseStyle(node, style);\n          path = parsePolylineNode(node);\n          break;\n        case \"circle\":\n          style = parseStyle(node, style);\n          path = parseCircleNode(node);\n          break;\n        case \"ellipse\":\n          style = parseStyle(node, style);\n          path = parseEllipseNode(node);\n          break;\n        case \"line\":\n          style = parseStyle(node, style);\n          path = parseLineNode(node);\n          break;\n        case \"defs\":\n          traverseChildNodes = false;\n          break;\n        case \"mask\":\n          traverseChildNodes = false;\n          break;\n        case \"use\":\n          style = parseStyle(node, style);\n          const usedNodeId = node.href.baseVal.substring(1);\n          const usedNode = node.viewportElement.getElementById(usedNodeId);\n          if (usedNode) {\n            parseNode(usedNode, style);\n          } else {\n            console.warn(\"SVGLoader: 'use node' references non-existent node id: \" + usedNodeId);\n          }\n          break;\n        default:\n      }\n      if (path) {\n        if (style.fill !== void 0 && style.fill !== \"none\") {\n          path.color.setStyle(style.fill);\n        }\n        transformPath(path, currentTransform);\n        paths.push(path);\n        path.userData = {\n          node,\n          style\n        };\n      }\n      if (traverseChildNodes) {\n        const nodes = node.childNodes;\n        for (let i = 0; i < nodes.length; i++) {\n          parseNode(nodes[i], style);\n        }\n      }\n      if (transform) {\n        transformStack.pop();\n        if (transformStack.length > 0) {\n          currentTransform.copy(transformStack[transformStack.length - 1]);\n        } else {\n          currentTransform.identity();\n        }\n      }\n    }\n    function parsePathNode(node) {\n      const path = new ShapePath();\n      const point = new Vector2();\n      const control = new Vector2();\n      const firstPoint = new Vector2();\n      let isFirstPoint = true;\n      let doSetFirstPoint = false;\n      const d = node.getAttribute(\"d\");\n      const commands = d.match(/[a-df-z][^a-df-z]*/gi);\n      for (let i = 0, l = commands.length; i < l; i++) {\n        const command = commands[i];\n        const type = command.charAt(0);\n        const data2 = command.substr(1).trim();\n        if (isFirstPoint === true) {\n          doSetFirstPoint = true;\n          isFirstPoint = false;\n        }\n        let numbers;\n        switch (type) {\n          case \"M\":\n            numbers = parseFloats(data2);\n            for (let j = 0, jl = numbers.length; j < jl; j += 2) {\n              point.x = numbers[j + 0];\n              point.y = numbers[j + 1];\n              control.x = point.x;\n              control.y = point.y;\n              if (j === 0) {\n                path.moveTo(point.x, point.y);\n              } else {\n                path.lineTo(point.x, point.y);\n              }\n              if (j === 0) firstPoint.copy(point);\n            }\n            break;\n          case \"H\":\n            numbers = parseFloats(data2);\n            for (let j = 0, jl = numbers.length; j < jl; j++) {\n              point.x = numbers[j];\n              control.x = point.x;\n              control.y = point.y;\n              path.lineTo(point.x, point.y);\n              if (j === 0 && doSetFirstPoint === true) firstPoint.copy(point);\n            }\n            break;\n          case \"V\":\n            numbers = parseFloats(data2);\n            for (let j = 0, jl = numbers.length; j < jl; j++) {\n              point.y = numbers[j];\n              control.x = point.x;\n              control.y = point.y;\n              path.lineTo(point.x, point.y);\n              if (j === 0 && doSetFirstPoint === true) firstPoint.copy(point);\n            }\n            break;\n          case \"L\":\n            numbers = parseFloats(data2);\n            for (let j = 0, jl = numbers.length; j < jl; j += 2) {\n              point.x = numbers[j + 0];\n              point.y = numbers[j + 1];\n              control.x = point.x;\n              control.y = point.y;\n              path.lineTo(point.x, point.y);\n              if (j === 0 && doSetFirstPoint === true) firstPoint.copy(point);\n            }\n            break;\n          case \"C\":\n            numbers = parseFloats(data2);\n            for (let j = 0, jl = numbers.length; j < jl; j += 6) {\n              path.bezierCurveTo(numbers[j + 0], numbers[j + 1], numbers[j + 2], numbers[j + 3], numbers[j + 4], numbers[j + 5]);\n              control.x = numbers[j + 2];\n              control.y = numbers[j + 3];\n              point.x = numbers[j + 4];\n              point.y = numbers[j + 5];\n              if (j === 0 && doSetFirstPoint === true) firstPoint.copy(point);\n            }\n            break;\n          case \"S\":\n            numbers = parseFloats(data2);\n            for (let j = 0, jl = numbers.length; j < jl; j += 4) {\n              path.bezierCurveTo(getReflection(point.x, control.x), getReflection(point.y, control.y), numbers[j + 0], numbers[j + 1], numbers[j + 2], numbers[j + 3]);\n              control.x = numbers[j + 0];\n              control.y = numbers[j + 1];\n              point.x = numbers[j + 2];\n              point.y = numbers[j + 3];\n              if (j === 0 && doSetFirstPoint === true) firstPoint.copy(point);\n            }\n            break;\n          case \"Q\":\n            numbers = parseFloats(data2);\n            for (let j = 0, jl = numbers.length; j < jl; j += 4) {\n              path.quadraticCurveTo(numbers[j + 0], numbers[j + 1], numbers[j + 2], numbers[j + 3]);\n              control.x = numbers[j + 0];\n              control.y = numbers[j + 1];\n              point.x = numbers[j + 2];\n              point.y = numbers[j + 3];\n              if (j === 0 && doSetFirstPoint === true) firstPoint.copy(point);\n            }\n            break;\n          case \"T\":\n            numbers = parseFloats(data2);\n            for (let j = 0, jl = numbers.length; j < jl; j += 2) {\n              const rx = getReflection(point.x, control.x);\n              const ry = getReflection(point.y, control.y);\n              path.quadraticCurveTo(rx, ry, numbers[j + 0], numbers[j + 1]);\n              control.x = rx;\n              control.y = ry;\n              point.x = numbers[j + 0];\n              point.y = numbers[j + 1];\n              if (j === 0 && doSetFirstPoint === true) firstPoint.copy(point);\n            }\n            break;\n          case \"A\":\n            numbers = parseFloats(data2, [3, 4], 7);\n            for (let j = 0, jl = numbers.length; j < jl; j += 7) {\n              if (numbers[j + 5] == point.x && numbers[j + 6] == point.y) continue;\n              const start = point.clone();\n              point.x = numbers[j + 5];\n              point.y = numbers[j + 6];\n              control.x = point.x;\n              control.y = point.y;\n              parseArcCommand(path, numbers[j], numbers[j + 1], numbers[j + 2], numbers[j + 3], numbers[j + 4], start, point);\n              if (j === 0 && doSetFirstPoint === true) firstPoint.copy(point);\n            }\n            break;\n          case \"m\":\n            numbers = parseFloats(data2);\n            for (let j = 0, jl = numbers.length; j < jl; j += 2) {\n              point.x += numbers[j + 0];\n              point.y += numbers[j + 1];\n              control.x = point.x;\n              control.y = point.y;\n              if (j === 0) {\n                path.moveTo(point.x, point.y);\n              } else {\n                path.lineTo(point.x, point.y);\n              }\n              if (j === 0) firstPoint.copy(point);\n            }\n            break;\n          case \"h\":\n            numbers = parseFloats(data2);\n            for (let j = 0, jl = numbers.length; j < jl; j++) {\n              point.x += numbers[j];\n              control.x = point.x;\n              control.y = point.y;\n              path.lineTo(point.x, point.y);\n              if (j === 0 && doSetFirstPoint === true) firstPoint.copy(point);\n            }\n            break;\n          case \"v\":\n            numbers = parseFloats(data2);\n            for (let j = 0, jl = numbers.length; j < jl; j++) {\n              point.y += numbers[j];\n              control.x = point.x;\n              control.y = point.y;\n              path.lineTo(point.x, point.y);\n              if (j === 0 && doSetFirstPoint === true) firstPoint.copy(point);\n            }\n            break;\n          case \"l\":\n            numbers = parseFloats(data2);\n            for (let j = 0, jl = numbers.length; j < jl; j += 2) {\n              point.x += numbers[j + 0];\n              point.y += numbers[j + 1];\n              control.x = point.x;\n              control.y = point.y;\n              path.lineTo(point.x, point.y);\n              if (j === 0 && doSetFirstPoint === true) firstPoint.copy(point);\n            }\n            break;\n          case \"c\":\n            numbers = parseFloats(data2);\n            for (let j = 0, jl = numbers.length; j < jl; j += 6) {\n              path.bezierCurveTo(point.x + numbers[j + 0], point.y + numbers[j + 1], point.x + numbers[j + 2], point.y + numbers[j + 3], point.x + numbers[j + 4], point.y + numbers[j + 5]);\n              control.x = point.x + numbers[j + 2];\n              control.y = point.y + numbers[j + 3];\n              point.x += numbers[j + 4];\n              point.y += numbers[j + 5];\n              if (j === 0 && doSetFirstPoint === true) firstPoint.copy(point);\n            }\n            break;\n          case \"s\":\n            numbers = parseFloats(data2);\n            for (let j = 0, jl = numbers.length; j < jl; j += 4) {\n              path.bezierCurveTo(getReflection(point.x, control.x), getReflection(point.y, control.y), point.x + numbers[j + 0], point.y + numbers[j + 1], point.x + numbers[j + 2], point.y + numbers[j + 3]);\n              control.x = point.x + numbers[j + 0];\n              control.y = point.y + numbers[j + 1];\n              point.x += numbers[j + 2];\n              point.y += numbers[j + 3];\n              if (j === 0 && doSetFirstPoint === true) firstPoint.copy(point);\n            }\n            break;\n          case \"q\":\n            numbers = parseFloats(data2);\n            for (let j = 0, jl = numbers.length; j < jl; j += 4) {\n              path.quadraticCurveTo(point.x + numbers[j + 0], point.y + numbers[j + 1], point.x + numbers[j + 2], point.y + numbers[j + 3]);\n              control.x = point.x + numbers[j + 0];\n              control.y = point.y + numbers[j + 1];\n              point.x += numbers[j + 2];\n              point.y += numbers[j + 3];\n              if (j === 0 && doSetFirstPoint === true) firstPoint.copy(point);\n            }\n            break;\n          case \"t\":\n            numbers = parseFloats(data2);\n            for (let j = 0, jl = numbers.length; j < jl; j += 2) {\n              const rx = getReflection(point.x, control.x);\n              const ry = getReflection(point.y, control.y);\n              path.quadraticCurveTo(rx, ry, point.x + numbers[j + 0], point.y + numbers[j + 1]);\n              control.x = rx;\n              control.y = ry;\n              point.x = point.x + numbers[j + 0];\n              point.y = point.y + numbers[j + 1];\n              if (j === 0 && doSetFirstPoint === true) firstPoint.copy(point);\n            }\n            break;\n          case \"a\":\n            numbers = parseFloats(data2, [3, 4], 7);\n            for (let j = 0, jl = numbers.length; j < jl; j += 7) {\n              if (numbers[j + 5] == 0 && numbers[j + 6] == 0) continue;\n              const start = point.clone();\n              point.x += numbers[j + 5];\n              point.y += numbers[j + 6];\n              control.x = point.x;\n              control.y = point.y;\n              parseArcCommand(path, numbers[j], numbers[j + 1], numbers[j + 2], numbers[j + 3], numbers[j + 4], start, point);\n              if (j === 0 && doSetFirstPoint === true) firstPoint.copy(point);\n            }\n            break;\n          case \"Z\":\n          case \"z\":\n            path.currentPath.autoClose = true;\n            if (path.currentPath.curves.length > 0) {\n              point.copy(firstPoint);\n              path.currentPath.currentPoint.copy(point);\n              isFirstPoint = true;\n            }\n            break;\n          default:\n            console.warn(command);\n        }\n        doSetFirstPoint = false;\n      }\n      return path;\n    }\n    function parseCSSStylesheet(node) {\n      if (!node.sheet || !node.sheet.cssRules || !node.sheet.cssRules.length) return;\n      for (let i = 0; i < node.sheet.cssRules.length; i++) {\n        const stylesheet = node.sheet.cssRules[i];\n        if (stylesheet.type !== 1) continue;\n        const selectorList = stylesheet.selectorText.split(/,/gm).filter(Boolean).map(i2 => i2.trim());\n        for (let j = 0; j < selectorList.length; j++) {\n          stylesheets[selectorList[j]] = Object.assign(stylesheets[selectorList[j]] || {}, stylesheet.style);\n        }\n      }\n    }\n    function parseArcCommand(path, rx, ry, x_axis_rotation, large_arc_flag, sweep_flag, start, end) {\n      if (rx == 0 || ry == 0) {\n        path.lineTo(end.x, end.y);\n        return;\n      }\n      x_axis_rotation = x_axis_rotation * Math.PI / 180;\n      rx = Math.abs(rx);\n      ry = Math.abs(ry);\n      const dx2 = (start.x - end.x) / 2;\n      const dy2 = (start.y - end.y) / 2;\n      const x1p = Math.cos(x_axis_rotation) * dx2 + Math.sin(x_axis_rotation) * dy2;\n      const y1p = -Math.sin(x_axis_rotation) * dx2 + Math.cos(x_axis_rotation) * dy2;\n      let rxs = rx * rx;\n      let rys = ry * ry;\n      const x1ps = x1p * x1p;\n      const y1ps = y1p * y1p;\n      const cr = x1ps / rxs + y1ps / rys;\n      if (cr > 1) {\n        const s = Math.sqrt(cr);\n        rx = s * rx;\n        ry = s * ry;\n        rxs = rx * rx;\n        rys = ry * ry;\n      }\n      const dq = rxs * y1ps + rys * x1ps;\n      const pq = (rxs * rys - dq) / dq;\n      let q = Math.sqrt(Math.max(0, pq));\n      if (large_arc_flag === sweep_flag) q = -q;\n      const cxp = q * rx * y1p / ry;\n      const cyp = -q * ry * x1p / rx;\n      const cx = Math.cos(x_axis_rotation) * cxp - Math.sin(x_axis_rotation) * cyp + (start.x + end.x) / 2;\n      const cy = Math.sin(x_axis_rotation) * cxp + Math.cos(x_axis_rotation) * cyp + (start.y + end.y) / 2;\n      const theta = svgAngle(1, 0, (x1p - cxp) / rx, (y1p - cyp) / ry);\n      const delta = svgAngle((x1p - cxp) / rx, (y1p - cyp) / ry, (-x1p - cxp) / rx, (-y1p - cyp) / ry) % (Math.PI * 2);\n      path.currentPath.absellipse(cx, cy, rx, ry, theta, theta + delta, sweep_flag === 0, x_axis_rotation);\n    }\n    function svgAngle(ux, uy, vx, vy) {\n      const dot = ux * vx + uy * vy;\n      const len = Math.sqrt(ux * ux + uy * uy) * Math.sqrt(vx * vx + vy * vy);\n      let ang = Math.acos(Math.max(-1, Math.min(1, dot / len)));\n      if (ux * vy - uy * vx < 0) ang = -ang;\n      return ang;\n    }\n    function parseRectNode(node) {\n      const x = parseFloatWithUnits(node.getAttribute(\"x\") || 0);\n      const y = parseFloatWithUnits(node.getAttribute(\"y\") || 0);\n      const rx = parseFloatWithUnits(node.getAttribute(\"rx\") || node.getAttribute(\"ry\") || 0);\n      const ry = parseFloatWithUnits(node.getAttribute(\"ry\") || node.getAttribute(\"rx\") || 0);\n      const w = parseFloatWithUnits(node.getAttribute(\"width\"));\n      const h = parseFloatWithUnits(node.getAttribute(\"height\"));\n      const bci = 1 - 0.551915024494;\n      const path = new ShapePath();\n      path.moveTo(x + rx, y);\n      path.lineTo(x + w - rx, y);\n      if (rx !== 0 || ry !== 0) {\n        path.bezierCurveTo(x + w - rx * bci, y, x + w, y + ry * bci, x + w, y + ry);\n      }\n      path.lineTo(x + w, y + h - ry);\n      if (rx !== 0 || ry !== 0) {\n        path.bezierCurveTo(x + w, y + h - ry * bci, x + w - rx * bci, y + h, x + w - rx, y + h);\n      }\n      path.lineTo(x + rx, y + h);\n      if (rx !== 0 || ry !== 0) {\n        path.bezierCurveTo(x + rx * bci, y + h, x, y + h - ry * bci, x, y + h - ry);\n      }\n      path.lineTo(x, y + ry);\n      if (rx !== 0 || ry !== 0) {\n        path.bezierCurveTo(x, y + ry * bci, x + rx * bci, y, x + rx, y);\n      }\n      return path;\n    }\n    function parsePolygonNode(node) {\n      function iterator(match, a, b) {\n        const x = parseFloatWithUnits(a);\n        const y = parseFloatWithUnits(b);\n        if (index === 0) {\n          path.moveTo(x, y);\n        } else {\n          path.lineTo(x, y);\n        }\n        index++;\n      }\n      const regex = /(-?[\\d\\.?]+)[,|\\s](-?[\\d\\.?]+)/g;\n      const path = new ShapePath();\n      let index = 0;\n      node.getAttribute(\"points\").replace(regex, iterator);\n      path.currentPath.autoClose = true;\n      return path;\n    }\n    function parsePolylineNode(node) {\n      function iterator(match, a, b) {\n        const x = parseFloatWithUnits(a);\n        const y = parseFloatWithUnits(b);\n        if (index === 0) {\n          path.moveTo(x, y);\n        } else {\n          path.lineTo(x, y);\n        }\n        index++;\n      }\n      const regex = /(-?[\\d\\.?]+)[,|\\s](-?[\\d\\.?]+)/g;\n      const path = new ShapePath();\n      let index = 0;\n      node.getAttribute(\"points\").replace(regex, iterator);\n      path.currentPath.autoClose = false;\n      return path;\n    }\n    function parseCircleNode(node) {\n      const x = parseFloatWithUnits(node.getAttribute(\"cx\") || 0);\n      const y = parseFloatWithUnits(node.getAttribute(\"cy\") || 0);\n      const r = parseFloatWithUnits(node.getAttribute(\"r\") || 0);\n      const subpath = new Path();\n      subpath.absarc(x, y, r, 0, Math.PI * 2);\n      const path = new ShapePath();\n      path.subPaths.push(subpath);\n      return path;\n    }\n    function parseEllipseNode(node) {\n      const x = parseFloatWithUnits(node.getAttribute(\"cx\") || 0);\n      const y = parseFloatWithUnits(node.getAttribute(\"cy\") || 0);\n      const rx = parseFloatWithUnits(node.getAttribute(\"rx\") || 0);\n      const ry = parseFloatWithUnits(node.getAttribute(\"ry\") || 0);\n      const subpath = new Path();\n      subpath.absellipse(x, y, rx, ry, 0, Math.PI * 2);\n      const path = new ShapePath();\n      path.subPaths.push(subpath);\n      return path;\n    }\n    function parseLineNode(node) {\n      const x1 = parseFloatWithUnits(node.getAttribute(\"x1\") || 0);\n      const y1 = parseFloatWithUnits(node.getAttribute(\"y1\") || 0);\n      const x2 = parseFloatWithUnits(node.getAttribute(\"x2\") || 0);\n      const y2 = parseFloatWithUnits(node.getAttribute(\"y2\") || 0);\n      const path = new ShapePath();\n      path.moveTo(x1, y1);\n      path.lineTo(x2, y2);\n      path.currentPath.autoClose = false;\n      return path;\n    }\n    function parseStyle(node, style) {\n      style = Object.assign({}, style);\n      let stylesheetStyles = {};\n      if (node.hasAttribute(\"class\")) {\n        const classSelectors = node.getAttribute(\"class\").split(/\\s/).filter(Boolean).map(i => i.trim());\n        for (let i = 0; i < classSelectors.length; i++) {\n          stylesheetStyles = Object.assign(stylesheetStyles, stylesheets[\".\" + classSelectors[i]]);\n        }\n      }\n      if (node.hasAttribute(\"id\")) {\n        stylesheetStyles = Object.assign(stylesheetStyles, stylesheets[\"#\" + node.getAttribute(\"id\")]);\n      }\n      function addStyle(svgName, jsName, adjustFunction) {\n        if (adjustFunction === void 0) {\n          adjustFunction = function copy(v) {\n            if (v.startsWith(\"url\")) console.warn(\"SVGLoader: url access in attributes is not implemented.\");\n            return v;\n          };\n        }\n        if (node.hasAttribute(svgName)) style[jsName] = adjustFunction(node.getAttribute(svgName));\n        if (stylesheetStyles[svgName]) style[jsName] = adjustFunction(stylesheetStyles[svgName]);\n        if (node.style && node.style[svgName] !== \"\") style[jsName] = adjustFunction(node.style[svgName]);\n      }\n      function clamp(v) {\n        return Math.max(0, Math.min(1, parseFloatWithUnits(v)));\n      }\n      function positive(v) {\n        return Math.max(0, parseFloatWithUnits(v));\n      }\n      addStyle(\"fill\", \"fill\");\n      addStyle(\"fill-opacity\", \"fillOpacity\", clamp);\n      addStyle(\"fill-rule\", \"fillRule\");\n      addStyle(\"opacity\", \"opacity\", clamp);\n      addStyle(\"stroke\", \"stroke\");\n      addStyle(\"stroke-opacity\", \"strokeOpacity\", clamp);\n      addStyle(\"stroke-width\", \"strokeWidth\", positive);\n      addStyle(\"stroke-linejoin\", \"strokeLineJoin\");\n      addStyle(\"stroke-linecap\", \"strokeLineCap\");\n      addStyle(\"stroke-miterlimit\", \"strokeMiterLimit\", positive);\n      addStyle(\"visibility\", \"visibility\");\n      return style;\n    }\n    function getReflection(a, b) {\n      return a - (b - a);\n    }\n    function parseFloats(input, flags, stride) {\n      if (typeof input !== \"string\") {\n        throw new TypeError(\"Invalid input: \" + typeof input);\n      }\n      const RE = {\n        SEPARATOR: /[ \\t\\r\\n\\,.\\-+]/,\n        WHITESPACE: /[ \\t\\r\\n]/,\n        DIGIT: /[\\d]/,\n        SIGN: /[-+]/,\n        POINT: /\\./,\n        COMMA: /,/,\n        EXP: /e/i,\n        FLAGS: /[01]/\n      };\n      const SEP = 0;\n      const INT = 1;\n      const FLOAT = 2;\n      const EXP = 3;\n      let state = SEP;\n      let seenComma = true;\n      let number = \"\",\n        exponent = \"\";\n      const result = [];\n      function throwSyntaxError(current2, i, partial) {\n        const error = new SyntaxError('Unexpected character \"' + current2 + '\" at index ' + i + \".\");\n        error.partial = partial;\n        throw error;\n      }\n      function newNumber() {\n        if (number !== \"\") {\n          if (exponent === \"\") result.push(Number(number));else result.push(Number(number) * Math.pow(10, Number(exponent)));\n        }\n        number = \"\";\n        exponent = \"\";\n      }\n      let current;\n      const length = input.length;\n      for (let i = 0; i < length; i++) {\n        current = input[i];\n        if (Array.isArray(flags) && flags.includes(result.length % stride) && RE.FLAGS.test(current)) {\n          state = INT;\n          number = current;\n          newNumber();\n          continue;\n        }\n        if (state === SEP) {\n          if (RE.WHITESPACE.test(current)) {\n            continue;\n          }\n          if (RE.DIGIT.test(current) || RE.SIGN.test(current)) {\n            state = INT;\n            number = current;\n            continue;\n          }\n          if (RE.POINT.test(current)) {\n            state = FLOAT;\n            number = current;\n            continue;\n          }\n          if (RE.COMMA.test(current)) {\n            if (seenComma) {\n              throwSyntaxError(current, i, result);\n            }\n            seenComma = true;\n          }\n        }\n        if (state === INT) {\n          if (RE.DIGIT.test(current)) {\n            number += current;\n            continue;\n          }\n          if (RE.POINT.test(current)) {\n            number += current;\n            state = FLOAT;\n            continue;\n          }\n          if (RE.EXP.test(current)) {\n            state = EXP;\n            continue;\n          }\n          if (RE.SIGN.test(current) && number.length === 1 && RE.SIGN.test(number[0])) {\n            throwSyntaxError(current, i, result);\n          }\n        }\n        if (state === FLOAT) {\n          if (RE.DIGIT.test(current)) {\n            number += current;\n            continue;\n          }\n          if (RE.EXP.test(current)) {\n            state = EXP;\n            continue;\n          }\n          if (RE.POINT.test(current) && number[number.length - 1] === \".\") {\n            throwSyntaxError(current, i, result);\n          }\n        }\n        if (state === EXP) {\n          if (RE.DIGIT.test(current)) {\n            exponent += current;\n            continue;\n          }\n          if (RE.SIGN.test(current)) {\n            if (exponent === \"\") {\n              exponent += current;\n              continue;\n            }\n            if (exponent.length === 1 && RE.SIGN.test(exponent)) {\n              throwSyntaxError(current, i, result);\n            }\n          }\n        }\n        if (RE.WHITESPACE.test(current)) {\n          newNumber();\n          state = SEP;\n          seenComma = false;\n        } else if (RE.COMMA.test(current)) {\n          newNumber();\n          state = SEP;\n          seenComma = true;\n        } else if (RE.SIGN.test(current)) {\n          newNumber();\n          state = INT;\n          number = current;\n        } else if (RE.POINT.test(current)) {\n          newNumber();\n          state = FLOAT;\n          number = current;\n        } else {\n          throwSyntaxError(current, i, result);\n        }\n      }\n      newNumber();\n      return result;\n    }\n    const units = [\"mm\", \"cm\", \"in\", \"pt\", \"pc\", \"px\"];\n    const unitConversion = {\n      mm: {\n        mm: 1,\n        cm: 0.1,\n        in: 1 / 25.4,\n        pt: 72 / 25.4,\n        pc: 6 / 25.4,\n        px: -1\n      },\n      cm: {\n        mm: 10,\n        cm: 1,\n        in: 1 / 2.54,\n        pt: 72 / 2.54,\n        pc: 6 / 2.54,\n        px: -1\n      },\n      in: {\n        mm: 25.4,\n        cm: 2.54,\n        in: 1,\n        pt: 72,\n        pc: 6,\n        px: -1\n      },\n      pt: {\n        mm: 25.4 / 72,\n        cm: 2.54 / 72,\n        in: 1 / 72,\n        pt: 1,\n        pc: 6 / 72,\n        px: -1\n      },\n      pc: {\n        mm: 25.4 / 6,\n        cm: 2.54 / 6,\n        in: 1 / 6,\n        pt: 72 / 6,\n        pc: 1,\n        px: -1\n      },\n      px: {\n        px: 1\n      }\n    };\n    function parseFloatWithUnits(string) {\n      let theUnit = \"px\";\n      if (typeof string === \"string\" || string instanceof String) {\n        for (let i = 0, n = units.length; i < n; i++) {\n          const u = units[i];\n          if (string.endsWith(u)) {\n            theUnit = u;\n            string = string.substring(0, string.length - u.length);\n            break;\n          }\n        }\n      }\n      let scale = void 0;\n      if (theUnit === \"px\" && scope.defaultUnit !== \"px\") {\n        scale = unitConversion[\"in\"][scope.defaultUnit] / scope.defaultDPI;\n      } else {\n        scale = unitConversion[theUnit][scope.defaultUnit];\n        if (scale < 0) {\n          scale = unitConversion[theUnit][\"in\"] * scope.defaultDPI;\n        }\n      }\n      return scale * parseFloat(string);\n    }\n    function getNodeTransform(node) {\n      if (!(node.hasAttribute(\"transform\") || node.nodeName === \"use\" && (node.hasAttribute(\"x\") || node.hasAttribute(\"y\")))) {\n        return null;\n      }\n      const transform = parseNodeTransform(node);\n      if (transformStack.length > 0) {\n        transform.premultiply(transformStack[transformStack.length - 1]);\n      }\n      currentTransform.copy(transform);\n      transformStack.push(transform);\n      return transform;\n    }\n    function parseNodeTransform(node) {\n      const transform = new Matrix3();\n      const currentTransform2 = tempTransform0;\n      if (node.nodeName === \"use\" && (node.hasAttribute(\"x\") || node.hasAttribute(\"y\"))) {\n        const tx = parseFloatWithUnits(node.getAttribute(\"x\"));\n        const ty = parseFloatWithUnits(node.getAttribute(\"y\"));\n        transform.translate(tx, ty);\n      }\n      if (node.hasAttribute(\"transform\")) {\n        const transformsTexts = node.getAttribute(\"transform\").split(\")\");\n        for (let tIndex = transformsTexts.length - 1; tIndex >= 0; tIndex--) {\n          const transformText = transformsTexts[tIndex].trim();\n          if (transformText === \"\") continue;\n          const openParPos = transformText.indexOf(\"(\");\n          const closeParPos = transformText.length;\n          if (openParPos > 0 && openParPos < closeParPos) {\n            const transformType = transformText.substr(0, openParPos);\n            const array = parseFloats(transformText.substr(openParPos + 1, closeParPos - openParPos - 1));\n            currentTransform2.identity();\n            switch (transformType) {\n              case \"translate\":\n                if (array.length >= 1) {\n                  const tx = array[0];\n                  let ty = tx;\n                  if (array.length >= 2) {\n                    ty = array[1];\n                  }\n                  currentTransform2.translate(tx, ty);\n                }\n                break;\n              case \"rotate\":\n                if (array.length >= 1) {\n                  let angle = 0;\n                  let cx = 0;\n                  let cy = 0;\n                  angle = -array[0] * Math.PI / 180;\n                  if (array.length >= 3) {\n                    cx = array[1];\n                    cy = array[2];\n                  }\n                  tempTransform1.identity().translate(-cx, -cy);\n                  tempTransform2.identity().rotate(angle);\n                  tempTransform3.multiplyMatrices(tempTransform2, tempTransform1);\n                  tempTransform1.identity().translate(cx, cy);\n                  currentTransform2.multiplyMatrices(tempTransform1, tempTransform3);\n                }\n                break;\n              case \"scale\":\n                if (array.length >= 1) {\n                  const scaleX = array[0];\n                  let scaleY = scaleX;\n                  if (array.length >= 2) {\n                    scaleY = array[1];\n                  }\n                  currentTransform2.scale(scaleX, scaleY);\n                }\n                break;\n              case \"skewX\":\n                if (array.length === 1) {\n                  currentTransform2.set(1, Math.tan(array[0] * Math.PI / 180), 0, 0, 1, 0, 0, 0, 1);\n                }\n                break;\n              case \"skewY\":\n                if (array.length === 1) {\n                  currentTransform2.set(1, 0, 0, Math.tan(array[0] * Math.PI / 180), 1, 0, 0, 0, 1);\n                }\n                break;\n              case \"matrix\":\n                if (array.length === 6) {\n                  currentTransform2.set(array[0], array[2], array[4], array[1], array[3], array[5], 0, 0, 1);\n                }\n                break;\n            }\n          }\n          transform.premultiply(currentTransform2);\n        }\n      }\n      return transform;\n    }\n    function transformPath(path, m) {\n      function transfVec2(v2) {\n        tempV3.set(v2.x, v2.y, 1).applyMatrix3(m);\n        v2.set(tempV3.x, tempV3.y);\n      }\n      const isRotated = isTransformRotated(m);\n      const subPaths = path.subPaths;\n      for (let i = 0, n = subPaths.length; i < n; i++) {\n        const subPath = subPaths[i];\n        const curves = subPath.curves;\n        for (let j = 0; j < curves.length; j++) {\n          const curve = curves[j];\n          if (curve.isLineCurve) {\n            transfVec2(curve.v1);\n            transfVec2(curve.v2);\n          } else if (curve.isCubicBezierCurve) {\n            transfVec2(curve.v0);\n            transfVec2(curve.v1);\n            transfVec2(curve.v2);\n            transfVec2(curve.v3);\n          } else if (curve.isQuadraticBezierCurve) {\n            transfVec2(curve.v0);\n            transfVec2(curve.v1);\n            transfVec2(curve.v2);\n          } else if (curve.isEllipseCurve) {\n            if (isRotated) {\n              console.warn(\"SVGLoader: Elliptic arc or ellipse rotation or skewing is not implemented.\");\n            }\n            tempV2.set(curve.aX, curve.aY);\n            transfVec2(tempV2);\n            curve.aX = tempV2.x;\n            curve.aY = tempV2.y;\n            curve.xRadius *= getTransformScaleX(m);\n            curve.yRadius *= getTransformScaleY(m);\n          }\n        }\n      }\n    }\n    function isTransformRotated(m) {\n      return m.elements[1] !== 0 || m.elements[3] !== 0;\n    }\n    function getTransformScaleX(m) {\n      const te = m.elements;\n      return Math.sqrt(te[0] * te[0] + te[1] * te[1]);\n    }\n    function getTransformScaleY(m) {\n      const te = m.elements;\n      return Math.sqrt(te[3] * te[3] + te[4] * te[4]);\n    }\n    const paths = [];\n    const stylesheets = {};\n    const transformStack = [];\n    const tempTransform0 = new Matrix3();\n    const tempTransform1 = new Matrix3();\n    const tempTransform2 = new Matrix3();\n    const tempTransform3 = new Matrix3();\n    const tempV2 = new Vector2();\n    const tempV3 = new Vector3();\n    const currentTransform = new Matrix3();\n    const xml = new DOMParser().parseFromString(text, \"image/svg+xml\");\n    parseNode(xml.documentElement, {\n      fill: \"#000\",\n      fillOpacity: 1,\n      strokeOpacity: 1,\n      strokeWidth: 1,\n      strokeLineJoin: \"miter\",\n      strokeLineCap: \"butt\",\n      strokeMiterLimit: 4\n    });\n    const data = {\n      paths,\n      xml: xml.documentElement\n    };\n    return data;\n  }\n  static createShapes(shapePath) {\n    const BIGNUMBER = 999999999;\n    const IntersectionLocationType = {\n      ORIGIN: 0,\n      DESTINATION: 1,\n      BETWEEN: 2,\n      LEFT: 3,\n      RIGHT: 4,\n      BEHIND: 5,\n      BEYOND: 6\n    };\n    const classifyResult = {\n      loc: IntersectionLocationType.ORIGIN,\n      t: 0\n    };\n    function findEdgeIntersection(a0, a1, b0, b1) {\n      const x1 = a0.x;\n      const x2 = a1.x;\n      const x3 = b0.x;\n      const x4 = b1.x;\n      const y1 = a0.y;\n      const y2 = a1.y;\n      const y3 = b0.y;\n      const y4 = b1.y;\n      const nom1 = (x4 - x3) * (y1 - y3) - (y4 - y3) * (x1 - x3);\n      const nom2 = (x2 - x1) * (y1 - y3) - (y2 - y1) * (x1 - x3);\n      const denom = (y4 - y3) * (x2 - x1) - (x4 - x3) * (y2 - y1);\n      const t1 = nom1 / denom;\n      const t2 = nom2 / denom;\n      if (denom === 0 && nom1 !== 0 || t1 <= 0 || t1 >= 1 || t2 < 0 || t2 > 1) {\n        return null;\n      } else if (nom1 === 0 && denom === 0) {\n        for (let i = 0; i < 2; i++) {\n          classifyPoint(i === 0 ? b0 : b1, a0, a1);\n          if (classifyResult.loc == IntersectionLocationType.ORIGIN) {\n            const point = i === 0 ? b0 : b1;\n            return {\n              x: point.x,\n              y: point.y,\n              t: classifyResult.t\n            };\n          } else if (classifyResult.loc == IntersectionLocationType.BETWEEN) {\n            const x = +(x1 + classifyResult.t * (x2 - x1)).toPrecision(10);\n            const y = +(y1 + classifyResult.t * (y2 - y1)).toPrecision(10);\n            return {\n              x,\n              y,\n              t: classifyResult.t\n            };\n          }\n        }\n        return null;\n      } else {\n        for (let i = 0; i < 2; i++) {\n          classifyPoint(i === 0 ? b0 : b1, a0, a1);\n          if (classifyResult.loc == IntersectionLocationType.ORIGIN) {\n            const point = i === 0 ? b0 : b1;\n            return {\n              x: point.x,\n              y: point.y,\n              t: classifyResult.t\n            };\n          }\n        }\n        const x = +(x1 + t1 * (x2 - x1)).toPrecision(10);\n        const y = +(y1 + t1 * (y2 - y1)).toPrecision(10);\n        return {\n          x,\n          y,\n          t: t1\n        };\n      }\n    }\n    function classifyPoint(p, edgeStart, edgeEnd) {\n      const ax = edgeEnd.x - edgeStart.x;\n      const ay = edgeEnd.y - edgeStart.y;\n      const bx = p.x - edgeStart.x;\n      const by = p.y - edgeStart.y;\n      const sa = ax * by - bx * ay;\n      if (p.x === edgeStart.x && p.y === edgeStart.y) {\n        classifyResult.loc = IntersectionLocationType.ORIGIN;\n        classifyResult.t = 0;\n        return;\n      }\n      if (p.x === edgeEnd.x && p.y === edgeEnd.y) {\n        classifyResult.loc = IntersectionLocationType.DESTINATION;\n        classifyResult.t = 1;\n        return;\n      }\n      if (sa < -Number.EPSILON) {\n        classifyResult.loc = IntersectionLocationType.LEFT;\n        return;\n      }\n      if (sa > Number.EPSILON) {\n        classifyResult.loc = IntersectionLocationType.RIGHT;\n        return;\n      }\n      if (ax * bx < 0 || ay * by < 0) {\n        classifyResult.loc = IntersectionLocationType.BEHIND;\n        return;\n      }\n      if (Math.sqrt(ax * ax + ay * ay) < Math.sqrt(bx * bx + by * by)) {\n        classifyResult.loc = IntersectionLocationType.BEYOND;\n        return;\n      }\n      let t;\n      if (ax !== 0) {\n        t = bx / ax;\n      } else {\n        t = by / ay;\n      }\n      classifyResult.loc = IntersectionLocationType.BETWEEN;\n      classifyResult.t = t;\n    }\n    function getIntersections(path1, path2) {\n      const intersectionsRaw = [];\n      const intersections = [];\n      for (let index = 1; index < path1.length; index++) {\n        const path1EdgeStart = path1[index - 1];\n        const path1EdgeEnd = path1[index];\n        for (let index2 = 1; index2 < path2.length; index2++) {\n          const path2EdgeStart = path2[index2 - 1];\n          const path2EdgeEnd = path2[index2];\n          const intersection = findEdgeIntersection(path1EdgeStart, path1EdgeEnd, path2EdgeStart, path2EdgeEnd);\n          if (intersection !== null && intersectionsRaw.find(i => i.t <= intersection.t + Number.EPSILON && i.t >= intersection.t - Number.EPSILON) === void 0) {\n            intersectionsRaw.push(intersection);\n            intersections.push(new Vector2(intersection.x, intersection.y));\n          }\n        }\n      }\n      return intersections;\n    }\n    function getScanlineIntersections(scanline, boundingBox, paths) {\n      const center = new Vector2();\n      boundingBox.getCenter(center);\n      const allIntersections = [];\n      paths.forEach(path => {\n        if (path.boundingBox.containsPoint(center)) {\n          const intersections = getIntersections(scanline, path.points);\n          intersections.forEach(p => {\n            allIntersections.push({\n              identifier: path.identifier,\n              isCW: path.isCW,\n              point: p\n            });\n          });\n        }\n      });\n      allIntersections.sort((i1, i2) => {\n        return i1.point.x - i2.point.x;\n      });\n      return allIntersections;\n    }\n    function isHoleTo(simplePath, allPaths, scanlineMinX2, scanlineMaxX2, _fillRule) {\n      if (_fillRule === null || _fillRule === void 0 || _fillRule === \"\") {\n        _fillRule = \"nonzero\";\n      }\n      const centerBoundingBox = new Vector2();\n      simplePath.boundingBox.getCenter(centerBoundingBox);\n      const scanline = [new Vector2(scanlineMinX2, centerBoundingBox.y), new Vector2(scanlineMaxX2, centerBoundingBox.y)];\n      const scanlineIntersections = getScanlineIntersections(scanline, simplePath.boundingBox, allPaths);\n      scanlineIntersections.sort((i1, i2) => {\n        return i1.point.x - i2.point.x;\n      });\n      const baseIntersections = [];\n      const otherIntersections = [];\n      scanlineIntersections.forEach(i2 => {\n        if (i2.identifier === simplePath.identifier) {\n          baseIntersections.push(i2);\n        } else {\n          otherIntersections.push(i2);\n        }\n      });\n      const firstXOfPath = baseIntersections[0].point.x;\n      const stack = [];\n      let i = 0;\n      while (i < otherIntersections.length && otherIntersections[i].point.x < firstXOfPath) {\n        if (stack.length > 0 && stack[stack.length - 1] === otherIntersections[i].identifier) {\n          stack.pop();\n        } else {\n          stack.push(otherIntersections[i].identifier);\n        }\n        i++;\n      }\n      stack.push(simplePath.identifier);\n      if (_fillRule === \"evenodd\") {\n        const isHole = stack.length % 2 === 0 ? true : false;\n        const isHoleFor = stack[stack.length - 2];\n        return {\n          identifier: simplePath.identifier,\n          isHole,\n          for: isHoleFor\n        };\n      } else if (_fillRule === \"nonzero\") {\n        let isHole = true;\n        let isHoleFor = null;\n        let lastCWValue = null;\n        for (let i2 = 0; i2 < stack.length; i2++) {\n          const identifier2 = stack[i2];\n          if (isHole) {\n            lastCWValue = allPaths[identifier2].isCW;\n            isHole = false;\n            isHoleFor = identifier2;\n          } else if (lastCWValue !== allPaths[identifier2].isCW) {\n            lastCWValue = allPaths[identifier2].isCW;\n            isHole = true;\n          }\n        }\n        return {\n          identifier: simplePath.identifier,\n          isHole,\n          for: isHoleFor\n        };\n      } else {\n        console.warn('fill-rule: \"' + _fillRule + '\" is currently not implemented.');\n      }\n    }\n    let identifier = 0;\n    let scanlineMinX = BIGNUMBER;\n    let scanlineMaxX = -BIGNUMBER;\n    let simplePaths = shapePath.subPaths.map(p => {\n      const points = p.getPoints();\n      let maxY = -BIGNUMBER;\n      let minY = BIGNUMBER;\n      let maxX = -BIGNUMBER;\n      let minX = BIGNUMBER;\n      for (let i = 0; i < points.length; i++) {\n        const p2 = points[i];\n        if (p2.y > maxY) {\n          maxY = p2.y;\n        }\n        if (p2.y < minY) {\n          minY = p2.y;\n        }\n        if (p2.x > maxX) {\n          maxX = p2.x;\n        }\n        if (p2.x < minX) {\n          minX = p2.x;\n        }\n      }\n      if (scanlineMaxX <= maxX) {\n        scanlineMaxX = maxX + 1;\n      }\n      if (scanlineMinX >= minX) {\n        scanlineMinX = minX - 1;\n      }\n      return {\n        curves: p.curves,\n        points,\n        isCW: ShapeUtils.isClockWise(points),\n        identifier: identifier++,\n        boundingBox: new Box2(new Vector2(minX, minY), new Vector2(maxX, maxY))\n      };\n    });\n    simplePaths = simplePaths.filter(sp => sp.points.length > 1);\n    const isAHole = simplePaths.map(p => isHoleTo(p, simplePaths, scanlineMinX, scanlineMaxX, shapePath.userData.style.fillRule));\n    const shapesToReturn = [];\n    simplePaths.forEach(p => {\n      const amIAHole = isAHole[p.identifier];\n      if (!amIAHole.isHole) {\n        const shape = new Shape();\n        shape.curves = p.curves;\n        const holes = isAHole.filter(h => h.isHole && h.for === p.identifier);\n        holes.forEach(h => {\n          const hole = simplePaths[h.identifier];\n          const path = new Path();\n          path.curves = hole.curves;\n          shape.holes.push(path);\n        });\n        shapesToReturn.push(shape);\n      }\n    });\n    return shapesToReturn;\n  }\n  static getStrokeStyle(width, color, lineJoin, lineCap, miterLimit) {\n    width = width !== void 0 ? width : 1;\n    color = color !== void 0 ? color : \"#000\";\n    lineJoin = lineJoin !== void 0 ? lineJoin : \"miter\";\n    lineCap = lineCap !== void 0 ? lineCap : \"butt\";\n    miterLimit = miterLimit !== void 0 ? miterLimit : 4;\n    return {\n      strokeColor: color,\n      strokeWidth: width,\n      strokeLineJoin: lineJoin,\n      strokeLineCap: lineCap,\n      strokeMiterLimit: miterLimit\n    };\n  }\n  static pointsToStroke(points, style, arcDivisions, minDistance) {\n    const vertices = [];\n    const normals = [];\n    const uvs = [];\n    if (SVGLoader.pointsToStrokeWithBuffers(points, style, arcDivisions, minDistance, vertices, normals, uvs) === 0) {\n      return null;\n    }\n    const geometry = new BufferGeometry();\n    geometry.setAttribute(\"position\", new Float32BufferAttribute(vertices, 3));\n    geometry.setAttribute(\"normal\", new Float32BufferAttribute(normals, 3));\n    geometry.setAttribute(\"uv\", new Float32BufferAttribute(uvs, 2));\n    return geometry;\n  }\n  static pointsToStrokeWithBuffers(points, style, arcDivisions, minDistance, vertices, normals, uvs, vertexOffset) {\n    const tempV2_1 = new Vector2();\n    const tempV2_2 = new Vector2();\n    const tempV2_3 = new Vector2();\n    const tempV2_4 = new Vector2();\n    const tempV2_5 = new Vector2();\n    const tempV2_6 = new Vector2();\n    const tempV2_7 = new Vector2();\n    const lastPointL = new Vector2();\n    const lastPointR = new Vector2();\n    const point0L = new Vector2();\n    const point0R = new Vector2();\n    const currentPointL = new Vector2();\n    const currentPointR = new Vector2();\n    const nextPointL = new Vector2();\n    const nextPointR = new Vector2();\n    const innerPoint = new Vector2();\n    const outerPoint = new Vector2();\n    arcDivisions = arcDivisions !== void 0 ? arcDivisions : 12;\n    minDistance = minDistance !== void 0 ? minDistance : 1e-3;\n    vertexOffset = vertexOffset !== void 0 ? vertexOffset : 0;\n    points = removeDuplicatedPoints(points);\n    const numPoints = points.length;\n    if (numPoints < 2) return 0;\n    const isClosed = points[0].equals(points[numPoints - 1]);\n    let currentPoint;\n    let previousPoint = points[0];\n    let nextPoint;\n    const strokeWidth2 = style.strokeWidth / 2;\n    const deltaU = 1 / (numPoints - 1);\n    let u0 = 0,\n      u1;\n    let innerSideModified;\n    let joinIsOnLeftSide;\n    let isMiter;\n    let initialJoinIsOnLeftSide = false;\n    let numVertices = 0;\n    let currentCoordinate = vertexOffset * 3;\n    let currentCoordinateUV = vertexOffset * 2;\n    getNormal(points[0], points[1], tempV2_1).multiplyScalar(strokeWidth2);\n    lastPointL.copy(points[0]).sub(tempV2_1);\n    lastPointR.copy(points[0]).add(tempV2_1);\n    point0L.copy(lastPointL);\n    point0R.copy(lastPointR);\n    for (let iPoint = 1; iPoint < numPoints; iPoint++) {\n      currentPoint = points[iPoint];\n      if (iPoint === numPoints - 1) {\n        if (isClosed) {\n          nextPoint = points[1];\n        } else {\n          nextPoint = void 0;\n        }\n      } else {\n        nextPoint = points[iPoint + 1];\n      }\n      const normal1 = tempV2_1;\n      getNormal(previousPoint, currentPoint, normal1);\n      tempV2_3.copy(normal1).multiplyScalar(strokeWidth2);\n      currentPointL.copy(currentPoint).sub(tempV2_3);\n      currentPointR.copy(currentPoint).add(tempV2_3);\n      u1 = u0 + deltaU;\n      innerSideModified = false;\n      if (nextPoint !== void 0) {\n        getNormal(currentPoint, nextPoint, tempV2_2);\n        tempV2_3.copy(tempV2_2).multiplyScalar(strokeWidth2);\n        nextPointL.copy(currentPoint).sub(tempV2_3);\n        nextPointR.copy(currentPoint).add(tempV2_3);\n        joinIsOnLeftSide = true;\n        tempV2_3.subVectors(nextPoint, previousPoint);\n        if (normal1.dot(tempV2_3) < 0) {\n          joinIsOnLeftSide = false;\n        }\n        if (iPoint === 1) initialJoinIsOnLeftSide = joinIsOnLeftSide;\n        tempV2_3.subVectors(nextPoint, currentPoint);\n        tempV2_3.normalize();\n        const dot = Math.abs(normal1.dot(tempV2_3));\n        if (dot !== 0) {\n          const miterSide = strokeWidth2 / dot;\n          tempV2_3.multiplyScalar(-miterSide);\n          tempV2_4.subVectors(currentPoint, previousPoint);\n          tempV2_5.copy(tempV2_4).setLength(miterSide).add(tempV2_3);\n          innerPoint.copy(tempV2_5).negate();\n          const miterLength2 = tempV2_5.length();\n          const segmentLengthPrev = tempV2_4.length();\n          tempV2_4.divideScalar(segmentLengthPrev);\n          tempV2_6.subVectors(nextPoint, currentPoint);\n          const segmentLengthNext = tempV2_6.length();\n          tempV2_6.divideScalar(segmentLengthNext);\n          if (tempV2_4.dot(innerPoint) < segmentLengthPrev && tempV2_6.dot(innerPoint) < segmentLengthNext) {\n            innerSideModified = true;\n          }\n          outerPoint.copy(tempV2_5).add(currentPoint);\n          innerPoint.add(currentPoint);\n          isMiter = false;\n          if (innerSideModified) {\n            if (joinIsOnLeftSide) {\n              nextPointR.copy(innerPoint);\n              currentPointR.copy(innerPoint);\n            } else {\n              nextPointL.copy(innerPoint);\n              currentPointL.copy(innerPoint);\n            }\n          } else {\n            makeSegmentTriangles();\n          }\n          switch (style.strokeLineJoin) {\n            case \"bevel\":\n              makeSegmentWithBevelJoin(joinIsOnLeftSide, innerSideModified, u1);\n              break;\n            case \"round\":\n              createSegmentTrianglesWithMiddleSection(joinIsOnLeftSide, innerSideModified);\n              if (joinIsOnLeftSide) {\n                makeCircularSector(currentPoint, currentPointL, nextPointL, u1, 0);\n              } else {\n                makeCircularSector(currentPoint, nextPointR, currentPointR, u1, 1);\n              }\n              break;\n            case \"miter\":\n            case \"miter-clip\":\n            default:\n              const miterFraction = strokeWidth2 * style.strokeMiterLimit / miterLength2;\n              if (miterFraction < 1) {\n                if (style.strokeLineJoin !== \"miter-clip\") {\n                  makeSegmentWithBevelJoin(joinIsOnLeftSide, innerSideModified, u1);\n                  break;\n                } else {\n                  createSegmentTrianglesWithMiddleSection(joinIsOnLeftSide, innerSideModified);\n                  if (joinIsOnLeftSide) {\n                    tempV2_6.subVectors(outerPoint, currentPointL).multiplyScalar(miterFraction).add(currentPointL);\n                    tempV2_7.subVectors(outerPoint, nextPointL).multiplyScalar(miterFraction).add(nextPointL);\n                    addVertex(currentPointL, u1, 0);\n                    addVertex(tempV2_6, u1, 0);\n                    addVertex(currentPoint, u1, 0.5);\n                    addVertex(currentPoint, u1, 0.5);\n                    addVertex(tempV2_6, u1, 0);\n                    addVertex(tempV2_7, u1, 0);\n                    addVertex(currentPoint, u1, 0.5);\n                    addVertex(tempV2_7, u1, 0);\n                    addVertex(nextPointL, u1, 0);\n                  } else {\n                    tempV2_6.subVectors(outerPoint, currentPointR).multiplyScalar(miterFraction).add(currentPointR);\n                    tempV2_7.subVectors(outerPoint, nextPointR).multiplyScalar(miterFraction).add(nextPointR);\n                    addVertex(currentPointR, u1, 1);\n                    addVertex(tempV2_6, u1, 1);\n                    addVertex(currentPoint, u1, 0.5);\n                    addVertex(currentPoint, u1, 0.5);\n                    addVertex(tempV2_6, u1, 1);\n                    addVertex(tempV2_7, u1, 1);\n                    addVertex(currentPoint, u1, 0.5);\n                    addVertex(tempV2_7, u1, 1);\n                    addVertex(nextPointR, u1, 1);\n                  }\n                }\n              } else {\n                if (innerSideModified) {\n                  if (joinIsOnLeftSide) {\n                    addVertex(lastPointR, u0, 1);\n                    addVertex(lastPointL, u0, 0);\n                    addVertex(outerPoint, u1, 0);\n                    addVertex(lastPointR, u0, 1);\n                    addVertex(outerPoint, u1, 0);\n                    addVertex(innerPoint, u1, 1);\n                  } else {\n                    addVertex(lastPointR, u0, 1);\n                    addVertex(lastPointL, u0, 0);\n                    addVertex(outerPoint, u1, 1);\n                    addVertex(lastPointL, u0, 0);\n                    addVertex(innerPoint, u1, 0);\n                    addVertex(outerPoint, u1, 1);\n                  }\n                  if (joinIsOnLeftSide) {\n                    nextPointL.copy(outerPoint);\n                  } else {\n                    nextPointR.copy(outerPoint);\n                  }\n                } else {\n                  if (joinIsOnLeftSide) {\n                    addVertex(currentPointL, u1, 0);\n                    addVertex(outerPoint, u1, 0);\n                    addVertex(currentPoint, u1, 0.5);\n                    addVertex(currentPoint, u1, 0.5);\n                    addVertex(outerPoint, u1, 0);\n                    addVertex(nextPointL, u1, 0);\n                  } else {\n                    addVertex(currentPointR, u1, 1);\n                    addVertex(outerPoint, u1, 1);\n                    addVertex(currentPoint, u1, 0.5);\n                    addVertex(currentPoint, u1, 0.5);\n                    addVertex(outerPoint, u1, 1);\n                    addVertex(nextPointR, u1, 1);\n                  }\n                }\n                isMiter = true;\n              }\n              break;\n          }\n        } else {\n          makeSegmentTriangles();\n        }\n      } else {\n        makeSegmentTriangles();\n      }\n      if (!isClosed && iPoint === numPoints - 1) {\n        addCapGeometry(points[0], point0L, point0R, joinIsOnLeftSide, true, u0);\n      }\n      u0 = u1;\n      previousPoint = currentPoint;\n      lastPointL.copy(nextPointL);\n      lastPointR.copy(nextPointR);\n    }\n    if (!isClosed) {\n      addCapGeometry(currentPoint, currentPointL, currentPointR, joinIsOnLeftSide, false, u1);\n    } else if (innerSideModified && vertices) {\n      let lastOuter = outerPoint;\n      let lastInner = innerPoint;\n      if (initialJoinIsOnLeftSide !== joinIsOnLeftSide) {\n        lastOuter = innerPoint;\n        lastInner = outerPoint;\n      }\n      if (joinIsOnLeftSide) {\n        if (isMiter || initialJoinIsOnLeftSide) {\n          lastInner.toArray(vertices, 0 * 3);\n          lastInner.toArray(vertices, 3 * 3);\n          if (isMiter) {\n            lastOuter.toArray(vertices, 1 * 3);\n          }\n        }\n      } else {\n        if (isMiter || !initialJoinIsOnLeftSide) {\n          lastInner.toArray(vertices, 1 * 3);\n          lastInner.toArray(vertices, 3 * 3);\n          if (isMiter) {\n            lastOuter.toArray(vertices, 0 * 3);\n          }\n        }\n      }\n    }\n    return numVertices;\n    function getNormal(p1, p2, result) {\n      result.subVectors(p2, p1);\n      return result.set(-result.y, result.x).normalize();\n    }\n    function addVertex(position, u, v) {\n      if (vertices) {\n        vertices[currentCoordinate] = position.x;\n        vertices[currentCoordinate + 1] = position.y;\n        vertices[currentCoordinate + 2] = 0;\n        if (normals) {\n          normals[currentCoordinate] = 0;\n          normals[currentCoordinate + 1] = 0;\n          normals[currentCoordinate + 2] = 1;\n        }\n        currentCoordinate += 3;\n        if (uvs) {\n          uvs[currentCoordinateUV] = u;\n          uvs[currentCoordinateUV + 1] = v;\n          currentCoordinateUV += 2;\n        }\n      }\n      numVertices += 3;\n    }\n    function makeCircularSector(center, p1, p2, u, v) {\n      tempV2_1.copy(p1).sub(center).normalize();\n      tempV2_2.copy(p2).sub(center).normalize();\n      let angle = Math.PI;\n      const dot = tempV2_1.dot(tempV2_2);\n      if (Math.abs(dot) < 1) angle = Math.abs(Math.acos(dot));\n      angle /= arcDivisions;\n      tempV2_3.copy(p1);\n      for (let i = 0, il = arcDivisions - 1; i < il; i++) {\n        tempV2_4.copy(tempV2_3).rotateAround(center, angle);\n        addVertex(tempV2_3, u, v);\n        addVertex(tempV2_4, u, v);\n        addVertex(center, u, 0.5);\n        tempV2_3.copy(tempV2_4);\n      }\n      addVertex(tempV2_4, u, v);\n      addVertex(p2, u, v);\n      addVertex(center, u, 0.5);\n    }\n    function makeSegmentTriangles() {\n      addVertex(lastPointR, u0, 1);\n      addVertex(lastPointL, u0, 0);\n      addVertex(currentPointL, u1, 0);\n      addVertex(lastPointR, u0, 1);\n      addVertex(currentPointL, u1, 1);\n      addVertex(currentPointR, u1, 0);\n    }\n    function makeSegmentWithBevelJoin(joinIsOnLeftSide2, innerSideModified2, u) {\n      if (innerSideModified2) {\n        if (joinIsOnLeftSide2) {\n          addVertex(lastPointR, u0, 1);\n          addVertex(lastPointL, u0, 0);\n          addVertex(currentPointL, u1, 0);\n          addVertex(lastPointR, u0, 1);\n          addVertex(currentPointL, u1, 0);\n          addVertex(innerPoint, u1, 1);\n          addVertex(currentPointL, u, 0);\n          addVertex(nextPointL, u, 0);\n          addVertex(innerPoint, u, 0.5);\n        } else {\n          addVertex(lastPointR, u0, 1);\n          addVertex(lastPointL, u0, 0);\n          addVertex(currentPointR, u1, 1);\n          addVertex(lastPointL, u0, 0);\n          addVertex(innerPoint, u1, 0);\n          addVertex(currentPointR, u1, 1);\n          addVertex(currentPointR, u, 1);\n          addVertex(nextPointR, u, 0);\n          addVertex(innerPoint, u, 0.5);\n        }\n      } else {\n        if (joinIsOnLeftSide2) {\n          addVertex(currentPointL, u, 0);\n          addVertex(nextPointL, u, 0);\n          addVertex(currentPoint, u, 0.5);\n        } else {\n          addVertex(currentPointR, u, 1);\n          addVertex(nextPointR, u, 0);\n          addVertex(currentPoint, u, 0.5);\n        }\n      }\n    }\n    function createSegmentTrianglesWithMiddleSection(joinIsOnLeftSide2, innerSideModified2) {\n      if (innerSideModified2) {\n        if (joinIsOnLeftSide2) {\n          addVertex(lastPointR, u0, 1);\n          addVertex(lastPointL, u0, 0);\n          addVertex(currentPointL, u1, 0);\n          addVertex(lastPointR, u0, 1);\n          addVertex(currentPointL, u1, 0);\n          addVertex(innerPoint, u1, 1);\n          addVertex(currentPointL, u0, 0);\n          addVertex(currentPoint, u1, 0.5);\n          addVertex(innerPoint, u1, 1);\n          addVertex(currentPoint, u1, 0.5);\n          addVertex(nextPointL, u0, 0);\n          addVertex(innerPoint, u1, 1);\n        } else {\n          addVertex(lastPointR, u0, 1);\n          addVertex(lastPointL, u0, 0);\n          addVertex(currentPointR, u1, 1);\n          addVertex(lastPointL, u0, 0);\n          addVertex(innerPoint, u1, 0);\n          addVertex(currentPointR, u1, 1);\n          addVertex(currentPointR, u0, 1);\n          addVertex(innerPoint, u1, 0);\n          addVertex(currentPoint, u1, 0.5);\n          addVertex(currentPoint, u1, 0.5);\n          addVertex(innerPoint, u1, 0);\n          addVertex(nextPointR, u0, 1);\n        }\n      }\n    }\n    function addCapGeometry(center, p1, p2, joinIsOnLeftSide2, start, u) {\n      switch (style.strokeLineCap) {\n        case \"round\":\n          if (start) {\n            makeCircularSector(center, p2, p1, u, 0.5);\n          } else {\n            makeCircularSector(center, p1, p2, u, 0.5);\n          }\n          break;\n        case \"square\":\n          if (start) {\n            tempV2_1.subVectors(p1, center);\n            tempV2_2.set(tempV2_1.y, -tempV2_1.x);\n            tempV2_3.addVectors(tempV2_1, tempV2_2).add(center);\n            tempV2_4.subVectors(tempV2_2, tempV2_1).add(center);\n            if (joinIsOnLeftSide2) {\n              tempV2_3.toArray(vertices, 1 * 3);\n              tempV2_4.toArray(vertices, 0 * 3);\n              tempV2_4.toArray(vertices, 3 * 3);\n            } else {\n              tempV2_3.toArray(vertices, 1 * 3);\n              tempV2_3.toArray(vertices, 3 * 3);\n              tempV2_4.toArray(vertices, 0 * 3);\n            }\n          } else {\n            tempV2_1.subVectors(p2, center);\n            tempV2_2.set(tempV2_1.y, -tempV2_1.x);\n            tempV2_3.addVectors(tempV2_1, tempV2_2).add(center);\n            tempV2_4.subVectors(tempV2_2, tempV2_1).add(center);\n            const vl = vertices.length;\n            if (joinIsOnLeftSide2) {\n              tempV2_3.toArray(vertices, vl - 1 * 3);\n              tempV2_4.toArray(vertices, vl - 2 * 3);\n              tempV2_4.toArray(vertices, vl - 4 * 3);\n            } else {\n              tempV2_3.toArray(vertices, vl - 2 * 3);\n              tempV2_4.toArray(vertices, vl - 1 * 3);\n              tempV2_4.toArray(vertices, vl - 4 * 3);\n            }\n          }\n          break;\n        case \"butt\":\n        default:\n          break;\n      }\n    }\n    function removeDuplicatedPoints(points2) {\n      let dupPoints = false;\n      for (let i = 1, n = points2.length - 1; i < n; i++) {\n        if (points2[i].distanceTo(points2[i + 1]) < minDistance) {\n          dupPoints = true;\n          break;\n        }\n      }\n      if (!dupPoints) return points2;\n      const newPoints = [];\n      newPoints.push(points2[0]);\n      for (let i = 1, n = points2.length - 1; i < n; i++) {\n        if (points2[i].distanceTo(points2[i + 1]) >= minDistance) {\n          newPoints.push(points2[i]);\n        }\n      }\n      newPoints.push(points2[points2.length - 1]);\n      return newPoints;\n    }\n  }\n}\nexport { SVGLoader };","map":{"version":3,"names":["Loader","FileLoader","ShapePath","Vector2","Path","Matrix3","Vector3","ShapeUtils","Box2","Shape","BufferGeometry","Float32BufferAttribute","SVGLoader","constructor","manager","defaultDPI","defaultUnit","load","url","onLoad","onProgress","onError","scope","loader","setPath","path","setRequestHeader","requestHeader","setWithCredentials","withCredentials","text","parse","e","console","error","itemError","parseNode","node","style","nodeType","transform","getNodeTransform","traverseChildNodes","nodeName","parseCSSStylesheet","parseStyle","hasAttribute","parsePathNode","parseRectNode","parsePolygonNode","parsePolylineNode","parseCircleNode","parseEllipseNode","parseLineNode","usedNodeId","href","baseVal","substring","usedNode","viewportElement","getElementById","warn","fill","color","setStyle","transformPath","currentTransform","paths","push","userData","nodes","childNodes","i","length","transformStack","pop","copy","identity","point","control","firstPoint","isFirstPoint","doSetFirstPoint","d","getAttribute","commands","match","l","command","type","charAt","data2","substr","trim","numbers","parseFloats","j","jl","x","y","moveTo","lineTo","bezierCurveTo","getReflection","quadraticCurveTo","rx","ry","start","clone","parseArcCommand","currentPath","autoClose","curves","currentPoint","sheet","cssRules","stylesheet","selectorList","selectorText","split","filter","Boolean","map","i2","stylesheets","Object","assign","x_axis_rotation","large_arc_flag","sweep_flag","end","Math","PI","abs","dx2","dy2","x1p","cos","sin","y1p","rxs","rys","x1ps","y1ps","cr","s","sqrt","dq","pq","q","max","cxp","cyp","cx","cy","theta","svgAngle","delta","absellipse","ux","uy","vx","vy","dot","len","ang","acos","min","parseFloatWithUnits","w","h","bci","iterator","a","b","index","regex","replace","r","subpath","absarc","subPaths","x1","y1","x2","y2","stylesheetStyles","classSelectors","addStyle","svgName","jsName","adjustFunction","v","startsWith","clamp","positive","input","flags","stride","TypeError","RE","SEPARATOR","WHITESPACE","DIGIT","SIGN","POINT","COMMA","EXP","FLAGS","SEP","INT","FLOAT","state","seenComma","number","exponent","result","throwSyntaxError","current2","partial","SyntaxError","newNumber","Number","pow","current","Array","isArray","includes","test","units","unitConversion","mm","cm","in","pt","pc","px","string","theUnit","String","n","u","endsWith","scale","parseFloat","parseNodeTransform","premultiply","currentTransform2","tempTransform0","tx","ty","translate","transformsTexts","tIndex","transformText","openParPos","indexOf","closeParPos","transformType","array","angle","tempTransform1","tempTransform2","rotate","tempTransform3","multiplyMatrices","scaleX","scaleY","set","tan","m","transfVec2","v2","tempV3","applyMatrix3","isRotated","isTransformRotated","subPath","curve","isLineCurve","v1","isCubicBezierCurve","v0","v3","isQuadraticBezierCurve","isEllipseCurve","tempV2","aX","aY","xRadius","getTransformScaleX","yRadius","getTransformScaleY","elements","te","xml","DOMParser","parseFromString","documentElement","fillOpacity","strokeOpacity","strokeWidth","strokeLineJoin","strokeLineCap","strokeMiterLimit","data","createShapes","shapePath","BIGNUMBER","IntersectionLocationType","ORIGIN","DESTINATION","BETWEEN","LEFT","RIGHT","BEHIND","BEYOND","classifyResult","loc","t","findEdgeIntersection","a0","a1","b0","b1","x3","x4","y3","y4","nom1","nom2","denom","t1","t2","classifyPoint","toPrecision","p","edgeStart","edgeEnd","ax","ay","bx","by","sa","EPSILON","getIntersections","path1","path2","intersectionsRaw","intersections","path1EdgeStart","path1EdgeEnd","index2","path2EdgeStart","path2EdgeEnd","intersection","find","getScanlineIntersections","scanline","boundingBox","center","getCenter","allIntersections","forEach","containsPoint","points","identifier","isCW","sort","i1","isHoleTo","simplePath","allPaths","scanlineMinX2","scanlineMaxX2","_fillRule","centerBoundingBox","scanlineIntersections","baseIntersections","otherIntersections","firstXOfPath","stack","isHole","isHoleFor","for","lastCWValue","identifier2","scanlineMinX","scanlineMaxX","simplePaths","getPoints","maxY","minY","maxX","minX","p2","isClockWise","sp","isAHole","fillRule","shapesToReturn","amIAHole","shape","holes","hole","getStrokeStyle","width","lineJoin","lineCap","miterLimit","strokeColor","pointsToStroke","arcDivisions","minDistance","vertices","normals","uvs","pointsToStrokeWithBuffers","geometry","setAttribute","vertexOffset","tempV2_1","tempV2_2","tempV2_3","tempV2_4","tempV2_5","tempV2_6","tempV2_7","lastPointL","lastPointR","point0L","point0R","currentPointL","currentPointR","nextPointL","nextPointR","innerPoint","outerPoint","removeDuplicatedPoints","numPoints","isClosed","equals","previousPoint","nextPoint","strokeWidth2","deltaU","u0","u1","innerSideModified","joinIsOnLeftSide","isMiter","initialJoinIsOnLeftSide","numVertices","currentCoordinate","currentCoordinateUV","getNormal","multiplyScalar","sub","add","iPoint","normal1","subVectors","normalize","miterSide","setLength","negate","miterLength2","segmentLengthPrev","divideScalar","segmentLengthNext","makeSegmentTriangles","makeSegmentWithBevelJoin","createSegmentTrianglesWithMiddleSection","makeCircularSector","miterFraction","addVertex","addCapGeometry","lastOuter","lastInner","toArray","p1","position","il","rotateAround","joinIsOnLeftSide2","innerSideModified2","addVectors","vl","points2","dupPoints","distanceTo","newPoints"],"sources":["/home/krug/Coding/JavaScript/Websites/Personal/personal/node_modules/.pnpm/three-stdlib@2.23.7_three@0.151.3/node_modules/three-stdlib/loaders/SVGLoader.js"],"sourcesContent":["import { Loader, FileLoader, ShapePath, Vector2, Path, Matrix3, Vector3, ShapeUtils, Box2, Shape, BufferGeometry, Float32BufferAttribute } from \"three\";\nclass SVGLoader extends Loader {\n  constructor(manager) {\n    super(manager);\n    this.defaultDPI = 90;\n    this.defaultUnit = \"px\";\n  }\n  load(url, onLoad, onProgress, onError) {\n    const scope = this;\n    const loader = new FileLoader(scope.manager);\n    loader.setPath(scope.path);\n    loader.setRequestHeader(scope.requestHeader);\n    loader.setWithCredentials(scope.withCredentials);\n    loader.load(\n      url,\n      function(text) {\n        try {\n          onLoad(scope.parse(text));\n        } catch (e) {\n          if (onError) {\n            onError(e);\n          } else {\n            console.error(e);\n          }\n          scope.manager.itemError(url);\n        }\n      },\n      onProgress,\n      onError\n    );\n  }\n  parse(text) {\n    const scope = this;\n    function parseNode(node, style) {\n      if (node.nodeType !== 1)\n        return;\n      const transform = getNodeTransform(node);\n      let traverseChildNodes = true;\n      let path = null;\n      switch (node.nodeName) {\n        case \"svg\":\n          break;\n        case \"style\":\n          parseCSSStylesheet(node);\n          break;\n        case \"g\":\n          style = parseStyle(node, style);\n          break;\n        case \"path\":\n          style = parseStyle(node, style);\n          if (node.hasAttribute(\"d\"))\n            path = parsePathNode(node);\n          break;\n        case \"rect\":\n          style = parseStyle(node, style);\n          path = parseRectNode(node);\n          break;\n        case \"polygon\":\n          style = parseStyle(node, style);\n          path = parsePolygonNode(node);\n          break;\n        case \"polyline\":\n          style = parseStyle(node, style);\n          path = parsePolylineNode(node);\n          break;\n        case \"circle\":\n          style = parseStyle(node, style);\n          path = parseCircleNode(node);\n          break;\n        case \"ellipse\":\n          style = parseStyle(node, style);\n          path = parseEllipseNode(node);\n          break;\n        case \"line\":\n          style = parseStyle(node, style);\n          path = parseLineNode(node);\n          break;\n        case \"defs\":\n          traverseChildNodes = false;\n          break;\n        case \"mask\":\n          traverseChildNodes = false;\n          break;\n        case \"use\":\n          style = parseStyle(node, style);\n          const usedNodeId = node.href.baseVal.substring(1);\n          const usedNode = node.viewportElement.getElementById(usedNodeId);\n          if (usedNode) {\n            parseNode(usedNode, style);\n          } else {\n            console.warn(\"SVGLoader: 'use node' references non-existent node id: \" + usedNodeId);\n          }\n          break;\n        default:\n      }\n      if (path) {\n        if (style.fill !== void 0 && style.fill !== \"none\") {\n          path.color.setStyle(style.fill);\n        }\n        transformPath(path, currentTransform);\n        paths.push(path);\n        path.userData = { node, style };\n      }\n      if (traverseChildNodes) {\n        const nodes = node.childNodes;\n        for (let i = 0; i < nodes.length; i++) {\n          parseNode(nodes[i], style);\n        }\n      }\n      if (transform) {\n        transformStack.pop();\n        if (transformStack.length > 0) {\n          currentTransform.copy(transformStack[transformStack.length - 1]);\n        } else {\n          currentTransform.identity();\n        }\n      }\n    }\n    function parsePathNode(node) {\n      const path = new ShapePath();\n      const point = new Vector2();\n      const control = new Vector2();\n      const firstPoint = new Vector2();\n      let isFirstPoint = true;\n      let doSetFirstPoint = false;\n      const d = node.getAttribute(\"d\");\n      const commands = d.match(/[a-df-z][^a-df-z]*/gi);\n      for (let i = 0, l = commands.length; i < l; i++) {\n        const command = commands[i];\n        const type = command.charAt(0);\n        const data2 = command.substr(1).trim();\n        if (isFirstPoint === true) {\n          doSetFirstPoint = true;\n          isFirstPoint = false;\n        }\n        let numbers;\n        switch (type) {\n          case \"M\":\n            numbers = parseFloats(data2);\n            for (let j = 0, jl = numbers.length; j < jl; j += 2) {\n              point.x = numbers[j + 0];\n              point.y = numbers[j + 1];\n              control.x = point.x;\n              control.y = point.y;\n              if (j === 0) {\n                path.moveTo(point.x, point.y);\n              } else {\n                path.lineTo(point.x, point.y);\n              }\n              if (j === 0)\n                firstPoint.copy(point);\n            }\n            break;\n          case \"H\":\n            numbers = parseFloats(data2);\n            for (let j = 0, jl = numbers.length; j < jl; j++) {\n              point.x = numbers[j];\n              control.x = point.x;\n              control.y = point.y;\n              path.lineTo(point.x, point.y);\n              if (j === 0 && doSetFirstPoint === true)\n                firstPoint.copy(point);\n            }\n            break;\n          case \"V\":\n            numbers = parseFloats(data2);\n            for (let j = 0, jl = numbers.length; j < jl; j++) {\n              point.y = numbers[j];\n              control.x = point.x;\n              control.y = point.y;\n              path.lineTo(point.x, point.y);\n              if (j === 0 && doSetFirstPoint === true)\n                firstPoint.copy(point);\n            }\n            break;\n          case \"L\":\n            numbers = parseFloats(data2);\n            for (let j = 0, jl = numbers.length; j < jl; j += 2) {\n              point.x = numbers[j + 0];\n              point.y = numbers[j + 1];\n              control.x = point.x;\n              control.y = point.y;\n              path.lineTo(point.x, point.y);\n              if (j === 0 && doSetFirstPoint === true)\n                firstPoint.copy(point);\n            }\n            break;\n          case \"C\":\n            numbers = parseFloats(data2);\n            for (let j = 0, jl = numbers.length; j < jl; j += 6) {\n              path.bezierCurveTo(\n                numbers[j + 0],\n                numbers[j + 1],\n                numbers[j + 2],\n                numbers[j + 3],\n                numbers[j + 4],\n                numbers[j + 5]\n              );\n              control.x = numbers[j + 2];\n              control.y = numbers[j + 3];\n              point.x = numbers[j + 4];\n              point.y = numbers[j + 5];\n              if (j === 0 && doSetFirstPoint === true)\n                firstPoint.copy(point);\n            }\n            break;\n          case \"S\":\n            numbers = parseFloats(data2);\n            for (let j = 0, jl = numbers.length; j < jl; j += 4) {\n              path.bezierCurveTo(\n                getReflection(point.x, control.x),\n                getReflection(point.y, control.y),\n                numbers[j + 0],\n                numbers[j + 1],\n                numbers[j + 2],\n                numbers[j + 3]\n              );\n              control.x = numbers[j + 0];\n              control.y = numbers[j + 1];\n              point.x = numbers[j + 2];\n              point.y = numbers[j + 3];\n              if (j === 0 && doSetFirstPoint === true)\n                firstPoint.copy(point);\n            }\n            break;\n          case \"Q\":\n            numbers = parseFloats(data2);\n            for (let j = 0, jl = numbers.length; j < jl; j += 4) {\n              path.quadraticCurveTo(numbers[j + 0], numbers[j + 1], numbers[j + 2], numbers[j + 3]);\n              control.x = numbers[j + 0];\n              control.y = numbers[j + 1];\n              point.x = numbers[j + 2];\n              point.y = numbers[j + 3];\n              if (j === 0 && doSetFirstPoint === true)\n                firstPoint.copy(point);\n            }\n            break;\n          case \"T\":\n            numbers = parseFloats(data2);\n            for (let j = 0, jl = numbers.length; j < jl; j += 2) {\n              const rx = getReflection(point.x, control.x);\n              const ry = getReflection(point.y, control.y);\n              path.quadraticCurveTo(rx, ry, numbers[j + 0], numbers[j + 1]);\n              control.x = rx;\n              control.y = ry;\n              point.x = numbers[j + 0];\n              point.y = numbers[j + 1];\n              if (j === 0 && doSetFirstPoint === true)\n                firstPoint.copy(point);\n            }\n            break;\n          case \"A\":\n            numbers = parseFloats(data2, [3, 4], 7);\n            for (let j = 0, jl = numbers.length; j < jl; j += 7) {\n              if (numbers[j + 5] == point.x && numbers[j + 6] == point.y)\n                continue;\n              const start = point.clone();\n              point.x = numbers[j + 5];\n              point.y = numbers[j + 6];\n              control.x = point.x;\n              control.y = point.y;\n              parseArcCommand(\n                path,\n                numbers[j],\n                numbers[j + 1],\n                numbers[j + 2],\n                numbers[j + 3],\n                numbers[j + 4],\n                start,\n                point\n              );\n              if (j === 0 && doSetFirstPoint === true)\n                firstPoint.copy(point);\n            }\n            break;\n          case \"m\":\n            numbers = parseFloats(data2);\n            for (let j = 0, jl = numbers.length; j < jl; j += 2) {\n              point.x += numbers[j + 0];\n              point.y += numbers[j + 1];\n              control.x = point.x;\n              control.y = point.y;\n              if (j === 0) {\n                path.moveTo(point.x, point.y);\n              } else {\n                path.lineTo(point.x, point.y);\n              }\n              if (j === 0)\n                firstPoint.copy(point);\n            }\n            break;\n          case \"h\":\n            numbers = parseFloats(data2);\n            for (let j = 0, jl = numbers.length; j < jl; j++) {\n              point.x += numbers[j];\n              control.x = point.x;\n              control.y = point.y;\n              path.lineTo(point.x, point.y);\n              if (j === 0 && doSetFirstPoint === true)\n                firstPoint.copy(point);\n            }\n            break;\n          case \"v\":\n            numbers = parseFloats(data2);\n            for (let j = 0, jl = numbers.length; j < jl; j++) {\n              point.y += numbers[j];\n              control.x = point.x;\n              control.y = point.y;\n              path.lineTo(point.x, point.y);\n              if (j === 0 && doSetFirstPoint === true)\n                firstPoint.copy(point);\n            }\n            break;\n          case \"l\":\n            numbers = parseFloats(data2);\n            for (let j = 0, jl = numbers.length; j < jl; j += 2) {\n              point.x += numbers[j + 0];\n              point.y += numbers[j + 1];\n              control.x = point.x;\n              control.y = point.y;\n              path.lineTo(point.x, point.y);\n              if (j === 0 && doSetFirstPoint === true)\n                firstPoint.copy(point);\n            }\n            break;\n          case \"c\":\n            numbers = parseFloats(data2);\n            for (let j = 0, jl = numbers.length; j < jl; j += 6) {\n              path.bezierCurveTo(\n                point.x + numbers[j + 0],\n                point.y + numbers[j + 1],\n                point.x + numbers[j + 2],\n                point.y + numbers[j + 3],\n                point.x + numbers[j + 4],\n                point.y + numbers[j + 5]\n              );\n              control.x = point.x + numbers[j + 2];\n              control.y = point.y + numbers[j + 3];\n              point.x += numbers[j + 4];\n              point.y += numbers[j + 5];\n              if (j === 0 && doSetFirstPoint === true)\n                firstPoint.copy(point);\n            }\n            break;\n          case \"s\":\n            numbers = parseFloats(data2);\n            for (let j = 0, jl = numbers.length; j < jl; j += 4) {\n              path.bezierCurveTo(\n                getReflection(point.x, control.x),\n                getReflection(point.y, control.y),\n                point.x + numbers[j + 0],\n                point.y + numbers[j + 1],\n                point.x + numbers[j + 2],\n                point.y + numbers[j + 3]\n              );\n              control.x = point.x + numbers[j + 0];\n              control.y = point.y + numbers[j + 1];\n              point.x += numbers[j + 2];\n              point.y += numbers[j + 3];\n              if (j === 0 && doSetFirstPoint === true)\n                firstPoint.copy(point);\n            }\n            break;\n          case \"q\":\n            numbers = parseFloats(data2);\n            for (let j = 0, jl = numbers.length; j < jl; j += 4) {\n              path.quadraticCurveTo(\n                point.x + numbers[j + 0],\n                point.y + numbers[j + 1],\n                point.x + numbers[j + 2],\n                point.y + numbers[j + 3]\n              );\n              control.x = point.x + numbers[j + 0];\n              control.y = point.y + numbers[j + 1];\n              point.x += numbers[j + 2];\n              point.y += numbers[j + 3];\n              if (j === 0 && doSetFirstPoint === true)\n                firstPoint.copy(point);\n            }\n            break;\n          case \"t\":\n            numbers = parseFloats(data2);\n            for (let j = 0, jl = numbers.length; j < jl; j += 2) {\n              const rx = getReflection(point.x, control.x);\n              const ry = getReflection(point.y, control.y);\n              path.quadraticCurveTo(rx, ry, point.x + numbers[j + 0], point.y + numbers[j + 1]);\n              control.x = rx;\n              control.y = ry;\n              point.x = point.x + numbers[j + 0];\n              point.y = point.y + numbers[j + 1];\n              if (j === 0 && doSetFirstPoint === true)\n                firstPoint.copy(point);\n            }\n            break;\n          case \"a\":\n            numbers = parseFloats(data2, [3, 4], 7);\n            for (let j = 0, jl = numbers.length; j < jl; j += 7) {\n              if (numbers[j + 5] == 0 && numbers[j + 6] == 0)\n                continue;\n              const start = point.clone();\n              point.x += numbers[j + 5];\n              point.y += numbers[j + 6];\n              control.x = point.x;\n              control.y = point.y;\n              parseArcCommand(\n                path,\n                numbers[j],\n                numbers[j + 1],\n                numbers[j + 2],\n                numbers[j + 3],\n                numbers[j + 4],\n                start,\n                point\n              );\n              if (j === 0 && doSetFirstPoint === true)\n                firstPoint.copy(point);\n            }\n            break;\n          case \"Z\":\n          case \"z\":\n            path.currentPath.autoClose = true;\n            if (path.currentPath.curves.length > 0) {\n              point.copy(firstPoint);\n              path.currentPath.currentPoint.copy(point);\n              isFirstPoint = true;\n            }\n            break;\n          default:\n            console.warn(command);\n        }\n        doSetFirstPoint = false;\n      }\n      return path;\n    }\n    function parseCSSStylesheet(node) {\n      if (!node.sheet || !node.sheet.cssRules || !node.sheet.cssRules.length)\n        return;\n      for (let i = 0; i < node.sheet.cssRules.length; i++) {\n        const stylesheet = node.sheet.cssRules[i];\n        if (stylesheet.type !== 1)\n          continue;\n        const selectorList = stylesheet.selectorText.split(/,/gm).filter(Boolean).map((i2) => i2.trim());\n        for (let j = 0; j < selectorList.length; j++) {\n          stylesheets[selectorList[j]] = Object.assign(stylesheets[selectorList[j]] || {}, stylesheet.style);\n        }\n      }\n    }\n    function parseArcCommand(path, rx, ry, x_axis_rotation, large_arc_flag, sweep_flag, start, end) {\n      if (rx == 0 || ry == 0) {\n        path.lineTo(end.x, end.y);\n        return;\n      }\n      x_axis_rotation = x_axis_rotation * Math.PI / 180;\n      rx = Math.abs(rx);\n      ry = Math.abs(ry);\n      const dx2 = (start.x - end.x) / 2;\n      const dy2 = (start.y - end.y) / 2;\n      const x1p = Math.cos(x_axis_rotation) * dx2 + Math.sin(x_axis_rotation) * dy2;\n      const y1p = -Math.sin(x_axis_rotation) * dx2 + Math.cos(x_axis_rotation) * dy2;\n      let rxs = rx * rx;\n      let rys = ry * ry;\n      const x1ps = x1p * x1p;\n      const y1ps = y1p * y1p;\n      const cr = x1ps / rxs + y1ps / rys;\n      if (cr > 1) {\n        const s = Math.sqrt(cr);\n        rx = s * rx;\n        ry = s * ry;\n        rxs = rx * rx;\n        rys = ry * ry;\n      }\n      const dq = rxs * y1ps + rys * x1ps;\n      const pq = (rxs * rys - dq) / dq;\n      let q = Math.sqrt(Math.max(0, pq));\n      if (large_arc_flag === sweep_flag)\n        q = -q;\n      const cxp = q * rx * y1p / ry;\n      const cyp = -q * ry * x1p / rx;\n      const cx = Math.cos(x_axis_rotation) * cxp - Math.sin(x_axis_rotation) * cyp + (start.x + end.x) / 2;\n      const cy = Math.sin(x_axis_rotation) * cxp + Math.cos(x_axis_rotation) * cyp + (start.y + end.y) / 2;\n      const theta = svgAngle(1, 0, (x1p - cxp) / rx, (y1p - cyp) / ry);\n      const delta = svgAngle((x1p - cxp) / rx, (y1p - cyp) / ry, (-x1p - cxp) / rx, (-y1p - cyp) / ry) % (Math.PI * 2);\n      path.currentPath.absellipse(cx, cy, rx, ry, theta, theta + delta, sweep_flag === 0, x_axis_rotation);\n    }\n    function svgAngle(ux, uy, vx, vy) {\n      const dot = ux * vx + uy * vy;\n      const len = Math.sqrt(ux * ux + uy * uy) * Math.sqrt(vx * vx + vy * vy);\n      let ang = Math.acos(Math.max(-1, Math.min(1, dot / len)));\n      if (ux * vy - uy * vx < 0)\n        ang = -ang;\n      return ang;\n    }\n    function parseRectNode(node) {\n      const x = parseFloatWithUnits(node.getAttribute(\"x\") || 0);\n      const y = parseFloatWithUnits(node.getAttribute(\"y\") || 0);\n      const rx = parseFloatWithUnits(node.getAttribute(\"rx\") || node.getAttribute(\"ry\") || 0);\n      const ry = parseFloatWithUnits(node.getAttribute(\"ry\") || node.getAttribute(\"rx\") || 0);\n      const w = parseFloatWithUnits(node.getAttribute(\"width\"));\n      const h = parseFloatWithUnits(node.getAttribute(\"height\"));\n      const bci = 1 - 0.551915024494;\n      const path = new ShapePath();\n      path.moveTo(x + rx, y);\n      path.lineTo(x + w - rx, y);\n      if (rx !== 0 || ry !== 0) {\n        path.bezierCurveTo(x + w - rx * bci, y, x + w, y + ry * bci, x + w, y + ry);\n      }\n      path.lineTo(x + w, y + h - ry);\n      if (rx !== 0 || ry !== 0) {\n        path.bezierCurveTo(x + w, y + h - ry * bci, x + w - rx * bci, y + h, x + w - rx, y + h);\n      }\n      path.lineTo(x + rx, y + h);\n      if (rx !== 0 || ry !== 0) {\n        path.bezierCurveTo(x + rx * bci, y + h, x, y + h - ry * bci, x, y + h - ry);\n      }\n      path.lineTo(x, y + ry);\n      if (rx !== 0 || ry !== 0) {\n        path.bezierCurveTo(x, y + ry * bci, x + rx * bci, y, x + rx, y);\n      }\n      return path;\n    }\n    function parsePolygonNode(node) {\n      function iterator(match, a, b) {\n        const x = parseFloatWithUnits(a);\n        const y = parseFloatWithUnits(b);\n        if (index === 0) {\n          path.moveTo(x, y);\n        } else {\n          path.lineTo(x, y);\n        }\n        index++;\n      }\n      const regex = /(-?[\\d\\.?]+)[,|\\s](-?[\\d\\.?]+)/g;\n      const path = new ShapePath();\n      let index = 0;\n      node.getAttribute(\"points\").replace(regex, iterator);\n      path.currentPath.autoClose = true;\n      return path;\n    }\n    function parsePolylineNode(node) {\n      function iterator(match, a, b) {\n        const x = parseFloatWithUnits(a);\n        const y = parseFloatWithUnits(b);\n        if (index === 0) {\n          path.moveTo(x, y);\n        } else {\n          path.lineTo(x, y);\n        }\n        index++;\n      }\n      const regex = /(-?[\\d\\.?]+)[,|\\s](-?[\\d\\.?]+)/g;\n      const path = new ShapePath();\n      let index = 0;\n      node.getAttribute(\"points\").replace(regex, iterator);\n      path.currentPath.autoClose = false;\n      return path;\n    }\n    function parseCircleNode(node) {\n      const x = parseFloatWithUnits(node.getAttribute(\"cx\") || 0);\n      const y = parseFloatWithUnits(node.getAttribute(\"cy\") || 0);\n      const r = parseFloatWithUnits(node.getAttribute(\"r\") || 0);\n      const subpath = new Path();\n      subpath.absarc(x, y, r, 0, Math.PI * 2);\n      const path = new ShapePath();\n      path.subPaths.push(subpath);\n      return path;\n    }\n    function parseEllipseNode(node) {\n      const x = parseFloatWithUnits(node.getAttribute(\"cx\") || 0);\n      const y = parseFloatWithUnits(node.getAttribute(\"cy\") || 0);\n      const rx = parseFloatWithUnits(node.getAttribute(\"rx\") || 0);\n      const ry = parseFloatWithUnits(node.getAttribute(\"ry\") || 0);\n      const subpath = new Path();\n      subpath.absellipse(x, y, rx, ry, 0, Math.PI * 2);\n      const path = new ShapePath();\n      path.subPaths.push(subpath);\n      return path;\n    }\n    function parseLineNode(node) {\n      const x1 = parseFloatWithUnits(node.getAttribute(\"x1\") || 0);\n      const y1 = parseFloatWithUnits(node.getAttribute(\"y1\") || 0);\n      const x2 = parseFloatWithUnits(node.getAttribute(\"x2\") || 0);\n      const y2 = parseFloatWithUnits(node.getAttribute(\"y2\") || 0);\n      const path = new ShapePath();\n      path.moveTo(x1, y1);\n      path.lineTo(x2, y2);\n      path.currentPath.autoClose = false;\n      return path;\n    }\n    function parseStyle(node, style) {\n      style = Object.assign({}, style);\n      let stylesheetStyles = {};\n      if (node.hasAttribute(\"class\")) {\n        const classSelectors = node.getAttribute(\"class\").split(/\\s/).filter(Boolean).map((i) => i.trim());\n        for (let i = 0; i < classSelectors.length; i++) {\n          stylesheetStyles = Object.assign(stylesheetStyles, stylesheets[\".\" + classSelectors[i]]);\n        }\n      }\n      if (node.hasAttribute(\"id\")) {\n        stylesheetStyles = Object.assign(stylesheetStyles, stylesheets[\"#\" + node.getAttribute(\"id\")]);\n      }\n      function addStyle(svgName, jsName, adjustFunction) {\n        if (adjustFunction === void 0) {\n          adjustFunction = function copy(v) {\n            if (v.startsWith(\"url\"))\n              console.warn(\"SVGLoader: url access in attributes is not implemented.\");\n            return v;\n          };\n        }\n        if (node.hasAttribute(svgName))\n          style[jsName] = adjustFunction(node.getAttribute(svgName));\n        if (stylesheetStyles[svgName])\n          style[jsName] = adjustFunction(stylesheetStyles[svgName]);\n        if (node.style && node.style[svgName] !== \"\")\n          style[jsName] = adjustFunction(node.style[svgName]);\n      }\n      function clamp(v) {\n        return Math.max(0, Math.min(1, parseFloatWithUnits(v)));\n      }\n      function positive(v) {\n        return Math.max(0, parseFloatWithUnits(v));\n      }\n      addStyle(\"fill\", \"fill\");\n      addStyle(\"fill-opacity\", \"fillOpacity\", clamp);\n      addStyle(\"fill-rule\", \"fillRule\");\n      addStyle(\"opacity\", \"opacity\", clamp);\n      addStyle(\"stroke\", \"stroke\");\n      addStyle(\"stroke-opacity\", \"strokeOpacity\", clamp);\n      addStyle(\"stroke-width\", \"strokeWidth\", positive);\n      addStyle(\"stroke-linejoin\", \"strokeLineJoin\");\n      addStyle(\"stroke-linecap\", \"strokeLineCap\");\n      addStyle(\"stroke-miterlimit\", \"strokeMiterLimit\", positive);\n      addStyle(\"visibility\", \"visibility\");\n      return style;\n    }\n    function getReflection(a, b) {\n      return a - (b - a);\n    }\n    function parseFloats(input, flags, stride) {\n      if (typeof input !== \"string\") {\n        throw new TypeError(\"Invalid input: \" + typeof input);\n      }\n      const RE = {\n        SEPARATOR: /[ \\t\\r\\n\\,.\\-+]/,\n        WHITESPACE: /[ \\t\\r\\n]/,\n        DIGIT: /[\\d]/,\n        SIGN: /[-+]/,\n        POINT: /\\./,\n        COMMA: /,/,\n        EXP: /e/i,\n        FLAGS: /[01]/\n      };\n      const SEP = 0;\n      const INT = 1;\n      const FLOAT = 2;\n      const EXP = 3;\n      let state = SEP;\n      let seenComma = true;\n      let number = \"\", exponent = \"\";\n      const result = [];\n      function throwSyntaxError(current2, i, partial) {\n        const error = new SyntaxError('Unexpected character \"' + current2 + '\" at index ' + i + \".\");\n        error.partial = partial;\n        throw error;\n      }\n      function newNumber() {\n        if (number !== \"\") {\n          if (exponent === \"\")\n            result.push(Number(number));\n          else\n            result.push(Number(number) * Math.pow(10, Number(exponent)));\n        }\n        number = \"\";\n        exponent = \"\";\n      }\n      let current;\n      const length = input.length;\n      for (let i = 0; i < length; i++) {\n        current = input[i];\n        if (Array.isArray(flags) && flags.includes(result.length % stride) && RE.FLAGS.test(current)) {\n          state = INT;\n          number = current;\n          newNumber();\n          continue;\n        }\n        if (state === SEP) {\n          if (RE.WHITESPACE.test(current)) {\n            continue;\n          }\n          if (RE.DIGIT.test(current) || RE.SIGN.test(current)) {\n            state = INT;\n            number = current;\n            continue;\n          }\n          if (RE.POINT.test(current)) {\n            state = FLOAT;\n            number = current;\n            continue;\n          }\n          if (RE.COMMA.test(current)) {\n            if (seenComma) {\n              throwSyntaxError(current, i, result);\n            }\n            seenComma = true;\n          }\n        }\n        if (state === INT) {\n          if (RE.DIGIT.test(current)) {\n            number += current;\n            continue;\n          }\n          if (RE.POINT.test(current)) {\n            number += current;\n            state = FLOAT;\n            continue;\n          }\n          if (RE.EXP.test(current)) {\n            state = EXP;\n            continue;\n          }\n          if (RE.SIGN.test(current) && number.length === 1 && RE.SIGN.test(number[0])) {\n            throwSyntaxError(current, i, result);\n          }\n        }\n        if (state === FLOAT) {\n          if (RE.DIGIT.test(current)) {\n            number += current;\n            continue;\n          }\n          if (RE.EXP.test(current)) {\n            state = EXP;\n            continue;\n          }\n          if (RE.POINT.test(current) && number[number.length - 1] === \".\") {\n            throwSyntaxError(current, i, result);\n          }\n        }\n        if (state === EXP) {\n          if (RE.DIGIT.test(current)) {\n            exponent += current;\n            continue;\n          }\n          if (RE.SIGN.test(current)) {\n            if (exponent === \"\") {\n              exponent += current;\n              continue;\n            }\n            if (exponent.length === 1 && RE.SIGN.test(exponent)) {\n              throwSyntaxError(current, i, result);\n            }\n          }\n        }\n        if (RE.WHITESPACE.test(current)) {\n          newNumber();\n          state = SEP;\n          seenComma = false;\n        } else if (RE.COMMA.test(current)) {\n          newNumber();\n          state = SEP;\n          seenComma = true;\n        } else if (RE.SIGN.test(current)) {\n          newNumber();\n          state = INT;\n          number = current;\n        } else if (RE.POINT.test(current)) {\n          newNumber();\n          state = FLOAT;\n          number = current;\n        } else {\n          throwSyntaxError(current, i, result);\n        }\n      }\n      newNumber();\n      return result;\n    }\n    const units = [\"mm\", \"cm\", \"in\", \"pt\", \"pc\", \"px\"];\n    const unitConversion = {\n      mm: {\n        mm: 1,\n        cm: 0.1,\n        in: 1 / 25.4,\n        pt: 72 / 25.4,\n        pc: 6 / 25.4,\n        px: -1\n      },\n      cm: {\n        mm: 10,\n        cm: 1,\n        in: 1 / 2.54,\n        pt: 72 / 2.54,\n        pc: 6 / 2.54,\n        px: -1\n      },\n      in: {\n        mm: 25.4,\n        cm: 2.54,\n        in: 1,\n        pt: 72,\n        pc: 6,\n        px: -1\n      },\n      pt: {\n        mm: 25.4 / 72,\n        cm: 2.54 / 72,\n        in: 1 / 72,\n        pt: 1,\n        pc: 6 / 72,\n        px: -1\n      },\n      pc: {\n        mm: 25.4 / 6,\n        cm: 2.54 / 6,\n        in: 1 / 6,\n        pt: 72 / 6,\n        pc: 1,\n        px: -1\n      },\n      px: {\n        px: 1\n      }\n    };\n    function parseFloatWithUnits(string) {\n      let theUnit = \"px\";\n      if (typeof string === \"string\" || string instanceof String) {\n        for (let i = 0, n = units.length; i < n; i++) {\n          const u = units[i];\n          if (string.endsWith(u)) {\n            theUnit = u;\n            string = string.substring(0, string.length - u.length);\n            break;\n          }\n        }\n      }\n      let scale = void 0;\n      if (theUnit === \"px\" && scope.defaultUnit !== \"px\") {\n        scale = unitConversion[\"in\"][scope.defaultUnit] / scope.defaultDPI;\n      } else {\n        scale = unitConversion[theUnit][scope.defaultUnit];\n        if (scale < 0) {\n          scale = unitConversion[theUnit][\"in\"] * scope.defaultDPI;\n        }\n      }\n      return scale * parseFloat(string);\n    }\n    function getNodeTransform(node) {\n      if (!(node.hasAttribute(\"transform\") || node.nodeName === \"use\" && (node.hasAttribute(\"x\") || node.hasAttribute(\"y\")))) {\n        return null;\n      }\n      const transform = parseNodeTransform(node);\n      if (transformStack.length > 0) {\n        transform.premultiply(transformStack[transformStack.length - 1]);\n      }\n      currentTransform.copy(transform);\n      transformStack.push(transform);\n      return transform;\n    }\n    function parseNodeTransform(node) {\n      const transform = new Matrix3();\n      const currentTransform2 = tempTransform0;\n      if (node.nodeName === \"use\" && (node.hasAttribute(\"x\") || node.hasAttribute(\"y\"))) {\n        const tx = parseFloatWithUnits(node.getAttribute(\"x\"));\n        const ty = parseFloatWithUnits(node.getAttribute(\"y\"));\n        transform.translate(tx, ty);\n      }\n      if (node.hasAttribute(\"transform\")) {\n        const transformsTexts = node.getAttribute(\"transform\").split(\")\");\n        for (let tIndex = transformsTexts.length - 1; tIndex >= 0; tIndex--) {\n          const transformText = transformsTexts[tIndex].trim();\n          if (transformText === \"\")\n            continue;\n          const openParPos = transformText.indexOf(\"(\");\n          const closeParPos = transformText.length;\n          if (openParPos > 0 && openParPos < closeParPos) {\n            const transformType = transformText.substr(0, openParPos);\n            const array = parseFloats(transformText.substr(openParPos + 1, closeParPos - openParPos - 1));\n            currentTransform2.identity();\n            switch (transformType) {\n              case \"translate\":\n                if (array.length >= 1) {\n                  const tx = array[0];\n                  let ty = tx;\n                  if (array.length >= 2) {\n                    ty = array[1];\n                  }\n                  currentTransform2.translate(tx, ty);\n                }\n                break;\n              case \"rotate\":\n                if (array.length >= 1) {\n                  let angle = 0;\n                  let cx = 0;\n                  let cy = 0;\n                  angle = -array[0] * Math.PI / 180;\n                  if (array.length >= 3) {\n                    cx = array[1];\n                    cy = array[2];\n                  }\n                  tempTransform1.identity().translate(-cx, -cy);\n                  tempTransform2.identity().rotate(angle);\n                  tempTransform3.multiplyMatrices(tempTransform2, tempTransform1);\n                  tempTransform1.identity().translate(cx, cy);\n                  currentTransform2.multiplyMatrices(tempTransform1, tempTransform3);\n                }\n                break;\n              case \"scale\":\n                if (array.length >= 1) {\n                  const scaleX = array[0];\n                  let scaleY = scaleX;\n                  if (array.length >= 2) {\n                    scaleY = array[1];\n                  }\n                  currentTransform2.scale(scaleX, scaleY);\n                }\n                break;\n              case \"skewX\":\n                if (array.length === 1) {\n                  currentTransform2.set(1, Math.tan(array[0] * Math.PI / 180), 0, 0, 1, 0, 0, 0, 1);\n                }\n                break;\n              case \"skewY\":\n                if (array.length === 1) {\n                  currentTransform2.set(1, 0, 0, Math.tan(array[0] * Math.PI / 180), 1, 0, 0, 0, 1);\n                }\n                break;\n              case \"matrix\":\n                if (array.length === 6) {\n                  currentTransform2.set(array[0], array[2], array[4], array[1], array[3], array[5], 0, 0, 1);\n                }\n                break;\n            }\n          }\n          transform.premultiply(currentTransform2);\n        }\n      }\n      return transform;\n    }\n    function transformPath(path, m) {\n      function transfVec2(v2) {\n        tempV3.set(v2.x, v2.y, 1).applyMatrix3(m);\n        v2.set(tempV3.x, tempV3.y);\n      }\n      const isRotated = isTransformRotated(m);\n      const subPaths = path.subPaths;\n      for (let i = 0, n = subPaths.length; i < n; i++) {\n        const subPath = subPaths[i];\n        const curves = subPath.curves;\n        for (let j = 0; j < curves.length; j++) {\n          const curve = curves[j];\n          if (curve.isLineCurve) {\n            transfVec2(curve.v1);\n            transfVec2(curve.v2);\n          } else if (curve.isCubicBezierCurve) {\n            transfVec2(curve.v0);\n            transfVec2(curve.v1);\n            transfVec2(curve.v2);\n            transfVec2(curve.v3);\n          } else if (curve.isQuadraticBezierCurve) {\n            transfVec2(curve.v0);\n            transfVec2(curve.v1);\n            transfVec2(curve.v2);\n          } else if (curve.isEllipseCurve) {\n            if (isRotated) {\n              console.warn(\"SVGLoader: Elliptic arc or ellipse rotation or skewing is not implemented.\");\n            }\n            tempV2.set(curve.aX, curve.aY);\n            transfVec2(tempV2);\n            curve.aX = tempV2.x;\n            curve.aY = tempV2.y;\n            curve.xRadius *= getTransformScaleX(m);\n            curve.yRadius *= getTransformScaleY(m);\n          }\n        }\n      }\n    }\n    function isTransformRotated(m) {\n      return m.elements[1] !== 0 || m.elements[3] !== 0;\n    }\n    function getTransformScaleX(m) {\n      const te = m.elements;\n      return Math.sqrt(te[0] * te[0] + te[1] * te[1]);\n    }\n    function getTransformScaleY(m) {\n      const te = m.elements;\n      return Math.sqrt(te[3] * te[3] + te[4] * te[4]);\n    }\n    const paths = [];\n    const stylesheets = {};\n    const transformStack = [];\n    const tempTransform0 = new Matrix3();\n    const tempTransform1 = new Matrix3();\n    const tempTransform2 = new Matrix3();\n    const tempTransform3 = new Matrix3();\n    const tempV2 = new Vector2();\n    const tempV3 = new Vector3();\n    const currentTransform = new Matrix3();\n    const xml = new DOMParser().parseFromString(text, \"image/svg+xml\");\n    parseNode(xml.documentElement, {\n      fill: \"#000\",\n      fillOpacity: 1,\n      strokeOpacity: 1,\n      strokeWidth: 1,\n      strokeLineJoin: \"miter\",\n      strokeLineCap: \"butt\",\n      strokeMiterLimit: 4\n    });\n    const data = { paths, xml: xml.documentElement };\n    return data;\n  }\n  static createShapes(shapePath) {\n    const BIGNUMBER = 999999999;\n    const IntersectionLocationType = {\n      ORIGIN: 0,\n      DESTINATION: 1,\n      BETWEEN: 2,\n      LEFT: 3,\n      RIGHT: 4,\n      BEHIND: 5,\n      BEYOND: 6\n    };\n    const classifyResult = {\n      loc: IntersectionLocationType.ORIGIN,\n      t: 0\n    };\n    function findEdgeIntersection(a0, a1, b0, b1) {\n      const x1 = a0.x;\n      const x2 = a1.x;\n      const x3 = b0.x;\n      const x4 = b1.x;\n      const y1 = a0.y;\n      const y2 = a1.y;\n      const y3 = b0.y;\n      const y4 = b1.y;\n      const nom1 = (x4 - x3) * (y1 - y3) - (y4 - y3) * (x1 - x3);\n      const nom2 = (x2 - x1) * (y1 - y3) - (y2 - y1) * (x1 - x3);\n      const denom = (y4 - y3) * (x2 - x1) - (x4 - x3) * (y2 - y1);\n      const t1 = nom1 / denom;\n      const t2 = nom2 / denom;\n      if (denom === 0 && nom1 !== 0 || t1 <= 0 || t1 >= 1 || t2 < 0 || t2 > 1) {\n        return null;\n      } else if (nom1 === 0 && denom === 0) {\n        for (let i = 0; i < 2; i++) {\n          classifyPoint(i === 0 ? b0 : b1, a0, a1);\n          if (classifyResult.loc == IntersectionLocationType.ORIGIN) {\n            const point = i === 0 ? b0 : b1;\n            return { x: point.x, y: point.y, t: classifyResult.t };\n          } else if (classifyResult.loc == IntersectionLocationType.BETWEEN) {\n            const x = +(x1 + classifyResult.t * (x2 - x1)).toPrecision(10);\n            const y = +(y1 + classifyResult.t * (y2 - y1)).toPrecision(10);\n            return { x, y, t: classifyResult.t };\n          }\n        }\n        return null;\n      } else {\n        for (let i = 0; i < 2; i++) {\n          classifyPoint(i === 0 ? b0 : b1, a0, a1);\n          if (classifyResult.loc == IntersectionLocationType.ORIGIN) {\n            const point = i === 0 ? b0 : b1;\n            return { x: point.x, y: point.y, t: classifyResult.t };\n          }\n        }\n        const x = +(x1 + t1 * (x2 - x1)).toPrecision(10);\n        const y = +(y1 + t1 * (y2 - y1)).toPrecision(10);\n        return { x, y, t: t1 };\n      }\n    }\n    function classifyPoint(p, edgeStart, edgeEnd) {\n      const ax = edgeEnd.x - edgeStart.x;\n      const ay = edgeEnd.y - edgeStart.y;\n      const bx = p.x - edgeStart.x;\n      const by = p.y - edgeStart.y;\n      const sa = ax * by - bx * ay;\n      if (p.x === edgeStart.x && p.y === edgeStart.y) {\n        classifyResult.loc = IntersectionLocationType.ORIGIN;\n        classifyResult.t = 0;\n        return;\n      }\n      if (p.x === edgeEnd.x && p.y === edgeEnd.y) {\n        classifyResult.loc = IntersectionLocationType.DESTINATION;\n        classifyResult.t = 1;\n        return;\n      }\n      if (sa < -Number.EPSILON) {\n        classifyResult.loc = IntersectionLocationType.LEFT;\n        return;\n      }\n      if (sa > Number.EPSILON) {\n        classifyResult.loc = IntersectionLocationType.RIGHT;\n        return;\n      }\n      if (ax * bx < 0 || ay * by < 0) {\n        classifyResult.loc = IntersectionLocationType.BEHIND;\n        return;\n      }\n      if (Math.sqrt(ax * ax + ay * ay) < Math.sqrt(bx * bx + by * by)) {\n        classifyResult.loc = IntersectionLocationType.BEYOND;\n        return;\n      }\n      let t;\n      if (ax !== 0) {\n        t = bx / ax;\n      } else {\n        t = by / ay;\n      }\n      classifyResult.loc = IntersectionLocationType.BETWEEN;\n      classifyResult.t = t;\n    }\n    function getIntersections(path1, path2) {\n      const intersectionsRaw = [];\n      const intersections = [];\n      for (let index = 1; index < path1.length; index++) {\n        const path1EdgeStart = path1[index - 1];\n        const path1EdgeEnd = path1[index];\n        for (let index2 = 1; index2 < path2.length; index2++) {\n          const path2EdgeStart = path2[index2 - 1];\n          const path2EdgeEnd = path2[index2];\n          const intersection = findEdgeIntersection(path1EdgeStart, path1EdgeEnd, path2EdgeStart, path2EdgeEnd);\n          if (intersection !== null && intersectionsRaw.find(\n            (i) => i.t <= intersection.t + Number.EPSILON && i.t >= intersection.t - Number.EPSILON\n          ) === void 0) {\n            intersectionsRaw.push(intersection);\n            intersections.push(new Vector2(intersection.x, intersection.y));\n          }\n        }\n      }\n      return intersections;\n    }\n    function getScanlineIntersections(scanline, boundingBox, paths) {\n      const center = new Vector2();\n      boundingBox.getCenter(center);\n      const allIntersections = [];\n      paths.forEach((path) => {\n        if (path.boundingBox.containsPoint(center)) {\n          const intersections = getIntersections(scanline, path.points);\n          intersections.forEach((p) => {\n            allIntersections.push({ identifier: path.identifier, isCW: path.isCW, point: p });\n          });\n        }\n      });\n      allIntersections.sort((i1, i2) => {\n        return i1.point.x - i2.point.x;\n      });\n      return allIntersections;\n    }\n    function isHoleTo(simplePath, allPaths, scanlineMinX2, scanlineMaxX2, _fillRule) {\n      if (_fillRule === null || _fillRule === void 0 || _fillRule === \"\") {\n        _fillRule = \"nonzero\";\n      }\n      const centerBoundingBox = new Vector2();\n      simplePath.boundingBox.getCenter(centerBoundingBox);\n      const scanline = [new Vector2(scanlineMinX2, centerBoundingBox.y), new Vector2(scanlineMaxX2, centerBoundingBox.y)];\n      const scanlineIntersections = getScanlineIntersections(scanline, simplePath.boundingBox, allPaths);\n      scanlineIntersections.sort((i1, i2) => {\n        return i1.point.x - i2.point.x;\n      });\n      const baseIntersections = [];\n      const otherIntersections = [];\n      scanlineIntersections.forEach((i2) => {\n        if (i2.identifier === simplePath.identifier) {\n          baseIntersections.push(i2);\n        } else {\n          otherIntersections.push(i2);\n        }\n      });\n      const firstXOfPath = baseIntersections[0].point.x;\n      const stack = [];\n      let i = 0;\n      while (i < otherIntersections.length && otherIntersections[i].point.x < firstXOfPath) {\n        if (stack.length > 0 && stack[stack.length - 1] === otherIntersections[i].identifier) {\n          stack.pop();\n        } else {\n          stack.push(otherIntersections[i].identifier);\n        }\n        i++;\n      }\n      stack.push(simplePath.identifier);\n      if (_fillRule === \"evenodd\") {\n        const isHole = stack.length % 2 === 0 ? true : false;\n        const isHoleFor = stack[stack.length - 2];\n        return { identifier: simplePath.identifier, isHole, for: isHoleFor };\n      } else if (_fillRule === \"nonzero\") {\n        let isHole = true;\n        let isHoleFor = null;\n        let lastCWValue = null;\n        for (let i2 = 0; i2 < stack.length; i2++) {\n          const identifier2 = stack[i2];\n          if (isHole) {\n            lastCWValue = allPaths[identifier2].isCW;\n            isHole = false;\n            isHoleFor = identifier2;\n          } else if (lastCWValue !== allPaths[identifier2].isCW) {\n            lastCWValue = allPaths[identifier2].isCW;\n            isHole = true;\n          }\n        }\n        return { identifier: simplePath.identifier, isHole, for: isHoleFor };\n      } else {\n        console.warn('fill-rule: \"' + _fillRule + '\" is currently not implemented.');\n      }\n    }\n    let identifier = 0;\n    let scanlineMinX = BIGNUMBER;\n    let scanlineMaxX = -BIGNUMBER;\n    let simplePaths = shapePath.subPaths.map((p) => {\n      const points = p.getPoints();\n      let maxY = -BIGNUMBER;\n      let minY = BIGNUMBER;\n      let maxX = -BIGNUMBER;\n      let minX = BIGNUMBER;\n      for (let i = 0; i < points.length; i++) {\n        const p2 = points[i];\n        if (p2.y > maxY) {\n          maxY = p2.y;\n        }\n        if (p2.y < minY) {\n          minY = p2.y;\n        }\n        if (p2.x > maxX) {\n          maxX = p2.x;\n        }\n        if (p2.x < minX) {\n          minX = p2.x;\n        }\n      }\n      if (scanlineMaxX <= maxX) {\n        scanlineMaxX = maxX + 1;\n      }\n      if (scanlineMinX >= minX) {\n        scanlineMinX = minX - 1;\n      }\n      return {\n        curves: p.curves,\n        points,\n        isCW: ShapeUtils.isClockWise(points),\n        identifier: identifier++,\n        boundingBox: new Box2(new Vector2(minX, minY), new Vector2(maxX, maxY))\n      };\n    });\n    simplePaths = simplePaths.filter((sp) => sp.points.length > 1);\n    const isAHole = simplePaths.map(\n      (p) => isHoleTo(p, simplePaths, scanlineMinX, scanlineMaxX, shapePath.userData.style.fillRule)\n    );\n    const shapesToReturn = [];\n    simplePaths.forEach((p) => {\n      const amIAHole = isAHole[p.identifier];\n      if (!amIAHole.isHole) {\n        const shape = new Shape();\n        shape.curves = p.curves;\n        const holes = isAHole.filter((h) => h.isHole && h.for === p.identifier);\n        holes.forEach((h) => {\n          const hole = simplePaths[h.identifier];\n          const path = new Path();\n          path.curves = hole.curves;\n          shape.holes.push(path);\n        });\n        shapesToReturn.push(shape);\n      }\n    });\n    return shapesToReturn;\n  }\n  static getStrokeStyle(width, color, lineJoin, lineCap, miterLimit) {\n    width = width !== void 0 ? width : 1;\n    color = color !== void 0 ? color : \"#000\";\n    lineJoin = lineJoin !== void 0 ? lineJoin : \"miter\";\n    lineCap = lineCap !== void 0 ? lineCap : \"butt\";\n    miterLimit = miterLimit !== void 0 ? miterLimit : 4;\n    return {\n      strokeColor: color,\n      strokeWidth: width,\n      strokeLineJoin: lineJoin,\n      strokeLineCap: lineCap,\n      strokeMiterLimit: miterLimit\n    };\n  }\n  static pointsToStroke(points, style, arcDivisions, minDistance) {\n    const vertices = [];\n    const normals = [];\n    const uvs = [];\n    if (SVGLoader.pointsToStrokeWithBuffers(points, style, arcDivisions, minDistance, vertices, normals, uvs) === 0) {\n      return null;\n    }\n    const geometry = new BufferGeometry();\n    geometry.setAttribute(\"position\", new Float32BufferAttribute(vertices, 3));\n    geometry.setAttribute(\"normal\", new Float32BufferAttribute(normals, 3));\n    geometry.setAttribute(\"uv\", new Float32BufferAttribute(uvs, 2));\n    return geometry;\n  }\n  static pointsToStrokeWithBuffers(points, style, arcDivisions, minDistance, vertices, normals, uvs, vertexOffset) {\n    const tempV2_1 = new Vector2();\n    const tempV2_2 = new Vector2();\n    const tempV2_3 = new Vector2();\n    const tempV2_4 = new Vector2();\n    const tempV2_5 = new Vector2();\n    const tempV2_6 = new Vector2();\n    const tempV2_7 = new Vector2();\n    const lastPointL = new Vector2();\n    const lastPointR = new Vector2();\n    const point0L = new Vector2();\n    const point0R = new Vector2();\n    const currentPointL = new Vector2();\n    const currentPointR = new Vector2();\n    const nextPointL = new Vector2();\n    const nextPointR = new Vector2();\n    const innerPoint = new Vector2();\n    const outerPoint = new Vector2();\n    arcDivisions = arcDivisions !== void 0 ? arcDivisions : 12;\n    minDistance = minDistance !== void 0 ? minDistance : 1e-3;\n    vertexOffset = vertexOffset !== void 0 ? vertexOffset : 0;\n    points = removeDuplicatedPoints(points);\n    const numPoints = points.length;\n    if (numPoints < 2)\n      return 0;\n    const isClosed = points[0].equals(points[numPoints - 1]);\n    let currentPoint;\n    let previousPoint = points[0];\n    let nextPoint;\n    const strokeWidth2 = style.strokeWidth / 2;\n    const deltaU = 1 / (numPoints - 1);\n    let u0 = 0, u1;\n    let innerSideModified;\n    let joinIsOnLeftSide;\n    let isMiter;\n    let initialJoinIsOnLeftSide = false;\n    let numVertices = 0;\n    let currentCoordinate = vertexOffset * 3;\n    let currentCoordinateUV = vertexOffset * 2;\n    getNormal(points[0], points[1], tempV2_1).multiplyScalar(strokeWidth2);\n    lastPointL.copy(points[0]).sub(tempV2_1);\n    lastPointR.copy(points[0]).add(tempV2_1);\n    point0L.copy(lastPointL);\n    point0R.copy(lastPointR);\n    for (let iPoint = 1; iPoint < numPoints; iPoint++) {\n      currentPoint = points[iPoint];\n      if (iPoint === numPoints - 1) {\n        if (isClosed) {\n          nextPoint = points[1];\n        } else {\n          nextPoint = void 0;\n        }\n      } else {\n        nextPoint = points[iPoint + 1];\n      }\n      const normal1 = tempV2_1;\n      getNormal(previousPoint, currentPoint, normal1);\n      tempV2_3.copy(normal1).multiplyScalar(strokeWidth2);\n      currentPointL.copy(currentPoint).sub(tempV2_3);\n      currentPointR.copy(currentPoint).add(tempV2_3);\n      u1 = u0 + deltaU;\n      innerSideModified = false;\n      if (nextPoint !== void 0) {\n        getNormal(currentPoint, nextPoint, tempV2_2);\n        tempV2_3.copy(tempV2_2).multiplyScalar(strokeWidth2);\n        nextPointL.copy(currentPoint).sub(tempV2_3);\n        nextPointR.copy(currentPoint).add(tempV2_3);\n        joinIsOnLeftSide = true;\n        tempV2_3.subVectors(nextPoint, previousPoint);\n        if (normal1.dot(tempV2_3) < 0) {\n          joinIsOnLeftSide = false;\n        }\n        if (iPoint === 1)\n          initialJoinIsOnLeftSide = joinIsOnLeftSide;\n        tempV2_3.subVectors(nextPoint, currentPoint);\n        tempV2_3.normalize();\n        const dot = Math.abs(normal1.dot(tempV2_3));\n        if (dot !== 0) {\n          const miterSide = strokeWidth2 / dot;\n          tempV2_3.multiplyScalar(-miterSide);\n          tempV2_4.subVectors(currentPoint, previousPoint);\n          tempV2_5.copy(tempV2_4).setLength(miterSide).add(tempV2_3);\n          innerPoint.copy(tempV2_5).negate();\n          const miterLength2 = tempV2_5.length();\n          const segmentLengthPrev = tempV2_4.length();\n          tempV2_4.divideScalar(segmentLengthPrev);\n          tempV2_6.subVectors(nextPoint, currentPoint);\n          const segmentLengthNext = tempV2_6.length();\n          tempV2_6.divideScalar(segmentLengthNext);\n          if (tempV2_4.dot(innerPoint) < segmentLengthPrev && tempV2_6.dot(innerPoint) < segmentLengthNext) {\n            innerSideModified = true;\n          }\n          outerPoint.copy(tempV2_5).add(currentPoint);\n          innerPoint.add(currentPoint);\n          isMiter = false;\n          if (innerSideModified) {\n            if (joinIsOnLeftSide) {\n              nextPointR.copy(innerPoint);\n              currentPointR.copy(innerPoint);\n            } else {\n              nextPointL.copy(innerPoint);\n              currentPointL.copy(innerPoint);\n            }\n          } else {\n            makeSegmentTriangles();\n          }\n          switch (style.strokeLineJoin) {\n            case \"bevel\":\n              makeSegmentWithBevelJoin(joinIsOnLeftSide, innerSideModified, u1);\n              break;\n            case \"round\":\n              createSegmentTrianglesWithMiddleSection(joinIsOnLeftSide, innerSideModified);\n              if (joinIsOnLeftSide) {\n                makeCircularSector(currentPoint, currentPointL, nextPointL, u1, 0);\n              } else {\n                makeCircularSector(currentPoint, nextPointR, currentPointR, u1, 1);\n              }\n              break;\n            case \"miter\":\n            case \"miter-clip\":\n            default:\n              const miterFraction = strokeWidth2 * style.strokeMiterLimit / miterLength2;\n              if (miterFraction < 1) {\n                if (style.strokeLineJoin !== \"miter-clip\") {\n                  makeSegmentWithBevelJoin(joinIsOnLeftSide, innerSideModified, u1);\n                  break;\n                } else {\n                  createSegmentTrianglesWithMiddleSection(joinIsOnLeftSide, innerSideModified);\n                  if (joinIsOnLeftSide) {\n                    tempV2_6.subVectors(outerPoint, currentPointL).multiplyScalar(miterFraction).add(currentPointL);\n                    tempV2_7.subVectors(outerPoint, nextPointL).multiplyScalar(miterFraction).add(nextPointL);\n                    addVertex(currentPointL, u1, 0);\n                    addVertex(tempV2_6, u1, 0);\n                    addVertex(currentPoint, u1, 0.5);\n                    addVertex(currentPoint, u1, 0.5);\n                    addVertex(tempV2_6, u1, 0);\n                    addVertex(tempV2_7, u1, 0);\n                    addVertex(currentPoint, u1, 0.5);\n                    addVertex(tempV2_7, u1, 0);\n                    addVertex(nextPointL, u1, 0);\n                  } else {\n                    tempV2_6.subVectors(outerPoint, currentPointR).multiplyScalar(miterFraction).add(currentPointR);\n                    tempV2_7.subVectors(outerPoint, nextPointR).multiplyScalar(miterFraction).add(nextPointR);\n                    addVertex(currentPointR, u1, 1);\n                    addVertex(tempV2_6, u1, 1);\n                    addVertex(currentPoint, u1, 0.5);\n                    addVertex(currentPoint, u1, 0.5);\n                    addVertex(tempV2_6, u1, 1);\n                    addVertex(tempV2_7, u1, 1);\n                    addVertex(currentPoint, u1, 0.5);\n                    addVertex(tempV2_7, u1, 1);\n                    addVertex(nextPointR, u1, 1);\n                  }\n                }\n              } else {\n                if (innerSideModified) {\n                  if (joinIsOnLeftSide) {\n                    addVertex(lastPointR, u0, 1);\n                    addVertex(lastPointL, u0, 0);\n                    addVertex(outerPoint, u1, 0);\n                    addVertex(lastPointR, u0, 1);\n                    addVertex(outerPoint, u1, 0);\n                    addVertex(innerPoint, u1, 1);\n                  } else {\n                    addVertex(lastPointR, u0, 1);\n                    addVertex(lastPointL, u0, 0);\n                    addVertex(outerPoint, u1, 1);\n                    addVertex(lastPointL, u0, 0);\n                    addVertex(innerPoint, u1, 0);\n                    addVertex(outerPoint, u1, 1);\n                  }\n                  if (joinIsOnLeftSide) {\n                    nextPointL.copy(outerPoint);\n                  } else {\n                    nextPointR.copy(outerPoint);\n                  }\n                } else {\n                  if (joinIsOnLeftSide) {\n                    addVertex(currentPointL, u1, 0);\n                    addVertex(outerPoint, u1, 0);\n                    addVertex(currentPoint, u1, 0.5);\n                    addVertex(currentPoint, u1, 0.5);\n                    addVertex(outerPoint, u1, 0);\n                    addVertex(nextPointL, u1, 0);\n                  } else {\n                    addVertex(currentPointR, u1, 1);\n                    addVertex(outerPoint, u1, 1);\n                    addVertex(currentPoint, u1, 0.5);\n                    addVertex(currentPoint, u1, 0.5);\n                    addVertex(outerPoint, u1, 1);\n                    addVertex(nextPointR, u1, 1);\n                  }\n                }\n                isMiter = true;\n              }\n              break;\n          }\n        } else {\n          makeSegmentTriangles();\n        }\n      } else {\n        makeSegmentTriangles();\n      }\n      if (!isClosed && iPoint === numPoints - 1) {\n        addCapGeometry(points[0], point0L, point0R, joinIsOnLeftSide, true, u0);\n      }\n      u0 = u1;\n      previousPoint = currentPoint;\n      lastPointL.copy(nextPointL);\n      lastPointR.copy(nextPointR);\n    }\n    if (!isClosed) {\n      addCapGeometry(currentPoint, currentPointL, currentPointR, joinIsOnLeftSide, false, u1);\n    } else if (innerSideModified && vertices) {\n      let lastOuter = outerPoint;\n      let lastInner = innerPoint;\n      if (initialJoinIsOnLeftSide !== joinIsOnLeftSide) {\n        lastOuter = innerPoint;\n        lastInner = outerPoint;\n      }\n      if (joinIsOnLeftSide) {\n        if (isMiter || initialJoinIsOnLeftSide) {\n          lastInner.toArray(vertices, 0 * 3);\n          lastInner.toArray(vertices, 3 * 3);\n          if (isMiter) {\n            lastOuter.toArray(vertices, 1 * 3);\n          }\n        }\n      } else {\n        if (isMiter || !initialJoinIsOnLeftSide) {\n          lastInner.toArray(vertices, 1 * 3);\n          lastInner.toArray(vertices, 3 * 3);\n          if (isMiter) {\n            lastOuter.toArray(vertices, 0 * 3);\n          }\n        }\n      }\n    }\n    return numVertices;\n    function getNormal(p1, p2, result) {\n      result.subVectors(p2, p1);\n      return result.set(-result.y, result.x).normalize();\n    }\n    function addVertex(position, u, v) {\n      if (vertices) {\n        vertices[currentCoordinate] = position.x;\n        vertices[currentCoordinate + 1] = position.y;\n        vertices[currentCoordinate + 2] = 0;\n        if (normals) {\n          normals[currentCoordinate] = 0;\n          normals[currentCoordinate + 1] = 0;\n          normals[currentCoordinate + 2] = 1;\n        }\n        currentCoordinate += 3;\n        if (uvs) {\n          uvs[currentCoordinateUV] = u;\n          uvs[currentCoordinateUV + 1] = v;\n          currentCoordinateUV += 2;\n        }\n      }\n      numVertices += 3;\n    }\n    function makeCircularSector(center, p1, p2, u, v) {\n      tempV2_1.copy(p1).sub(center).normalize();\n      tempV2_2.copy(p2).sub(center).normalize();\n      let angle = Math.PI;\n      const dot = tempV2_1.dot(tempV2_2);\n      if (Math.abs(dot) < 1)\n        angle = Math.abs(Math.acos(dot));\n      angle /= arcDivisions;\n      tempV2_3.copy(p1);\n      for (let i = 0, il = arcDivisions - 1; i < il; i++) {\n        tempV2_4.copy(tempV2_3).rotateAround(center, angle);\n        addVertex(tempV2_3, u, v);\n        addVertex(tempV2_4, u, v);\n        addVertex(center, u, 0.5);\n        tempV2_3.copy(tempV2_4);\n      }\n      addVertex(tempV2_4, u, v);\n      addVertex(p2, u, v);\n      addVertex(center, u, 0.5);\n    }\n    function makeSegmentTriangles() {\n      addVertex(lastPointR, u0, 1);\n      addVertex(lastPointL, u0, 0);\n      addVertex(currentPointL, u1, 0);\n      addVertex(lastPointR, u0, 1);\n      addVertex(currentPointL, u1, 1);\n      addVertex(currentPointR, u1, 0);\n    }\n    function makeSegmentWithBevelJoin(joinIsOnLeftSide2, innerSideModified2, u) {\n      if (innerSideModified2) {\n        if (joinIsOnLeftSide2) {\n          addVertex(lastPointR, u0, 1);\n          addVertex(lastPointL, u0, 0);\n          addVertex(currentPointL, u1, 0);\n          addVertex(lastPointR, u0, 1);\n          addVertex(currentPointL, u1, 0);\n          addVertex(innerPoint, u1, 1);\n          addVertex(currentPointL, u, 0);\n          addVertex(nextPointL, u, 0);\n          addVertex(innerPoint, u, 0.5);\n        } else {\n          addVertex(lastPointR, u0, 1);\n          addVertex(lastPointL, u0, 0);\n          addVertex(currentPointR, u1, 1);\n          addVertex(lastPointL, u0, 0);\n          addVertex(innerPoint, u1, 0);\n          addVertex(currentPointR, u1, 1);\n          addVertex(currentPointR, u, 1);\n          addVertex(nextPointR, u, 0);\n          addVertex(innerPoint, u, 0.5);\n        }\n      } else {\n        if (joinIsOnLeftSide2) {\n          addVertex(currentPointL, u, 0);\n          addVertex(nextPointL, u, 0);\n          addVertex(currentPoint, u, 0.5);\n        } else {\n          addVertex(currentPointR, u, 1);\n          addVertex(nextPointR, u, 0);\n          addVertex(currentPoint, u, 0.5);\n        }\n      }\n    }\n    function createSegmentTrianglesWithMiddleSection(joinIsOnLeftSide2, innerSideModified2) {\n      if (innerSideModified2) {\n        if (joinIsOnLeftSide2) {\n          addVertex(lastPointR, u0, 1);\n          addVertex(lastPointL, u0, 0);\n          addVertex(currentPointL, u1, 0);\n          addVertex(lastPointR, u0, 1);\n          addVertex(currentPointL, u1, 0);\n          addVertex(innerPoint, u1, 1);\n          addVertex(currentPointL, u0, 0);\n          addVertex(currentPoint, u1, 0.5);\n          addVertex(innerPoint, u1, 1);\n          addVertex(currentPoint, u1, 0.5);\n          addVertex(nextPointL, u0, 0);\n          addVertex(innerPoint, u1, 1);\n        } else {\n          addVertex(lastPointR, u0, 1);\n          addVertex(lastPointL, u0, 0);\n          addVertex(currentPointR, u1, 1);\n          addVertex(lastPointL, u0, 0);\n          addVertex(innerPoint, u1, 0);\n          addVertex(currentPointR, u1, 1);\n          addVertex(currentPointR, u0, 1);\n          addVertex(innerPoint, u1, 0);\n          addVertex(currentPoint, u1, 0.5);\n          addVertex(currentPoint, u1, 0.5);\n          addVertex(innerPoint, u1, 0);\n          addVertex(nextPointR, u0, 1);\n        }\n      }\n    }\n    function addCapGeometry(center, p1, p2, joinIsOnLeftSide2, start, u) {\n      switch (style.strokeLineCap) {\n        case \"round\":\n          if (start) {\n            makeCircularSector(center, p2, p1, u, 0.5);\n          } else {\n            makeCircularSector(center, p1, p2, u, 0.5);\n          }\n          break;\n        case \"square\":\n          if (start) {\n            tempV2_1.subVectors(p1, center);\n            tempV2_2.set(tempV2_1.y, -tempV2_1.x);\n            tempV2_3.addVectors(tempV2_1, tempV2_2).add(center);\n            tempV2_4.subVectors(tempV2_2, tempV2_1).add(center);\n            if (joinIsOnLeftSide2) {\n              tempV2_3.toArray(vertices, 1 * 3);\n              tempV2_4.toArray(vertices, 0 * 3);\n              tempV2_4.toArray(vertices, 3 * 3);\n            } else {\n              tempV2_3.toArray(vertices, 1 * 3);\n              tempV2_3.toArray(vertices, 3 * 3);\n              tempV2_4.toArray(vertices, 0 * 3);\n            }\n          } else {\n            tempV2_1.subVectors(p2, center);\n            tempV2_2.set(tempV2_1.y, -tempV2_1.x);\n            tempV2_3.addVectors(tempV2_1, tempV2_2).add(center);\n            tempV2_4.subVectors(tempV2_2, tempV2_1).add(center);\n            const vl = vertices.length;\n            if (joinIsOnLeftSide2) {\n              tempV2_3.toArray(vertices, vl - 1 * 3);\n              tempV2_4.toArray(vertices, vl - 2 * 3);\n              tempV2_4.toArray(vertices, vl - 4 * 3);\n            } else {\n              tempV2_3.toArray(vertices, vl - 2 * 3);\n              tempV2_4.toArray(vertices, vl - 1 * 3);\n              tempV2_4.toArray(vertices, vl - 4 * 3);\n            }\n          }\n          break;\n        case \"butt\":\n        default:\n          break;\n      }\n    }\n    function removeDuplicatedPoints(points2) {\n      let dupPoints = false;\n      for (let i = 1, n = points2.length - 1; i < n; i++) {\n        if (points2[i].distanceTo(points2[i + 1]) < minDistance) {\n          dupPoints = true;\n          break;\n        }\n      }\n      if (!dupPoints)\n        return points2;\n      const newPoints = [];\n      newPoints.push(points2[0]);\n      for (let i = 1, n = points2.length - 1; i < n; i++) {\n        if (points2[i].distanceTo(points2[i + 1]) >= minDistance) {\n          newPoints.push(points2[i]);\n        }\n      }\n      newPoints.push(points2[points2.length - 1]);\n      return newPoints;\n    }\n  }\n}\nexport {\n  SVGLoader\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}