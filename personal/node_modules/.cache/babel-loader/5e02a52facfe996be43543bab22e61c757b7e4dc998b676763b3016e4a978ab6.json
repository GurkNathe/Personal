{"ast":null,"code":"import { PlaneGeometry, ShaderMaterial, Uniform, Mesh, PerspectiveCamera, Scene, WebGLRenderer, Texture, NearestFilter, NearestMipmapNearestFilter, NearestMipmapLinearFilter, LinearFilter, LinearMipmapNearestFilter, LinearMipmapLinearFilter, ClampToEdgeWrapping, RepeatWrapping, MirroredRepeatWrapping, Color, MathUtils, Vector3, CompressedTexture, RGBAFormat, DoubleSide, REVISION, BufferAttribute, PropertyBinding, InterpolateDiscrete, Matrix4, InterpolateLinear } from \"three\";\nlet _renderer;\nlet fullscreenQuadGeometry;\nlet fullscreenQuadMaterial;\nlet fullscreenQuad;\nfunction decompress(texture) {\n  let maxTextureSize = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : Infinity;\n  let renderer = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n  if (!fullscreenQuadGeometry) fullscreenQuadGeometry = new PlaneGeometry(2, 2, 1, 1);\n  if (!fullscreenQuadMaterial) fullscreenQuadMaterial = new ShaderMaterial({\n    uniforms: {\n      blitTexture: new Uniform(texture)\n    },\n    vertexShader: /* glsl */\n    `\n        varying vec2 vUv;\n        void main(){\n            vUv = uv;\n            gl_Position = vec4(position.xy * 1.0,0.,.999999);\n        }\n      `,\n    fragmentShader: /* glsl */\n    `\n          uniform sampler2D blitTexture; \n          varying vec2 vUv;\n\n          void main(){ \n              gl_FragColor = vec4(vUv.xy, 0, 1);\n              \n              #ifdef IS_SRGB\n              gl_FragColor = LinearTosRGB( texture2D( blitTexture, vUv) );\n              #else\n              gl_FragColor = texture2D( blitTexture, vUv);\n              #endif\n          }\n      `\n  });\n  fullscreenQuadMaterial.uniforms.blitTexture.value = texture;\n  fullscreenQuadMaterial.defines.IS_SRGB = \"colorSpace\" in texture ? texture.colorSpace === \"srgb\" : texture.encoding === 3001;\n  fullscreenQuadMaterial.needsUpdate = true;\n  if (!fullscreenQuad) {\n    fullscreenQuad = new Mesh(fullscreenQuadGeometry, fullscreenQuadMaterial);\n    fullscreenQuad.frustrumCulled = false;\n  }\n  const _camera = new PerspectiveCamera();\n  const _scene = new Scene();\n  _scene.add(fullscreenQuad);\n  if (!renderer) {\n    renderer = _renderer = new WebGLRenderer({\n      antialias: false\n    });\n  }\n  renderer.setSize(Math.min(texture.image.width, maxTextureSize), Math.min(texture.image.height, maxTextureSize));\n  renderer.clear();\n  renderer.render(_scene, _camera);\n  const readableTexture = new Texture(renderer.domElement);\n  readableTexture.minFilter = texture.minFilter;\n  readableTexture.magFilter = texture.magFilter;\n  readableTexture.wrapS = texture.wrapS;\n  readableTexture.wrapT = texture.wrapT;\n  readableTexture.name = texture.name;\n  if (_renderer) {\n    _renderer.dispose();\n    _renderer = null;\n  }\n  return readableTexture;\n}\nconst KHR_mesh_quantization_ExtraAttrTypes = {\n  POSITION: [\"byte\", \"byte normalized\", \"unsigned byte\", \"unsigned byte normalized\", \"short\", \"short normalized\", \"unsigned short\", \"unsigned short normalized\"],\n  NORMAL: [\"byte normalized\", \"short normalized\"],\n  TANGENT: [\"byte normalized\", \"short normalized\"],\n  TEXCOORD: [\"byte\", \"byte normalized\", \"unsigned byte\", \"short\", \"short normalized\", \"unsigned short\"]\n};\nclass GLTFExporter {\n  constructor() {\n    this.pluginCallbacks = [];\n    this.register(function (writer) {\n      return new GLTFLightExtension(writer);\n    });\n    this.register(function (writer) {\n      return new GLTFMaterialsUnlitExtension(writer);\n    });\n    this.register(function (writer) {\n      return new GLTFMaterialsTransmissionExtension(writer);\n    });\n    this.register(function (writer) {\n      return new GLTFMaterialsVolumeExtension(writer);\n    });\n    this.register(function (writer) {\n      return new GLTFMaterialsIorExtension(writer);\n    });\n    this.register(function (writer) {\n      return new GLTFMaterialsSpecularExtension(writer);\n    });\n    this.register(function (writer) {\n      return new GLTFMaterialsClearcoatExtension(writer);\n    });\n    this.register(function (writer) {\n      return new GLTFMaterialsIridescenceExtension(writer);\n    });\n    this.register(function (writer) {\n      return new GLTFMaterialsSheenExtension(writer);\n    });\n    this.register(function (writer) {\n      return new GLTFMaterialsAnisotropyExtension(writer);\n    });\n    this.register(function (writer) {\n      return new GLTFMaterialsEmissiveStrengthExtension(writer);\n    });\n  }\n  register(callback) {\n    if (this.pluginCallbacks.indexOf(callback) === -1) {\n      this.pluginCallbacks.push(callback);\n    }\n    return this;\n  }\n  unregister(callback) {\n    if (this.pluginCallbacks.indexOf(callback) !== -1) {\n      this.pluginCallbacks.splice(this.pluginCallbacks.indexOf(callback), 1);\n    }\n    return this;\n  }\n  /**\n   * Parse scenes and generate GLTF output\n   * @param  {Scene or [THREE.Scenes]} input   Scene or Array of THREE.Scenes\n   * @param  {Function} onDone  Callback on completed\n   * @param  {Function} onError  Callback on errors\n   * @param  {Object} options options\n   */\n  parse(input, onDone, onError, options) {\n    const writer = new GLTFWriter();\n    const plugins = [];\n    for (let i = 0, il = this.pluginCallbacks.length; i < il; i++) {\n      plugins.push(this.pluginCallbacks[i](writer));\n    }\n    writer.setPlugins(plugins);\n    writer.write(input, onDone, options).catch(onError);\n  }\n  parseAsync(input, options) {\n    const scope = this;\n    return new Promise(function (resolve, reject) {\n      scope.parse(input, resolve, reject, options);\n    });\n  }\n}\nconst WEBGL_CONSTANTS = {\n  POINTS: 0,\n  LINES: 1,\n  LINE_LOOP: 2,\n  LINE_STRIP: 3,\n  TRIANGLES: 4,\n  TRIANGLE_STRIP: 5,\n  TRIANGLE_FAN: 6,\n  BYTE: 5120,\n  UNSIGNED_BYTE: 5121,\n  SHORT: 5122,\n  UNSIGNED_SHORT: 5123,\n  INT: 5124,\n  UNSIGNED_INT: 5125,\n  FLOAT: 5126,\n  ARRAY_BUFFER: 34962,\n  ELEMENT_ARRAY_BUFFER: 34963,\n  NEAREST: 9728,\n  LINEAR: 9729,\n  NEAREST_MIPMAP_NEAREST: 9984,\n  LINEAR_MIPMAP_NEAREST: 9985,\n  NEAREST_MIPMAP_LINEAR: 9986,\n  LINEAR_MIPMAP_LINEAR: 9987,\n  CLAMP_TO_EDGE: 33071,\n  MIRRORED_REPEAT: 33648,\n  REPEAT: 10497\n};\nconst KHR_MESH_QUANTIZATION = \"KHR_mesh_quantization\";\nconst THREE_TO_WEBGL = {};\nTHREE_TO_WEBGL[NearestFilter] = WEBGL_CONSTANTS.NEAREST;\nTHREE_TO_WEBGL[NearestMipmapNearestFilter] = WEBGL_CONSTANTS.NEAREST_MIPMAP_NEAREST;\nTHREE_TO_WEBGL[NearestMipmapLinearFilter] = WEBGL_CONSTANTS.NEAREST_MIPMAP_LINEAR;\nTHREE_TO_WEBGL[LinearFilter] = WEBGL_CONSTANTS.LINEAR;\nTHREE_TO_WEBGL[LinearMipmapNearestFilter] = WEBGL_CONSTANTS.LINEAR_MIPMAP_NEAREST;\nTHREE_TO_WEBGL[LinearMipmapLinearFilter] = WEBGL_CONSTANTS.LINEAR_MIPMAP_LINEAR;\nTHREE_TO_WEBGL[ClampToEdgeWrapping] = WEBGL_CONSTANTS.CLAMP_TO_EDGE;\nTHREE_TO_WEBGL[RepeatWrapping] = WEBGL_CONSTANTS.REPEAT;\nTHREE_TO_WEBGL[MirroredRepeatWrapping] = WEBGL_CONSTANTS.MIRRORED_REPEAT;\nconst PATH_PROPERTIES = {\n  scale: \"scale\",\n  position: \"translation\",\n  quaternion: \"rotation\",\n  morphTargetInfluences: \"weights\"\n};\nconst DEFAULT_SPECULAR_COLOR = new Color();\nconst GLB_HEADER_BYTES = 12;\nconst GLB_HEADER_MAGIC = 1179937895;\nconst GLB_VERSION = 2;\nconst GLB_CHUNK_PREFIX_BYTES = 8;\nconst GLB_CHUNK_TYPE_JSON = 1313821514;\nconst GLB_CHUNK_TYPE_BIN = 5130562;\nfunction equalArray(array1, array2) {\n  return array1.length === array2.length && array1.every(function (element, index) {\n    return element === array2[index];\n  });\n}\nfunction stringToArrayBuffer(text) {\n  return new TextEncoder().encode(text).buffer;\n}\nfunction isIdentityMatrix(matrix) {\n  return equalArray(matrix.elements, [1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1]);\n}\nfunction getMinMax(attribute, start, count) {\n  const output = {\n    min: new Array(attribute.itemSize).fill(Number.POSITIVE_INFINITY),\n    max: new Array(attribute.itemSize).fill(Number.NEGATIVE_INFINITY)\n  };\n  for (let i = start; i < start + count; i++) {\n    for (let a = 0; a < attribute.itemSize; a++) {\n      let value;\n      if (attribute.itemSize > 4) {\n        value = attribute.array[i * attribute.itemSize + a];\n      } else {\n        if (a === 0) value = attribute.getX(i);else if (a === 1) value = attribute.getY(i);else if (a === 2) value = attribute.getZ(i);else if (a === 3) value = attribute.getW(i);\n        if (attribute.normalized === true) {\n          value = MathUtils.normalize(value, attribute.array);\n        }\n      }\n      output.min[a] = Math.min(output.min[a], value);\n      output.max[a] = Math.max(output.max[a], value);\n    }\n  }\n  return output;\n}\nfunction getPaddedBufferSize(bufferSize) {\n  return Math.ceil(bufferSize / 4) * 4;\n}\nfunction getPaddedArrayBuffer(arrayBuffer) {\n  let paddingByte = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n  const paddedLength = getPaddedBufferSize(arrayBuffer.byteLength);\n  if (paddedLength !== arrayBuffer.byteLength) {\n    const array = new Uint8Array(paddedLength);\n    array.set(new Uint8Array(arrayBuffer));\n    if (paddingByte !== 0) {\n      for (let i = arrayBuffer.byteLength; i < paddedLength; i++) {\n        array[i] = paddingByte;\n      }\n    }\n    return array.buffer;\n  }\n  return arrayBuffer;\n}\nfunction getCanvas() {\n  if (typeof document === \"undefined\" && typeof OffscreenCanvas !== \"undefined\") {\n    return new OffscreenCanvas(1, 1);\n  }\n  return document.createElement(\"canvas\");\n}\nfunction getToBlobPromise(canvas, mimeType) {\n  if (canvas.toBlob !== void 0) {\n    return new Promise(resolve => canvas.toBlob(resolve, mimeType));\n  }\n  let quality;\n  if (mimeType === \"image/jpeg\") {\n    quality = 0.92;\n  } else if (mimeType === \"image/webp\") {\n    quality = 0.8;\n  }\n  return canvas.convertToBlob({\n    type: mimeType,\n    quality\n  });\n}\nclass GLTFWriter {\n  constructor() {\n    this.plugins = [];\n    this.options = {};\n    this.pending = [];\n    this.buffers = [];\n    this.byteOffset = 0;\n    this.buffers = [];\n    this.nodeMap = /* @__PURE__ */new Map();\n    this.skins = [];\n    this.extensionsUsed = {};\n    this.extensionsRequired = {};\n    this.uids = /* @__PURE__ */new Map();\n    this.uid = 0;\n    this.json = {\n      asset: {\n        version: \"2.0\",\n        generator: \"THREE.GLTFExporter\"\n      }\n    };\n    this.cache = {\n      meshes: /* @__PURE__ */new Map(),\n      attributes: /* @__PURE__ */new Map(),\n      attributesNormalized: /* @__PURE__ */new Map(),\n      materials: /* @__PURE__ */new Map(),\n      textures: /* @__PURE__ */new Map(),\n      images: /* @__PURE__ */new Map()\n    };\n  }\n  setPlugins(plugins) {\n    this.plugins = plugins;\n  }\n  /**\n   * Parse scenes and generate GLTF output\n   * @param  {Scene or [THREE.Scenes]} input   Scene or Array of THREE.Scenes\n   * @param  {Function} onDone  Callback on completed\n   * @param  {Object} options options\n   */\n  async write(input, onDone) {\n    let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    this.options = Object.assign({\n      // default options\n      binary: false,\n      trs: false,\n      onlyVisible: true,\n      maxTextureSize: Infinity,\n      animations: [],\n      includeCustomExtensions: false\n    }, options);\n    if (this.options.animations.length > 0) {\n      this.options.trs = true;\n    }\n    this.processInput(input);\n    await Promise.all(this.pending);\n    const writer = this;\n    const buffers = writer.buffers;\n    const json = writer.json;\n    options = writer.options;\n    const extensionsUsed = writer.extensionsUsed;\n    const extensionsRequired = writer.extensionsRequired;\n    const blob = new Blob(buffers, {\n      type: \"application/octet-stream\"\n    });\n    const extensionsUsedList = Object.keys(extensionsUsed);\n    const extensionsRequiredList = Object.keys(extensionsRequired);\n    if (extensionsUsedList.length > 0) json.extensionsUsed = extensionsUsedList;\n    if (extensionsRequiredList.length > 0) json.extensionsRequired = extensionsRequiredList;\n    if (json.buffers && json.buffers.length > 0) json.buffers[0].byteLength = blob.size;\n    if (options.binary === true) {\n      const reader = new FileReader();\n      reader.readAsArrayBuffer(blob);\n      reader.onloadend = function () {\n        const binaryChunk = getPaddedArrayBuffer(reader.result);\n        const binaryChunkPrefix = new DataView(new ArrayBuffer(GLB_CHUNK_PREFIX_BYTES));\n        binaryChunkPrefix.setUint32(0, binaryChunk.byteLength, true);\n        binaryChunkPrefix.setUint32(4, GLB_CHUNK_TYPE_BIN, true);\n        const jsonChunk = getPaddedArrayBuffer(stringToArrayBuffer(JSON.stringify(json)), 32);\n        const jsonChunkPrefix = new DataView(new ArrayBuffer(GLB_CHUNK_PREFIX_BYTES));\n        jsonChunkPrefix.setUint32(0, jsonChunk.byteLength, true);\n        jsonChunkPrefix.setUint32(4, GLB_CHUNK_TYPE_JSON, true);\n        const header = new ArrayBuffer(GLB_HEADER_BYTES);\n        const headerView = new DataView(header);\n        headerView.setUint32(0, GLB_HEADER_MAGIC, true);\n        headerView.setUint32(4, GLB_VERSION, true);\n        const totalByteLength = GLB_HEADER_BYTES + jsonChunkPrefix.byteLength + jsonChunk.byteLength + binaryChunkPrefix.byteLength + binaryChunk.byteLength;\n        headerView.setUint32(8, totalByteLength, true);\n        const glbBlob = new Blob([header, jsonChunkPrefix, jsonChunk, binaryChunkPrefix, binaryChunk], {\n          type: \"application/octet-stream\"\n        });\n        const glbReader = new FileReader();\n        glbReader.readAsArrayBuffer(glbBlob);\n        glbReader.onloadend = function () {\n          onDone(glbReader.result);\n        };\n      };\n    } else {\n      if (json.buffers && json.buffers.length > 0) {\n        const reader = new FileReader();\n        reader.readAsDataURL(blob);\n        reader.onloadend = function () {\n          const base64data = reader.result;\n          json.buffers[0].uri = base64data;\n          onDone(json);\n        };\n      } else {\n        onDone(json);\n      }\n    }\n  }\n  /**\n   * Serializes a userData.\n   *\n   * @param {THREE.Object3D|THREE.Material} object\n   * @param {Object} objectDef\n   */\n  serializeUserData(object, objectDef) {\n    if (Object.keys(object.userData).length === 0) return;\n    const options = this.options;\n    const extensionsUsed = this.extensionsUsed;\n    try {\n      const json = JSON.parse(JSON.stringify(object.userData));\n      if (options.includeCustomExtensions && json.gltfExtensions) {\n        if (objectDef.extensions === void 0) objectDef.extensions = {};\n        for (const extensionName in json.gltfExtensions) {\n          objectDef.extensions[extensionName] = json.gltfExtensions[extensionName];\n          extensionsUsed[extensionName] = true;\n        }\n        delete json.gltfExtensions;\n      }\n      if (Object.keys(json).length > 0) objectDef.extras = json;\n    } catch (error) {\n      console.warn(\"THREE.GLTFExporter: userData of '\" + object.name + \"' won't be serialized because of JSON.stringify error - \" + error.message);\n    }\n  }\n  /**\n   * Returns ids for buffer attributes.\n   * @param  {Object} object\n   * @return {Integer}\n   */\n  getUID(attribute) {\n    let isRelativeCopy = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n    if (this.uids.has(attribute) === false) {\n      const uids2 = /* @__PURE__ */new Map();\n      uids2.set(true, this.uid++);\n      uids2.set(false, this.uid++);\n      this.uids.set(attribute, uids2);\n    }\n    const uids = this.uids.get(attribute);\n    return uids.get(isRelativeCopy);\n  }\n  /**\n   * Checks if normal attribute values are normalized.\n   *\n   * @param {BufferAttribute} normal\n   * @returns {Boolean}\n   */\n  isNormalizedNormalAttribute(normal) {\n    const cache = this.cache;\n    if (cache.attributesNormalized.has(normal)) return false;\n    const v = new Vector3();\n    for (let i = 0, il = normal.count; i < il; i++) {\n      if (Math.abs(v.fromBufferAttribute(normal, i).length() - 1) > 5e-4) return false;\n    }\n    return true;\n  }\n  /**\n   * Creates normalized normal buffer attribute.\n   *\n   * @param {BufferAttribute} normal\n   * @returns {BufferAttribute}\n   *\n   */\n  createNormalizedNormalAttribute(normal) {\n    const cache = this.cache;\n    if (cache.attributesNormalized.has(normal)) return cache.attributesNormalized.get(normal);\n    const attribute = normal.clone();\n    const v = new Vector3();\n    for (let i = 0, il = attribute.count; i < il; i++) {\n      v.fromBufferAttribute(attribute, i);\n      if (v.x === 0 && v.y === 0 && v.z === 0) {\n        v.setX(1);\n      } else {\n        v.normalize();\n      }\n      attribute.setXYZ(i, v.x, v.y, v.z);\n    }\n    cache.attributesNormalized.set(normal, attribute);\n    return attribute;\n  }\n  /**\n   * Applies a texture transform, if present, to the map definition. Requires\n   * the KHR_texture_transform extension.\n   *\n   * @param {Object} mapDef\n   * @param {THREE.Texture} texture\n   */\n  applyTextureTransform(mapDef, texture) {\n    let didTransform = false;\n    const transformDef = {};\n    if (texture.offset.x !== 0 || texture.offset.y !== 0) {\n      transformDef.offset = texture.offset.toArray();\n      didTransform = true;\n    }\n    if (texture.rotation !== 0) {\n      transformDef.rotation = texture.rotation;\n      didTransform = true;\n    }\n    if (texture.repeat.x !== 1 || texture.repeat.y !== 1) {\n      transformDef.scale = texture.repeat.toArray();\n      didTransform = true;\n    }\n    if (didTransform) {\n      mapDef.extensions = mapDef.extensions || {};\n      mapDef.extensions[\"KHR_texture_transform\"] = transformDef;\n      this.extensionsUsed[\"KHR_texture_transform\"] = true;\n    }\n  }\n  buildMetalRoughTexture(metalnessMap, roughnessMap) {\n    if (metalnessMap === roughnessMap) return metalnessMap;\n    function getEncodingConversion(map) {\n      if (\"colorSpace\" in map ? map.colorSpace === \"srgb\" : map.encoding === 3001) {\n        return function SRGBToLinear(c) {\n          return c < 0.04045 ? c * 0.0773993808 : Math.pow(c * 0.9478672986 + 0.0521327014, 2.4);\n        };\n      }\n      return function LinearToLinear(c) {\n        return c;\n      };\n    }\n    console.warn(\"THREE.GLTFExporter: Merged metalnessMap and roughnessMap textures.\");\n    if (metalnessMap instanceof CompressedTexture) {\n      metalnessMap = decompress(metalnessMap);\n    }\n    if (roughnessMap instanceof CompressedTexture) {\n      roughnessMap = decompress(roughnessMap);\n    }\n    const metalness = metalnessMap ? metalnessMap.image : null;\n    const roughness = roughnessMap ? roughnessMap.image : null;\n    const width = Math.max(metalness ? metalness.width : 0, roughness ? roughness.width : 0);\n    const height = Math.max(metalness ? metalness.height : 0, roughness ? roughness.height : 0);\n    const canvas = getCanvas();\n    canvas.width = width;\n    canvas.height = height;\n    const context = canvas.getContext(\"2d\");\n    context.fillStyle = \"#00ffff\";\n    context.fillRect(0, 0, width, height);\n    const composite = context.getImageData(0, 0, width, height);\n    if (metalness) {\n      context.drawImage(metalness, 0, 0, width, height);\n      const convert = getEncodingConversion(metalnessMap);\n      const data = context.getImageData(0, 0, width, height).data;\n      for (let i = 2; i < data.length; i += 4) {\n        composite.data[i] = convert(data[i] / 256) * 256;\n      }\n    }\n    if (roughness) {\n      context.drawImage(roughness, 0, 0, width, height);\n      const convert = getEncodingConversion(roughnessMap);\n      const data = context.getImageData(0, 0, width, height).data;\n      for (let i = 1; i < data.length; i += 4) {\n        composite.data[i] = convert(data[i] / 256) * 256;\n      }\n    }\n    context.putImageData(composite, 0, 0);\n    const reference = metalnessMap || roughnessMap;\n    const texture = reference.clone();\n    texture.source = new Texture(canvas).source;\n    if (\"colorSpace\" in texture) texture.colorSpace = \"\";else texture.encoding = 3e3;\n    texture.channel = (metalnessMap || roughnessMap).channel;\n    if (metalnessMap && roughnessMap && metalnessMap.channel !== roughnessMap.channel) {\n      console.warn(\"THREE.GLTFExporter: UV channels for metalnessMap and roughnessMap textures must match.\");\n    }\n    return texture;\n  }\n  /**\n   * Process a buffer to append to the default one.\n   * @param  {ArrayBuffer} buffer\n   * @return {Integer}\n   */\n  processBuffer(buffer) {\n    const json = this.json;\n    const buffers = this.buffers;\n    if (!json.buffers) json.buffers = [{\n      byteLength: 0\n    }];\n    buffers.push(buffer);\n    return 0;\n  }\n  /**\n   * Process and generate a BufferView\n   * @param  {BufferAttribute} attribute\n   * @param  {number} componentType\n   * @param  {number} start\n   * @param  {number} count\n   * @param  {number} target (Optional) Target usage of the BufferView\n   * @return {Object}\n   */\n  processBufferView(attribute, componentType, start, count, target) {\n    const json = this.json;\n    if (!json.bufferViews) json.bufferViews = [];\n    let componentSize;\n    switch (componentType) {\n      case WEBGL_CONSTANTS.BYTE:\n      case WEBGL_CONSTANTS.UNSIGNED_BYTE:\n        componentSize = 1;\n        break;\n      case WEBGL_CONSTANTS.SHORT:\n      case WEBGL_CONSTANTS.UNSIGNED_SHORT:\n        componentSize = 2;\n        break;\n      default:\n        componentSize = 4;\n    }\n    const byteLength = getPaddedBufferSize(count * attribute.itemSize * componentSize);\n    const dataView = new DataView(new ArrayBuffer(byteLength));\n    let offset = 0;\n    for (let i = start; i < start + count; i++) {\n      for (let a = 0; a < attribute.itemSize; a++) {\n        let value;\n        if (attribute.itemSize > 4) {\n          value = attribute.array[i * attribute.itemSize + a];\n        } else {\n          if (a === 0) value = attribute.getX(i);else if (a === 1) value = attribute.getY(i);else if (a === 2) value = attribute.getZ(i);else if (a === 3) value = attribute.getW(i);\n          if (attribute.normalized === true) {\n            value = MathUtils.normalize(value, attribute.array);\n          }\n        }\n        if (componentType === WEBGL_CONSTANTS.FLOAT) {\n          dataView.setFloat32(offset, value, true);\n        } else if (componentType === WEBGL_CONSTANTS.INT) {\n          dataView.setInt32(offset, value, true);\n        } else if (componentType === WEBGL_CONSTANTS.UNSIGNED_INT) {\n          dataView.setUint32(offset, value, true);\n        } else if (componentType === WEBGL_CONSTANTS.SHORT) {\n          dataView.setInt16(offset, value, true);\n        } else if (componentType === WEBGL_CONSTANTS.UNSIGNED_SHORT) {\n          dataView.setUint16(offset, value, true);\n        } else if (componentType === WEBGL_CONSTANTS.BYTE) {\n          dataView.setInt8(offset, value);\n        } else if (componentType === WEBGL_CONSTANTS.UNSIGNED_BYTE) {\n          dataView.setUint8(offset, value);\n        }\n        offset += componentSize;\n      }\n    }\n    const bufferViewDef = {\n      buffer: this.processBuffer(dataView.buffer),\n      byteOffset: this.byteOffset,\n      byteLength\n    };\n    if (target !== void 0) bufferViewDef.target = target;\n    if (target === WEBGL_CONSTANTS.ARRAY_BUFFER) {\n      bufferViewDef.byteStride = attribute.itemSize * componentSize;\n    }\n    this.byteOffset += byteLength;\n    json.bufferViews.push(bufferViewDef);\n    const output = {\n      id: json.bufferViews.length - 1,\n      byteLength: 0\n    };\n    return output;\n  }\n  /**\n   * Process and generate a BufferView from an image Blob.\n   * @param {Blob} blob\n   * @return {Promise<Integer>}\n   */\n  processBufferViewImage(blob) {\n    const writer = this;\n    const json = writer.json;\n    if (!json.bufferViews) json.bufferViews = [];\n    return new Promise(function (resolve) {\n      const reader = new FileReader();\n      reader.readAsArrayBuffer(blob);\n      reader.onloadend = function () {\n        const buffer = getPaddedArrayBuffer(reader.result);\n        const bufferViewDef = {\n          buffer: writer.processBuffer(buffer),\n          byteOffset: writer.byteOffset,\n          byteLength: buffer.byteLength\n        };\n        writer.byteOffset += buffer.byteLength;\n        resolve(json.bufferViews.push(bufferViewDef) - 1);\n      };\n    });\n  }\n  /**\n   * Process attribute to generate an accessor\n   * @param  {BufferAttribute} attribute Attribute to process\n   * @param  {THREE.BufferGeometry} geometry (Optional) Geometry used for truncated draw range\n   * @param  {Integer} start (Optional)\n   * @param  {Integer} count (Optional)\n   * @return {Integer|null} Index of the processed accessor on the \"accessors\" array\n   */\n  processAccessor(attribute, geometry, start, count) {\n    const json = this.json;\n    const types = {\n      1: \"SCALAR\",\n      2: \"VEC2\",\n      3: \"VEC3\",\n      4: \"VEC4\",\n      9: \"MAT3\",\n      16: \"MAT4\"\n    };\n    let componentType;\n    if (attribute.array.constructor === Float32Array) {\n      componentType = WEBGL_CONSTANTS.FLOAT;\n    } else if (attribute.array.constructor === Int32Array) {\n      componentType = WEBGL_CONSTANTS.INT;\n    } else if (attribute.array.constructor === Uint32Array) {\n      componentType = WEBGL_CONSTANTS.UNSIGNED_INT;\n    } else if (attribute.array.constructor === Int16Array) {\n      componentType = WEBGL_CONSTANTS.SHORT;\n    } else if (attribute.array.constructor === Uint16Array) {\n      componentType = WEBGL_CONSTANTS.UNSIGNED_SHORT;\n    } else if (attribute.array.constructor === Int8Array) {\n      componentType = WEBGL_CONSTANTS.BYTE;\n    } else if (attribute.array.constructor === Uint8Array) {\n      componentType = WEBGL_CONSTANTS.UNSIGNED_BYTE;\n    } else {\n      throw new Error(\"THREE.GLTFExporter: Unsupported bufferAttribute component type: \" + attribute.array.constructor.name);\n    }\n    if (start === void 0) start = 0;\n    if (count === void 0) count = attribute.count;\n    if (count === 0) return null;\n    const minMax = getMinMax(attribute, start, count);\n    let bufferViewTarget;\n    if (geometry !== void 0) {\n      bufferViewTarget = attribute === geometry.index ? WEBGL_CONSTANTS.ELEMENT_ARRAY_BUFFER : WEBGL_CONSTANTS.ARRAY_BUFFER;\n    }\n    const bufferView = this.processBufferView(attribute, componentType, start, count, bufferViewTarget);\n    const accessorDef = {\n      bufferView: bufferView.id,\n      byteOffset: bufferView.byteOffset,\n      componentType,\n      count,\n      max: minMax.max,\n      min: minMax.min,\n      type: types[attribute.itemSize]\n    };\n    if (attribute.normalized === true) accessorDef.normalized = true;\n    if (!json.accessors) json.accessors = [];\n    return json.accessors.push(accessorDef) - 1;\n  }\n  /**\n   * Process image\n   * @param  {Image} image to process\n   * @param  {Integer} format of the image (RGBAFormat)\n   * @param  {Boolean} flipY before writing out the image\n   * @param  {String} mimeType export format\n   * @return {Integer}     Index of the processed texture in the \"images\" array\n   */\n  processImage(image, format, flipY) {\n    let mimeType = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : \"image/png\";\n    if (image !== null) {\n      const writer = this;\n      const cache = writer.cache;\n      const json = writer.json;\n      const options = writer.options;\n      const pending = writer.pending;\n      if (!cache.images.has(image)) cache.images.set(image, {});\n      const cachedImages = cache.images.get(image);\n      const key = mimeType + \":flipY/\" + flipY.toString();\n      if (cachedImages[key] !== void 0) return cachedImages[key];\n      if (!json.images) json.images = [];\n      const imageDef = {\n        mimeType\n      };\n      const canvas = getCanvas();\n      canvas.width = Math.min(image.width, options.maxTextureSize);\n      canvas.height = Math.min(image.height, options.maxTextureSize);\n      const ctx = canvas.getContext(\"2d\");\n      if (flipY === true) {\n        ctx.translate(0, canvas.height);\n        ctx.scale(1, -1);\n      }\n      if (image.data !== void 0) {\n        if (format !== RGBAFormat) {\n          console.error(\"GLTFExporter: Only RGBAFormat is supported.\", format);\n        }\n        if (image.width > options.maxTextureSize || image.height > options.maxTextureSize) {\n          console.warn(\"GLTFExporter: Image size is bigger than maxTextureSize\", image);\n        }\n        const data = new Uint8ClampedArray(image.height * image.width * 4);\n        for (let i = 0; i < data.length; i += 4) {\n          data[i + 0] = image.data[i + 0];\n          data[i + 1] = image.data[i + 1];\n          data[i + 2] = image.data[i + 2];\n          data[i + 3] = image.data[i + 3];\n        }\n        ctx.putImageData(new ImageData(data, image.width, image.height), 0, 0);\n      } else {\n        ctx.drawImage(image, 0, 0, canvas.width, canvas.height);\n      }\n      if (options.binary === true) {\n        pending.push(getToBlobPromise(canvas, mimeType).then(blob => writer.processBufferViewImage(blob)).then(bufferViewIndex => {\n          imageDef.bufferView = bufferViewIndex;\n        }));\n      } else {\n        if (canvas.toDataURL !== void 0) {\n          imageDef.uri = canvas.toDataURL(mimeType);\n        } else {\n          pending.push(getToBlobPromise(canvas, mimeType).then(blob => new FileReader().readAsDataURL(blob)).then(dataURL => {\n            imageDef.uri = dataURL;\n          }));\n        }\n      }\n      const index = json.images.push(imageDef) - 1;\n      cachedImages[key] = index;\n      return index;\n    } else {\n      throw new Error(\"THREE.GLTFExporter: No valid image data found. Unable to process texture.\");\n    }\n  }\n  /**\n   * Process sampler\n   * @param  {Texture} map Texture to process\n   * @return {Integer}     Index of the processed texture in the \"samplers\" array\n   */\n  processSampler(map) {\n    const json = this.json;\n    if (!json.samplers) json.samplers = [];\n    const samplerDef = {\n      magFilter: THREE_TO_WEBGL[map.magFilter],\n      minFilter: THREE_TO_WEBGL[map.minFilter],\n      wrapS: THREE_TO_WEBGL[map.wrapS],\n      wrapT: THREE_TO_WEBGL[map.wrapT]\n    };\n    return json.samplers.push(samplerDef) - 1;\n  }\n  /**\n   * Process texture\n   * @param  {Texture} map Map to process\n   * @return {Integer} Index of the processed texture in the \"textures\" array\n   */\n  processTexture(map) {\n    const writer = this;\n    const options = writer.options;\n    const cache = this.cache;\n    const json = this.json;\n    if (cache.textures.has(map)) return cache.textures.get(map);\n    if (!json.textures) json.textures = [];\n    if (map instanceof CompressedTexture) {\n      map = decompress(map, options.maxTextureSize);\n    }\n    let mimeType = map.userData.mimeType;\n    if (mimeType === \"image/webp\") mimeType = \"image/png\";\n    const textureDef = {\n      sampler: this.processSampler(map),\n      source: this.processImage(map.image, map.format, map.flipY, mimeType)\n    };\n    if (map.name) textureDef.name = map.name;\n    this._invokeAll(function (ext) {\n      ext.writeTexture && ext.writeTexture(map, textureDef);\n    });\n    const index = json.textures.push(textureDef) - 1;\n    cache.textures.set(map, index);\n    return index;\n  }\n  /**\n   * Process material\n   * @param  {THREE.Material} material Material to process\n   * @return {Integer|null} Index of the processed material in the \"materials\" array\n   */\n  processMaterial(material) {\n    const cache = this.cache;\n    const json = this.json;\n    if (cache.materials.has(material)) return cache.materials.get(material);\n    if (material.isShaderMaterial) {\n      console.warn(\"GLTFExporter: THREE.ShaderMaterial not supported.\");\n      return null;\n    }\n    if (!json.materials) json.materials = [];\n    const materialDef = {\n      pbrMetallicRoughness: {}\n    };\n    if (material.isMeshStandardMaterial !== true && material.isMeshBasicMaterial !== true) {\n      console.warn(\"GLTFExporter: Use MeshStandardMaterial or MeshBasicMaterial for best results.\");\n    }\n    const color = material.color.toArray().concat([material.opacity]);\n    if (!equalArray(color, [1, 1, 1, 1])) {\n      materialDef.pbrMetallicRoughness.baseColorFactor = color;\n    }\n    if (material.isMeshStandardMaterial) {\n      materialDef.pbrMetallicRoughness.metallicFactor = material.metalness;\n      materialDef.pbrMetallicRoughness.roughnessFactor = material.roughness;\n    } else {\n      materialDef.pbrMetallicRoughness.metallicFactor = 0.5;\n      materialDef.pbrMetallicRoughness.roughnessFactor = 0.5;\n    }\n    if (material.metalnessMap || material.roughnessMap) {\n      const metalRoughTexture = this.buildMetalRoughTexture(material.metalnessMap, material.roughnessMap);\n      const metalRoughMapDef = {\n        index: this.processTexture(metalRoughTexture),\n        channel: metalRoughTexture.channel\n      };\n      this.applyTextureTransform(metalRoughMapDef, metalRoughTexture);\n      materialDef.pbrMetallicRoughness.metallicRoughnessTexture = metalRoughMapDef;\n    }\n    if (material.map) {\n      const baseColorMapDef = {\n        index: this.processTexture(material.map),\n        texCoord: material.map.channel\n      };\n      this.applyTextureTransform(baseColorMapDef, material.map);\n      materialDef.pbrMetallicRoughness.baseColorTexture = baseColorMapDef;\n    }\n    if (material.emissive) {\n      const emissive = material.emissive;\n      const maxEmissiveComponent = Math.max(emissive.r, emissive.g, emissive.b);\n      if (maxEmissiveComponent > 0) {\n        materialDef.emissiveFactor = material.emissive.toArray();\n      }\n      if (material.emissiveMap) {\n        const emissiveMapDef = {\n          index: this.processTexture(material.emissiveMap),\n          texCoord: material.emissiveMap.channel\n        };\n        this.applyTextureTransform(emissiveMapDef, material.emissiveMap);\n        materialDef.emissiveTexture = emissiveMapDef;\n      }\n    }\n    if (material.normalMap) {\n      const normalMapDef = {\n        index: this.processTexture(material.normalMap),\n        texCoord: material.normalMap.channel\n      };\n      if (material.normalScale && material.normalScale.x !== 1) {\n        normalMapDef.scale = material.normalScale.x;\n      }\n      this.applyTextureTransform(normalMapDef, material.normalMap);\n      materialDef.normalTexture = normalMapDef;\n    }\n    if (material.aoMap) {\n      const occlusionMapDef = {\n        index: this.processTexture(material.aoMap),\n        texCoord: material.aoMap.channel\n      };\n      if (material.aoMapIntensity !== 1) {\n        occlusionMapDef.strength = material.aoMapIntensity;\n      }\n      this.applyTextureTransform(occlusionMapDef, material.aoMap);\n      materialDef.occlusionTexture = occlusionMapDef;\n    }\n    if (material.transparent) {\n      materialDef.alphaMode = \"BLEND\";\n    } else {\n      if (material.alphaTest > 0) {\n        materialDef.alphaMode = \"MASK\";\n        materialDef.alphaCutoff = material.alphaTest;\n      }\n    }\n    if (material.side === DoubleSide) materialDef.doubleSided = true;\n    if (material.name !== \"\") materialDef.name = material.name;\n    this.serializeUserData(material, materialDef);\n    this._invokeAll(function (ext) {\n      ext.writeMaterial && ext.writeMaterial(material, materialDef);\n    });\n    const index = json.materials.push(materialDef) - 1;\n    cache.materials.set(material, index);\n    return index;\n  }\n  /**\n   * Process mesh\n   * @param  {THREE.Mesh} mesh Mesh to process\n   * @return {Integer|null} Index of the processed mesh in the \"meshes\" array\n   */\n  processMesh(mesh) {\n    const cache = this.cache;\n    const json = this.json;\n    const meshCacheKeyParts = [mesh.geometry.uuid];\n    if (Array.isArray(mesh.material)) {\n      for (let i = 0, l = mesh.material.length; i < l; i++) {\n        meshCacheKeyParts.push(mesh.material[i].uuid);\n      }\n    } else {\n      meshCacheKeyParts.push(mesh.material.uuid);\n    }\n    const meshCacheKey = meshCacheKeyParts.join(\":\");\n    if (cache.meshes.has(meshCacheKey)) return cache.meshes.get(meshCacheKey);\n    const geometry = mesh.geometry;\n    let mode;\n    if (mesh.isLineSegments) {\n      mode = WEBGL_CONSTANTS.LINES;\n    } else if (mesh.isLineLoop) {\n      mode = WEBGL_CONSTANTS.LINE_LOOP;\n    } else if (mesh.isLine) {\n      mode = WEBGL_CONSTANTS.LINE_STRIP;\n    } else if (mesh.isPoints) {\n      mode = WEBGL_CONSTANTS.POINTS;\n    } else {\n      mode = mesh.material.wireframe ? WEBGL_CONSTANTS.LINES : WEBGL_CONSTANTS.TRIANGLES;\n    }\n    const meshDef = {};\n    const attributes = {};\n    const primitives = [];\n    const targets = [];\n    const nameConversion = {\n      uv: \"TEXCOORD_0\",\n      [REVISION.replace(/\\D+/g, \"\") >= 152 ? \"uv1\" : \"uv2\"]: \"TEXCOORD_1\",\n      color: \"COLOR_0\",\n      skinWeight: \"WEIGHTS_0\",\n      skinIndex: \"JOINTS_0\"\n    };\n    const originalNormal = geometry.getAttribute(\"normal\");\n    if (originalNormal !== void 0 && !this.isNormalizedNormalAttribute(originalNormal)) {\n      console.warn(\"THREE.GLTFExporter: Creating normalized normal attribute from the non-normalized one.\");\n      geometry.setAttribute(\"normal\", this.createNormalizedNormalAttribute(originalNormal));\n    }\n    let modifiedAttribute = null;\n    for (let attributeName in geometry.attributes) {\n      if (attributeName.slice(0, 5) === \"morph\") continue;\n      const attribute = geometry.attributes[attributeName];\n      attributeName = nameConversion[attributeName] || attributeName.toUpperCase();\n      const validVertexAttributes = /^(POSITION|NORMAL|TANGENT|TEXCOORD_\\d+|COLOR_\\d+|JOINTS_\\d+|WEIGHTS_\\d+)$/;\n      if (!validVertexAttributes.test(attributeName)) attributeName = \"_\" + attributeName;\n      if (cache.attributes.has(this.getUID(attribute))) {\n        attributes[attributeName] = cache.attributes.get(this.getUID(attribute));\n        continue;\n      }\n      modifiedAttribute = null;\n      const array = attribute.array;\n      if (attributeName === \"JOINTS_0\" && !(array instanceof Uint16Array) && !(array instanceof Uint8Array)) {\n        console.warn('GLTFExporter: Attribute \"skinIndex\" converted to type UNSIGNED_SHORT.');\n        modifiedAttribute = new BufferAttribute(new Uint16Array(array), attribute.itemSize, attribute.normalized);\n      }\n      const accessor = this.processAccessor(modifiedAttribute || attribute, geometry);\n      if (accessor !== null) {\n        if (!attributeName.startsWith(\"_\")) {\n          this.detectMeshQuantization(attributeName, attribute);\n        }\n        attributes[attributeName] = accessor;\n        cache.attributes.set(this.getUID(attribute), accessor);\n      }\n    }\n    if (originalNormal !== void 0) geometry.setAttribute(\"normal\", originalNormal);\n    if (Object.keys(attributes).length === 0) return null;\n    if (mesh.morphTargetInfluences !== void 0 && mesh.morphTargetInfluences.length > 0) {\n      const weights = [];\n      const targetNames = [];\n      const reverseDictionary = {};\n      if (mesh.morphTargetDictionary !== void 0) {\n        for (const key in mesh.morphTargetDictionary) {\n          reverseDictionary[mesh.morphTargetDictionary[key]] = key;\n        }\n      }\n      for (let i = 0; i < mesh.morphTargetInfluences.length; ++i) {\n        const target = {};\n        let warned = false;\n        for (const attributeName in geometry.morphAttributes) {\n          if (attributeName !== \"position\" && attributeName !== \"normal\") {\n            if (!warned) {\n              console.warn(\"GLTFExporter: Only POSITION and NORMAL morph are supported.\");\n              warned = true;\n            }\n            continue;\n          }\n          const attribute = geometry.morphAttributes[attributeName][i];\n          const gltfAttributeName = attributeName.toUpperCase();\n          const baseAttribute = geometry.attributes[attributeName];\n          if (cache.attributes.has(this.getUID(attribute, true))) {\n            target[gltfAttributeName] = cache.attributes.get(this.getUID(attribute, true));\n            continue;\n          }\n          const relativeAttribute = attribute.clone();\n          if (!geometry.morphTargetsRelative) {\n            for (let j = 0, jl = attribute.count; j < jl; j++) {\n              for (let a = 0; a < attribute.itemSize; a++) {\n                if (a === 0) relativeAttribute.setX(j, attribute.getX(j) - baseAttribute.getX(j));\n                if (a === 1) relativeAttribute.setY(j, attribute.getY(j) - baseAttribute.getY(j));\n                if (a === 2) relativeAttribute.setZ(j, attribute.getZ(j) - baseAttribute.getZ(j));\n                if (a === 3) relativeAttribute.setW(j, attribute.getW(j) - baseAttribute.getW(j));\n              }\n            }\n          }\n          target[gltfAttributeName] = this.processAccessor(relativeAttribute, geometry);\n          cache.attributes.set(this.getUID(baseAttribute, true), target[gltfAttributeName]);\n        }\n        targets.push(target);\n        weights.push(mesh.morphTargetInfluences[i]);\n        if (mesh.morphTargetDictionary !== void 0) targetNames.push(reverseDictionary[i]);\n      }\n      meshDef.weights = weights;\n      if (targetNames.length > 0) {\n        meshDef.extras = {};\n        meshDef.extras.targetNames = targetNames;\n      }\n    }\n    const isMultiMaterial = Array.isArray(mesh.material);\n    if (isMultiMaterial && geometry.groups.length === 0) return null;\n    const materials = isMultiMaterial ? mesh.material : [mesh.material];\n    const groups = isMultiMaterial ? geometry.groups : [{\n      materialIndex: 0,\n      start: void 0,\n      count: void 0\n    }];\n    for (let i = 0, il = groups.length; i < il; i++) {\n      const primitive = {\n        mode,\n        attributes\n      };\n      this.serializeUserData(geometry, primitive);\n      if (targets.length > 0) primitive.targets = targets;\n      if (geometry.index !== null) {\n        let cacheKey = this.getUID(geometry.index);\n        if (groups[i].start !== void 0 || groups[i].count !== void 0) {\n          cacheKey += \":\" + groups[i].start + \":\" + groups[i].count;\n        }\n        if (cache.attributes.has(cacheKey)) {\n          primitive.indices = cache.attributes.get(cacheKey);\n        } else {\n          primitive.indices = this.processAccessor(geometry.index, geometry, groups[i].start, groups[i].count);\n          cache.attributes.set(cacheKey, primitive.indices);\n        }\n        if (primitive.indices === null) delete primitive.indices;\n      }\n      const material = this.processMaterial(materials[groups[i].materialIndex]);\n      if (material !== null) primitive.material = material;\n      primitives.push(primitive);\n    }\n    meshDef.primitives = primitives;\n    if (!json.meshes) json.meshes = [];\n    this._invokeAll(function (ext) {\n      ext.writeMesh && ext.writeMesh(mesh, meshDef);\n    });\n    const index = json.meshes.push(meshDef) - 1;\n    cache.meshes.set(meshCacheKey, index);\n    return index;\n  }\n  /**\n   * If a vertex attribute with a\n   * [non-standard data type](https://registry.khronos.org/glTF/specs/2.0/glTF-2.0.html#meshes-overview)\n   * is used, it is checked whether it is a valid data type according to the\n   * [KHR_mesh_quantization](https://github.com/KhronosGroup/glTF/blob/main/extensions/2.0/Khronos/KHR_mesh_quantization/README.md)\n   * extension.\n   * In this case the extension is automatically added to the list of used extensions.\n   *\n   * @param {string} attributeName\n   * @param {THREE.BufferAttribute} attribute\n   */\n  detectMeshQuantization(attributeName, attribute) {\n    if (this.extensionsUsed[KHR_MESH_QUANTIZATION]) return;\n    let attrType = void 0;\n    switch (attribute.array.constructor) {\n      case Int8Array:\n        attrType = \"byte\";\n        break;\n      case Uint8Array:\n        attrType = \"unsigned byte\";\n        break;\n      case Int16Array:\n        attrType = \"short\";\n        break;\n      case Uint16Array:\n        attrType = \"unsigned short\";\n        break;\n      default:\n        return;\n    }\n    if (attribute.normalized) attrType += \" normalized\";\n    const attrNamePrefix = attributeName.split(\"_\", 1)[0];\n    if (KHR_mesh_quantization_ExtraAttrTypes[attrNamePrefix] && KHR_mesh_quantization_ExtraAttrTypes[attrNamePrefix].includes(attrType)) {\n      this.extensionsUsed[KHR_MESH_QUANTIZATION] = true;\n      this.extensionsRequired[KHR_MESH_QUANTIZATION] = true;\n    }\n  }\n  /**\n   * Process camera\n   * @param  {THREE.Camera} camera Camera to process\n   * @return {Integer}      Index of the processed mesh in the \"camera\" array\n   */\n  processCamera(camera) {\n    const json = this.json;\n    if (!json.cameras) json.cameras = [];\n    const isOrtho = camera.isOrthographicCamera;\n    const cameraDef = {\n      type: isOrtho ? \"orthographic\" : \"perspective\"\n    };\n    if (isOrtho) {\n      cameraDef.orthographic = {\n        xmag: camera.right * 2,\n        ymag: camera.top * 2,\n        zfar: camera.far <= 0 ? 1e-3 : camera.far,\n        znear: camera.near < 0 ? 0 : camera.near\n      };\n    } else {\n      cameraDef.perspective = {\n        aspectRatio: camera.aspect,\n        yfov: MathUtils.degToRad(camera.fov),\n        zfar: camera.far <= 0 ? 1e-3 : camera.far,\n        znear: camera.near < 0 ? 0 : camera.near\n      };\n    }\n    if (camera.name !== \"\") cameraDef.name = camera.type;\n    return json.cameras.push(cameraDef) - 1;\n  }\n  /**\n   * Creates glTF animation entry from AnimationClip object.\n   *\n   * Status:\n   * - Only properties listed in PATH_PROPERTIES may be animated.\n   *\n   * @param {THREE.AnimationClip} clip\n   * @param {THREE.Object3D} root\n   * @return {number|null}\n   */\n  processAnimation(clip, root) {\n    const json = this.json;\n    const nodeMap = this.nodeMap;\n    if (!json.animations) json.animations = [];\n    clip = GLTFExporter.Utils.mergeMorphTargetTracks(clip.clone(), root);\n    const tracks = clip.tracks;\n    const channels = [];\n    const samplers = [];\n    for (let i = 0; i < tracks.length; ++i) {\n      const track = tracks[i];\n      const trackBinding = PropertyBinding.parseTrackName(track.name);\n      let trackNode = PropertyBinding.findNode(root, trackBinding.nodeName);\n      const trackProperty = PATH_PROPERTIES[trackBinding.propertyName];\n      if (trackBinding.objectName === \"bones\") {\n        if (trackNode.isSkinnedMesh === true) {\n          trackNode = trackNode.skeleton.getBoneByName(trackBinding.objectIndex);\n        } else {\n          trackNode = void 0;\n        }\n      }\n      if (!trackNode || !trackProperty) {\n        console.warn('THREE.GLTFExporter: Could not export animation track \"%s\".', track.name);\n        return null;\n      }\n      const inputItemSize = 1;\n      let outputItemSize = track.values.length / track.times.length;\n      if (trackProperty === PATH_PROPERTIES.morphTargetInfluences) {\n        outputItemSize /= trackNode.morphTargetInfluences.length;\n      }\n      let interpolation;\n      if (track.createInterpolant.isInterpolantFactoryMethodGLTFCubicSpline === true) {\n        interpolation = \"CUBICSPLINE\";\n        outputItemSize /= 3;\n      } else if (track.getInterpolation() === InterpolateDiscrete) {\n        interpolation = \"STEP\";\n      } else {\n        interpolation = \"LINEAR\";\n      }\n      samplers.push({\n        input: this.processAccessor(new BufferAttribute(track.times, inputItemSize)),\n        output: this.processAccessor(new BufferAttribute(track.values, outputItemSize)),\n        interpolation\n      });\n      channels.push({\n        sampler: samplers.length - 1,\n        target: {\n          node: nodeMap.get(trackNode),\n          path: trackProperty\n        }\n      });\n    }\n    json.animations.push({\n      name: clip.name || \"clip_\" + json.animations.length,\n      samplers,\n      channels\n    });\n    return json.animations.length - 1;\n  }\n  /**\n   * @param {THREE.Object3D} object\n   * @return {number|null}\n   */\n  processSkin(object) {\n    const json = this.json;\n    const nodeMap = this.nodeMap;\n    const node = json.nodes[nodeMap.get(object)];\n    const skeleton = object.skeleton;\n    if (skeleton === void 0) return null;\n    const rootJoint = object.skeleton.bones[0];\n    if (rootJoint === void 0) return null;\n    const joints = [];\n    const inverseBindMatrices = new Float32Array(skeleton.bones.length * 16);\n    const temporaryBoneInverse = new Matrix4();\n    for (let i = 0; i < skeleton.bones.length; ++i) {\n      joints.push(nodeMap.get(skeleton.bones[i]));\n      temporaryBoneInverse.copy(skeleton.boneInverses[i]);\n      temporaryBoneInverse.multiply(object.bindMatrix).toArray(inverseBindMatrices, i * 16);\n    }\n    if (json.skins === void 0) json.skins = [];\n    json.skins.push({\n      inverseBindMatrices: this.processAccessor(new BufferAttribute(inverseBindMatrices, 16)),\n      joints,\n      skeleton: nodeMap.get(rootJoint)\n    });\n    const skinIndex = node.skin = json.skins.length - 1;\n    return skinIndex;\n  }\n  /**\n   * Process Object3D node\n   * @param  {THREE.Object3D} node Object3D to processNode\n   * @return {Integer} Index of the node in the nodes list\n   */\n  processNode(object) {\n    const json = this.json;\n    const options = this.options;\n    const nodeMap = this.nodeMap;\n    if (!json.nodes) json.nodes = [];\n    const nodeDef = {};\n    if (options.trs) {\n      const rotation = object.quaternion.toArray();\n      const position = object.position.toArray();\n      const scale = object.scale.toArray();\n      if (!equalArray(rotation, [0, 0, 0, 1])) {\n        nodeDef.rotation = rotation;\n      }\n      if (!equalArray(position, [0, 0, 0])) {\n        nodeDef.translation = position;\n      }\n      if (!equalArray(scale, [1, 1, 1])) {\n        nodeDef.scale = scale;\n      }\n    } else {\n      if (object.matrixAutoUpdate) {\n        object.updateMatrix();\n      }\n      if (isIdentityMatrix(object.matrix) === false) {\n        nodeDef.matrix = object.matrix.elements;\n      }\n    }\n    if (object.name !== \"\") nodeDef.name = String(object.name);\n    this.serializeUserData(object, nodeDef);\n    if (object.isMesh || object.isLine || object.isPoints) {\n      const meshIndex = this.processMesh(object);\n      if (meshIndex !== null) nodeDef.mesh = meshIndex;\n    } else if (object.isCamera) {\n      nodeDef.camera = this.processCamera(object);\n    }\n    if (object.isSkinnedMesh) this.skins.push(object);\n    if (object.children.length > 0) {\n      const children = [];\n      for (let i = 0, l = object.children.length; i < l; i++) {\n        const child = object.children[i];\n        if (child.visible || options.onlyVisible === false) {\n          const nodeIndex2 = this.processNode(child);\n          if (nodeIndex2 !== null) children.push(nodeIndex2);\n        }\n      }\n      if (children.length > 0) nodeDef.children = children;\n    }\n    this._invokeAll(function (ext) {\n      ext.writeNode && ext.writeNode(object, nodeDef);\n    });\n    const nodeIndex = json.nodes.push(nodeDef) - 1;\n    nodeMap.set(object, nodeIndex);\n    return nodeIndex;\n  }\n  /**\n   * Process Scene\n   * @param  {Scene} node Scene to process\n   */\n  processScene(scene) {\n    const json = this.json;\n    const options = this.options;\n    if (!json.scenes) {\n      json.scenes = [];\n      json.scene = 0;\n    }\n    const sceneDef = {};\n    if (scene.name !== \"\") sceneDef.name = scene.name;\n    json.scenes.push(sceneDef);\n    const nodes = [];\n    for (let i = 0, l = scene.children.length; i < l; i++) {\n      const child = scene.children[i];\n      if (child.visible || options.onlyVisible === false) {\n        const nodeIndex = this.processNode(child);\n        if (nodeIndex !== null) nodes.push(nodeIndex);\n      }\n    }\n    if (nodes.length > 0) sceneDef.nodes = nodes;\n    this.serializeUserData(scene, sceneDef);\n  }\n  /**\n   * Creates a Scene to hold a list of objects and parse it\n   * @param  {Array} objects List of objects to process\n   */\n  processObjects(objects) {\n    const scene = new Scene();\n    scene.name = \"AuxScene\";\n    for (let i = 0; i < objects.length; i++) {\n      scene.children.push(objects[i]);\n    }\n    this.processScene(scene);\n  }\n  /**\n   * @param {THREE.Object3D|Array<THREE.Object3D>} input\n   */\n  processInput(input) {\n    const options = this.options;\n    input = input instanceof Array ? input : [input];\n    this._invokeAll(function (ext) {\n      ext.beforeParse && ext.beforeParse(input);\n    });\n    const objectsWithoutScene = [];\n    for (let i = 0; i < input.length; i++) {\n      if (input[i] instanceof Scene) {\n        this.processScene(input[i]);\n      } else {\n        objectsWithoutScene.push(input[i]);\n      }\n    }\n    if (objectsWithoutScene.length > 0) this.processObjects(objectsWithoutScene);\n    for (let i = 0; i < this.skins.length; ++i) {\n      this.processSkin(this.skins[i]);\n    }\n    for (let i = 0; i < options.animations.length; ++i) {\n      this.processAnimation(options.animations[i], input[0]);\n    }\n    this._invokeAll(function (ext) {\n      ext.afterParse && ext.afterParse(input);\n    });\n  }\n  _invokeAll(func) {\n    for (let i = 0, il = this.plugins.length; i < il; i++) {\n      func(this.plugins[i]);\n    }\n  }\n}\nclass GLTFLightExtension {\n  constructor(writer) {\n    this.writer = writer;\n    this.name = \"KHR_lights_punctual\";\n  }\n  writeNode(light, nodeDef) {\n    if (!light.isLight) return;\n    if (!light.isDirectionalLight && !light.isPointLight && !light.isSpotLight) {\n      console.warn(\"THREE.GLTFExporter: Only directional, point, and spot lights are supported.\", light);\n      return;\n    }\n    const writer = this.writer;\n    const json = writer.json;\n    const extensionsUsed = writer.extensionsUsed;\n    const lightDef = {};\n    if (light.name) lightDef.name = light.name;\n    lightDef.color = light.color.toArray();\n    lightDef.intensity = light.intensity;\n    if (light.isDirectionalLight) {\n      lightDef.type = \"directional\";\n    } else if (light.isPointLight) {\n      lightDef.type = \"point\";\n      if (light.distance > 0) lightDef.range = light.distance;\n    } else if (light.isSpotLight) {\n      lightDef.type = \"spot\";\n      if (light.distance > 0) lightDef.range = light.distance;\n      lightDef.spot = {};\n      lightDef.spot.innerConeAngle = (light.penumbra - 1) * light.angle * -1;\n      lightDef.spot.outerConeAngle = light.angle;\n    }\n    if (light.decay !== void 0 && light.decay !== 2) {\n      console.warn(\"THREE.GLTFExporter: Light decay may be lost. glTF is physically-based, and expects light.decay=2.\");\n    }\n    if (light.target && (light.target.parent !== light || light.target.position.x !== 0 || light.target.position.y !== 0 || light.target.position.z !== -1)) {\n      console.warn(\"THREE.GLTFExporter: Light direction may be lost. For best results, make light.target a child of the light with position 0,0,-1.\");\n    }\n    if (!extensionsUsed[this.name]) {\n      json.extensions = json.extensions || {};\n      json.extensions[this.name] = {\n        lights: []\n      };\n      extensionsUsed[this.name] = true;\n    }\n    const lights = json.extensions[this.name].lights;\n    lights.push(lightDef);\n    nodeDef.extensions = nodeDef.extensions || {};\n    nodeDef.extensions[this.name] = {\n      light: lights.length - 1\n    };\n  }\n}\nclass GLTFMaterialsUnlitExtension {\n  constructor(writer) {\n    this.writer = writer;\n    this.name = \"KHR_materials_unlit\";\n  }\n  writeMaterial(material, materialDef) {\n    if (!material.isMeshBasicMaterial) return;\n    const writer = this.writer;\n    const extensionsUsed = writer.extensionsUsed;\n    materialDef.extensions = materialDef.extensions || {};\n    materialDef.extensions[this.name] = {};\n    extensionsUsed[this.name] = true;\n    materialDef.pbrMetallicRoughness.metallicFactor = 0;\n    materialDef.pbrMetallicRoughness.roughnessFactor = 0.9;\n  }\n}\nclass GLTFMaterialsClearcoatExtension {\n  constructor(writer) {\n    this.writer = writer;\n    this.name = \"KHR_materials_clearcoat\";\n  }\n  writeMaterial(material, materialDef) {\n    if (!material.isMeshPhysicalMaterial || material.clearcoat === 0) return;\n    const writer = this.writer;\n    const extensionsUsed = writer.extensionsUsed;\n    const extensionDef = {};\n    extensionDef.clearcoatFactor = material.clearcoat;\n    if (material.clearcoatMap) {\n      const clearcoatMapDef = {\n        index: writer.processTexture(material.clearcoatMap),\n        texCoord: material.clearcoatMap.channel\n      };\n      writer.applyTextureTransform(clearcoatMapDef, material.clearcoatMap);\n      extensionDef.clearcoatTexture = clearcoatMapDef;\n    }\n    extensionDef.clearcoatRoughnessFactor = material.clearcoatRoughness;\n    if (material.clearcoatRoughnessMap) {\n      const clearcoatRoughnessMapDef = {\n        index: writer.processTexture(material.clearcoatRoughnessMap),\n        texCoord: material.clearcoatRoughnessMap.channel\n      };\n      writer.applyTextureTransform(clearcoatRoughnessMapDef, material.clearcoatRoughnessMap);\n      extensionDef.clearcoatRoughnessTexture = clearcoatRoughnessMapDef;\n    }\n    if (material.clearcoatNormalMap) {\n      const clearcoatNormalMapDef = {\n        index: writer.processTexture(material.clearcoatNormalMap),\n        texCoord: material.clearcoatNormalMap.channel\n      };\n      writer.applyTextureTransform(clearcoatNormalMapDef, material.clearcoatNormalMap);\n      extensionDef.clearcoatNormalTexture = clearcoatNormalMapDef;\n    }\n    materialDef.extensions = materialDef.extensions || {};\n    materialDef.extensions[this.name] = extensionDef;\n    extensionsUsed[this.name] = true;\n  }\n}\nclass GLTFMaterialsIridescenceExtension {\n  constructor(writer) {\n    this.writer = writer;\n    this.name = \"KHR_materials_iridescence\";\n  }\n  writeMaterial(material, materialDef) {\n    if (!material.isMeshPhysicalMaterial || material.iridescence === 0) return;\n    const writer = this.writer;\n    const extensionsUsed = writer.extensionsUsed;\n    const extensionDef = {};\n    extensionDef.iridescenceFactor = material.iridescence;\n    if (material.iridescenceMap) {\n      const iridescenceMapDef = {\n        index: writer.processTexture(material.iridescenceMap),\n        texCoord: material.iridescenceMap.channel\n      };\n      writer.applyTextureTransform(iridescenceMapDef, material.iridescenceMap);\n      extensionDef.iridescenceTexture = iridescenceMapDef;\n    }\n    extensionDef.iridescenceIor = material.iridescenceIOR;\n    extensionDef.iridescenceThicknessMinimum = material.iridescenceThicknessRange[0];\n    extensionDef.iridescenceThicknessMaximum = material.iridescenceThicknessRange[1];\n    if (material.iridescenceThicknessMap) {\n      const iridescenceThicknessMapDef = {\n        index: writer.processTexture(material.iridescenceThicknessMap),\n        texCoord: material.iridescenceThicknessMap.channel\n      };\n      writer.applyTextureTransform(iridescenceThicknessMapDef, material.iridescenceThicknessMap);\n      extensionDef.iridescenceThicknessTexture = iridescenceThicknessMapDef;\n    }\n    materialDef.extensions = materialDef.extensions || {};\n    materialDef.extensions[this.name] = extensionDef;\n    extensionsUsed[this.name] = true;\n  }\n}\nclass GLTFMaterialsTransmissionExtension {\n  constructor(writer) {\n    this.writer = writer;\n    this.name = \"KHR_materials_transmission\";\n  }\n  writeMaterial(material, materialDef) {\n    if (!material.isMeshPhysicalMaterial || material.transmission === 0) return;\n    const writer = this.writer;\n    const extensionsUsed = writer.extensionsUsed;\n    const extensionDef = {};\n    extensionDef.transmissionFactor = material.transmission;\n    if (material.transmissionMap) {\n      const transmissionMapDef = {\n        index: writer.processTexture(material.transmissionMap),\n        texCoord: material.transmissionMap.channel\n      };\n      writer.applyTextureTransform(transmissionMapDef, material.transmissionMap);\n      extensionDef.transmissionTexture = transmissionMapDef;\n    }\n    materialDef.extensions = materialDef.extensions || {};\n    materialDef.extensions[this.name] = extensionDef;\n    extensionsUsed[this.name] = true;\n  }\n}\nclass GLTFMaterialsVolumeExtension {\n  constructor(writer) {\n    this.writer = writer;\n    this.name = \"KHR_materials_volume\";\n  }\n  writeMaterial(material, materialDef) {\n    if (!material.isMeshPhysicalMaterial || material.transmission === 0) return;\n    const writer = this.writer;\n    const extensionsUsed = writer.extensionsUsed;\n    const extensionDef = {};\n    extensionDef.thicknessFactor = material.thickness;\n    if (material.thicknessMap) {\n      const thicknessMapDef = {\n        index: writer.processTexture(material.thicknessMap),\n        texCoord: material.thicknessMap.channel\n      };\n      writer.applyTextureTransform(thicknessMapDef, material.thicknessMap);\n      extensionDef.thicknessTexture = thicknessMapDef;\n    }\n    extensionDef.attenuationDistance = material.attenuationDistance;\n    extensionDef.attenuationColor = material.attenuationColor.toArray();\n    materialDef.extensions = materialDef.extensions || {};\n    materialDef.extensions[this.name] = extensionDef;\n    extensionsUsed[this.name] = true;\n  }\n}\nclass GLTFMaterialsIorExtension {\n  constructor(writer) {\n    this.writer = writer;\n    this.name = \"KHR_materials_ior\";\n  }\n  writeMaterial(material, materialDef) {\n    if (!material.isMeshPhysicalMaterial || material.ior === 1.5) return;\n    const writer = this.writer;\n    const extensionsUsed = writer.extensionsUsed;\n    const extensionDef = {};\n    extensionDef.ior = material.ior;\n    materialDef.extensions = materialDef.extensions || {};\n    materialDef.extensions[this.name] = extensionDef;\n    extensionsUsed[this.name] = true;\n  }\n}\nclass GLTFMaterialsSpecularExtension {\n  constructor(writer) {\n    this.writer = writer;\n    this.name = \"KHR_materials_specular\";\n  }\n  writeMaterial(material, materialDef) {\n    if (!material.isMeshPhysicalMaterial || material.specularIntensity === 1 && material.specularColor.equals(DEFAULT_SPECULAR_COLOR) && !material.specularIntensityMap && !material.specularColorTexture) return;\n    const writer = this.writer;\n    const extensionsUsed = writer.extensionsUsed;\n    const extensionDef = {};\n    if (material.specularIntensityMap) {\n      const specularIntensityMapDef = {\n        index: writer.processTexture(material.specularIntensityMap),\n        texCoord: material.specularIntensityMap.channel\n      };\n      writer.applyTextureTransform(specularIntensityMapDef, material.specularIntensityMap);\n      extensionDef.specularTexture = specularIntensityMapDef;\n    }\n    if (material.specularColorMap) {\n      const specularColorMapDef = {\n        index: writer.processTexture(material.specularColorMap),\n        texCoord: material.specularColorMap.channel\n      };\n      writer.applyTextureTransform(specularColorMapDef, material.specularColorMap);\n      extensionDef.specularColorTexture = specularColorMapDef;\n    }\n    extensionDef.specularFactor = material.specularIntensity;\n    extensionDef.specularColorFactor = material.specularColor.toArray();\n    materialDef.extensions = materialDef.extensions || {};\n    materialDef.extensions[this.name] = extensionDef;\n    extensionsUsed[this.name] = true;\n  }\n}\nclass GLTFMaterialsSheenExtension {\n  constructor(writer) {\n    this.writer = writer;\n    this.name = \"KHR_materials_sheen\";\n  }\n  writeMaterial(material, materialDef) {\n    if (!material.isMeshPhysicalMaterial || material.sheen == 0) return;\n    const writer = this.writer;\n    const extensionsUsed = writer.extensionsUsed;\n    const extensionDef = {};\n    if (material.sheenRoughnessMap) {\n      const sheenRoughnessMapDef = {\n        index: writer.processTexture(material.sheenRoughnessMap),\n        texCoord: material.sheenRoughnessMap.channel\n      };\n      writer.applyTextureTransform(sheenRoughnessMapDef, material.sheenRoughnessMap);\n      extensionDef.sheenRoughnessTexture = sheenRoughnessMapDef;\n    }\n    if (material.sheenColorMap) {\n      const sheenColorMapDef = {\n        index: writer.processTexture(material.sheenColorMap),\n        texCoord: material.sheenColorMap.channel\n      };\n      writer.applyTextureTransform(sheenColorMapDef, material.sheenColorMap);\n      extensionDef.sheenColorTexture = sheenColorMapDef;\n    }\n    extensionDef.sheenRoughnessFactor = material.sheenRoughness;\n    extensionDef.sheenColorFactor = material.sheenColor.toArray();\n    materialDef.extensions = materialDef.extensions || {};\n    materialDef.extensions[this.name] = extensionDef;\n    extensionsUsed[this.name] = true;\n  }\n}\nclass GLTFMaterialsAnisotropyExtension {\n  constructor(writer) {\n    this.writer = writer;\n    this.name = \"KHR_materials_anisotropy\";\n  }\n  writeMaterial(material, materialDef) {\n    if (!material.isMeshPhysicalMaterial || material.anisotropy == 0) return;\n    const writer = this.writer;\n    const extensionsUsed = writer.extensionsUsed;\n    const extensionDef = {};\n    if (material.anisotropyMap) {\n      const anisotropyMapDef = {\n        index: writer.processTexture(material.anisotropyMap)\n      };\n      writer.applyTextureTransform(anisotropyMapDef, material.anisotropyMap);\n      extensionDef.anisotropyTexture = anisotropyMapDef;\n    }\n    extensionDef.anisotropyStrength = material.anisotropy;\n    extensionDef.anisotropyRotation = material.anisotropyRotation;\n    materialDef.extensions = materialDef.extensions || {};\n    materialDef.extensions[this.name] = extensionDef;\n    extensionsUsed[this.name] = true;\n  }\n}\nclass GLTFMaterialsEmissiveStrengthExtension {\n  constructor(writer) {\n    this.writer = writer;\n    this.name = \"KHR_materials_emissive_strength\";\n  }\n  writeMaterial(material, materialDef) {\n    if (!material.isMeshStandardMaterial || material.emissiveIntensity === 1) return;\n    const writer = this.writer;\n    const extensionsUsed = writer.extensionsUsed;\n    const extensionDef = {};\n    extensionDef.emissiveStrength = material.emissiveIntensity;\n    materialDef.extensions = materialDef.extensions || {};\n    materialDef.extensions[this.name] = extensionDef;\n    extensionsUsed[this.name] = true;\n  }\n}\nGLTFExporter.Utils = {\n  insertKeyframe: function (track, time) {\n    const tolerance = 1e-3;\n    const valueSize = track.getValueSize();\n    const times = new track.TimeBufferType(track.times.length + 1);\n    const values = new track.ValueBufferType(track.values.length + valueSize);\n    const interpolant = track.createInterpolant(new track.ValueBufferType(valueSize));\n    let index;\n    if (track.times.length === 0) {\n      times[0] = time;\n      for (let i = 0; i < valueSize; i++) {\n        values[i] = 0;\n      }\n      index = 0;\n    } else if (time < track.times[0]) {\n      if (Math.abs(track.times[0] - time) < tolerance) return 0;\n      times[0] = time;\n      times.set(track.times, 1);\n      values.set(interpolant.evaluate(time), 0);\n      values.set(track.values, valueSize);\n      index = 0;\n    } else if (time > track.times[track.times.length - 1]) {\n      if (Math.abs(track.times[track.times.length - 1] - time) < tolerance) {\n        return track.times.length - 1;\n      }\n      times[times.length - 1] = time;\n      times.set(track.times, 0);\n      values.set(track.values, 0);\n      values.set(interpolant.evaluate(time), track.values.length);\n      index = times.length - 1;\n    } else {\n      for (let i = 0; i < track.times.length; i++) {\n        if (Math.abs(track.times[i] - time) < tolerance) return i;\n        if (track.times[i] < time && track.times[i + 1] > time) {\n          times.set(track.times.slice(0, i + 1), 0);\n          times[i + 1] = time;\n          times.set(track.times.slice(i + 1), i + 2);\n          values.set(track.values.slice(0, (i + 1) * valueSize), 0);\n          values.set(interpolant.evaluate(time), (i + 1) * valueSize);\n          values.set(track.values.slice((i + 1) * valueSize), (i + 2) * valueSize);\n          index = i + 1;\n          break;\n        }\n      }\n    }\n    track.times = times;\n    track.values = values;\n    return index;\n  },\n  mergeMorphTargetTracks: function (clip, root) {\n    const tracks = [];\n    const mergedTracks = {};\n    const sourceTracks = clip.tracks;\n    for (let i = 0; i < sourceTracks.length; ++i) {\n      let sourceTrack = sourceTracks[i];\n      const sourceTrackBinding = PropertyBinding.parseTrackName(sourceTrack.name);\n      const sourceTrackNode = PropertyBinding.findNode(root, sourceTrackBinding.nodeName);\n      if (sourceTrackBinding.propertyName !== \"morphTargetInfluences\" || sourceTrackBinding.propertyIndex === void 0) {\n        tracks.push(sourceTrack);\n        continue;\n      }\n      if (sourceTrack.createInterpolant !== sourceTrack.InterpolantFactoryMethodDiscrete && sourceTrack.createInterpolant !== sourceTrack.InterpolantFactoryMethodLinear) {\n        if (sourceTrack.createInterpolant.isInterpolantFactoryMethodGLTFCubicSpline) {\n          throw new Error(\"THREE.GLTFExporter: Cannot merge tracks with glTF CUBICSPLINE interpolation.\");\n        }\n        console.warn(\"THREE.GLTFExporter: Morph target interpolation mode not yet supported. Using LINEAR instead.\");\n        sourceTrack = sourceTrack.clone();\n        sourceTrack.setInterpolation(InterpolateLinear);\n      }\n      const targetCount = sourceTrackNode.morphTargetInfluences.length;\n      const targetIndex = sourceTrackNode.morphTargetDictionary[sourceTrackBinding.propertyIndex];\n      if (targetIndex === void 0) {\n        throw new Error(\"THREE.GLTFExporter: Morph target name not found: \" + sourceTrackBinding.propertyIndex);\n      }\n      let mergedTrack;\n      if (mergedTracks[sourceTrackNode.uuid] === void 0) {\n        mergedTrack = sourceTrack.clone();\n        const values = new mergedTrack.ValueBufferType(targetCount * mergedTrack.times.length);\n        for (let j = 0; j < mergedTrack.times.length; j++) {\n          values[j * targetCount + targetIndex] = mergedTrack.values[j];\n        }\n        mergedTrack.name = (sourceTrackBinding.nodeName || \"\") + \".morphTargetInfluences\";\n        mergedTrack.values = values;\n        mergedTracks[sourceTrackNode.uuid] = mergedTrack;\n        tracks.push(mergedTrack);\n        continue;\n      }\n      const sourceInterpolant = sourceTrack.createInterpolant(new sourceTrack.ValueBufferType(1));\n      mergedTrack = mergedTracks[sourceTrackNode.uuid];\n      for (let j = 0; j < mergedTrack.times.length; j++) {\n        mergedTrack.values[j * targetCount + targetIndex] = sourceInterpolant.evaluate(mergedTrack.times[j]);\n      }\n      for (let j = 0; j < sourceTrack.times.length; j++) {\n        const keyframeIndex = this.insertKeyframe(mergedTrack, sourceTrack.times[j]);\n        mergedTrack.values[keyframeIndex * targetCount + targetIndex] = sourceTrack.values[j];\n      }\n    }\n    clip.tracks = tracks;\n    return clip;\n  }\n};\nexport { GLTFExporter };","map":{"version":3,"names":["PlaneGeometry","ShaderMaterial","Uniform","Mesh","PerspectiveCamera","Scene","WebGLRenderer","Texture","NearestFilter","NearestMipmapNearestFilter","NearestMipmapLinearFilter","LinearFilter","LinearMipmapNearestFilter","LinearMipmapLinearFilter","ClampToEdgeWrapping","RepeatWrapping","MirroredRepeatWrapping","Color","MathUtils","Vector3","CompressedTexture","RGBAFormat","DoubleSide","REVISION","BufferAttribute","PropertyBinding","InterpolateDiscrete","Matrix4","InterpolateLinear","_renderer","fullscreenQuadGeometry","fullscreenQuadMaterial","fullscreenQuad","decompress","texture","maxTextureSize","arguments","length","undefined","Infinity","renderer","uniforms","blitTexture","vertexShader","fragmentShader","value","defines","IS_SRGB","colorSpace","encoding","needsUpdate","frustrumCulled","_camera","_scene","add","antialias","setSize","Math","min","image","width","height","clear","render","readableTexture","domElement","minFilter","magFilter","wrapS","wrapT","name","dispose","KHR_mesh_quantization_ExtraAttrTypes","POSITION","NORMAL","TANGENT","TEXCOORD","GLTFExporter","constructor","pluginCallbacks","register","writer","GLTFLightExtension","GLTFMaterialsUnlitExtension","GLTFMaterialsTransmissionExtension","GLTFMaterialsVolumeExtension","GLTFMaterialsIorExtension","GLTFMaterialsSpecularExtension","GLTFMaterialsClearcoatExtension","GLTFMaterialsIridescenceExtension","GLTFMaterialsSheenExtension","GLTFMaterialsAnisotropyExtension","GLTFMaterialsEmissiveStrengthExtension","callback","indexOf","push","unregister","splice","parse","input","onDone","onError","options","GLTFWriter","plugins","i","il","setPlugins","write","catch","parseAsync","scope","Promise","resolve","reject","WEBGL_CONSTANTS","POINTS","LINES","LINE_LOOP","LINE_STRIP","TRIANGLES","TRIANGLE_STRIP","TRIANGLE_FAN","BYTE","UNSIGNED_BYTE","SHORT","UNSIGNED_SHORT","INT","UNSIGNED_INT","FLOAT","ARRAY_BUFFER","ELEMENT_ARRAY_BUFFER","NEAREST","LINEAR","NEAREST_MIPMAP_NEAREST","LINEAR_MIPMAP_NEAREST","NEAREST_MIPMAP_LINEAR","LINEAR_MIPMAP_LINEAR","CLAMP_TO_EDGE","MIRRORED_REPEAT","REPEAT","KHR_MESH_QUANTIZATION","THREE_TO_WEBGL","PATH_PROPERTIES","scale","position","quaternion","morphTargetInfluences","DEFAULT_SPECULAR_COLOR","GLB_HEADER_BYTES","GLB_HEADER_MAGIC","GLB_VERSION","GLB_CHUNK_PREFIX_BYTES","GLB_CHUNK_TYPE_JSON","GLB_CHUNK_TYPE_BIN","equalArray","array1","array2","every","element","index","stringToArrayBuffer","text","TextEncoder","encode","buffer","isIdentityMatrix","matrix","elements","getMinMax","attribute","start","count","output","Array","itemSize","fill","Number","POSITIVE_INFINITY","max","NEGATIVE_INFINITY","a","array","getX","getY","getZ","getW","normalized","normalize","getPaddedBufferSize","bufferSize","ceil","getPaddedArrayBuffer","arrayBuffer","paddingByte","paddedLength","byteLength","Uint8Array","set","getCanvas","document","OffscreenCanvas","createElement","getToBlobPromise","canvas","mimeType","toBlob","quality","convertToBlob","type","pending","buffers","byteOffset","nodeMap","Map","skins","extensionsUsed","extensionsRequired","uids","uid","json","asset","version","generator","cache","meshes","attributes","attributesNormalized","materials","textures","images","Object","assign","binary","trs","onlyVisible","animations","includeCustomExtensions","processInput","all","blob","Blob","extensionsUsedList","keys","extensionsRequiredList","size","reader","FileReader","readAsArrayBuffer","onloadend","binaryChunk","result","binaryChunkPrefix","DataView","ArrayBuffer","setUint32","jsonChunk","JSON","stringify","jsonChunkPrefix","header","headerView","totalByteLength","glbBlob","glbReader","readAsDataURL","base64data","uri","serializeUserData","object","objectDef","userData","gltfExtensions","extensions","extensionName","extras","error","console","warn","message","getUID","isRelativeCopy","has","uids2","get","isNormalizedNormalAttribute","normal","v","abs","fromBufferAttribute","createNormalizedNormalAttribute","clone","x","y","z","setX","setXYZ","applyTextureTransform","mapDef","didTransform","transformDef","offset","toArray","rotation","repeat","buildMetalRoughTexture","metalnessMap","roughnessMap","getEncodingConversion","map","SRGBToLinear","c","pow","LinearToLinear","metalness","roughness","context","getContext","fillStyle","fillRect","composite","getImageData","drawImage","convert","data","putImageData","reference","source","channel","processBuffer","processBufferView","componentType","target","bufferViews","componentSize","dataView","setFloat32","setInt32","setInt16","setUint16","setInt8","setUint8","bufferViewDef","byteStride","id","processBufferViewImage","processAccessor","geometry","types","Float32Array","Int32Array","Uint32Array","Int16Array","Uint16Array","Int8Array","Error","minMax","bufferViewTarget","bufferView","accessorDef","accessors","processImage","format","flipY","cachedImages","key","toString","imageDef","ctx","translate","Uint8ClampedArray","ImageData","then","bufferViewIndex","toDataURL","dataURL","processSampler","samplers","samplerDef","processTexture","textureDef","sampler","_invokeAll","ext","writeTexture","processMaterial","material","isShaderMaterial","materialDef","pbrMetallicRoughness","isMeshStandardMaterial","isMeshBasicMaterial","color","concat","opacity","baseColorFactor","metallicFactor","roughnessFactor","metalRoughTexture","metalRoughMapDef","metallicRoughnessTexture","baseColorMapDef","texCoord","baseColorTexture","emissive","maxEmissiveComponent","r","g","b","emissiveFactor","emissiveMap","emissiveMapDef","emissiveTexture","normalMap","normalMapDef","normalScale","normalTexture","aoMap","occlusionMapDef","aoMapIntensity","strength","occlusionTexture","transparent","alphaMode","alphaTest","alphaCutoff","side","doubleSided","writeMaterial","processMesh","mesh","meshCacheKeyParts","uuid","isArray","l","meshCacheKey","join","mode","isLineSegments","isLineLoop","isLine","isPoints","wireframe","meshDef","primitives","targets","nameConversion","uv","replace","skinWeight","skinIndex","originalNormal","getAttribute","setAttribute","modifiedAttribute","attributeName","slice","toUpperCase","validVertexAttributes","test","accessor","startsWith","detectMeshQuantization","weights","targetNames","reverseDictionary","morphTargetDictionary","warned","morphAttributes","gltfAttributeName","baseAttribute","relativeAttribute","morphTargetsRelative","j","jl","setY","setZ","setW","isMultiMaterial","groups","materialIndex","primitive","cacheKey","indices","writeMesh","attrType","attrNamePrefix","split","includes","processCamera","camera","cameras","isOrtho","isOrthographicCamera","cameraDef","orthographic","xmag","right","ymag","top","zfar","far","znear","near","perspective","aspectRatio","aspect","yfov","degToRad","fov","processAnimation","clip","root","Utils","mergeMorphTargetTracks","tracks","channels","track","trackBinding","parseTrackName","trackNode","findNode","nodeName","trackProperty","propertyName","objectName","isSkinnedMesh","skeleton","getBoneByName","objectIndex","inputItemSize","outputItemSize","values","times","interpolation","createInterpolant","isInterpolantFactoryMethodGLTFCubicSpline","getInterpolation","node","path","processSkin","nodes","rootJoint","bones","joints","inverseBindMatrices","temporaryBoneInverse","copy","boneInverses","multiply","bindMatrix","skin","processNode","nodeDef","translation","matrixAutoUpdate","updateMatrix","String","isMesh","meshIndex","isCamera","children","child","visible","nodeIndex2","writeNode","nodeIndex","processScene","scene","scenes","sceneDef","processObjects","objects","beforeParse","objectsWithoutScene","afterParse","func","light","isLight","isDirectionalLight","isPointLight","isSpotLight","lightDef","intensity","distance","range","spot","innerConeAngle","penumbra","angle","outerConeAngle","decay","parent","lights","isMeshPhysicalMaterial","clearcoat","extensionDef","clearcoatFactor","clearcoatMap","clearcoatMapDef","clearcoatTexture","clearcoatRoughnessFactor","clearcoatRoughness","clearcoatRoughnessMap","clearcoatRoughnessMapDef","clearcoatRoughnessTexture","clearcoatNormalMap","clearcoatNormalMapDef","clearcoatNormalTexture","iridescence","iridescenceFactor","iridescenceMap","iridescenceMapDef","iridescenceTexture","iridescenceIor","iridescenceIOR","iridescenceThicknessMinimum","iridescenceThicknessRange","iridescenceThicknessMaximum","iridescenceThicknessMap","iridescenceThicknessMapDef","iridescenceThicknessTexture","transmission","transmissionFactor","transmissionMap","transmissionMapDef","transmissionTexture","thicknessFactor","thickness","thicknessMap","thicknessMapDef","thicknessTexture","attenuationDistance","attenuationColor","ior","specularIntensity","specularColor","equals","specularIntensityMap","specularColorTexture","specularIntensityMapDef","specularTexture","specularColorMap","specularColorMapDef","specularFactor","specularColorFactor","sheen","sheenRoughnessMap","sheenRoughnessMapDef","sheenRoughnessTexture","sheenColorMap","sheenColorMapDef","sheenColorTexture","sheenRoughnessFactor","sheenRoughness","sheenColorFactor","sheenColor","anisotropy","anisotropyMap","anisotropyMapDef","anisotropyTexture","anisotropyStrength","anisotropyRotation","emissiveIntensity","emissiveStrength","insertKeyframe","time","tolerance","valueSize","getValueSize","TimeBufferType","ValueBufferType","interpolant","evaluate","mergedTracks","sourceTracks","sourceTrack","sourceTrackBinding","sourceTrackNode","propertyIndex","InterpolantFactoryMethodDiscrete","InterpolantFactoryMethodLinear","setInterpolation","targetCount","targetIndex","mergedTrack","sourceInterpolant","keyframeIndex"],"sources":["/home/krug/Coding/JavaScript/Websites/Personal/personal/node_modules/.pnpm/three-stdlib@2.23.7_three@0.151.3/node_modules/three-stdlib/exporters/GLTFExporter.js"],"sourcesContent":["import { PlaneGeometry, ShaderMaterial, Uniform, Mesh, PerspectiveCamera, Scene, WebGLRenderer, Texture, NearestFilter, NearestMipmapNearestFilter, NearestMipmapLinearFilter, LinearFilter, LinearMipmapNearestFilter, LinearMipmapLinearFilter, ClampToEdgeWrapping, RepeatWrapping, MirroredRepeatWrapping, Color, MathUtils, Vector3, CompressedTexture, RGBAFormat, DoubleSide, REVISION, BufferAttribute, PropertyBinding, InterpolateDiscrete, Matrix4, InterpolateLinear } from \"three\";\nlet _renderer;\nlet fullscreenQuadGeometry;\nlet fullscreenQuadMaterial;\nlet fullscreenQuad;\nfunction decompress(texture, maxTextureSize = Infinity, renderer = null) {\n  if (!fullscreenQuadGeometry)\n    fullscreenQuadGeometry = new PlaneGeometry(2, 2, 1, 1);\n  if (!fullscreenQuadMaterial)\n    fullscreenQuadMaterial = new ShaderMaterial({\n      uniforms: { blitTexture: new Uniform(texture) },\n      vertexShader: (\n        /* glsl */\n        `\n        varying vec2 vUv;\n        void main(){\n            vUv = uv;\n            gl_Position = vec4(position.xy * 1.0,0.,.999999);\n        }\n      `\n      ),\n      fragmentShader: (\n        /* glsl */\n        `\n          uniform sampler2D blitTexture; \n          varying vec2 vUv;\n\n          void main(){ \n              gl_FragColor = vec4(vUv.xy, 0, 1);\n              \n              #ifdef IS_SRGB\n              gl_FragColor = LinearTosRGB( texture2D( blitTexture, vUv) );\n              #else\n              gl_FragColor = texture2D( blitTexture, vUv);\n              #endif\n          }\n      `\n      )\n    });\n  fullscreenQuadMaterial.uniforms.blitTexture.value = texture;\n  fullscreenQuadMaterial.defines.IS_SRGB = \"colorSpace\" in texture ? texture.colorSpace === \"srgb\" : texture.encoding === 3001;\n  fullscreenQuadMaterial.needsUpdate = true;\n  if (!fullscreenQuad) {\n    fullscreenQuad = new Mesh(fullscreenQuadGeometry, fullscreenQuadMaterial);\n    fullscreenQuad.frustrumCulled = false;\n  }\n  const _camera = new PerspectiveCamera();\n  const _scene = new Scene();\n  _scene.add(fullscreenQuad);\n  if (!renderer) {\n    renderer = _renderer = new WebGLRenderer({ antialias: false });\n  }\n  renderer.setSize(Math.min(texture.image.width, maxTextureSize), Math.min(texture.image.height, maxTextureSize));\n  renderer.clear();\n  renderer.render(_scene, _camera);\n  const readableTexture = new Texture(renderer.domElement);\n  readableTexture.minFilter = texture.minFilter;\n  readableTexture.magFilter = texture.magFilter;\n  readableTexture.wrapS = texture.wrapS;\n  readableTexture.wrapT = texture.wrapT;\n  readableTexture.name = texture.name;\n  if (_renderer) {\n    _renderer.dispose();\n    _renderer = null;\n  }\n  return readableTexture;\n}\nconst KHR_mesh_quantization_ExtraAttrTypes = {\n  POSITION: [\n    \"byte\",\n    \"byte normalized\",\n    \"unsigned byte\",\n    \"unsigned byte normalized\",\n    \"short\",\n    \"short normalized\",\n    \"unsigned short\",\n    \"unsigned short normalized\"\n  ],\n  NORMAL: [\"byte normalized\", \"short normalized\"],\n  TANGENT: [\"byte normalized\", \"short normalized\"],\n  TEXCOORD: [\"byte\", \"byte normalized\", \"unsigned byte\", \"short\", \"short normalized\", \"unsigned short\"]\n};\nclass GLTFExporter {\n  constructor() {\n    this.pluginCallbacks = [];\n    this.register(function(writer) {\n      return new GLTFLightExtension(writer);\n    });\n    this.register(function(writer) {\n      return new GLTFMaterialsUnlitExtension(writer);\n    });\n    this.register(function(writer) {\n      return new GLTFMaterialsTransmissionExtension(writer);\n    });\n    this.register(function(writer) {\n      return new GLTFMaterialsVolumeExtension(writer);\n    });\n    this.register(function(writer) {\n      return new GLTFMaterialsIorExtension(writer);\n    });\n    this.register(function(writer) {\n      return new GLTFMaterialsSpecularExtension(writer);\n    });\n    this.register(function(writer) {\n      return new GLTFMaterialsClearcoatExtension(writer);\n    });\n    this.register(function(writer) {\n      return new GLTFMaterialsIridescenceExtension(writer);\n    });\n    this.register(function(writer) {\n      return new GLTFMaterialsSheenExtension(writer);\n    });\n    this.register(function(writer) {\n      return new GLTFMaterialsAnisotropyExtension(writer);\n    });\n    this.register(function(writer) {\n      return new GLTFMaterialsEmissiveStrengthExtension(writer);\n    });\n  }\n  register(callback) {\n    if (this.pluginCallbacks.indexOf(callback) === -1) {\n      this.pluginCallbacks.push(callback);\n    }\n    return this;\n  }\n  unregister(callback) {\n    if (this.pluginCallbacks.indexOf(callback) !== -1) {\n      this.pluginCallbacks.splice(this.pluginCallbacks.indexOf(callback), 1);\n    }\n    return this;\n  }\n  /**\n   * Parse scenes and generate GLTF output\n   * @param  {Scene or [THREE.Scenes]} input   Scene or Array of THREE.Scenes\n   * @param  {Function} onDone  Callback on completed\n   * @param  {Function} onError  Callback on errors\n   * @param  {Object} options options\n   */\n  parse(input, onDone, onError, options) {\n    const writer = new GLTFWriter();\n    const plugins = [];\n    for (let i = 0, il = this.pluginCallbacks.length; i < il; i++) {\n      plugins.push(this.pluginCallbacks[i](writer));\n    }\n    writer.setPlugins(plugins);\n    writer.write(input, onDone, options).catch(onError);\n  }\n  parseAsync(input, options) {\n    const scope = this;\n    return new Promise(function(resolve, reject) {\n      scope.parse(input, resolve, reject, options);\n    });\n  }\n}\nconst WEBGL_CONSTANTS = {\n  POINTS: 0,\n  LINES: 1,\n  LINE_LOOP: 2,\n  LINE_STRIP: 3,\n  TRIANGLES: 4,\n  TRIANGLE_STRIP: 5,\n  TRIANGLE_FAN: 6,\n  BYTE: 5120,\n  UNSIGNED_BYTE: 5121,\n  SHORT: 5122,\n  UNSIGNED_SHORT: 5123,\n  INT: 5124,\n  UNSIGNED_INT: 5125,\n  FLOAT: 5126,\n  ARRAY_BUFFER: 34962,\n  ELEMENT_ARRAY_BUFFER: 34963,\n  NEAREST: 9728,\n  LINEAR: 9729,\n  NEAREST_MIPMAP_NEAREST: 9984,\n  LINEAR_MIPMAP_NEAREST: 9985,\n  NEAREST_MIPMAP_LINEAR: 9986,\n  LINEAR_MIPMAP_LINEAR: 9987,\n  CLAMP_TO_EDGE: 33071,\n  MIRRORED_REPEAT: 33648,\n  REPEAT: 10497\n};\nconst KHR_MESH_QUANTIZATION = \"KHR_mesh_quantization\";\nconst THREE_TO_WEBGL = {};\nTHREE_TO_WEBGL[NearestFilter] = WEBGL_CONSTANTS.NEAREST;\nTHREE_TO_WEBGL[NearestMipmapNearestFilter] = WEBGL_CONSTANTS.NEAREST_MIPMAP_NEAREST;\nTHREE_TO_WEBGL[NearestMipmapLinearFilter] = WEBGL_CONSTANTS.NEAREST_MIPMAP_LINEAR;\nTHREE_TO_WEBGL[LinearFilter] = WEBGL_CONSTANTS.LINEAR;\nTHREE_TO_WEBGL[LinearMipmapNearestFilter] = WEBGL_CONSTANTS.LINEAR_MIPMAP_NEAREST;\nTHREE_TO_WEBGL[LinearMipmapLinearFilter] = WEBGL_CONSTANTS.LINEAR_MIPMAP_LINEAR;\nTHREE_TO_WEBGL[ClampToEdgeWrapping] = WEBGL_CONSTANTS.CLAMP_TO_EDGE;\nTHREE_TO_WEBGL[RepeatWrapping] = WEBGL_CONSTANTS.REPEAT;\nTHREE_TO_WEBGL[MirroredRepeatWrapping] = WEBGL_CONSTANTS.MIRRORED_REPEAT;\nconst PATH_PROPERTIES = {\n  scale: \"scale\",\n  position: \"translation\",\n  quaternion: \"rotation\",\n  morphTargetInfluences: \"weights\"\n};\nconst DEFAULT_SPECULAR_COLOR = new Color();\nconst GLB_HEADER_BYTES = 12;\nconst GLB_HEADER_MAGIC = 1179937895;\nconst GLB_VERSION = 2;\nconst GLB_CHUNK_PREFIX_BYTES = 8;\nconst GLB_CHUNK_TYPE_JSON = 1313821514;\nconst GLB_CHUNK_TYPE_BIN = 5130562;\nfunction equalArray(array1, array2) {\n  return array1.length === array2.length && array1.every(function(element, index) {\n    return element === array2[index];\n  });\n}\nfunction stringToArrayBuffer(text) {\n  return new TextEncoder().encode(text).buffer;\n}\nfunction isIdentityMatrix(matrix) {\n  return equalArray(matrix.elements, [1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1]);\n}\nfunction getMinMax(attribute, start, count) {\n  const output = {\n    min: new Array(attribute.itemSize).fill(Number.POSITIVE_INFINITY),\n    max: new Array(attribute.itemSize).fill(Number.NEGATIVE_INFINITY)\n  };\n  for (let i = start; i < start + count; i++) {\n    for (let a = 0; a < attribute.itemSize; a++) {\n      let value;\n      if (attribute.itemSize > 4) {\n        value = attribute.array[i * attribute.itemSize + a];\n      } else {\n        if (a === 0)\n          value = attribute.getX(i);\n        else if (a === 1)\n          value = attribute.getY(i);\n        else if (a === 2)\n          value = attribute.getZ(i);\n        else if (a === 3)\n          value = attribute.getW(i);\n        if (attribute.normalized === true) {\n          value = MathUtils.normalize(value, attribute.array);\n        }\n      }\n      output.min[a] = Math.min(output.min[a], value);\n      output.max[a] = Math.max(output.max[a], value);\n    }\n  }\n  return output;\n}\nfunction getPaddedBufferSize(bufferSize) {\n  return Math.ceil(bufferSize / 4) * 4;\n}\nfunction getPaddedArrayBuffer(arrayBuffer, paddingByte = 0) {\n  const paddedLength = getPaddedBufferSize(arrayBuffer.byteLength);\n  if (paddedLength !== arrayBuffer.byteLength) {\n    const array = new Uint8Array(paddedLength);\n    array.set(new Uint8Array(arrayBuffer));\n    if (paddingByte !== 0) {\n      for (let i = arrayBuffer.byteLength; i < paddedLength; i++) {\n        array[i] = paddingByte;\n      }\n    }\n    return array.buffer;\n  }\n  return arrayBuffer;\n}\nfunction getCanvas() {\n  if (typeof document === \"undefined\" && typeof OffscreenCanvas !== \"undefined\") {\n    return new OffscreenCanvas(1, 1);\n  }\n  return document.createElement(\"canvas\");\n}\nfunction getToBlobPromise(canvas, mimeType) {\n  if (canvas.toBlob !== void 0) {\n    return new Promise((resolve) => canvas.toBlob(resolve, mimeType));\n  }\n  let quality;\n  if (mimeType === \"image/jpeg\") {\n    quality = 0.92;\n  } else if (mimeType === \"image/webp\") {\n    quality = 0.8;\n  }\n  return canvas.convertToBlob({\n    type: mimeType,\n    quality\n  });\n}\nclass GLTFWriter {\n  constructor() {\n    this.plugins = [];\n    this.options = {};\n    this.pending = [];\n    this.buffers = [];\n    this.byteOffset = 0;\n    this.buffers = [];\n    this.nodeMap = /* @__PURE__ */ new Map();\n    this.skins = [];\n    this.extensionsUsed = {};\n    this.extensionsRequired = {};\n    this.uids = /* @__PURE__ */ new Map();\n    this.uid = 0;\n    this.json = {\n      asset: {\n        version: \"2.0\",\n        generator: \"THREE.GLTFExporter\"\n      }\n    };\n    this.cache = {\n      meshes: /* @__PURE__ */ new Map(),\n      attributes: /* @__PURE__ */ new Map(),\n      attributesNormalized: /* @__PURE__ */ new Map(),\n      materials: /* @__PURE__ */ new Map(),\n      textures: /* @__PURE__ */ new Map(),\n      images: /* @__PURE__ */ new Map()\n    };\n  }\n  setPlugins(plugins) {\n    this.plugins = plugins;\n  }\n  /**\n   * Parse scenes and generate GLTF output\n   * @param  {Scene or [THREE.Scenes]} input   Scene or Array of THREE.Scenes\n   * @param  {Function} onDone  Callback on completed\n   * @param  {Object} options options\n   */\n  async write(input, onDone, options = {}) {\n    this.options = Object.assign(\n      {\n        // default options\n        binary: false,\n        trs: false,\n        onlyVisible: true,\n        maxTextureSize: Infinity,\n        animations: [],\n        includeCustomExtensions: false\n      },\n      options\n    );\n    if (this.options.animations.length > 0) {\n      this.options.trs = true;\n    }\n    this.processInput(input);\n    await Promise.all(this.pending);\n    const writer = this;\n    const buffers = writer.buffers;\n    const json = writer.json;\n    options = writer.options;\n    const extensionsUsed = writer.extensionsUsed;\n    const extensionsRequired = writer.extensionsRequired;\n    const blob = new Blob(buffers, { type: \"application/octet-stream\" });\n    const extensionsUsedList = Object.keys(extensionsUsed);\n    const extensionsRequiredList = Object.keys(extensionsRequired);\n    if (extensionsUsedList.length > 0)\n      json.extensionsUsed = extensionsUsedList;\n    if (extensionsRequiredList.length > 0)\n      json.extensionsRequired = extensionsRequiredList;\n    if (json.buffers && json.buffers.length > 0)\n      json.buffers[0].byteLength = blob.size;\n    if (options.binary === true) {\n      const reader = new FileReader();\n      reader.readAsArrayBuffer(blob);\n      reader.onloadend = function() {\n        const binaryChunk = getPaddedArrayBuffer(reader.result);\n        const binaryChunkPrefix = new DataView(new ArrayBuffer(GLB_CHUNK_PREFIX_BYTES));\n        binaryChunkPrefix.setUint32(0, binaryChunk.byteLength, true);\n        binaryChunkPrefix.setUint32(4, GLB_CHUNK_TYPE_BIN, true);\n        const jsonChunk = getPaddedArrayBuffer(stringToArrayBuffer(JSON.stringify(json)), 32);\n        const jsonChunkPrefix = new DataView(new ArrayBuffer(GLB_CHUNK_PREFIX_BYTES));\n        jsonChunkPrefix.setUint32(0, jsonChunk.byteLength, true);\n        jsonChunkPrefix.setUint32(4, GLB_CHUNK_TYPE_JSON, true);\n        const header = new ArrayBuffer(GLB_HEADER_BYTES);\n        const headerView = new DataView(header);\n        headerView.setUint32(0, GLB_HEADER_MAGIC, true);\n        headerView.setUint32(4, GLB_VERSION, true);\n        const totalByteLength = GLB_HEADER_BYTES + jsonChunkPrefix.byteLength + jsonChunk.byteLength + binaryChunkPrefix.byteLength + binaryChunk.byteLength;\n        headerView.setUint32(8, totalByteLength, true);\n        const glbBlob = new Blob([header, jsonChunkPrefix, jsonChunk, binaryChunkPrefix, binaryChunk], {\n          type: \"application/octet-stream\"\n        });\n        const glbReader = new FileReader();\n        glbReader.readAsArrayBuffer(glbBlob);\n        glbReader.onloadend = function() {\n          onDone(glbReader.result);\n        };\n      };\n    } else {\n      if (json.buffers && json.buffers.length > 0) {\n        const reader = new FileReader();\n        reader.readAsDataURL(blob);\n        reader.onloadend = function() {\n          const base64data = reader.result;\n          json.buffers[0].uri = base64data;\n          onDone(json);\n        };\n      } else {\n        onDone(json);\n      }\n    }\n  }\n  /**\n   * Serializes a userData.\n   *\n   * @param {THREE.Object3D|THREE.Material} object\n   * @param {Object} objectDef\n   */\n  serializeUserData(object, objectDef) {\n    if (Object.keys(object.userData).length === 0)\n      return;\n    const options = this.options;\n    const extensionsUsed = this.extensionsUsed;\n    try {\n      const json = JSON.parse(JSON.stringify(object.userData));\n      if (options.includeCustomExtensions && json.gltfExtensions) {\n        if (objectDef.extensions === void 0)\n          objectDef.extensions = {};\n        for (const extensionName in json.gltfExtensions) {\n          objectDef.extensions[extensionName] = json.gltfExtensions[extensionName];\n          extensionsUsed[extensionName] = true;\n        }\n        delete json.gltfExtensions;\n      }\n      if (Object.keys(json).length > 0)\n        objectDef.extras = json;\n    } catch (error) {\n      console.warn(\n        \"THREE.GLTFExporter: userData of '\" + object.name + \"' won't be serialized because of JSON.stringify error - \" + error.message\n      );\n    }\n  }\n  /**\n   * Returns ids for buffer attributes.\n   * @param  {Object} object\n   * @return {Integer}\n   */\n  getUID(attribute, isRelativeCopy = false) {\n    if (this.uids.has(attribute) === false) {\n      const uids2 = /* @__PURE__ */ new Map();\n      uids2.set(true, this.uid++);\n      uids2.set(false, this.uid++);\n      this.uids.set(attribute, uids2);\n    }\n    const uids = this.uids.get(attribute);\n    return uids.get(isRelativeCopy);\n  }\n  /**\n   * Checks if normal attribute values are normalized.\n   *\n   * @param {BufferAttribute} normal\n   * @returns {Boolean}\n   */\n  isNormalizedNormalAttribute(normal) {\n    const cache = this.cache;\n    if (cache.attributesNormalized.has(normal))\n      return false;\n    const v = new Vector3();\n    for (let i = 0, il = normal.count; i < il; i++) {\n      if (Math.abs(v.fromBufferAttribute(normal, i).length() - 1) > 5e-4)\n        return false;\n    }\n    return true;\n  }\n  /**\n   * Creates normalized normal buffer attribute.\n   *\n   * @param {BufferAttribute} normal\n   * @returns {BufferAttribute}\n   *\n   */\n  createNormalizedNormalAttribute(normal) {\n    const cache = this.cache;\n    if (cache.attributesNormalized.has(normal))\n      return cache.attributesNormalized.get(normal);\n    const attribute = normal.clone();\n    const v = new Vector3();\n    for (let i = 0, il = attribute.count; i < il; i++) {\n      v.fromBufferAttribute(attribute, i);\n      if (v.x === 0 && v.y === 0 && v.z === 0) {\n        v.setX(1);\n      } else {\n        v.normalize();\n      }\n      attribute.setXYZ(i, v.x, v.y, v.z);\n    }\n    cache.attributesNormalized.set(normal, attribute);\n    return attribute;\n  }\n  /**\n   * Applies a texture transform, if present, to the map definition. Requires\n   * the KHR_texture_transform extension.\n   *\n   * @param {Object} mapDef\n   * @param {THREE.Texture} texture\n   */\n  applyTextureTransform(mapDef, texture) {\n    let didTransform = false;\n    const transformDef = {};\n    if (texture.offset.x !== 0 || texture.offset.y !== 0) {\n      transformDef.offset = texture.offset.toArray();\n      didTransform = true;\n    }\n    if (texture.rotation !== 0) {\n      transformDef.rotation = texture.rotation;\n      didTransform = true;\n    }\n    if (texture.repeat.x !== 1 || texture.repeat.y !== 1) {\n      transformDef.scale = texture.repeat.toArray();\n      didTransform = true;\n    }\n    if (didTransform) {\n      mapDef.extensions = mapDef.extensions || {};\n      mapDef.extensions[\"KHR_texture_transform\"] = transformDef;\n      this.extensionsUsed[\"KHR_texture_transform\"] = true;\n    }\n  }\n  buildMetalRoughTexture(metalnessMap, roughnessMap) {\n    if (metalnessMap === roughnessMap)\n      return metalnessMap;\n    function getEncodingConversion(map) {\n      if (\"colorSpace\" in map ? map.colorSpace === \"srgb\" : map.encoding === 3001) {\n        return function SRGBToLinear(c) {\n          return c < 0.04045 ? c * 0.0773993808 : Math.pow(c * 0.9478672986 + 0.0521327014, 2.4);\n        };\n      }\n      return function LinearToLinear(c) {\n        return c;\n      };\n    }\n    console.warn(\"THREE.GLTFExporter: Merged metalnessMap and roughnessMap textures.\");\n    if (metalnessMap instanceof CompressedTexture) {\n      metalnessMap = decompress(metalnessMap);\n    }\n    if (roughnessMap instanceof CompressedTexture) {\n      roughnessMap = decompress(roughnessMap);\n    }\n    const metalness = metalnessMap ? metalnessMap.image : null;\n    const roughness = roughnessMap ? roughnessMap.image : null;\n    const width = Math.max(metalness ? metalness.width : 0, roughness ? roughness.width : 0);\n    const height = Math.max(metalness ? metalness.height : 0, roughness ? roughness.height : 0);\n    const canvas = getCanvas();\n    canvas.width = width;\n    canvas.height = height;\n    const context = canvas.getContext(\"2d\");\n    context.fillStyle = \"#00ffff\";\n    context.fillRect(0, 0, width, height);\n    const composite = context.getImageData(0, 0, width, height);\n    if (metalness) {\n      context.drawImage(metalness, 0, 0, width, height);\n      const convert = getEncodingConversion(metalnessMap);\n      const data = context.getImageData(0, 0, width, height).data;\n      for (let i = 2; i < data.length; i += 4) {\n        composite.data[i] = convert(data[i] / 256) * 256;\n      }\n    }\n    if (roughness) {\n      context.drawImage(roughness, 0, 0, width, height);\n      const convert = getEncodingConversion(roughnessMap);\n      const data = context.getImageData(0, 0, width, height).data;\n      for (let i = 1; i < data.length; i += 4) {\n        composite.data[i] = convert(data[i] / 256) * 256;\n      }\n    }\n    context.putImageData(composite, 0, 0);\n    const reference = metalnessMap || roughnessMap;\n    const texture = reference.clone();\n    texture.source = new Texture(canvas).source;\n    if (\"colorSpace\" in texture)\n      texture.colorSpace = \"\";\n    else\n      texture.encoding = 3e3;\n    texture.channel = (metalnessMap || roughnessMap).channel;\n    if (metalnessMap && roughnessMap && metalnessMap.channel !== roughnessMap.channel) {\n      console.warn(\"THREE.GLTFExporter: UV channels for metalnessMap and roughnessMap textures must match.\");\n    }\n    return texture;\n  }\n  /**\n   * Process a buffer to append to the default one.\n   * @param  {ArrayBuffer} buffer\n   * @return {Integer}\n   */\n  processBuffer(buffer) {\n    const json = this.json;\n    const buffers = this.buffers;\n    if (!json.buffers)\n      json.buffers = [{ byteLength: 0 }];\n    buffers.push(buffer);\n    return 0;\n  }\n  /**\n   * Process and generate a BufferView\n   * @param  {BufferAttribute} attribute\n   * @param  {number} componentType\n   * @param  {number} start\n   * @param  {number} count\n   * @param  {number} target (Optional) Target usage of the BufferView\n   * @return {Object}\n   */\n  processBufferView(attribute, componentType, start, count, target) {\n    const json = this.json;\n    if (!json.bufferViews)\n      json.bufferViews = [];\n    let componentSize;\n    switch (componentType) {\n      case WEBGL_CONSTANTS.BYTE:\n      case WEBGL_CONSTANTS.UNSIGNED_BYTE:\n        componentSize = 1;\n        break;\n      case WEBGL_CONSTANTS.SHORT:\n      case WEBGL_CONSTANTS.UNSIGNED_SHORT:\n        componentSize = 2;\n        break;\n      default:\n        componentSize = 4;\n    }\n    const byteLength = getPaddedBufferSize(count * attribute.itemSize * componentSize);\n    const dataView = new DataView(new ArrayBuffer(byteLength));\n    let offset = 0;\n    for (let i = start; i < start + count; i++) {\n      for (let a = 0; a < attribute.itemSize; a++) {\n        let value;\n        if (attribute.itemSize > 4) {\n          value = attribute.array[i * attribute.itemSize + a];\n        } else {\n          if (a === 0)\n            value = attribute.getX(i);\n          else if (a === 1)\n            value = attribute.getY(i);\n          else if (a === 2)\n            value = attribute.getZ(i);\n          else if (a === 3)\n            value = attribute.getW(i);\n          if (attribute.normalized === true) {\n            value = MathUtils.normalize(value, attribute.array);\n          }\n        }\n        if (componentType === WEBGL_CONSTANTS.FLOAT) {\n          dataView.setFloat32(offset, value, true);\n        } else if (componentType === WEBGL_CONSTANTS.INT) {\n          dataView.setInt32(offset, value, true);\n        } else if (componentType === WEBGL_CONSTANTS.UNSIGNED_INT) {\n          dataView.setUint32(offset, value, true);\n        } else if (componentType === WEBGL_CONSTANTS.SHORT) {\n          dataView.setInt16(offset, value, true);\n        } else if (componentType === WEBGL_CONSTANTS.UNSIGNED_SHORT) {\n          dataView.setUint16(offset, value, true);\n        } else if (componentType === WEBGL_CONSTANTS.BYTE) {\n          dataView.setInt8(offset, value);\n        } else if (componentType === WEBGL_CONSTANTS.UNSIGNED_BYTE) {\n          dataView.setUint8(offset, value);\n        }\n        offset += componentSize;\n      }\n    }\n    const bufferViewDef = {\n      buffer: this.processBuffer(dataView.buffer),\n      byteOffset: this.byteOffset,\n      byteLength\n    };\n    if (target !== void 0)\n      bufferViewDef.target = target;\n    if (target === WEBGL_CONSTANTS.ARRAY_BUFFER) {\n      bufferViewDef.byteStride = attribute.itemSize * componentSize;\n    }\n    this.byteOffset += byteLength;\n    json.bufferViews.push(bufferViewDef);\n    const output = {\n      id: json.bufferViews.length - 1,\n      byteLength: 0\n    };\n    return output;\n  }\n  /**\n   * Process and generate a BufferView from an image Blob.\n   * @param {Blob} blob\n   * @return {Promise<Integer>}\n   */\n  processBufferViewImage(blob) {\n    const writer = this;\n    const json = writer.json;\n    if (!json.bufferViews)\n      json.bufferViews = [];\n    return new Promise(function(resolve) {\n      const reader = new FileReader();\n      reader.readAsArrayBuffer(blob);\n      reader.onloadend = function() {\n        const buffer = getPaddedArrayBuffer(reader.result);\n        const bufferViewDef = {\n          buffer: writer.processBuffer(buffer),\n          byteOffset: writer.byteOffset,\n          byteLength: buffer.byteLength\n        };\n        writer.byteOffset += buffer.byteLength;\n        resolve(json.bufferViews.push(bufferViewDef) - 1);\n      };\n    });\n  }\n  /**\n   * Process attribute to generate an accessor\n   * @param  {BufferAttribute} attribute Attribute to process\n   * @param  {THREE.BufferGeometry} geometry (Optional) Geometry used for truncated draw range\n   * @param  {Integer} start (Optional)\n   * @param  {Integer} count (Optional)\n   * @return {Integer|null} Index of the processed accessor on the \"accessors\" array\n   */\n  processAccessor(attribute, geometry, start, count) {\n    const json = this.json;\n    const types = {\n      1: \"SCALAR\",\n      2: \"VEC2\",\n      3: \"VEC3\",\n      4: \"VEC4\",\n      9: \"MAT3\",\n      16: \"MAT4\"\n    };\n    let componentType;\n    if (attribute.array.constructor === Float32Array) {\n      componentType = WEBGL_CONSTANTS.FLOAT;\n    } else if (attribute.array.constructor === Int32Array) {\n      componentType = WEBGL_CONSTANTS.INT;\n    } else if (attribute.array.constructor === Uint32Array) {\n      componentType = WEBGL_CONSTANTS.UNSIGNED_INT;\n    } else if (attribute.array.constructor === Int16Array) {\n      componentType = WEBGL_CONSTANTS.SHORT;\n    } else if (attribute.array.constructor === Uint16Array) {\n      componentType = WEBGL_CONSTANTS.UNSIGNED_SHORT;\n    } else if (attribute.array.constructor === Int8Array) {\n      componentType = WEBGL_CONSTANTS.BYTE;\n    } else if (attribute.array.constructor === Uint8Array) {\n      componentType = WEBGL_CONSTANTS.UNSIGNED_BYTE;\n    } else {\n      throw new Error(\n        \"THREE.GLTFExporter: Unsupported bufferAttribute component type: \" + attribute.array.constructor.name\n      );\n    }\n    if (start === void 0)\n      start = 0;\n    if (count === void 0)\n      count = attribute.count;\n    if (count === 0)\n      return null;\n    const minMax = getMinMax(attribute, start, count);\n    let bufferViewTarget;\n    if (geometry !== void 0) {\n      bufferViewTarget = attribute === geometry.index ? WEBGL_CONSTANTS.ELEMENT_ARRAY_BUFFER : WEBGL_CONSTANTS.ARRAY_BUFFER;\n    }\n    const bufferView = this.processBufferView(attribute, componentType, start, count, bufferViewTarget);\n    const accessorDef = {\n      bufferView: bufferView.id,\n      byteOffset: bufferView.byteOffset,\n      componentType,\n      count,\n      max: minMax.max,\n      min: minMax.min,\n      type: types[attribute.itemSize]\n    };\n    if (attribute.normalized === true)\n      accessorDef.normalized = true;\n    if (!json.accessors)\n      json.accessors = [];\n    return json.accessors.push(accessorDef) - 1;\n  }\n  /**\n   * Process image\n   * @param  {Image} image to process\n   * @param  {Integer} format of the image (RGBAFormat)\n   * @param  {Boolean} flipY before writing out the image\n   * @param  {String} mimeType export format\n   * @return {Integer}     Index of the processed texture in the \"images\" array\n   */\n  processImage(image, format, flipY, mimeType = \"image/png\") {\n    if (image !== null) {\n      const writer = this;\n      const cache = writer.cache;\n      const json = writer.json;\n      const options = writer.options;\n      const pending = writer.pending;\n      if (!cache.images.has(image))\n        cache.images.set(image, {});\n      const cachedImages = cache.images.get(image);\n      const key = mimeType + \":flipY/\" + flipY.toString();\n      if (cachedImages[key] !== void 0)\n        return cachedImages[key];\n      if (!json.images)\n        json.images = [];\n      const imageDef = { mimeType };\n      const canvas = getCanvas();\n      canvas.width = Math.min(image.width, options.maxTextureSize);\n      canvas.height = Math.min(image.height, options.maxTextureSize);\n      const ctx = canvas.getContext(\"2d\");\n      if (flipY === true) {\n        ctx.translate(0, canvas.height);\n        ctx.scale(1, -1);\n      }\n      if (image.data !== void 0) {\n        if (format !== RGBAFormat) {\n          console.error(\"GLTFExporter: Only RGBAFormat is supported.\", format);\n        }\n        if (image.width > options.maxTextureSize || image.height > options.maxTextureSize) {\n          console.warn(\"GLTFExporter: Image size is bigger than maxTextureSize\", image);\n        }\n        const data = new Uint8ClampedArray(image.height * image.width * 4);\n        for (let i = 0; i < data.length; i += 4) {\n          data[i + 0] = image.data[i + 0];\n          data[i + 1] = image.data[i + 1];\n          data[i + 2] = image.data[i + 2];\n          data[i + 3] = image.data[i + 3];\n        }\n        ctx.putImageData(new ImageData(data, image.width, image.height), 0, 0);\n      } else {\n        ctx.drawImage(image, 0, 0, canvas.width, canvas.height);\n      }\n      if (options.binary === true) {\n        pending.push(\n          getToBlobPromise(canvas, mimeType).then((blob) => writer.processBufferViewImage(blob)).then((bufferViewIndex) => {\n            imageDef.bufferView = bufferViewIndex;\n          })\n        );\n      } else {\n        if (canvas.toDataURL !== void 0) {\n          imageDef.uri = canvas.toDataURL(mimeType);\n        } else {\n          pending.push(\n            getToBlobPromise(canvas, mimeType).then((blob) => new FileReader().readAsDataURL(blob)).then((dataURL) => {\n              imageDef.uri = dataURL;\n            })\n          );\n        }\n      }\n      const index = json.images.push(imageDef) - 1;\n      cachedImages[key] = index;\n      return index;\n    } else {\n      throw new Error(\"THREE.GLTFExporter: No valid image data found. Unable to process texture.\");\n    }\n  }\n  /**\n   * Process sampler\n   * @param  {Texture} map Texture to process\n   * @return {Integer}     Index of the processed texture in the \"samplers\" array\n   */\n  processSampler(map) {\n    const json = this.json;\n    if (!json.samplers)\n      json.samplers = [];\n    const samplerDef = {\n      magFilter: THREE_TO_WEBGL[map.magFilter],\n      minFilter: THREE_TO_WEBGL[map.minFilter],\n      wrapS: THREE_TO_WEBGL[map.wrapS],\n      wrapT: THREE_TO_WEBGL[map.wrapT]\n    };\n    return json.samplers.push(samplerDef) - 1;\n  }\n  /**\n   * Process texture\n   * @param  {Texture} map Map to process\n   * @return {Integer} Index of the processed texture in the \"textures\" array\n   */\n  processTexture(map) {\n    const writer = this;\n    const options = writer.options;\n    const cache = this.cache;\n    const json = this.json;\n    if (cache.textures.has(map))\n      return cache.textures.get(map);\n    if (!json.textures)\n      json.textures = [];\n    if (map instanceof CompressedTexture) {\n      map = decompress(map, options.maxTextureSize);\n    }\n    let mimeType = map.userData.mimeType;\n    if (mimeType === \"image/webp\")\n      mimeType = \"image/png\";\n    const textureDef = {\n      sampler: this.processSampler(map),\n      source: this.processImage(map.image, map.format, map.flipY, mimeType)\n    };\n    if (map.name)\n      textureDef.name = map.name;\n    this._invokeAll(function(ext) {\n      ext.writeTexture && ext.writeTexture(map, textureDef);\n    });\n    const index = json.textures.push(textureDef) - 1;\n    cache.textures.set(map, index);\n    return index;\n  }\n  /**\n   * Process material\n   * @param  {THREE.Material} material Material to process\n   * @return {Integer|null} Index of the processed material in the \"materials\" array\n   */\n  processMaterial(material) {\n    const cache = this.cache;\n    const json = this.json;\n    if (cache.materials.has(material))\n      return cache.materials.get(material);\n    if (material.isShaderMaterial) {\n      console.warn(\"GLTFExporter: THREE.ShaderMaterial not supported.\");\n      return null;\n    }\n    if (!json.materials)\n      json.materials = [];\n    const materialDef = { pbrMetallicRoughness: {} };\n    if (material.isMeshStandardMaterial !== true && material.isMeshBasicMaterial !== true) {\n      console.warn(\"GLTFExporter: Use MeshStandardMaterial or MeshBasicMaterial for best results.\");\n    }\n    const color = material.color.toArray().concat([material.opacity]);\n    if (!equalArray(color, [1, 1, 1, 1])) {\n      materialDef.pbrMetallicRoughness.baseColorFactor = color;\n    }\n    if (material.isMeshStandardMaterial) {\n      materialDef.pbrMetallicRoughness.metallicFactor = material.metalness;\n      materialDef.pbrMetallicRoughness.roughnessFactor = material.roughness;\n    } else {\n      materialDef.pbrMetallicRoughness.metallicFactor = 0.5;\n      materialDef.pbrMetallicRoughness.roughnessFactor = 0.5;\n    }\n    if (material.metalnessMap || material.roughnessMap) {\n      const metalRoughTexture = this.buildMetalRoughTexture(material.metalnessMap, material.roughnessMap);\n      const metalRoughMapDef = {\n        index: this.processTexture(metalRoughTexture),\n        channel: metalRoughTexture.channel\n      };\n      this.applyTextureTransform(metalRoughMapDef, metalRoughTexture);\n      materialDef.pbrMetallicRoughness.metallicRoughnessTexture = metalRoughMapDef;\n    }\n    if (material.map) {\n      const baseColorMapDef = {\n        index: this.processTexture(material.map),\n        texCoord: material.map.channel\n      };\n      this.applyTextureTransform(baseColorMapDef, material.map);\n      materialDef.pbrMetallicRoughness.baseColorTexture = baseColorMapDef;\n    }\n    if (material.emissive) {\n      const emissive = material.emissive;\n      const maxEmissiveComponent = Math.max(emissive.r, emissive.g, emissive.b);\n      if (maxEmissiveComponent > 0) {\n        materialDef.emissiveFactor = material.emissive.toArray();\n      }\n      if (material.emissiveMap) {\n        const emissiveMapDef = {\n          index: this.processTexture(material.emissiveMap),\n          texCoord: material.emissiveMap.channel\n        };\n        this.applyTextureTransform(emissiveMapDef, material.emissiveMap);\n        materialDef.emissiveTexture = emissiveMapDef;\n      }\n    }\n    if (material.normalMap) {\n      const normalMapDef = {\n        index: this.processTexture(material.normalMap),\n        texCoord: material.normalMap.channel\n      };\n      if (material.normalScale && material.normalScale.x !== 1) {\n        normalMapDef.scale = material.normalScale.x;\n      }\n      this.applyTextureTransform(normalMapDef, material.normalMap);\n      materialDef.normalTexture = normalMapDef;\n    }\n    if (material.aoMap) {\n      const occlusionMapDef = {\n        index: this.processTexture(material.aoMap),\n        texCoord: material.aoMap.channel\n      };\n      if (material.aoMapIntensity !== 1) {\n        occlusionMapDef.strength = material.aoMapIntensity;\n      }\n      this.applyTextureTransform(occlusionMapDef, material.aoMap);\n      materialDef.occlusionTexture = occlusionMapDef;\n    }\n    if (material.transparent) {\n      materialDef.alphaMode = \"BLEND\";\n    } else {\n      if (material.alphaTest > 0) {\n        materialDef.alphaMode = \"MASK\";\n        materialDef.alphaCutoff = material.alphaTest;\n      }\n    }\n    if (material.side === DoubleSide)\n      materialDef.doubleSided = true;\n    if (material.name !== \"\")\n      materialDef.name = material.name;\n    this.serializeUserData(material, materialDef);\n    this._invokeAll(function(ext) {\n      ext.writeMaterial && ext.writeMaterial(material, materialDef);\n    });\n    const index = json.materials.push(materialDef) - 1;\n    cache.materials.set(material, index);\n    return index;\n  }\n  /**\n   * Process mesh\n   * @param  {THREE.Mesh} mesh Mesh to process\n   * @return {Integer|null} Index of the processed mesh in the \"meshes\" array\n   */\n  processMesh(mesh) {\n    const cache = this.cache;\n    const json = this.json;\n    const meshCacheKeyParts = [mesh.geometry.uuid];\n    if (Array.isArray(mesh.material)) {\n      for (let i = 0, l = mesh.material.length; i < l; i++) {\n        meshCacheKeyParts.push(mesh.material[i].uuid);\n      }\n    } else {\n      meshCacheKeyParts.push(mesh.material.uuid);\n    }\n    const meshCacheKey = meshCacheKeyParts.join(\":\");\n    if (cache.meshes.has(meshCacheKey))\n      return cache.meshes.get(meshCacheKey);\n    const geometry = mesh.geometry;\n    let mode;\n    if (mesh.isLineSegments) {\n      mode = WEBGL_CONSTANTS.LINES;\n    } else if (mesh.isLineLoop) {\n      mode = WEBGL_CONSTANTS.LINE_LOOP;\n    } else if (mesh.isLine) {\n      mode = WEBGL_CONSTANTS.LINE_STRIP;\n    } else if (mesh.isPoints) {\n      mode = WEBGL_CONSTANTS.POINTS;\n    } else {\n      mode = mesh.material.wireframe ? WEBGL_CONSTANTS.LINES : WEBGL_CONSTANTS.TRIANGLES;\n    }\n    const meshDef = {};\n    const attributes = {};\n    const primitives = [];\n    const targets = [];\n    const nameConversion = {\n      uv: \"TEXCOORD_0\",\n      [REVISION.replace(/\\D+/g, \"\") >= 152 ? \"uv1\" : \"uv2\"]: \"TEXCOORD_1\",\n      color: \"COLOR_0\",\n      skinWeight: \"WEIGHTS_0\",\n      skinIndex: \"JOINTS_0\"\n    };\n    const originalNormal = geometry.getAttribute(\"normal\");\n    if (originalNormal !== void 0 && !this.isNormalizedNormalAttribute(originalNormal)) {\n      console.warn(\"THREE.GLTFExporter: Creating normalized normal attribute from the non-normalized one.\");\n      geometry.setAttribute(\"normal\", this.createNormalizedNormalAttribute(originalNormal));\n    }\n    let modifiedAttribute = null;\n    for (let attributeName in geometry.attributes) {\n      if (attributeName.slice(0, 5) === \"morph\")\n        continue;\n      const attribute = geometry.attributes[attributeName];\n      attributeName = nameConversion[attributeName] || attributeName.toUpperCase();\n      const validVertexAttributes = /^(POSITION|NORMAL|TANGENT|TEXCOORD_\\d+|COLOR_\\d+|JOINTS_\\d+|WEIGHTS_\\d+)$/;\n      if (!validVertexAttributes.test(attributeName))\n        attributeName = \"_\" + attributeName;\n      if (cache.attributes.has(this.getUID(attribute))) {\n        attributes[attributeName] = cache.attributes.get(this.getUID(attribute));\n        continue;\n      }\n      modifiedAttribute = null;\n      const array = attribute.array;\n      if (attributeName === \"JOINTS_0\" && !(array instanceof Uint16Array) && !(array instanceof Uint8Array)) {\n        console.warn('GLTFExporter: Attribute \"skinIndex\" converted to type UNSIGNED_SHORT.');\n        modifiedAttribute = new BufferAttribute(new Uint16Array(array), attribute.itemSize, attribute.normalized);\n      }\n      const accessor = this.processAccessor(modifiedAttribute || attribute, geometry);\n      if (accessor !== null) {\n        if (!attributeName.startsWith(\"_\")) {\n          this.detectMeshQuantization(attributeName, attribute);\n        }\n        attributes[attributeName] = accessor;\n        cache.attributes.set(this.getUID(attribute), accessor);\n      }\n    }\n    if (originalNormal !== void 0)\n      geometry.setAttribute(\"normal\", originalNormal);\n    if (Object.keys(attributes).length === 0)\n      return null;\n    if (mesh.morphTargetInfluences !== void 0 && mesh.morphTargetInfluences.length > 0) {\n      const weights = [];\n      const targetNames = [];\n      const reverseDictionary = {};\n      if (mesh.morphTargetDictionary !== void 0) {\n        for (const key in mesh.morphTargetDictionary) {\n          reverseDictionary[mesh.morphTargetDictionary[key]] = key;\n        }\n      }\n      for (let i = 0; i < mesh.morphTargetInfluences.length; ++i) {\n        const target = {};\n        let warned = false;\n        for (const attributeName in geometry.morphAttributes) {\n          if (attributeName !== \"position\" && attributeName !== \"normal\") {\n            if (!warned) {\n              console.warn(\"GLTFExporter: Only POSITION and NORMAL morph are supported.\");\n              warned = true;\n            }\n            continue;\n          }\n          const attribute = geometry.morphAttributes[attributeName][i];\n          const gltfAttributeName = attributeName.toUpperCase();\n          const baseAttribute = geometry.attributes[attributeName];\n          if (cache.attributes.has(this.getUID(attribute, true))) {\n            target[gltfAttributeName] = cache.attributes.get(this.getUID(attribute, true));\n            continue;\n          }\n          const relativeAttribute = attribute.clone();\n          if (!geometry.morphTargetsRelative) {\n            for (let j = 0, jl = attribute.count; j < jl; j++) {\n              for (let a = 0; a < attribute.itemSize; a++) {\n                if (a === 0)\n                  relativeAttribute.setX(j, attribute.getX(j) - baseAttribute.getX(j));\n                if (a === 1)\n                  relativeAttribute.setY(j, attribute.getY(j) - baseAttribute.getY(j));\n                if (a === 2)\n                  relativeAttribute.setZ(j, attribute.getZ(j) - baseAttribute.getZ(j));\n                if (a === 3)\n                  relativeAttribute.setW(j, attribute.getW(j) - baseAttribute.getW(j));\n              }\n            }\n          }\n          target[gltfAttributeName] = this.processAccessor(relativeAttribute, geometry);\n          cache.attributes.set(this.getUID(baseAttribute, true), target[gltfAttributeName]);\n        }\n        targets.push(target);\n        weights.push(mesh.morphTargetInfluences[i]);\n        if (mesh.morphTargetDictionary !== void 0)\n          targetNames.push(reverseDictionary[i]);\n      }\n      meshDef.weights = weights;\n      if (targetNames.length > 0) {\n        meshDef.extras = {};\n        meshDef.extras.targetNames = targetNames;\n      }\n    }\n    const isMultiMaterial = Array.isArray(mesh.material);\n    if (isMultiMaterial && geometry.groups.length === 0)\n      return null;\n    const materials = isMultiMaterial ? mesh.material : [mesh.material];\n    const groups = isMultiMaterial ? geometry.groups : [{ materialIndex: 0, start: void 0, count: void 0 }];\n    for (let i = 0, il = groups.length; i < il; i++) {\n      const primitive = {\n        mode,\n        attributes\n      };\n      this.serializeUserData(geometry, primitive);\n      if (targets.length > 0)\n        primitive.targets = targets;\n      if (geometry.index !== null) {\n        let cacheKey = this.getUID(geometry.index);\n        if (groups[i].start !== void 0 || groups[i].count !== void 0) {\n          cacheKey += \":\" + groups[i].start + \":\" + groups[i].count;\n        }\n        if (cache.attributes.has(cacheKey)) {\n          primitive.indices = cache.attributes.get(cacheKey);\n        } else {\n          primitive.indices = this.processAccessor(geometry.index, geometry, groups[i].start, groups[i].count);\n          cache.attributes.set(cacheKey, primitive.indices);\n        }\n        if (primitive.indices === null)\n          delete primitive.indices;\n      }\n      const material = this.processMaterial(materials[groups[i].materialIndex]);\n      if (material !== null)\n        primitive.material = material;\n      primitives.push(primitive);\n    }\n    meshDef.primitives = primitives;\n    if (!json.meshes)\n      json.meshes = [];\n    this._invokeAll(function(ext) {\n      ext.writeMesh && ext.writeMesh(mesh, meshDef);\n    });\n    const index = json.meshes.push(meshDef) - 1;\n    cache.meshes.set(meshCacheKey, index);\n    return index;\n  }\n  /**\n   * If a vertex attribute with a\n   * [non-standard data type](https://registry.khronos.org/glTF/specs/2.0/glTF-2.0.html#meshes-overview)\n   * is used, it is checked whether it is a valid data type according to the\n   * [KHR_mesh_quantization](https://github.com/KhronosGroup/glTF/blob/main/extensions/2.0/Khronos/KHR_mesh_quantization/README.md)\n   * extension.\n   * In this case the extension is automatically added to the list of used extensions.\n   *\n   * @param {string} attributeName\n   * @param {THREE.BufferAttribute} attribute\n   */\n  detectMeshQuantization(attributeName, attribute) {\n    if (this.extensionsUsed[KHR_MESH_QUANTIZATION])\n      return;\n    let attrType = void 0;\n    switch (attribute.array.constructor) {\n      case Int8Array:\n        attrType = \"byte\";\n        break;\n      case Uint8Array:\n        attrType = \"unsigned byte\";\n        break;\n      case Int16Array:\n        attrType = \"short\";\n        break;\n      case Uint16Array:\n        attrType = \"unsigned short\";\n        break;\n      default:\n        return;\n    }\n    if (attribute.normalized)\n      attrType += \" normalized\";\n    const attrNamePrefix = attributeName.split(\"_\", 1)[0];\n    if (KHR_mesh_quantization_ExtraAttrTypes[attrNamePrefix] && KHR_mesh_quantization_ExtraAttrTypes[attrNamePrefix].includes(attrType)) {\n      this.extensionsUsed[KHR_MESH_QUANTIZATION] = true;\n      this.extensionsRequired[KHR_MESH_QUANTIZATION] = true;\n    }\n  }\n  /**\n   * Process camera\n   * @param  {THREE.Camera} camera Camera to process\n   * @return {Integer}      Index of the processed mesh in the \"camera\" array\n   */\n  processCamera(camera) {\n    const json = this.json;\n    if (!json.cameras)\n      json.cameras = [];\n    const isOrtho = camera.isOrthographicCamera;\n    const cameraDef = {\n      type: isOrtho ? \"orthographic\" : \"perspective\"\n    };\n    if (isOrtho) {\n      cameraDef.orthographic = {\n        xmag: camera.right * 2,\n        ymag: camera.top * 2,\n        zfar: camera.far <= 0 ? 1e-3 : camera.far,\n        znear: camera.near < 0 ? 0 : camera.near\n      };\n    } else {\n      cameraDef.perspective = {\n        aspectRatio: camera.aspect,\n        yfov: MathUtils.degToRad(camera.fov),\n        zfar: camera.far <= 0 ? 1e-3 : camera.far,\n        znear: camera.near < 0 ? 0 : camera.near\n      };\n    }\n    if (camera.name !== \"\")\n      cameraDef.name = camera.type;\n    return json.cameras.push(cameraDef) - 1;\n  }\n  /**\n   * Creates glTF animation entry from AnimationClip object.\n   *\n   * Status:\n   * - Only properties listed in PATH_PROPERTIES may be animated.\n   *\n   * @param {THREE.AnimationClip} clip\n   * @param {THREE.Object3D} root\n   * @return {number|null}\n   */\n  processAnimation(clip, root) {\n    const json = this.json;\n    const nodeMap = this.nodeMap;\n    if (!json.animations)\n      json.animations = [];\n    clip = GLTFExporter.Utils.mergeMorphTargetTracks(clip.clone(), root);\n    const tracks = clip.tracks;\n    const channels = [];\n    const samplers = [];\n    for (let i = 0; i < tracks.length; ++i) {\n      const track = tracks[i];\n      const trackBinding = PropertyBinding.parseTrackName(track.name);\n      let trackNode = PropertyBinding.findNode(root, trackBinding.nodeName);\n      const trackProperty = PATH_PROPERTIES[trackBinding.propertyName];\n      if (trackBinding.objectName === \"bones\") {\n        if (trackNode.isSkinnedMesh === true) {\n          trackNode = trackNode.skeleton.getBoneByName(trackBinding.objectIndex);\n        } else {\n          trackNode = void 0;\n        }\n      }\n      if (!trackNode || !trackProperty) {\n        console.warn('THREE.GLTFExporter: Could not export animation track \"%s\".', track.name);\n        return null;\n      }\n      const inputItemSize = 1;\n      let outputItemSize = track.values.length / track.times.length;\n      if (trackProperty === PATH_PROPERTIES.morphTargetInfluences) {\n        outputItemSize /= trackNode.morphTargetInfluences.length;\n      }\n      let interpolation;\n      if (track.createInterpolant.isInterpolantFactoryMethodGLTFCubicSpline === true) {\n        interpolation = \"CUBICSPLINE\";\n        outputItemSize /= 3;\n      } else if (track.getInterpolation() === InterpolateDiscrete) {\n        interpolation = \"STEP\";\n      } else {\n        interpolation = \"LINEAR\";\n      }\n      samplers.push({\n        input: this.processAccessor(new BufferAttribute(track.times, inputItemSize)),\n        output: this.processAccessor(new BufferAttribute(track.values, outputItemSize)),\n        interpolation\n      });\n      channels.push({\n        sampler: samplers.length - 1,\n        target: {\n          node: nodeMap.get(trackNode),\n          path: trackProperty\n        }\n      });\n    }\n    json.animations.push({\n      name: clip.name || \"clip_\" + json.animations.length,\n      samplers,\n      channels\n    });\n    return json.animations.length - 1;\n  }\n  /**\n   * @param {THREE.Object3D} object\n   * @return {number|null}\n   */\n  processSkin(object) {\n    const json = this.json;\n    const nodeMap = this.nodeMap;\n    const node = json.nodes[nodeMap.get(object)];\n    const skeleton = object.skeleton;\n    if (skeleton === void 0)\n      return null;\n    const rootJoint = object.skeleton.bones[0];\n    if (rootJoint === void 0)\n      return null;\n    const joints = [];\n    const inverseBindMatrices = new Float32Array(skeleton.bones.length * 16);\n    const temporaryBoneInverse = new Matrix4();\n    for (let i = 0; i < skeleton.bones.length; ++i) {\n      joints.push(nodeMap.get(skeleton.bones[i]));\n      temporaryBoneInverse.copy(skeleton.boneInverses[i]);\n      temporaryBoneInverse.multiply(object.bindMatrix).toArray(inverseBindMatrices, i * 16);\n    }\n    if (json.skins === void 0)\n      json.skins = [];\n    json.skins.push({\n      inverseBindMatrices: this.processAccessor(new BufferAttribute(inverseBindMatrices, 16)),\n      joints,\n      skeleton: nodeMap.get(rootJoint)\n    });\n    const skinIndex = node.skin = json.skins.length - 1;\n    return skinIndex;\n  }\n  /**\n   * Process Object3D node\n   * @param  {THREE.Object3D} node Object3D to processNode\n   * @return {Integer} Index of the node in the nodes list\n   */\n  processNode(object) {\n    const json = this.json;\n    const options = this.options;\n    const nodeMap = this.nodeMap;\n    if (!json.nodes)\n      json.nodes = [];\n    const nodeDef = {};\n    if (options.trs) {\n      const rotation = object.quaternion.toArray();\n      const position = object.position.toArray();\n      const scale = object.scale.toArray();\n      if (!equalArray(rotation, [0, 0, 0, 1])) {\n        nodeDef.rotation = rotation;\n      }\n      if (!equalArray(position, [0, 0, 0])) {\n        nodeDef.translation = position;\n      }\n      if (!equalArray(scale, [1, 1, 1])) {\n        nodeDef.scale = scale;\n      }\n    } else {\n      if (object.matrixAutoUpdate) {\n        object.updateMatrix();\n      }\n      if (isIdentityMatrix(object.matrix) === false) {\n        nodeDef.matrix = object.matrix.elements;\n      }\n    }\n    if (object.name !== \"\")\n      nodeDef.name = String(object.name);\n    this.serializeUserData(object, nodeDef);\n    if (object.isMesh || object.isLine || object.isPoints) {\n      const meshIndex = this.processMesh(object);\n      if (meshIndex !== null)\n        nodeDef.mesh = meshIndex;\n    } else if (object.isCamera) {\n      nodeDef.camera = this.processCamera(object);\n    }\n    if (object.isSkinnedMesh)\n      this.skins.push(object);\n    if (object.children.length > 0) {\n      const children = [];\n      for (let i = 0, l = object.children.length; i < l; i++) {\n        const child = object.children[i];\n        if (child.visible || options.onlyVisible === false) {\n          const nodeIndex2 = this.processNode(child);\n          if (nodeIndex2 !== null)\n            children.push(nodeIndex2);\n        }\n      }\n      if (children.length > 0)\n        nodeDef.children = children;\n    }\n    this._invokeAll(function(ext) {\n      ext.writeNode && ext.writeNode(object, nodeDef);\n    });\n    const nodeIndex = json.nodes.push(nodeDef) - 1;\n    nodeMap.set(object, nodeIndex);\n    return nodeIndex;\n  }\n  /**\n   * Process Scene\n   * @param  {Scene} node Scene to process\n   */\n  processScene(scene) {\n    const json = this.json;\n    const options = this.options;\n    if (!json.scenes) {\n      json.scenes = [];\n      json.scene = 0;\n    }\n    const sceneDef = {};\n    if (scene.name !== \"\")\n      sceneDef.name = scene.name;\n    json.scenes.push(sceneDef);\n    const nodes = [];\n    for (let i = 0, l = scene.children.length; i < l; i++) {\n      const child = scene.children[i];\n      if (child.visible || options.onlyVisible === false) {\n        const nodeIndex = this.processNode(child);\n        if (nodeIndex !== null)\n          nodes.push(nodeIndex);\n      }\n    }\n    if (nodes.length > 0)\n      sceneDef.nodes = nodes;\n    this.serializeUserData(scene, sceneDef);\n  }\n  /**\n   * Creates a Scene to hold a list of objects and parse it\n   * @param  {Array} objects List of objects to process\n   */\n  processObjects(objects) {\n    const scene = new Scene();\n    scene.name = \"AuxScene\";\n    for (let i = 0; i < objects.length; i++) {\n      scene.children.push(objects[i]);\n    }\n    this.processScene(scene);\n  }\n  /**\n   * @param {THREE.Object3D|Array<THREE.Object3D>} input\n   */\n  processInput(input) {\n    const options = this.options;\n    input = input instanceof Array ? input : [input];\n    this._invokeAll(function(ext) {\n      ext.beforeParse && ext.beforeParse(input);\n    });\n    const objectsWithoutScene = [];\n    for (let i = 0; i < input.length; i++) {\n      if (input[i] instanceof Scene) {\n        this.processScene(input[i]);\n      } else {\n        objectsWithoutScene.push(input[i]);\n      }\n    }\n    if (objectsWithoutScene.length > 0)\n      this.processObjects(objectsWithoutScene);\n    for (let i = 0; i < this.skins.length; ++i) {\n      this.processSkin(this.skins[i]);\n    }\n    for (let i = 0; i < options.animations.length; ++i) {\n      this.processAnimation(options.animations[i], input[0]);\n    }\n    this._invokeAll(function(ext) {\n      ext.afterParse && ext.afterParse(input);\n    });\n  }\n  _invokeAll(func) {\n    for (let i = 0, il = this.plugins.length; i < il; i++) {\n      func(this.plugins[i]);\n    }\n  }\n}\nclass GLTFLightExtension {\n  constructor(writer) {\n    this.writer = writer;\n    this.name = \"KHR_lights_punctual\";\n  }\n  writeNode(light, nodeDef) {\n    if (!light.isLight)\n      return;\n    if (!light.isDirectionalLight && !light.isPointLight && !light.isSpotLight) {\n      console.warn(\"THREE.GLTFExporter: Only directional, point, and spot lights are supported.\", light);\n      return;\n    }\n    const writer = this.writer;\n    const json = writer.json;\n    const extensionsUsed = writer.extensionsUsed;\n    const lightDef = {};\n    if (light.name)\n      lightDef.name = light.name;\n    lightDef.color = light.color.toArray();\n    lightDef.intensity = light.intensity;\n    if (light.isDirectionalLight) {\n      lightDef.type = \"directional\";\n    } else if (light.isPointLight) {\n      lightDef.type = \"point\";\n      if (light.distance > 0)\n        lightDef.range = light.distance;\n    } else if (light.isSpotLight) {\n      lightDef.type = \"spot\";\n      if (light.distance > 0)\n        lightDef.range = light.distance;\n      lightDef.spot = {};\n      lightDef.spot.innerConeAngle = (light.penumbra - 1) * light.angle * -1;\n      lightDef.spot.outerConeAngle = light.angle;\n    }\n    if (light.decay !== void 0 && light.decay !== 2) {\n      console.warn(\n        \"THREE.GLTFExporter: Light decay may be lost. glTF is physically-based, and expects light.decay=2.\"\n      );\n    }\n    if (light.target && (light.target.parent !== light || light.target.position.x !== 0 || light.target.position.y !== 0 || light.target.position.z !== -1)) {\n      console.warn(\n        \"THREE.GLTFExporter: Light direction may be lost. For best results, make light.target a child of the light with position 0,0,-1.\"\n      );\n    }\n    if (!extensionsUsed[this.name]) {\n      json.extensions = json.extensions || {};\n      json.extensions[this.name] = { lights: [] };\n      extensionsUsed[this.name] = true;\n    }\n    const lights = json.extensions[this.name].lights;\n    lights.push(lightDef);\n    nodeDef.extensions = nodeDef.extensions || {};\n    nodeDef.extensions[this.name] = { light: lights.length - 1 };\n  }\n}\nclass GLTFMaterialsUnlitExtension {\n  constructor(writer) {\n    this.writer = writer;\n    this.name = \"KHR_materials_unlit\";\n  }\n  writeMaterial(material, materialDef) {\n    if (!material.isMeshBasicMaterial)\n      return;\n    const writer = this.writer;\n    const extensionsUsed = writer.extensionsUsed;\n    materialDef.extensions = materialDef.extensions || {};\n    materialDef.extensions[this.name] = {};\n    extensionsUsed[this.name] = true;\n    materialDef.pbrMetallicRoughness.metallicFactor = 0;\n    materialDef.pbrMetallicRoughness.roughnessFactor = 0.9;\n  }\n}\nclass GLTFMaterialsClearcoatExtension {\n  constructor(writer) {\n    this.writer = writer;\n    this.name = \"KHR_materials_clearcoat\";\n  }\n  writeMaterial(material, materialDef) {\n    if (!material.isMeshPhysicalMaterial || material.clearcoat === 0)\n      return;\n    const writer = this.writer;\n    const extensionsUsed = writer.extensionsUsed;\n    const extensionDef = {};\n    extensionDef.clearcoatFactor = material.clearcoat;\n    if (material.clearcoatMap) {\n      const clearcoatMapDef = {\n        index: writer.processTexture(material.clearcoatMap),\n        texCoord: material.clearcoatMap.channel\n      };\n      writer.applyTextureTransform(clearcoatMapDef, material.clearcoatMap);\n      extensionDef.clearcoatTexture = clearcoatMapDef;\n    }\n    extensionDef.clearcoatRoughnessFactor = material.clearcoatRoughness;\n    if (material.clearcoatRoughnessMap) {\n      const clearcoatRoughnessMapDef = {\n        index: writer.processTexture(material.clearcoatRoughnessMap),\n        texCoord: material.clearcoatRoughnessMap.channel\n      };\n      writer.applyTextureTransform(clearcoatRoughnessMapDef, material.clearcoatRoughnessMap);\n      extensionDef.clearcoatRoughnessTexture = clearcoatRoughnessMapDef;\n    }\n    if (material.clearcoatNormalMap) {\n      const clearcoatNormalMapDef = {\n        index: writer.processTexture(material.clearcoatNormalMap),\n        texCoord: material.clearcoatNormalMap.channel\n      };\n      writer.applyTextureTransform(clearcoatNormalMapDef, material.clearcoatNormalMap);\n      extensionDef.clearcoatNormalTexture = clearcoatNormalMapDef;\n    }\n    materialDef.extensions = materialDef.extensions || {};\n    materialDef.extensions[this.name] = extensionDef;\n    extensionsUsed[this.name] = true;\n  }\n}\nclass GLTFMaterialsIridescenceExtension {\n  constructor(writer) {\n    this.writer = writer;\n    this.name = \"KHR_materials_iridescence\";\n  }\n  writeMaterial(material, materialDef) {\n    if (!material.isMeshPhysicalMaterial || material.iridescence === 0)\n      return;\n    const writer = this.writer;\n    const extensionsUsed = writer.extensionsUsed;\n    const extensionDef = {};\n    extensionDef.iridescenceFactor = material.iridescence;\n    if (material.iridescenceMap) {\n      const iridescenceMapDef = {\n        index: writer.processTexture(material.iridescenceMap),\n        texCoord: material.iridescenceMap.channel\n      };\n      writer.applyTextureTransform(iridescenceMapDef, material.iridescenceMap);\n      extensionDef.iridescenceTexture = iridescenceMapDef;\n    }\n    extensionDef.iridescenceIor = material.iridescenceIOR;\n    extensionDef.iridescenceThicknessMinimum = material.iridescenceThicknessRange[0];\n    extensionDef.iridescenceThicknessMaximum = material.iridescenceThicknessRange[1];\n    if (material.iridescenceThicknessMap) {\n      const iridescenceThicknessMapDef = {\n        index: writer.processTexture(material.iridescenceThicknessMap),\n        texCoord: material.iridescenceThicknessMap.channel\n      };\n      writer.applyTextureTransform(iridescenceThicknessMapDef, material.iridescenceThicknessMap);\n      extensionDef.iridescenceThicknessTexture = iridescenceThicknessMapDef;\n    }\n    materialDef.extensions = materialDef.extensions || {};\n    materialDef.extensions[this.name] = extensionDef;\n    extensionsUsed[this.name] = true;\n  }\n}\nclass GLTFMaterialsTransmissionExtension {\n  constructor(writer) {\n    this.writer = writer;\n    this.name = \"KHR_materials_transmission\";\n  }\n  writeMaterial(material, materialDef) {\n    if (!material.isMeshPhysicalMaterial || material.transmission === 0)\n      return;\n    const writer = this.writer;\n    const extensionsUsed = writer.extensionsUsed;\n    const extensionDef = {};\n    extensionDef.transmissionFactor = material.transmission;\n    if (material.transmissionMap) {\n      const transmissionMapDef = {\n        index: writer.processTexture(material.transmissionMap),\n        texCoord: material.transmissionMap.channel\n      };\n      writer.applyTextureTransform(transmissionMapDef, material.transmissionMap);\n      extensionDef.transmissionTexture = transmissionMapDef;\n    }\n    materialDef.extensions = materialDef.extensions || {};\n    materialDef.extensions[this.name] = extensionDef;\n    extensionsUsed[this.name] = true;\n  }\n}\nclass GLTFMaterialsVolumeExtension {\n  constructor(writer) {\n    this.writer = writer;\n    this.name = \"KHR_materials_volume\";\n  }\n  writeMaterial(material, materialDef) {\n    if (!material.isMeshPhysicalMaterial || material.transmission === 0)\n      return;\n    const writer = this.writer;\n    const extensionsUsed = writer.extensionsUsed;\n    const extensionDef = {};\n    extensionDef.thicknessFactor = material.thickness;\n    if (material.thicknessMap) {\n      const thicknessMapDef = {\n        index: writer.processTexture(material.thicknessMap),\n        texCoord: material.thicknessMap.channel\n      };\n      writer.applyTextureTransform(thicknessMapDef, material.thicknessMap);\n      extensionDef.thicknessTexture = thicknessMapDef;\n    }\n    extensionDef.attenuationDistance = material.attenuationDistance;\n    extensionDef.attenuationColor = material.attenuationColor.toArray();\n    materialDef.extensions = materialDef.extensions || {};\n    materialDef.extensions[this.name] = extensionDef;\n    extensionsUsed[this.name] = true;\n  }\n}\nclass GLTFMaterialsIorExtension {\n  constructor(writer) {\n    this.writer = writer;\n    this.name = \"KHR_materials_ior\";\n  }\n  writeMaterial(material, materialDef) {\n    if (!material.isMeshPhysicalMaterial || material.ior === 1.5)\n      return;\n    const writer = this.writer;\n    const extensionsUsed = writer.extensionsUsed;\n    const extensionDef = {};\n    extensionDef.ior = material.ior;\n    materialDef.extensions = materialDef.extensions || {};\n    materialDef.extensions[this.name] = extensionDef;\n    extensionsUsed[this.name] = true;\n  }\n}\nclass GLTFMaterialsSpecularExtension {\n  constructor(writer) {\n    this.writer = writer;\n    this.name = \"KHR_materials_specular\";\n  }\n  writeMaterial(material, materialDef) {\n    if (!material.isMeshPhysicalMaterial || material.specularIntensity === 1 && material.specularColor.equals(DEFAULT_SPECULAR_COLOR) && !material.specularIntensityMap && !material.specularColorTexture)\n      return;\n    const writer = this.writer;\n    const extensionsUsed = writer.extensionsUsed;\n    const extensionDef = {};\n    if (material.specularIntensityMap) {\n      const specularIntensityMapDef = {\n        index: writer.processTexture(material.specularIntensityMap),\n        texCoord: material.specularIntensityMap.channel\n      };\n      writer.applyTextureTransform(specularIntensityMapDef, material.specularIntensityMap);\n      extensionDef.specularTexture = specularIntensityMapDef;\n    }\n    if (material.specularColorMap) {\n      const specularColorMapDef = {\n        index: writer.processTexture(material.specularColorMap),\n        texCoord: material.specularColorMap.channel\n      };\n      writer.applyTextureTransform(specularColorMapDef, material.specularColorMap);\n      extensionDef.specularColorTexture = specularColorMapDef;\n    }\n    extensionDef.specularFactor = material.specularIntensity;\n    extensionDef.specularColorFactor = material.specularColor.toArray();\n    materialDef.extensions = materialDef.extensions || {};\n    materialDef.extensions[this.name] = extensionDef;\n    extensionsUsed[this.name] = true;\n  }\n}\nclass GLTFMaterialsSheenExtension {\n  constructor(writer) {\n    this.writer = writer;\n    this.name = \"KHR_materials_sheen\";\n  }\n  writeMaterial(material, materialDef) {\n    if (!material.isMeshPhysicalMaterial || material.sheen == 0)\n      return;\n    const writer = this.writer;\n    const extensionsUsed = writer.extensionsUsed;\n    const extensionDef = {};\n    if (material.sheenRoughnessMap) {\n      const sheenRoughnessMapDef = {\n        index: writer.processTexture(material.sheenRoughnessMap),\n        texCoord: material.sheenRoughnessMap.channel\n      };\n      writer.applyTextureTransform(sheenRoughnessMapDef, material.sheenRoughnessMap);\n      extensionDef.sheenRoughnessTexture = sheenRoughnessMapDef;\n    }\n    if (material.sheenColorMap) {\n      const sheenColorMapDef = {\n        index: writer.processTexture(material.sheenColorMap),\n        texCoord: material.sheenColorMap.channel\n      };\n      writer.applyTextureTransform(sheenColorMapDef, material.sheenColorMap);\n      extensionDef.sheenColorTexture = sheenColorMapDef;\n    }\n    extensionDef.sheenRoughnessFactor = material.sheenRoughness;\n    extensionDef.sheenColorFactor = material.sheenColor.toArray();\n    materialDef.extensions = materialDef.extensions || {};\n    materialDef.extensions[this.name] = extensionDef;\n    extensionsUsed[this.name] = true;\n  }\n}\nclass GLTFMaterialsAnisotropyExtension {\n  constructor(writer) {\n    this.writer = writer;\n    this.name = \"KHR_materials_anisotropy\";\n  }\n  writeMaterial(material, materialDef) {\n    if (!material.isMeshPhysicalMaterial || material.anisotropy == 0)\n      return;\n    const writer = this.writer;\n    const extensionsUsed = writer.extensionsUsed;\n    const extensionDef = {};\n    if (material.anisotropyMap) {\n      const anisotropyMapDef = { index: writer.processTexture(material.anisotropyMap) };\n      writer.applyTextureTransform(anisotropyMapDef, material.anisotropyMap);\n      extensionDef.anisotropyTexture = anisotropyMapDef;\n    }\n    extensionDef.anisotropyStrength = material.anisotropy;\n    extensionDef.anisotropyRotation = material.anisotropyRotation;\n    materialDef.extensions = materialDef.extensions || {};\n    materialDef.extensions[this.name] = extensionDef;\n    extensionsUsed[this.name] = true;\n  }\n}\nclass GLTFMaterialsEmissiveStrengthExtension {\n  constructor(writer) {\n    this.writer = writer;\n    this.name = \"KHR_materials_emissive_strength\";\n  }\n  writeMaterial(material, materialDef) {\n    if (!material.isMeshStandardMaterial || material.emissiveIntensity === 1)\n      return;\n    const writer = this.writer;\n    const extensionsUsed = writer.extensionsUsed;\n    const extensionDef = {};\n    extensionDef.emissiveStrength = material.emissiveIntensity;\n    materialDef.extensions = materialDef.extensions || {};\n    materialDef.extensions[this.name] = extensionDef;\n    extensionsUsed[this.name] = true;\n  }\n}\nGLTFExporter.Utils = {\n  insertKeyframe: function(track, time) {\n    const tolerance = 1e-3;\n    const valueSize = track.getValueSize();\n    const times = new track.TimeBufferType(track.times.length + 1);\n    const values = new track.ValueBufferType(track.values.length + valueSize);\n    const interpolant = track.createInterpolant(new track.ValueBufferType(valueSize));\n    let index;\n    if (track.times.length === 0) {\n      times[0] = time;\n      for (let i = 0; i < valueSize; i++) {\n        values[i] = 0;\n      }\n      index = 0;\n    } else if (time < track.times[0]) {\n      if (Math.abs(track.times[0] - time) < tolerance)\n        return 0;\n      times[0] = time;\n      times.set(track.times, 1);\n      values.set(interpolant.evaluate(time), 0);\n      values.set(track.values, valueSize);\n      index = 0;\n    } else if (time > track.times[track.times.length - 1]) {\n      if (Math.abs(track.times[track.times.length - 1] - time) < tolerance) {\n        return track.times.length - 1;\n      }\n      times[times.length - 1] = time;\n      times.set(track.times, 0);\n      values.set(track.values, 0);\n      values.set(interpolant.evaluate(time), track.values.length);\n      index = times.length - 1;\n    } else {\n      for (let i = 0; i < track.times.length; i++) {\n        if (Math.abs(track.times[i] - time) < tolerance)\n          return i;\n        if (track.times[i] < time && track.times[i + 1] > time) {\n          times.set(track.times.slice(0, i + 1), 0);\n          times[i + 1] = time;\n          times.set(track.times.slice(i + 1), i + 2);\n          values.set(track.values.slice(0, (i + 1) * valueSize), 0);\n          values.set(interpolant.evaluate(time), (i + 1) * valueSize);\n          values.set(track.values.slice((i + 1) * valueSize), (i + 2) * valueSize);\n          index = i + 1;\n          break;\n        }\n      }\n    }\n    track.times = times;\n    track.values = values;\n    return index;\n  },\n  mergeMorphTargetTracks: function(clip, root) {\n    const tracks = [];\n    const mergedTracks = {};\n    const sourceTracks = clip.tracks;\n    for (let i = 0; i < sourceTracks.length; ++i) {\n      let sourceTrack = sourceTracks[i];\n      const sourceTrackBinding = PropertyBinding.parseTrackName(sourceTrack.name);\n      const sourceTrackNode = PropertyBinding.findNode(root, sourceTrackBinding.nodeName);\n      if (sourceTrackBinding.propertyName !== \"morphTargetInfluences\" || sourceTrackBinding.propertyIndex === void 0) {\n        tracks.push(sourceTrack);\n        continue;\n      }\n      if (sourceTrack.createInterpolant !== sourceTrack.InterpolantFactoryMethodDiscrete && sourceTrack.createInterpolant !== sourceTrack.InterpolantFactoryMethodLinear) {\n        if (sourceTrack.createInterpolant.isInterpolantFactoryMethodGLTFCubicSpline) {\n          throw new Error(\"THREE.GLTFExporter: Cannot merge tracks with glTF CUBICSPLINE interpolation.\");\n        }\n        console.warn(\"THREE.GLTFExporter: Morph target interpolation mode not yet supported. Using LINEAR instead.\");\n        sourceTrack = sourceTrack.clone();\n        sourceTrack.setInterpolation(InterpolateLinear);\n      }\n      const targetCount = sourceTrackNode.morphTargetInfluences.length;\n      const targetIndex = sourceTrackNode.morphTargetDictionary[sourceTrackBinding.propertyIndex];\n      if (targetIndex === void 0) {\n        throw new Error(\"THREE.GLTFExporter: Morph target name not found: \" + sourceTrackBinding.propertyIndex);\n      }\n      let mergedTrack;\n      if (mergedTracks[sourceTrackNode.uuid] === void 0) {\n        mergedTrack = sourceTrack.clone();\n        const values = new mergedTrack.ValueBufferType(targetCount * mergedTrack.times.length);\n        for (let j = 0; j < mergedTrack.times.length; j++) {\n          values[j * targetCount + targetIndex] = mergedTrack.values[j];\n        }\n        mergedTrack.name = (sourceTrackBinding.nodeName || \"\") + \".morphTargetInfluences\";\n        mergedTrack.values = values;\n        mergedTracks[sourceTrackNode.uuid] = mergedTrack;\n        tracks.push(mergedTrack);\n        continue;\n      }\n      const sourceInterpolant = sourceTrack.createInterpolant(new sourceTrack.ValueBufferType(1));\n      mergedTrack = mergedTracks[sourceTrackNode.uuid];\n      for (let j = 0; j < mergedTrack.times.length; j++) {\n        mergedTrack.values[j * targetCount + targetIndex] = sourceInterpolant.evaluate(mergedTrack.times[j]);\n      }\n      for (let j = 0; j < sourceTrack.times.length; j++) {\n        const keyframeIndex = this.insertKeyframe(mergedTrack, sourceTrack.times[j]);\n        mergedTrack.values[keyframeIndex * targetCount + targetIndex] = sourceTrack.values[j];\n      }\n    }\n    clip.tracks = tracks;\n    return clip;\n  }\n};\nexport {\n  GLTFExporter\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}