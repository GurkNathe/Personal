{"ast":null,"code":"import _classCallCheck from \"/home/krug/Coding/JavaScript/Websites/Personal/personal/node_modules/.pnpm/@babel+runtime@7.22.3/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/home/krug/Coding/JavaScript/Websites/Personal/personal/node_modules/.pnpm/@babel+runtime@7.22.3/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"/home/krug/Coding/JavaScript/Websites/Personal/personal/node_modules/.pnpm/@babel+runtime@7.22.3/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/home/krug/Coding/JavaScript/Websites/Personal/personal/node_modules/.pnpm/@babel+runtime@7.22.3/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { ShaderMaterial, Uniform, Vector2, NoBlending } from 'three';\nvar ConvolutionMaterial = /*#__PURE__*/function (_ShaderMaterial) {\n  _inherits(ConvolutionMaterial, _ShaderMaterial);\n  var _super = _createSuper(ConvolutionMaterial);\n  function ConvolutionMaterial() {\n    var _this;\n    var texelSize = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : new Vector2();\n    _classCallCheck(this, ConvolutionMaterial);\n    _this = _super.call(this, {\n      uniforms: {\n        inputBuffer: new Uniform(null),\n        depthBuffer: new Uniform(null),\n        resolution: new Uniform(new Vector2()),\n        texelSize: new Uniform(new Vector2()),\n        halfTexelSize: new Uniform(new Vector2()),\n        kernel: new Uniform(0.0),\n        scale: new Uniform(1.0),\n        cameraNear: new Uniform(0.0),\n        cameraFar: new Uniform(1.0),\n        minDepthThreshold: new Uniform(0.0),\n        maxDepthThreshold: new Uniform(1.0),\n        depthScale: new Uniform(0.0),\n        depthToBlurRatioBias: new Uniform(0.25)\n      },\n      fragmentShader: \"#include <common>\\n        #include <dithering_pars_fragment>      \\n        uniform sampler2D inputBuffer;\\n        uniform sampler2D depthBuffer;\\n        uniform float cameraNear;\\n        uniform float cameraFar;\\n        uniform float minDepthThreshold;\\n        uniform float maxDepthThreshold;\\n        uniform float depthScale;\\n        uniform float depthToBlurRatioBias;\\n        varying vec2 vUv;\\n        varying vec2 vUv0;\\n        varying vec2 vUv1;\\n        varying vec2 vUv2;\\n        varying vec2 vUv3;\\n\\n        void main() {\\n          float depthFactor = 0.0;\\n          \\n          #ifdef USE_DEPTH\\n            vec4 depth = texture2D(depthBuffer, vUv);\\n            depthFactor = smoothstep(minDepthThreshold, maxDepthThreshold, 1.0-(depth.r * depth.a));\\n            depthFactor *= depthScale;\\n            depthFactor = max(0.0, min(1.0, depthFactor + 0.25));\\n          #endif\\n          \\n          vec4 sum = texture2D(inputBuffer, mix(vUv0, vUv, depthFactor));\\n          sum += texture2D(inputBuffer, mix(vUv1, vUv, depthFactor));\\n          sum += texture2D(inputBuffer, mix(vUv2, vUv, depthFactor));\\n          sum += texture2D(inputBuffer, mix(vUv3, vUv, depthFactor));\\n          gl_FragColor = sum * 0.25 ;\\n\\n          #include <dithering_fragment>\\n          #include <tonemapping_fragment>\\n          #include <encodings_fragment>\\n        }\",\n      vertexShader: \"uniform vec2 texelSize;\\n        uniform vec2 halfTexelSize;\\n        uniform float kernel;\\n        uniform float scale;\\n        varying vec2 vUv;\\n        varying vec2 vUv0;\\n        varying vec2 vUv1;\\n        varying vec2 vUv2;\\n        varying vec2 vUv3;\\n\\n        void main() {\\n          vec2 uv = position.xy * 0.5 + 0.5;\\n          vUv = uv;\\n\\n          vec2 dUv = (texelSize * vec2(kernel) + halfTexelSize) * scale;\\n          vUv0 = vec2(uv.x - dUv.x, uv.y + dUv.y);\\n          vUv1 = vec2(uv.x + dUv.x, uv.y + dUv.y);\\n          vUv2 = vec2(uv.x + dUv.x, uv.y - dUv.y);\\n          vUv3 = vec2(uv.x - dUv.x, uv.y - dUv.y);\\n\\n          gl_Position = vec4(position.xy, 1.0, 1.0);\\n        }\",\n      blending: NoBlending,\n      depthWrite: false,\n      depthTest: false\n    });\n    _this.toneMapped = false;\n    _this.setTexelSize(texelSize.x, texelSize.y);\n    _this.kernel = new Float32Array([0.0, 1.0, 2.0, 2.0, 3.0]);\n    return _this;\n  }\n  _createClass(ConvolutionMaterial, [{\n    key: \"setTexelSize\",\n    value: function setTexelSize(x, y) {\n      this.uniforms.texelSize.value.set(x, y);\n      this.uniforms.halfTexelSize.value.set(x, y).multiplyScalar(0.5);\n    }\n  }, {\n    key: \"setResolution\",\n    value: function setResolution(resolution) {\n      this.uniforms.resolution.value.copy(resolution);\n    }\n  }]);\n  return ConvolutionMaterial;\n}(ShaderMaterial);\nexport { ConvolutionMaterial };","map":{"version":3,"names":["ShaderMaterial","Uniform","Vector2","NoBlending","ConvolutionMaterial","_ShaderMaterial","_inherits","_super","_createSuper","_this","texelSize","arguments","length","undefined","_classCallCheck","call","uniforms","inputBuffer","depthBuffer","resolution","halfTexelSize","kernel","scale","cameraNear","cameraFar","minDepthThreshold","maxDepthThreshold","depthScale","depthToBlurRatioBias","fragmentShader","vertexShader","blending","depthWrite","depthTest","toneMapped","setTexelSize","x","y","Float32Array","_createClass","key","value","set","multiplyScalar","setResolution","copy"],"sources":["/home/krug/Coding/JavaScript/Websites/Personal/personal/node_modules/.pnpm/@react-three+drei@9.72.1_@react-three+fiber@8.13.0_@types+three@0.150.2_react-dom@18.2.0_react@18.2.0_three@0.151.3/node_modules/@react-three/drei/materials/ConvolutionMaterial.js"],"sourcesContent":["import { ShaderMaterial, Uniform, Vector2, NoBlending } from 'three';\n\nclass ConvolutionMaterial extends ShaderMaterial {\n  constructor(texelSize = new Vector2()) {\n    super({\n      uniforms: {\n        inputBuffer: new Uniform(null),\n        depthBuffer: new Uniform(null),\n        resolution: new Uniform(new Vector2()),\n        texelSize: new Uniform(new Vector2()),\n        halfTexelSize: new Uniform(new Vector2()),\n        kernel: new Uniform(0.0),\n        scale: new Uniform(1.0),\n        cameraNear: new Uniform(0.0),\n        cameraFar: new Uniform(1.0),\n        minDepthThreshold: new Uniform(0.0),\n        maxDepthThreshold: new Uniform(1.0),\n        depthScale: new Uniform(0.0),\n        depthToBlurRatioBias: new Uniform(0.25)\n      },\n      fragmentShader: `#include <common>\n        #include <dithering_pars_fragment>      \n        uniform sampler2D inputBuffer;\n        uniform sampler2D depthBuffer;\n        uniform float cameraNear;\n        uniform float cameraFar;\n        uniform float minDepthThreshold;\n        uniform float maxDepthThreshold;\n        uniform float depthScale;\n        uniform float depthToBlurRatioBias;\n        varying vec2 vUv;\n        varying vec2 vUv0;\n        varying vec2 vUv1;\n        varying vec2 vUv2;\n        varying vec2 vUv3;\n\n        void main() {\n          float depthFactor = 0.0;\n          \n          #ifdef USE_DEPTH\n            vec4 depth = texture2D(depthBuffer, vUv);\n            depthFactor = smoothstep(minDepthThreshold, maxDepthThreshold, 1.0-(depth.r * depth.a));\n            depthFactor *= depthScale;\n            depthFactor = max(0.0, min(1.0, depthFactor + 0.25));\n          #endif\n          \n          vec4 sum = texture2D(inputBuffer, mix(vUv0, vUv, depthFactor));\n          sum += texture2D(inputBuffer, mix(vUv1, vUv, depthFactor));\n          sum += texture2D(inputBuffer, mix(vUv2, vUv, depthFactor));\n          sum += texture2D(inputBuffer, mix(vUv3, vUv, depthFactor));\n          gl_FragColor = sum * 0.25 ;\n\n          #include <dithering_fragment>\n          #include <tonemapping_fragment>\n          #include <encodings_fragment>\n        }`,\n      vertexShader: `uniform vec2 texelSize;\n        uniform vec2 halfTexelSize;\n        uniform float kernel;\n        uniform float scale;\n        varying vec2 vUv;\n        varying vec2 vUv0;\n        varying vec2 vUv1;\n        varying vec2 vUv2;\n        varying vec2 vUv3;\n\n        void main() {\n          vec2 uv = position.xy * 0.5 + 0.5;\n          vUv = uv;\n\n          vec2 dUv = (texelSize * vec2(kernel) + halfTexelSize) * scale;\n          vUv0 = vec2(uv.x - dUv.x, uv.y + dUv.y);\n          vUv1 = vec2(uv.x + dUv.x, uv.y + dUv.y);\n          vUv2 = vec2(uv.x + dUv.x, uv.y - dUv.y);\n          vUv3 = vec2(uv.x - dUv.x, uv.y - dUv.y);\n\n          gl_Position = vec4(position.xy, 1.0, 1.0);\n        }`,\n      blending: NoBlending,\n      depthWrite: false,\n      depthTest: false\n    });\n    this.toneMapped = false;\n    this.setTexelSize(texelSize.x, texelSize.y);\n    this.kernel = new Float32Array([0.0, 1.0, 2.0, 2.0, 3.0]);\n  }\n\n  setTexelSize(x, y) {\n    this.uniforms.texelSize.value.set(x, y);\n    this.uniforms.halfTexelSize.value.set(x, y).multiplyScalar(0.5);\n  }\n\n  setResolution(resolution) {\n    this.uniforms.resolution.value.copy(resolution);\n  }\n\n}\n\nexport { ConvolutionMaterial };\n"],"mappings":";;;;AAAA,SAASA,cAAc,EAAEC,OAAO,EAAEC,OAAO,EAAEC,UAAU,QAAQ,OAAO;AAAC,IAE/DC,mBAAmB,0BAAAC,eAAA;EAAAC,SAAA,CAAAF,mBAAA,EAAAC,eAAA;EAAA,IAAAE,MAAA,GAAAC,YAAA,CAAAJ,mBAAA;EACvB,SAAAA,oBAAA,EAAuC;IAAA,IAAAK,KAAA;IAAA,IAA3BC,SAAS,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,IAAIT,OAAO,CAAC,CAAC;IAAAY,eAAA,OAAAV,mBAAA;IACnCK,KAAA,GAAAF,MAAA,CAAAQ,IAAA,OAAM;MACJC,QAAQ,EAAE;QACRC,WAAW,EAAE,IAAIhB,OAAO,CAAC,IAAI,CAAC;QAC9BiB,WAAW,EAAE,IAAIjB,OAAO,CAAC,IAAI,CAAC;QAC9BkB,UAAU,EAAE,IAAIlB,OAAO,CAAC,IAAIC,OAAO,CAAC,CAAC,CAAC;QACtCQ,SAAS,EAAE,IAAIT,OAAO,CAAC,IAAIC,OAAO,CAAC,CAAC,CAAC;QACrCkB,aAAa,EAAE,IAAInB,OAAO,CAAC,IAAIC,OAAO,CAAC,CAAC,CAAC;QACzCmB,MAAM,EAAE,IAAIpB,OAAO,CAAC,GAAG,CAAC;QACxBqB,KAAK,EAAE,IAAIrB,OAAO,CAAC,GAAG,CAAC;QACvBsB,UAAU,EAAE,IAAItB,OAAO,CAAC,GAAG,CAAC;QAC5BuB,SAAS,EAAE,IAAIvB,OAAO,CAAC,GAAG,CAAC;QAC3BwB,iBAAiB,EAAE,IAAIxB,OAAO,CAAC,GAAG,CAAC;QACnCyB,iBAAiB,EAAE,IAAIzB,OAAO,CAAC,GAAG,CAAC;QACnC0B,UAAU,EAAE,IAAI1B,OAAO,CAAC,GAAG,CAAC;QAC5B2B,oBAAoB,EAAE,IAAI3B,OAAO,CAAC,IAAI;MACxC,CAAC;MACD4B,cAAc,u2CAmCV;MACJC,YAAY,msBAqBR;MACJC,QAAQ,EAAE5B,UAAU;MACpB6B,UAAU,EAAE,KAAK;MACjBC,SAAS,EAAE;IACb,CAAC;IACDxB,KAAA,CAAKyB,UAAU,GAAG,KAAK;IACvBzB,KAAA,CAAK0B,YAAY,CAACzB,SAAS,CAAC0B,CAAC,EAAE1B,SAAS,CAAC2B,CAAC,CAAC;IAC3C5B,KAAA,CAAKY,MAAM,GAAG,IAAIiB,YAAY,CAAC,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC,CAAC;IAAC,OAAA7B,KAAA;EAC5D;EAAC8B,YAAA,CAAAnC,mBAAA;IAAAoC,GAAA;IAAAC,KAAA,EAED,SAAAN,aAAaC,CAAC,EAAEC,CAAC,EAAE;MACjB,IAAI,CAACrB,QAAQ,CAACN,SAAS,CAAC+B,KAAK,CAACC,GAAG,CAACN,CAAC,EAAEC,CAAC,CAAC;MACvC,IAAI,CAACrB,QAAQ,CAACI,aAAa,CAACqB,KAAK,CAACC,GAAG,CAACN,CAAC,EAAEC,CAAC,CAAC,CAACM,cAAc,CAAC,GAAG,CAAC;IACjE;EAAC;IAAAH,GAAA;IAAAC,KAAA,EAED,SAAAG,cAAczB,UAAU,EAAE;MACxB,IAAI,CAACH,QAAQ,CAACG,UAAU,CAACsB,KAAK,CAACI,IAAI,CAAC1B,UAAU,CAAC;IACjD;EAAC;EAAA,OAAAf,mBAAA;AAAA,EA5F+BJ,cAAc;AAgGhD,SAASI,mBAAmB"},"metadata":{},"sourceType":"module","externalDependencies":[]}