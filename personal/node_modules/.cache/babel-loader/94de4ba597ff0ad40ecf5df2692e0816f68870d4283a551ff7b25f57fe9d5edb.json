{"ast":null,"code":"import { Vector3, Quaternion, Loader, TextureLoader, FileLoader, LoaderUtils, Matrix4, Bone, BufferGeometry, Float32BufferAttribute, Uint16BufferAttribute, MeshPhongMaterial, FrontSide, Vector2, SkinnedMesh, Mesh, Skeleton, AnimationClip, AnimationMixer } from \"three\";\nvar XLoader = /* @__PURE__ */function () {\n  var classCallCheck = function classCallCheck(instance, Constructor) {\n    if (!(instance instanceof Constructor)) {\n      throw new TypeError(\"Cannot call a class as a function\");\n    }\n  };\n  var createClass = function () {\n    function defineProperties(target, props) {\n      for (var i2 = 0; i2 < props.length; i2++) {\n        var descriptor = props[i2];\n        descriptor.enumerable = descriptor.enumerable || false;\n        descriptor.configurable = true;\n        if (\"value\" in descriptor) descriptor.writable = true;\n        Object.defineProperty(target, descriptor.key, descriptor);\n      }\n    }\n    return function (Constructor, protoProps, staticProps) {\n      if (protoProps) defineProperties(Constructor.prototype, protoProps);\n      if (staticProps) defineProperties(Constructor, staticProps);\n      return Constructor;\n    };\n  }();\n  var XboneInf = function XboneInf2() {\n    classCallCheck(this, XboneInf2);\n    this.boneName = \"\";\n    this.BoneIndex = 0;\n    this.Indeces = [];\n    this.Weights = [];\n    this.initMatrix = null;\n    this.OffsetMatrix = null;\n  };\n  var XAnimationInfo = function XAnimationInfo2() {\n    classCallCheck(this, XAnimationInfo2);\n    this.animeName = \"\";\n    this.boneName = \"\";\n    this.targetBone = null;\n    this.keyType = 4;\n    this.frameStartLv = 0;\n    this.keyFrames = [];\n    this.InverseMx = null;\n  };\n  var XAnimationObj = function () {\n    function XAnimationObj2(_flags) {\n      classCallCheck(this, XAnimationObj2);\n      this.fps = 30;\n      this.name = \"xanimation\";\n      this.length = 0;\n      this.hierarchy = [];\n      this.putFlags = _flags;\n      if (this.putFlags.putPos === void 0) {\n        this.putFlags.putPos = true;\n      }\n      if (this.putFlags.putRot === void 0) {\n        this.putFlags.putRot = true;\n      }\n      if (this.putFlags.putScl === void 0) {\n        this.putFlags.putScl = true;\n      }\n    }\n    createClass(XAnimationObj2, [{\n      key: \"make\",\n      value: function make(XAnimationInfoArray) {\n        for (var i2 = 0; i2 < XAnimationInfoArray.length; i2++) {\n          this.hierarchy.push(this.makeBonekeys(XAnimationInfoArray[i2]));\n        }\n        this.length = this.hierarchy[0].keys[this.hierarchy[0].keys.length - 1].time;\n      }\n    }, {\n      key: \"clone\",\n      value: function clone() {\n        return Object.assign({}, this);\n      }\n    }, {\n      key: \"makeBonekeys\",\n      value: function makeBonekeys(XAnimationInfo2) {\n        var refObj = {};\n        refObj.name = XAnimationInfo2.boneName;\n        refObj.parent = \"\";\n        refObj.keys = this.keyFrameRefactor(XAnimationInfo2);\n        refObj.copy = function () {\n          return Object.assign({}, this);\n        };\n        return refObj;\n      }\n    }, {\n      key: \"keyFrameRefactor\",\n      value: function keyFrameRefactor(XAnimationInfo2) {\n        var keys = [];\n        for (var i2 = 0; i2 < XAnimationInfo2.keyFrames.length; i2++) {\n          var keyframe = {};\n          keyframe.time = XAnimationInfo2.keyFrames[i2].time * this.fps;\n          if (XAnimationInfo2.keyFrames[i2].pos && this.putFlags.putPos) {\n            keyframe.pos = XAnimationInfo2.keyFrames[i2].pos;\n          }\n          if (XAnimationInfo2.keyFrames[i2].rot && this.putFlags.putRot) {\n            keyframe.rot = XAnimationInfo2.keyFrames[i2].rot;\n          }\n          if (XAnimationInfo2.keyFrames[i2].scl && this.putFlags.putScl) {\n            keyframe.scl = XAnimationInfo2.keyFrames[i2].scl;\n          }\n          if (XAnimationInfo2.keyFrames[i2].matrix) {\n            keyframe.matrix = XAnimationInfo2.keyFrames[i2].matrix;\n            if (this.putFlags.putPos) {\n              keyframe.pos = new Vector3().setFromMatrixPosition(keyframe.matrix);\n            }\n            if (this.putFlags.putRot) {\n              keyframe.rot = new Quaternion().setFromRotationMatrix(keyframe.matrix);\n            }\n            if (this.putFlags.putScl) {\n              keyframe.scl = new Vector3().setFromMatrixScale(keyframe.matrix);\n            }\n          }\n          keys.push(keyframe);\n        }\n        return keys;\n      }\n    }]);\n    return XAnimationObj2;\n  }();\n  var XKeyFrameInfo = function XKeyFrameInfo2() {\n    classCallCheck(this, XKeyFrameInfo2);\n    this.index = 0;\n    this.Frame = 0;\n    this.time = 0;\n    this.matrix = null;\n  };\n  var XLoader2 = function () {\n    function XLoader3(manager) {\n      Loader.call(this, manager);\n      classCallCheck(this, XLoader3);\n      this.debug = false;\n      this.texloader = new TextureLoader(this.manager);\n      this.url = \"\";\n      this._putMatLength = 0;\n      this._nowMat = null;\n      this._nowFrameName = \"\";\n      this.frameHierarchie = [];\n      this.Hierarchies = {};\n      this.HieStack = [];\n      this._currentObject = {};\n      this._currentFrame = {};\n      this._data = null;\n      this.onLoad = null;\n      this.IsUvYReverse = true;\n      this.Meshes = [];\n      this.animations = [];\n      this.animTicksPerSecond = 30;\n      this._currentGeo = null;\n      this._currentAnime = null;\n      this._currentAnimeFrames = null;\n    }\n    createClass(XLoader3, [{\n      key: \"_setArgOption\",\n      value: function _setArgOption(_arg) {\n        var _start = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 0;\n        if (!_arg) {\n          return;\n        }\n        for (var i2 = _start; i2 < _arg.length; i2++) {\n          switch (i2) {\n            case 0:\n              this.url = _arg[i2];\n              break;\n            case 1:\n              this.options = _arg[i2];\n              break;\n          }\n        }\n        if (this.options === void 0) {\n          this.options = {};\n        }\n      }\n    }, {\n      key: \"load\",\n      value: function load(_arg, onLoad, onProgress, onError) {\n        var _this = this;\n        this._setArgOption(_arg);\n        var loader = new FileLoader(this.manager);\n        loader.setPath(this.path);\n        loader.setResponseType(\"arraybuffer\");\n        loader.setRequestHeader(this.requestHeader);\n        loader.setWithCredentials(this.withCredentials);\n        loader.load(this.url, function (response) {\n          try {\n            _this.parse(response, onLoad);\n          } catch (e) {\n            if (onError) {\n              onError(e);\n            } else {\n              console.error(e);\n            }\n            _this.manager.itemError(_this.url);\n          }\n        }, onProgress, onError);\n      }\n    }, {\n      key: \"_readLine\",\n      value: function _readLine(line) {\n        var readed = 0;\n        while (true) {\n          var find = -1;\n          find = line.indexOf(\"//\", readed);\n          if (find === -1) {\n            find = line.indexOf(\"#\", readed);\n          }\n          if (find > -1 && find < 2) {\n            var foundNewLine = -1;\n            foundNewLine = line.indexOf(\"\\r\\n\", readed);\n            if (foundNewLine > 0) {\n              readed = foundNewLine + 2;\n            } else {\n              foundNewLine = line.indexOf(\"\\r\", readed);\n              if (foundNewLine > 0) {\n                readed = foundNewLine + 1;\n              } else {\n                readed = line.indexOf(\"\\n\", readed) + 1;\n              }\n            }\n          } else {\n            break;\n          }\n        }\n        return line.substr(readed);\n      }\n    }, {\n      key: \"_readLine\",\n      value: function _readLine(line) {\n        var readed = 0;\n        while (true) {\n          var find = -1;\n          find = line.indexOf(\"//\", readed);\n          if (find === -1) {\n            find = line.indexOf(\"#\", readed);\n          }\n          if (find > -1 && find < 2) {\n            var foundNewLine = -1;\n            foundNewLine = line.indexOf(\"\\r\\n\", readed);\n            if (foundNewLine > 0) {\n              readed = foundNewLine + 2;\n            } else {\n              foundNewLine = line.indexOf(\"\\r\", readed);\n              if (foundNewLine > 0) {\n                readed = foundNewLine + 1;\n              } else {\n                readed = line.indexOf(\"\\n\", readed) + 1;\n              }\n            }\n          } else {\n            break;\n          }\n        }\n        return line.substr(readed);\n      }\n    }, {\n      key: \"_isBinary\",\n      value: function _isBinary(binData) {\n        var reader = new DataView(binData);\n        var face_size = 32 / 8 * 3 + 32 / 8 * 3 * 3 + 16 / 8;\n        var n_faces = reader.getUint32(80, true);\n        var expect = 80 + 32 / 8 + n_faces * face_size;\n        if (expect === reader.byteLength) {\n          return true;\n        }\n        var fileLength = reader.byteLength;\n        for (var index = 0; index < fileLength; index++) {\n          if (reader.getUint8(index, false) > 127) {\n            return true;\n          }\n        }\n        return false;\n      }\n    }, {\n      key: \"_ensureBinary\",\n      value: function _ensureBinary(buf) {\n        if (typeof buf === \"string\") {\n          var array_buffer = new Uint8Array(buf.length);\n          for (var i2 = 0; i2 < buf.length; i2++) {\n            array_buffer[i2] = buf.charCodeAt(i2) & 255;\n          }\n          return array_buffer.buffer || array_buffer;\n        } else {\n          return buf;\n        }\n      }\n    }, {\n      key: \"_ensureString\",\n      value: function _ensureString(buf) {\n        if (typeof buf !== \"string\") {\n          return LoaderUtils.decodeText(new Uint8Array(buf));\n        } else {\n          return buf;\n        }\n      }\n    }, {\n      key: \"parse\",\n      value: function _parse(data, onLoad) {\n        var binData = this._ensureBinary(data);\n        this._data = this._ensureString(data);\n        this.onLoad = onLoad;\n        return this._isBinary(binData) ? this._parseBinary(binData) : this._parseASCII();\n      }\n    }, {\n      key: \"_parseBinary\",\n      value: function _parseBinary(data) {\n        return this._parseASCII(LoaderUtils.decodeText(new Uint8Array(data)));\n      }\n    }, {\n      key: \"_parseASCII\",\n      value: function _parseASCII() {\n        var path;\n        if (this.resourcePath !== \"\") {\n          path = this.resourcePath;\n        } else if (this.path !== \"\") {\n          path = this.path;\n        } else {\n          path = LoaderUtils.extractUrlBase(this.url);\n        }\n        this.texloader.setPath(path).setCrossOrigin(this.crossOrigin);\n        var endRead = 16;\n        this.Hierarchies.children = [];\n        this._hierarchieParse(this.Hierarchies, endRead);\n        this._changeRoot();\n        this._currentObject = this.Hierarchies.children.shift();\n        this._mainloop();\n      }\n    }, {\n      key: \"_hierarchieParse\",\n      value: function _hierarchieParse(_parent, _end) {\n        var endRead = _end;\n        while (true) {\n          var find1 = this._data.indexOf(\"{\", endRead) + 1;\n          var findEnd = this._data.indexOf(\"}\", endRead);\n          var findNext = this._data.indexOf(\"{\", find1) + 1;\n          if (find1 > 0 && findEnd > find1) {\n            var _currentObject = {};\n            _currentObject.children = [];\n            var nameData = this._readLine(this._data.substr(endRead, find1 - endRead - 1)).trim();\n            var word = nameData.split(/ /g);\n            if (word.length > 0) {\n              _currentObject.type = word[0];\n              if (word.length >= 2) {\n                _currentObject.name = word[1];\n              } else {\n                _currentObject.name = word[0] + this.Hierarchies.children.length;\n              }\n            } else {\n              _currentObject.name = nameData;\n              _currentObject.type = \"\";\n            }\n            if (_currentObject.type === \"Animation\") {\n              _currentObject.data = this._data.substr(findNext, findEnd - findNext).trim();\n              var refs = this._hierarchieParse(_currentObject, findEnd + 1);\n              endRead = refs.end;\n              _currentObject.children = refs.parent.children;\n            } else {\n              var DataEnder = this._data.lastIndexOf(\";\", findNext > 0 ? Math.min(findNext, findEnd) : findEnd);\n              _currentObject.data = this._data.substr(find1, DataEnder - find1).trim();\n              if (findNext <= 0 || findEnd < findNext) {\n                endRead = findEnd + 1;\n              } else {\n                var nextStart = Math.max(DataEnder + 1, find1);\n                var _refs = this._hierarchieParse(_currentObject, nextStart);\n                endRead = _refs.end;\n                _currentObject.children = _refs.parent.children;\n              }\n            }\n            _currentObject.parent = _parent;\n            if (_currentObject.type != \"template\") {\n              _parent.children.push(_currentObject);\n            }\n          } else {\n            endRead = find1 === -1 ? this._data.length : findEnd + 1;\n            break;\n          }\n        }\n        return {\n          parent: _parent,\n          end: endRead\n        };\n      }\n    }, {\n      key: \"_mainloop\",\n      value: function _mainloop() {\n        var _this2 = this;\n        this._mainProc();\n        if (this._currentObject.parent || this._currentObject.children.length > 0 || !this._currentObject.worked) {\n          setTimeout(function () {\n            _this2._mainloop();\n          }, 1);\n        } else {\n          setTimeout(function () {\n            _this2.onLoad({\n              models: _this2.Meshes,\n              animations: _this2.animations\n            });\n          }, 1);\n        }\n      }\n    }, {\n      key: \"_mainProc\",\n      value: function _mainProc() {\n        var breakFlag = false;\n        while (true) {\n          if (!this._currentObject.worked) {\n            switch (this._currentObject.type) {\n              case \"template\":\n                break;\n              case \"AnimTicksPerSecond\":\n                this.animTicksPerSecond = parseInt(this._currentObject.data);\n                break;\n              case \"Frame\":\n                this._setFrame();\n                break;\n              case \"FrameTransformMatrix\":\n                this._setFrameTransformMatrix();\n                break;\n              case \"Mesh\":\n                this._changeRoot();\n                this._currentGeo = {};\n                this._currentGeo.name = this._currentObject.name.trim();\n                this._currentGeo.parentName = this._getParentName(this._currentObject).trim();\n                this._currentGeo.VertexSetedBoneCount = [];\n                this._currentGeo.GeometryData = {\n                  vertices: [],\n                  normals: [],\n                  uvs: [],\n                  skinIndices: [],\n                  skinWeights: [],\n                  indices: [],\n                  materialIndices: []\n                };\n                this._currentGeo.Materials = [];\n                this._currentGeo.normalVectors = [];\n                this._currentGeo.BoneInfs = [];\n                this._currentGeo.baseFrame = this._currentFrame;\n                this._makeBoneFrom_CurrentFrame();\n                this._readVertexDatas();\n                breakFlag = true;\n                break;\n              case \"MeshNormals\":\n                this._readVertexDatas();\n                break;\n              case \"MeshTextureCoords\":\n                this._setMeshTextureCoords();\n                break;\n              case \"VertexDuplicationIndices\":\n                break;\n              case \"MeshMaterialList\":\n                this._setMeshMaterialList();\n                break;\n              case \"Material\":\n                this._setMaterial();\n                break;\n              case \"SkinWeights\":\n                this._setSkinWeights();\n                break;\n              case \"AnimationSet\":\n                this._changeRoot();\n                this._currentAnime = {};\n                this._currentAnime.name = this._currentObject.name.trim();\n                this._currentAnime.AnimeFrames = [];\n                break;\n              case \"Animation\":\n                if (this._currentAnimeFrames) {\n                  this._currentAnime.AnimeFrames.push(this._currentAnimeFrames);\n                }\n                this._currentAnimeFrames = new XAnimationInfo();\n                this._currentAnimeFrames.boneName = this._currentObject.data.trim();\n                break;\n              case \"AnimationKey\":\n                this._readAnimationKey();\n                breakFlag = true;\n                break;\n            }\n            this._currentObject.worked = true;\n          }\n          if (this._currentObject.children.length > 0) {\n            this._currentObject = this._currentObject.children.shift();\n            if (this.debug) {\n              console.log(\"processing \" + this._currentObject.name);\n            }\n            if (breakFlag) break;\n          } else {\n            if (this._currentObject.worked) {\n              if (this._currentObject.parent && !this._currentObject.parent.parent) {\n                this._changeRoot();\n              }\n            }\n            if (this._currentObject.parent) {\n              this._currentObject = this._currentObject.parent;\n            } else {\n              breakFlag = true;\n            }\n            if (breakFlag) break;\n          }\n        }\n        return;\n      }\n    }, {\n      key: \"_changeRoot\",\n      value: function _changeRoot() {\n        if (this._currentGeo != null && this._currentGeo.name) {\n          this._makeOutputGeometry();\n        }\n        this._currentGeo = {};\n        if (this._currentAnime != null && this._currentAnime.name) {\n          if (this._currentAnimeFrames) {\n            this._currentAnime.AnimeFrames.push(this._currentAnimeFrames);\n            this._currentAnimeFrames = null;\n          }\n          this._makeOutputAnimation();\n        }\n        this._currentAnime = {};\n      }\n    }, {\n      key: \"_getParentName\",\n      value: function _getParentName(_obj) {\n        if (_obj.parent) {\n          if (_obj.parent.name) {\n            return _obj.parent.name;\n          } else {\n            return this._getParentName(_obj.parent);\n          }\n        } else {\n          return \"\";\n        }\n      }\n    }, {\n      key: \"_setFrame\",\n      value: function _setFrame() {\n        this._nowFrameName = this._currentObject.name.trim();\n        this._currentFrame = {};\n        this._currentFrame.name = this._nowFrameName;\n        this._currentFrame.children = [];\n        if (this._currentObject.parent && this._currentObject.parent.name) {\n          this._currentFrame.parentName = this._currentObject.parent.name;\n        }\n        this.frameHierarchie.push(this._nowFrameName);\n        this.HieStack[this._nowFrameName] = this._currentFrame;\n      }\n    }, {\n      key: \"_setFrameTransformMatrix\",\n      value: function _setFrameTransformMatrix() {\n        this._currentFrame.FrameTransformMatrix = new Matrix4();\n        var data = this._currentObject.data.split(\",\");\n        this._ParseMatrixData(this._currentFrame.FrameTransformMatrix, data);\n        this._makeBoneFrom_CurrentFrame();\n      }\n    }, {\n      key: \"_makeBoneFrom_CurrentFrame\",\n      value: function _makeBoneFrom_CurrentFrame() {\n        if (!this._currentFrame.FrameTransformMatrix) {\n          return;\n        }\n        var b = new Bone();\n        b.name = this._currentFrame.name;\n        b.applyMatrix4(this._currentFrame.FrameTransformMatrix);\n        b.matrixWorld = b.matrix;\n        b.FrameTransformMatrix = this._currentFrame.FrameTransformMatrix;\n        this._currentFrame.putBone = b;\n        if (this._currentFrame.parentName) {\n          for (var frame in this.HieStack) {\n            if (this.HieStack[frame].name === this._currentFrame.parentName) {\n              this.HieStack[frame].putBone.add(this._currentFrame.putBone);\n            }\n          }\n        }\n      }\n    }, {\n      key: \"_readVertexDatas\",\n      value: function _readVertexDatas() {\n        var endRead = 0;\n        var mode = 0;\n        var mode_local = 0;\n        var maxLength = 0;\n        while (true) {\n          var changeMode = false;\n          if (mode_local === 0) {\n            var refO = this._readInt1(endRead);\n            endRead = refO.endRead;\n            mode_local = 1;\n            maxLength = this._currentObject.data.indexOf(\";;\", endRead) + 1;\n            if (maxLength <= 0) {\n              maxLength = this._currentObject.data.length;\n            }\n          } else {\n            var find = 0;\n            switch (mode) {\n              case 0:\n                find = this._currentObject.data.indexOf(\",\", endRead) + 1;\n                break;\n              case 1:\n                find = this._currentObject.data.indexOf(\";,\", endRead) + 1;\n                break;\n            }\n            if (find === 0 || find > maxLength) {\n              find = maxLength;\n              mode_local = 0;\n              changeMode = true;\n            }\n            switch (this._currentObject.type) {\n              case \"Mesh\":\n                switch (mode) {\n                  case 0:\n                    this._readVertex1(this._currentObject.data.substr(endRead, find - endRead));\n                    break;\n                  case 1:\n                    this._readFace1(this._currentObject.data.substr(endRead, find - endRead));\n                    break;\n                }\n                break;\n              case \"MeshNormals\":\n                switch (mode) {\n                  case 0:\n                    this._readNormalVector1(this._currentObject.data.substr(endRead, find - endRead));\n                    break;\n                }\n                break;\n            }\n            endRead = find + 1;\n            if (changeMode) {\n              mode++;\n            }\n          }\n          if (endRead >= this._currentObject.data.length) {\n            break;\n          }\n        }\n      }\n    }, {\n      key: \"_readInt1\",\n      value: function _readInt1(start) {\n        var find = this._currentObject.data.indexOf(\";\", start);\n        return {\n          refI: parseInt(this._currentObject.data.substr(start, find - start)),\n          endRead: find + 1\n        };\n      }\n    }, {\n      key: \"_readVertex1\",\n      value: function _readVertex1(line) {\n        var data = this._readLine(line.trim()).substr(0, line.length - 2).split(\";\");\n        this._currentGeo.GeometryData.vertices.push(parseFloat(data[0]), parseFloat(data[1]), parseFloat(data[2]));\n        this._currentGeo.GeometryData.skinIndices.push(0, 0, 0, 0);\n        this._currentGeo.GeometryData.skinWeights.push(1, 0, 0, 0);\n        this._currentGeo.VertexSetedBoneCount.push(0);\n      }\n    }, {\n      key: \"_readFace1\",\n      value: function _readFace1(line) {\n        var data = this._readLine(line.trim()).substr(2, line.length - 4).split(\",\");\n        this._currentGeo.GeometryData.indices.push(parseInt(data[0], 10), parseInt(data[1], 10), parseInt(data[2], 10));\n      }\n    }, {\n      key: \"_readNormalVector1\",\n      value: function _readNormalVector1(line) {\n        var data = this._readLine(line.trim()).substr(0, line.length - 2).split(\";\");\n        this._currentGeo.GeometryData.normals.push(parseFloat(data[0]), parseFloat(data[1]), parseFloat(data[2]));\n      }\n    }, {\n      key: \"_buildGeometry\",\n      value: function _buildGeometry() {\n        var bufferGeometry = new BufferGeometry();\n        var position = [];\n        var normals = [];\n        var uvs = [];\n        var skinIndices = [];\n        var skinWeights = [];\n        var data = this._currentGeo.GeometryData;\n        for (var i2 = 0, l = data.indices.length; i2 < l; i2++) {\n          var stride2 = data.indices[i2] * 2;\n          var stride3 = data.indices[i2] * 3;\n          var stride4 = data.indices[i2] * 4;\n          position.push(data.vertices[stride3], data.vertices[stride3 + 1], data.vertices[stride3 + 2]);\n          normals.push(data.normals[stride3], data.normals[stride3 + 1], data.normals[stride3 + 2]);\n          skinIndices.push(data.skinIndices[stride4], data.skinIndices[stride4 + 1], data.skinIndices[stride4 + 2], data.skinIndices[stride4 + 3]);\n          skinWeights.push(data.skinWeights[stride4], data.skinWeights[stride4 + 1], data.skinWeights[stride4 + 2], data.skinWeights[stride4 + 3]);\n          uvs.push(data.uvs[stride2], data.uvs[stride2 + 1]);\n        }\n        bufferGeometry.setAttribute(\"position\", new Float32BufferAttribute(position, 3));\n        bufferGeometry.setAttribute(\"normal\", new Float32BufferAttribute(normals, 3));\n        bufferGeometry.setAttribute(\"uv\", new Float32BufferAttribute(uvs, 2));\n        bufferGeometry.setAttribute(\"skinIndex\", new Uint16BufferAttribute(skinIndices, 4));\n        bufferGeometry.setAttribute(\"skinWeight\", new Float32BufferAttribute(skinWeights, 4));\n        this._computeGroups(bufferGeometry, data.materialIndices);\n        return bufferGeometry;\n      }\n    }, {\n      key: \"_computeGroups\",\n      value: function _computeGroups(bufferGeometry, materialIndices) {\n        var group;\n        var groups = [];\n        var materialIndex = void 0;\n        for (var i2 = 0; i2 < materialIndices.length; i2++) {\n          var currentMaterialIndex = materialIndices[i2];\n          if (currentMaterialIndex !== materialIndex) {\n            materialIndex = currentMaterialIndex;\n            if (group !== void 0) {\n              group.count = i2 * 3 - group.start;\n              groups.push(group);\n            }\n            group = {\n              start: i2 * 3,\n              materialIndex: materialIndex\n            };\n          }\n        }\n        if (group !== void 0) {\n          group.count = i * 3 - group.start;\n          groups.push(group);\n        }\n        bufferGeometry.groups = groups;\n      }\n    }, {\n      key: \"_setMeshTextureCoords\",\n      value: function _setMeshTextureCoords() {\n        var endRead = 0;\n        var mode = 0;\n        var mode_local = 0;\n        while (true) {\n          switch (mode) {\n            case 0:\n              if (mode_local === 0) {\n                var refO = this._readInt1(0);\n                endRead = refO.endRead;\n                mode_local = 1;\n              } else {\n                var find = this._currentObject.data.indexOf(\",\", endRead) + 1;\n                if (find === 0) {\n                  find = this._currentObject.data.length;\n                  mode = 2;\n                  mode_local = 0;\n                }\n                var line = this._currentObject.data.substr(endRead, find - endRead);\n                var data = this._readLine(line.trim()).split(\";\");\n                if (this.IsUvYReverse) {\n                  this._currentGeo.GeometryData.uvs.push(parseFloat(data[0]), 1 - parseFloat(data[1]));\n                } else {\n                  this._currentGeo.GeometryData.uvs.push(parseFloat(data[0]), parseFloat(data[1]));\n                }\n                endRead = find + 1;\n              }\n              break;\n          }\n          if (endRead >= this._currentObject.data.length) {\n            break;\n          }\n        }\n      }\n    }, {\n      key: \"_setMeshMaterialList\",\n      value: function _setMeshMaterialList() {\n        var endRead = 0;\n        var mode = 0;\n        var mode_local = 0;\n        while (true) {\n          if (mode_local < 2) {\n            var refO = this._readInt1(endRead);\n            endRead = refO.endRead;\n            mode_local++;\n          } else {\n            var find = this._currentObject.data.indexOf(\";\", endRead);\n            if (find === -1) {\n              find = this._currentObject.data.length;\n              mode = 3;\n              mode_local = 0;\n            }\n            var line = this._currentObject.data.substr(endRead, find - endRead);\n            var data = this._readLine(line.trim()).split(\",\");\n            for (var i2 = 0; i2 < data.length; i2++) {\n              this._currentGeo.GeometryData.materialIndices[i2] = parseInt(data[i2]);\n            }\n            endRead = this._currentObject.data.length;\n          }\n          if (endRead >= this._currentObject.data.length || mode >= 3) {\n            break;\n          }\n        }\n      }\n    }, {\n      key: \"_setMaterial\",\n      value: function _setMaterial() {\n        var _nowMat = new MeshPhongMaterial({\n          color: Math.random() * 16777215\n        });\n        _nowMat.side = FrontSide;\n        _nowMat.name = this._currentObject.name;\n        var endRead = 0;\n        var find = this._currentObject.data.indexOf(\";;\", endRead);\n        var line = this._currentObject.data.substr(endRead, find - endRead);\n        var data = this._readLine(line.trim()).split(\";\");\n        _nowMat.color.r = parseFloat(data[0]);\n        _nowMat.color.g = parseFloat(data[1]);\n        _nowMat.color.b = parseFloat(data[2]);\n        endRead = find + 2;\n        find = this._currentObject.data.indexOf(\";\", endRead);\n        line = this._currentObject.data.substr(endRead, find - endRead);\n        _nowMat.shininess = parseFloat(this._readLine(line));\n        endRead = find + 1;\n        find = this._currentObject.data.indexOf(\";;\", endRead);\n        line = this._currentObject.data.substr(endRead, find - endRead);\n        var data2 = this._readLine(line.trim()).split(\";\");\n        _nowMat.specular.r = parseFloat(data2[0]);\n        _nowMat.specular.g = parseFloat(data2[1]);\n        _nowMat.specular.b = parseFloat(data2[2]);\n        endRead = find + 2;\n        find = this._currentObject.data.indexOf(\";;\", endRead);\n        if (find === -1) {\n          find = this._currentObject.data.length;\n        }\n        line = this._currentObject.data.substr(endRead, find - endRead);\n        var data3 = this._readLine(line.trim()).split(\";\");\n        _nowMat.emissive.r = parseFloat(data3[0]);\n        _nowMat.emissive.g = parseFloat(data3[1]);\n        _nowMat.emissive.b = parseFloat(data3[2]);\n        var localObject = null;\n        while (true) {\n          if (this._currentObject.children.length > 0) {\n            localObject = this._currentObject.children.shift();\n            if (this.debug) {\n              console.log(\"processing \" + localObject.name);\n            }\n            var fileName = localObject.data.substr(1, localObject.data.length - 2);\n            switch (localObject.type) {\n              case \"TextureFilename\":\n                _nowMat.map = this.texloader.load(fileName);\n                break;\n              case \"BumpMapFilename\":\n                _nowMat.bumpMap = this.texloader.load(fileName);\n                _nowMat.bumpScale = 0.05;\n                break;\n              case \"NormalMapFilename\":\n                _nowMat.normalMap = this.texloader.load(fileName);\n                _nowMat.normalScale = new Vector2(2, 2);\n                break;\n              case \"EmissiveMapFilename\":\n                _nowMat.emissiveMap = this.texloader.load(fileName);\n                break;\n              case \"LightMapFilename\":\n                _nowMat.lightMap = this.texloader.load(fileName);\n                break;\n            }\n          } else {\n            break;\n          }\n        }\n        this._currentGeo.Materials.push(_nowMat);\n      }\n    }, {\n      key: \"_setSkinWeights\",\n      value: function _setSkinWeights() {\n        var boneInf = new XboneInf();\n        var endRead = 0;\n        var find = this._currentObject.data.indexOf(\";\", endRead);\n        var line = this._currentObject.data.substr(endRead, find - endRead);\n        endRead = find + 1;\n        boneInf.boneName = line.substr(1, line.length - 2);\n        boneInf.BoneIndex = this._currentGeo.BoneInfs.length;\n        find = this._currentObject.data.indexOf(\";\", endRead);\n        endRead = find + 1;\n        find = this._currentObject.data.indexOf(\";\", endRead);\n        line = this._currentObject.data.substr(endRead, find - endRead);\n        var data = this._readLine(line.trim()).split(\",\");\n        for (var i2 = 0; i2 < data.length; i2++) {\n          boneInf.Indeces.push(parseInt(data[i2]));\n        }\n        endRead = find + 1;\n        find = this._currentObject.data.indexOf(\";\", endRead);\n        line = this._currentObject.data.substr(endRead, find - endRead);\n        var data2 = this._readLine(line.trim()).split(\",\");\n        for (var _i = 0; _i < data2.length; _i++) {\n          boneInf.Weights.push(parseFloat(data2[_i]));\n        }\n        endRead = find + 1;\n        find = this._currentObject.data.indexOf(\";\", endRead);\n        if (find <= 0) {\n          find = this._currentObject.data.length;\n        }\n        line = this._currentObject.data.substr(endRead, find - endRead);\n        var data3 = this._readLine(line.trim()).split(\",\");\n        boneInf.OffsetMatrix = new Matrix4();\n        this._ParseMatrixData(boneInf.OffsetMatrix, data3);\n        this._currentGeo.BoneInfs.push(boneInf);\n      }\n    }, {\n      key: \"_makePutBoneList\",\n      value: function _makePutBoneList(_RootName, _bones) {\n        var putting = false;\n        for (var frame in this.HieStack) {\n          if (this.HieStack[frame].name === _RootName || putting) {\n            putting = true;\n            var b = new Bone();\n            b.name = this.HieStack[frame].name;\n            b.applyMatrix4(this.HieStack[frame].FrameTransformMatrix);\n            b.matrixWorld = b.matrix;\n            b.FrameTransformMatrix = this.HieStack[frame].FrameTransformMatrix;\n            b.pos = new Vector3().setFromMatrixPosition(b.FrameTransformMatrix).toArray();\n            b.rotq = new Quaternion().setFromRotationMatrix(b.FrameTransformMatrix).toArray();\n            b.scl = new Vector3().setFromMatrixScale(b.FrameTransformMatrix).toArray();\n            if (this.HieStack[frame].parentName && this.HieStack[frame].parentName.length > 0) {\n              for (var i2 = 0; i2 < _bones.length; i2++) {\n                if (this.HieStack[frame].parentName === _bones[i2].name) {\n                  _bones[i2].add(b);\n                  b.parent = i2;\n                  break;\n                }\n              }\n            }\n            _bones.push(b);\n          }\n        }\n      }\n    }, {\n      key: \"_makeOutputGeometry\",\n      value: function _makeOutputGeometry() {\n        var mesh = null;\n        if (this._currentGeo.BoneInfs.length > 0) {\n          var putBones = [];\n          this._makePutBoneList(this._currentGeo.baseFrame.parentName, putBones);\n          for (var bi = 0; bi < this._currentGeo.BoneInfs.length; bi++) {\n            var boneIndex = 0;\n            for (var bb = 0; bb < putBones.length; bb++) {\n              if (putBones[bb].name === this._currentGeo.BoneInfs[bi].boneName) {\n                boneIndex = bb;\n                putBones[bb].OffsetMatrix = new Matrix4();\n                putBones[bb].OffsetMatrix.copy(this._currentGeo.BoneInfs[bi].OffsetMatrix);\n                break;\n              }\n            }\n            for (var vi = 0; vi < this._currentGeo.BoneInfs[bi].Indeces.length; vi++) {\n              var nowVertexID = this._currentGeo.BoneInfs[bi].Indeces[vi];\n              var nowVal = this._currentGeo.BoneInfs[bi].Weights[vi];\n              var stride = nowVertexID * 4;\n              switch (this._currentGeo.VertexSetedBoneCount[nowVertexID]) {\n                case 0:\n                  this._currentGeo.GeometryData.skinIndices[stride] = boneIndex;\n                  this._currentGeo.GeometryData.skinWeights[stride] = nowVal;\n                  break;\n                case 1:\n                  this._currentGeo.GeometryData.skinIndices[stride + 1] = boneIndex;\n                  this._currentGeo.GeometryData.skinWeights[stride + 1] = nowVal;\n                  break;\n                case 2:\n                  this._currentGeo.GeometryData.skinIndices[stride + 2] = boneIndex;\n                  this._currentGeo.GeometryData.skinWeights[stride + 2] = nowVal;\n                  break;\n                case 3:\n                  this._currentGeo.GeometryData.skinIndices[stride + 3] = boneIndex;\n                  this._currentGeo.GeometryData.skinWeights[stride + 3] = nowVal;\n                  break;\n              }\n              this._currentGeo.VertexSetedBoneCount[nowVertexID]++;\n              if (this._currentGeo.VertexSetedBoneCount[nowVertexID] > 4) {\n                console.log(\"warn! over 4 bone weight! :\" + nowVertexID);\n              }\n            }\n          }\n          for (var sk = 0; sk < this._currentGeo.Materials.length; sk++) {\n            this._currentGeo.Materials[sk].skinning = true;\n          }\n          var offsetList = [];\n          for (var _bi = 0; _bi < putBones.length; _bi++) {\n            if (putBones[_bi].OffsetMatrix) {\n              offsetList.push(putBones[_bi].OffsetMatrix);\n            } else {\n              offsetList.push(new Matrix4());\n            }\n          }\n          var bufferGeometry = this._buildGeometry();\n          mesh = new SkinnedMesh(bufferGeometry, this._currentGeo.Materials.length === 1 ? this._currentGeo.Materials[0] : this._currentGeo.Materials);\n          this._initSkeleton(mesh, putBones, offsetList);\n        } else {\n          var _bufferGeometry = this._buildGeometry();\n          mesh = new Mesh(_bufferGeometry, this._currentGeo.Materials.length === 1 ? this._currentGeo.Materials[0] : this._currentGeo.Materials);\n        }\n        mesh.name = this._currentGeo.name;\n        var worldBaseMx = new Matrix4();\n        var currentMxFrame = this._currentGeo.baseFrame.putBone;\n        if (currentMxFrame && currentMxFrame.parent) {\n          while (true) {\n            currentMxFrame = currentMxFrame.parent;\n            if (currentMxFrame) {\n              worldBaseMx.multiply(currentMxFrame.FrameTransformMatrix);\n            } else {\n              break;\n            }\n          }\n          mesh.applyMatrix4(worldBaseMx);\n        }\n        this.Meshes.push(mesh);\n      }\n    }, {\n      key: \"_initSkeleton\",\n      value: function _initSkeleton(mesh, boneList, boneInverses) {\n        var bones = [],\n          bone,\n          gbone;\n        var i2, il;\n        for (i2 = 0, il = boneList.length; i2 < il; i2++) {\n          gbone = boneList[i2];\n          bone = new Bone();\n          bones.push(bone);\n          bone.name = gbone.name;\n          bone.position.fromArray(gbone.pos);\n          bone.quaternion.fromArray(gbone.rotq);\n          if (gbone.scl !== void 0) bone.scale.fromArray(gbone.scl);\n        }\n        for (i2 = 0, il = boneList.length; i2 < il; i2++) {\n          gbone = boneList[i2];\n          if (gbone.parent !== -1 && gbone.parent !== null && bones[gbone.parent] !== void 0) {\n            bones[gbone.parent].add(bones[i2]);\n          } else {\n            mesh.add(bones[i2]);\n          }\n        }\n        mesh.updateMatrixWorld(true);\n        var skeleton = new Skeleton(bones, boneInverses);\n        mesh.bind(skeleton, mesh.matrixWorld);\n      }\n    }, {\n      key: \"_readAnimationKey\",\n      value: function _readAnimationKey() {\n        var endRead = 0;\n        var find = this._currentObject.data.indexOf(\";\", endRead);\n        var line = this._currentObject.data.substr(endRead, find - endRead);\n        endRead = find + 1;\n        var nowKeyType = parseInt(this._readLine(line));\n        find = this._currentObject.data.indexOf(\";\", endRead);\n        endRead = find + 1;\n        line = this._currentObject.data.substr(endRead);\n        var data = this._readLine(line.trim()).split(\";;,\");\n        for (var i2 = 0; i2 < data.length; i2++) {\n          var data2 = data[i2].split(\";\");\n          var keyInfo = new XKeyFrameInfo();\n          keyInfo.type = nowKeyType;\n          keyInfo.Frame = parseInt(data2[0]);\n          keyInfo.index = this._currentAnimeFrames.keyFrames.length;\n          keyInfo.time = keyInfo.Frame;\n          if (nowKeyType != 4) {\n            var frameFound = false;\n            for (var mm = 0; mm < this._currentAnimeFrames.keyFrames.length; mm++) {\n              if (this._currentAnimeFrames.keyFrames[mm].Frame === keyInfo.Frame) {\n                keyInfo = this._currentAnimeFrames.keyFrames[mm];\n                frameFound = true;\n                break;\n              }\n            }\n            var frameValue = data2[2].split(\",\");\n            switch (nowKeyType) {\n              case 0:\n                keyInfo.rot = new Quaternion(parseFloat(frameValue[1]), parseFloat(frameValue[2]), parseFloat(frameValue[3]), parseFloat(frameValue[0]) * -1);\n                break;\n              case 1:\n                keyInfo.scl = new Vector3(parseFloat(frameValue[0]), parseFloat(frameValue[1]), parseFloat(frameValue[2]));\n                break;\n              case 2:\n                keyInfo.pos = new Vector3(parseFloat(frameValue[0]), parseFloat(frameValue[1]), parseFloat(frameValue[2]));\n                break;\n            }\n            if (!frameFound) {\n              this._currentAnimeFrames.keyFrames.push(keyInfo);\n            }\n          } else {\n            keyInfo.matrix = new Matrix4();\n            this._ParseMatrixData(keyInfo.matrix, data2[2].split(\",\"));\n            this._currentAnimeFrames.keyFrames.push(keyInfo);\n          }\n        }\n      }\n    }, {\n      key: \"_makeOutputAnimation\",\n      value: function _makeOutputAnimation() {\n        var animationObj = new XAnimationObj(this.options);\n        animationObj.fps = this.animTicksPerSecond;\n        animationObj.name = this._currentAnime.name;\n        animationObj.make(this._currentAnime.AnimeFrames);\n        this.animations.push(animationObj);\n      }\n    }, {\n      key: \"assignAnimation\",\n      value: function assignAnimation(_model, _animation) {\n        var model = _model;\n        var animation = _animation;\n        if (!model) {\n          model = this.Meshes[0];\n        }\n        if (!animation) {\n          animation = this.animations[0];\n        }\n        if (!model || !animation) {\n          return null;\n        }\n        var put = {};\n        put.fps = animation.fps;\n        put.name = animation.name;\n        put.length = animation.length;\n        put.hierarchy = [];\n        for (var b = 0; b < model.skeleton.bones.length; b++) {\n          var findAnimation = false;\n          for (var i2 = 0; i2 < animation.hierarchy.length; i2++) {\n            if (model.skeleton.bones[b].name === animation.hierarchy[i2].name) {\n              findAnimation = true;\n              var c_key = animation.hierarchy[i2].copy();\n              c_key.parent = -1;\n              if (model.skeleton.bones[b].parent && model.skeleton.bones[b].parent.type === \"Bone\") {\n                for (var bb = 0; bb < put.hierarchy.length; bb++) {\n                  if (put.hierarchy[bb].name === model.skeleton.bones[b].parent.name) {\n                    c_key.parent = bb;\n                    c_key.parentName = model.skeleton.bones[b].parent.name;\n                  }\n                }\n              }\n              put.hierarchy.push(c_key);\n              break;\n            }\n          }\n          if (!findAnimation) {\n            var _c_key = animation.hierarchy[0].copy();\n            _c_key.name = model.skeleton.bones[b].name;\n            _c_key.parent = -1;\n            for (var k = 0; k < _c_key.keys.length; k++) {\n              if (_c_key.keys[k].pos) {\n                _c_key.keys[k].pos.set(0, 0, 0);\n              }\n              if (_c_key.keys[k].scl) {\n                _c_key.keys[k].scl.set(1, 1, 1);\n              }\n              if (_c_key.keys[k].rot) {\n                _c_key.keys[k].rot.set(0, 0, 0, 1);\n              }\n            }\n            put.hierarchy.push(_c_key);\n          }\n        }\n        if (!model.geometry.animations) {\n          model.geometry.animations = [];\n        }\n        model.geometry.animations.push(AnimationClip.parseAnimation(put, model.skeleton.bones));\n        if (!model.animationMixer) {\n          model.animationMixer = new AnimationMixer(model);\n        }\n        return put;\n      }\n    }, {\n      key: \"_ParseMatrixData\",\n      value: function _ParseMatrixData(targetMatrix, data) {\n        targetMatrix.set(parseFloat(data[0]), parseFloat(data[4]), parseFloat(data[8]), parseFloat(data[12]), parseFloat(data[1]), parseFloat(data[5]), parseFloat(data[9]), parseFloat(data[13]), parseFloat(data[2]), parseFloat(data[6]), parseFloat(data[10]), parseFloat(data[14]), parseFloat(data[3]), parseFloat(data[7]), parseFloat(data[11]), parseFloat(data[15]));\n      }\n    }]);\n    return XLoader3;\n  }();\n  return XLoader2;\n}();\nexport { XLoader };","map":{"version":3,"names":["Vector3","Quaternion","Loader","TextureLoader","FileLoader","LoaderUtils","Matrix4","Bone","BufferGeometry","Float32BufferAttribute","Uint16BufferAttribute","MeshPhongMaterial","FrontSide","Vector2","SkinnedMesh","Mesh","Skeleton","AnimationClip","AnimationMixer","XLoader","classCallCheck","instance","Constructor","TypeError","createClass","defineProperties","target","props","i2","length","descriptor","enumerable","configurable","writable","Object","defineProperty","key","protoProps","staticProps","prototype","XboneInf","XboneInf2","boneName","BoneIndex","Indeces","Weights","initMatrix","OffsetMatrix","XAnimationInfo","XAnimationInfo2","animeName","targetBone","keyType","frameStartLv","keyFrames","InverseMx","XAnimationObj","XAnimationObj2","_flags","fps","name","hierarchy","putFlags","putPos","putRot","putScl","value","make","XAnimationInfoArray","push","makeBonekeys","keys","time","clone","assign","refObj","parent","keyFrameRefactor","copy","keyframe","pos","rot","scl","matrix","setFromMatrixPosition","setFromRotationMatrix","setFromMatrixScale","XKeyFrameInfo","XKeyFrameInfo2","index","Frame","XLoader2","XLoader3","manager","call","debug","texloader","url","_putMatLength","_nowMat","_nowFrameName","frameHierarchie","Hierarchies","HieStack","_currentObject","_currentFrame","_data","onLoad","IsUvYReverse","Meshes","animations","animTicksPerSecond","_currentGeo","_currentAnime","_currentAnimeFrames","_setArgOption","_arg","_start","arguments","options","load","onProgress","onError","_this","loader","setPath","path","setResponseType","setRequestHeader","requestHeader","setWithCredentials","withCredentials","response","parse","e","console","error","itemError","_readLine","line","readed","find","indexOf","foundNewLine","substr","_isBinary","binData","reader","DataView","face_size","n_faces","getUint32","expect","byteLength","fileLength","getUint8","_ensureBinary","buf","array_buffer","Uint8Array","charCodeAt","buffer","_ensureString","decodeText","_parse","data","_parseBinary","_parseASCII","resourcePath","extractUrlBase","setCrossOrigin","crossOrigin","endRead","children","_hierarchieParse","_changeRoot","shift","_mainloop","_parent","_end","find1","findEnd","findNext","nameData","trim","word","split","type","refs","end","DataEnder","lastIndexOf","Math","min","nextStart","max","_refs","_this2","_mainProc","worked","setTimeout","models","breakFlag","parseInt","_setFrame","_setFrameTransformMatrix","parentName","_getParentName","VertexSetedBoneCount","GeometryData","vertices","normals","uvs","skinIndices","skinWeights","indices","materialIndices","Materials","normalVectors","BoneInfs","baseFrame","_makeBoneFrom_CurrentFrame","_readVertexDatas","_setMeshTextureCoords","_setMeshMaterialList","_setMaterial","_setSkinWeights","AnimeFrames","_readAnimationKey","log","_makeOutputGeometry","_makeOutputAnimation","_obj","FrameTransformMatrix","_ParseMatrixData","b","applyMatrix4","matrixWorld","putBone","frame","add","mode","mode_local","maxLength","changeMode","refO","_readInt1","_readVertex1","_readFace1","_readNormalVector1","start","refI","parseFloat","_buildGeometry","bufferGeometry","position","l","stride2","stride3","stride4","setAttribute","_computeGroups","group","groups","materialIndex","currentMaterialIndex","count","i","color","random","side","r","g","shininess","data2","specular","data3","emissive","localObject","fileName","map","bumpMap","bumpScale","normalMap","normalScale","emissiveMap","lightMap","boneInf","_i","_makePutBoneList","_RootName","_bones","putting","toArray","rotq","mesh","putBones","bi","boneIndex","bb","vi","nowVertexID","nowVal","stride","sk","skinning","offsetList","_bi","_initSkeleton","_bufferGeometry","worldBaseMx","currentMxFrame","multiply","boneList","boneInverses","bones","bone","gbone","il","fromArray","quaternion","scale","updateMatrixWorld","skeleton","bind","nowKeyType","keyInfo","frameFound","mm","frameValue","animationObj","assignAnimation","_model","_animation","model","animation","put","findAnimation","c_key","_c_key","k","set","geometry","parseAnimation","animationMixer","targetMatrix"],"sources":["/home/krug/Coding/JavaScript/Websites/Personal/personal/node_modules/.pnpm/three-stdlib@2.23.7_three@0.151.3/node_modules/three-stdlib/loaders/XLoader.js"],"sourcesContent":["import { Vector3, Quaternion, Loader, TextureLoader, FileLoader, LoaderUtils, Matrix4, Bone, BufferGeometry, Float32BufferAttribute, Uint16BufferAttribute, MeshPhongMaterial, FrontSide, Vector2, SkinnedMesh, Mesh, Skeleton, AnimationClip, AnimationMixer } from \"three\";\nvar XLoader = /* @__PURE__ */ function() {\n  var classCallCheck = function(instance, Constructor) {\n    if (!(instance instanceof Constructor)) {\n      throw new TypeError(\"Cannot call a class as a function\");\n    }\n  };\n  var createClass = function() {\n    function defineProperties(target, props) {\n      for (let i2 = 0; i2 < props.length; i2++) {\n        var descriptor = props[i2];\n        descriptor.enumerable = descriptor.enumerable || false;\n        descriptor.configurable = true;\n        if (\"value\" in descriptor)\n          descriptor.writable = true;\n        Object.defineProperty(target, descriptor.key, descriptor);\n      }\n    }\n    return function(Constructor, protoProps, staticProps) {\n      if (protoProps)\n        defineProperties(Constructor.prototype, protoProps);\n      if (staticProps)\n        defineProperties(Constructor, staticProps);\n      return Constructor;\n    };\n  }();\n  var XboneInf = function XboneInf2() {\n    classCallCheck(this, XboneInf2);\n    this.boneName = \"\";\n    this.BoneIndex = 0;\n    this.Indeces = [];\n    this.Weights = [];\n    this.initMatrix = null;\n    this.OffsetMatrix = null;\n  };\n  var XAnimationInfo = function XAnimationInfo2() {\n    classCallCheck(this, XAnimationInfo2);\n    this.animeName = \"\";\n    this.boneName = \"\";\n    this.targetBone = null;\n    this.keyType = 4;\n    this.frameStartLv = 0;\n    this.keyFrames = [];\n    this.InverseMx = null;\n  };\n  var XAnimationObj = function() {\n    function XAnimationObj2(_flags) {\n      classCallCheck(this, XAnimationObj2);\n      this.fps = 30;\n      this.name = \"xanimation\";\n      this.length = 0;\n      this.hierarchy = [];\n      this.putFlags = _flags;\n      if (this.putFlags.putPos === void 0) {\n        this.putFlags.putPos = true;\n      }\n      if (this.putFlags.putRot === void 0) {\n        this.putFlags.putRot = true;\n      }\n      if (this.putFlags.putScl === void 0) {\n        this.putFlags.putScl = true;\n      }\n    }\n    createClass(XAnimationObj2, [\n      {\n        key: \"make\",\n        value: function make(XAnimationInfoArray) {\n          for (let i2 = 0; i2 < XAnimationInfoArray.length; i2++) {\n            this.hierarchy.push(this.makeBonekeys(XAnimationInfoArray[i2]));\n          }\n          this.length = this.hierarchy[0].keys[this.hierarchy[0].keys.length - 1].time;\n        }\n      },\n      {\n        key: \"clone\",\n        value: function clone() {\n          return Object.assign({}, this);\n        }\n      },\n      {\n        key: \"makeBonekeys\",\n        value: function makeBonekeys(XAnimationInfo2) {\n          var refObj = {};\n          refObj.name = XAnimationInfo2.boneName;\n          refObj.parent = \"\";\n          refObj.keys = this.keyFrameRefactor(XAnimationInfo2);\n          refObj.copy = function() {\n            return Object.assign({}, this);\n          };\n          return refObj;\n        }\n      },\n      {\n        key: \"keyFrameRefactor\",\n        value: function keyFrameRefactor(XAnimationInfo2) {\n          var keys = [];\n          for (let i2 = 0; i2 < XAnimationInfo2.keyFrames.length; i2++) {\n            var keyframe = {};\n            keyframe.time = XAnimationInfo2.keyFrames[i2].time * this.fps;\n            if (XAnimationInfo2.keyFrames[i2].pos && this.putFlags.putPos) {\n              keyframe.pos = XAnimationInfo2.keyFrames[i2].pos;\n            }\n            if (XAnimationInfo2.keyFrames[i2].rot && this.putFlags.putRot) {\n              keyframe.rot = XAnimationInfo2.keyFrames[i2].rot;\n            }\n            if (XAnimationInfo2.keyFrames[i2].scl && this.putFlags.putScl) {\n              keyframe.scl = XAnimationInfo2.keyFrames[i2].scl;\n            }\n            if (XAnimationInfo2.keyFrames[i2].matrix) {\n              keyframe.matrix = XAnimationInfo2.keyFrames[i2].matrix;\n              if (this.putFlags.putPos) {\n                keyframe.pos = new Vector3().setFromMatrixPosition(keyframe.matrix);\n              }\n              if (this.putFlags.putRot) {\n                keyframe.rot = new Quaternion().setFromRotationMatrix(keyframe.matrix);\n              }\n              if (this.putFlags.putScl) {\n                keyframe.scl = new Vector3().setFromMatrixScale(keyframe.matrix);\n              }\n            }\n            keys.push(keyframe);\n          }\n          return keys;\n        }\n      }\n    ]);\n    return XAnimationObj2;\n  }();\n  var XKeyFrameInfo = function XKeyFrameInfo2() {\n    classCallCheck(this, XKeyFrameInfo2);\n    this.index = 0;\n    this.Frame = 0;\n    this.time = 0;\n    this.matrix = null;\n  };\n  var XLoader2 = function() {\n    function XLoader3(manager) {\n      Loader.call(this, manager);\n      classCallCheck(this, XLoader3);\n      this.debug = false;\n      this.texloader = new TextureLoader(this.manager);\n      this.url = \"\";\n      this._putMatLength = 0;\n      this._nowMat = null;\n      this._nowFrameName = \"\";\n      this.frameHierarchie = [];\n      this.Hierarchies = {};\n      this.HieStack = [];\n      this._currentObject = {};\n      this._currentFrame = {};\n      this._data = null;\n      this.onLoad = null;\n      this.IsUvYReverse = true;\n      this.Meshes = [];\n      this.animations = [];\n      this.animTicksPerSecond = 30;\n      this._currentGeo = null;\n      this._currentAnime = null;\n      this._currentAnimeFrames = null;\n    }\n    createClass(XLoader3, [\n      {\n        key: \"_setArgOption\",\n        value: function _setArgOption(_arg) {\n          var _start = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 0;\n          if (!_arg) {\n            return;\n          }\n          for (let i2 = _start; i2 < _arg.length; i2++) {\n            switch (i2) {\n              case 0:\n                this.url = _arg[i2];\n                break;\n              case 1:\n                this.options = _arg[i2];\n                break;\n            }\n          }\n          if (this.options === void 0) {\n            this.options = {};\n          }\n        }\n      },\n      {\n        key: \"load\",\n        value: function load(_arg, onLoad, onProgress, onError) {\n          var _this = this;\n          this._setArgOption(_arg);\n          var loader = new FileLoader(this.manager);\n          loader.setPath(this.path);\n          loader.setResponseType(\"arraybuffer\");\n          loader.setRequestHeader(this.requestHeader);\n          loader.setWithCredentials(this.withCredentials);\n          loader.load(\n            this.url,\n            function(response) {\n              try {\n                _this.parse(response, onLoad);\n              } catch (e) {\n                if (onError) {\n                  onError(e);\n                } else {\n                  console.error(e);\n                }\n                _this.manager.itemError(_this.url);\n              }\n            },\n            onProgress,\n            onError\n          );\n        }\n      },\n      {\n        key: \"_readLine\",\n        value: function _readLine(line) {\n          var readed = 0;\n          while (true) {\n            var find = -1;\n            find = line.indexOf(\"//\", readed);\n            if (find === -1) {\n              find = line.indexOf(\"#\", readed);\n            }\n            if (find > -1 && find < 2) {\n              var foundNewLine = -1;\n              foundNewLine = line.indexOf(\"\\r\\n\", readed);\n              if (foundNewLine > 0) {\n                readed = foundNewLine + 2;\n              } else {\n                foundNewLine = line.indexOf(\"\\r\", readed);\n                if (foundNewLine > 0) {\n                  readed = foundNewLine + 1;\n                } else {\n                  readed = line.indexOf(\"\\n\", readed) + 1;\n                }\n              }\n            } else {\n              break;\n            }\n          }\n          return line.substr(readed);\n        }\n      },\n      {\n        key: \"_readLine\",\n        value: function _readLine(line) {\n          var readed = 0;\n          while (true) {\n            var find = -1;\n            find = line.indexOf(\"//\", readed);\n            if (find === -1) {\n              find = line.indexOf(\"#\", readed);\n            }\n            if (find > -1 && find < 2) {\n              var foundNewLine = -1;\n              foundNewLine = line.indexOf(\"\\r\\n\", readed);\n              if (foundNewLine > 0) {\n                readed = foundNewLine + 2;\n              } else {\n                foundNewLine = line.indexOf(\"\\r\", readed);\n                if (foundNewLine > 0) {\n                  readed = foundNewLine + 1;\n                } else {\n                  readed = line.indexOf(\"\\n\", readed) + 1;\n                }\n              }\n            } else {\n              break;\n            }\n          }\n          return line.substr(readed);\n        }\n      },\n      {\n        key: \"_isBinary\",\n        value: function _isBinary(binData) {\n          var reader = new DataView(binData);\n          var face_size = 32 / 8 * 3 + 32 / 8 * 3 * 3 + 16 / 8;\n          var n_faces = reader.getUint32(80, true);\n          var expect = 80 + 32 / 8 + n_faces * face_size;\n          if (expect === reader.byteLength) {\n            return true;\n          }\n          var fileLength = reader.byteLength;\n          for (let index = 0; index < fileLength; index++) {\n            if (reader.getUint8(index, false) > 127) {\n              return true;\n            }\n          }\n          return false;\n        }\n      },\n      {\n        key: \"_ensureBinary\",\n        value: function _ensureBinary(buf) {\n          if (typeof buf === \"string\") {\n            var array_buffer = new Uint8Array(buf.length);\n            for (let i2 = 0; i2 < buf.length; i2++) {\n              array_buffer[i2] = buf.charCodeAt(i2) & 255;\n            }\n            return array_buffer.buffer || array_buffer;\n          } else {\n            return buf;\n          }\n        }\n      },\n      {\n        key: \"_ensureString\",\n        value: function _ensureString(buf) {\n          if (typeof buf !== \"string\") {\n            return LoaderUtils.decodeText(new Uint8Array(buf));\n          } else {\n            return buf;\n          }\n        }\n      },\n      {\n        key: \"parse\",\n        value: function _parse(data, onLoad) {\n          var binData = this._ensureBinary(data);\n          this._data = this._ensureString(data);\n          this.onLoad = onLoad;\n          return this._isBinary(binData) ? this._parseBinary(binData) : this._parseASCII();\n        }\n      },\n      {\n        key: \"_parseBinary\",\n        value: function _parseBinary(data) {\n          return this._parseASCII(LoaderUtils.decodeText(new Uint8Array(data)));\n        }\n      },\n      {\n        key: \"_parseASCII\",\n        value: function _parseASCII() {\n          var path;\n          if (this.resourcePath !== \"\") {\n            path = this.resourcePath;\n          } else if (this.path !== \"\") {\n            path = this.path;\n          } else {\n            path = LoaderUtils.extractUrlBase(this.url);\n          }\n          this.texloader.setPath(path).setCrossOrigin(this.crossOrigin);\n          var endRead = 16;\n          this.Hierarchies.children = [];\n          this._hierarchieParse(this.Hierarchies, endRead);\n          this._changeRoot();\n          this._currentObject = this.Hierarchies.children.shift();\n          this._mainloop();\n        }\n      },\n      {\n        key: \"_hierarchieParse\",\n        value: function _hierarchieParse(_parent, _end) {\n          var endRead = _end;\n          while (true) {\n            var find1 = this._data.indexOf(\"{\", endRead) + 1;\n            var findEnd = this._data.indexOf(\"}\", endRead);\n            var findNext = this._data.indexOf(\"{\", find1) + 1;\n            if (find1 > 0 && findEnd > find1) {\n              var _currentObject = {};\n              _currentObject.children = [];\n              var nameData = this._readLine(this._data.substr(endRead, find1 - endRead - 1)).trim();\n              var word = nameData.split(/ /g);\n              if (word.length > 0) {\n                _currentObject.type = word[0];\n                if (word.length >= 2) {\n                  _currentObject.name = word[1];\n                } else {\n                  _currentObject.name = word[0] + this.Hierarchies.children.length;\n                }\n              } else {\n                _currentObject.name = nameData;\n                _currentObject.type = \"\";\n              }\n              if (_currentObject.type === \"Animation\") {\n                _currentObject.data = this._data.substr(findNext, findEnd - findNext).trim();\n                var refs = this._hierarchieParse(_currentObject, findEnd + 1);\n                endRead = refs.end;\n                _currentObject.children = refs.parent.children;\n              } else {\n                var DataEnder = this._data.lastIndexOf(\";\", findNext > 0 ? Math.min(findNext, findEnd) : findEnd);\n                _currentObject.data = this._data.substr(find1, DataEnder - find1).trim();\n                if (findNext <= 0 || findEnd < findNext) {\n                  endRead = findEnd + 1;\n                } else {\n                  var nextStart = Math.max(DataEnder + 1, find1);\n                  var _refs = this._hierarchieParse(_currentObject, nextStart);\n                  endRead = _refs.end;\n                  _currentObject.children = _refs.parent.children;\n                }\n              }\n              _currentObject.parent = _parent;\n              if (_currentObject.type != \"template\") {\n                _parent.children.push(_currentObject);\n              }\n            } else {\n              endRead = find1 === -1 ? this._data.length : findEnd + 1;\n              break;\n            }\n          }\n          return {\n            parent: _parent,\n            end: endRead\n          };\n        }\n      },\n      {\n        key: \"_mainloop\",\n        value: function _mainloop() {\n          var _this2 = this;\n          this._mainProc();\n          if (this._currentObject.parent || this._currentObject.children.length > 0 || !this._currentObject.worked) {\n            setTimeout(function() {\n              _this2._mainloop();\n            }, 1);\n          } else {\n            setTimeout(function() {\n              _this2.onLoad({\n                models: _this2.Meshes,\n                animations: _this2.animations\n              });\n            }, 1);\n          }\n        }\n      },\n      {\n        key: \"_mainProc\",\n        value: function _mainProc() {\n          var breakFlag = false;\n          while (true) {\n            if (!this._currentObject.worked) {\n              switch (this._currentObject.type) {\n                case \"template\":\n                  break;\n                case \"AnimTicksPerSecond\":\n                  this.animTicksPerSecond = parseInt(this._currentObject.data);\n                  break;\n                case \"Frame\":\n                  this._setFrame();\n                  break;\n                case \"FrameTransformMatrix\":\n                  this._setFrameTransformMatrix();\n                  break;\n                case \"Mesh\":\n                  this._changeRoot();\n                  this._currentGeo = {};\n                  this._currentGeo.name = this._currentObject.name.trim();\n                  this._currentGeo.parentName = this._getParentName(this._currentObject).trim();\n                  this._currentGeo.VertexSetedBoneCount = [];\n                  this._currentGeo.GeometryData = {\n                    vertices: [],\n                    normals: [],\n                    uvs: [],\n                    skinIndices: [],\n                    skinWeights: [],\n                    indices: [],\n                    materialIndices: []\n                  };\n                  this._currentGeo.Materials = [];\n                  this._currentGeo.normalVectors = [];\n                  this._currentGeo.BoneInfs = [];\n                  this._currentGeo.baseFrame = this._currentFrame;\n                  this._makeBoneFrom_CurrentFrame();\n                  this._readVertexDatas();\n                  breakFlag = true;\n                  break;\n                case \"MeshNormals\":\n                  this._readVertexDatas();\n                  break;\n                case \"MeshTextureCoords\":\n                  this._setMeshTextureCoords();\n                  break;\n                case \"VertexDuplicationIndices\":\n                  break;\n                case \"MeshMaterialList\":\n                  this._setMeshMaterialList();\n                  break;\n                case \"Material\":\n                  this._setMaterial();\n                  break;\n                case \"SkinWeights\":\n                  this._setSkinWeights();\n                  break;\n                case \"AnimationSet\":\n                  this._changeRoot();\n                  this._currentAnime = {};\n                  this._currentAnime.name = this._currentObject.name.trim();\n                  this._currentAnime.AnimeFrames = [];\n                  break;\n                case \"Animation\":\n                  if (this._currentAnimeFrames) {\n                    this._currentAnime.AnimeFrames.push(this._currentAnimeFrames);\n                  }\n                  this._currentAnimeFrames = new XAnimationInfo();\n                  this._currentAnimeFrames.boneName = this._currentObject.data.trim();\n                  break;\n                case \"AnimationKey\":\n                  this._readAnimationKey();\n                  breakFlag = true;\n                  break;\n              }\n              this._currentObject.worked = true;\n            }\n            if (this._currentObject.children.length > 0) {\n              this._currentObject = this._currentObject.children.shift();\n              if (this.debug) {\n                console.log(\"processing \" + this._currentObject.name);\n              }\n              if (breakFlag)\n                break;\n            } else {\n              if (this._currentObject.worked) {\n                if (this._currentObject.parent && !this._currentObject.parent.parent) {\n                  this._changeRoot();\n                }\n              }\n              if (this._currentObject.parent) {\n                this._currentObject = this._currentObject.parent;\n              } else {\n                breakFlag = true;\n              }\n              if (breakFlag)\n                break;\n            }\n          }\n          return;\n        }\n      },\n      {\n        key: \"_changeRoot\",\n        value: function _changeRoot() {\n          if (this._currentGeo != null && this._currentGeo.name) {\n            this._makeOutputGeometry();\n          }\n          this._currentGeo = {};\n          if (this._currentAnime != null && this._currentAnime.name) {\n            if (this._currentAnimeFrames) {\n              this._currentAnime.AnimeFrames.push(this._currentAnimeFrames);\n              this._currentAnimeFrames = null;\n            }\n            this._makeOutputAnimation();\n          }\n          this._currentAnime = {};\n        }\n      },\n      {\n        key: \"_getParentName\",\n        value: function _getParentName(_obj) {\n          if (_obj.parent) {\n            if (_obj.parent.name) {\n              return _obj.parent.name;\n            } else {\n              return this._getParentName(_obj.parent);\n            }\n          } else {\n            return \"\";\n          }\n        }\n      },\n      {\n        key: \"_setFrame\",\n        value: function _setFrame() {\n          this._nowFrameName = this._currentObject.name.trim();\n          this._currentFrame = {};\n          this._currentFrame.name = this._nowFrameName;\n          this._currentFrame.children = [];\n          if (this._currentObject.parent && this._currentObject.parent.name) {\n            this._currentFrame.parentName = this._currentObject.parent.name;\n          }\n          this.frameHierarchie.push(this._nowFrameName);\n          this.HieStack[this._nowFrameName] = this._currentFrame;\n        }\n      },\n      {\n        key: \"_setFrameTransformMatrix\",\n        value: function _setFrameTransformMatrix() {\n          this._currentFrame.FrameTransformMatrix = new Matrix4();\n          var data = this._currentObject.data.split(\",\");\n          this._ParseMatrixData(this._currentFrame.FrameTransformMatrix, data);\n          this._makeBoneFrom_CurrentFrame();\n        }\n      },\n      {\n        key: \"_makeBoneFrom_CurrentFrame\",\n        value: function _makeBoneFrom_CurrentFrame() {\n          if (!this._currentFrame.FrameTransformMatrix) {\n            return;\n          }\n          var b = new Bone();\n          b.name = this._currentFrame.name;\n          b.applyMatrix4(this._currentFrame.FrameTransformMatrix);\n          b.matrixWorld = b.matrix;\n          b.FrameTransformMatrix = this._currentFrame.FrameTransformMatrix;\n          this._currentFrame.putBone = b;\n          if (this._currentFrame.parentName) {\n            for (let frame in this.HieStack) {\n              if (this.HieStack[frame].name === this._currentFrame.parentName) {\n                this.HieStack[frame].putBone.add(this._currentFrame.putBone);\n              }\n            }\n          }\n        }\n      },\n      {\n        key: \"_readVertexDatas\",\n        value: function _readVertexDatas() {\n          var endRead = 0;\n          var mode = 0;\n          var mode_local = 0;\n          var maxLength = 0;\n          while (true) {\n            var changeMode = false;\n            if (mode_local === 0) {\n              var refO = this._readInt1(endRead);\n              endRead = refO.endRead;\n              mode_local = 1;\n              maxLength = this._currentObject.data.indexOf(\";;\", endRead) + 1;\n              if (maxLength <= 0) {\n                maxLength = this._currentObject.data.length;\n              }\n            } else {\n              var find = 0;\n              switch (mode) {\n                case 0:\n                  find = this._currentObject.data.indexOf(\",\", endRead) + 1;\n                  break;\n                case 1:\n                  find = this._currentObject.data.indexOf(\";,\", endRead) + 1;\n                  break;\n              }\n              if (find === 0 || find > maxLength) {\n                find = maxLength;\n                mode_local = 0;\n                changeMode = true;\n              }\n              switch (this._currentObject.type) {\n                case \"Mesh\":\n                  switch (mode) {\n                    case 0:\n                      this._readVertex1(this._currentObject.data.substr(endRead, find - endRead));\n                      break;\n                    case 1:\n                      this._readFace1(this._currentObject.data.substr(endRead, find - endRead));\n                      break;\n                  }\n                  break;\n                case \"MeshNormals\":\n                  switch (mode) {\n                    case 0:\n                      this._readNormalVector1(this._currentObject.data.substr(endRead, find - endRead));\n                      break;\n                  }\n                  break;\n              }\n              endRead = find + 1;\n              if (changeMode) {\n                mode++;\n              }\n            }\n            if (endRead >= this._currentObject.data.length) {\n              break;\n            }\n          }\n        }\n      },\n      {\n        key: \"_readInt1\",\n        value: function _readInt1(start) {\n          var find = this._currentObject.data.indexOf(\";\", start);\n          return {\n            refI: parseInt(this._currentObject.data.substr(start, find - start)),\n            endRead: find + 1\n          };\n        }\n      },\n      {\n        key: \"_readVertex1\",\n        value: function _readVertex1(line) {\n          var data = this._readLine(line.trim()).substr(0, line.length - 2).split(\";\");\n          this._currentGeo.GeometryData.vertices.push(parseFloat(data[0]), parseFloat(data[1]), parseFloat(data[2]));\n          this._currentGeo.GeometryData.skinIndices.push(0, 0, 0, 0);\n          this._currentGeo.GeometryData.skinWeights.push(1, 0, 0, 0);\n          this._currentGeo.VertexSetedBoneCount.push(0);\n        }\n      },\n      {\n        key: \"_readFace1\",\n        value: function _readFace1(line) {\n          var data = this._readLine(line.trim()).substr(2, line.length - 4).split(\",\");\n          this._currentGeo.GeometryData.indices.push(\n            parseInt(data[0], 10),\n            parseInt(data[1], 10),\n            parseInt(data[2], 10)\n          );\n        }\n      },\n      {\n        key: \"_readNormalVector1\",\n        value: function _readNormalVector1(line) {\n          var data = this._readLine(line.trim()).substr(0, line.length - 2).split(\";\");\n          this._currentGeo.GeometryData.normals.push(parseFloat(data[0]), parseFloat(data[1]), parseFloat(data[2]));\n        }\n      },\n      {\n        key: \"_buildGeometry\",\n        value: function _buildGeometry() {\n          var bufferGeometry = new BufferGeometry();\n          var position = [];\n          var normals = [];\n          var uvs = [];\n          var skinIndices = [];\n          var skinWeights = [];\n          var data = this._currentGeo.GeometryData;\n          for (let i2 = 0, l = data.indices.length; i2 < l; i2++) {\n            var stride2 = data.indices[i2] * 2;\n            var stride3 = data.indices[i2] * 3;\n            var stride4 = data.indices[i2] * 4;\n            position.push(data.vertices[stride3], data.vertices[stride3 + 1], data.vertices[stride3 + 2]);\n            normals.push(data.normals[stride3], data.normals[stride3 + 1], data.normals[stride3 + 2]);\n            skinIndices.push(\n              data.skinIndices[stride4],\n              data.skinIndices[stride4 + 1],\n              data.skinIndices[stride4 + 2],\n              data.skinIndices[stride4 + 3]\n            );\n            skinWeights.push(\n              data.skinWeights[stride4],\n              data.skinWeights[stride4 + 1],\n              data.skinWeights[stride4 + 2],\n              data.skinWeights[stride4 + 3]\n            );\n            uvs.push(data.uvs[stride2], data.uvs[stride2 + 1]);\n          }\n          bufferGeometry.setAttribute(\"position\", new Float32BufferAttribute(position, 3));\n          bufferGeometry.setAttribute(\"normal\", new Float32BufferAttribute(normals, 3));\n          bufferGeometry.setAttribute(\"uv\", new Float32BufferAttribute(uvs, 2));\n          bufferGeometry.setAttribute(\"skinIndex\", new Uint16BufferAttribute(skinIndices, 4));\n          bufferGeometry.setAttribute(\"skinWeight\", new Float32BufferAttribute(skinWeights, 4));\n          this._computeGroups(bufferGeometry, data.materialIndices);\n          return bufferGeometry;\n        }\n      },\n      {\n        key: \"_computeGroups\",\n        value: function _computeGroups(bufferGeometry, materialIndices) {\n          var group;\n          var groups = [];\n          var materialIndex = void 0;\n          for (let i2 = 0; i2 < materialIndices.length; i2++) {\n            var currentMaterialIndex = materialIndices[i2];\n            if (currentMaterialIndex !== materialIndex) {\n              materialIndex = currentMaterialIndex;\n              if (group !== void 0) {\n                group.count = i2 * 3 - group.start;\n                groups.push(group);\n              }\n              group = {\n                start: i2 * 3,\n                materialIndex\n              };\n            }\n          }\n          if (group !== void 0) {\n            group.count = i * 3 - group.start;\n            groups.push(group);\n          }\n          bufferGeometry.groups = groups;\n        }\n      },\n      {\n        key: \"_setMeshTextureCoords\",\n        value: function _setMeshTextureCoords() {\n          var endRead = 0;\n          var mode = 0;\n          var mode_local = 0;\n          while (true) {\n            switch (mode) {\n              case 0:\n                if (mode_local === 0) {\n                  var refO = this._readInt1(0);\n                  endRead = refO.endRead;\n                  mode_local = 1;\n                } else {\n                  var find = this._currentObject.data.indexOf(\",\", endRead) + 1;\n                  if (find === 0) {\n                    find = this._currentObject.data.length;\n                    mode = 2;\n                    mode_local = 0;\n                  }\n                  var line = this._currentObject.data.substr(endRead, find - endRead);\n                  var data = this._readLine(line.trim()).split(\";\");\n                  if (this.IsUvYReverse) {\n                    this._currentGeo.GeometryData.uvs.push(parseFloat(data[0]), 1 - parseFloat(data[1]));\n                  } else {\n                    this._currentGeo.GeometryData.uvs.push(parseFloat(data[0]), parseFloat(data[1]));\n                  }\n                  endRead = find + 1;\n                }\n                break;\n            }\n            if (endRead >= this._currentObject.data.length) {\n              break;\n            }\n          }\n        }\n      },\n      {\n        key: \"_setMeshMaterialList\",\n        value: function _setMeshMaterialList() {\n          var endRead = 0;\n          var mode = 0;\n          var mode_local = 0;\n          while (true) {\n            if (mode_local < 2) {\n              var refO = this._readInt1(endRead);\n              endRead = refO.endRead;\n              mode_local++;\n            } else {\n              var find = this._currentObject.data.indexOf(\";\", endRead);\n              if (find === -1) {\n                find = this._currentObject.data.length;\n                mode = 3;\n                mode_local = 0;\n              }\n              var line = this._currentObject.data.substr(endRead, find - endRead);\n              var data = this._readLine(line.trim()).split(\",\");\n              for (let i2 = 0; i2 < data.length; i2++) {\n                this._currentGeo.GeometryData.materialIndices[i2] = parseInt(data[i2]);\n              }\n              endRead = this._currentObject.data.length;\n            }\n            if (endRead >= this._currentObject.data.length || mode >= 3) {\n              break;\n            }\n          }\n        }\n      },\n      {\n        key: \"_setMaterial\",\n        value: function _setMaterial() {\n          var _nowMat = new MeshPhongMaterial({\n            color: Math.random() * 16777215\n          });\n          _nowMat.side = FrontSide;\n          _nowMat.name = this._currentObject.name;\n          var endRead = 0;\n          var find = this._currentObject.data.indexOf(\";;\", endRead);\n          var line = this._currentObject.data.substr(endRead, find - endRead);\n          var data = this._readLine(line.trim()).split(\";\");\n          _nowMat.color.r = parseFloat(data[0]);\n          _nowMat.color.g = parseFloat(data[1]);\n          _nowMat.color.b = parseFloat(data[2]);\n          endRead = find + 2;\n          find = this._currentObject.data.indexOf(\";\", endRead);\n          line = this._currentObject.data.substr(endRead, find - endRead);\n          _nowMat.shininess = parseFloat(this._readLine(line));\n          endRead = find + 1;\n          find = this._currentObject.data.indexOf(\";;\", endRead);\n          line = this._currentObject.data.substr(endRead, find - endRead);\n          var data2 = this._readLine(line.trim()).split(\";\");\n          _nowMat.specular.r = parseFloat(data2[0]);\n          _nowMat.specular.g = parseFloat(data2[1]);\n          _nowMat.specular.b = parseFloat(data2[2]);\n          endRead = find + 2;\n          find = this._currentObject.data.indexOf(\";;\", endRead);\n          if (find === -1) {\n            find = this._currentObject.data.length;\n          }\n          line = this._currentObject.data.substr(endRead, find - endRead);\n          var data3 = this._readLine(line.trim()).split(\";\");\n          _nowMat.emissive.r = parseFloat(data3[0]);\n          _nowMat.emissive.g = parseFloat(data3[1]);\n          _nowMat.emissive.b = parseFloat(data3[2]);\n          var localObject = null;\n          while (true) {\n            if (this._currentObject.children.length > 0) {\n              localObject = this._currentObject.children.shift();\n              if (this.debug) {\n                console.log(\"processing \" + localObject.name);\n              }\n              var fileName = localObject.data.substr(1, localObject.data.length - 2);\n              switch (localObject.type) {\n                case \"TextureFilename\":\n                  _nowMat.map = this.texloader.load(fileName);\n                  break;\n                case \"BumpMapFilename\":\n                  _nowMat.bumpMap = this.texloader.load(fileName);\n                  _nowMat.bumpScale = 0.05;\n                  break;\n                case \"NormalMapFilename\":\n                  _nowMat.normalMap = this.texloader.load(fileName);\n                  _nowMat.normalScale = new Vector2(2, 2);\n                  break;\n                case \"EmissiveMapFilename\":\n                  _nowMat.emissiveMap = this.texloader.load(fileName);\n                  break;\n                case \"LightMapFilename\":\n                  _nowMat.lightMap = this.texloader.load(fileName);\n                  break;\n              }\n            } else {\n              break;\n            }\n          }\n          this._currentGeo.Materials.push(_nowMat);\n        }\n      },\n      {\n        key: \"_setSkinWeights\",\n        value: function _setSkinWeights() {\n          var boneInf = new XboneInf();\n          var endRead = 0;\n          var find = this._currentObject.data.indexOf(\";\", endRead);\n          var line = this._currentObject.data.substr(endRead, find - endRead);\n          endRead = find + 1;\n          boneInf.boneName = line.substr(1, line.length - 2);\n          boneInf.BoneIndex = this._currentGeo.BoneInfs.length;\n          find = this._currentObject.data.indexOf(\";\", endRead);\n          endRead = find + 1;\n          find = this._currentObject.data.indexOf(\";\", endRead);\n          line = this._currentObject.data.substr(endRead, find - endRead);\n          var data = this._readLine(line.trim()).split(\",\");\n          for (let i2 = 0; i2 < data.length; i2++) {\n            boneInf.Indeces.push(parseInt(data[i2]));\n          }\n          endRead = find + 1;\n          find = this._currentObject.data.indexOf(\";\", endRead);\n          line = this._currentObject.data.substr(endRead, find - endRead);\n          var data2 = this._readLine(line.trim()).split(\",\");\n          for (let _i = 0; _i < data2.length; _i++) {\n            boneInf.Weights.push(parseFloat(data2[_i]));\n          }\n          endRead = find + 1;\n          find = this._currentObject.data.indexOf(\";\", endRead);\n          if (find <= 0) {\n            find = this._currentObject.data.length;\n          }\n          line = this._currentObject.data.substr(endRead, find - endRead);\n          var data3 = this._readLine(line.trim()).split(\",\");\n          boneInf.OffsetMatrix = new Matrix4();\n          this._ParseMatrixData(boneInf.OffsetMatrix, data3);\n          this._currentGeo.BoneInfs.push(boneInf);\n        }\n      },\n      {\n        key: \"_makePutBoneList\",\n        value: function _makePutBoneList(_RootName, _bones) {\n          var putting = false;\n          for (let frame in this.HieStack) {\n            if (this.HieStack[frame].name === _RootName || putting) {\n              putting = true;\n              var b = new Bone();\n              b.name = this.HieStack[frame].name;\n              b.applyMatrix4(this.HieStack[frame].FrameTransformMatrix);\n              b.matrixWorld = b.matrix;\n              b.FrameTransformMatrix = this.HieStack[frame].FrameTransformMatrix;\n              b.pos = new Vector3().setFromMatrixPosition(b.FrameTransformMatrix).toArray();\n              b.rotq = new Quaternion().setFromRotationMatrix(b.FrameTransformMatrix).toArray();\n              b.scl = new Vector3().setFromMatrixScale(b.FrameTransformMatrix).toArray();\n              if (this.HieStack[frame].parentName && this.HieStack[frame].parentName.length > 0) {\n                for (let i2 = 0; i2 < _bones.length; i2++) {\n                  if (this.HieStack[frame].parentName === _bones[i2].name) {\n                    _bones[i2].add(b);\n                    b.parent = i2;\n                    break;\n                  }\n                }\n              }\n              _bones.push(b);\n            }\n          }\n        }\n      },\n      {\n        key: \"_makeOutputGeometry\",\n        value: function _makeOutputGeometry() {\n          var mesh = null;\n          if (this._currentGeo.BoneInfs.length > 0) {\n            var putBones = [];\n            this._makePutBoneList(this._currentGeo.baseFrame.parentName, putBones);\n            for (let bi = 0; bi < this._currentGeo.BoneInfs.length; bi++) {\n              var boneIndex = 0;\n              for (let bb = 0; bb < putBones.length; bb++) {\n                if (putBones[bb].name === this._currentGeo.BoneInfs[bi].boneName) {\n                  boneIndex = bb;\n                  putBones[bb].OffsetMatrix = new Matrix4();\n                  putBones[bb].OffsetMatrix.copy(this._currentGeo.BoneInfs[bi].OffsetMatrix);\n                  break;\n                }\n              }\n              for (let vi = 0; vi < this._currentGeo.BoneInfs[bi].Indeces.length; vi++) {\n                var nowVertexID = this._currentGeo.BoneInfs[bi].Indeces[vi];\n                var nowVal = this._currentGeo.BoneInfs[bi].Weights[vi];\n                var stride = nowVertexID * 4;\n                switch (this._currentGeo.VertexSetedBoneCount[nowVertexID]) {\n                  case 0:\n                    this._currentGeo.GeometryData.skinIndices[stride] = boneIndex;\n                    this._currentGeo.GeometryData.skinWeights[stride] = nowVal;\n                    break;\n                  case 1:\n                    this._currentGeo.GeometryData.skinIndices[stride + 1] = boneIndex;\n                    this._currentGeo.GeometryData.skinWeights[stride + 1] = nowVal;\n                    break;\n                  case 2:\n                    this._currentGeo.GeometryData.skinIndices[stride + 2] = boneIndex;\n                    this._currentGeo.GeometryData.skinWeights[stride + 2] = nowVal;\n                    break;\n                  case 3:\n                    this._currentGeo.GeometryData.skinIndices[stride + 3] = boneIndex;\n                    this._currentGeo.GeometryData.skinWeights[stride + 3] = nowVal;\n                    break;\n                }\n                this._currentGeo.VertexSetedBoneCount[nowVertexID]++;\n                if (this._currentGeo.VertexSetedBoneCount[nowVertexID] > 4) {\n                  console.log(\"warn! over 4 bone weight! :\" + nowVertexID);\n                }\n              }\n            }\n            for (let sk = 0; sk < this._currentGeo.Materials.length; sk++) {\n              this._currentGeo.Materials[sk].skinning = true;\n            }\n            var offsetList = [];\n            for (let _bi = 0; _bi < putBones.length; _bi++) {\n              if (putBones[_bi].OffsetMatrix) {\n                offsetList.push(putBones[_bi].OffsetMatrix);\n              } else {\n                offsetList.push(new Matrix4());\n              }\n            }\n            var bufferGeometry = this._buildGeometry();\n            mesh = new SkinnedMesh(\n              bufferGeometry,\n              this._currentGeo.Materials.length === 1 ? this._currentGeo.Materials[0] : this._currentGeo.Materials\n            );\n            this._initSkeleton(mesh, putBones, offsetList);\n          } else {\n            var _bufferGeometry = this._buildGeometry();\n            mesh = new Mesh(\n              _bufferGeometry,\n              this._currentGeo.Materials.length === 1 ? this._currentGeo.Materials[0] : this._currentGeo.Materials\n            );\n          }\n          mesh.name = this._currentGeo.name;\n          var worldBaseMx = new Matrix4();\n          var currentMxFrame = this._currentGeo.baseFrame.putBone;\n          if (currentMxFrame && currentMxFrame.parent) {\n            while (true) {\n              currentMxFrame = currentMxFrame.parent;\n              if (currentMxFrame) {\n                worldBaseMx.multiply(currentMxFrame.FrameTransformMatrix);\n              } else {\n                break;\n              }\n            }\n            mesh.applyMatrix4(worldBaseMx);\n          }\n          this.Meshes.push(mesh);\n        }\n      },\n      {\n        key: \"_initSkeleton\",\n        value: function _initSkeleton(mesh, boneList, boneInverses) {\n          var bones = [], bone, gbone;\n          var i2, il;\n          for (i2 = 0, il = boneList.length; i2 < il; i2++) {\n            gbone = boneList[i2];\n            bone = new Bone();\n            bones.push(bone);\n            bone.name = gbone.name;\n            bone.position.fromArray(gbone.pos);\n            bone.quaternion.fromArray(gbone.rotq);\n            if (gbone.scl !== void 0)\n              bone.scale.fromArray(gbone.scl);\n          }\n          for (i2 = 0, il = boneList.length; i2 < il; i2++) {\n            gbone = boneList[i2];\n            if (gbone.parent !== -1 && gbone.parent !== null && bones[gbone.parent] !== void 0) {\n              bones[gbone.parent].add(bones[i2]);\n            } else {\n              mesh.add(bones[i2]);\n            }\n          }\n          mesh.updateMatrixWorld(true);\n          var skeleton = new Skeleton(bones, boneInverses);\n          mesh.bind(skeleton, mesh.matrixWorld);\n        }\n      },\n      {\n        key: \"_readAnimationKey\",\n        value: function _readAnimationKey() {\n          var endRead = 0;\n          var find = this._currentObject.data.indexOf(\";\", endRead);\n          var line = this._currentObject.data.substr(endRead, find - endRead);\n          endRead = find + 1;\n          var nowKeyType = parseInt(this._readLine(line));\n          find = this._currentObject.data.indexOf(\";\", endRead);\n          endRead = find + 1;\n          line = this._currentObject.data.substr(endRead);\n          var data = this._readLine(line.trim()).split(\";;,\");\n          for (let i2 = 0; i2 < data.length; i2++) {\n            var data2 = data[i2].split(\";\");\n            var keyInfo = new XKeyFrameInfo();\n            keyInfo.type = nowKeyType;\n            keyInfo.Frame = parseInt(data2[0]);\n            keyInfo.index = this._currentAnimeFrames.keyFrames.length;\n            keyInfo.time = keyInfo.Frame;\n            if (nowKeyType != 4) {\n              var frameFound = false;\n              for (let mm = 0; mm < this._currentAnimeFrames.keyFrames.length; mm++) {\n                if (this._currentAnimeFrames.keyFrames[mm].Frame === keyInfo.Frame) {\n                  keyInfo = this._currentAnimeFrames.keyFrames[mm];\n                  frameFound = true;\n                  break;\n                }\n              }\n              var frameValue = data2[2].split(\",\");\n              switch (nowKeyType) {\n                case 0:\n                  keyInfo.rot = new Quaternion(\n                    parseFloat(frameValue[1]),\n                    parseFloat(frameValue[2]),\n                    parseFloat(frameValue[3]),\n                    parseFloat(frameValue[0]) * -1\n                  );\n                  break;\n                case 1:\n                  keyInfo.scl = new Vector3(\n                    parseFloat(frameValue[0]),\n                    parseFloat(frameValue[1]),\n                    parseFloat(frameValue[2])\n                  );\n                  break;\n                case 2:\n                  keyInfo.pos = new Vector3(\n                    parseFloat(frameValue[0]),\n                    parseFloat(frameValue[1]),\n                    parseFloat(frameValue[2])\n                  );\n                  break;\n              }\n              if (!frameFound) {\n                this._currentAnimeFrames.keyFrames.push(keyInfo);\n              }\n            } else {\n              keyInfo.matrix = new Matrix4();\n              this._ParseMatrixData(keyInfo.matrix, data2[2].split(\",\"));\n              this._currentAnimeFrames.keyFrames.push(keyInfo);\n            }\n          }\n        }\n      },\n      {\n        key: \"_makeOutputAnimation\",\n        value: function _makeOutputAnimation() {\n          var animationObj = new XAnimationObj(this.options);\n          animationObj.fps = this.animTicksPerSecond;\n          animationObj.name = this._currentAnime.name;\n          animationObj.make(this._currentAnime.AnimeFrames);\n          this.animations.push(animationObj);\n        }\n      },\n      {\n        key: \"assignAnimation\",\n        value: function assignAnimation(_model, _animation) {\n          var model = _model;\n          var animation = _animation;\n          if (!model) {\n            model = this.Meshes[0];\n          }\n          if (!animation) {\n            animation = this.animations[0];\n          }\n          if (!model || !animation) {\n            return null;\n          }\n          var put = {};\n          put.fps = animation.fps;\n          put.name = animation.name;\n          put.length = animation.length;\n          put.hierarchy = [];\n          for (let b = 0; b < model.skeleton.bones.length; b++) {\n            var findAnimation = false;\n            for (let i2 = 0; i2 < animation.hierarchy.length; i2++) {\n              if (model.skeleton.bones[b].name === animation.hierarchy[i2].name) {\n                findAnimation = true;\n                var c_key = animation.hierarchy[i2].copy();\n                c_key.parent = -1;\n                if (model.skeleton.bones[b].parent && model.skeleton.bones[b].parent.type === \"Bone\") {\n                  for (let bb = 0; bb < put.hierarchy.length; bb++) {\n                    if (put.hierarchy[bb].name === model.skeleton.bones[b].parent.name) {\n                      c_key.parent = bb;\n                      c_key.parentName = model.skeleton.bones[b].parent.name;\n                    }\n                  }\n                }\n                put.hierarchy.push(c_key);\n                break;\n              }\n            }\n            if (!findAnimation) {\n              var _c_key = animation.hierarchy[0].copy();\n              _c_key.name = model.skeleton.bones[b].name;\n              _c_key.parent = -1;\n              for (let k = 0; k < _c_key.keys.length; k++) {\n                if (_c_key.keys[k].pos) {\n                  _c_key.keys[k].pos.set(0, 0, 0);\n                }\n                if (_c_key.keys[k].scl) {\n                  _c_key.keys[k].scl.set(1, 1, 1);\n                }\n                if (_c_key.keys[k].rot) {\n                  _c_key.keys[k].rot.set(0, 0, 0, 1);\n                }\n              }\n              put.hierarchy.push(_c_key);\n            }\n          }\n          if (!model.geometry.animations) {\n            model.geometry.animations = [];\n          }\n          model.geometry.animations.push(AnimationClip.parseAnimation(put, model.skeleton.bones));\n          if (!model.animationMixer) {\n            model.animationMixer = new AnimationMixer(model);\n          }\n          return put;\n        }\n      },\n      {\n        key: \"_ParseMatrixData\",\n        value: function _ParseMatrixData(targetMatrix, data) {\n          targetMatrix.set(\n            parseFloat(data[0]),\n            parseFloat(data[4]),\n            parseFloat(data[8]),\n            parseFloat(data[12]),\n            parseFloat(data[1]),\n            parseFloat(data[5]),\n            parseFloat(data[9]),\n            parseFloat(data[13]),\n            parseFloat(data[2]),\n            parseFloat(data[6]),\n            parseFloat(data[10]),\n            parseFloat(data[14]),\n            parseFloat(data[3]),\n            parseFloat(data[7]),\n            parseFloat(data[11]),\n            parseFloat(data[15])\n          );\n        }\n      }\n    ]);\n    return XLoader3;\n  }();\n  return XLoader2;\n}();\nexport {\n  XLoader\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}