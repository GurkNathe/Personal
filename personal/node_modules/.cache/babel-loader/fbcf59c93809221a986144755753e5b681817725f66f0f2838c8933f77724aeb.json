{"ast":null,"code":"import _createClass from \"/home/krug/Coding/JavaScript/Websites/Personal/personal/node_modules/.pnpm/@babel+runtime@7.22.3/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _classCallCheck from \"/home/krug/Coding/JavaScript/Websites/Personal/personal/node_modules/.pnpm/@babel+runtime@7.22.3/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport { Vector3, Color, Vector2, Vector4, Box3, Matrix4, Frustum, Matrix3, DoubleSide } from \"three\";\nvar RenderableObject = /*#__PURE__*/_createClass(function RenderableObject() {\n  _classCallCheck(this, RenderableObject);\n  this.id = 0;\n  this.object = null;\n  this.z = 0;\n  this.renderOrder = 0;\n});\nvar RenderableFace = /*#__PURE__*/_createClass(function RenderableFace() {\n  _classCallCheck(this, RenderableFace);\n  this.id = 0;\n  this.v1 = new RenderableVertex();\n  this.v2 = new RenderableVertex();\n  this.v3 = new RenderableVertex();\n  this.normalModel = new Vector3();\n  this.vertexNormalsModel = [new Vector3(), new Vector3(), new Vector3()];\n  this.vertexNormalsLength = 0;\n  this.color = new Color();\n  this.material = null;\n  this.uvs = [new Vector2(), new Vector2(), new Vector2()];\n  this.z = 0;\n  this.renderOrder = 0;\n});\nvar RenderableVertex = /*#__PURE__*/function () {\n  function RenderableVertex() {\n    _classCallCheck(this, RenderableVertex);\n    this.position = new Vector3();\n    this.positionWorld = new Vector3();\n    this.positionScreen = new Vector4();\n    this.visible = true;\n  }\n  _createClass(RenderableVertex, [{\n    key: \"copy\",\n    value: function copy(vertex) {\n      this.positionWorld.copy(vertex.positionWorld);\n      this.positionScreen.copy(vertex.positionScreen);\n    }\n  }]);\n  return RenderableVertex;\n}();\nvar RenderableLine = /*#__PURE__*/_createClass(function RenderableLine() {\n  _classCallCheck(this, RenderableLine);\n  this.id = 0;\n  this.v1 = new RenderableVertex();\n  this.v2 = new RenderableVertex();\n  this.vertexColors = [new Color(), new Color()];\n  this.material = null;\n  this.z = 0;\n  this.renderOrder = 0;\n});\nvar RenderableSprite = /*#__PURE__*/_createClass(function RenderableSprite() {\n  _classCallCheck(this, RenderableSprite);\n  this.id = 0;\n  this.object = null;\n  this.x = 0;\n  this.y = 0;\n  this.z = 0;\n  this.rotation = 0;\n  this.scale = new Vector2();\n  this.material = null;\n  this.renderOrder = 0;\n});\nvar Projector = /*#__PURE__*/_createClass(function Projector() {\n  _classCallCheck(this, Projector);\n  var _object,\n    _objectCount,\n    _objectPoolLength = 0,\n    _vertex,\n    _vertexCount,\n    _vertexPoolLength = 0,\n    _face,\n    _faceCount,\n    _facePoolLength = 0,\n    _line,\n    _lineCount,\n    _linePoolLength = 0,\n    _sprite,\n    _spriteCount,\n    _spritePoolLength = 0,\n    _modelMatrix;\n  var _renderData = {\n      objects: [],\n      lights: [],\n      elements: []\n    },\n    _vector3 = new Vector3(),\n    _vector4 = new Vector4(),\n    _clipBox = new Box3(new Vector3(-1, -1, -1), new Vector3(1, 1, 1)),\n    _boundingBox = new Box3(),\n    _points3 = new Array(3),\n    _viewMatrix = new Matrix4(),\n    _viewProjectionMatrix = new Matrix4(),\n    _modelViewProjectionMatrix = new Matrix4(),\n    _frustum = new Frustum(),\n    _objectPool = [],\n    _vertexPool = [],\n    _facePool = [],\n    _linePool = [],\n    _spritePool = [];\n  function RenderList() {\n    var normals = [];\n    var colors = [];\n    var uvs = [];\n    var object = null;\n    var normalMatrix = new Matrix3();\n    function setObject(value) {\n      object = value;\n      normalMatrix.getNormalMatrix(object.matrixWorld);\n      normals.length = 0;\n      colors.length = 0;\n      uvs.length = 0;\n    }\n    function projectVertex(vertex) {\n      var position = vertex.position;\n      var positionWorld = vertex.positionWorld;\n      var positionScreen = vertex.positionScreen;\n      positionWorld.copy(position).applyMatrix4(_modelMatrix);\n      positionScreen.copy(positionWorld).applyMatrix4(_viewProjectionMatrix);\n      var invW = 1 / positionScreen.w;\n      positionScreen.x *= invW;\n      positionScreen.y *= invW;\n      positionScreen.z *= invW;\n      vertex.visible = positionScreen.x >= -1 && positionScreen.x <= 1 && positionScreen.y >= -1 && positionScreen.y <= 1 && positionScreen.z >= -1 && positionScreen.z <= 1;\n    }\n    function pushVertex(x, y, z) {\n      _vertex = getNextVertexInPool();\n      _vertex.position.set(x, y, z);\n      projectVertex(_vertex);\n    }\n    function pushNormal(x, y, z) {\n      normals.push(x, y, z);\n    }\n    function pushColor(r, g, b) {\n      colors.push(r, g, b);\n    }\n    function pushUv(x, y) {\n      uvs.push(x, y);\n    }\n    function checkTriangleVisibility(v1, v2, v3) {\n      if (v1.visible === true || v2.visible === true || v3.visible === true) return true;\n      _points3[0] = v1.positionScreen;\n      _points3[1] = v2.positionScreen;\n      _points3[2] = v3.positionScreen;\n      return _clipBox.intersectsBox(_boundingBox.setFromPoints(_points3));\n    }\n    function checkBackfaceCulling(v1, v2, v3) {\n      return (v3.positionScreen.x - v1.positionScreen.x) * (v2.positionScreen.y - v1.positionScreen.y) - (v3.positionScreen.y - v1.positionScreen.y) * (v2.positionScreen.x - v1.positionScreen.x) < 0;\n    }\n    function pushLine(a, b) {\n      var v1 = _vertexPool[a];\n      var v2 = _vertexPool[b];\n      v1.positionScreen.copy(v1.position).applyMatrix4(_modelViewProjectionMatrix);\n      v2.positionScreen.copy(v2.position).applyMatrix4(_modelViewProjectionMatrix);\n      if (clipLine(v1.positionScreen, v2.positionScreen) === true) {\n        v1.positionScreen.multiplyScalar(1 / v1.positionScreen.w);\n        v2.positionScreen.multiplyScalar(1 / v2.positionScreen.w);\n        _line = getNextLineInPool();\n        _line.id = object.id;\n        _line.v1.copy(v1);\n        _line.v2.copy(v2);\n        _line.z = Math.max(v1.positionScreen.z, v2.positionScreen.z);\n        _line.renderOrder = object.renderOrder;\n        _line.material = object.material;\n        if (object.material.vertexColors) {\n          _line.vertexColors[0].fromArray(colors, a * 3);\n          _line.vertexColors[1].fromArray(colors, b * 3);\n        }\n        _renderData.elements.push(_line);\n      }\n    }\n    function pushTriangle(a, b, c, material) {\n      var v1 = _vertexPool[a];\n      var v2 = _vertexPool[b];\n      var v3 = _vertexPool[c];\n      if (checkTriangleVisibility(v1, v2, v3) === false) return;\n      if (material.side === DoubleSide || checkBackfaceCulling(v1, v2, v3) === true) {\n        _face = getNextFaceInPool();\n        _face.id = object.id;\n        _face.v1.copy(v1);\n        _face.v2.copy(v2);\n        _face.v3.copy(v3);\n        _face.z = (v1.positionScreen.z + v2.positionScreen.z + v3.positionScreen.z) / 3;\n        _face.renderOrder = object.renderOrder;\n        _vector3.subVectors(v3.position, v2.position);\n        _vector4.subVectors(v1.position, v2.position);\n        _vector3.cross(_vector4);\n        _face.normalModel.copy(_vector3);\n        _face.normalModel.applyMatrix3(normalMatrix).normalize();\n        for (var i = 0; i < 3; i++) {\n          var normal = _face.vertexNormalsModel[i];\n          normal.fromArray(normals, arguments[i] * 3);\n          normal.applyMatrix3(normalMatrix).normalize();\n          var uv = _face.uvs[i];\n          uv.fromArray(uvs, arguments[i] * 2);\n        }\n        _face.vertexNormalsLength = 3;\n        _face.material = material;\n        if (material.vertexColors) {\n          _face.color.fromArray(colors, a * 3);\n        }\n        _renderData.elements.push(_face);\n      }\n    }\n    return {\n      setObject: setObject,\n      projectVertex: projectVertex,\n      checkTriangleVisibility: checkTriangleVisibility,\n      checkBackfaceCulling: checkBackfaceCulling,\n      pushVertex: pushVertex,\n      pushNormal: pushNormal,\n      pushColor: pushColor,\n      pushUv: pushUv,\n      pushLine: pushLine,\n      pushTriangle: pushTriangle\n    };\n  }\n  var renderList = new RenderList();\n  function projectObject(object) {\n    if (object.visible === false) return;\n    if (object.isLight) {\n      _renderData.lights.push(object);\n    } else if (object.isMesh || object.isLine || object.isPoints) {\n      if (object.material.visible === false) return;\n      if (object.frustumCulled === true && _frustum.intersectsObject(object) === false) return;\n      addObject(object);\n    } else if (object.isSprite) {\n      if (object.material.visible === false) return;\n      if (object.frustumCulled === true && _frustum.intersectsSprite(object) === false) return;\n      addObject(object);\n    }\n    var children = object.children;\n    for (var i = 0, l = children.length; i < l; i++) {\n      projectObject(children[i]);\n    }\n  }\n  function addObject(object) {\n    _object = getNextObjectInPool();\n    _object.id = object.id;\n    _object.object = object;\n    _vector3.setFromMatrixPosition(object.matrixWorld);\n    _vector3.applyMatrix4(_viewProjectionMatrix);\n    _object.z = _vector3.z;\n    _object.renderOrder = object.renderOrder;\n    _renderData.objects.push(_object);\n  }\n  this.projectScene = function (scene, camera, sortObjects, sortElements) {\n    _faceCount = 0;\n    _lineCount = 0;\n    _spriteCount = 0;\n    _renderData.elements.length = 0;\n    if (scene.matrixWorldAutoUpdate === true) scene.updateMatrixWorld();\n    if (camera.parent === null && camera.matrixWorldAutoUpdate === true) camera.updateMatrixWorld();\n    _viewMatrix.copy(camera.matrixWorldInverse);\n    _viewProjectionMatrix.multiplyMatrices(camera.projectionMatrix, _viewMatrix);\n    _frustum.setFromProjectionMatrix(_viewProjectionMatrix);\n    _objectCount = 0;\n    _renderData.objects.length = 0;\n    _renderData.lights.length = 0;\n    projectObject(scene);\n    if (sortObjects === true) {\n      _renderData.objects.sort(painterSort);\n    }\n    var objects = _renderData.objects;\n    for (var o = 0, ol = objects.length; o < ol; o++) {\n      var object = objects[o].object;\n      var geometry = object.geometry;\n      renderList.setObject(object);\n      _modelMatrix = object.matrixWorld;\n      _vertexCount = 0;\n      if (object.isMesh) {\n        var material = object.material;\n        var isMultiMaterial = Array.isArray(material);\n        var attributes = geometry.attributes;\n        var groups = geometry.groups;\n        if (attributes.position === void 0) continue;\n        var positions = attributes.position.array;\n        for (var i = 0, l = positions.length; i < l; i += 3) {\n          var x = positions[i];\n          var y = positions[i + 1];\n          var z = positions[i + 2];\n          var morphTargets = geometry.morphAttributes.position;\n          if (morphTargets !== void 0) {\n            var morphTargetsRelative = geometry.morphTargetsRelative;\n            var morphInfluences = object.morphTargetInfluences;\n            for (var t = 0, tl = morphTargets.length; t < tl; t++) {\n              var influence = morphInfluences[t];\n              if (influence === 0) continue;\n              var target = morphTargets[t];\n              if (morphTargetsRelative) {\n                x += target.getX(i / 3) * influence;\n                y += target.getY(i / 3) * influence;\n                z += target.getZ(i / 3) * influence;\n              } else {\n                x += (target.getX(i / 3) - positions[i]) * influence;\n                y += (target.getY(i / 3) - positions[i + 1]) * influence;\n                z += (target.getZ(i / 3) - positions[i + 2]) * influence;\n              }\n            }\n          }\n          renderList.pushVertex(x, y, z);\n        }\n        if (attributes.normal !== void 0) {\n          var normals = attributes.normal.array;\n          for (var _i = 0, _l = normals.length; _i < _l; _i += 3) {\n            renderList.pushNormal(normals[_i], normals[_i + 1], normals[_i + 2]);\n          }\n        }\n        if (attributes.color !== void 0) {\n          var colors = attributes.color.array;\n          for (var _i2 = 0, _l2 = colors.length; _i2 < _l2; _i2 += 3) {\n            renderList.pushColor(colors[_i2], colors[_i2 + 1], colors[_i2 + 2]);\n          }\n        }\n        if (attributes.uv !== void 0) {\n          var uvs = attributes.uv.array;\n          for (var _i3 = 0, _l3 = uvs.length; _i3 < _l3; _i3 += 2) {\n            renderList.pushUv(uvs[_i3], uvs[_i3 + 1]);\n          }\n        }\n        if (geometry.index !== null) {\n          var indices = geometry.index.array;\n          if (groups.length > 0) {\n            for (var g = 0; g < groups.length; g++) {\n              var group = groups[g];\n              material = isMultiMaterial === true ? object.material[group.materialIndex] : object.material;\n              if (material === void 0) continue;\n              for (var _i4 = group.start, _l4 = group.start + group.count; _i4 < _l4; _i4 += 3) {\n                renderList.pushTriangle(indices[_i4], indices[_i4 + 1], indices[_i4 + 2], material);\n              }\n            }\n          } else {\n            for (var _i5 = 0, _l5 = indices.length; _i5 < _l5; _i5 += 3) {\n              renderList.pushTriangle(indices[_i5], indices[_i5 + 1], indices[_i5 + 2], material);\n            }\n          }\n        } else {\n          if (groups.length > 0) {\n            for (var _g = 0; _g < groups.length; _g++) {\n              var _group = groups[_g];\n              material = isMultiMaterial === true ? object.material[_group.materialIndex] : object.material;\n              if (material === void 0) continue;\n              for (var _i6 = _group.start, _l6 = _group.start + _group.count; _i6 < _l6; _i6 += 3) {\n                renderList.pushTriangle(_i6, _i6 + 1, _i6 + 2, material);\n              }\n            }\n          } else {\n            for (var _i7 = 0, _l7 = positions.length / 3; _i7 < _l7; _i7 += 3) {\n              renderList.pushTriangle(_i7, _i7 + 1, _i7 + 2, material);\n            }\n          }\n        }\n      } else if (object.isLine) {\n        _modelViewProjectionMatrix.multiplyMatrices(_viewProjectionMatrix, _modelMatrix);\n        var _attributes = geometry.attributes;\n        if (_attributes.position !== void 0) {\n          var _positions = _attributes.position.array;\n          for (var _i8 = 0, _l8 = _positions.length; _i8 < _l8; _i8 += 3) {\n            renderList.pushVertex(_positions[_i8], _positions[_i8 + 1], _positions[_i8 + 2]);\n          }\n          if (_attributes.color !== void 0) {\n            var _colors = _attributes.color.array;\n            for (var _i9 = 0, _l9 = _colors.length; _i9 < _l9; _i9 += 3) {\n              renderList.pushColor(_colors[_i9], _colors[_i9 + 1], _colors[_i9 + 2]);\n            }\n          }\n          if (geometry.index !== null) {\n            var _indices = geometry.index.array;\n            for (var _i10 = 0, _l10 = _indices.length; _i10 < _l10; _i10 += 2) {\n              renderList.pushLine(_indices[_i10], _indices[_i10 + 1]);\n            }\n          } else {\n            var step = object.isLineSegments ? 2 : 1;\n            for (var _i11 = 0, _l11 = _positions.length / 3 - 1; _i11 < _l11; _i11 += step) {\n              renderList.pushLine(_i11, _i11 + 1);\n            }\n          }\n        }\n      } else if (object.isPoints) {\n        _modelViewProjectionMatrix.multiplyMatrices(_viewProjectionMatrix, _modelMatrix);\n        var _attributes2 = geometry.attributes;\n        if (_attributes2.position !== void 0) {\n          var _positions2 = _attributes2.position.array;\n          for (var _i12 = 0, _l12 = _positions2.length; _i12 < _l12; _i12 += 3) {\n            _vector4.set(_positions2[_i12], _positions2[_i12 + 1], _positions2[_i12 + 2], 1);\n            _vector4.applyMatrix4(_modelViewProjectionMatrix);\n            pushPoint(_vector4, object, camera);\n          }\n        }\n      } else if (object.isSprite) {\n        object.modelViewMatrix.multiplyMatrices(camera.matrixWorldInverse, object.matrixWorld);\n        _vector4.set(_modelMatrix.elements[12], _modelMatrix.elements[13], _modelMatrix.elements[14], 1);\n        _vector4.applyMatrix4(_viewProjectionMatrix);\n        pushPoint(_vector4, object, camera);\n      }\n    }\n    if (sortElements === true) {\n      _renderData.elements.sort(painterSort);\n    }\n    return _renderData;\n  };\n  function pushPoint(_vector42, object, camera) {\n    var invW = 1 / _vector42.w;\n    _vector42.z *= invW;\n    if (_vector42.z >= -1 && _vector42.z <= 1) {\n      _sprite = getNextSpriteInPool();\n      _sprite.id = object.id;\n      _sprite.x = _vector42.x * invW;\n      _sprite.y = _vector42.y * invW;\n      _sprite.z = _vector42.z;\n      _sprite.renderOrder = object.renderOrder;\n      _sprite.object = object;\n      _sprite.rotation = object.rotation;\n      _sprite.scale.x = object.scale.x * Math.abs(_sprite.x - (_vector42.x + camera.projectionMatrix.elements[0]) / (_vector42.w + camera.projectionMatrix.elements[12]));\n      _sprite.scale.y = object.scale.y * Math.abs(_sprite.y - (_vector42.y + camera.projectionMatrix.elements[5]) / (_vector42.w + camera.projectionMatrix.elements[13]));\n      _sprite.material = object.material;\n      _renderData.elements.push(_sprite);\n    }\n  }\n  function getNextObjectInPool() {\n    if (_objectCount === _objectPoolLength) {\n      var object = new RenderableObject();\n      _objectPool.push(object);\n      _objectPoolLength++;\n      _objectCount++;\n      return object;\n    }\n    return _objectPool[_objectCount++];\n  }\n  function getNextVertexInPool() {\n    if (_vertexCount === _vertexPoolLength) {\n      var vertex = new RenderableVertex();\n      _vertexPool.push(vertex);\n      _vertexPoolLength++;\n      _vertexCount++;\n      return vertex;\n    }\n    return _vertexPool[_vertexCount++];\n  }\n  function getNextFaceInPool() {\n    if (_faceCount === _facePoolLength) {\n      var face = new RenderableFace();\n      _facePool.push(face);\n      _facePoolLength++;\n      _faceCount++;\n      return face;\n    }\n    return _facePool[_faceCount++];\n  }\n  function getNextLineInPool() {\n    if (_lineCount === _linePoolLength) {\n      var line = new RenderableLine();\n      _linePool.push(line);\n      _linePoolLength++;\n      _lineCount++;\n      return line;\n    }\n    return _linePool[_lineCount++];\n  }\n  function getNextSpriteInPool() {\n    if (_spriteCount === _spritePoolLength) {\n      var sprite = new RenderableSprite();\n      _spritePool.push(sprite);\n      _spritePoolLength++;\n      _spriteCount++;\n      return sprite;\n    }\n    return _spritePool[_spriteCount++];\n  }\n  function painterSort(a, b) {\n    if (a.renderOrder !== b.renderOrder) {\n      return a.renderOrder - b.renderOrder;\n    } else if (a.z !== b.z) {\n      return b.z - a.z;\n    } else if (a.id !== b.id) {\n      return a.id - b.id;\n    } else {\n      return 0;\n    }\n  }\n  function clipLine(s1, s2) {\n    var alpha1 = 0,\n      alpha2 = 1;\n    var bc1near = s1.z + s1.w,\n      bc2near = s2.z + s2.w,\n      bc1far = -s1.z + s1.w,\n      bc2far = -s2.z + s2.w;\n    if (bc1near >= 0 && bc2near >= 0 && bc1far >= 0 && bc2far >= 0) {\n      return true;\n    } else if (bc1near < 0 && bc2near < 0 || bc1far < 0 && bc2far < 0) {\n      return false;\n    } else {\n      if (bc1near < 0) {\n        alpha1 = Math.max(alpha1, bc1near / (bc1near - bc2near));\n      } else if (bc2near < 0) {\n        alpha2 = Math.min(alpha2, bc1near / (bc1near - bc2near));\n      }\n      if (bc1far < 0) {\n        alpha1 = Math.max(alpha1, bc1far / (bc1far - bc2far));\n      } else if (bc2far < 0) {\n        alpha2 = Math.min(alpha2, bc1far / (bc1far - bc2far));\n      }\n      if (alpha2 < alpha1) {\n        return false;\n      } else {\n        s1.lerp(s2, alpha1);\n        s2.lerp(s1, 1 - alpha2);\n        return true;\n      }\n    }\n  }\n});\nexport { Projector, RenderableFace, RenderableLine, RenderableObject, RenderableSprite, RenderableVertex };","map":{"version":3,"names":["Vector3","Color","Vector2","Vector4","Box3","Matrix4","Frustum","Matrix3","DoubleSide","RenderableObject","_createClass","_classCallCheck","id","object","z","renderOrder","RenderableFace","v1","RenderableVertex","v2","v3","normalModel","vertexNormalsModel","vertexNormalsLength","color","material","uvs","position","positionWorld","positionScreen","visible","key","value","copy","vertex","RenderableLine","vertexColors","RenderableSprite","x","y","rotation","scale","Projector","_object","_objectCount","_objectPoolLength","_vertex","_vertexCount","_vertexPoolLength","_face","_faceCount","_facePoolLength","_line","_lineCount","_linePoolLength","_sprite","_spriteCount","_spritePoolLength","_modelMatrix","_renderData","objects","lights","elements","_vector3","_vector4","_clipBox","_boundingBox","_points3","Array","_viewMatrix","_viewProjectionMatrix","_modelViewProjectionMatrix","_frustum","_objectPool","_vertexPool","_facePool","_linePool","_spritePool","RenderList","normals","colors","normalMatrix","setObject","getNormalMatrix","matrixWorld","length","projectVertex","applyMatrix4","invW","w","pushVertex","getNextVertexInPool","set","pushNormal","push","pushColor","r","g","b","pushUv","checkTriangleVisibility","intersectsBox","setFromPoints","checkBackfaceCulling","pushLine","a","clipLine","multiplyScalar","getNextLineInPool","Math","max","fromArray","pushTriangle","c","side","getNextFaceInPool","subVectors","cross","applyMatrix3","normalize","i","normal","arguments","uv","renderList","projectObject","isLight","isMesh","isLine","isPoints","frustumCulled","intersectsObject","addObject","isSprite","intersectsSprite","children","l","getNextObjectInPool","setFromMatrixPosition","projectScene","scene","camera","sortObjects","sortElements","matrixWorldAutoUpdate","updateMatrixWorld","parent","matrixWorldInverse","multiplyMatrices","projectionMatrix","setFromProjectionMatrix","sort","painterSort","o","ol","geometry","isMultiMaterial","isArray","attributes","groups","positions","array","morphTargets","morphAttributes","morphTargetsRelative","morphInfluences","morphTargetInfluences","t","tl","influence","target","getX","getY","getZ","index","indices","group","materialIndex","start","count","step","isLineSegments","pushPoint","modelViewMatrix","_vector42","getNextSpriteInPool","abs","face","line","sprite","s1","s2","alpha1","alpha2","bc1near","bc2near","bc1far","bc2far","min","lerp"],"sources":["/home/krug/Coding/JavaScript/Websites/Personal/personal/node_modules/.pnpm/three-stdlib@2.23.7_three@0.151.3/node_modules/three-stdlib/renderers/Projector.js"],"sourcesContent":["import { Vector3, Color, Vector2, Vector4, Box3, Matrix4, Frustum, Matrix3, DoubleSide } from \"three\";\nclass RenderableObject {\n  constructor() {\n    this.id = 0;\n    this.object = null;\n    this.z = 0;\n    this.renderOrder = 0;\n  }\n}\nclass RenderableFace {\n  constructor() {\n    this.id = 0;\n    this.v1 = new RenderableVertex();\n    this.v2 = new RenderableVertex();\n    this.v3 = new RenderableVertex();\n    this.normalModel = new Vector3();\n    this.vertexNormalsModel = [new Vector3(), new Vector3(), new Vector3()];\n    this.vertexNormalsLength = 0;\n    this.color = new Color();\n    this.material = null;\n    this.uvs = [new Vector2(), new Vector2(), new Vector2()];\n    this.z = 0;\n    this.renderOrder = 0;\n  }\n}\nclass RenderableVertex {\n  constructor() {\n    this.position = new Vector3();\n    this.positionWorld = new Vector3();\n    this.positionScreen = new Vector4();\n    this.visible = true;\n  }\n  copy(vertex) {\n    this.positionWorld.copy(vertex.positionWorld);\n    this.positionScreen.copy(vertex.positionScreen);\n  }\n}\nclass RenderableLine {\n  constructor() {\n    this.id = 0;\n    this.v1 = new RenderableVertex();\n    this.v2 = new RenderableVertex();\n    this.vertexColors = [new Color(), new Color()];\n    this.material = null;\n    this.z = 0;\n    this.renderOrder = 0;\n  }\n}\nclass RenderableSprite {\n  constructor() {\n    this.id = 0;\n    this.object = null;\n    this.x = 0;\n    this.y = 0;\n    this.z = 0;\n    this.rotation = 0;\n    this.scale = new Vector2();\n    this.material = null;\n    this.renderOrder = 0;\n  }\n}\nclass Projector {\n  constructor() {\n    let _object, _objectCount, _objectPoolLength = 0, _vertex, _vertexCount, _vertexPoolLength = 0, _face, _faceCount, _facePoolLength = 0, _line, _lineCount, _linePoolLength = 0, _sprite, _spriteCount, _spritePoolLength = 0, _modelMatrix;\n    const _renderData = { objects: [], lights: [], elements: [] }, _vector3 = new Vector3(), _vector4 = new Vector4(), _clipBox = new Box3(new Vector3(-1, -1, -1), new Vector3(1, 1, 1)), _boundingBox = new Box3(), _points3 = new Array(3), _viewMatrix = new Matrix4(), _viewProjectionMatrix = new Matrix4(), _modelViewProjectionMatrix = new Matrix4(), _frustum = new Frustum(), _objectPool = [], _vertexPool = [], _facePool = [], _linePool = [], _spritePool = [];\n    function RenderList() {\n      const normals = [];\n      const colors = [];\n      const uvs = [];\n      let object = null;\n      const normalMatrix = new Matrix3();\n      function setObject(value) {\n        object = value;\n        normalMatrix.getNormalMatrix(object.matrixWorld);\n        normals.length = 0;\n        colors.length = 0;\n        uvs.length = 0;\n      }\n      function projectVertex(vertex) {\n        const position = vertex.position;\n        const positionWorld = vertex.positionWorld;\n        const positionScreen = vertex.positionScreen;\n        positionWorld.copy(position).applyMatrix4(_modelMatrix);\n        positionScreen.copy(positionWorld).applyMatrix4(_viewProjectionMatrix);\n        const invW = 1 / positionScreen.w;\n        positionScreen.x *= invW;\n        positionScreen.y *= invW;\n        positionScreen.z *= invW;\n        vertex.visible = positionScreen.x >= -1 && positionScreen.x <= 1 && positionScreen.y >= -1 && positionScreen.y <= 1 && positionScreen.z >= -1 && positionScreen.z <= 1;\n      }\n      function pushVertex(x, y, z) {\n        _vertex = getNextVertexInPool();\n        _vertex.position.set(x, y, z);\n        projectVertex(_vertex);\n      }\n      function pushNormal(x, y, z) {\n        normals.push(x, y, z);\n      }\n      function pushColor(r, g, b) {\n        colors.push(r, g, b);\n      }\n      function pushUv(x, y) {\n        uvs.push(x, y);\n      }\n      function checkTriangleVisibility(v1, v2, v3) {\n        if (v1.visible === true || v2.visible === true || v3.visible === true)\n          return true;\n        _points3[0] = v1.positionScreen;\n        _points3[1] = v2.positionScreen;\n        _points3[2] = v3.positionScreen;\n        return _clipBox.intersectsBox(_boundingBox.setFromPoints(_points3));\n      }\n      function checkBackfaceCulling(v1, v2, v3) {\n        return (v3.positionScreen.x - v1.positionScreen.x) * (v2.positionScreen.y - v1.positionScreen.y) - (v3.positionScreen.y - v1.positionScreen.y) * (v2.positionScreen.x - v1.positionScreen.x) < 0;\n      }\n      function pushLine(a, b) {\n        const v1 = _vertexPool[a];\n        const v2 = _vertexPool[b];\n        v1.positionScreen.copy(v1.position).applyMatrix4(_modelViewProjectionMatrix);\n        v2.positionScreen.copy(v2.position).applyMatrix4(_modelViewProjectionMatrix);\n        if (clipLine(v1.positionScreen, v2.positionScreen) === true) {\n          v1.positionScreen.multiplyScalar(1 / v1.positionScreen.w);\n          v2.positionScreen.multiplyScalar(1 / v2.positionScreen.w);\n          _line = getNextLineInPool();\n          _line.id = object.id;\n          _line.v1.copy(v1);\n          _line.v2.copy(v2);\n          _line.z = Math.max(v1.positionScreen.z, v2.positionScreen.z);\n          _line.renderOrder = object.renderOrder;\n          _line.material = object.material;\n          if (object.material.vertexColors) {\n            _line.vertexColors[0].fromArray(colors, a * 3);\n            _line.vertexColors[1].fromArray(colors, b * 3);\n          }\n          _renderData.elements.push(_line);\n        }\n      }\n      function pushTriangle(a, b, c, material) {\n        const v1 = _vertexPool[a];\n        const v2 = _vertexPool[b];\n        const v3 = _vertexPool[c];\n        if (checkTriangleVisibility(v1, v2, v3) === false)\n          return;\n        if (material.side === DoubleSide || checkBackfaceCulling(v1, v2, v3) === true) {\n          _face = getNextFaceInPool();\n          _face.id = object.id;\n          _face.v1.copy(v1);\n          _face.v2.copy(v2);\n          _face.v3.copy(v3);\n          _face.z = (v1.positionScreen.z + v2.positionScreen.z + v3.positionScreen.z) / 3;\n          _face.renderOrder = object.renderOrder;\n          _vector3.subVectors(v3.position, v2.position);\n          _vector4.subVectors(v1.position, v2.position);\n          _vector3.cross(_vector4);\n          _face.normalModel.copy(_vector3);\n          _face.normalModel.applyMatrix3(normalMatrix).normalize();\n          for (let i = 0; i < 3; i++) {\n            const normal = _face.vertexNormalsModel[i];\n            normal.fromArray(normals, arguments[i] * 3);\n            normal.applyMatrix3(normalMatrix).normalize();\n            const uv = _face.uvs[i];\n            uv.fromArray(uvs, arguments[i] * 2);\n          }\n          _face.vertexNormalsLength = 3;\n          _face.material = material;\n          if (material.vertexColors) {\n            _face.color.fromArray(colors, a * 3);\n          }\n          _renderData.elements.push(_face);\n        }\n      }\n      return {\n        setObject,\n        projectVertex,\n        checkTriangleVisibility,\n        checkBackfaceCulling,\n        pushVertex,\n        pushNormal,\n        pushColor,\n        pushUv,\n        pushLine,\n        pushTriangle\n      };\n    }\n    const renderList = new RenderList();\n    function projectObject(object) {\n      if (object.visible === false)\n        return;\n      if (object.isLight) {\n        _renderData.lights.push(object);\n      } else if (object.isMesh || object.isLine || object.isPoints) {\n        if (object.material.visible === false)\n          return;\n        if (object.frustumCulled === true && _frustum.intersectsObject(object) === false)\n          return;\n        addObject(object);\n      } else if (object.isSprite) {\n        if (object.material.visible === false)\n          return;\n        if (object.frustumCulled === true && _frustum.intersectsSprite(object) === false)\n          return;\n        addObject(object);\n      }\n      const children = object.children;\n      for (let i = 0, l = children.length; i < l; i++) {\n        projectObject(children[i]);\n      }\n    }\n    function addObject(object) {\n      _object = getNextObjectInPool();\n      _object.id = object.id;\n      _object.object = object;\n      _vector3.setFromMatrixPosition(object.matrixWorld);\n      _vector3.applyMatrix4(_viewProjectionMatrix);\n      _object.z = _vector3.z;\n      _object.renderOrder = object.renderOrder;\n      _renderData.objects.push(_object);\n    }\n    this.projectScene = function(scene, camera, sortObjects, sortElements) {\n      _faceCount = 0;\n      _lineCount = 0;\n      _spriteCount = 0;\n      _renderData.elements.length = 0;\n      if (scene.matrixWorldAutoUpdate === true)\n        scene.updateMatrixWorld();\n      if (camera.parent === null && camera.matrixWorldAutoUpdate === true)\n        camera.updateMatrixWorld();\n      _viewMatrix.copy(camera.matrixWorldInverse);\n      _viewProjectionMatrix.multiplyMatrices(camera.projectionMatrix, _viewMatrix);\n      _frustum.setFromProjectionMatrix(_viewProjectionMatrix);\n      _objectCount = 0;\n      _renderData.objects.length = 0;\n      _renderData.lights.length = 0;\n      projectObject(scene);\n      if (sortObjects === true) {\n        _renderData.objects.sort(painterSort);\n      }\n      const objects = _renderData.objects;\n      for (let o = 0, ol = objects.length; o < ol; o++) {\n        const object = objects[o].object;\n        const geometry = object.geometry;\n        renderList.setObject(object);\n        _modelMatrix = object.matrixWorld;\n        _vertexCount = 0;\n        if (object.isMesh) {\n          let material = object.material;\n          const isMultiMaterial = Array.isArray(material);\n          const attributes = geometry.attributes;\n          const groups = geometry.groups;\n          if (attributes.position === void 0)\n            continue;\n          const positions = attributes.position.array;\n          for (let i = 0, l = positions.length; i < l; i += 3) {\n            let x = positions[i];\n            let y = positions[i + 1];\n            let z = positions[i + 2];\n            const morphTargets = geometry.morphAttributes.position;\n            if (morphTargets !== void 0) {\n              const morphTargetsRelative = geometry.morphTargetsRelative;\n              const morphInfluences = object.morphTargetInfluences;\n              for (let t = 0, tl = morphTargets.length; t < tl; t++) {\n                const influence = morphInfluences[t];\n                if (influence === 0)\n                  continue;\n                const target = morphTargets[t];\n                if (morphTargetsRelative) {\n                  x += target.getX(i / 3) * influence;\n                  y += target.getY(i / 3) * influence;\n                  z += target.getZ(i / 3) * influence;\n                } else {\n                  x += (target.getX(i / 3) - positions[i]) * influence;\n                  y += (target.getY(i / 3) - positions[i + 1]) * influence;\n                  z += (target.getZ(i / 3) - positions[i + 2]) * influence;\n                }\n              }\n            }\n            renderList.pushVertex(x, y, z);\n          }\n          if (attributes.normal !== void 0) {\n            const normals = attributes.normal.array;\n            for (let i = 0, l = normals.length; i < l; i += 3) {\n              renderList.pushNormal(normals[i], normals[i + 1], normals[i + 2]);\n            }\n          }\n          if (attributes.color !== void 0) {\n            const colors = attributes.color.array;\n            for (let i = 0, l = colors.length; i < l; i += 3) {\n              renderList.pushColor(colors[i], colors[i + 1], colors[i + 2]);\n            }\n          }\n          if (attributes.uv !== void 0) {\n            const uvs = attributes.uv.array;\n            for (let i = 0, l = uvs.length; i < l; i += 2) {\n              renderList.pushUv(uvs[i], uvs[i + 1]);\n            }\n          }\n          if (geometry.index !== null) {\n            const indices = geometry.index.array;\n            if (groups.length > 0) {\n              for (let g = 0; g < groups.length; g++) {\n                const group = groups[g];\n                material = isMultiMaterial === true ? object.material[group.materialIndex] : object.material;\n                if (material === void 0)\n                  continue;\n                for (let i = group.start, l = group.start + group.count; i < l; i += 3) {\n                  renderList.pushTriangle(indices[i], indices[i + 1], indices[i + 2], material);\n                }\n              }\n            } else {\n              for (let i = 0, l = indices.length; i < l; i += 3) {\n                renderList.pushTriangle(indices[i], indices[i + 1], indices[i + 2], material);\n              }\n            }\n          } else {\n            if (groups.length > 0) {\n              for (let g = 0; g < groups.length; g++) {\n                const group = groups[g];\n                material = isMultiMaterial === true ? object.material[group.materialIndex] : object.material;\n                if (material === void 0)\n                  continue;\n                for (let i = group.start, l = group.start + group.count; i < l; i += 3) {\n                  renderList.pushTriangle(i, i + 1, i + 2, material);\n                }\n              }\n            } else {\n              for (let i = 0, l = positions.length / 3; i < l; i += 3) {\n                renderList.pushTriangle(i, i + 1, i + 2, material);\n              }\n            }\n          }\n        } else if (object.isLine) {\n          _modelViewProjectionMatrix.multiplyMatrices(_viewProjectionMatrix, _modelMatrix);\n          const attributes = geometry.attributes;\n          if (attributes.position !== void 0) {\n            const positions = attributes.position.array;\n            for (let i = 0, l = positions.length; i < l; i += 3) {\n              renderList.pushVertex(positions[i], positions[i + 1], positions[i + 2]);\n            }\n            if (attributes.color !== void 0) {\n              const colors = attributes.color.array;\n              for (let i = 0, l = colors.length; i < l; i += 3) {\n                renderList.pushColor(colors[i], colors[i + 1], colors[i + 2]);\n              }\n            }\n            if (geometry.index !== null) {\n              const indices = geometry.index.array;\n              for (let i = 0, l = indices.length; i < l; i += 2) {\n                renderList.pushLine(indices[i], indices[i + 1]);\n              }\n            } else {\n              const step = object.isLineSegments ? 2 : 1;\n              for (let i = 0, l = positions.length / 3 - 1; i < l; i += step) {\n                renderList.pushLine(i, i + 1);\n              }\n            }\n          }\n        } else if (object.isPoints) {\n          _modelViewProjectionMatrix.multiplyMatrices(_viewProjectionMatrix, _modelMatrix);\n          const attributes = geometry.attributes;\n          if (attributes.position !== void 0) {\n            const positions = attributes.position.array;\n            for (let i = 0, l = positions.length; i < l; i += 3) {\n              _vector4.set(positions[i], positions[i + 1], positions[i + 2], 1);\n              _vector4.applyMatrix4(_modelViewProjectionMatrix);\n              pushPoint(_vector4, object, camera);\n            }\n          }\n        } else if (object.isSprite) {\n          object.modelViewMatrix.multiplyMatrices(camera.matrixWorldInverse, object.matrixWorld);\n          _vector4.set(_modelMatrix.elements[12], _modelMatrix.elements[13], _modelMatrix.elements[14], 1);\n          _vector4.applyMatrix4(_viewProjectionMatrix);\n          pushPoint(_vector4, object, camera);\n        }\n      }\n      if (sortElements === true) {\n        _renderData.elements.sort(painterSort);\n      }\n      return _renderData;\n    };\n    function pushPoint(_vector42, object, camera) {\n      const invW = 1 / _vector42.w;\n      _vector42.z *= invW;\n      if (_vector42.z >= -1 && _vector42.z <= 1) {\n        _sprite = getNextSpriteInPool();\n        _sprite.id = object.id;\n        _sprite.x = _vector42.x * invW;\n        _sprite.y = _vector42.y * invW;\n        _sprite.z = _vector42.z;\n        _sprite.renderOrder = object.renderOrder;\n        _sprite.object = object;\n        _sprite.rotation = object.rotation;\n        _sprite.scale.x = object.scale.x * Math.abs(\n          _sprite.x - (_vector42.x + camera.projectionMatrix.elements[0]) / (_vector42.w + camera.projectionMatrix.elements[12])\n        );\n        _sprite.scale.y = object.scale.y * Math.abs(\n          _sprite.y - (_vector42.y + camera.projectionMatrix.elements[5]) / (_vector42.w + camera.projectionMatrix.elements[13])\n        );\n        _sprite.material = object.material;\n        _renderData.elements.push(_sprite);\n      }\n    }\n    function getNextObjectInPool() {\n      if (_objectCount === _objectPoolLength) {\n        const object = new RenderableObject();\n        _objectPool.push(object);\n        _objectPoolLength++;\n        _objectCount++;\n        return object;\n      }\n      return _objectPool[_objectCount++];\n    }\n    function getNextVertexInPool() {\n      if (_vertexCount === _vertexPoolLength) {\n        const vertex = new RenderableVertex();\n        _vertexPool.push(vertex);\n        _vertexPoolLength++;\n        _vertexCount++;\n        return vertex;\n      }\n      return _vertexPool[_vertexCount++];\n    }\n    function getNextFaceInPool() {\n      if (_faceCount === _facePoolLength) {\n        const face = new RenderableFace();\n        _facePool.push(face);\n        _facePoolLength++;\n        _faceCount++;\n        return face;\n      }\n      return _facePool[_faceCount++];\n    }\n    function getNextLineInPool() {\n      if (_lineCount === _linePoolLength) {\n        const line = new RenderableLine();\n        _linePool.push(line);\n        _linePoolLength++;\n        _lineCount++;\n        return line;\n      }\n      return _linePool[_lineCount++];\n    }\n    function getNextSpriteInPool() {\n      if (_spriteCount === _spritePoolLength) {\n        const sprite = new RenderableSprite();\n        _spritePool.push(sprite);\n        _spritePoolLength++;\n        _spriteCount++;\n        return sprite;\n      }\n      return _spritePool[_spriteCount++];\n    }\n    function painterSort(a, b) {\n      if (a.renderOrder !== b.renderOrder) {\n        return a.renderOrder - b.renderOrder;\n      } else if (a.z !== b.z) {\n        return b.z - a.z;\n      } else if (a.id !== b.id) {\n        return a.id - b.id;\n      } else {\n        return 0;\n      }\n    }\n    function clipLine(s1, s2) {\n      let alpha1 = 0, alpha2 = 1;\n      const bc1near = s1.z + s1.w, bc2near = s2.z + s2.w, bc1far = -s1.z + s1.w, bc2far = -s2.z + s2.w;\n      if (bc1near >= 0 && bc2near >= 0 && bc1far >= 0 && bc2far >= 0) {\n        return true;\n      } else if (bc1near < 0 && bc2near < 0 || bc1far < 0 && bc2far < 0) {\n        return false;\n      } else {\n        if (bc1near < 0) {\n          alpha1 = Math.max(alpha1, bc1near / (bc1near - bc2near));\n        } else if (bc2near < 0) {\n          alpha2 = Math.min(alpha2, bc1near / (bc1near - bc2near));\n        }\n        if (bc1far < 0) {\n          alpha1 = Math.max(alpha1, bc1far / (bc1far - bc2far));\n        } else if (bc2far < 0) {\n          alpha2 = Math.min(alpha2, bc1far / (bc1far - bc2far));\n        }\n        if (alpha2 < alpha1) {\n          return false;\n        } else {\n          s1.lerp(s2, alpha1);\n          s2.lerp(s1, 1 - alpha2);\n          return true;\n        }\n      }\n    }\n  }\n}\nexport {\n  Projector,\n  RenderableFace,\n  RenderableLine,\n  RenderableObject,\n  RenderableSprite,\n  RenderableVertex\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}