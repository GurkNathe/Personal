{"ast":null,"code":"import _classCallCheck from \"/home/krug/Coding/JavaScript/Websites/Personal/personal/node_modules/.pnpm/@babel+runtime@7.22.3/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/home/krug/Coding/JavaScript/Websites/Personal/personal/node_modules/.pnpm/@babel+runtime@7.22.3/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport { Triangle, Vector3 } from \"three\";\nvar _face = /* @__PURE__ */new Triangle();\nvar _color = /* @__PURE__ */new Vector3();\nvar MeshSurfaceSampler = /*#__PURE__*/function () {\n  function MeshSurfaceSampler(mesh) {\n    _classCallCheck(this, MeshSurfaceSampler);\n    var geometry = mesh.geometry;\n    if (geometry.index) {\n      console.warn(\"THREE.MeshSurfaceSampler: Converting geometry to non-indexed BufferGeometry.\");\n      geometry = geometry.toNonIndexed();\n    }\n    this.geometry = geometry;\n    this.randomFunction = Math.random;\n    this.positionAttribute = this.geometry.getAttribute(\"position\");\n    this.colorAttribute = this.geometry.getAttribute(\"color\");\n    this.weightAttribute = null;\n    this.distribution = null;\n  }\n  _createClass(MeshSurfaceSampler, [{\n    key: \"setWeightAttribute\",\n    value: function setWeightAttribute(name) {\n      this.weightAttribute = name ? this.geometry.getAttribute(name) : null;\n      return this;\n    }\n  }, {\n    key: \"build\",\n    value: function build() {\n      var positionAttribute = this.positionAttribute;\n      var weightAttribute = this.weightAttribute;\n      var faceWeights = new Float32Array(positionAttribute.count / 3);\n      for (var i = 0; i < positionAttribute.count; i += 3) {\n        var faceWeight = 1;\n        if (weightAttribute) {\n          faceWeight = weightAttribute.getX(i) + weightAttribute.getX(i + 1) + weightAttribute.getX(i + 2);\n        }\n        _face.a.fromBufferAttribute(positionAttribute, i);\n        _face.b.fromBufferAttribute(positionAttribute, i + 1);\n        _face.c.fromBufferAttribute(positionAttribute, i + 2);\n        faceWeight *= _face.getArea();\n        faceWeights[i / 3] = faceWeight;\n      }\n      this.distribution = new Float32Array(positionAttribute.count / 3);\n      var cumulativeTotal = 0;\n      for (var _i = 0; _i < faceWeights.length; _i++) {\n        cumulativeTotal += faceWeights[_i];\n        this.distribution[_i] = cumulativeTotal;\n      }\n      return this;\n    }\n  }, {\n    key: \"setRandomGenerator\",\n    value: function setRandomGenerator(randomFunction) {\n      this.randomFunction = randomFunction;\n      return this;\n    }\n  }, {\n    key: \"sample\",\n    value: function sample(targetPosition, targetNormal, targetColor) {\n      var faceIndex = this.sampleFaceIndex();\n      return this.sampleFace(faceIndex, targetPosition, targetNormal, targetColor);\n    }\n  }, {\n    key: \"sampleFaceIndex\",\n    value: function sampleFaceIndex() {\n      var cumulativeTotal = this.distribution[this.distribution.length - 1];\n      return this.binarySearch(this.randomFunction() * cumulativeTotal);\n    }\n  }, {\n    key: \"binarySearch\",\n    value: function binarySearch(x) {\n      var dist = this.distribution;\n      var start = 0;\n      var end = dist.length - 1;\n      var index = -1;\n      while (start <= end) {\n        var mid = Math.ceil((start + end) / 2);\n        if (mid === 0 || dist[mid - 1] <= x && dist[mid] > x) {\n          index = mid;\n          break;\n        } else if (x < dist[mid]) {\n          end = mid - 1;\n        } else {\n          start = mid + 1;\n        }\n      }\n      return index;\n    }\n  }, {\n    key: \"sampleFace\",\n    value: function sampleFace(faceIndex, targetPosition, targetNormal, targetColor) {\n      var u = this.randomFunction();\n      var v = this.randomFunction();\n      if (u + v > 1) {\n        u = 1 - u;\n        v = 1 - v;\n      }\n      _face.a.fromBufferAttribute(this.positionAttribute, faceIndex * 3);\n      _face.b.fromBufferAttribute(this.positionAttribute, faceIndex * 3 + 1);\n      _face.c.fromBufferAttribute(this.positionAttribute, faceIndex * 3 + 2);\n      targetPosition.set(0, 0, 0).addScaledVector(_face.a, u).addScaledVector(_face.b, v).addScaledVector(_face.c, 1 - (u + v));\n      if (targetNormal !== void 0) {\n        _face.getNormal(targetNormal);\n      }\n      if (targetColor !== void 0 && this.colorAttribute !== void 0) {\n        _face.a.fromBufferAttribute(this.colorAttribute, faceIndex * 3);\n        _face.b.fromBufferAttribute(this.colorAttribute, faceIndex * 3 + 1);\n        _face.c.fromBufferAttribute(this.colorAttribute, faceIndex * 3 + 2);\n        _color.set(0, 0, 0).addScaledVector(_face.a, u).addScaledVector(_face.b, v).addScaledVector(_face.c, 1 - (u + v));\n        targetColor.r = _color.x;\n        targetColor.g = _color.y;\n        targetColor.b = _color.z;\n      }\n      return this;\n    }\n  }]);\n  return MeshSurfaceSampler;\n}();\nexport { MeshSurfaceSampler };","map":{"version":3,"names":["Triangle","Vector3","_face","_color","MeshSurfaceSampler","mesh","_classCallCheck","geometry","index","console","warn","toNonIndexed","randomFunction","Math","random","positionAttribute","getAttribute","colorAttribute","weightAttribute","distribution","_createClass","key","value","setWeightAttribute","name","build","faceWeights","Float32Array","count","i","faceWeight","getX","a","fromBufferAttribute","b","c","getArea","cumulativeTotal","length","setRandomGenerator","sample","targetPosition","targetNormal","targetColor","faceIndex","sampleFaceIndex","sampleFace","binarySearch","x","dist","start","end","mid","ceil","u","v","set","addScaledVector","getNormal","r","g","y","z"],"sources":["/home/krug/Coding/JavaScript/Websites/Personal/personal/node_modules/.pnpm/three-stdlib@2.23.7_three@0.151.3/node_modules/three-stdlib/math/MeshSurfaceSampler.js"],"sourcesContent":["import { Triangle, Vector3 } from \"three\";\nconst _face = /* @__PURE__ */ new Triangle();\nconst _color = /* @__PURE__ */ new Vector3();\nclass MeshSurfaceSampler {\n  constructor(mesh) {\n    let geometry = mesh.geometry;\n    if (geometry.index) {\n      console.warn(\"THREE.MeshSurfaceSampler: Converting geometry to non-indexed BufferGeometry.\");\n      geometry = geometry.toNonIndexed();\n    }\n    this.geometry = geometry;\n    this.randomFunction = Math.random;\n    this.positionAttribute = this.geometry.getAttribute(\"position\");\n    this.colorAttribute = this.geometry.getAttribute(\"color\");\n    this.weightAttribute = null;\n    this.distribution = null;\n  }\n  setWeightAttribute(name) {\n    this.weightAttribute = name ? this.geometry.getAttribute(name) : null;\n    return this;\n  }\n  build() {\n    const positionAttribute = this.positionAttribute;\n    const weightAttribute = this.weightAttribute;\n    const faceWeights = new Float32Array(positionAttribute.count / 3);\n    for (let i = 0; i < positionAttribute.count; i += 3) {\n      let faceWeight = 1;\n      if (weightAttribute) {\n        faceWeight = weightAttribute.getX(i) + weightAttribute.getX(i + 1) + weightAttribute.getX(i + 2);\n      }\n      _face.a.fromBufferAttribute(positionAttribute, i);\n      _face.b.fromBufferAttribute(positionAttribute, i + 1);\n      _face.c.fromBufferAttribute(positionAttribute, i + 2);\n      faceWeight *= _face.getArea();\n      faceWeights[i / 3] = faceWeight;\n    }\n    this.distribution = new Float32Array(positionAttribute.count / 3);\n    let cumulativeTotal = 0;\n    for (let i = 0; i < faceWeights.length; i++) {\n      cumulativeTotal += faceWeights[i];\n      this.distribution[i] = cumulativeTotal;\n    }\n    return this;\n  }\n  setRandomGenerator(randomFunction) {\n    this.randomFunction = randomFunction;\n    return this;\n  }\n  sample(targetPosition, targetNormal, targetColor) {\n    const faceIndex = this.sampleFaceIndex();\n    return this.sampleFace(faceIndex, targetPosition, targetNormal, targetColor);\n  }\n  sampleFaceIndex() {\n    const cumulativeTotal = this.distribution[this.distribution.length - 1];\n    return this.binarySearch(this.randomFunction() * cumulativeTotal);\n  }\n  binarySearch(x) {\n    const dist = this.distribution;\n    let start = 0;\n    let end = dist.length - 1;\n    let index = -1;\n    while (start <= end) {\n      const mid = Math.ceil((start + end) / 2);\n      if (mid === 0 || dist[mid - 1] <= x && dist[mid] > x) {\n        index = mid;\n        break;\n      } else if (x < dist[mid]) {\n        end = mid - 1;\n      } else {\n        start = mid + 1;\n      }\n    }\n    return index;\n  }\n  sampleFace(faceIndex, targetPosition, targetNormal, targetColor) {\n    let u = this.randomFunction();\n    let v = this.randomFunction();\n    if (u + v > 1) {\n      u = 1 - u;\n      v = 1 - v;\n    }\n    _face.a.fromBufferAttribute(this.positionAttribute, faceIndex * 3);\n    _face.b.fromBufferAttribute(this.positionAttribute, faceIndex * 3 + 1);\n    _face.c.fromBufferAttribute(this.positionAttribute, faceIndex * 3 + 2);\n    targetPosition.set(0, 0, 0).addScaledVector(_face.a, u).addScaledVector(_face.b, v).addScaledVector(_face.c, 1 - (u + v));\n    if (targetNormal !== void 0) {\n      _face.getNormal(targetNormal);\n    }\n    if (targetColor !== void 0 && this.colorAttribute !== void 0) {\n      _face.a.fromBufferAttribute(this.colorAttribute, faceIndex * 3);\n      _face.b.fromBufferAttribute(this.colorAttribute, faceIndex * 3 + 1);\n      _face.c.fromBufferAttribute(this.colorAttribute, faceIndex * 3 + 2);\n      _color.set(0, 0, 0).addScaledVector(_face.a, u).addScaledVector(_face.b, v).addScaledVector(_face.c, 1 - (u + v));\n      targetColor.r = _color.x;\n      targetColor.g = _color.y;\n      targetColor.b = _color.z;\n    }\n    return this;\n  }\n}\nexport {\n  MeshSurfaceSampler\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}