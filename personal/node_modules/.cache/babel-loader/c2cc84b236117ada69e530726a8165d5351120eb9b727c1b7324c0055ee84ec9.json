{"ast":null,"code":"import { Mesh, ShaderMaterial, SphereGeometry } from \"three\";\nclass LightProbeHelper extends Mesh {\n  constructor(lightProbe, size) {\n    const material = new ShaderMaterial({\n      type: \"LightProbeHelperMaterial\",\n      uniforms: {\n        sh: {\n          value: lightProbe.sh.coefficients\n        },\n        // by reference\n        intensity: {\n          value: lightProbe.intensity\n        }\n      },\n      vertexShader: [\"varying vec3 vNormal;\", \"void main() {\", \"\tvNormal = normalize( normalMatrix * normal );\", \"\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\", \"}\"].join(\"\\n\"),\n      fragmentShader: [\"#define RECIPROCAL_PI 0.318309886\", \"vec3 inverseTransformDirection( in vec3 normal, in mat4 matrix ) {\", \"\t// matrix is assumed to be orthogonal\", \"\treturn normalize( ( vec4( normal, 0.0 ) * matrix ).xyz );\", \"}\", \"// source: https://graphics.stanford.edu/papers/envmap/envmap.pdf\", \"vec3 shGetIrradianceAt( in vec3 normal, in vec3 shCoefficients[ 9 ] ) {\", \"\t// normal is assumed to have unit length\", \"\tfloat x = normal.x, y = normal.y, z = normal.z;\", \"\t// band 0\", \"\tvec3 result = shCoefficients[ 0 ] * 0.886227;\", \"\t// band 1\", \"\tresult += shCoefficients[ 1 ] * 2.0 * 0.511664 * y;\", \"\tresult += shCoefficients[ 2 ] * 2.0 * 0.511664 * z;\", \"\tresult += shCoefficients[ 3 ] * 2.0 * 0.511664 * x;\", \"\t// band 2\", \"\tresult += shCoefficients[ 4 ] * 2.0 * 0.429043 * x * y;\", \"\tresult += shCoefficients[ 5 ] * 2.0 * 0.429043 * y * z;\", \"\tresult += shCoefficients[ 6 ] * ( 0.743125 * z * z - 0.247708 );\", \"\tresult += shCoefficients[ 7 ] * 2.0 * 0.429043 * x * z;\", \"\tresult += shCoefficients[ 8 ] * 0.429043 * ( x * x - y * y );\", \"\treturn result;\", \"}\", \"uniform vec3 sh[ 9 ]; // sh coefficients\", \"uniform float intensity; // light probe intensity\", \"varying vec3 vNormal;\", \"void main() {\", \"\tvec3 normal = normalize( vNormal );\", \"\tvec3 worldNormal = inverseTransformDirection( normal, viewMatrix );\", \"\tvec3 irradiance = shGetIrradianceAt( worldNormal, sh );\", \"\tvec3 outgoingLight = RECIPROCAL_PI * irradiance * intensity;\", \"\tgl_FragColor = linearToOutputTexel( vec4( outgoingLight, 1.0 ) );\", \"}\"].join(\"\\n\")\n    });\n    const geometry = new SphereGeometry(1, 32, 16);\n    super(geometry, material);\n    this.lightProbe = lightProbe;\n    this.size = size;\n    this.type = \"LightProbeHelper\";\n    this.onBeforeRender();\n  }\n  dispose() {\n    this.geometry.dispose();\n    this.material.dispose();\n  }\n  onBeforeRender() {\n    this.position.copy(this.lightProbe.position);\n    this.scale.set(1, 1, 1).multiplyScalar(this.size);\n    this.material.uniforms.intensity.value = this.lightProbe.intensity;\n  }\n}\nexport { LightProbeHelper };","map":{"version":3,"names":["Mesh","ShaderMaterial","SphereGeometry","LightProbeHelper","constructor","lightProbe","size","material","type","uniforms","sh","value","coefficients","intensity","vertexShader","join","fragmentShader","geometry","onBeforeRender","dispose","position","copy","scale","set","multiplyScalar"],"sources":["/home/krug/Coding/JavaScript/Websites/Personal/personal/node_modules/.pnpm/three-stdlib@2.23.7_three@0.151.3/node_modules/three-stdlib/helpers/LightProbeHelper.js"],"sourcesContent":["import { Mesh, ShaderMaterial, SphereGeometry } from \"three\";\nclass LightProbeHelper extends Mesh {\n  constructor(lightProbe, size) {\n    const material = new ShaderMaterial({\n      type: \"LightProbeHelperMaterial\",\n      uniforms: {\n        sh: { value: lightProbe.sh.coefficients },\n        // by reference\n        intensity: { value: lightProbe.intensity }\n      },\n      vertexShader: [\n        \"varying vec3 vNormal;\",\n        \"void main() {\",\n        \"\tvNormal = normalize( normalMatrix * normal );\",\n        \"\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\",\n        \"}\"\n      ].join(\"\\n\"),\n      fragmentShader: [\n        \"#define RECIPROCAL_PI 0.318309886\",\n        \"vec3 inverseTransformDirection( in vec3 normal, in mat4 matrix ) {\",\n        \"\t// matrix is assumed to be orthogonal\",\n        \"\treturn normalize( ( vec4( normal, 0.0 ) * matrix ).xyz );\",\n        \"}\",\n        \"// source: https://graphics.stanford.edu/papers/envmap/envmap.pdf\",\n        \"vec3 shGetIrradianceAt( in vec3 normal, in vec3 shCoefficients[ 9 ] ) {\",\n        \"\t// normal is assumed to have unit length\",\n        \"\tfloat x = normal.x, y = normal.y, z = normal.z;\",\n        \"\t// band 0\",\n        \"\tvec3 result = shCoefficients[ 0 ] * 0.886227;\",\n        \"\t// band 1\",\n        \"\tresult += shCoefficients[ 1 ] * 2.0 * 0.511664 * y;\",\n        \"\tresult += shCoefficients[ 2 ] * 2.0 * 0.511664 * z;\",\n        \"\tresult += shCoefficients[ 3 ] * 2.0 * 0.511664 * x;\",\n        \"\t// band 2\",\n        \"\tresult += shCoefficients[ 4 ] * 2.0 * 0.429043 * x * y;\",\n        \"\tresult += shCoefficients[ 5 ] * 2.0 * 0.429043 * y * z;\",\n        \"\tresult += shCoefficients[ 6 ] * ( 0.743125 * z * z - 0.247708 );\",\n        \"\tresult += shCoefficients[ 7 ] * 2.0 * 0.429043 * x * z;\",\n        \"\tresult += shCoefficients[ 8 ] * 0.429043 * ( x * x - y * y );\",\n        \"\treturn result;\",\n        \"}\",\n        \"uniform vec3 sh[ 9 ]; // sh coefficients\",\n        \"uniform float intensity; // light probe intensity\",\n        \"varying vec3 vNormal;\",\n        \"void main() {\",\n        \"\tvec3 normal = normalize( vNormal );\",\n        \"\tvec3 worldNormal = inverseTransformDirection( normal, viewMatrix );\",\n        \"\tvec3 irradiance = shGetIrradianceAt( worldNormal, sh );\",\n        \"\tvec3 outgoingLight = RECIPROCAL_PI * irradiance * intensity;\",\n        \"\tgl_FragColor = linearToOutputTexel( vec4( outgoingLight, 1.0 ) );\",\n        \"}\"\n      ].join(\"\\n\")\n    });\n    const geometry = new SphereGeometry(1, 32, 16);\n    super(geometry, material);\n    this.lightProbe = lightProbe;\n    this.size = size;\n    this.type = \"LightProbeHelper\";\n    this.onBeforeRender();\n  }\n  dispose() {\n    this.geometry.dispose();\n    this.material.dispose();\n  }\n  onBeforeRender() {\n    this.position.copy(this.lightProbe.position);\n    this.scale.set(1, 1, 1).multiplyScalar(this.size);\n    this.material.uniforms.intensity.value = this.lightProbe.intensity;\n  }\n}\nexport {\n  LightProbeHelper\n};\n"],"mappings":"AAAA,SAASA,IAAI,EAAEC,cAAc,EAAEC,cAAc,QAAQ,OAAO;AAC5D,MAAMC,gBAAgB,SAASH,IAAI,CAAC;EAClCI,WAAWA,CAACC,UAAU,EAAEC,IAAI,EAAE;IAC5B,MAAMC,QAAQ,GAAG,IAAIN,cAAc,CAAC;MAClCO,IAAI,EAAE,0BAA0B;MAChCC,QAAQ,EAAE;QACRC,EAAE,EAAE;UAAEC,KAAK,EAAEN,UAAU,CAACK,EAAE,CAACE;QAAa,CAAC;QACzC;QACAC,SAAS,EAAE;UAAEF,KAAK,EAAEN,UAAU,CAACQ;QAAU;MAC3C,CAAC;MACDC,YAAY,EAAE,CACZ,uBAAuB,EACvB,eAAe,EACf,gDAAgD,EAChD,4EAA4E,EAC5E,GAAG,CACJ,CAACC,IAAI,CAAC,IAAI,CAAC;MACZC,cAAc,EAAE,CACd,mCAAmC,EACnC,oEAAoE,EACpE,wCAAwC,EACxC,4DAA4D,EAC5D,GAAG,EACH,mEAAmE,EACnE,yEAAyE,EACzE,2CAA2C,EAC3C,kDAAkD,EAClD,YAAY,EACZ,gDAAgD,EAChD,YAAY,EACZ,sDAAsD,EACtD,sDAAsD,EACtD,sDAAsD,EACtD,YAAY,EACZ,0DAA0D,EAC1D,0DAA0D,EAC1D,mEAAmE,EACnE,0DAA0D,EAC1D,gEAAgE,EAChE,iBAAiB,EACjB,GAAG,EACH,0CAA0C,EAC1C,mDAAmD,EACnD,uBAAuB,EACvB,eAAe,EACf,sCAAsC,EACtC,sEAAsE,EACtE,0DAA0D,EAC1D,+DAA+D,EAC/D,oEAAoE,EACpE,GAAG,CACJ,CAACD,IAAI,CAAC,IAAI;IACb,CAAC,CAAC;IACF,MAAME,QAAQ,GAAG,IAAIf,cAAc,CAAC,CAAC,EAAE,EAAE,EAAE,EAAE,CAAC;IAC9C,KAAK,CAACe,QAAQ,EAAEV,QAAQ,CAAC;IACzB,IAAI,CAACF,UAAU,GAAGA,UAAU;IAC5B,IAAI,CAACC,IAAI,GAAGA,IAAI;IAChB,IAAI,CAACE,IAAI,GAAG,kBAAkB;IAC9B,IAAI,CAACU,cAAc,CAAC,CAAC;EACvB;EACAC,OAAOA,CAAA,EAAG;IACR,IAAI,CAACF,QAAQ,CAACE,OAAO,CAAC,CAAC;IACvB,IAAI,CAACZ,QAAQ,CAACY,OAAO,CAAC,CAAC;EACzB;EACAD,cAAcA,CAAA,EAAG;IACf,IAAI,CAACE,QAAQ,CAACC,IAAI,CAAC,IAAI,CAAChB,UAAU,CAACe,QAAQ,CAAC;IAC5C,IAAI,CAACE,KAAK,CAACC,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAACC,cAAc,CAAC,IAAI,CAAClB,IAAI,CAAC;IACjD,IAAI,CAACC,QAAQ,CAACE,QAAQ,CAACI,SAAS,CAACF,KAAK,GAAG,IAAI,CAACN,UAAU,CAACQ,SAAS;EACpE;AACF;AACA,SACEV,gBAAgB"},"metadata":{},"sourceType":"module","externalDependencies":[]}