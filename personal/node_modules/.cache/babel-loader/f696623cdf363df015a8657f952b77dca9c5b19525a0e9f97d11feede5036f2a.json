{"ast":null,"code":"import { Loader, LoaderUtils, FileLoader, TextureLoader, Vector3, Quaternion, Matrix4, Bone, Skeleton, BufferGeometry, MeshLambertMaterial, BufferAttribute, Mesh, SkinnedMesh, Color, Object3D, MeshPhongMaterial } from \"three\";\nclass AssimpLoader extends Loader {\n  load(url, onLoad, onProgress, onError) {\n    var scope = this;\n    var path = scope.path === \"\" ? LoaderUtils.extractUrlBase(url) : scope.path;\n    var loader = new FileLoader(scope.manager);\n    loader.setPath(scope.path);\n    loader.setResponseType(\"arraybuffer\");\n    loader.setRequestHeader(scope.requestHeader);\n    loader.setWithCredentials(scope.withCredentials);\n    loader.load(url, function (buffer) {\n      try {\n        onLoad(scope.parse(buffer, path));\n      } catch (e) {\n        if (onError) {\n          onError(e);\n        } else {\n          console.error(e);\n        }\n        scope.manager.itemError(url);\n      }\n    }, onProgress, onError);\n  }\n  parse(buffer, path) {\n    var textureLoader = new TextureLoader(this.manager);\n    textureLoader.setPath(this.resourcePath || path).setCrossOrigin(this.crossOrigin);\n    var Virtulous = {};\n    Virtulous.KeyFrame = class {\n      constructor(time, matrix) {\n        this.time = time;\n        this.matrix = matrix.clone();\n        this.position = new Vector3();\n        this.quaternion = new Quaternion();\n        this.scale = new Vector3(1, 1, 1);\n        this.matrix.decompose(this.position, this.quaternion, this.scale);\n        this.clone = function () {\n          var n = new Virtulous.KeyFrame(this.time, this.matrix);\n          return n;\n        };\n        this.lerp = function (nextKey, time2) {\n          time2 -= this.time;\n          var dist = nextKey.time - this.time;\n          var l = time2 / dist;\n          var l2 = 1 - l;\n          var keypos = this.position;\n          var keyrot = this.quaternion;\n          var key2pos = nextKey.position;\n          var key2rot = nextKey.quaternion;\n          Virtulous.KeyFrame.tempAniPos.x = keypos.x * l2 + key2pos.x * l;\n          Virtulous.KeyFrame.tempAniPos.y = keypos.y * l2 + key2pos.y * l;\n          Virtulous.KeyFrame.tempAniPos.z = keypos.z * l2 + key2pos.z * l;\n          Virtulous.KeyFrame.tempAniQuat.set(keyrot.x, keyrot.y, keyrot.z, keyrot.w);\n          Virtulous.KeyFrame.tempAniQuat.slerp(key2rot, l);\n          return Virtulous.KeyFrame.tempAniMatrix.compose(Virtulous.KeyFrame.tempAniPos, Virtulous.KeyFrame.tempAniQuat, Virtulous.KeyFrame.tempAniScale);\n        };\n      }\n    };\n    Virtulous.KeyFrame.tempAniPos = new Vector3();\n    Virtulous.KeyFrame.tempAniQuat = new Quaternion();\n    Virtulous.KeyFrame.tempAniScale = new Vector3(1, 1, 1);\n    Virtulous.KeyFrame.tempAniMatrix = new Matrix4();\n    Virtulous.KeyFrameTrack = function () {\n      this.keys = [];\n      this.target = null;\n      this.time = 0;\n      this.length = 0;\n      this._accelTable = {};\n      this.fps = 20;\n      this.addKey = function (key) {\n        this.keys.push(key);\n      };\n      this.init = function () {\n        this.sortKeys();\n        if (this.keys.length > 0) this.length = this.keys[this.keys.length - 1].time;else this.length = 0;\n        if (!this.fps) return;\n        for (let j = 0; j < this.length * this.fps; j++) {\n          for (let i = 0; i < this.keys.length; i++) {\n            if (this.keys[i].time == j) {\n              this._accelTable[j] = i;\n              break;\n            } else if (this.keys[i].time < j / this.fps && this.keys[i + 1] && this.keys[i + 1].time >= j / this.fps) {\n              this._accelTable[j] = i;\n              break;\n            }\n          }\n        }\n      };\n      this.parseFromThree = function (data) {\n        var fps = data.fps;\n        this.target = data.node;\n        var track = data.hierarchy[0].keys;\n        for (let i = 0; i < track.length; i++) {\n          this.addKey(new Virtulous.KeyFrame(i / fps || track[i].time, track[i].targets[0].data));\n        }\n        this.init();\n      };\n      this.parseFromCollada = function (data) {\n        var track = data.keys;\n        var fps = this.fps;\n        for (let i = 0; i < track.length; i++) {\n          this.addKey(new Virtulous.KeyFrame(i / fps || track[i].time, track[i].matrix));\n        }\n        this.init();\n      };\n      this.sortKeys = function () {\n        this.keys.sort(this.keySortFunc);\n      };\n      this.keySortFunc = function (a, b) {\n        return a.time - b.time;\n      };\n      this.clone = function () {\n        var t = new Virtulous.KeyFrameTrack();\n        t.target = this.target;\n        t.time = this.time;\n        t.length = this.length;\n        for (let i = 0; i < this.keys.length; i++) {\n          t.addKey(this.keys[i].clone());\n        }\n        t.init();\n        return t;\n      };\n      this.reTarget = function (root, compareitor) {\n        if (!compareitor) compareitor = Virtulous.TrackTargetNodeNameCompare;\n        this.target = compareitor(root, this.target);\n      };\n      this.keySearchAccel = function (time) {\n        time *= this.fps;\n        time = Math.floor(time);\n        return this._accelTable[time] || 0;\n      };\n      this.setTime = function (time) {\n        time = Math.abs(time);\n        if (this.length) time = time % this.length + 0.05;\n        var key0 = null;\n        var key1 = null;\n        for (let i = this.keySearchAccel(time); i < this.keys.length; i++) {\n          if (this.keys[i].time == time) {\n            key0 = this.keys[i];\n            key1 = this.keys[i];\n            break;\n          } else if (this.keys[i].time < time && this.keys[i + 1] && this.keys[i + 1].time > time) {\n            key0 = this.keys[i];\n            key1 = this.keys[i + 1];\n            break;\n          } else if (this.keys[i].time < time && i == this.keys.length - 1) {\n            key0 = this.keys[i];\n            key1 = this.keys[0].clone();\n            key1.time += this.length + 0.05;\n            break;\n          }\n        }\n        if (key0 && key1 && key0 !== key1) {\n          this.target.matrixAutoUpdate = false;\n          this.target.matrix.copy(key0.lerp(key1, time));\n          this.target.matrixWorldNeedsUpdate = true;\n          return;\n        }\n        if (key0 && key1 && key0 == key1) {\n          this.target.matrixAutoUpdate = false;\n          this.target.matrix.copy(key0.matrix);\n          this.target.matrixWorldNeedsUpdate = true;\n          return;\n        }\n      };\n    };\n    Virtulous.TrackTargetNodeNameCompare = function (root, target) {\n      function find(node, name) {\n        if (node.name == name) return node;\n        for (let i = 0; i < node.children.length; i++) {\n          var r = find(node.children[i], name);\n          if (r) return r;\n        }\n        return null;\n      }\n      return find(root, target.name);\n    };\n    Virtulous.Animation = function () {\n      this.tracks = [];\n      this.length = 0;\n      this.addTrack = function (track) {\n        this.tracks.push(track);\n        this.length = Math.max(track.length, this.length);\n      };\n      this.setTime = function (time) {\n        this.time = time;\n        for (let i = 0; i < this.tracks.length; i++) this.tracks[i].setTime(time);\n      };\n      this.clone = function (target, compareitor) {\n        if (!compareitor) compareitor = Virtulous.TrackTargetNodeNameCompare;\n        var n = new Virtulous.Animation();\n        n.target = target;\n        for (let i = 0; i < this.tracks.length; i++) {\n          var track = this.tracks[i].clone();\n          track.reTarget(target, compareitor);\n          n.addTrack(track);\n        }\n        return n;\n      };\n    };\n    var ASSBIN_CHUNK_AICAMERA = 4660;\n    var ASSBIN_CHUNK_AILIGHT = 4661;\n    var ASSBIN_CHUNK_AITEXTURE = 4662;\n    var ASSBIN_CHUNK_AIMESH = 4663;\n    var ASSBIN_CHUNK_AINODEANIM = 4664;\n    var ASSBIN_CHUNK_AISCENE = 4665;\n    var ASSBIN_CHUNK_AIBONE = 4666;\n    var ASSBIN_CHUNK_AIANIMATION = 4667;\n    var ASSBIN_CHUNK_AINODE = 4668;\n    var ASSBIN_CHUNK_AIMATERIAL = 4669;\n    var ASSBIN_CHUNK_AIMATERIALPROPERTY = 4670;\n    var ASSBIN_MESH_HAS_POSITIONS = 1;\n    var ASSBIN_MESH_HAS_NORMALS = 2;\n    var ASSBIN_MESH_HAS_TANGENTS_AND_BITANGENTS = 4;\n    var ASSBIN_MESH_HAS_TEXCOORD_BASE = 256;\n    var ASSBIN_MESH_HAS_COLOR_BASE = 65536;\n    var AI_MAX_NUMBER_OF_COLOR_SETS = 1;\n    var AI_MAX_NUMBER_OF_TEXTURECOORDS = 4;\n    //! A directional light source has a well-defined direction\n    //! but is infinitely far away. That's quite a good\n    //! approximation for sun light.\n    var aiLightSource_DIRECTIONAL = 1;\n    //! A point light source has a well-defined position\n    //! in space but no direction - it emits light in all\n    //! directions. A normal bulb is a point light.\n    //! A spot light source emits light in a specific\n    //! angle. It has a position and a direction it is pointing to.\n    //! A good example for a spot light is a light spot in\n    //! sport arenas.\n    var aiLightSource_SPOT = 3;\n    //! The generic light level of the world, including the bounces\n    //! of all other lightsources.\n    //! Typically, there's at most one ambient light in a scene.\n    //! This light type doesn't have a valid position, direction, or\n    //! other properties, just a color.\n    var aiTextureType_DIFFUSE = 1;\n    var aiTextureType_NORMALS = 6;\n    var aiTextureType_OPACITY = 8;\n    var aiTextureType_LIGHTMAP = 10;\n    var BONESPERVERT = 4;\n    function ASSBIN_MESH_HAS_TEXCOORD(n) {\n      return ASSBIN_MESH_HAS_TEXCOORD_BASE << n;\n    }\n    function ASSBIN_MESH_HAS_COLOR(n) {\n      return ASSBIN_MESH_HAS_COLOR_BASE << n;\n    }\n    function markBones(scene) {\n      for (let i in scene.mMeshes) {\n        var mesh = scene.mMeshes[i];\n        for (let k in mesh.mBones) {\n          var boneNode = scene.findNode(mesh.mBones[k].mName);\n          if (boneNode) boneNode.isBone = true;\n        }\n      }\n    }\n    function cloneTreeToBones(root, scene) {\n      var rootBone = new Bone();\n      rootBone.matrix.copy(root.matrix);\n      rootBone.matrixWorld.copy(root.matrixWorld);\n      rootBone.position.copy(root.position);\n      rootBone.quaternion.copy(root.quaternion);\n      rootBone.scale.copy(root.scale);\n      scene.nodeCount++;\n      rootBone.name = \"bone_\" + root.name + scene.nodeCount.toString();\n      if (!scene.nodeToBoneMap[root.name]) scene.nodeToBoneMap[root.name] = [];\n      scene.nodeToBoneMap[root.name].push(rootBone);\n      for (let i in root.children) {\n        var child = cloneTreeToBones(root.children[i], scene);\n        rootBone.add(child);\n      }\n      return rootBone;\n    }\n    function sortWeights(indexes, weights) {\n      var pairs = [];\n      for (let i = 0; i < indexes.length; i++) {\n        pairs.push({\n          i: indexes[i],\n          w: weights[i]\n        });\n      }\n      pairs.sort(function (a, b) {\n        return b.w - a.w;\n      });\n      while (pairs.length < 4) {\n        pairs.push({\n          i: 0,\n          w: 0\n        });\n      }\n      if (pairs.length > 4) pairs.length = 4;\n      var sum = 0;\n      for (let i = 0; i < 4; i++) {\n        sum += pairs[i].w * pairs[i].w;\n      }\n      sum = Math.sqrt(sum);\n      for (let i = 0; i < 4; i++) {\n        pairs[i].w = pairs[i].w / sum;\n        indexes[i] = pairs[i].i;\n        weights[i] = pairs[i].w;\n      }\n    }\n    function findMatchingBone(root, name) {\n      if (root.name.indexOf(\"bone_\" + name) == 0) return root;\n      for (let i in root.children) {\n        var ret = findMatchingBone(root.children[i], name);\n        if (ret) return ret;\n      }\n      return void 0;\n    }\n    class aiMesh {\n      constructor() {\n        this.mPrimitiveTypes = 0;\n        this.mNumVertices = 0;\n        this.mNumFaces = 0;\n        this.mNumBones = 0;\n        this.mMaterialIndex = 0;\n        this.mVertices = [];\n        this.mNormals = [];\n        this.mTangents = [];\n        this.mBitangents = [];\n        this.mColors = [[]];\n        this.mTextureCoords = [[]];\n        this.mFaces = [];\n        this.mBones = [];\n        this.hookupSkeletons = function (scene) {\n          if (this.mBones.length == 0) return;\n          var allBones = [];\n          var offsetMatrix = [];\n          var skeletonRoot = scene.findNode(this.mBones[0].mName);\n          while (skeletonRoot.mParent && skeletonRoot.mParent.isBone) {\n            skeletonRoot = skeletonRoot.mParent;\n          }\n          var threeSkeletonRoot = skeletonRoot.toTHREE(scene);\n          var threeSkeletonRootBone = cloneTreeToBones(threeSkeletonRoot, scene);\n          this.threeNode.add(threeSkeletonRootBone);\n          for (let i = 0; i < this.mBones.length; i++) {\n            var bone = findMatchingBone(threeSkeletonRootBone, this.mBones[i].mName);\n            if (bone) {\n              var tbone = bone;\n              allBones.push(tbone);\n              offsetMatrix.push(this.mBones[i].mOffsetMatrix.toTHREE());\n            } else {\n              var skeletonRoot = scene.findNode(this.mBones[i].mName);\n              if (!skeletonRoot) return;\n              var threeSkeletonRoot = skeletonRoot.toTHREE(scene);\n              var threeSkeletonRootBone = cloneTreeToBones(threeSkeletonRoot, scene);\n              this.threeNode.add(threeSkeletonRootBone);\n              var bone = findMatchingBone(threeSkeletonRootBone, this.mBones[i].mName);\n              var tbone = bone;\n              allBones.push(tbone);\n              offsetMatrix.push(this.mBones[i].mOffsetMatrix.toTHREE());\n            }\n          }\n          var skeleton = new Skeleton(allBones, offsetMatrix);\n          this.threeNode.bind(skeleton, new Matrix4());\n          this.threeNode.material.skinning = true;\n        };\n        this.toTHREE = function (scene) {\n          if (this.threeNode) return this.threeNode;\n          var geometry = new BufferGeometry();\n          var mat;\n          if (scene.mMaterials[this.mMaterialIndex]) mat = scene.mMaterials[this.mMaterialIndex].toTHREE(scene);else mat = new MeshLambertMaterial();\n          geometry.setIndex(new BufferAttribute(new Uint32Array(this.mIndexArray), 1));\n          geometry.setAttribute(\"position\", new BufferAttribute(this.mVertexBuffer, 3));\n          if (this.mNormalBuffer && this.mNormalBuffer.length > 0) {\n            geometry.setAttribute(\"normal\", new BufferAttribute(this.mNormalBuffer, 3));\n          }\n          if (this.mColorBuffer && this.mColorBuffer.length > 0) {\n            geometry.setAttribute(\"color\", new BufferAttribute(this.mColorBuffer, 4));\n          }\n          if (this.mTexCoordsBuffers[0] && this.mTexCoordsBuffers[0].length > 0) {\n            geometry.setAttribute(\"uv\", new BufferAttribute(new Float32Array(this.mTexCoordsBuffers[0]), 2));\n          }\n          if (this.mTexCoordsBuffers[1] && this.mTexCoordsBuffers[1].length > 0) {\n            geometry.setAttribute(\"uv1\", new BufferAttribute(new Float32Array(this.mTexCoordsBuffers[1]), 2));\n          }\n          if (this.mTangentBuffer && this.mTangentBuffer.length > 0) {\n            geometry.setAttribute(\"tangents\", new BufferAttribute(this.mTangentBuffer, 3));\n          }\n          if (this.mBitangentBuffer && this.mBitangentBuffer.length > 0) {\n            geometry.setAttribute(\"bitangents\", new BufferAttribute(this.mBitangentBuffer, 3));\n          }\n          if (this.mBones.length > 0) {\n            var weights = [];\n            var bones = [];\n            for (let i = 0; i < this.mBones.length; i++) {\n              for (let j = 0; j < this.mBones[i].mWeights.length; j++) {\n                var weight = this.mBones[i].mWeights[j];\n                if (weight) {\n                  if (!weights[weight.mVertexId]) weights[weight.mVertexId] = [];\n                  if (!bones[weight.mVertexId]) bones[weight.mVertexId] = [];\n                  weights[weight.mVertexId].push(weight.mWeight);\n                  bones[weight.mVertexId].push(parseInt(i));\n                }\n              }\n            }\n            for (let i in bones) {\n              sortWeights(bones[i], weights[i]);\n            }\n            var _weights = [];\n            var _bones = [];\n            for (let i = 0; i < weights.length; i++) {\n              for (let j = 0; j < 4; j++) {\n                if (weights[i] && bones[i]) {\n                  _weights.push(weights[i][j]);\n                  _bones.push(bones[i][j]);\n                } else {\n                  _weights.push(0);\n                  _bones.push(0);\n                }\n              }\n            }\n            geometry.setAttribute(\"skinWeight\", new BufferAttribute(new Float32Array(_weights), BONESPERVERT));\n            geometry.setAttribute(\"skinIndex\", new BufferAttribute(new Float32Array(_bones), BONESPERVERT));\n          }\n          var mesh;\n          if (this.mBones.length == 0) mesh = new Mesh(geometry, mat);\n          if (this.mBones.length > 0) {\n            mesh = new SkinnedMesh(geometry, mat);\n            mesh.normalizeSkinWeights();\n          }\n          this.threeNode = mesh;\n          return mesh;\n        };\n      }\n    }\n    class aiFace {\n      constructor() {\n        this.mNumIndices = 0;\n        this.mIndices = [];\n      }\n    }\n    class aiVector3D {\n      constructor() {\n        this.x = 0;\n        this.y = 0;\n        this.z = 0;\n        this.toTHREE = function () {\n          return new Vector3(this.x, this.y, this.z);\n        };\n      }\n    }\n    class aiColor3D {\n      constructor() {\n        this.r = 0;\n        this.g = 0;\n        this.b = 0;\n        this.a = 0;\n        this.toTHREE = function () {\n          return new Color(this.r, this.g, this.b);\n        };\n      }\n    }\n    class aiQuaternion {\n      constructor() {\n        this.x = 0;\n        this.y = 0;\n        this.z = 0;\n        this.w = 0;\n        this.toTHREE = function () {\n          return new Quaternion(this.x, this.y, this.z, this.w);\n        };\n      }\n    }\n    class aiVertexWeight {\n      constructor() {\n        this.mVertexId = 0;\n        this.mWeight = 0;\n      }\n    }\n    class aiString {\n      constructor() {\n        this.data = [];\n        this.toString = function () {\n          var str = \"\";\n          this.data.forEach(function (i) {\n            str += String.fromCharCode(i);\n          });\n          return str.replace(/[^\\x20-\\x7E]+/g, \"\");\n        };\n      }\n    }\n    class aiVectorKey {\n      constructor() {\n        this.mTime = 0;\n        this.mValue = null;\n      }\n    }\n    class aiQuatKey {\n      constructor() {\n        this.mTime = 0;\n        this.mValue = null;\n      }\n    }\n    class aiNode {\n      constructor() {\n        this.mName = \"\";\n        this.mTransformation = [];\n        this.mNumChildren = 0;\n        this.mNumMeshes = 0;\n        this.mMeshes = [];\n        this.mChildren = [];\n        this.toTHREE = function (scene) {\n          if (this.threeNode) return this.threeNode;\n          var o = new Object3D();\n          o.name = this.mName;\n          o.matrix = this.mTransformation.toTHREE();\n          for (let i = 0; i < this.mChildren.length; i++) {\n            o.add(this.mChildren[i].toTHREE(scene));\n          }\n          for (let i = 0; i < this.mMeshes.length; i++) {\n            o.add(scene.mMeshes[this.mMeshes[i]].toTHREE(scene));\n          }\n          this.threeNode = o;\n          o.matrix.decompose(o.position, o.quaternion, o.scale);\n          return o;\n        };\n      }\n    }\n    class aiBone {\n      constructor() {\n        this.mName = \"\";\n        this.mNumWeights = 0;\n        this.mOffsetMatrix = 0;\n      }\n    }\n    class aiMaterialProperty {\n      constructor() {\n        this.mKey = \"\";\n        this.mSemantic = 0;\n        this.mIndex = 0;\n        this.mData = [];\n        this.mDataLength = 0;\n        this.mType = 0;\n        this.dataAsColor = function () {\n          var array = new Uint8Array(this.mData).buffer;\n          var reader = new DataView(array);\n          var r = reader.getFloat32(0, true);\n          var g = reader.getFloat32(4, true);\n          var b = reader.getFloat32(8, true);\n          return new Color(r, g, b);\n        };\n        this.dataAsFloat = function () {\n          var array = new Uint8Array(this.mData).buffer;\n          var reader = new DataView(array);\n          var r = reader.getFloat32(0, true);\n          return r;\n        };\n        this.dataAsBool = function () {\n          var array = new Uint8Array(this.mData).buffer;\n          var reader = new DataView(array);\n          var r = reader.getFloat32(0, true);\n          return !!r;\n        };\n        this.dataAsString = function () {\n          var s = new aiString();\n          s.data = this.mData;\n          return s.toString();\n        };\n        this.dataAsMap = function () {\n          var s = new aiString();\n          s.data = this.mData;\n          var path2 = s.toString();\n          path2 = path2.replace(/\\\\/g, \"/\");\n          if (path2.indexOf(\"/\") != -1) {\n            path2 = path2.substr(path2.lastIndexOf(\"/\") + 1);\n          }\n          return textureLoader.load(path2);\n        };\n      }\n    }\n    var namePropMapping = {\n      \"?mat.name\": \"name\",\n      \"$mat.shadingm\": \"shading\",\n      \"$mat.twosided\": \"twoSided\",\n      \"$mat.wireframe\": \"wireframe\",\n      \"$clr.ambient\": \"ambient\",\n      \"$clr.diffuse\": \"color\",\n      \"$clr.specular\": \"specular\",\n      \"$clr.emissive\": \"emissive\",\n      \"$clr.transparent\": \"transparent\",\n      \"$clr.reflective\": \"reflect\",\n      \"$mat.shininess\": \"shininess\",\n      \"$mat.reflectivity\": \"reflectivity\",\n      \"$mat.refracti\": \"refraction\",\n      \"$tex.file\": \"map\"\n    };\n    var nameTypeMapping = {\n      \"?mat.name\": \"string\",\n      \"$mat.shadingm\": \"bool\",\n      \"$mat.twosided\": \"bool\",\n      \"$mat.wireframe\": \"bool\",\n      \"$clr.ambient\": \"color\",\n      \"$clr.diffuse\": \"color\",\n      \"$clr.specular\": \"color\",\n      \"$clr.emissive\": \"color\",\n      \"$clr.transparent\": \"color\",\n      \"$clr.reflective\": \"color\",\n      \"$mat.shininess\": \"float\",\n      \"$mat.reflectivity\": \"float\",\n      \"$mat.refracti\": \"float\",\n      \"$tex.file\": \"map\"\n    };\n    class aiMaterial {\n      constructor() {\n        this.mNumAllocated = 0;\n        this.mNumProperties = 0;\n        this.mProperties = [];\n        this.toTHREE = function () {\n          var mat = new MeshPhongMaterial();\n          for (let i = 0; i < this.mProperties.length; i++) {\n            if (nameTypeMapping[this.mProperties[i].mKey] == \"float\") {\n              mat[namePropMapping[this.mProperties[i].mKey]] = this.mProperties[i].dataAsFloat();\n            }\n            if (nameTypeMapping[this.mProperties[i].mKey] == \"color\") {\n              mat[namePropMapping[this.mProperties[i].mKey]] = this.mProperties[i].dataAsColor();\n            }\n            if (nameTypeMapping[this.mProperties[i].mKey] == \"bool\") {\n              mat[namePropMapping[this.mProperties[i].mKey]] = this.mProperties[i].dataAsBool();\n            }\n            if (nameTypeMapping[this.mProperties[i].mKey] == \"string\") {\n              mat[namePropMapping[this.mProperties[i].mKey]] = this.mProperties[i].dataAsString();\n            }\n            if (nameTypeMapping[this.mProperties[i].mKey] == \"map\") {\n              var prop = this.mProperties[i];\n              if (prop.mSemantic == aiTextureType_DIFFUSE) mat.map = this.mProperties[i].dataAsMap();\n              if (prop.mSemantic == aiTextureType_NORMALS) mat.normalMap = this.mProperties[i].dataAsMap();\n              if (prop.mSemantic == aiTextureType_LIGHTMAP) mat.lightMap = this.mProperties[i].dataAsMap();\n              if (prop.mSemantic == aiTextureType_OPACITY) mat.alphaMap = this.mProperties[i].dataAsMap();\n            }\n          }\n          mat.ambient.r = 0.53;\n          mat.ambient.g = 0.53;\n          mat.ambient.b = 0.53;\n          mat.color.r = 1;\n          mat.color.g = 1;\n          mat.color.b = 1;\n          return mat;\n        };\n      }\n    }\n    function veclerp(v1, v2, l) {\n      var v = new Vector3();\n      var lm1 = 1 - l;\n      v.x = v1.x * l + v2.x * lm1;\n      v.y = v1.y * l + v2.y * lm1;\n      v.z = v1.z * l + v2.z * lm1;\n      return v;\n    }\n    function quatlerp(q1, q2, l) {\n      return q1.clone().slerp(q2, 1 - l);\n    }\n    function sampleTrack(keys, time, lne, lerp) {\n      if (keys.length == 1) return keys[0].mValue.toTHREE();\n      var dist = Infinity;\n      var key = null;\n      var nextKey = null;\n      for (let i = 0; i < keys.length; i++) {\n        var timeDist = Math.abs(keys[i].mTime - time);\n        if (timeDist < dist && keys[i].mTime <= time) {\n          dist = timeDist;\n          key = keys[i];\n          nextKey = keys[i + 1];\n        }\n      }\n      if (!key) {\n        return null;\n      } else if (nextKey) {\n        var dT = nextKey.mTime - key.mTime;\n        var T = key.mTime - time;\n        var l = T / dT;\n        return lerp(key.mValue.toTHREE(), nextKey.mValue.toTHREE(), l);\n      } else {\n        nextKey = keys[0].clone();\n        nextKey.mTime += lne;\n        var dT = nextKey.mTime - key.mTime;\n        var T = key.mTime - time;\n        var l = T / dT;\n        return lerp(key.mValue.toTHREE(), nextKey.mValue.toTHREE(), l);\n      }\n    }\n    class aiNodeAnim {\n      constructor() {\n        this.mNodeName = \"\";\n        this.mNumPositionKeys = 0;\n        this.mNumRotationKeys = 0;\n        this.mNumScalingKeys = 0;\n        this.mPositionKeys = [];\n        this.mRotationKeys = [];\n        this.mScalingKeys = [];\n        this.mPreState = \"\";\n        this.mPostState = \"\";\n        this.init = function (tps) {\n          if (!tps) tps = 1;\n          function t(t2) {\n            t2.mTime /= tps;\n          }\n          this.mPositionKeys.forEach(t);\n          this.mRotationKeys.forEach(t);\n          this.mScalingKeys.forEach(t);\n        };\n        this.sortKeys = function () {\n          function comp(a, b) {\n            return a.mTime - b.mTime;\n          }\n          this.mPositionKeys.sort(comp);\n          this.mRotationKeys.sort(comp);\n          this.mScalingKeys.sort(comp);\n        };\n        this.getLength = function () {\n          return Math.max(Math.max.apply(null, this.mPositionKeys.map(function (a) {\n            return a.mTime;\n          })), Math.max.apply(null, this.mRotationKeys.map(function (a) {\n            return a.mTime;\n          })), Math.max.apply(null, this.mScalingKeys.map(function (a) {\n            return a.mTime;\n          })));\n        };\n        this.toTHREE = function (o) {\n          this.sortKeys();\n          var length = this.getLength();\n          var track = new Virtulous.KeyFrameTrack();\n          for (let i = 0; i < length; i += 0.05) {\n            var matrix = new Matrix4();\n            var time = i;\n            var pos = sampleTrack(this.mPositionKeys, time, length, veclerp);\n            var scale = sampleTrack(this.mScalingKeys, time, length, veclerp);\n            var rotation = sampleTrack(this.mRotationKeys, time, length, quatlerp);\n            matrix.compose(pos, rotation, scale);\n            var key = new Virtulous.KeyFrame(time, matrix);\n            track.addKey(key);\n          }\n          track.target = o.findNode(this.mNodeName).toTHREE();\n          var tracks = [track];\n          if (o.nodeToBoneMap[this.mNodeName]) {\n            for (let i = 0; i < o.nodeToBoneMap[this.mNodeName].length; i++) {\n              var t2 = track.clone();\n              t2.target = o.nodeToBoneMap[this.mNodeName][i];\n              tracks.push(t2);\n            }\n          }\n          return tracks;\n        };\n      }\n    }\n    class aiAnimation {\n      constructor() {\n        this.mName = \"\";\n        this.mDuration = 0;\n        this.mTicksPerSecond = 0;\n        this.mNumChannels = 0;\n        this.mChannels = [];\n        this.toTHREE = function (root) {\n          var animationHandle = new Virtulous.Animation();\n          for (let i in this.mChannels) {\n            this.mChannels[i].init(this.mTicksPerSecond);\n            var tracks = this.mChannels[i].toTHREE(root);\n            for (let j in tracks) {\n              tracks[j].init();\n              animationHandle.addTrack(tracks[j]);\n            }\n          }\n          animationHandle.length = Math.max.apply(null, animationHandle.tracks.map(function (e) {\n            return e.length;\n          }));\n          return animationHandle;\n        };\n      }\n    }\n    class aiTexture {\n      constructor() {\n        this.mWidth = 0;\n        this.mHeight = 0;\n        this.texAchFormatHint = [];\n        this.pcData = [];\n      }\n    }\n    class aiLight {\n      constructor() {\n        this.mName = \"\";\n        this.mType = 0;\n        this.mAttenuationConstant = 0;\n        this.mAttenuationLinear = 0;\n        this.mAttenuationQuadratic = 0;\n        this.mAngleInnerCone = 0;\n        this.mAngleOuterCone = 0;\n        this.mColorDiffuse = null;\n        this.mColorSpecular = null;\n        this.mColorAmbient = null;\n      }\n    }\n    class aiCamera {\n      constructor() {\n        this.mName = \"\";\n        this.mPosition = null;\n        this.mLookAt = null;\n        this.mUp = null;\n        this.mHorizontalFOV = 0;\n        this.mClipPlaneNear = 0;\n        this.mClipPlaneFar = 0;\n        this.mAspect = 0;\n      }\n    }\n    class aiScene {\n      constructor() {\n        this.versionMajor = 0;\n        this.versionMinor = 0;\n        this.versionRevision = 0;\n        this.compileFlags = 0;\n        this.mFlags = 0;\n        this.mNumMeshes = 0;\n        this.mNumMaterials = 0;\n        this.mNumAnimations = 0;\n        this.mNumTextures = 0;\n        this.mNumLights = 0;\n        this.mNumCameras = 0;\n        this.mRootNode = null;\n        this.mMeshes = [];\n        this.mMaterials = [];\n        this.mAnimations = [];\n        this.mLights = [];\n        this.mCameras = [];\n        this.nodeToBoneMap = {};\n        this.findNode = function (name, root) {\n          if (!root) {\n            root = this.mRootNode;\n          }\n          if (root.mName == name) {\n            return root;\n          }\n          for (let i = 0; i < root.mChildren.length; i++) {\n            var ret = this.findNode(name, root.mChildren[i]);\n            if (ret) return ret;\n          }\n          return null;\n        };\n        this.toTHREE = function () {\n          this.nodeCount = 0;\n          markBones(this);\n          var o = this.mRootNode.toTHREE(this);\n          for (let i in this.mMeshes) this.mMeshes[i].hookupSkeletons(this);\n          if (this.mAnimations.length > 0) {\n            var a = this.mAnimations[0].toTHREE(this);\n          }\n          return {\n            object: o,\n            animation: a\n          };\n        };\n      }\n    }\n    class aiMatrix4 {\n      constructor() {\n        this.elements = [[], [], [], []];\n        this.toTHREE = function () {\n          var m = new Matrix4();\n          for (let i = 0; i < 4; ++i) {\n            for (let i2 = 0; i2 < 4; ++i2) {\n              m.elements[i * 4 + i2] = this.elements[i2][i];\n            }\n          }\n          return m;\n        };\n      }\n    }\n    var littleEndian = true;\n    function readFloat(dataview) {\n      var val = dataview.getFloat32(dataview.readOffset, littleEndian);\n      dataview.readOffset += 4;\n      return val;\n    }\n    function Read_double(dataview) {\n      var val = dataview.getFloat64(dataview.readOffset, littleEndian);\n      dataview.readOffset += 8;\n      return val;\n    }\n    function Read_uint8_t(dataview) {\n      var val = dataview.getUint8(dataview.readOffset);\n      dataview.readOffset += 1;\n      return val;\n    }\n    function Read_uint16_t(dataview) {\n      var val = dataview.getUint16(dataview.readOffset, littleEndian);\n      dataview.readOffset += 2;\n      return val;\n    }\n    function Read_unsigned_int(dataview) {\n      var val = dataview.getUint32(dataview.readOffset, littleEndian);\n      dataview.readOffset += 4;\n      return val;\n    }\n    function Read_uint32_t(dataview) {\n      var val = dataview.getUint32(dataview.readOffset, littleEndian);\n      dataview.readOffset += 4;\n      return val;\n    }\n    function Read_aiVector3D(stream) {\n      var v = new aiVector3D();\n      v.x = readFloat(stream);\n      v.y = readFloat(stream);\n      v.z = readFloat(stream);\n      return v;\n    }\n    function Read_aiColor3D(stream) {\n      var c = new aiColor3D();\n      c.r = readFloat(stream);\n      c.g = readFloat(stream);\n      c.b = readFloat(stream);\n      return c;\n    }\n    function Read_aiQuaternion(stream) {\n      var v = new aiQuaternion();\n      v.w = readFloat(stream);\n      v.x = readFloat(stream);\n      v.y = readFloat(stream);\n      v.z = readFloat(stream);\n      return v;\n    }\n    function Read_aiString(stream) {\n      var s = new aiString();\n      var stringlengthbytes = Read_unsigned_int(stream);\n      stream.ReadBytes(s.data, 1, stringlengthbytes);\n      return s.toString();\n    }\n    function Read_aiVertexWeight(stream) {\n      var w = new aiVertexWeight();\n      w.mVertexId = Read_unsigned_int(stream);\n      w.mWeight = readFloat(stream);\n      return w;\n    }\n    function Read_aiMatrix4x4(stream) {\n      var m = new aiMatrix4();\n      for (let i = 0; i < 4; ++i) {\n        for (let i2 = 0; i2 < 4; ++i2) {\n          m.elements[i][i2] = readFloat(stream);\n        }\n      }\n      return m;\n    }\n    function Read_aiVectorKey(stream) {\n      var v = new aiVectorKey();\n      v.mTime = Read_double(stream);\n      v.mValue = Read_aiVector3D(stream);\n      return v;\n    }\n    function Read_aiQuatKey(stream) {\n      var v = new aiQuatKey();\n      v.mTime = Read_double(stream);\n      v.mValue = Read_aiQuaternion(stream);\n      return v;\n    }\n    function ReadArray_aiVertexWeight(stream, data, size) {\n      for (let i = 0; i < size; i++) data[i] = Read_aiVertexWeight(stream);\n    }\n    function ReadArray_aiVectorKey(stream, data, size) {\n      for (let i = 0; i < size; i++) data[i] = Read_aiVectorKey(stream);\n    }\n    function ReadArray_aiQuatKey(stream, data, size) {\n      for (let i = 0; i < size; i++) data[i] = Read_aiQuatKey(stream);\n    }\n    function ReadBounds(stream, T, n) {\n      return stream.Seek(sizeof(T) * n, aiOrigin_CUR);\n    }\n    function ai_assert(bool) {\n      if (!bool) throw \"asset failed\";\n    }\n    function ReadBinaryNode(stream, parent, depth) {\n      var chunkID = Read_uint32_t(stream);\n      ai_assert(chunkID == ASSBIN_CHUNK_AINODE);\n      Read_uint32_t(stream);\n      var node = new aiNode();\n      node.mParent = parent;\n      node.mDepth = depth;\n      node.mName = Read_aiString(stream);\n      node.mTransformation = Read_aiMatrix4x4(stream);\n      node.mNumChildren = Read_unsigned_int(stream);\n      node.mNumMeshes = Read_unsigned_int(stream);\n      if (node.mNumMeshes) {\n        node.mMeshes = [];\n        for (let i = 0; i < node.mNumMeshes; ++i) {\n          node.mMeshes[i] = Read_unsigned_int(stream);\n        }\n      }\n      if (node.mNumChildren) {\n        node.mChildren = [];\n        for (let i = 0; i < node.mNumChildren; ++i) {\n          var node2 = ReadBinaryNode(stream, node, depth++);\n          node.mChildren[i] = node2;\n        }\n      }\n      return node;\n    }\n    function ReadBinaryBone(stream, b) {\n      var chunkID = Read_uint32_t(stream);\n      ai_assert(chunkID == ASSBIN_CHUNK_AIBONE);\n      Read_uint32_t(stream);\n      b.mName = Read_aiString(stream);\n      b.mNumWeights = Read_unsigned_int(stream);\n      b.mOffsetMatrix = Read_aiMatrix4x4(stream);\n      if (shortened) {\n        ReadBounds(stream, b.mWeights, b.mNumWeights);\n      } else {\n        b.mWeights = [];\n        ReadArray_aiVertexWeight(stream, b.mWeights, b.mNumWeights);\n      }\n      return b;\n    }\n    function ReadBinaryMesh(stream, mesh) {\n      var chunkID = Read_uint32_t(stream);\n      ai_assert(chunkID == ASSBIN_CHUNK_AIMESH);\n      Read_uint32_t(stream);\n      mesh.mPrimitiveTypes = Read_unsigned_int(stream);\n      mesh.mNumVertices = Read_unsigned_int(stream);\n      mesh.mNumFaces = Read_unsigned_int(stream);\n      mesh.mNumBones = Read_unsigned_int(stream);\n      mesh.mMaterialIndex = Read_unsigned_int(stream);\n      mesh.mNumUVComponents = [];\n      var c = Read_unsigned_int(stream);\n      if (c & ASSBIN_MESH_HAS_POSITIONS) {\n        if (shortened) {\n          ReadBounds(stream, mesh.mVertices, mesh.mNumVertices);\n        } else {\n          mesh.mVertices = [];\n          mesh.mVertexBuffer = stream.subArray32(stream.readOffset, stream.readOffset + mesh.mNumVertices * 3 * 4);\n          stream.Seek(mesh.mNumVertices * 3 * 4, aiOrigin_CUR);\n        }\n      }\n      if (c & ASSBIN_MESH_HAS_NORMALS) {\n        if (shortened) {\n          ReadBounds(stream, mesh.mNormals, mesh.mNumVertices);\n        } else {\n          mesh.mNormals = [];\n          mesh.mNormalBuffer = stream.subArray32(stream.readOffset, stream.readOffset + mesh.mNumVertices * 3 * 4);\n          stream.Seek(mesh.mNumVertices * 3 * 4, aiOrigin_CUR);\n        }\n      }\n      if (c & ASSBIN_MESH_HAS_TANGENTS_AND_BITANGENTS) {\n        if (shortened) {\n          ReadBounds(stream, mesh.mTangents, mesh.mNumVertices);\n          ReadBounds(stream, mesh.mBitangents, mesh.mNumVertices);\n        } else {\n          mesh.mTangents = [];\n          mesh.mTangentBuffer = stream.subArray32(stream.readOffset, stream.readOffset + mesh.mNumVertices * 3 * 4);\n          stream.Seek(mesh.mNumVertices * 3 * 4, aiOrigin_CUR);\n          mesh.mBitangents = [];\n          mesh.mBitangentBuffer = stream.subArray32(stream.readOffset, stream.readOffset + mesh.mNumVertices * 3 * 4);\n          stream.Seek(mesh.mNumVertices * 3 * 4, aiOrigin_CUR);\n        }\n      }\n      for (let n = 0; n < AI_MAX_NUMBER_OF_COLOR_SETS; ++n) {\n        if (!(c & ASSBIN_MESH_HAS_COLOR(n))) break;\n        if (shortened) {\n          ReadBounds(stream, mesh.mColors[n], mesh.mNumVertices);\n        } else {\n          mesh.mColors[n] = [];\n          mesh.mColorBuffer = stream.subArray32(stream.readOffset, stream.readOffset + mesh.mNumVertices * 4 * 4);\n          stream.Seek(mesh.mNumVertices * 4 * 4, aiOrigin_CUR);\n        }\n      }\n      mesh.mTexCoordsBuffers = [];\n      for (let n = 0; n < AI_MAX_NUMBER_OF_TEXTURECOORDS; ++n) {\n        if (!(c & ASSBIN_MESH_HAS_TEXCOORD(n))) break;\n        mesh.mNumUVComponents[n] = Read_unsigned_int(stream);\n        if (shortened) {\n          ReadBounds(stream, mesh.mTextureCoords[n], mesh.mNumVertices);\n        } else {\n          mesh.mTextureCoords[n] = [];\n          mesh.mTexCoordsBuffers[n] = [];\n          for (let uv = 0; uv < mesh.mNumVertices; uv++) {\n            mesh.mTexCoordsBuffers[n].push(readFloat(stream));\n            mesh.mTexCoordsBuffers[n].push(readFloat(stream));\n            readFloat(stream);\n          }\n        }\n      }\n      if (shortened) {\n        Read_unsigned_int(stream);\n      } else {\n        mesh.mFaces = [];\n        mesh.mIndexArray = [];\n        for (let i = 0; i < mesh.mNumFaces; ++i) {\n          var f = mesh.mFaces[i] = new aiFace();\n          f.mNumIndices = Read_uint16_t(stream);\n          f.mIndices = [];\n          for (let a = 0; a < f.mNumIndices; ++a) {\n            if (mesh.mNumVertices < 1 << 16) {\n              f.mIndices[a] = Read_uint16_t(stream);\n            } else {\n              f.mIndices[a] = Read_unsigned_int(stream);\n            }\n          }\n          if (f.mNumIndices === 3) {\n            mesh.mIndexArray.push(f.mIndices[0]);\n            mesh.mIndexArray.push(f.mIndices[1]);\n            mesh.mIndexArray.push(f.mIndices[2]);\n          } else if (f.mNumIndices === 4) {\n            mesh.mIndexArray.push(f.mIndices[0]);\n            mesh.mIndexArray.push(f.mIndices[1]);\n            mesh.mIndexArray.push(f.mIndices[2]);\n            mesh.mIndexArray.push(f.mIndices[2]);\n            mesh.mIndexArray.push(f.mIndices[3]);\n            mesh.mIndexArray.push(f.mIndices[0]);\n          } else {\n            throw new Error(\"Sorry, can't currently triangulate polys. Use the triangulate preprocessor in Assimp.\");\n          }\n        }\n      }\n      if (mesh.mNumBones) {\n        mesh.mBones = [];\n        for (let a = 0; a < mesh.mNumBones; ++a) {\n          mesh.mBones[a] = new aiBone();\n          ReadBinaryBone(stream, mesh.mBones[a]);\n        }\n      }\n    }\n    function ReadBinaryMaterialProperty(stream, prop) {\n      var chunkID = Read_uint32_t(stream);\n      ai_assert(chunkID == ASSBIN_CHUNK_AIMATERIALPROPERTY);\n      Read_uint32_t(stream);\n      prop.mKey = Read_aiString(stream);\n      prop.mSemantic = Read_unsigned_int(stream);\n      prop.mIndex = Read_unsigned_int(stream);\n      prop.mDataLength = Read_unsigned_int(stream);\n      prop.mType = Read_unsigned_int(stream);\n      prop.mData = [];\n      stream.ReadBytes(prop.mData, 1, prop.mDataLength);\n    }\n    function ReadBinaryMaterial(stream, mat) {\n      var chunkID = Read_uint32_t(stream);\n      ai_assert(chunkID == ASSBIN_CHUNK_AIMATERIAL);\n      Read_uint32_t(stream);\n      mat.mNumAllocated = mat.mNumProperties = Read_unsigned_int(stream);\n      if (mat.mNumProperties) {\n        if (mat.mProperties) {\n          delete mat.mProperties;\n        }\n        mat.mProperties = [];\n        for (let i = 0; i < mat.mNumProperties; ++i) {\n          mat.mProperties[i] = new aiMaterialProperty();\n          ReadBinaryMaterialProperty(stream, mat.mProperties[i]);\n        }\n      }\n    }\n    function ReadBinaryNodeAnim(stream, nd) {\n      var chunkID = Read_uint32_t(stream);\n      ai_assert(chunkID == ASSBIN_CHUNK_AINODEANIM);\n      Read_uint32_t(stream);\n      nd.mNodeName = Read_aiString(stream);\n      nd.mNumPositionKeys = Read_unsigned_int(stream);\n      nd.mNumRotationKeys = Read_unsigned_int(stream);\n      nd.mNumScalingKeys = Read_unsigned_int(stream);\n      nd.mPreState = Read_unsigned_int(stream);\n      nd.mPostState = Read_unsigned_int(stream);\n      if (nd.mNumPositionKeys) {\n        if (shortened) {\n          ReadBounds(stream, nd.mPositionKeys, nd.mNumPositionKeys);\n        } else {\n          nd.mPositionKeys = [];\n          ReadArray_aiVectorKey(stream, nd.mPositionKeys, nd.mNumPositionKeys);\n        }\n      }\n      if (nd.mNumRotationKeys) {\n        if (shortened) {\n          ReadBounds(stream, nd.mRotationKeys, nd.mNumRotationKeys);\n        } else {\n          nd.mRotationKeys = [];\n          ReadArray_aiQuatKey(stream, nd.mRotationKeys, nd.mNumRotationKeys);\n        }\n      }\n      if (nd.mNumScalingKeys) {\n        if (shortened) {\n          ReadBounds(stream, nd.mScalingKeys, nd.mNumScalingKeys);\n        } else {\n          nd.mScalingKeys = [];\n          ReadArray_aiVectorKey(stream, nd.mScalingKeys, nd.mNumScalingKeys);\n        }\n      }\n    }\n    function ReadBinaryAnim(stream, anim) {\n      var chunkID = Read_uint32_t(stream);\n      ai_assert(chunkID == ASSBIN_CHUNK_AIANIMATION);\n      Read_uint32_t(stream);\n      anim.mName = Read_aiString(stream);\n      anim.mDuration = Read_double(stream);\n      anim.mTicksPerSecond = Read_double(stream);\n      anim.mNumChannels = Read_unsigned_int(stream);\n      if (anim.mNumChannels) {\n        anim.mChannels = [];\n        for (let a = 0; a < anim.mNumChannels; ++a) {\n          anim.mChannels[a] = new aiNodeAnim();\n          ReadBinaryNodeAnim(stream, anim.mChannels[a]);\n        }\n      }\n    }\n    function ReadBinaryTexture(stream, tex) {\n      var chunkID = Read_uint32_t(stream);\n      ai_assert(chunkID == ASSBIN_CHUNK_AITEXTURE);\n      Read_uint32_t(stream);\n      tex.mWidth = Read_unsigned_int(stream);\n      tex.mHeight = Read_unsigned_int(stream);\n      stream.ReadBytes(tex.achFormatHint, 1, 4);\n      if (!shortened) {\n        if (!tex.mHeight) {\n          tex.pcData = [];\n          stream.ReadBytes(tex.pcData, 1, tex.mWidth);\n        } else {\n          tex.pcData = [];\n          stream.ReadBytes(tex.pcData, 1, tex.mWidth * tex.mHeight * 4);\n        }\n      }\n    }\n    function ReadBinaryLight(stream, l) {\n      var chunkID = Read_uint32_t(stream);\n      ai_assert(chunkID == ASSBIN_CHUNK_AILIGHT);\n      Read_uint32_t(stream);\n      l.mName = Read_aiString(stream);\n      l.mType = Read_unsigned_int(stream);\n      if (l.mType != aiLightSource_DIRECTIONAL) {\n        l.mAttenuationConstant = readFloat(stream);\n        l.mAttenuationLinear = readFloat(stream);\n        l.mAttenuationQuadratic = readFloat(stream);\n      }\n      l.mColorDiffuse = Read_aiColor3D(stream);\n      l.mColorSpecular = Read_aiColor3D(stream);\n      l.mColorAmbient = Read_aiColor3D(stream);\n      if (l.mType == aiLightSource_SPOT) {\n        l.mAngleInnerCone = readFloat(stream);\n        l.mAngleOuterCone = readFloat(stream);\n      }\n    }\n    function ReadBinaryCamera(stream, cam) {\n      var chunkID = Read_uint32_t(stream);\n      ai_assert(chunkID == ASSBIN_CHUNK_AICAMERA);\n      Read_uint32_t(stream);\n      cam.mName = Read_aiString(stream);\n      cam.mPosition = Read_aiVector3D(stream);\n      cam.mLookAt = Read_aiVector3D(stream);\n      cam.mUp = Read_aiVector3D(stream);\n      cam.mHorizontalFOV = readFloat(stream);\n      cam.mClipPlaneNear = readFloat(stream);\n      cam.mClipPlaneFar = readFloat(stream);\n      cam.mAspect = readFloat(stream);\n    }\n    function ReadBinaryScene(stream, scene) {\n      var chunkID = Read_uint32_t(stream);\n      ai_assert(chunkID == ASSBIN_CHUNK_AISCENE);\n      Read_uint32_t(stream);\n      scene.mFlags = Read_unsigned_int(stream);\n      scene.mNumMeshes = Read_unsigned_int(stream);\n      scene.mNumMaterials = Read_unsigned_int(stream);\n      scene.mNumAnimations = Read_unsigned_int(stream);\n      scene.mNumTextures = Read_unsigned_int(stream);\n      scene.mNumLights = Read_unsigned_int(stream);\n      scene.mNumCameras = Read_unsigned_int(stream);\n      scene.mRootNode = new aiNode();\n      scene.mRootNode = ReadBinaryNode(stream, null, 0);\n      if (scene.mNumMeshes) {\n        scene.mMeshes = [];\n        for (let i = 0; i < scene.mNumMeshes; ++i) {\n          scene.mMeshes[i] = new aiMesh();\n          ReadBinaryMesh(stream, scene.mMeshes[i]);\n        }\n      }\n      if (scene.mNumMaterials) {\n        scene.mMaterials = [];\n        for (let i = 0; i < scene.mNumMaterials; ++i) {\n          scene.mMaterials[i] = new aiMaterial();\n          ReadBinaryMaterial(stream, scene.mMaterials[i]);\n        }\n      }\n      if (scene.mNumAnimations) {\n        scene.mAnimations = [];\n        for (let i = 0; i < scene.mNumAnimations; ++i) {\n          scene.mAnimations[i] = new aiAnimation();\n          ReadBinaryAnim(stream, scene.mAnimations[i]);\n        }\n      }\n      if (scene.mNumTextures) {\n        scene.mTextures = [];\n        for (let i = 0; i < scene.mNumTextures; ++i) {\n          scene.mTextures[i] = new aiTexture();\n          ReadBinaryTexture(stream, scene.mTextures[i]);\n        }\n      }\n      if (scene.mNumLights) {\n        scene.mLights = [];\n        for (let i = 0; i < scene.mNumLights; ++i) {\n          scene.mLights[i] = new aiLight();\n          ReadBinaryLight(stream, scene.mLights[i]);\n        }\n      }\n      if (scene.mNumCameras) {\n        scene.mCameras = [];\n        for (let i = 0; i < scene.mNumCameras; ++i) {\n          scene.mCameras[i] = new aiCamera();\n          ReadBinaryCamera(stream, scene.mCameras[i]);\n        }\n      }\n    }\n    var aiOrigin_CUR = 0;\n    var aiOrigin_BEG = 1;\n    function extendStream(stream) {\n      stream.readOffset = 0;\n      stream.Seek = function (off, ori) {\n        if (ori == aiOrigin_CUR) {\n          stream.readOffset += off;\n        }\n        if (ori == aiOrigin_BEG) {\n          stream.readOffset = off;\n        }\n      };\n      stream.ReadBytes = function (buff, size, n) {\n        var bytes = size * n;\n        for (let i = 0; i < bytes; i++) buff[i] = Read_uint8_t(this);\n      };\n      stream.subArray32 = function (start, end) {\n        var buff = this.buffer;\n        var newbuff = buff.slice(start, end);\n        return new Float32Array(newbuff);\n      };\n      stream.subArrayUint16 = function (start, end) {\n        var buff = this.buffer;\n        var newbuff = buff.slice(start, end);\n        return new Uint16Array(newbuff);\n      };\n      stream.subArrayUint8 = function (start, end) {\n        var buff = this.buffer;\n        var newbuff = buff.slice(start, end);\n        return new Uint8Array(newbuff);\n      };\n      stream.subArrayUint32 = function (start, end) {\n        var buff = this.buffer;\n        var newbuff = buff.slice(start, end);\n        return new Uint32Array(newbuff);\n      };\n    }\n    var shortened, compressed;\n    function InternReadFile(pFiledata) {\n      var pScene = new aiScene();\n      var stream = new DataView(pFiledata);\n      extendStream(stream);\n      stream.Seek(44, aiOrigin_CUR);\n      pScene.versionMajor = Read_unsigned_int(stream);\n      pScene.versionMinor = Read_unsigned_int(stream);\n      pScene.versionRevision = Read_unsigned_int(stream);\n      pScene.compileFlags = Read_unsigned_int(stream);\n      shortened = Read_uint16_t(stream) > 0;\n      compressed = Read_uint16_t(stream) > 0;\n      if (shortened) throw \"Shortened binaries are not supported!\";\n      stream.Seek(256, aiOrigin_CUR);\n      stream.Seek(128, aiOrigin_CUR);\n      stream.Seek(64, aiOrigin_CUR);\n      if (compressed) {\n        var uncompressedSize = Read_uint32_t(stream);\n        var compressedSize = stream.FileSize() - stream.Tell();\n        var compressedData = [];\n        stream.Read(compressedData, 1, compressedSize);\n        var uncompressedData = [];\n        uncompress(uncompressedData, uncompressedSize, compressedData, compressedSize);\n        var buff = new ArrayBuffer(uncompressedData);\n        ReadBinaryScene(buff, pScene);\n      } else {\n        ReadBinaryScene(stream, pScene);\n      }\n      return pScene.toTHREE();\n    }\n    return InternReadFile(buffer);\n  }\n}\nexport { AssimpLoader };","map":{"version":3,"names":["Loader","LoaderUtils","FileLoader","TextureLoader","Vector3","Quaternion","Matrix4","Bone","Skeleton","BufferGeometry","MeshLambertMaterial","BufferAttribute","Mesh","SkinnedMesh","Color","Object3D","MeshPhongMaterial","AssimpLoader","load","url","onLoad","onProgress","onError","scope","path","extractUrlBase","loader","manager","setPath","setResponseType","setRequestHeader","requestHeader","setWithCredentials","withCredentials","buffer","parse","e","console","error","itemError","textureLoader","resourcePath","setCrossOrigin","crossOrigin","Virtulous","KeyFrame","constructor","time","matrix","clone","position","quaternion","scale","decompose","n","lerp","nextKey","time2","dist","l","l2","keypos","keyrot","key2pos","key2rot","tempAniPos","x","y","z","tempAniQuat","set","w","slerp","tempAniMatrix","compose","tempAniScale","KeyFrameTrack","keys","target","length","_accelTable","fps","addKey","key","push","init","sortKeys","j","i","parseFromThree","data","node","track","hierarchy","targets","parseFromCollada","sort","keySortFunc","a","b","t","reTarget","root","compareitor","TrackTargetNodeNameCompare","keySearchAccel","Math","floor","setTime","abs","key0","key1","matrixAutoUpdate","copy","matrixWorldNeedsUpdate","find","name","children","r","Animation","tracks","addTrack","max","ASSBIN_CHUNK_AICAMERA","ASSBIN_CHUNK_AILIGHT","ASSBIN_CHUNK_AITEXTURE","ASSBIN_CHUNK_AIMESH","ASSBIN_CHUNK_AINODEANIM","ASSBIN_CHUNK_AISCENE","ASSBIN_CHUNK_AIBONE","ASSBIN_CHUNK_AIANIMATION","ASSBIN_CHUNK_AINODE","ASSBIN_CHUNK_AIMATERIAL","ASSBIN_CHUNK_AIMATERIALPROPERTY","ASSBIN_MESH_HAS_POSITIONS","ASSBIN_MESH_HAS_NORMALS","ASSBIN_MESH_HAS_TANGENTS_AND_BITANGENTS","ASSBIN_MESH_HAS_TEXCOORD_BASE","ASSBIN_MESH_HAS_COLOR_BASE","AI_MAX_NUMBER_OF_COLOR_SETS","AI_MAX_NUMBER_OF_TEXTURECOORDS","aiLightSource_DIRECTIONAL","aiLightSource_SPOT","aiTextureType_DIFFUSE","aiTextureType_NORMALS","aiTextureType_OPACITY","aiTextureType_LIGHTMAP","BONESPERVERT","ASSBIN_MESH_HAS_TEXCOORD","ASSBIN_MESH_HAS_COLOR","markBones","scene","mMeshes","mesh","k","mBones","boneNode","findNode","mName","isBone","cloneTreeToBones","rootBone","matrixWorld","nodeCount","toString","nodeToBoneMap","child","add","sortWeights","indexes","weights","pairs","sum","sqrt","findMatchingBone","indexOf","ret","aiMesh","mPrimitiveTypes","mNumVertices","mNumFaces","mNumBones","mMaterialIndex","mVertices","mNormals","mTangents","mBitangents","mColors","mTextureCoords","mFaces","hookupSkeletons","allBones","offsetMatrix","skeletonRoot","mParent","threeSkeletonRoot","toTHREE","threeSkeletonRootBone","threeNode","bone","tbone","mOffsetMatrix","skeleton","bind","material","skinning","geometry","mat","mMaterials","setIndex","Uint32Array","mIndexArray","setAttribute","mVertexBuffer","mNormalBuffer","mColorBuffer","mTexCoordsBuffers","Float32Array","mTangentBuffer","mBitangentBuffer","bones","mWeights","weight","mVertexId","mWeight","parseInt","_weights","_bones","normalizeSkinWeights","aiFace","mNumIndices","mIndices","aiVector3D","aiColor3D","g","aiQuaternion","aiVertexWeight","aiString","str","forEach","String","fromCharCode","replace","aiVectorKey","mTime","mValue","aiQuatKey","aiNode","mTransformation","mNumChildren","mNumMeshes","mChildren","o","aiBone","mNumWeights","aiMaterialProperty","mKey","mSemantic","mIndex","mData","mDataLength","mType","dataAsColor","array","Uint8Array","reader","DataView","getFloat32","dataAsFloat","dataAsBool","dataAsString","s","dataAsMap","path2","substr","lastIndexOf","namePropMapping","nameTypeMapping","aiMaterial","mNumAllocated","mNumProperties","mProperties","prop","map","normalMap","lightMap","alphaMap","ambient","color","veclerp","v1","v2","v","lm1","quatlerp","q1","q2","sampleTrack","lne","Infinity","timeDist","dT","T","aiNodeAnim","mNodeName","mNumPositionKeys","mNumRotationKeys","mNumScalingKeys","mPositionKeys","mRotationKeys","mScalingKeys","mPreState","mPostState","tps","t2","comp","getLength","apply","pos","rotation","aiAnimation","mDuration","mTicksPerSecond","mNumChannels","mChannels","animationHandle","aiTexture","mWidth","mHeight","texAchFormatHint","pcData","aiLight","mAttenuationConstant","mAttenuationLinear","mAttenuationQuadratic","mAngleInnerCone","mAngleOuterCone","mColorDiffuse","mColorSpecular","mColorAmbient","aiCamera","mPosition","mLookAt","mUp","mHorizontalFOV","mClipPlaneNear","mClipPlaneFar","mAspect","aiScene","versionMajor","versionMinor","versionRevision","compileFlags","mFlags","mNumMaterials","mNumAnimations","mNumTextures","mNumLights","mNumCameras","mRootNode","mAnimations","mLights","mCameras","object","animation","aiMatrix4","elements","m","i2","littleEndian","readFloat","dataview","val","readOffset","Read_double","getFloat64","Read_uint8_t","getUint8","Read_uint16_t","getUint16","Read_unsigned_int","getUint32","Read_uint32_t","Read_aiVector3D","stream","Read_aiColor3D","c","Read_aiQuaternion","Read_aiString","stringlengthbytes","ReadBytes","Read_aiVertexWeight","Read_aiMatrix4x4","Read_aiVectorKey","Read_aiQuatKey","ReadArray_aiVertexWeight","size","ReadArray_aiVectorKey","ReadArray_aiQuatKey","ReadBounds","Seek","sizeof","aiOrigin_CUR","ai_assert","bool","ReadBinaryNode","parent","depth","chunkID","mDepth","node2","ReadBinaryBone","shortened","ReadBinaryMesh","mNumUVComponents","subArray32","uv","f","Error","ReadBinaryMaterialProperty","ReadBinaryMaterial","ReadBinaryNodeAnim","nd","ReadBinaryAnim","anim","ReadBinaryTexture","tex","achFormatHint","ReadBinaryLight","ReadBinaryCamera","cam","ReadBinaryScene","mTextures","aiOrigin_BEG","extendStream","off","ori","buff","bytes","start","end","newbuff","slice","subArrayUint16","Uint16Array","subArrayUint8","subArrayUint32","compressed","InternReadFile","pFiledata","pScene","uncompressedSize","compressedSize","FileSize","Tell","compressedData","Read","uncompressedData","uncompress","ArrayBuffer"],"sources":["/home/krug/Coding/JavaScript/Websites/Personal/personal/node_modules/.pnpm/three-stdlib@2.23.7_three@0.151.3/node_modules/three-stdlib/loaders/AssimpLoader.js"],"sourcesContent":["import { Loader, LoaderUtils, FileLoader, TextureLoader, Vector3, Quaternion, Matrix4, Bone, Skeleton, BufferGeometry, MeshLambertMaterial, BufferAttribute, Mesh, SkinnedMesh, Color, Object3D, MeshPhongMaterial } from \"three\";\nclass AssimpLoader extends Loader {\n  load(url, onLoad, onProgress, onError) {\n    var scope = this;\n    var path = scope.path === \"\" ? LoaderUtils.extractUrlBase(url) : scope.path;\n    var loader = new FileLoader(scope.manager);\n    loader.setPath(scope.path);\n    loader.setResponseType(\"arraybuffer\");\n    loader.setRequestHeader(scope.requestHeader);\n    loader.setWithCredentials(scope.withCredentials);\n    loader.load(\n      url,\n      function(buffer) {\n        try {\n          onLoad(scope.parse(buffer, path));\n        } catch (e) {\n          if (onError) {\n            onError(e);\n          } else {\n            console.error(e);\n          }\n          scope.manager.itemError(url);\n        }\n      },\n      onProgress,\n      onError\n    );\n  }\n  parse(buffer, path) {\n    var textureLoader = new TextureLoader(this.manager);\n    textureLoader.setPath(this.resourcePath || path).setCrossOrigin(this.crossOrigin);\n    var Virtulous = {};\n    Virtulous.KeyFrame = class {\n      constructor(time, matrix) {\n        this.time = time;\n        this.matrix = matrix.clone();\n        this.position = new Vector3();\n        this.quaternion = new Quaternion();\n        this.scale = new Vector3(1, 1, 1);\n        this.matrix.decompose(this.position, this.quaternion, this.scale);\n        this.clone = function() {\n          var n = new Virtulous.KeyFrame(this.time, this.matrix);\n          return n;\n        };\n        this.lerp = function(nextKey, time2) {\n          time2 -= this.time;\n          var dist = nextKey.time - this.time;\n          var l = time2 / dist;\n          var l2 = 1 - l;\n          var keypos = this.position;\n          var keyrot = this.quaternion;\n          var key2pos = nextKey.position;\n          var key2rot = nextKey.quaternion;\n          Virtulous.KeyFrame.tempAniPos.x = keypos.x * l2 + key2pos.x * l;\n          Virtulous.KeyFrame.tempAniPos.y = keypos.y * l2 + key2pos.y * l;\n          Virtulous.KeyFrame.tempAniPos.z = keypos.z * l2 + key2pos.z * l;\n          Virtulous.KeyFrame.tempAniQuat.set(keyrot.x, keyrot.y, keyrot.z, keyrot.w);\n          Virtulous.KeyFrame.tempAniQuat.slerp(key2rot, l);\n          return Virtulous.KeyFrame.tempAniMatrix.compose(\n            Virtulous.KeyFrame.tempAniPos,\n            Virtulous.KeyFrame.tempAniQuat,\n            Virtulous.KeyFrame.tempAniScale\n          );\n        };\n      }\n    };\n    Virtulous.KeyFrame.tempAniPos = new Vector3();\n    Virtulous.KeyFrame.tempAniQuat = new Quaternion();\n    Virtulous.KeyFrame.tempAniScale = new Vector3(1, 1, 1);\n    Virtulous.KeyFrame.tempAniMatrix = new Matrix4();\n    Virtulous.KeyFrameTrack = function() {\n      this.keys = [];\n      this.target = null;\n      this.time = 0;\n      this.length = 0;\n      this._accelTable = {};\n      this.fps = 20;\n      this.addKey = function(key) {\n        this.keys.push(key);\n      };\n      this.init = function() {\n        this.sortKeys();\n        if (this.keys.length > 0)\n          this.length = this.keys[this.keys.length - 1].time;\n        else\n          this.length = 0;\n        if (!this.fps)\n          return;\n        for (let j = 0; j < this.length * this.fps; j++) {\n          for (let i = 0; i < this.keys.length; i++) {\n            if (this.keys[i].time == j) {\n              this._accelTable[j] = i;\n              break;\n            } else if (this.keys[i].time < j / this.fps && this.keys[i + 1] && this.keys[i + 1].time >= j / this.fps) {\n              this._accelTable[j] = i;\n              break;\n            }\n          }\n        }\n      };\n      this.parseFromThree = function(data) {\n        var fps = data.fps;\n        this.target = data.node;\n        var track = data.hierarchy[0].keys;\n        for (let i = 0; i < track.length; i++) {\n          this.addKey(new Virtulous.KeyFrame(i / fps || track[i].time, track[i].targets[0].data));\n        }\n        this.init();\n      };\n      this.parseFromCollada = function(data) {\n        var track = data.keys;\n        var fps = this.fps;\n        for (let i = 0; i < track.length; i++) {\n          this.addKey(new Virtulous.KeyFrame(i / fps || track[i].time, track[i].matrix));\n        }\n        this.init();\n      };\n      this.sortKeys = function() {\n        this.keys.sort(this.keySortFunc);\n      };\n      this.keySortFunc = function(a, b) {\n        return a.time - b.time;\n      };\n      this.clone = function() {\n        var t = new Virtulous.KeyFrameTrack();\n        t.target = this.target;\n        t.time = this.time;\n        t.length = this.length;\n        for (let i = 0; i < this.keys.length; i++) {\n          t.addKey(this.keys[i].clone());\n        }\n        t.init();\n        return t;\n      };\n      this.reTarget = function(root, compareitor) {\n        if (!compareitor)\n          compareitor = Virtulous.TrackTargetNodeNameCompare;\n        this.target = compareitor(root, this.target);\n      };\n      this.keySearchAccel = function(time) {\n        time *= this.fps;\n        time = Math.floor(time);\n        return this._accelTable[time] || 0;\n      };\n      this.setTime = function(time) {\n        time = Math.abs(time);\n        if (this.length)\n          time = time % this.length + 0.05;\n        var key0 = null;\n        var key1 = null;\n        for (let i = this.keySearchAccel(time); i < this.keys.length; i++) {\n          if (this.keys[i].time == time) {\n            key0 = this.keys[i];\n            key1 = this.keys[i];\n            break;\n          } else if (this.keys[i].time < time && this.keys[i + 1] && this.keys[i + 1].time > time) {\n            key0 = this.keys[i];\n            key1 = this.keys[i + 1];\n            break;\n          } else if (this.keys[i].time < time && i == this.keys.length - 1) {\n            key0 = this.keys[i];\n            key1 = this.keys[0].clone();\n            key1.time += this.length + 0.05;\n            break;\n          }\n        }\n        if (key0 && key1 && key0 !== key1) {\n          this.target.matrixAutoUpdate = false;\n          this.target.matrix.copy(key0.lerp(key1, time));\n          this.target.matrixWorldNeedsUpdate = true;\n          return;\n        }\n        if (key0 && key1 && key0 == key1) {\n          this.target.matrixAutoUpdate = false;\n          this.target.matrix.copy(key0.matrix);\n          this.target.matrixWorldNeedsUpdate = true;\n          return;\n        }\n      };\n    };\n    Virtulous.TrackTargetNodeNameCompare = function(root, target) {\n      function find(node, name) {\n        if (node.name == name)\n          return node;\n        for (let i = 0; i < node.children.length; i++) {\n          var r = find(node.children[i], name);\n          if (r)\n            return r;\n        }\n        return null;\n      }\n      return find(root, target.name);\n    };\n    Virtulous.Animation = function() {\n      this.tracks = [];\n      this.length = 0;\n      this.addTrack = function(track) {\n        this.tracks.push(track);\n        this.length = Math.max(track.length, this.length);\n      };\n      this.setTime = function(time) {\n        this.time = time;\n        for (let i = 0; i < this.tracks.length; i++)\n          this.tracks[i].setTime(time);\n      };\n      this.clone = function(target, compareitor) {\n        if (!compareitor)\n          compareitor = Virtulous.TrackTargetNodeNameCompare;\n        var n = new Virtulous.Animation();\n        n.target = target;\n        for (let i = 0; i < this.tracks.length; i++) {\n          var track = this.tracks[i].clone();\n          track.reTarget(target, compareitor);\n          n.addTrack(track);\n        }\n        return n;\n      };\n    };\n    var ASSBIN_CHUNK_AICAMERA = 4660;\n    var ASSBIN_CHUNK_AILIGHT = 4661;\n    var ASSBIN_CHUNK_AITEXTURE = 4662;\n    var ASSBIN_CHUNK_AIMESH = 4663;\n    var ASSBIN_CHUNK_AINODEANIM = 4664;\n    var ASSBIN_CHUNK_AISCENE = 4665;\n    var ASSBIN_CHUNK_AIBONE = 4666;\n    var ASSBIN_CHUNK_AIANIMATION = 4667;\n    var ASSBIN_CHUNK_AINODE = 4668;\n    var ASSBIN_CHUNK_AIMATERIAL = 4669;\n    var ASSBIN_CHUNK_AIMATERIALPROPERTY = 4670;\n    var ASSBIN_MESH_HAS_POSITIONS = 1;\n    var ASSBIN_MESH_HAS_NORMALS = 2;\n    var ASSBIN_MESH_HAS_TANGENTS_AND_BITANGENTS = 4;\n    var ASSBIN_MESH_HAS_TEXCOORD_BASE = 256;\n    var ASSBIN_MESH_HAS_COLOR_BASE = 65536;\n    var AI_MAX_NUMBER_OF_COLOR_SETS = 1;\n    var AI_MAX_NUMBER_OF_TEXTURECOORDS = 4;\n    //! A directional light source has a well-defined direction\n    //! but is infinitely far away. That's quite a good\n    //! approximation for sun light.\n    var aiLightSource_DIRECTIONAL = 1;\n    //! A point light source has a well-defined position\n    //! in space but no direction - it emits light in all\n    //! directions. A normal bulb is a point light.\n    //! A spot light source emits light in a specific\n    //! angle. It has a position and a direction it is pointing to.\n    //! A good example for a spot light is a light spot in\n    //! sport arenas.\n    var aiLightSource_SPOT = 3;\n    //! The generic light level of the world, including the bounces\n    //! of all other lightsources.\n    //! Typically, there's at most one ambient light in a scene.\n    //! This light type doesn't have a valid position, direction, or\n    //! other properties, just a color.\n    var aiTextureType_DIFFUSE = 1;\n    var aiTextureType_NORMALS = 6;\n    var aiTextureType_OPACITY = 8;\n    var aiTextureType_LIGHTMAP = 10;\n    var BONESPERVERT = 4;\n    function ASSBIN_MESH_HAS_TEXCOORD(n) {\n      return ASSBIN_MESH_HAS_TEXCOORD_BASE << n;\n    }\n    function ASSBIN_MESH_HAS_COLOR(n) {\n      return ASSBIN_MESH_HAS_COLOR_BASE << n;\n    }\n    function markBones(scene) {\n      for (let i in scene.mMeshes) {\n        var mesh = scene.mMeshes[i];\n        for (let k in mesh.mBones) {\n          var boneNode = scene.findNode(mesh.mBones[k].mName);\n          if (boneNode)\n            boneNode.isBone = true;\n        }\n      }\n    }\n    function cloneTreeToBones(root, scene) {\n      var rootBone = new Bone();\n      rootBone.matrix.copy(root.matrix);\n      rootBone.matrixWorld.copy(root.matrixWorld);\n      rootBone.position.copy(root.position);\n      rootBone.quaternion.copy(root.quaternion);\n      rootBone.scale.copy(root.scale);\n      scene.nodeCount++;\n      rootBone.name = \"bone_\" + root.name + scene.nodeCount.toString();\n      if (!scene.nodeToBoneMap[root.name])\n        scene.nodeToBoneMap[root.name] = [];\n      scene.nodeToBoneMap[root.name].push(rootBone);\n      for (let i in root.children) {\n        var child = cloneTreeToBones(root.children[i], scene);\n        rootBone.add(child);\n      }\n      return rootBone;\n    }\n    function sortWeights(indexes, weights) {\n      var pairs = [];\n      for (let i = 0; i < indexes.length; i++) {\n        pairs.push({\n          i: indexes[i],\n          w: weights[i]\n        });\n      }\n      pairs.sort(function(a, b) {\n        return b.w - a.w;\n      });\n      while (pairs.length < 4) {\n        pairs.push({\n          i: 0,\n          w: 0\n        });\n      }\n      if (pairs.length > 4)\n        pairs.length = 4;\n      var sum = 0;\n      for (let i = 0; i < 4; i++) {\n        sum += pairs[i].w * pairs[i].w;\n      }\n      sum = Math.sqrt(sum);\n      for (let i = 0; i < 4; i++) {\n        pairs[i].w = pairs[i].w / sum;\n        indexes[i] = pairs[i].i;\n        weights[i] = pairs[i].w;\n      }\n    }\n    function findMatchingBone(root, name) {\n      if (root.name.indexOf(\"bone_\" + name) == 0)\n        return root;\n      for (let i in root.children) {\n        var ret = findMatchingBone(root.children[i], name);\n        if (ret)\n          return ret;\n      }\n      return void 0;\n    }\n    class aiMesh {\n      constructor() {\n        this.mPrimitiveTypes = 0;\n        this.mNumVertices = 0;\n        this.mNumFaces = 0;\n        this.mNumBones = 0;\n        this.mMaterialIndex = 0;\n        this.mVertices = [];\n        this.mNormals = [];\n        this.mTangents = [];\n        this.mBitangents = [];\n        this.mColors = [[]];\n        this.mTextureCoords = [[]];\n        this.mFaces = [];\n        this.mBones = [];\n        this.hookupSkeletons = function(scene) {\n          if (this.mBones.length == 0)\n            return;\n          var allBones = [];\n          var offsetMatrix = [];\n          var skeletonRoot = scene.findNode(this.mBones[0].mName);\n          while (skeletonRoot.mParent && skeletonRoot.mParent.isBone) {\n            skeletonRoot = skeletonRoot.mParent;\n          }\n          var threeSkeletonRoot = skeletonRoot.toTHREE(scene);\n          var threeSkeletonRootBone = cloneTreeToBones(threeSkeletonRoot, scene);\n          this.threeNode.add(threeSkeletonRootBone);\n          for (let i = 0; i < this.mBones.length; i++) {\n            var bone = findMatchingBone(threeSkeletonRootBone, this.mBones[i].mName);\n            if (bone) {\n              var tbone = bone;\n              allBones.push(tbone);\n              offsetMatrix.push(this.mBones[i].mOffsetMatrix.toTHREE());\n            } else {\n              var skeletonRoot = scene.findNode(this.mBones[i].mName);\n              if (!skeletonRoot)\n                return;\n              var threeSkeletonRoot = skeletonRoot.toTHREE(scene);\n              var threeSkeletonRootBone = cloneTreeToBones(threeSkeletonRoot, scene);\n              this.threeNode.add(threeSkeletonRootBone);\n              var bone = findMatchingBone(threeSkeletonRootBone, this.mBones[i].mName);\n              var tbone = bone;\n              allBones.push(tbone);\n              offsetMatrix.push(this.mBones[i].mOffsetMatrix.toTHREE());\n            }\n          }\n          var skeleton = new Skeleton(allBones, offsetMatrix);\n          this.threeNode.bind(skeleton, new Matrix4());\n          this.threeNode.material.skinning = true;\n        };\n        this.toTHREE = function(scene) {\n          if (this.threeNode)\n            return this.threeNode;\n          var geometry = new BufferGeometry();\n          var mat;\n          if (scene.mMaterials[this.mMaterialIndex])\n            mat = scene.mMaterials[this.mMaterialIndex].toTHREE(scene);\n          else\n            mat = new MeshLambertMaterial();\n          geometry.setIndex(new BufferAttribute(new Uint32Array(this.mIndexArray), 1));\n          geometry.setAttribute(\"position\", new BufferAttribute(this.mVertexBuffer, 3));\n          if (this.mNormalBuffer && this.mNormalBuffer.length > 0) {\n            geometry.setAttribute(\"normal\", new BufferAttribute(this.mNormalBuffer, 3));\n          }\n          if (this.mColorBuffer && this.mColorBuffer.length > 0) {\n            geometry.setAttribute(\"color\", new BufferAttribute(this.mColorBuffer, 4));\n          }\n          if (this.mTexCoordsBuffers[0] && this.mTexCoordsBuffers[0].length > 0) {\n            geometry.setAttribute(\"uv\", new BufferAttribute(new Float32Array(this.mTexCoordsBuffers[0]), 2));\n          }\n          if (this.mTexCoordsBuffers[1] && this.mTexCoordsBuffers[1].length > 0) {\n            geometry.setAttribute(\"uv1\", new BufferAttribute(new Float32Array(this.mTexCoordsBuffers[1]), 2));\n          }\n          if (this.mTangentBuffer && this.mTangentBuffer.length > 0) {\n            geometry.setAttribute(\"tangents\", new BufferAttribute(this.mTangentBuffer, 3));\n          }\n          if (this.mBitangentBuffer && this.mBitangentBuffer.length > 0) {\n            geometry.setAttribute(\"bitangents\", new BufferAttribute(this.mBitangentBuffer, 3));\n          }\n          if (this.mBones.length > 0) {\n            var weights = [];\n            var bones = [];\n            for (let i = 0; i < this.mBones.length; i++) {\n              for (let j = 0; j < this.mBones[i].mWeights.length; j++) {\n                var weight = this.mBones[i].mWeights[j];\n                if (weight) {\n                  if (!weights[weight.mVertexId])\n                    weights[weight.mVertexId] = [];\n                  if (!bones[weight.mVertexId])\n                    bones[weight.mVertexId] = [];\n                  weights[weight.mVertexId].push(weight.mWeight);\n                  bones[weight.mVertexId].push(parseInt(i));\n                }\n              }\n            }\n            for (let i in bones) {\n              sortWeights(bones[i], weights[i]);\n            }\n            var _weights = [];\n            var _bones = [];\n            for (let i = 0; i < weights.length; i++) {\n              for (let j = 0; j < 4; j++) {\n                if (weights[i] && bones[i]) {\n                  _weights.push(weights[i][j]);\n                  _bones.push(bones[i][j]);\n                } else {\n                  _weights.push(0);\n                  _bones.push(0);\n                }\n              }\n            }\n            geometry.setAttribute(\"skinWeight\", new BufferAttribute(new Float32Array(_weights), BONESPERVERT));\n            geometry.setAttribute(\"skinIndex\", new BufferAttribute(new Float32Array(_bones), BONESPERVERT));\n          }\n          var mesh;\n          if (this.mBones.length == 0)\n            mesh = new Mesh(geometry, mat);\n          if (this.mBones.length > 0) {\n            mesh = new SkinnedMesh(geometry, mat);\n            mesh.normalizeSkinWeights();\n          }\n          this.threeNode = mesh;\n          return mesh;\n        };\n      }\n    }\n    class aiFace {\n      constructor() {\n        this.mNumIndices = 0;\n        this.mIndices = [];\n      }\n    }\n    class aiVector3D {\n      constructor() {\n        this.x = 0;\n        this.y = 0;\n        this.z = 0;\n        this.toTHREE = function() {\n          return new Vector3(this.x, this.y, this.z);\n        };\n      }\n    }\n    class aiColor3D {\n      constructor() {\n        this.r = 0;\n        this.g = 0;\n        this.b = 0;\n        this.a = 0;\n        this.toTHREE = function() {\n          return new Color(this.r, this.g, this.b);\n        };\n      }\n    }\n    class aiQuaternion {\n      constructor() {\n        this.x = 0;\n        this.y = 0;\n        this.z = 0;\n        this.w = 0;\n        this.toTHREE = function() {\n          return new Quaternion(this.x, this.y, this.z, this.w);\n        };\n      }\n    }\n    class aiVertexWeight {\n      constructor() {\n        this.mVertexId = 0;\n        this.mWeight = 0;\n      }\n    }\n    class aiString {\n      constructor() {\n        this.data = [];\n        this.toString = function() {\n          var str = \"\";\n          this.data.forEach(function(i) {\n            str += String.fromCharCode(i);\n          });\n          return str.replace(/[^\\x20-\\x7E]+/g, \"\");\n        };\n      }\n    }\n    class aiVectorKey {\n      constructor() {\n        this.mTime = 0;\n        this.mValue = null;\n      }\n    }\n    class aiQuatKey {\n      constructor() {\n        this.mTime = 0;\n        this.mValue = null;\n      }\n    }\n    class aiNode {\n      constructor() {\n        this.mName = \"\";\n        this.mTransformation = [];\n        this.mNumChildren = 0;\n        this.mNumMeshes = 0;\n        this.mMeshes = [];\n        this.mChildren = [];\n        this.toTHREE = function(scene) {\n          if (this.threeNode)\n            return this.threeNode;\n          var o = new Object3D();\n          o.name = this.mName;\n          o.matrix = this.mTransformation.toTHREE();\n          for (let i = 0; i < this.mChildren.length; i++) {\n            o.add(this.mChildren[i].toTHREE(scene));\n          }\n          for (let i = 0; i < this.mMeshes.length; i++) {\n            o.add(scene.mMeshes[this.mMeshes[i]].toTHREE(scene));\n          }\n          this.threeNode = o;\n          o.matrix.decompose(o.position, o.quaternion, o.scale);\n          return o;\n        };\n      }\n    }\n    class aiBone {\n      constructor() {\n        this.mName = \"\";\n        this.mNumWeights = 0;\n        this.mOffsetMatrix = 0;\n      }\n    }\n    class aiMaterialProperty {\n      constructor() {\n        this.mKey = \"\";\n        this.mSemantic = 0;\n        this.mIndex = 0;\n        this.mData = [];\n        this.mDataLength = 0;\n        this.mType = 0;\n        this.dataAsColor = function() {\n          var array = new Uint8Array(this.mData).buffer;\n          var reader = new DataView(array);\n          var r = reader.getFloat32(0, true);\n          var g = reader.getFloat32(4, true);\n          var b = reader.getFloat32(8, true);\n          return new Color(r, g, b);\n        };\n        this.dataAsFloat = function() {\n          var array = new Uint8Array(this.mData).buffer;\n          var reader = new DataView(array);\n          var r = reader.getFloat32(0, true);\n          return r;\n        };\n        this.dataAsBool = function() {\n          var array = new Uint8Array(this.mData).buffer;\n          var reader = new DataView(array);\n          var r = reader.getFloat32(0, true);\n          return !!r;\n        };\n        this.dataAsString = function() {\n          var s = new aiString();\n          s.data = this.mData;\n          return s.toString();\n        };\n        this.dataAsMap = function() {\n          var s = new aiString();\n          s.data = this.mData;\n          var path2 = s.toString();\n          path2 = path2.replace(/\\\\/g, \"/\");\n          if (path2.indexOf(\"/\") != -1) {\n            path2 = path2.substr(path2.lastIndexOf(\"/\") + 1);\n          }\n          return textureLoader.load(path2);\n        };\n      }\n    }\n    var namePropMapping = {\n      \"?mat.name\": \"name\",\n      \"$mat.shadingm\": \"shading\",\n      \"$mat.twosided\": \"twoSided\",\n      \"$mat.wireframe\": \"wireframe\",\n      \"$clr.ambient\": \"ambient\",\n      \"$clr.diffuse\": \"color\",\n      \"$clr.specular\": \"specular\",\n      \"$clr.emissive\": \"emissive\",\n      \"$clr.transparent\": \"transparent\",\n      \"$clr.reflective\": \"reflect\",\n      \"$mat.shininess\": \"shininess\",\n      \"$mat.reflectivity\": \"reflectivity\",\n      \"$mat.refracti\": \"refraction\",\n      \"$tex.file\": \"map\"\n    };\n    var nameTypeMapping = {\n      \"?mat.name\": \"string\",\n      \"$mat.shadingm\": \"bool\",\n      \"$mat.twosided\": \"bool\",\n      \"$mat.wireframe\": \"bool\",\n      \"$clr.ambient\": \"color\",\n      \"$clr.diffuse\": \"color\",\n      \"$clr.specular\": \"color\",\n      \"$clr.emissive\": \"color\",\n      \"$clr.transparent\": \"color\",\n      \"$clr.reflective\": \"color\",\n      \"$mat.shininess\": \"float\",\n      \"$mat.reflectivity\": \"float\",\n      \"$mat.refracti\": \"float\",\n      \"$tex.file\": \"map\"\n    };\n    class aiMaterial {\n      constructor() {\n        this.mNumAllocated = 0;\n        this.mNumProperties = 0;\n        this.mProperties = [];\n        this.toTHREE = function() {\n          var mat = new MeshPhongMaterial();\n          for (let i = 0; i < this.mProperties.length; i++) {\n            if (nameTypeMapping[this.mProperties[i].mKey] == \"float\") {\n              mat[namePropMapping[this.mProperties[i].mKey]] = this.mProperties[i].dataAsFloat();\n            }\n            if (nameTypeMapping[this.mProperties[i].mKey] == \"color\") {\n              mat[namePropMapping[this.mProperties[i].mKey]] = this.mProperties[i].dataAsColor();\n            }\n            if (nameTypeMapping[this.mProperties[i].mKey] == \"bool\") {\n              mat[namePropMapping[this.mProperties[i].mKey]] = this.mProperties[i].dataAsBool();\n            }\n            if (nameTypeMapping[this.mProperties[i].mKey] == \"string\") {\n              mat[namePropMapping[this.mProperties[i].mKey]] = this.mProperties[i].dataAsString();\n            }\n            if (nameTypeMapping[this.mProperties[i].mKey] == \"map\") {\n              var prop = this.mProperties[i];\n              if (prop.mSemantic == aiTextureType_DIFFUSE)\n                mat.map = this.mProperties[i].dataAsMap();\n              if (prop.mSemantic == aiTextureType_NORMALS)\n                mat.normalMap = this.mProperties[i].dataAsMap();\n              if (prop.mSemantic == aiTextureType_LIGHTMAP)\n                mat.lightMap = this.mProperties[i].dataAsMap();\n              if (prop.mSemantic == aiTextureType_OPACITY)\n                mat.alphaMap = this.mProperties[i].dataAsMap();\n            }\n          }\n          mat.ambient.r = 0.53;\n          mat.ambient.g = 0.53;\n          mat.ambient.b = 0.53;\n          mat.color.r = 1;\n          mat.color.g = 1;\n          mat.color.b = 1;\n          return mat;\n        };\n      }\n    }\n    function veclerp(v1, v2, l) {\n      var v = new Vector3();\n      var lm1 = 1 - l;\n      v.x = v1.x * l + v2.x * lm1;\n      v.y = v1.y * l + v2.y * lm1;\n      v.z = v1.z * l + v2.z * lm1;\n      return v;\n    }\n    function quatlerp(q1, q2, l) {\n      return q1.clone().slerp(q2, 1 - l);\n    }\n    function sampleTrack(keys, time, lne, lerp) {\n      if (keys.length == 1)\n        return keys[0].mValue.toTHREE();\n      var dist = Infinity;\n      var key = null;\n      var nextKey = null;\n      for (let i = 0; i < keys.length; i++) {\n        var timeDist = Math.abs(keys[i].mTime - time);\n        if (timeDist < dist && keys[i].mTime <= time) {\n          dist = timeDist;\n          key = keys[i];\n          nextKey = keys[i + 1];\n        }\n      }\n      if (!key) {\n        return null;\n      } else if (nextKey) {\n        var dT = nextKey.mTime - key.mTime;\n        var T = key.mTime - time;\n        var l = T / dT;\n        return lerp(key.mValue.toTHREE(), nextKey.mValue.toTHREE(), l);\n      } else {\n        nextKey = keys[0].clone();\n        nextKey.mTime += lne;\n        var dT = nextKey.mTime - key.mTime;\n        var T = key.mTime - time;\n        var l = T / dT;\n        return lerp(key.mValue.toTHREE(), nextKey.mValue.toTHREE(), l);\n      }\n    }\n    class aiNodeAnim {\n      constructor() {\n        this.mNodeName = \"\";\n        this.mNumPositionKeys = 0;\n        this.mNumRotationKeys = 0;\n        this.mNumScalingKeys = 0;\n        this.mPositionKeys = [];\n        this.mRotationKeys = [];\n        this.mScalingKeys = [];\n        this.mPreState = \"\";\n        this.mPostState = \"\";\n        this.init = function(tps) {\n          if (!tps)\n            tps = 1;\n          function t(t2) {\n            t2.mTime /= tps;\n          }\n          this.mPositionKeys.forEach(t);\n          this.mRotationKeys.forEach(t);\n          this.mScalingKeys.forEach(t);\n        };\n        this.sortKeys = function() {\n          function comp(a, b) {\n            return a.mTime - b.mTime;\n          }\n          this.mPositionKeys.sort(comp);\n          this.mRotationKeys.sort(comp);\n          this.mScalingKeys.sort(comp);\n        };\n        this.getLength = function() {\n          return Math.max(\n            Math.max.apply(\n              null,\n              this.mPositionKeys.map(function(a) {\n                return a.mTime;\n              })\n            ),\n            Math.max.apply(\n              null,\n              this.mRotationKeys.map(function(a) {\n                return a.mTime;\n              })\n            ),\n            Math.max.apply(\n              null,\n              this.mScalingKeys.map(function(a) {\n                return a.mTime;\n              })\n            )\n          );\n        };\n        this.toTHREE = function(o) {\n          this.sortKeys();\n          var length = this.getLength();\n          var track = new Virtulous.KeyFrameTrack();\n          for (let i = 0; i < length; i += 0.05) {\n            var matrix = new Matrix4();\n            var time = i;\n            var pos = sampleTrack(this.mPositionKeys, time, length, veclerp);\n            var scale = sampleTrack(this.mScalingKeys, time, length, veclerp);\n            var rotation = sampleTrack(this.mRotationKeys, time, length, quatlerp);\n            matrix.compose(pos, rotation, scale);\n            var key = new Virtulous.KeyFrame(time, matrix);\n            track.addKey(key);\n          }\n          track.target = o.findNode(this.mNodeName).toTHREE();\n          var tracks = [track];\n          if (o.nodeToBoneMap[this.mNodeName]) {\n            for (let i = 0; i < o.nodeToBoneMap[this.mNodeName].length; i++) {\n              var t2 = track.clone();\n              t2.target = o.nodeToBoneMap[this.mNodeName][i];\n              tracks.push(t2);\n            }\n          }\n          return tracks;\n        };\n      }\n    }\n    class aiAnimation {\n      constructor() {\n        this.mName = \"\";\n        this.mDuration = 0;\n        this.mTicksPerSecond = 0;\n        this.mNumChannels = 0;\n        this.mChannels = [];\n        this.toTHREE = function(root) {\n          var animationHandle = new Virtulous.Animation();\n          for (let i in this.mChannels) {\n            this.mChannels[i].init(this.mTicksPerSecond);\n            var tracks = this.mChannels[i].toTHREE(root);\n            for (let j in tracks) {\n              tracks[j].init();\n              animationHandle.addTrack(tracks[j]);\n            }\n          }\n          animationHandle.length = Math.max.apply(\n            null,\n            animationHandle.tracks.map(function(e) {\n              return e.length;\n            })\n          );\n          return animationHandle;\n        };\n      }\n    }\n    class aiTexture {\n      constructor() {\n        this.mWidth = 0;\n        this.mHeight = 0;\n        this.texAchFormatHint = [];\n        this.pcData = [];\n      }\n    }\n    class aiLight {\n      constructor() {\n        this.mName = \"\";\n        this.mType = 0;\n        this.mAttenuationConstant = 0;\n        this.mAttenuationLinear = 0;\n        this.mAttenuationQuadratic = 0;\n        this.mAngleInnerCone = 0;\n        this.mAngleOuterCone = 0;\n        this.mColorDiffuse = null;\n        this.mColorSpecular = null;\n        this.mColorAmbient = null;\n      }\n    }\n    class aiCamera {\n      constructor() {\n        this.mName = \"\";\n        this.mPosition = null;\n        this.mLookAt = null;\n        this.mUp = null;\n        this.mHorizontalFOV = 0;\n        this.mClipPlaneNear = 0;\n        this.mClipPlaneFar = 0;\n        this.mAspect = 0;\n      }\n    }\n    class aiScene {\n      constructor() {\n        this.versionMajor = 0;\n        this.versionMinor = 0;\n        this.versionRevision = 0;\n        this.compileFlags = 0;\n        this.mFlags = 0;\n        this.mNumMeshes = 0;\n        this.mNumMaterials = 0;\n        this.mNumAnimations = 0;\n        this.mNumTextures = 0;\n        this.mNumLights = 0;\n        this.mNumCameras = 0;\n        this.mRootNode = null;\n        this.mMeshes = [];\n        this.mMaterials = [];\n        this.mAnimations = [];\n        this.mLights = [];\n        this.mCameras = [];\n        this.nodeToBoneMap = {};\n        this.findNode = function(name, root) {\n          if (!root) {\n            root = this.mRootNode;\n          }\n          if (root.mName == name) {\n            return root;\n          }\n          for (let i = 0; i < root.mChildren.length; i++) {\n            var ret = this.findNode(name, root.mChildren[i]);\n            if (ret)\n              return ret;\n          }\n          return null;\n        };\n        this.toTHREE = function() {\n          this.nodeCount = 0;\n          markBones(this);\n          var o = this.mRootNode.toTHREE(this);\n          for (let i in this.mMeshes)\n            this.mMeshes[i].hookupSkeletons(this);\n          if (this.mAnimations.length > 0) {\n            var a = this.mAnimations[0].toTHREE(this);\n          }\n          return { object: o, animation: a };\n        };\n      }\n    }\n    class aiMatrix4 {\n      constructor() {\n        this.elements = [[], [], [], []];\n        this.toTHREE = function() {\n          var m = new Matrix4();\n          for (let i = 0; i < 4; ++i) {\n            for (let i2 = 0; i2 < 4; ++i2) {\n              m.elements[i * 4 + i2] = this.elements[i2][i];\n            }\n          }\n          return m;\n        };\n      }\n    }\n    var littleEndian = true;\n    function readFloat(dataview) {\n      var val = dataview.getFloat32(dataview.readOffset, littleEndian);\n      dataview.readOffset += 4;\n      return val;\n    }\n    function Read_double(dataview) {\n      var val = dataview.getFloat64(dataview.readOffset, littleEndian);\n      dataview.readOffset += 8;\n      return val;\n    }\n    function Read_uint8_t(dataview) {\n      var val = dataview.getUint8(dataview.readOffset);\n      dataview.readOffset += 1;\n      return val;\n    }\n    function Read_uint16_t(dataview) {\n      var val = dataview.getUint16(dataview.readOffset, littleEndian);\n      dataview.readOffset += 2;\n      return val;\n    }\n    function Read_unsigned_int(dataview) {\n      var val = dataview.getUint32(dataview.readOffset, littleEndian);\n      dataview.readOffset += 4;\n      return val;\n    }\n    function Read_uint32_t(dataview) {\n      var val = dataview.getUint32(dataview.readOffset, littleEndian);\n      dataview.readOffset += 4;\n      return val;\n    }\n    function Read_aiVector3D(stream) {\n      var v = new aiVector3D();\n      v.x = readFloat(stream);\n      v.y = readFloat(stream);\n      v.z = readFloat(stream);\n      return v;\n    }\n    function Read_aiColor3D(stream) {\n      var c = new aiColor3D();\n      c.r = readFloat(stream);\n      c.g = readFloat(stream);\n      c.b = readFloat(stream);\n      return c;\n    }\n    function Read_aiQuaternion(stream) {\n      var v = new aiQuaternion();\n      v.w = readFloat(stream);\n      v.x = readFloat(stream);\n      v.y = readFloat(stream);\n      v.z = readFloat(stream);\n      return v;\n    }\n    function Read_aiString(stream) {\n      var s = new aiString();\n      var stringlengthbytes = Read_unsigned_int(stream);\n      stream.ReadBytes(s.data, 1, stringlengthbytes);\n      return s.toString();\n    }\n    function Read_aiVertexWeight(stream) {\n      var w = new aiVertexWeight();\n      w.mVertexId = Read_unsigned_int(stream);\n      w.mWeight = readFloat(stream);\n      return w;\n    }\n    function Read_aiMatrix4x4(stream) {\n      var m = new aiMatrix4();\n      for (let i = 0; i < 4; ++i) {\n        for (let i2 = 0; i2 < 4; ++i2) {\n          m.elements[i][i2] = readFloat(stream);\n        }\n      }\n      return m;\n    }\n    function Read_aiVectorKey(stream) {\n      var v = new aiVectorKey();\n      v.mTime = Read_double(stream);\n      v.mValue = Read_aiVector3D(stream);\n      return v;\n    }\n    function Read_aiQuatKey(stream) {\n      var v = new aiQuatKey();\n      v.mTime = Read_double(stream);\n      v.mValue = Read_aiQuaternion(stream);\n      return v;\n    }\n    function ReadArray_aiVertexWeight(stream, data, size) {\n      for (let i = 0; i < size; i++)\n        data[i] = Read_aiVertexWeight(stream);\n    }\n    function ReadArray_aiVectorKey(stream, data, size) {\n      for (let i = 0; i < size; i++)\n        data[i] = Read_aiVectorKey(stream);\n    }\n    function ReadArray_aiQuatKey(stream, data, size) {\n      for (let i = 0; i < size; i++)\n        data[i] = Read_aiQuatKey(stream);\n    }\n    function ReadBounds(stream, T, n) {\n      return stream.Seek(sizeof(T) * n, aiOrigin_CUR);\n    }\n    function ai_assert(bool) {\n      if (!bool)\n        throw \"asset failed\";\n    }\n    function ReadBinaryNode(stream, parent, depth) {\n      var chunkID = Read_uint32_t(stream);\n      ai_assert(chunkID == ASSBIN_CHUNK_AINODE);\n      Read_uint32_t(stream);\n      var node = new aiNode();\n      node.mParent = parent;\n      node.mDepth = depth;\n      node.mName = Read_aiString(stream);\n      node.mTransformation = Read_aiMatrix4x4(stream);\n      node.mNumChildren = Read_unsigned_int(stream);\n      node.mNumMeshes = Read_unsigned_int(stream);\n      if (node.mNumMeshes) {\n        node.mMeshes = [];\n        for (let i = 0; i < node.mNumMeshes; ++i) {\n          node.mMeshes[i] = Read_unsigned_int(stream);\n        }\n      }\n      if (node.mNumChildren) {\n        node.mChildren = [];\n        for (let i = 0; i < node.mNumChildren; ++i) {\n          var node2 = ReadBinaryNode(stream, node, depth++);\n          node.mChildren[i] = node2;\n        }\n      }\n      return node;\n    }\n    function ReadBinaryBone(stream, b) {\n      var chunkID = Read_uint32_t(stream);\n      ai_assert(chunkID == ASSBIN_CHUNK_AIBONE);\n      Read_uint32_t(stream);\n      b.mName = Read_aiString(stream);\n      b.mNumWeights = Read_unsigned_int(stream);\n      b.mOffsetMatrix = Read_aiMatrix4x4(stream);\n      if (shortened) {\n        ReadBounds(stream, b.mWeights, b.mNumWeights);\n      } else {\n        b.mWeights = [];\n        ReadArray_aiVertexWeight(stream, b.mWeights, b.mNumWeights);\n      }\n      return b;\n    }\n    function ReadBinaryMesh(stream, mesh) {\n      var chunkID = Read_uint32_t(stream);\n      ai_assert(chunkID == ASSBIN_CHUNK_AIMESH);\n      Read_uint32_t(stream);\n      mesh.mPrimitiveTypes = Read_unsigned_int(stream);\n      mesh.mNumVertices = Read_unsigned_int(stream);\n      mesh.mNumFaces = Read_unsigned_int(stream);\n      mesh.mNumBones = Read_unsigned_int(stream);\n      mesh.mMaterialIndex = Read_unsigned_int(stream);\n      mesh.mNumUVComponents = [];\n      var c = Read_unsigned_int(stream);\n      if (c & ASSBIN_MESH_HAS_POSITIONS) {\n        if (shortened) {\n          ReadBounds(stream, mesh.mVertices, mesh.mNumVertices);\n        } else {\n          mesh.mVertices = [];\n          mesh.mVertexBuffer = stream.subArray32(stream.readOffset, stream.readOffset + mesh.mNumVertices * 3 * 4);\n          stream.Seek(mesh.mNumVertices * 3 * 4, aiOrigin_CUR);\n        }\n      }\n      if (c & ASSBIN_MESH_HAS_NORMALS) {\n        if (shortened) {\n          ReadBounds(stream, mesh.mNormals, mesh.mNumVertices);\n        } else {\n          mesh.mNormals = [];\n          mesh.mNormalBuffer = stream.subArray32(stream.readOffset, stream.readOffset + mesh.mNumVertices * 3 * 4);\n          stream.Seek(mesh.mNumVertices * 3 * 4, aiOrigin_CUR);\n        }\n      }\n      if (c & ASSBIN_MESH_HAS_TANGENTS_AND_BITANGENTS) {\n        if (shortened) {\n          ReadBounds(stream, mesh.mTangents, mesh.mNumVertices);\n          ReadBounds(stream, mesh.mBitangents, mesh.mNumVertices);\n        } else {\n          mesh.mTangents = [];\n          mesh.mTangentBuffer = stream.subArray32(stream.readOffset, stream.readOffset + mesh.mNumVertices * 3 * 4);\n          stream.Seek(mesh.mNumVertices * 3 * 4, aiOrigin_CUR);\n          mesh.mBitangents = [];\n          mesh.mBitangentBuffer = stream.subArray32(stream.readOffset, stream.readOffset + mesh.mNumVertices * 3 * 4);\n          stream.Seek(mesh.mNumVertices * 3 * 4, aiOrigin_CUR);\n        }\n      }\n      for (let n = 0; n < AI_MAX_NUMBER_OF_COLOR_SETS; ++n) {\n        if (!(c & ASSBIN_MESH_HAS_COLOR(n)))\n          break;\n        if (shortened) {\n          ReadBounds(stream, mesh.mColors[n], mesh.mNumVertices);\n        } else {\n          mesh.mColors[n] = [];\n          mesh.mColorBuffer = stream.subArray32(stream.readOffset, stream.readOffset + mesh.mNumVertices * 4 * 4);\n          stream.Seek(mesh.mNumVertices * 4 * 4, aiOrigin_CUR);\n        }\n      }\n      mesh.mTexCoordsBuffers = [];\n      for (let n = 0; n < AI_MAX_NUMBER_OF_TEXTURECOORDS; ++n) {\n        if (!(c & ASSBIN_MESH_HAS_TEXCOORD(n)))\n          break;\n        mesh.mNumUVComponents[n] = Read_unsigned_int(stream);\n        if (shortened) {\n          ReadBounds(stream, mesh.mTextureCoords[n], mesh.mNumVertices);\n        } else {\n          mesh.mTextureCoords[n] = [];\n          mesh.mTexCoordsBuffers[n] = [];\n          for (let uv = 0; uv < mesh.mNumVertices; uv++) {\n            mesh.mTexCoordsBuffers[n].push(readFloat(stream));\n            mesh.mTexCoordsBuffers[n].push(readFloat(stream));\n            readFloat(stream);\n          }\n        }\n      }\n      if (shortened) {\n        Read_unsigned_int(stream);\n      } else {\n        mesh.mFaces = [];\n        mesh.mIndexArray = [];\n        for (let i = 0; i < mesh.mNumFaces; ++i) {\n          var f = mesh.mFaces[i] = new aiFace();\n          f.mNumIndices = Read_uint16_t(stream);\n          f.mIndices = [];\n          for (let a = 0; a < f.mNumIndices; ++a) {\n            if (mesh.mNumVertices < 1 << 16) {\n              f.mIndices[a] = Read_uint16_t(stream);\n            } else {\n              f.mIndices[a] = Read_unsigned_int(stream);\n            }\n          }\n          if (f.mNumIndices === 3) {\n            mesh.mIndexArray.push(f.mIndices[0]);\n            mesh.mIndexArray.push(f.mIndices[1]);\n            mesh.mIndexArray.push(f.mIndices[2]);\n          } else if (f.mNumIndices === 4) {\n            mesh.mIndexArray.push(f.mIndices[0]);\n            mesh.mIndexArray.push(f.mIndices[1]);\n            mesh.mIndexArray.push(f.mIndices[2]);\n            mesh.mIndexArray.push(f.mIndices[2]);\n            mesh.mIndexArray.push(f.mIndices[3]);\n            mesh.mIndexArray.push(f.mIndices[0]);\n          } else {\n            throw new Error(\"Sorry, can't currently triangulate polys. Use the triangulate preprocessor in Assimp.\");\n          }\n        }\n      }\n      if (mesh.mNumBones) {\n        mesh.mBones = [];\n        for (let a = 0; a < mesh.mNumBones; ++a) {\n          mesh.mBones[a] = new aiBone();\n          ReadBinaryBone(stream, mesh.mBones[a]);\n        }\n      }\n    }\n    function ReadBinaryMaterialProperty(stream, prop) {\n      var chunkID = Read_uint32_t(stream);\n      ai_assert(chunkID == ASSBIN_CHUNK_AIMATERIALPROPERTY);\n      Read_uint32_t(stream);\n      prop.mKey = Read_aiString(stream);\n      prop.mSemantic = Read_unsigned_int(stream);\n      prop.mIndex = Read_unsigned_int(stream);\n      prop.mDataLength = Read_unsigned_int(stream);\n      prop.mType = Read_unsigned_int(stream);\n      prop.mData = [];\n      stream.ReadBytes(prop.mData, 1, prop.mDataLength);\n    }\n    function ReadBinaryMaterial(stream, mat) {\n      var chunkID = Read_uint32_t(stream);\n      ai_assert(chunkID == ASSBIN_CHUNK_AIMATERIAL);\n      Read_uint32_t(stream);\n      mat.mNumAllocated = mat.mNumProperties = Read_unsigned_int(stream);\n      if (mat.mNumProperties) {\n        if (mat.mProperties) {\n          delete mat.mProperties;\n        }\n        mat.mProperties = [];\n        for (let i = 0; i < mat.mNumProperties; ++i) {\n          mat.mProperties[i] = new aiMaterialProperty();\n          ReadBinaryMaterialProperty(stream, mat.mProperties[i]);\n        }\n      }\n    }\n    function ReadBinaryNodeAnim(stream, nd) {\n      var chunkID = Read_uint32_t(stream);\n      ai_assert(chunkID == ASSBIN_CHUNK_AINODEANIM);\n      Read_uint32_t(stream);\n      nd.mNodeName = Read_aiString(stream);\n      nd.mNumPositionKeys = Read_unsigned_int(stream);\n      nd.mNumRotationKeys = Read_unsigned_int(stream);\n      nd.mNumScalingKeys = Read_unsigned_int(stream);\n      nd.mPreState = Read_unsigned_int(stream);\n      nd.mPostState = Read_unsigned_int(stream);\n      if (nd.mNumPositionKeys) {\n        if (shortened) {\n          ReadBounds(stream, nd.mPositionKeys, nd.mNumPositionKeys);\n        } else {\n          nd.mPositionKeys = [];\n          ReadArray_aiVectorKey(stream, nd.mPositionKeys, nd.mNumPositionKeys);\n        }\n      }\n      if (nd.mNumRotationKeys) {\n        if (shortened) {\n          ReadBounds(stream, nd.mRotationKeys, nd.mNumRotationKeys);\n        } else {\n          nd.mRotationKeys = [];\n          ReadArray_aiQuatKey(stream, nd.mRotationKeys, nd.mNumRotationKeys);\n        }\n      }\n      if (nd.mNumScalingKeys) {\n        if (shortened) {\n          ReadBounds(stream, nd.mScalingKeys, nd.mNumScalingKeys);\n        } else {\n          nd.mScalingKeys = [];\n          ReadArray_aiVectorKey(stream, nd.mScalingKeys, nd.mNumScalingKeys);\n        }\n      }\n    }\n    function ReadBinaryAnim(stream, anim) {\n      var chunkID = Read_uint32_t(stream);\n      ai_assert(chunkID == ASSBIN_CHUNK_AIANIMATION);\n      Read_uint32_t(stream);\n      anim.mName = Read_aiString(stream);\n      anim.mDuration = Read_double(stream);\n      anim.mTicksPerSecond = Read_double(stream);\n      anim.mNumChannels = Read_unsigned_int(stream);\n      if (anim.mNumChannels) {\n        anim.mChannels = [];\n        for (let a = 0; a < anim.mNumChannels; ++a) {\n          anim.mChannels[a] = new aiNodeAnim();\n          ReadBinaryNodeAnim(stream, anim.mChannels[a]);\n        }\n      }\n    }\n    function ReadBinaryTexture(stream, tex) {\n      var chunkID = Read_uint32_t(stream);\n      ai_assert(chunkID == ASSBIN_CHUNK_AITEXTURE);\n      Read_uint32_t(stream);\n      tex.mWidth = Read_unsigned_int(stream);\n      tex.mHeight = Read_unsigned_int(stream);\n      stream.ReadBytes(tex.achFormatHint, 1, 4);\n      if (!shortened) {\n        if (!tex.mHeight) {\n          tex.pcData = [];\n          stream.ReadBytes(tex.pcData, 1, tex.mWidth);\n        } else {\n          tex.pcData = [];\n          stream.ReadBytes(tex.pcData, 1, tex.mWidth * tex.mHeight * 4);\n        }\n      }\n    }\n    function ReadBinaryLight(stream, l) {\n      var chunkID = Read_uint32_t(stream);\n      ai_assert(chunkID == ASSBIN_CHUNK_AILIGHT);\n      Read_uint32_t(stream);\n      l.mName = Read_aiString(stream);\n      l.mType = Read_unsigned_int(stream);\n      if (l.mType != aiLightSource_DIRECTIONAL) {\n        l.mAttenuationConstant = readFloat(stream);\n        l.mAttenuationLinear = readFloat(stream);\n        l.mAttenuationQuadratic = readFloat(stream);\n      }\n      l.mColorDiffuse = Read_aiColor3D(stream);\n      l.mColorSpecular = Read_aiColor3D(stream);\n      l.mColorAmbient = Read_aiColor3D(stream);\n      if (l.mType == aiLightSource_SPOT) {\n        l.mAngleInnerCone = readFloat(stream);\n        l.mAngleOuterCone = readFloat(stream);\n      }\n    }\n    function ReadBinaryCamera(stream, cam) {\n      var chunkID = Read_uint32_t(stream);\n      ai_assert(chunkID == ASSBIN_CHUNK_AICAMERA);\n      Read_uint32_t(stream);\n      cam.mName = Read_aiString(stream);\n      cam.mPosition = Read_aiVector3D(stream);\n      cam.mLookAt = Read_aiVector3D(stream);\n      cam.mUp = Read_aiVector3D(stream);\n      cam.mHorizontalFOV = readFloat(stream);\n      cam.mClipPlaneNear = readFloat(stream);\n      cam.mClipPlaneFar = readFloat(stream);\n      cam.mAspect = readFloat(stream);\n    }\n    function ReadBinaryScene(stream, scene) {\n      var chunkID = Read_uint32_t(stream);\n      ai_assert(chunkID == ASSBIN_CHUNK_AISCENE);\n      Read_uint32_t(stream);\n      scene.mFlags = Read_unsigned_int(stream);\n      scene.mNumMeshes = Read_unsigned_int(stream);\n      scene.mNumMaterials = Read_unsigned_int(stream);\n      scene.mNumAnimations = Read_unsigned_int(stream);\n      scene.mNumTextures = Read_unsigned_int(stream);\n      scene.mNumLights = Read_unsigned_int(stream);\n      scene.mNumCameras = Read_unsigned_int(stream);\n      scene.mRootNode = new aiNode();\n      scene.mRootNode = ReadBinaryNode(stream, null, 0);\n      if (scene.mNumMeshes) {\n        scene.mMeshes = [];\n        for (let i = 0; i < scene.mNumMeshes; ++i) {\n          scene.mMeshes[i] = new aiMesh();\n          ReadBinaryMesh(stream, scene.mMeshes[i]);\n        }\n      }\n      if (scene.mNumMaterials) {\n        scene.mMaterials = [];\n        for (let i = 0; i < scene.mNumMaterials; ++i) {\n          scene.mMaterials[i] = new aiMaterial();\n          ReadBinaryMaterial(stream, scene.mMaterials[i]);\n        }\n      }\n      if (scene.mNumAnimations) {\n        scene.mAnimations = [];\n        for (let i = 0; i < scene.mNumAnimations; ++i) {\n          scene.mAnimations[i] = new aiAnimation();\n          ReadBinaryAnim(stream, scene.mAnimations[i]);\n        }\n      }\n      if (scene.mNumTextures) {\n        scene.mTextures = [];\n        for (let i = 0; i < scene.mNumTextures; ++i) {\n          scene.mTextures[i] = new aiTexture();\n          ReadBinaryTexture(stream, scene.mTextures[i]);\n        }\n      }\n      if (scene.mNumLights) {\n        scene.mLights = [];\n        for (let i = 0; i < scene.mNumLights; ++i) {\n          scene.mLights[i] = new aiLight();\n          ReadBinaryLight(stream, scene.mLights[i]);\n        }\n      }\n      if (scene.mNumCameras) {\n        scene.mCameras = [];\n        for (let i = 0; i < scene.mNumCameras; ++i) {\n          scene.mCameras[i] = new aiCamera();\n          ReadBinaryCamera(stream, scene.mCameras[i]);\n        }\n      }\n    }\n    var aiOrigin_CUR = 0;\n    var aiOrigin_BEG = 1;\n    function extendStream(stream) {\n      stream.readOffset = 0;\n      stream.Seek = function(off, ori) {\n        if (ori == aiOrigin_CUR) {\n          stream.readOffset += off;\n        }\n        if (ori == aiOrigin_BEG) {\n          stream.readOffset = off;\n        }\n      };\n      stream.ReadBytes = function(buff, size, n) {\n        var bytes = size * n;\n        for (let i = 0; i < bytes; i++)\n          buff[i] = Read_uint8_t(this);\n      };\n      stream.subArray32 = function(start, end) {\n        var buff = this.buffer;\n        var newbuff = buff.slice(start, end);\n        return new Float32Array(newbuff);\n      };\n      stream.subArrayUint16 = function(start, end) {\n        var buff = this.buffer;\n        var newbuff = buff.slice(start, end);\n        return new Uint16Array(newbuff);\n      };\n      stream.subArrayUint8 = function(start, end) {\n        var buff = this.buffer;\n        var newbuff = buff.slice(start, end);\n        return new Uint8Array(newbuff);\n      };\n      stream.subArrayUint32 = function(start, end) {\n        var buff = this.buffer;\n        var newbuff = buff.slice(start, end);\n        return new Uint32Array(newbuff);\n      };\n    }\n    var shortened, compressed;\n    function InternReadFile(pFiledata) {\n      var pScene = new aiScene();\n      var stream = new DataView(pFiledata);\n      extendStream(stream);\n      stream.Seek(44, aiOrigin_CUR);\n      pScene.versionMajor = Read_unsigned_int(stream);\n      pScene.versionMinor = Read_unsigned_int(stream);\n      pScene.versionRevision = Read_unsigned_int(stream);\n      pScene.compileFlags = Read_unsigned_int(stream);\n      shortened = Read_uint16_t(stream) > 0;\n      compressed = Read_uint16_t(stream) > 0;\n      if (shortened)\n        throw \"Shortened binaries are not supported!\";\n      stream.Seek(256, aiOrigin_CUR);\n      stream.Seek(128, aiOrigin_CUR);\n      stream.Seek(64, aiOrigin_CUR);\n      if (compressed) {\n        var uncompressedSize = Read_uint32_t(stream);\n        var compressedSize = stream.FileSize() - stream.Tell();\n        var compressedData = [];\n        stream.Read(compressedData, 1, compressedSize);\n        var uncompressedData = [];\n        uncompress(uncompressedData, uncompressedSize, compressedData, compressedSize);\n        var buff = new ArrayBuffer(uncompressedData);\n        ReadBinaryScene(buff, pScene);\n      } else {\n        ReadBinaryScene(stream, pScene);\n      }\n      return pScene.toTHREE();\n    }\n    return InternReadFile(buffer);\n  }\n}\nexport {\n  AssimpLoader\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}