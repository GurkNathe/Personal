{"ast":null,"code":"import _classCallCheck from \"/home/krug/Coding/JavaScript/Websites/Personal/personal/node_modules/.pnpm/@babel+runtime@7.22.3/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/home/krug/Coding/JavaScript/Websites/Personal/personal/node_modules/.pnpm/@babel+runtime@7.22.3/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nvar __defProp = Object.defineProperty;\nvar __defNormalProp = function __defNormalProp(obj, key, value) {\n  return key in obj ? __defProp(obj, key, {\n    enumerable: true,\n    configurable: true,\n    writable: true,\n    value: value\n  }) : obj[key] = value;\n};\nvar __publicField = function __publicField(obj, key, value) {\n  __defNormalProp(obj, typeof key !== \"symbol\" ? key + \"\" : key, value);\n  return value;\n};\nimport { Vector3, BufferGeometry, Float32BufferAttribute } from \"three\";\nimport { mergeVertices } from \"../utils/BufferGeometryUtils.js\";\nvar cb = /* @__PURE__ */new Vector3();\nvar ab = /* @__PURE__ */new Vector3();\nfunction pushIfUnique(array, object) {\n  if (array.indexOf(object) === -1) array.push(object);\n}\nfunction removeFromArray(array, object) {\n  var k = array.indexOf(object);\n  if (k > -1) array.splice(k, 1);\n}\nvar Vertex = /*#__PURE__*/function () {\n  function Vertex(v, id) {\n    _classCallCheck(this, Vertex);\n    __publicField(this, \"position\");\n    __publicField(this, \"id\");\n    __publicField(this, \"faces\");\n    __publicField(this, \"neighbors\");\n    __publicField(this, \"collapseCost\");\n    __publicField(this, \"collapseNeighbor\");\n    __publicField(this, \"minCost\", 0);\n    __publicField(this, \"totalCost\", 0);\n    __publicField(this, \"costCount\", 0);\n    this.position = v;\n    this.id = id;\n    this.faces = [];\n    this.neighbors = [];\n    this.collapseCost = 0;\n    this.collapseNeighbor = null;\n  }\n  _createClass(Vertex, [{\n    key: \"addUniqueNeighbor\",\n    value: function addUniqueNeighbor(vertex) {\n      pushIfUnique(this.neighbors, vertex);\n    }\n  }, {\n    key: \"removeIfNonNeighbor\",\n    value: function removeIfNonNeighbor(n) {\n      var neighbors = this.neighbors;\n      var faces = this.faces;\n      var offset = neighbors.indexOf(n);\n      if (offset === -1) return;\n      for (var i = 0; i < faces.length; i++) {\n        if (faces[i].hasVertex(n)) return;\n      }\n      neighbors.splice(offset, 1);\n    }\n  }]);\n  return Vertex;\n}();\nvar Triangle = /*#__PURE__*/function () {\n  function Triangle(v1, v2, v3, a, b, c) {\n    _classCallCheck(this, Triangle);\n    __publicField(this, \"a\");\n    __publicField(this, \"b\");\n    __publicField(this, \"c\");\n    __publicField(this, \"v1\");\n    __publicField(this, \"v2\");\n    __publicField(this, \"v3\");\n    __publicField(this, \"normal\", new Vector3());\n    this.a = a;\n    this.b = b;\n    this.c = c;\n    this.v1 = v1;\n    this.v2 = v2;\n    this.v3 = v3;\n    this.computeNormal();\n    v1.faces.push(this);\n    v1.addUniqueNeighbor(v2);\n    v1.addUniqueNeighbor(v3);\n    v2.faces.push(this);\n    v2.addUniqueNeighbor(v1);\n    v2.addUniqueNeighbor(v3);\n    v3.faces.push(this);\n    v3.addUniqueNeighbor(v1);\n    v3.addUniqueNeighbor(v2);\n  }\n  _createClass(Triangle, [{\n    key: \"computeNormal\",\n    value: function computeNormal() {\n      var vA = this.v1.position;\n      var vB = this.v2.position;\n      var vC = this.v3.position;\n      cb.subVectors(vC, vB);\n      ab.subVectors(vA, vB);\n      cb.cross(ab).normalize();\n      this.normal.copy(cb);\n    }\n  }, {\n    key: \"hasVertex\",\n    value: function hasVertex(v) {\n      return v === this.v1 || v === this.v2 || v === this.v3;\n    }\n  }, {\n    key: \"replaceVertex\",\n    value: function replaceVertex(oldv, newv) {\n      if (oldv === this.v1) this.v1 = newv;else if (oldv === this.v2) this.v2 = newv;else if (oldv === this.v3) this.v3 = newv;\n      removeFromArray(oldv.faces, this);\n      newv.faces.push(this);\n      oldv.removeIfNonNeighbor(this.v1);\n      this.v1.removeIfNonNeighbor(oldv);\n      oldv.removeIfNonNeighbor(this.v2);\n      this.v2.removeIfNonNeighbor(oldv);\n      oldv.removeIfNonNeighbor(this.v3);\n      this.v3.removeIfNonNeighbor(oldv);\n      this.v1.addUniqueNeighbor(this.v2);\n      this.v1.addUniqueNeighbor(this.v3);\n      this.v2.addUniqueNeighbor(this.v1);\n      this.v2.addUniqueNeighbor(this.v3);\n      this.v3.addUniqueNeighbor(this.v1);\n      this.v3.addUniqueNeighbor(this.v2);\n      this.computeNormal();\n    }\n  }]);\n  return Triangle;\n}();\nvar SimplifyModifier = /*#__PURE__*/function () {\n  function SimplifyModifier() {\n    var _this = this;\n    _classCallCheck(this, SimplifyModifier);\n    __publicField(this, \"computeEdgeCollapseCost\", function (u, v) {\n      var edgelength = v.position.distanceTo(u.position);\n      var curvature = 0;\n      var sideFaces = [];\n      var i,\n        il = u.faces.length,\n        face,\n        sideFace;\n      for (i = 0; i < il; i++) {\n        face = u.faces[i];\n        if (face.hasVertex(v)) {\n          sideFaces.push(face);\n        }\n      }\n      for (i = 0; i < il; i++) {\n        var minCurvature = 1;\n        face = u.faces[i];\n        for (var j = 0; j < sideFaces.length; j++) {\n          sideFace = sideFaces[j];\n          var dotProd = face.normal.dot(sideFace.normal);\n          minCurvature = Math.min(minCurvature, (1.001 - dotProd) / 2);\n        }\n        curvature = Math.max(curvature, minCurvature);\n      }\n      var borders = 0;\n      if (sideFaces.length < 2) {\n        curvature = 1;\n      }\n      var amt = edgelength * curvature + borders;\n      return amt;\n    });\n    __publicField(this, \"computeEdgeCostAtVertex\", function (v) {\n      if (v.neighbors.length === 0) {\n        v.collapseNeighbor = null;\n        v.collapseCost = -0.01;\n        return;\n      }\n      v.collapseCost = 1e5;\n      v.collapseNeighbor = null;\n      for (var i = 0; i < v.neighbors.length; i++) {\n        var collapseCost = _this.computeEdgeCollapseCost(v, v.neighbors[i]);\n        if (!v.collapseNeighbor) {\n          v.collapseNeighbor = v.neighbors[i];\n          v.collapseCost = collapseCost;\n          v.minCost = collapseCost;\n          v.totalCost = 0;\n          v.costCount = 0;\n        }\n        v.costCount++;\n        v.totalCost += collapseCost;\n        if (collapseCost < v.minCost) {\n          v.collapseNeighbor = v.neighbors[i];\n          v.minCost = collapseCost;\n        }\n      }\n      v.collapseCost = v.totalCost / v.costCount;\n    });\n    __publicField(this, \"removeFace\", function (f, faces) {\n      removeFromArray(faces, f);\n      if (f.v1) removeFromArray(f.v1.faces, f);\n      if (f.v2) removeFromArray(f.v2.faces, f);\n      if (f.v3) removeFromArray(f.v3.faces, f);\n      var vs = [f.v1, f.v2, f.v3];\n      var v1, v2;\n      for (var i = 0; i < 3; i++) {\n        v1 = vs[i];\n        v2 = vs[(i + 1) % 3];\n        if (!v1 || !v2) continue;\n        v1.removeIfNonNeighbor(v2);\n        v2.removeIfNonNeighbor(v1);\n      }\n    });\n    __publicField(this, \"collapse\", function (vertices, faces, u, v) {\n      if (!v) {\n        _this.removeVertex(u, vertices);\n        return;\n      }\n      var i;\n      var tmpVertices = [];\n      for (i = 0; i < u.neighbors.length; i++) {\n        tmpVertices.push(u.neighbors[i]);\n      }\n      for (i = u.faces.length - 1; i >= 0; i--) {\n        if (u.faces[i].hasVertex(v)) {\n          _this.removeFace(u.faces[i], faces);\n        }\n      }\n      for (i = u.faces.length - 1; i >= 0; i--) {\n        u.faces[i].replaceVertex(u, v);\n      }\n      _this.removeVertex(u, vertices);\n      for (i = 0; i < tmpVertices.length; i++) {\n        _this.computeEdgeCostAtVertex(tmpVertices[i]);\n      }\n    });\n    __publicField(this, \"minimumCostEdge\", function (vertices) {\n      var least = vertices[0];\n      for (var i = 0; i < vertices.length; i++) {\n        if (vertices[i].collapseCost < least.collapseCost) {\n          least = vertices[i];\n        }\n      }\n      return least;\n    });\n    __publicField(this, \"modify\", function (geometry, count) {\n      geometry = geometry.clone();\n      var attributes = geometry.attributes;\n      for (var name in attributes) {\n        if (name !== \"position\") geometry.deleteAttribute(name);\n      }\n      geometry = mergeVertices(geometry);\n      var vertices = [];\n      var faces = [];\n      var positionAttribute = geometry.getAttribute(\"position\");\n      for (var i = 0; i < positionAttribute.count; i++) {\n        var v = new Vector3().fromBufferAttribute(positionAttribute, i);\n        var vertex = new Vertex(v, i);\n        vertices.push(vertex);\n      }\n      var geomIndex = geometry.getIndex();\n      if (geomIndex !== null) {\n        for (var _i = 0; _i < geomIndex.count; _i += 3) {\n          var a = geomIndex.getX(_i);\n          var b = geomIndex.getX(_i + 1);\n          var c = geomIndex.getX(_i + 2);\n          var triangle = new Triangle(vertices[a], vertices[b], vertices[c], a, b, c);\n          faces.push(triangle);\n        }\n      } else {\n        for (var _i2 = 0; _i2 < positionAttribute.count; _i2 += 3) {\n          var _a = _i2;\n          var _b = _i2 + 1;\n          var _c = _i2 + 2;\n          var _triangle = new Triangle(vertices[_a], vertices[_b], vertices[_c], _a, _b, _c);\n          faces.push(_triangle);\n        }\n      }\n      for (var _i3 = 0, il = vertices.length; _i3 < il; _i3++) {\n        _this.computeEdgeCostAtVertex(vertices[_i3]);\n      }\n      var nextVertex;\n      var z = count;\n      while (z--) {\n        nextVertex = _this.minimumCostEdge(vertices);\n        if (!nextVertex) {\n          console.log(\"THREE.SimplifyModifier: No next vertex\");\n          break;\n        } else {\n          _this.collapse(vertices, faces, nextVertex, nextVertex.collapseNeighbor);\n        }\n      }\n      var simplifiedGeometry = new BufferGeometry();\n      var position = [];\n      var index = [];\n      for (var _i4 = 0; _i4 < vertices.length; _i4++) {\n        var _vertex = vertices[_i4].position;\n        position.push(_vertex.x, _vertex.y, _vertex.z);\n      }\n      for (var _i5 = 0; _i5 < faces.length; _i5++) {\n        var face = faces[_i5];\n        var _a2 = vertices.indexOf(face.v1);\n        var _b2 = vertices.indexOf(face.v2);\n        var _c2 = vertices.indexOf(face.v3);\n        index.push(_a2, _b2, _c2);\n      }\n      simplifiedGeometry.setAttribute(\"position\", new Float32BufferAttribute(position, 3));\n      simplifiedGeometry.setIndex(index);\n      return simplifiedGeometry;\n    });\n  }\n  _createClass(SimplifyModifier, [{\n    key: \"removeVertex\",\n    value: function removeVertex(v, vertices) {\n      console.assert(v.faces.length === 0);\n      while (v.neighbors.length) {\n        var n = v.neighbors.pop();\n        removeFromArray(n.neighbors, v);\n      }\n      removeFromArray(vertices, v);\n    }\n  }]);\n  return SimplifyModifier;\n}();\nexport { SimplifyModifier };","map":{"version":3,"names":["__defProp","Object","defineProperty","__defNormalProp","obj","key","value","enumerable","configurable","writable","__publicField","Vector3","BufferGeometry","Float32BufferAttribute","mergeVertices","cb","ab","pushIfUnique","array","object","indexOf","push","removeFromArray","k","splice","Vertex","v","id","_classCallCheck","position","faces","neighbors","collapseCost","collapseNeighbor","_createClass","addUniqueNeighbor","vertex","removeIfNonNeighbor","n","offset","i","length","hasVertex","Triangle","v1","v2","v3","a","b","c","computeNormal","vA","vB","vC","subVectors","cross","normalize","normal","copy","replaceVertex","oldv","newv","SimplifyModifier","_this","u","edgelength","distanceTo","curvature","sideFaces","il","face","sideFace","minCurvature","j","dotProd","dot","Math","min","max","borders","amt","computeEdgeCollapseCost","minCost","totalCost","costCount","f","vs","vertices","removeVertex","tmpVertices","removeFace","computeEdgeCostAtVertex","least","geometry","count","clone","attributes","name","deleteAttribute","positionAttribute","getAttribute","fromBufferAttribute","geomIndex","getIndex","getX","triangle","nextVertex","z","minimumCostEdge","console","log","collapse","simplifiedGeometry","index","x","y","setAttribute","setIndex","assert","pop"],"sources":["/home/krug/Coding/JavaScript/Websites/Personal/personal/node_modules/.pnpm/three-stdlib@2.23.7_three@0.151.3/node_modules/three-stdlib/modifiers/SimplifyModifier.js"],"sourcesContent":["var __defProp = Object.defineProperty;\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;\nvar __publicField = (obj, key, value) => {\n  __defNormalProp(obj, typeof key !== \"symbol\" ? key + \"\" : key, value);\n  return value;\n};\nimport { Vector3, BufferGeometry, Float32BufferAttribute } from \"three\";\nimport { mergeVertices } from \"../utils/BufferGeometryUtils.js\";\nconst cb = /* @__PURE__ */ new Vector3();\nconst ab = /* @__PURE__ */ new Vector3();\nfunction pushIfUnique(array, object) {\n  if (array.indexOf(object) === -1)\n    array.push(object);\n}\nfunction removeFromArray(array, object) {\n  const k = array.indexOf(object);\n  if (k > -1)\n    array.splice(k, 1);\n}\nclass Vertex {\n  constructor(v, id) {\n    __publicField(this, \"position\");\n    __publicField(this, \"id\");\n    __publicField(this, \"faces\");\n    __publicField(this, \"neighbors\");\n    __publicField(this, \"collapseCost\");\n    __publicField(this, \"collapseNeighbor\");\n    __publicField(this, \"minCost\", 0);\n    __publicField(this, \"totalCost\", 0);\n    __publicField(this, \"costCount\", 0);\n    this.position = v;\n    this.id = id;\n    this.faces = [];\n    this.neighbors = [];\n    this.collapseCost = 0;\n    this.collapseNeighbor = null;\n  }\n  addUniqueNeighbor(vertex) {\n    pushIfUnique(this.neighbors, vertex);\n  }\n  removeIfNonNeighbor(n) {\n    const neighbors = this.neighbors;\n    const faces = this.faces;\n    const offset = neighbors.indexOf(n);\n    if (offset === -1)\n      return;\n    for (let i = 0; i < faces.length; i++) {\n      if (faces[i].hasVertex(n))\n        return;\n    }\n    neighbors.splice(offset, 1);\n  }\n}\nclass Triangle {\n  constructor(v1, v2, v3, a, b, c) {\n    __publicField(this, \"a\");\n    __publicField(this, \"b\");\n    __publicField(this, \"c\");\n    __publicField(this, \"v1\");\n    __publicField(this, \"v2\");\n    __publicField(this, \"v3\");\n    __publicField(this, \"normal\", new Vector3());\n    this.a = a;\n    this.b = b;\n    this.c = c;\n    this.v1 = v1;\n    this.v2 = v2;\n    this.v3 = v3;\n    this.computeNormal();\n    v1.faces.push(this);\n    v1.addUniqueNeighbor(v2);\n    v1.addUniqueNeighbor(v3);\n    v2.faces.push(this);\n    v2.addUniqueNeighbor(v1);\n    v2.addUniqueNeighbor(v3);\n    v3.faces.push(this);\n    v3.addUniqueNeighbor(v1);\n    v3.addUniqueNeighbor(v2);\n  }\n  computeNormal() {\n    const vA = this.v1.position;\n    const vB = this.v2.position;\n    const vC = this.v3.position;\n    cb.subVectors(vC, vB);\n    ab.subVectors(vA, vB);\n    cb.cross(ab).normalize();\n    this.normal.copy(cb);\n  }\n  hasVertex(v) {\n    return v === this.v1 || v === this.v2 || v === this.v3;\n  }\n  replaceVertex(oldv, newv) {\n    if (oldv === this.v1)\n      this.v1 = newv;\n    else if (oldv === this.v2)\n      this.v2 = newv;\n    else if (oldv === this.v3)\n      this.v3 = newv;\n    removeFromArray(oldv.faces, this);\n    newv.faces.push(this);\n    oldv.removeIfNonNeighbor(this.v1);\n    this.v1.removeIfNonNeighbor(oldv);\n    oldv.removeIfNonNeighbor(this.v2);\n    this.v2.removeIfNonNeighbor(oldv);\n    oldv.removeIfNonNeighbor(this.v3);\n    this.v3.removeIfNonNeighbor(oldv);\n    this.v1.addUniqueNeighbor(this.v2);\n    this.v1.addUniqueNeighbor(this.v3);\n    this.v2.addUniqueNeighbor(this.v1);\n    this.v2.addUniqueNeighbor(this.v3);\n    this.v3.addUniqueNeighbor(this.v1);\n    this.v3.addUniqueNeighbor(this.v2);\n    this.computeNormal();\n  }\n}\nclass SimplifyModifier {\n  constructor() {\n    __publicField(this, \"computeEdgeCollapseCost\", (u, v) => {\n      const edgelength = v.position.distanceTo(u.position);\n      let curvature = 0;\n      const sideFaces = [];\n      let i, il = u.faces.length, face, sideFace;\n      for (i = 0; i < il; i++) {\n        face = u.faces[i];\n        if (face.hasVertex(v)) {\n          sideFaces.push(face);\n        }\n      }\n      for (i = 0; i < il; i++) {\n        let minCurvature = 1;\n        face = u.faces[i];\n        for (let j = 0; j < sideFaces.length; j++) {\n          sideFace = sideFaces[j];\n          const dotProd = face.normal.dot(sideFace.normal);\n          minCurvature = Math.min(minCurvature, (1.001 - dotProd) / 2);\n        }\n        curvature = Math.max(curvature, minCurvature);\n      }\n      const borders = 0;\n      if (sideFaces.length < 2) {\n        curvature = 1;\n      }\n      const amt = edgelength * curvature + borders;\n      return amt;\n    });\n    __publicField(this, \"computeEdgeCostAtVertex\", (v) => {\n      if (v.neighbors.length === 0) {\n        v.collapseNeighbor = null;\n        v.collapseCost = -0.01;\n        return;\n      }\n      v.collapseCost = 1e5;\n      v.collapseNeighbor = null;\n      for (let i = 0; i < v.neighbors.length; i++) {\n        const collapseCost = this.computeEdgeCollapseCost(v, v.neighbors[i]);\n        if (!v.collapseNeighbor) {\n          v.collapseNeighbor = v.neighbors[i];\n          v.collapseCost = collapseCost;\n          v.minCost = collapseCost;\n          v.totalCost = 0;\n          v.costCount = 0;\n        }\n        v.costCount++;\n        v.totalCost += collapseCost;\n        if (collapseCost < v.minCost) {\n          v.collapseNeighbor = v.neighbors[i];\n          v.minCost = collapseCost;\n        }\n      }\n      v.collapseCost = v.totalCost / v.costCount;\n    });\n    __publicField(this, \"removeFace\", (f, faces) => {\n      removeFromArray(faces, f);\n      if (f.v1)\n        removeFromArray(f.v1.faces, f);\n      if (f.v2)\n        removeFromArray(f.v2.faces, f);\n      if (f.v3)\n        removeFromArray(f.v3.faces, f);\n      const vs = [f.v1, f.v2, f.v3];\n      let v1, v2;\n      for (let i = 0; i < 3; i++) {\n        v1 = vs[i];\n        v2 = vs[(i + 1) % 3];\n        if (!v1 || !v2)\n          continue;\n        v1.removeIfNonNeighbor(v2);\n        v2.removeIfNonNeighbor(v1);\n      }\n    });\n    __publicField(this, \"collapse\", (vertices, faces, u, v) => {\n      if (!v) {\n        this.removeVertex(u, vertices);\n        return;\n      }\n      let i;\n      const tmpVertices = [];\n      for (i = 0; i < u.neighbors.length; i++) {\n        tmpVertices.push(u.neighbors[i]);\n      }\n      for (i = u.faces.length - 1; i >= 0; i--) {\n        if (u.faces[i].hasVertex(v)) {\n          this.removeFace(u.faces[i], faces);\n        }\n      }\n      for (i = u.faces.length - 1; i >= 0; i--) {\n        u.faces[i].replaceVertex(u, v);\n      }\n      this.removeVertex(u, vertices);\n      for (i = 0; i < tmpVertices.length; i++) {\n        this.computeEdgeCostAtVertex(tmpVertices[i]);\n      }\n    });\n    __publicField(this, \"minimumCostEdge\", (vertices) => {\n      let least = vertices[0];\n      for (let i = 0; i < vertices.length; i++) {\n        if (vertices[i].collapseCost < least.collapseCost) {\n          least = vertices[i];\n        }\n      }\n      return least;\n    });\n    __publicField(this, \"modify\", (geometry, count) => {\n      geometry = geometry.clone();\n      const attributes = geometry.attributes;\n      for (let name in attributes) {\n        if (name !== \"position\")\n          geometry.deleteAttribute(name);\n      }\n      geometry = mergeVertices(geometry);\n      const vertices = [];\n      const faces = [];\n      const positionAttribute = geometry.getAttribute(\"position\");\n      for (let i = 0; i < positionAttribute.count; i++) {\n        const v = new Vector3().fromBufferAttribute(positionAttribute, i);\n        const vertex = new Vertex(v, i);\n        vertices.push(vertex);\n      }\n      const geomIndex = geometry.getIndex();\n      if (geomIndex !== null) {\n        for (let i = 0; i < geomIndex.count; i += 3) {\n          const a = geomIndex.getX(i);\n          const b = geomIndex.getX(i + 1);\n          const c = geomIndex.getX(i + 2);\n          const triangle = new Triangle(vertices[a], vertices[b], vertices[c], a, b, c);\n          faces.push(triangle);\n        }\n      } else {\n        for (let i = 0; i < positionAttribute.count; i += 3) {\n          const a = i;\n          const b = i + 1;\n          const c = i + 2;\n          const triangle = new Triangle(vertices[a], vertices[b], vertices[c], a, b, c);\n          faces.push(triangle);\n        }\n      }\n      for (let i = 0, il = vertices.length; i < il; i++) {\n        this.computeEdgeCostAtVertex(vertices[i]);\n      }\n      let nextVertex;\n      let z = count;\n      while (z--) {\n        nextVertex = this.minimumCostEdge(vertices);\n        if (!nextVertex) {\n          console.log(\"THREE.SimplifyModifier: No next vertex\");\n          break;\n        } else {\n          this.collapse(vertices, faces, nextVertex, nextVertex.collapseNeighbor);\n        }\n      }\n      const simplifiedGeometry = new BufferGeometry();\n      const position = [];\n      let index = [];\n      for (let i = 0; i < vertices.length; i++) {\n        const vertex = vertices[i].position;\n        position.push(vertex.x, vertex.y, vertex.z);\n      }\n      for (let i = 0; i < faces.length; i++) {\n        const face = faces[i];\n        const a = vertices.indexOf(face.v1);\n        const b = vertices.indexOf(face.v2);\n        const c = vertices.indexOf(face.v3);\n        index.push(a, b, c);\n      }\n      simplifiedGeometry.setAttribute(\"position\", new Float32BufferAttribute(position, 3));\n      simplifiedGeometry.setIndex(index);\n      return simplifiedGeometry;\n    });\n  }\n  removeVertex(v, vertices) {\n    console.assert(v.faces.length === 0);\n    while (v.neighbors.length) {\n      const n = v.neighbors.pop();\n      removeFromArray(n.neighbors, v);\n    }\n    removeFromArray(vertices, v);\n  }\n}\nexport {\n  SimplifyModifier\n};\n"],"mappings":";;AAAA,IAAIA,SAAS,GAAGC,MAAM,CAACC,cAAc;AACrC,IAAIC,eAAe,GAAG,SAAlBA,eAAeA,CAAIC,GAAG,EAAEC,GAAG,EAAEC,KAAK;EAAA,OAAKD,GAAG,IAAID,GAAG,GAAGJ,SAAS,CAACI,GAAG,EAAEC,GAAG,EAAE;IAAEE,UAAU,EAAE,IAAI;IAAEC,YAAY,EAAE,IAAI;IAAEC,QAAQ,EAAE,IAAI;IAAEH,KAAK,EAALA;EAAM,CAAC,CAAC,GAAGF,GAAG,CAACC,GAAG,CAAC,GAAGC,KAAK;AAAA;AAC/J,IAAII,aAAa,GAAG,SAAhBA,aAAaA,CAAIN,GAAG,EAAEC,GAAG,EAAEC,KAAK,EAAK;EACvCH,eAAe,CAACC,GAAG,EAAE,OAAOC,GAAG,KAAK,QAAQ,GAAGA,GAAG,GAAG,EAAE,GAAGA,GAAG,EAAEC,KAAK,CAAC;EACrE,OAAOA,KAAK;AACd,CAAC;AACD,SAASK,OAAO,EAAEC,cAAc,EAAEC,sBAAsB,QAAQ,OAAO;AACvE,SAASC,aAAa,QAAQ,iCAAiC;AAC/D,IAAMC,EAAE,GAAG,eAAgB,IAAIJ,OAAO,CAAC,CAAC;AACxC,IAAMK,EAAE,GAAG,eAAgB,IAAIL,OAAO,CAAC,CAAC;AACxC,SAASM,YAAYA,CAACC,KAAK,EAAEC,MAAM,EAAE;EACnC,IAAID,KAAK,CAACE,OAAO,CAACD,MAAM,CAAC,KAAK,CAAC,CAAC,EAC9BD,KAAK,CAACG,IAAI,CAACF,MAAM,CAAC;AACtB;AACA,SAASG,eAAeA,CAACJ,KAAK,EAAEC,MAAM,EAAE;EACtC,IAAMI,CAAC,GAAGL,KAAK,CAACE,OAAO,CAACD,MAAM,CAAC;EAC/B,IAAII,CAAC,GAAG,CAAC,CAAC,EACRL,KAAK,CAACM,MAAM,CAACD,CAAC,EAAE,CAAC,CAAC;AACtB;AAAC,IACKE,MAAM;EACV,SAAAA,OAAYC,CAAC,EAAEC,EAAE,EAAE;IAAAC,eAAA,OAAAH,MAAA;IACjBf,aAAa,CAAC,IAAI,EAAE,UAAU,CAAC;IAC/BA,aAAa,CAAC,IAAI,EAAE,IAAI,CAAC;IACzBA,aAAa,CAAC,IAAI,EAAE,OAAO,CAAC;IAC5BA,aAAa,CAAC,IAAI,EAAE,WAAW,CAAC;IAChCA,aAAa,CAAC,IAAI,EAAE,cAAc,CAAC;IACnCA,aAAa,CAAC,IAAI,EAAE,kBAAkB,CAAC;IACvCA,aAAa,CAAC,IAAI,EAAE,SAAS,EAAE,CAAC,CAAC;IACjCA,aAAa,CAAC,IAAI,EAAE,WAAW,EAAE,CAAC,CAAC;IACnCA,aAAa,CAAC,IAAI,EAAE,WAAW,EAAE,CAAC,CAAC;IACnC,IAAI,CAACmB,QAAQ,GAAGH,CAAC;IACjB,IAAI,CAACC,EAAE,GAAGA,EAAE;IACZ,IAAI,CAACG,KAAK,GAAG,EAAE;IACf,IAAI,CAACC,SAAS,GAAG,EAAE;IACnB,IAAI,CAACC,YAAY,GAAG,CAAC;IACrB,IAAI,CAACC,gBAAgB,GAAG,IAAI;EAC9B;EAACC,YAAA,CAAAT,MAAA;IAAApB,GAAA;IAAAC,KAAA,EACD,SAAA6B,kBAAkBC,MAAM,EAAE;MACxBnB,YAAY,CAAC,IAAI,CAACc,SAAS,EAAEK,MAAM,CAAC;IACtC;EAAC;IAAA/B,GAAA;IAAAC,KAAA,EACD,SAAA+B,oBAAoBC,CAAC,EAAE;MACrB,IAAMP,SAAS,GAAG,IAAI,CAACA,SAAS;MAChC,IAAMD,KAAK,GAAG,IAAI,CAACA,KAAK;MACxB,IAAMS,MAAM,GAAGR,SAAS,CAACX,OAAO,CAACkB,CAAC,CAAC;MACnC,IAAIC,MAAM,KAAK,CAAC,CAAC,EACf;MACF,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGV,KAAK,CAACW,MAAM,EAAED,CAAC,EAAE,EAAE;QACrC,IAAIV,KAAK,CAACU,CAAC,CAAC,CAACE,SAAS,CAACJ,CAAC,CAAC,EACvB;MACJ;MACAP,SAAS,CAACP,MAAM,CAACe,MAAM,EAAE,CAAC,CAAC;IAC7B;EAAC;EAAA,OAAAd,MAAA;AAAA;AAAA,IAEGkB,QAAQ;EACZ,SAAAA,SAAYC,EAAE,EAAEC,EAAE,EAAEC,EAAE,EAAEC,CAAC,EAAEC,CAAC,EAAEC,CAAC,EAAE;IAAArB,eAAA,OAAAe,QAAA;IAC/BjC,aAAa,CAAC,IAAI,EAAE,GAAG,CAAC;IACxBA,aAAa,CAAC,IAAI,EAAE,GAAG,CAAC;IACxBA,aAAa,CAAC,IAAI,EAAE,GAAG,CAAC;IACxBA,aAAa,CAAC,IAAI,EAAE,IAAI,CAAC;IACzBA,aAAa,CAAC,IAAI,EAAE,IAAI,CAAC;IACzBA,aAAa,CAAC,IAAI,EAAE,IAAI,CAAC;IACzBA,aAAa,CAAC,IAAI,EAAE,QAAQ,EAAE,IAAIC,OAAO,CAAC,CAAC,CAAC;IAC5C,IAAI,CAACoC,CAAC,GAAGA,CAAC;IACV,IAAI,CAACC,CAAC,GAAGA,CAAC;IACV,IAAI,CAACC,CAAC,GAAGA,CAAC;IACV,IAAI,CAACL,EAAE,GAAGA,EAAE;IACZ,IAAI,CAACC,EAAE,GAAGA,EAAE;IACZ,IAAI,CAACC,EAAE,GAAGA,EAAE;IACZ,IAAI,CAACI,aAAa,CAAC,CAAC;IACpBN,EAAE,CAACd,KAAK,CAACT,IAAI,CAAC,IAAI,CAAC;IACnBuB,EAAE,CAACT,iBAAiB,CAACU,EAAE,CAAC;IACxBD,EAAE,CAACT,iBAAiB,CAACW,EAAE,CAAC;IACxBD,EAAE,CAACf,KAAK,CAACT,IAAI,CAAC,IAAI,CAAC;IACnBwB,EAAE,CAACV,iBAAiB,CAACS,EAAE,CAAC;IACxBC,EAAE,CAACV,iBAAiB,CAACW,EAAE,CAAC;IACxBA,EAAE,CAAChB,KAAK,CAACT,IAAI,CAAC,IAAI,CAAC;IACnByB,EAAE,CAACX,iBAAiB,CAACS,EAAE,CAAC;IACxBE,EAAE,CAACX,iBAAiB,CAACU,EAAE,CAAC;EAC1B;EAACX,YAAA,CAAAS,QAAA;IAAAtC,GAAA;IAAAC,KAAA,EACD,SAAA4C,cAAA,EAAgB;MACd,IAAMC,EAAE,GAAG,IAAI,CAACP,EAAE,CAACf,QAAQ;MAC3B,IAAMuB,EAAE,GAAG,IAAI,CAACP,EAAE,CAAChB,QAAQ;MAC3B,IAAMwB,EAAE,GAAG,IAAI,CAACP,EAAE,CAACjB,QAAQ;MAC3Bd,EAAE,CAACuC,UAAU,CAACD,EAAE,EAAED,EAAE,CAAC;MACrBpC,EAAE,CAACsC,UAAU,CAACH,EAAE,EAAEC,EAAE,CAAC;MACrBrC,EAAE,CAACwC,KAAK,CAACvC,EAAE,CAAC,CAACwC,SAAS,CAAC,CAAC;MACxB,IAAI,CAACC,MAAM,CAACC,IAAI,CAAC3C,EAAE,CAAC;IACtB;EAAC;IAAAV,GAAA;IAAAC,KAAA,EACD,SAAAoC,UAAUhB,CAAC,EAAE;MACX,OAAOA,CAAC,KAAK,IAAI,CAACkB,EAAE,IAAIlB,CAAC,KAAK,IAAI,CAACmB,EAAE,IAAInB,CAAC,KAAK,IAAI,CAACoB,EAAE;IACxD;EAAC;IAAAzC,GAAA;IAAAC,KAAA,EACD,SAAAqD,cAAcC,IAAI,EAAEC,IAAI,EAAE;MACxB,IAAID,IAAI,KAAK,IAAI,CAAChB,EAAE,EAClB,IAAI,CAACA,EAAE,GAAGiB,IAAI,CAAC,KACZ,IAAID,IAAI,KAAK,IAAI,CAACf,EAAE,EACvB,IAAI,CAACA,EAAE,GAAGgB,IAAI,CAAC,KACZ,IAAID,IAAI,KAAK,IAAI,CAACd,EAAE,EACvB,IAAI,CAACA,EAAE,GAAGe,IAAI;MAChBvC,eAAe,CAACsC,IAAI,CAAC9B,KAAK,EAAE,IAAI,CAAC;MACjC+B,IAAI,CAAC/B,KAAK,CAACT,IAAI,CAAC,IAAI,CAAC;MACrBuC,IAAI,CAACvB,mBAAmB,CAAC,IAAI,CAACO,EAAE,CAAC;MACjC,IAAI,CAACA,EAAE,CAACP,mBAAmB,CAACuB,IAAI,CAAC;MACjCA,IAAI,CAACvB,mBAAmB,CAAC,IAAI,CAACQ,EAAE,CAAC;MACjC,IAAI,CAACA,EAAE,CAACR,mBAAmB,CAACuB,IAAI,CAAC;MACjCA,IAAI,CAACvB,mBAAmB,CAAC,IAAI,CAACS,EAAE,CAAC;MACjC,IAAI,CAACA,EAAE,CAACT,mBAAmB,CAACuB,IAAI,CAAC;MACjC,IAAI,CAAChB,EAAE,CAACT,iBAAiB,CAAC,IAAI,CAACU,EAAE,CAAC;MAClC,IAAI,CAACD,EAAE,CAACT,iBAAiB,CAAC,IAAI,CAACW,EAAE,CAAC;MAClC,IAAI,CAACD,EAAE,CAACV,iBAAiB,CAAC,IAAI,CAACS,EAAE,CAAC;MAClC,IAAI,CAACC,EAAE,CAACV,iBAAiB,CAAC,IAAI,CAACW,EAAE,CAAC;MAClC,IAAI,CAACA,EAAE,CAACX,iBAAiB,CAAC,IAAI,CAACS,EAAE,CAAC;MAClC,IAAI,CAACE,EAAE,CAACX,iBAAiB,CAAC,IAAI,CAACU,EAAE,CAAC;MAClC,IAAI,CAACK,aAAa,CAAC,CAAC;IACtB;EAAC;EAAA,OAAAP,QAAA;AAAA;AAAA,IAEGmB,gBAAgB;EACpB,SAAAA,iBAAA,EAAc;IAAA,IAAAC,KAAA;IAAAnC,eAAA,OAAAkC,gBAAA;IACZpD,aAAa,CAAC,IAAI,EAAE,yBAAyB,EAAE,UAACsD,CAAC,EAAEtC,CAAC,EAAK;MACvD,IAAMuC,UAAU,GAAGvC,CAAC,CAACG,QAAQ,CAACqC,UAAU,CAACF,CAAC,CAACnC,QAAQ,CAAC;MACpD,IAAIsC,SAAS,GAAG,CAAC;MACjB,IAAMC,SAAS,GAAG,EAAE;MACpB,IAAI5B,CAAC;QAAE6B,EAAE,GAAGL,CAAC,CAAClC,KAAK,CAACW,MAAM;QAAE6B,IAAI;QAAEC,QAAQ;MAC1C,KAAK/B,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG6B,EAAE,EAAE7B,CAAC,EAAE,EAAE;QACvB8B,IAAI,GAAGN,CAAC,CAAClC,KAAK,CAACU,CAAC,CAAC;QACjB,IAAI8B,IAAI,CAAC5B,SAAS,CAAChB,CAAC,CAAC,EAAE;UACrB0C,SAAS,CAAC/C,IAAI,CAACiD,IAAI,CAAC;QACtB;MACF;MACA,KAAK9B,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG6B,EAAE,EAAE7B,CAAC,EAAE,EAAE;QACvB,IAAIgC,YAAY,GAAG,CAAC;QACpBF,IAAI,GAAGN,CAAC,CAAClC,KAAK,CAACU,CAAC,CAAC;QACjB,KAAK,IAAIiC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGL,SAAS,CAAC3B,MAAM,EAAEgC,CAAC,EAAE,EAAE;UACzCF,QAAQ,GAAGH,SAAS,CAACK,CAAC,CAAC;UACvB,IAAMC,OAAO,GAAGJ,IAAI,CAACb,MAAM,CAACkB,GAAG,CAACJ,QAAQ,CAACd,MAAM,CAAC;UAChDe,YAAY,GAAGI,IAAI,CAACC,GAAG,CAACL,YAAY,EAAE,CAAC,KAAK,GAAGE,OAAO,IAAI,CAAC,CAAC;QAC9D;QACAP,SAAS,GAAGS,IAAI,CAACE,GAAG,CAACX,SAAS,EAAEK,YAAY,CAAC;MAC/C;MACA,IAAMO,OAAO,GAAG,CAAC;MACjB,IAAIX,SAAS,CAAC3B,MAAM,GAAG,CAAC,EAAE;QACxB0B,SAAS,GAAG,CAAC;MACf;MACA,IAAMa,GAAG,GAAGf,UAAU,GAAGE,SAAS,GAAGY,OAAO;MAC5C,OAAOC,GAAG;IACZ,CAAC,CAAC;IACFtE,aAAa,CAAC,IAAI,EAAE,yBAAyB,EAAE,UAACgB,CAAC,EAAK;MACpD,IAAIA,CAAC,CAACK,SAAS,CAACU,MAAM,KAAK,CAAC,EAAE;QAC5Bf,CAAC,CAACO,gBAAgB,GAAG,IAAI;QACzBP,CAAC,CAACM,YAAY,GAAG,CAAC,IAAI;QACtB;MACF;MACAN,CAAC,CAACM,YAAY,GAAG,GAAG;MACpBN,CAAC,CAACO,gBAAgB,GAAG,IAAI;MACzB,KAAK,IAAIO,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGd,CAAC,CAACK,SAAS,CAACU,MAAM,EAAED,CAAC,EAAE,EAAE;QAC3C,IAAMR,YAAY,GAAG+B,KAAI,CAACkB,uBAAuB,CAACvD,CAAC,EAAEA,CAAC,CAACK,SAAS,CAACS,CAAC,CAAC,CAAC;QACpE,IAAI,CAACd,CAAC,CAACO,gBAAgB,EAAE;UACvBP,CAAC,CAACO,gBAAgB,GAAGP,CAAC,CAACK,SAAS,CAACS,CAAC,CAAC;UACnCd,CAAC,CAACM,YAAY,GAAGA,YAAY;UAC7BN,CAAC,CAACwD,OAAO,GAAGlD,YAAY;UACxBN,CAAC,CAACyD,SAAS,GAAG,CAAC;UACfzD,CAAC,CAAC0D,SAAS,GAAG,CAAC;QACjB;QACA1D,CAAC,CAAC0D,SAAS,EAAE;QACb1D,CAAC,CAACyD,SAAS,IAAInD,YAAY;QAC3B,IAAIA,YAAY,GAAGN,CAAC,CAACwD,OAAO,EAAE;UAC5BxD,CAAC,CAACO,gBAAgB,GAAGP,CAAC,CAACK,SAAS,CAACS,CAAC,CAAC;UACnCd,CAAC,CAACwD,OAAO,GAAGlD,YAAY;QAC1B;MACF;MACAN,CAAC,CAACM,YAAY,GAAGN,CAAC,CAACyD,SAAS,GAAGzD,CAAC,CAAC0D,SAAS;IAC5C,CAAC,CAAC;IACF1E,aAAa,CAAC,IAAI,EAAE,YAAY,EAAE,UAAC2E,CAAC,EAAEvD,KAAK,EAAK;MAC9CR,eAAe,CAACQ,KAAK,EAAEuD,CAAC,CAAC;MACzB,IAAIA,CAAC,CAACzC,EAAE,EACNtB,eAAe,CAAC+D,CAAC,CAACzC,EAAE,CAACd,KAAK,EAAEuD,CAAC,CAAC;MAChC,IAAIA,CAAC,CAACxC,EAAE,EACNvB,eAAe,CAAC+D,CAAC,CAACxC,EAAE,CAACf,KAAK,EAAEuD,CAAC,CAAC;MAChC,IAAIA,CAAC,CAACvC,EAAE,EACNxB,eAAe,CAAC+D,CAAC,CAACvC,EAAE,CAAChB,KAAK,EAAEuD,CAAC,CAAC;MAChC,IAAMC,EAAE,GAAG,CAACD,CAAC,CAACzC,EAAE,EAAEyC,CAAC,CAACxC,EAAE,EAAEwC,CAAC,CAACvC,EAAE,CAAC;MAC7B,IAAIF,EAAE,EAAEC,EAAE;MACV,KAAK,IAAIL,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,CAAC,EAAEA,CAAC,EAAE,EAAE;QAC1BI,EAAE,GAAG0C,EAAE,CAAC9C,CAAC,CAAC;QACVK,EAAE,GAAGyC,EAAE,CAAC,CAAC9C,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;QACpB,IAAI,CAACI,EAAE,IAAI,CAACC,EAAE,EACZ;QACFD,EAAE,CAACP,mBAAmB,CAACQ,EAAE,CAAC;QAC1BA,EAAE,CAACR,mBAAmB,CAACO,EAAE,CAAC;MAC5B;IACF,CAAC,CAAC;IACFlC,aAAa,CAAC,IAAI,EAAE,UAAU,EAAE,UAAC6E,QAAQ,EAAEzD,KAAK,EAAEkC,CAAC,EAAEtC,CAAC,EAAK;MACzD,IAAI,CAACA,CAAC,EAAE;QACNqC,KAAI,CAACyB,YAAY,CAACxB,CAAC,EAAEuB,QAAQ,CAAC;QAC9B;MACF;MACA,IAAI/C,CAAC;MACL,IAAMiD,WAAW,GAAG,EAAE;MACtB,KAAKjD,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGwB,CAAC,CAACjC,SAAS,CAACU,MAAM,EAAED,CAAC,EAAE,EAAE;QACvCiD,WAAW,CAACpE,IAAI,CAAC2C,CAAC,CAACjC,SAAS,CAACS,CAAC,CAAC,CAAC;MAClC;MACA,KAAKA,CAAC,GAAGwB,CAAC,CAAClC,KAAK,CAACW,MAAM,GAAG,CAAC,EAAED,CAAC,IAAI,CAAC,EAAEA,CAAC,EAAE,EAAE;QACxC,IAAIwB,CAAC,CAAClC,KAAK,CAACU,CAAC,CAAC,CAACE,SAAS,CAAChB,CAAC,CAAC,EAAE;UAC3BqC,KAAI,CAAC2B,UAAU,CAAC1B,CAAC,CAAClC,KAAK,CAACU,CAAC,CAAC,EAAEV,KAAK,CAAC;QACpC;MACF;MACA,KAAKU,CAAC,GAAGwB,CAAC,CAAClC,KAAK,CAACW,MAAM,GAAG,CAAC,EAAED,CAAC,IAAI,CAAC,EAAEA,CAAC,EAAE,EAAE;QACxCwB,CAAC,CAAClC,KAAK,CAACU,CAAC,CAAC,CAACmB,aAAa,CAACK,CAAC,EAAEtC,CAAC,CAAC;MAChC;MACAqC,KAAI,CAACyB,YAAY,CAACxB,CAAC,EAAEuB,QAAQ,CAAC;MAC9B,KAAK/C,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGiD,WAAW,CAAChD,MAAM,EAAED,CAAC,EAAE,EAAE;QACvCuB,KAAI,CAAC4B,uBAAuB,CAACF,WAAW,CAACjD,CAAC,CAAC,CAAC;MAC9C;IACF,CAAC,CAAC;IACF9B,aAAa,CAAC,IAAI,EAAE,iBAAiB,EAAE,UAAC6E,QAAQ,EAAK;MACnD,IAAIK,KAAK,GAAGL,QAAQ,CAAC,CAAC,CAAC;MACvB,KAAK,IAAI/C,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG+C,QAAQ,CAAC9C,MAAM,EAAED,CAAC,EAAE,EAAE;QACxC,IAAI+C,QAAQ,CAAC/C,CAAC,CAAC,CAACR,YAAY,GAAG4D,KAAK,CAAC5D,YAAY,EAAE;UACjD4D,KAAK,GAAGL,QAAQ,CAAC/C,CAAC,CAAC;QACrB;MACF;MACA,OAAOoD,KAAK;IACd,CAAC,CAAC;IACFlF,aAAa,CAAC,IAAI,EAAE,QAAQ,EAAE,UAACmF,QAAQ,EAAEC,KAAK,EAAK;MACjDD,QAAQ,GAAGA,QAAQ,CAACE,KAAK,CAAC,CAAC;MAC3B,IAAMC,UAAU,GAAGH,QAAQ,CAACG,UAAU;MACtC,KAAK,IAAIC,IAAI,IAAID,UAAU,EAAE;QAC3B,IAAIC,IAAI,KAAK,UAAU,EACrBJ,QAAQ,CAACK,eAAe,CAACD,IAAI,CAAC;MAClC;MACAJ,QAAQ,GAAG/E,aAAa,CAAC+E,QAAQ,CAAC;MAClC,IAAMN,QAAQ,GAAG,EAAE;MACnB,IAAMzD,KAAK,GAAG,EAAE;MAChB,IAAMqE,iBAAiB,GAAGN,QAAQ,CAACO,YAAY,CAAC,UAAU,CAAC;MAC3D,KAAK,IAAI5D,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG2D,iBAAiB,CAACL,KAAK,EAAEtD,CAAC,EAAE,EAAE;QAChD,IAAMd,CAAC,GAAG,IAAIf,OAAO,CAAC,CAAC,CAAC0F,mBAAmB,CAACF,iBAAiB,EAAE3D,CAAC,CAAC;QACjE,IAAMJ,MAAM,GAAG,IAAIX,MAAM,CAACC,CAAC,EAAEc,CAAC,CAAC;QAC/B+C,QAAQ,CAAClE,IAAI,CAACe,MAAM,CAAC;MACvB;MACA,IAAMkE,SAAS,GAAGT,QAAQ,CAACU,QAAQ,CAAC,CAAC;MACrC,IAAID,SAAS,KAAK,IAAI,EAAE;QACtB,KAAK,IAAI9D,EAAC,GAAG,CAAC,EAAEA,EAAC,GAAG8D,SAAS,CAACR,KAAK,EAAEtD,EAAC,IAAI,CAAC,EAAE;UAC3C,IAAMO,CAAC,GAAGuD,SAAS,CAACE,IAAI,CAAChE,EAAC,CAAC;UAC3B,IAAMQ,CAAC,GAAGsD,SAAS,CAACE,IAAI,CAAChE,EAAC,GAAG,CAAC,CAAC;UAC/B,IAAMS,CAAC,GAAGqD,SAAS,CAACE,IAAI,CAAChE,EAAC,GAAG,CAAC,CAAC;UAC/B,IAAMiE,QAAQ,GAAG,IAAI9D,QAAQ,CAAC4C,QAAQ,CAACxC,CAAC,CAAC,EAAEwC,QAAQ,CAACvC,CAAC,CAAC,EAAEuC,QAAQ,CAACtC,CAAC,CAAC,EAAEF,CAAC,EAAEC,CAAC,EAAEC,CAAC,CAAC;UAC7EnB,KAAK,CAACT,IAAI,CAACoF,QAAQ,CAAC;QACtB;MACF,CAAC,MAAM;QACL,KAAK,IAAIjE,GAAC,GAAG,CAAC,EAAEA,GAAC,GAAG2D,iBAAiB,CAACL,KAAK,EAAEtD,GAAC,IAAI,CAAC,EAAE;UACnD,IAAMO,EAAC,GAAGP,GAAC;UACX,IAAMQ,EAAC,GAAGR,GAAC,GAAG,CAAC;UACf,IAAMS,EAAC,GAAGT,GAAC,GAAG,CAAC;UACf,IAAMiE,SAAQ,GAAG,IAAI9D,QAAQ,CAAC4C,QAAQ,CAACxC,EAAC,CAAC,EAAEwC,QAAQ,CAACvC,EAAC,CAAC,EAAEuC,QAAQ,CAACtC,EAAC,CAAC,EAAEF,EAAC,EAAEC,EAAC,EAAEC,EAAC,CAAC;UAC7EnB,KAAK,CAACT,IAAI,CAACoF,SAAQ,CAAC;QACtB;MACF;MACA,KAAK,IAAIjE,GAAC,GAAG,CAAC,EAAE6B,EAAE,GAAGkB,QAAQ,CAAC9C,MAAM,EAAED,GAAC,GAAG6B,EAAE,EAAE7B,GAAC,EAAE,EAAE;QACjDuB,KAAI,CAAC4B,uBAAuB,CAACJ,QAAQ,CAAC/C,GAAC,CAAC,CAAC;MAC3C;MACA,IAAIkE,UAAU;MACd,IAAIC,CAAC,GAAGb,KAAK;MACb,OAAOa,CAAC,EAAE,EAAE;QACVD,UAAU,GAAG3C,KAAI,CAAC6C,eAAe,CAACrB,QAAQ,CAAC;QAC3C,IAAI,CAACmB,UAAU,EAAE;UACfG,OAAO,CAACC,GAAG,CAAC,wCAAwC,CAAC;UACrD;QACF,CAAC,MAAM;UACL/C,KAAI,CAACgD,QAAQ,CAACxB,QAAQ,EAAEzD,KAAK,EAAE4E,UAAU,EAAEA,UAAU,CAACzE,gBAAgB,CAAC;QACzE;MACF;MACA,IAAM+E,kBAAkB,GAAG,IAAIpG,cAAc,CAAC,CAAC;MAC/C,IAAMiB,QAAQ,GAAG,EAAE;MACnB,IAAIoF,KAAK,GAAG,EAAE;MACd,KAAK,IAAIzE,GAAC,GAAG,CAAC,EAAEA,GAAC,GAAG+C,QAAQ,CAAC9C,MAAM,EAAED,GAAC,EAAE,EAAE;QACxC,IAAMJ,OAAM,GAAGmD,QAAQ,CAAC/C,GAAC,CAAC,CAACX,QAAQ;QACnCA,QAAQ,CAACR,IAAI,CAACe,OAAM,CAAC8E,CAAC,EAAE9E,OAAM,CAAC+E,CAAC,EAAE/E,OAAM,CAACuE,CAAC,CAAC;MAC7C;MACA,KAAK,IAAInE,GAAC,GAAG,CAAC,EAAEA,GAAC,GAAGV,KAAK,CAACW,MAAM,EAAED,GAAC,EAAE,EAAE;QACrC,IAAM8B,IAAI,GAAGxC,KAAK,CAACU,GAAC,CAAC;QACrB,IAAMO,GAAC,GAAGwC,QAAQ,CAACnE,OAAO,CAACkD,IAAI,CAAC1B,EAAE,CAAC;QACnC,IAAMI,GAAC,GAAGuC,QAAQ,CAACnE,OAAO,CAACkD,IAAI,CAACzB,EAAE,CAAC;QACnC,IAAMI,GAAC,GAAGsC,QAAQ,CAACnE,OAAO,CAACkD,IAAI,CAACxB,EAAE,CAAC;QACnCmE,KAAK,CAAC5F,IAAI,CAAC0B,GAAC,EAAEC,GAAC,EAAEC,GAAC,CAAC;MACrB;MACA+D,kBAAkB,CAACI,YAAY,CAAC,UAAU,EAAE,IAAIvG,sBAAsB,CAACgB,QAAQ,EAAE,CAAC,CAAC,CAAC;MACpFmF,kBAAkB,CAACK,QAAQ,CAACJ,KAAK,CAAC;MAClC,OAAOD,kBAAkB;IAC3B,CAAC,CAAC;EACJ;EAAC9E,YAAA,CAAA4B,gBAAA;IAAAzD,GAAA;IAAAC,KAAA,EACD,SAAAkF,aAAa9D,CAAC,EAAE6D,QAAQ,EAAE;MACxBsB,OAAO,CAACS,MAAM,CAAC5F,CAAC,CAACI,KAAK,CAACW,MAAM,KAAK,CAAC,CAAC;MACpC,OAAOf,CAAC,CAACK,SAAS,CAACU,MAAM,EAAE;QACzB,IAAMH,CAAC,GAAGZ,CAAC,CAACK,SAAS,CAACwF,GAAG,CAAC,CAAC;QAC3BjG,eAAe,CAACgB,CAAC,CAACP,SAAS,EAAEL,CAAC,CAAC;MACjC;MACAJ,eAAe,CAACiE,QAAQ,EAAE7D,CAAC,CAAC;IAC9B;EAAC;EAAA,OAAAoC,gBAAA;AAAA;AAEH,SACEA,gBAAgB"},"metadata":{},"sourceType":"module","externalDependencies":[]}