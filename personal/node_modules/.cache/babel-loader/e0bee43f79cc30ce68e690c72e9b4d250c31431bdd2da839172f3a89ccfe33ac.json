{"ast":null,"code":"import { Object3D, MeshBasicMaterial, MathUtils, Mesh } from \"three\";\nimport { LightningStrike } from \"../geometries/LightningStrike.js\";\nclass LightningStorm extends Object3D {\n  constructor() {\n    let stormParams = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    super();\n    this.isLightningStorm = true;\n    this.stormParams = stormParams;\n    stormParams.size = stormParams.size !== void 0 ? stormParams.size : 1e3;\n    stormParams.minHeight = stormParams.minHeight !== void 0 ? stormParams.minHeight : 80;\n    stormParams.maxHeight = stormParams.maxHeight !== void 0 ? stormParams.maxHeight : 100;\n    stormParams.maxSlope = stormParams.maxSlope !== void 0 ? stormParams.maxSlope : 1.1;\n    stormParams.maxLightnings = stormParams.maxLightnings !== void 0 ? stormParams.maxLightnings : 3;\n    stormParams.lightningMinPeriod = stormParams.lightningMinPeriod !== void 0 ? stormParams.lightningMinPeriod : 3;\n    stormParams.lightningMaxPeriod = stormParams.lightningMaxPeriod !== void 0 ? stormParams.lightningMaxPeriod : 7;\n    stormParams.lightningMinDuration = stormParams.lightningMinDuration !== void 0 ? stormParams.lightningMinDuration : 1;\n    stormParams.lightningMaxDuration = stormParams.lightningMaxDuration !== void 0 ? stormParams.lightningMaxDuration : 2.5;\n    this.lightningParameters = LightningStrike.copyParameters(stormParams.lightningParameters, stormParams.lightningParameters);\n    this.lightningParameters.isEternal = false;\n    this.lightningMaterial = stormParams.lightningMaterial !== void 0 ? stormParams.lightningMaterial : new MeshBasicMaterial({\n      color: 11599871\n    });\n    if (stormParams.onRayPosition !== void 0) {\n      this.onRayPosition = stormParams.onRayPosition;\n    } else {\n      this.onRayPosition = function (source, dest) {\n        dest.set((Math.random() - 0.5) * stormParams.size, 0, (Math.random() - 0.5) * stormParams.size);\n        const height = MathUtils.lerp(stormParams.minHeight, stormParams.maxHeight, Math.random());\n        source.set(stormParams.maxSlope * (2 * Math.random() - 1), 1, stormParams.maxSlope * (2 * Math.random() - 1)).multiplyScalar(height).add(dest);\n      };\n    }\n    this.onLightningDown = stormParams.onLightningDown;\n    this.inited = false;\n    this.nextLightningTime = 0;\n    this.lightningsMeshes = [];\n    this.deadLightningsMeshes = [];\n    for (let i = 0; i < this.stormParams.maxLightnings; i++) {\n      const lightning = new LightningStrike(LightningStrike.copyParameters({}, this.lightningParameters));\n      const mesh = new Mesh(lightning, this.lightningMaterial);\n      this.deadLightningsMeshes.push(mesh);\n    }\n  }\n  update(time) {\n    if (!this.inited) {\n      this.nextLightningTime = this.getNextLightningTime(time) * Math.random();\n      this.inited = true;\n    }\n    if (time >= this.nextLightningTime) {\n      const lightningMesh = this.deadLightningsMeshes.pop();\n      if (lightningMesh) {\n        const lightningParams1 = LightningStrike.copyParameters(lightningMesh.geometry.rayParameters, this.lightningParameters);\n        lightningParams1.birthTime = time;\n        lightningParams1.deathTime = time + MathUtils.lerp(this.stormParams.lightningMinDuration, this.stormParams.lightningMaxDuration, Math.random());\n        this.onRayPosition(lightningParams1.sourceOffset, lightningParams1.destOffset);\n        lightningParams1.noiseSeed = Math.random();\n        this.add(lightningMesh);\n        this.lightningsMeshes.push(lightningMesh);\n      }\n      this.nextLightningTime = this.getNextLightningTime(time);\n    }\n    let i = 0,\n      il = this.lightningsMeshes.length;\n    while (i < il) {\n      const mesh = this.lightningsMeshes[i];\n      const lightning = mesh.geometry;\n      const prevState = lightning.state;\n      lightning.update(time);\n      if (prevState === LightningStrike.RAY_PROPAGATING && lightning.state > prevState) {\n        if (this.onLightningDown) {\n          this.onLightningDown(lightning);\n        }\n      }\n      if (lightning.state === LightningStrike.RAY_EXTINGUISHED) {\n        this.lightningsMeshes.splice(this.lightningsMeshes.indexOf(mesh), 1);\n        this.deadLightningsMeshes.push(mesh);\n        this.remove(mesh);\n        il--;\n      } else {\n        i++;\n      }\n    }\n  }\n  getNextLightningTime(currentTime) {\n    return currentTime + MathUtils.lerp(this.stormParams.lightningMinPeriod, this.stormParams.lightningMaxPeriod, Math.random()) / (this.stormParams.maxLightnings + 1);\n  }\n  copy(source, recursive) {\n    super.copy(source, recursive);\n    this.stormParams.size = source.stormParams.size;\n    this.stormParams.minHeight = source.stormParams.minHeight;\n    this.stormParams.maxHeight = source.stormParams.maxHeight;\n    this.stormParams.maxSlope = source.stormParams.maxSlope;\n    this.stormParams.maxLightnings = source.stormParams.maxLightnings;\n    this.stormParams.lightningMinPeriod = source.stormParams.lightningMinPeriod;\n    this.stormParams.lightningMaxPeriod = source.stormParams.lightningMaxPeriod;\n    this.stormParams.lightningMinDuration = source.stormParams.lightningMinDuration;\n    this.stormParams.lightningMaxDuration = source.stormParams.lightningMaxDuration;\n    this.lightningParameters = LightningStrike.copyParameters({}, source.lightningParameters);\n    this.lightningMaterial = source.stormParams.lightningMaterial;\n    this.onLightningDown = source.onLightningDown;\n    return this;\n  }\n  clone() {\n    return new this.constructor(this.stormParams).copy(this);\n  }\n}\nexport { LightningStorm };","map":{"version":3,"names":["Object3D","MeshBasicMaterial","MathUtils","Mesh","LightningStrike","LightningStorm","constructor","stormParams","arguments","length","undefined","isLightningStorm","size","minHeight","maxHeight","maxSlope","maxLightnings","lightningMinPeriod","lightningMaxPeriod","lightningMinDuration","lightningMaxDuration","lightningParameters","copyParameters","isEternal","lightningMaterial","color","onRayPosition","source","dest","set","Math","random","height","lerp","multiplyScalar","add","onLightningDown","inited","nextLightningTime","lightningsMeshes","deadLightningsMeshes","i","lightning","mesh","push","update","time","getNextLightningTime","lightningMesh","pop","lightningParams1","geometry","rayParameters","birthTime","deathTime","sourceOffset","destOffset","noiseSeed","il","prevState","state","RAY_PROPAGATING","RAY_EXTINGUISHED","splice","indexOf","remove","currentTime","copy","recursive","clone"],"sources":["/home/krug/Coding/JavaScript/Websites/Personal/personal/node_modules/.pnpm/three-stdlib@2.23.7_three@0.151.3/node_modules/three-stdlib/objects/LightningStorm.js"],"sourcesContent":["import { Object3D, MeshBasicMaterial, MathUtils, Mesh } from \"three\";\nimport { LightningStrike } from \"../geometries/LightningStrike.js\";\nclass LightningStorm extends Object3D {\n  constructor(stormParams = {}) {\n    super();\n    this.isLightningStorm = true;\n    this.stormParams = stormParams;\n    stormParams.size = stormParams.size !== void 0 ? stormParams.size : 1e3;\n    stormParams.minHeight = stormParams.minHeight !== void 0 ? stormParams.minHeight : 80;\n    stormParams.maxHeight = stormParams.maxHeight !== void 0 ? stormParams.maxHeight : 100;\n    stormParams.maxSlope = stormParams.maxSlope !== void 0 ? stormParams.maxSlope : 1.1;\n    stormParams.maxLightnings = stormParams.maxLightnings !== void 0 ? stormParams.maxLightnings : 3;\n    stormParams.lightningMinPeriod = stormParams.lightningMinPeriod !== void 0 ? stormParams.lightningMinPeriod : 3;\n    stormParams.lightningMaxPeriod = stormParams.lightningMaxPeriod !== void 0 ? stormParams.lightningMaxPeriod : 7;\n    stormParams.lightningMinDuration = stormParams.lightningMinDuration !== void 0 ? stormParams.lightningMinDuration : 1;\n    stormParams.lightningMaxDuration = stormParams.lightningMaxDuration !== void 0 ? stormParams.lightningMaxDuration : 2.5;\n    this.lightningParameters = LightningStrike.copyParameters(\n      stormParams.lightningParameters,\n      stormParams.lightningParameters\n    );\n    this.lightningParameters.isEternal = false;\n    this.lightningMaterial = stormParams.lightningMaterial !== void 0 ? stormParams.lightningMaterial : new MeshBasicMaterial({ color: 11599871 });\n    if (stormParams.onRayPosition !== void 0) {\n      this.onRayPosition = stormParams.onRayPosition;\n    } else {\n      this.onRayPosition = function(source, dest) {\n        dest.set((Math.random() - 0.5) * stormParams.size, 0, (Math.random() - 0.5) * stormParams.size);\n        const height = MathUtils.lerp(stormParams.minHeight, stormParams.maxHeight, Math.random());\n        source.set(stormParams.maxSlope * (2 * Math.random() - 1), 1, stormParams.maxSlope * (2 * Math.random() - 1)).multiplyScalar(height).add(dest);\n      };\n    }\n    this.onLightningDown = stormParams.onLightningDown;\n    this.inited = false;\n    this.nextLightningTime = 0;\n    this.lightningsMeshes = [];\n    this.deadLightningsMeshes = [];\n    for (let i = 0; i < this.stormParams.maxLightnings; i++) {\n      const lightning = new LightningStrike(LightningStrike.copyParameters({}, this.lightningParameters));\n      const mesh = new Mesh(lightning, this.lightningMaterial);\n      this.deadLightningsMeshes.push(mesh);\n    }\n  }\n  update(time) {\n    if (!this.inited) {\n      this.nextLightningTime = this.getNextLightningTime(time) * Math.random();\n      this.inited = true;\n    }\n    if (time >= this.nextLightningTime) {\n      const lightningMesh = this.deadLightningsMeshes.pop();\n      if (lightningMesh) {\n        const lightningParams1 = LightningStrike.copyParameters(\n          lightningMesh.geometry.rayParameters,\n          this.lightningParameters\n        );\n        lightningParams1.birthTime = time;\n        lightningParams1.deathTime = time + MathUtils.lerp(this.stormParams.lightningMinDuration, this.stormParams.lightningMaxDuration, Math.random());\n        this.onRayPosition(lightningParams1.sourceOffset, lightningParams1.destOffset);\n        lightningParams1.noiseSeed = Math.random();\n        this.add(lightningMesh);\n        this.lightningsMeshes.push(lightningMesh);\n      }\n      this.nextLightningTime = this.getNextLightningTime(time);\n    }\n    let i = 0, il = this.lightningsMeshes.length;\n    while (i < il) {\n      const mesh = this.lightningsMeshes[i];\n      const lightning = mesh.geometry;\n      const prevState = lightning.state;\n      lightning.update(time);\n      if (prevState === LightningStrike.RAY_PROPAGATING && lightning.state > prevState) {\n        if (this.onLightningDown) {\n          this.onLightningDown(lightning);\n        }\n      }\n      if (lightning.state === LightningStrike.RAY_EXTINGUISHED) {\n        this.lightningsMeshes.splice(this.lightningsMeshes.indexOf(mesh), 1);\n        this.deadLightningsMeshes.push(mesh);\n        this.remove(mesh);\n        il--;\n      } else {\n        i++;\n      }\n    }\n  }\n  getNextLightningTime(currentTime) {\n    return currentTime + MathUtils.lerp(this.stormParams.lightningMinPeriod, this.stormParams.lightningMaxPeriod, Math.random()) / (this.stormParams.maxLightnings + 1);\n  }\n  copy(source, recursive) {\n    super.copy(source, recursive);\n    this.stormParams.size = source.stormParams.size;\n    this.stormParams.minHeight = source.stormParams.minHeight;\n    this.stormParams.maxHeight = source.stormParams.maxHeight;\n    this.stormParams.maxSlope = source.stormParams.maxSlope;\n    this.stormParams.maxLightnings = source.stormParams.maxLightnings;\n    this.stormParams.lightningMinPeriod = source.stormParams.lightningMinPeriod;\n    this.stormParams.lightningMaxPeriod = source.stormParams.lightningMaxPeriod;\n    this.stormParams.lightningMinDuration = source.stormParams.lightningMinDuration;\n    this.stormParams.lightningMaxDuration = source.stormParams.lightningMaxDuration;\n    this.lightningParameters = LightningStrike.copyParameters({}, source.lightningParameters);\n    this.lightningMaterial = source.stormParams.lightningMaterial;\n    this.onLightningDown = source.onLightningDown;\n    return this;\n  }\n  clone() {\n    return new this.constructor(this.stormParams).copy(this);\n  }\n}\nexport {\n  LightningStorm\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}