{"ast":null,"code":"var __defProp = Object.defineProperty;\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value\n}) : obj[key] = value;\nvar __publicField = (obj, key, value) => {\n  __defNormalProp(obj, typeof key !== \"symbol\" ? key + \"\" : key, value);\n  return value;\n};\nimport { Vector3, Color, Vector2, Mesh, Line, Points, Matrix3, BufferAttribute } from \"three\";\nclass OBJExporter {\n  constructor() {\n    __publicField(this, \"output\");\n    __publicField(this, \"indexVertex\");\n    __publicField(this, \"indexVertexUvs\");\n    __publicField(this, \"indexNormals\");\n    __publicField(this, \"vertex\");\n    __publicField(this, \"color\");\n    __publicField(this, \"normal\");\n    __publicField(this, \"uv\");\n    __publicField(this, \"face\");\n    this.output = \"\";\n    this.indexVertex = 0;\n    this.indexVertexUvs = 0;\n    this.indexNormals = 0;\n    this.vertex = new Vector3();\n    this.color = new Color();\n    this.normal = new Vector3();\n    this.uv = new Vector2();\n    this.face = [];\n  }\n  parse(object) {\n    object.traverse(child => {\n      if (child instanceof Mesh && child.isMesh) {\n        this.parseMesh(child);\n      }\n      if (child instanceof Line && child.isLine) {\n        this.parseLine(child);\n      }\n      if (child instanceof Points && child.isPoints) {\n        this.parsePoints(child);\n      }\n    });\n    return this.output;\n  }\n  parseMesh(mesh) {\n    let nbVertex = 0;\n    let nbNormals = 0;\n    let nbVertexUvs = 0;\n    const geometry = mesh.geometry;\n    const normalMatrixWorld = new Matrix3();\n    if (!geometry.isBufferGeometry) {\n      throw new Error(\"THREE.OBJExporter: Geometry is not of type THREE.BufferGeometry.\");\n    }\n    const vertices = geometry.getAttribute(\"position\");\n    const normals = geometry.getAttribute(\"normal\");\n    const uvs = geometry.getAttribute(\"uv\");\n    const indices = geometry.getIndex();\n    this.output += `o ${mesh.name}\n`;\n    if (mesh.material && !Array.isArray(mesh.material) && mesh.material.name) {\n      this.output += `usemtl ${mesh.material.name}\n`;\n    }\n    if (vertices !== void 0) {\n      for (let i = 0, l = vertices.count; i < l; i++, nbVertex++) {\n        this.vertex.x = vertices.getX(i);\n        this.vertex.y = vertices.getY(i);\n        this.vertex.z = vertices.getZ(i);\n        this.vertex.applyMatrix4(mesh.matrixWorld);\n        this.output += `v ${this.vertex.x} ${this.vertex.y} ${this.vertex.z}\n`;\n      }\n    }\n    if (uvs !== void 0) {\n      for (let i = 0, l = uvs.count; i < l; i++, nbVertexUvs++) {\n        this.uv.x = uvs.getX(i);\n        this.uv.y = uvs.getY(i);\n        this.output += `vt ${this.uv.x} ${this.uv.y}\n`;\n      }\n    }\n    if (normals !== void 0) {\n      normalMatrixWorld.getNormalMatrix(mesh.matrixWorld);\n      for (let i = 0, l = normals.count; i < l; i++, nbNormals++) {\n        this.normal.x = normals.getX(i);\n        this.normal.y = normals.getY(i);\n        this.normal.z = normals.getZ(i);\n        this.normal.applyMatrix3(normalMatrixWorld).normalize();\n        this.output += `vn ${this.normal.x} ${this.normal.y} ${this.normal.z}\n`;\n      }\n    }\n    if (indices !== null) {\n      for (let i = 0, l = indices.count; i < l; i += 3) {\n        for (let m = 0; m < 3; m++) {\n          const j = indices.getX(i + m) + 1;\n          this.face[m] = this.indexVertex + j + (normals || uvs ? `/${uvs ? this.indexVertexUvs + j : \"\"}${normals ? `/${this.indexNormals + j}` : \"\"}` : \"\");\n        }\n        this.output += `f ${this.face.join(\" \")}\n`;\n      }\n    } else {\n      for (let i = 0, l = vertices.count; i < l; i += 3) {\n        for (let m = 0; m < 3; m++) {\n          const j = i + m + 1;\n          this.face[m] = this.indexVertex + j + (normals || uvs ? `/${uvs ? this.indexVertexUvs + j : \"\"}${normals ? `/${this.indexNormals + j}` : \"\"}` : \"\");\n        }\n        this.output += `f ${this.face.join(\" \")}\n`;\n      }\n    }\n    this.indexVertex += nbVertex;\n    this.indexVertexUvs += nbVertexUvs;\n    this.indexNormals += nbNormals;\n  }\n  parseLine(line) {\n    let nbVertex = 0;\n    const geometry = line.geometry;\n    const type = line.type;\n    if (geometry.isBufferGeometry) {\n      throw new Error(\"THREE.OBJExporter: Geometry is not of type THREE.BufferGeometry.\");\n    }\n    const vertices = geometry.getAttribute(\"position\");\n    this.output += `o ${line.name}\n`;\n    if (vertices !== void 0) {\n      for (let i = 0, l = vertices.count; i < l; i++, nbVertex++) {\n        this.vertex.x = vertices.getX(i);\n        this.vertex.y = vertices.getY(i);\n        this.vertex.z = vertices.getZ(i);\n        this.vertex.applyMatrix4(line.matrixWorld);\n        this.output += `v ${this.vertex.x} ${this.vertex.y} ${this.vertex.z}\n`;\n      }\n    }\n    if (type === \"Line\") {\n      this.output += \"l \";\n      for (let j = 1, l = vertices.count; j <= l; j++) {\n        this.output += `${this.indexVertex + j} `;\n      }\n      this.output += \"\\n\";\n    }\n    if (type === \"LineSegments\") {\n      for (let j = 1, k = j + 1, l = vertices.count; j < l; j += 2, k = j + 1) {\n        this.output += `l ${this.indexVertex + j} ${this.indexVertex + k}\n`;\n      }\n    }\n    this.indexVertex += nbVertex;\n  }\n  parsePoints(points) {\n    let nbVertex = 0;\n    const geometry = points.geometry;\n    if (!geometry.isBufferGeometry) {\n      throw new Error(\"THREE.OBJExporter: Geometry is not of type THREE.BufferGeometry.\");\n    }\n    const vertices = geometry.getAttribute(\"position\");\n    const colors = geometry.getAttribute(\"color\");\n    this.output += `o ${points.name}\n`;\n    if (vertices !== void 0) {\n      for (let i = 0, l = vertices.count; i < l; i++, nbVertex++) {\n        this.vertex.fromBufferAttribute(vertices, i);\n        this.vertex.applyMatrix4(points.matrixWorld);\n        this.output += `v ${this.vertex.x} ${this.vertex.y} ${this.vertex.z}`;\n        if (colors !== void 0 && colors instanceof BufferAttribute) {\n          this.color.fromBufferAttribute(colors, i);\n          this.output += ` ${this.color.r} ${this.color.g} ${this.color.b}`;\n        }\n        this.output += \"\\n\";\n      }\n    }\n    this.output += \"p \";\n    for (let j = 1, l = vertices.count; j <= l; j++) {\n      this.output += `${this.indexVertex + j} `;\n    }\n    this.output += \"\\n\";\n    this.indexVertex += nbVertex;\n  }\n}\nexport { OBJExporter };","map":{"version":3,"names":["__defProp","Object","defineProperty","__defNormalProp","obj","key","value","enumerable","configurable","writable","__publicField","Vector3","Color","Vector2","Mesh","Line","Points","Matrix3","BufferAttribute","OBJExporter","constructor","output","indexVertex","indexVertexUvs","indexNormals","vertex","color","normal","uv","face","parse","object","traverse","child","isMesh","parseMesh","isLine","parseLine","isPoints","parsePoints","mesh","nbVertex","nbNormals","nbVertexUvs","geometry","normalMatrixWorld","isBufferGeometry","Error","vertices","getAttribute","normals","uvs","indices","getIndex","name","material","Array","isArray","i","l","count","x","getX","y","getY","z","getZ","applyMatrix4","matrixWorld","getNormalMatrix","applyMatrix3","normalize","m","j","join","line","type","k","points","colors","fromBufferAttribute","r","g","b"],"sources":["/home/krug/Coding/JavaScript/Websites/Personal/personal/node_modules/.pnpm/three-stdlib@2.23.7_three@0.151.3/node_modules/three-stdlib/exporters/OBJExporter.js"],"sourcesContent":["var __defProp = Object.defineProperty;\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;\nvar __publicField = (obj, key, value) => {\n  __defNormalProp(obj, typeof key !== \"symbol\" ? key + \"\" : key, value);\n  return value;\n};\nimport { Vector3, Color, Vector2, Mesh, Line, Points, Matrix3, BufferAttribute } from \"three\";\nclass OBJExporter {\n  constructor() {\n    __publicField(this, \"output\");\n    __publicField(this, \"indexVertex\");\n    __publicField(this, \"indexVertexUvs\");\n    __publicField(this, \"indexNormals\");\n    __publicField(this, \"vertex\");\n    __publicField(this, \"color\");\n    __publicField(this, \"normal\");\n    __publicField(this, \"uv\");\n    __publicField(this, \"face\");\n    this.output = \"\";\n    this.indexVertex = 0;\n    this.indexVertexUvs = 0;\n    this.indexNormals = 0;\n    this.vertex = new Vector3();\n    this.color = new Color();\n    this.normal = new Vector3();\n    this.uv = new Vector2();\n    this.face = [];\n  }\n  parse(object) {\n    object.traverse((child) => {\n      if (child instanceof Mesh && child.isMesh) {\n        this.parseMesh(child);\n      }\n      if (child instanceof Line && child.isLine) {\n        this.parseLine(child);\n      }\n      if (child instanceof Points && child.isPoints) {\n        this.parsePoints(child);\n      }\n    });\n    return this.output;\n  }\n  parseMesh(mesh) {\n    let nbVertex = 0;\n    let nbNormals = 0;\n    let nbVertexUvs = 0;\n    const geometry = mesh.geometry;\n    const normalMatrixWorld = new Matrix3();\n    if (!geometry.isBufferGeometry) {\n      throw new Error(\"THREE.OBJExporter: Geometry is not of type THREE.BufferGeometry.\");\n    }\n    const vertices = geometry.getAttribute(\"position\");\n    const normals = geometry.getAttribute(\"normal\");\n    const uvs = geometry.getAttribute(\"uv\");\n    const indices = geometry.getIndex();\n    this.output += `o ${mesh.name}\n`;\n    if (mesh.material && !Array.isArray(mesh.material) && mesh.material.name) {\n      this.output += `usemtl ${mesh.material.name}\n`;\n    }\n    if (vertices !== void 0) {\n      for (let i = 0, l = vertices.count; i < l; i++, nbVertex++) {\n        this.vertex.x = vertices.getX(i);\n        this.vertex.y = vertices.getY(i);\n        this.vertex.z = vertices.getZ(i);\n        this.vertex.applyMatrix4(mesh.matrixWorld);\n        this.output += `v ${this.vertex.x} ${this.vertex.y} ${this.vertex.z}\n`;\n      }\n    }\n    if (uvs !== void 0) {\n      for (let i = 0, l = uvs.count; i < l; i++, nbVertexUvs++) {\n        this.uv.x = uvs.getX(i);\n        this.uv.y = uvs.getY(i);\n        this.output += `vt ${this.uv.x} ${this.uv.y}\n`;\n      }\n    }\n    if (normals !== void 0) {\n      normalMatrixWorld.getNormalMatrix(mesh.matrixWorld);\n      for (let i = 0, l = normals.count; i < l; i++, nbNormals++) {\n        this.normal.x = normals.getX(i);\n        this.normal.y = normals.getY(i);\n        this.normal.z = normals.getZ(i);\n        this.normal.applyMatrix3(normalMatrixWorld).normalize();\n        this.output += `vn ${this.normal.x} ${this.normal.y} ${this.normal.z}\n`;\n      }\n    }\n    if (indices !== null) {\n      for (let i = 0, l = indices.count; i < l; i += 3) {\n        for (let m = 0; m < 3; m++) {\n          const j = indices.getX(i + m) + 1;\n          this.face[m] = this.indexVertex + j + (normals || uvs ? `/${uvs ? this.indexVertexUvs + j : \"\"}${normals ? `/${this.indexNormals + j}` : \"\"}` : \"\");\n        }\n        this.output += `f ${this.face.join(\" \")}\n`;\n      }\n    } else {\n      for (let i = 0, l = vertices.count; i < l; i += 3) {\n        for (let m = 0; m < 3; m++) {\n          const j = i + m + 1;\n          this.face[m] = this.indexVertex + j + (normals || uvs ? `/${uvs ? this.indexVertexUvs + j : \"\"}${normals ? `/${this.indexNormals + j}` : \"\"}` : \"\");\n        }\n        this.output += `f ${this.face.join(\" \")}\n`;\n      }\n    }\n    this.indexVertex += nbVertex;\n    this.indexVertexUvs += nbVertexUvs;\n    this.indexNormals += nbNormals;\n  }\n  parseLine(line) {\n    let nbVertex = 0;\n    const geometry = line.geometry;\n    const type = line.type;\n    if (geometry.isBufferGeometry) {\n      throw new Error(\"THREE.OBJExporter: Geometry is not of type THREE.BufferGeometry.\");\n    }\n    const vertices = geometry.getAttribute(\"position\");\n    this.output += `o ${line.name}\n`;\n    if (vertices !== void 0) {\n      for (let i = 0, l = vertices.count; i < l; i++, nbVertex++) {\n        this.vertex.x = vertices.getX(i);\n        this.vertex.y = vertices.getY(i);\n        this.vertex.z = vertices.getZ(i);\n        this.vertex.applyMatrix4(line.matrixWorld);\n        this.output += `v ${this.vertex.x} ${this.vertex.y} ${this.vertex.z}\n`;\n      }\n    }\n    if (type === \"Line\") {\n      this.output += \"l \";\n      for (let j = 1, l = vertices.count; j <= l; j++) {\n        this.output += `${this.indexVertex + j} `;\n      }\n      this.output += \"\\n\";\n    }\n    if (type === \"LineSegments\") {\n      for (let j = 1, k = j + 1, l = vertices.count; j < l; j += 2, k = j + 1) {\n        this.output += `l ${this.indexVertex + j} ${this.indexVertex + k}\n`;\n      }\n    }\n    this.indexVertex += nbVertex;\n  }\n  parsePoints(points) {\n    let nbVertex = 0;\n    const geometry = points.geometry;\n    if (!geometry.isBufferGeometry) {\n      throw new Error(\"THREE.OBJExporter: Geometry is not of type THREE.BufferGeometry.\");\n    }\n    const vertices = geometry.getAttribute(\"position\");\n    const colors = geometry.getAttribute(\"color\");\n    this.output += `o ${points.name}\n`;\n    if (vertices !== void 0) {\n      for (let i = 0, l = vertices.count; i < l; i++, nbVertex++) {\n        this.vertex.fromBufferAttribute(vertices, i);\n        this.vertex.applyMatrix4(points.matrixWorld);\n        this.output += `v ${this.vertex.x} ${this.vertex.y} ${this.vertex.z}`;\n        if (colors !== void 0 && colors instanceof BufferAttribute) {\n          this.color.fromBufferAttribute(colors, i);\n          this.output += ` ${this.color.r} ${this.color.g} ${this.color.b}`;\n        }\n        this.output += \"\\n\";\n      }\n    }\n    this.output += \"p \";\n    for (let j = 1, l = vertices.count; j <= l; j++) {\n      this.output += `${this.indexVertex + j} `;\n    }\n    this.output += \"\\n\";\n    this.indexVertex += nbVertex;\n  }\n}\nexport {\n  OBJExporter\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}