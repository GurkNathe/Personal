{"ast":null,"code":"import { Vector4, Vector3 } from \"three\";\nfunction findSpan(p, u, U) {\n  const n = U.length - p - 1;\n  if (u >= U[n]) {\n    return n - 1;\n  }\n  if (u <= U[p]) {\n    return p;\n  }\n  let low = p;\n  let high = n;\n  let mid = Math.floor((low + high) / 2);\n  while (u < U[mid] || u >= U[mid + 1]) {\n    if (u < U[mid]) {\n      high = mid;\n    } else {\n      low = mid;\n    }\n    mid = Math.floor((low + high) / 2);\n  }\n  return mid;\n}\nfunction calcBasisFunctions(span, u, p, U) {\n  const N = [];\n  const left = [];\n  const right = [];\n  N[0] = 1;\n  for (let j = 1; j <= p; ++j) {\n    left[j] = u - U[span + 1 - j];\n    right[j] = U[span + j] - u;\n    let saved = 0;\n    for (let r = 0; r < j; ++r) {\n      const rv = right[r + 1];\n      const lv = left[j - r];\n      const temp = N[r] / (rv + lv);\n      N[r] = saved + rv * temp;\n      saved = lv * temp;\n    }\n    N[j] = saved;\n  }\n  return N;\n}\nfunction calcBSplinePoint(p, U, P, u) {\n  const span = findSpan(p, u, U);\n  const N = calcBasisFunctions(span, u, p, U);\n  const C = new Vector4(0, 0, 0, 0);\n  for (let j = 0; j <= p; ++j) {\n    const point = P[span - p + j];\n    const Nj = N[j];\n    const wNj = point.w * Nj;\n    C.x += point.x * wNj;\n    C.y += point.y * wNj;\n    C.z += point.z * wNj;\n    C.w += point.w * Nj;\n  }\n  return C;\n}\nfunction calcBasisFunctionDerivatives(span, u, p, n, U) {\n  const zeroArr = [];\n  for (let i = 0; i <= p; ++i) zeroArr[i] = 0;\n  const ders = [];\n  for (let i = 0; i <= n; ++i) ders[i] = zeroArr.slice(0);\n  const ndu = [];\n  for (let i = 0; i <= p; ++i) ndu[i] = zeroArr.slice(0);\n  ndu[0][0] = 1;\n  const left = zeroArr.slice(0);\n  const right = zeroArr.slice(0);\n  for (let j = 1; j <= p; ++j) {\n    left[j] = u - U[span + 1 - j];\n    right[j] = U[span + j] - u;\n    let saved = 0;\n    for (let r2 = 0; r2 < j; ++r2) {\n      const rv = right[r2 + 1];\n      const lv = left[j - r2];\n      ndu[j][r2] = rv + lv;\n      const temp = ndu[r2][j - 1] / ndu[j][r2];\n      ndu[r2][j] = saved + rv * temp;\n      saved = lv * temp;\n    }\n    ndu[j][j] = saved;\n  }\n  for (let j = 0; j <= p; ++j) {\n    ders[0][j] = ndu[j][p];\n  }\n  for (let r2 = 0; r2 <= p; ++r2) {\n    let s1 = 0;\n    let s2 = 1;\n    const a = [];\n    for (let i = 0; i <= p; ++i) {\n      a[i] = zeroArr.slice(0);\n    }\n    a[0][0] = 1;\n    for (let k = 1; k <= n; ++k) {\n      let d = 0;\n      const rk = r2 - k;\n      const pk = p - k;\n      if (r2 >= k) {\n        a[s2][0] = a[s1][0] / ndu[pk + 1][rk];\n        d = a[s2][0] * ndu[rk][pk];\n      }\n      const j1 = rk >= -1 ? 1 : -rk;\n      const j2 = r2 - 1 <= pk ? k - 1 : p - r2;\n      for (let j3 = j1; j3 <= j2; ++j3) {\n        a[s2][j3] = (a[s1][j3] - a[s1][j3 - 1]) / ndu[pk + 1][rk + j3];\n        d += a[s2][j3] * ndu[rk + j3][pk];\n      }\n      if (r2 <= pk) {\n        a[s2][k] = -a[s1][k - 1] / ndu[pk + 1][r2];\n        d += a[s2][k] * ndu[r2][pk];\n      }\n      ders[k][r2] = d;\n      const j = s1;\n      s1 = s2;\n      s2 = j;\n    }\n  }\n  let r = p;\n  for (let k = 1; k <= n; ++k) {\n    for (let j = 0; j <= p; ++j) {\n      ders[k][j] *= r;\n    }\n    r *= p - k;\n  }\n  return ders;\n}\nfunction calcBSplineDerivatives(p, U, P, u, nd) {\n  const du = nd < p ? nd : p;\n  const CK = [];\n  const span = findSpan(p, u, U);\n  const nders = calcBasisFunctionDerivatives(span, u, p, du, U);\n  const Pw = [];\n  for (let i = 0; i < P.length; ++i) {\n    const point = P[i].clone();\n    const w = point.w;\n    point.x *= w;\n    point.y *= w;\n    point.z *= w;\n    Pw[i] = point;\n  }\n  for (let k = 0; k <= du; ++k) {\n    const point = Pw[span - p].clone().multiplyScalar(nders[k][0]);\n    for (let j = 1; j <= p; ++j) {\n      point.add(Pw[span - p + j].clone().multiplyScalar(nders[k][j]));\n    }\n    CK[k] = point;\n  }\n  for (let k = du + 1; k <= nd + 1; ++k) {\n    CK[k] = new Vector4(0, 0, 0);\n  }\n  return CK;\n}\nfunction calcKoverI(k, i) {\n  let nom = 1;\n  for (let j = 2; j <= k; ++j) {\n    nom *= j;\n  }\n  let denom = 1;\n  for (let j = 2; j <= i; ++j) {\n    denom *= j;\n  }\n  for (let j = 2; j <= k - i; ++j) {\n    denom *= j;\n  }\n  return nom / denom;\n}\nfunction calcRationalCurveDerivatives(Pders) {\n  const nd = Pders.length;\n  const Aders = [];\n  const wders = [];\n  for (let i = 0; i < nd; ++i) {\n    const point = Pders[i];\n    Aders[i] = new Vector3(point.x, point.y, point.z);\n    wders[i] = point.w;\n  }\n  const CK = [];\n  for (let k = 0; k < nd; ++k) {\n    const v = Aders[k].clone();\n    for (let i = 1; i <= k; ++i) {\n      v.sub(CK[k - i].clone().multiplyScalar(calcKoverI(k, i) * wders[i]));\n    }\n    CK[k] = v.divideScalar(wders[0]);\n  }\n  return CK;\n}\nfunction calcNURBSDerivatives(p, U, P, u, nd) {\n  const Pders = calcBSplineDerivatives(p, U, P, u, nd);\n  return calcRationalCurveDerivatives(Pders);\n}\nfunction calcSurfacePoint(p, q, U, V, P, u, v, target) {\n  const uspan = findSpan(p, u, U);\n  const vspan = findSpan(q, v, V);\n  const Nu = calcBasisFunctions(uspan, u, p, U);\n  const Nv = calcBasisFunctions(vspan, v, q, V);\n  const temp = [];\n  for (let l = 0; l <= q; ++l) {\n    temp[l] = new Vector4(0, 0, 0, 0);\n    for (let k = 0; k <= p; ++k) {\n      const point = P[uspan - p + k][vspan - q + l].clone();\n      const w = point.w;\n      point.x *= w;\n      point.y *= w;\n      point.z *= w;\n      temp[l].add(point.multiplyScalar(Nu[k]));\n    }\n  }\n  const Sw = new Vector4(0, 0, 0, 0);\n  for (let l = 0; l <= q; ++l) {\n    Sw.add(temp[l].multiplyScalar(Nv[l]));\n  }\n  Sw.divideScalar(Sw.w);\n  target.set(Sw.x, Sw.y, Sw.z);\n}\nexport { calcBSplineDerivatives, calcBSplinePoint, calcBasisFunctionDerivatives, calcBasisFunctions, calcKoverI, calcNURBSDerivatives, calcRationalCurveDerivatives, calcSurfacePoint, findSpan };","map":{"version":3,"names":["Vector4","Vector3","findSpan","p","u","U","n","length","low","high","mid","Math","floor","calcBasisFunctions","span","N","left","right","j","saved","r","rv","lv","temp","calcBSplinePoint","P","C","point","Nj","wNj","w","x","y","z","calcBasisFunctionDerivatives","zeroArr","i","ders","slice","ndu","r2","s1","s2","a","k","d","rk","pk","j1","j2","j3","calcBSplineDerivatives","nd","du","CK","nders","Pw","clone","multiplyScalar","add","calcKoverI","nom","denom","calcRationalCurveDerivatives","Pders","Aders","wders","v","sub","divideScalar","calcNURBSDerivatives","calcSurfacePoint","q","V","target","uspan","vspan","Nu","Nv","l","Sw","set"],"sources":["/home/krug/Coding/JavaScript/Websites/Personal/personal/node_modules/.pnpm/three-stdlib@2.23.7_three@0.151.3/node_modules/three-stdlib/curves/NURBSUtils.js"],"sourcesContent":["import { Vector4, Vector3 } from \"three\";\nfunction findSpan(p, u, U) {\n  const n = U.length - p - 1;\n  if (u >= U[n]) {\n    return n - 1;\n  }\n  if (u <= U[p]) {\n    return p;\n  }\n  let low = p;\n  let high = n;\n  let mid = Math.floor((low + high) / 2);\n  while (u < U[mid] || u >= U[mid + 1]) {\n    if (u < U[mid]) {\n      high = mid;\n    } else {\n      low = mid;\n    }\n    mid = Math.floor((low + high) / 2);\n  }\n  return mid;\n}\nfunction calcBasisFunctions(span, u, p, U) {\n  const N = [];\n  const left = [];\n  const right = [];\n  N[0] = 1;\n  for (let j = 1; j <= p; ++j) {\n    left[j] = u - U[span + 1 - j];\n    right[j] = U[span + j] - u;\n    let saved = 0;\n    for (let r = 0; r < j; ++r) {\n      const rv = right[r + 1];\n      const lv = left[j - r];\n      const temp = N[r] / (rv + lv);\n      N[r] = saved + rv * temp;\n      saved = lv * temp;\n    }\n    N[j] = saved;\n  }\n  return N;\n}\nfunction calcBSplinePoint(p, U, P, u) {\n  const span = findSpan(p, u, U);\n  const N = calcBasisFunctions(span, u, p, U);\n  const C = new Vector4(0, 0, 0, 0);\n  for (let j = 0; j <= p; ++j) {\n    const point = P[span - p + j];\n    const Nj = N[j];\n    const wNj = point.w * Nj;\n    C.x += point.x * wNj;\n    C.y += point.y * wNj;\n    C.z += point.z * wNj;\n    C.w += point.w * Nj;\n  }\n  return C;\n}\nfunction calcBasisFunctionDerivatives(span, u, p, n, U) {\n  const zeroArr = [];\n  for (let i = 0; i <= p; ++i)\n    zeroArr[i] = 0;\n  const ders = [];\n  for (let i = 0; i <= n; ++i)\n    ders[i] = zeroArr.slice(0);\n  const ndu = [];\n  for (let i = 0; i <= p; ++i)\n    ndu[i] = zeroArr.slice(0);\n  ndu[0][0] = 1;\n  const left = zeroArr.slice(0);\n  const right = zeroArr.slice(0);\n  for (let j = 1; j <= p; ++j) {\n    left[j] = u - U[span + 1 - j];\n    right[j] = U[span + j] - u;\n    let saved = 0;\n    for (let r2 = 0; r2 < j; ++r2) {\n      const rv = right[r2 + 1];\n      const lv = left[j - r2];\n      ndu[j][r2] = rv + lv;\n      const temp = ndu[r2][j - 1] / ndu[j][r2];\n      ndu[r2][j] = saved + rv * temp;\n      saved = lv * temp;\n    }\n    ndu[j][j] = saved;\n  }\n  for (let j = 0; j <= p; ++j) {\n    ders[0][j] = ndu[j][p];\n  }\n  for (let r2 = 0; r2 <= p; ++r2) {\n    let s1 = 0;\n    let s2 = 1;\n    const a = [];\n    for (let i = 0; i <= p; ++i) {\n      a[i] = zeroArr.slice(0);\n    }\n    a[0][0] = 1;\n    for (let k = 1; k <= n; ++k) {\n      let d = 0;\n      const rk = r2 - k;\n      const pk = p - k;\n      if (r2 >= k) {\n        a[s2][0] = a[s1][0] / ndu[pk + 1][rk];\n        d = a[s2][0] * ndu[rk][pk];\n      }\n      const j1 = rk >= -1 ? 1 : -rk;\n      const j2 = r2 - 1 <= pk ? k - 1 : p - r2;\n      for (let j3 = j1; j3 <= j2; ++j3) {\n        a[s2][j3] = (a[s1][j3] - a[s1][j3 - 1]) / ndu[pk + 1][rk + j3];\n        d += a[s2][j3] * ndu[rk + j3][pk];\n      }\n      if (r2 <= pk) {\n        a[s2][k] = -a[s1][k - 1] / ndu[pk + 1][r2];\n        d += a[s2][k] * ndu[r2][pk];\n      }\n      ders[k][r2] = d;\n      const j = s1;\n      s1 = s2;\n      s2 = j;\n    }\n  }\n  let r = p;\n  for (let k = 1; k <= n; ++k) {\n    for (let j = 0; j <= p; ++j) {\n      ders[k][j] *= r;\n    }\n    r *= p - k;\n  }\n  return ders;\n}\nfunction calcBSplineDerivatives(p, U, P, u, nd) {\n  const du = nd < p ? nd : p;\n  const CK = [];\n  const span = findSpan(p, u, U);\n  const nders = calcBasisFunctionDerivatives(span, u, p, du, U);\n  const Pw = [];\n  for (let i = 0; i < P.length; ++i) {\n    const point = P[i].clone();\n    const w = point.w;\n    point.x *= w;\n    point.y *= w;\n    point.z *= w;\n    Pw[i] = point;\n  }\n  for (let k = 0; k <= du; ++k) {\n    const point = Pw[span - p].clone().multiplyScalar(nders[k][0]);\n    for (let j = 1; j <= p; ++j) {\n      point.add(Pw[span - p + j].clone().multiplyScalar(nders[k][j]));\n    }\n    CK[k] = point;\n  }\n  for (let k = du + 1; k <= nd + 1; ++k) {\n    CK[k] = new Vector4(0, 0, 0);\n  }\n  return CK;\n}\nfunction calcKoverI(k, i) {\n  let nom = 1;\n  for (let j = 2; j <= k; ++j) {\n    nom *= j;\n  }\n  let denom = 1;\n  for (let j = 2; j <= i; ++j) {\n    denom *= j;\n  }\n  for (let j = 2; j <= k - i; ++j) {\n    denom *= j;\n  }\n  return nom / denom;\n}\nfunction calcRationalCurveDerivatives(Pders) {\n  const nd = Pders.length;\n  const Aders = [];\n  const wders = [];\n  for (let i = 0; i < nd; ++i) {\n    const point = Pders[i];\n    Aders[i] = new Vector3(point.x, point.y, point.z);\n    wders[i] = point.w;\n  }\n  const CK = [];\n  for (let k = 0; k < nd; ++k) {\n    const v = Aders[k].clone();\n    for (let i = 1; i <= k; ++i) {\n      v.sub(CK[k - i].clone().multiplyScalar(calcKoverI(k, i) * wders[i]));\n    }\n    CK[k] = v.divideScalar(wders[0]);\n  }\n  return CK;\n}\nfunction calcNURBSDerivatives(p, U, P, u, nd) {\n  const Pders = calcBSplineDerivatives(p, U, P, u, nd);\n  return calcRationalCurveDerivatives(Pders);\n}\nfunction calcSurfacePoint(p, q, U, V, P, u, v, target) {\n  const uspan = findSpan(p, u, U);\n  const vspan = findSpan(q, v, V);\n  const Nu = calcBasisFunctions(uspan, u, p, U);\n  const Nv = calcBasisFunctions(vspan, v, q, V);\n  const temp = [];\n  for (let l = 0; l <= q; ++l) {\n    temp[l] = new Vector4(0, 0, 0, 0);\n    for (let k = 0; k <= p; ++k) {\n      const point = P[uspan - p + k][vspan - q + l].clone();\n      const w = point.w;\n      point.x *= w;\n      point.y *= w;\n      point.z *= w;\n      temp[l].add(point.multiplyScalar(Nu[k]));\n    }\n  }\n  const Sw = new Vector4(0, 0, 0, 0);\n  for (let l = 0; l <= q; ++l) {\n    Sw.add(temp[l].multiplyScalar(Nv[l]));\n  }\n  Sw.divideScalar(Sw.w);\n  target.set(Sw.x, Sw.y, Sw.z);\n}\nexport {\n  calcBSplineDerivatives,\n  calcBSplinePoint,\n  calcBasisFunctionDerivatives,\n  calcBasisFunctions,\n  calcKoverI,\n  calcNURBSDerivatives,\n  calcRationalCurveDerivatives,\n  calcSurfacePoint,\n  findSpan\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}