{"ast":null,"code":"var __defProp = Object.defineProperty;\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value\n}) : obj[key] = value;\nvar __publicField = (obj, key, value) => {\n  __defNormalProp(obj, typeof key !== \"symbol\" ? key + \"\" : key, value);\n  return value;\n};\nimport { DepthTexture, DepthStencilFormat, UnsignedInt248Type, WebGLRenderTarget, NearestFilter, ShaderMaterial, UniformsUtils, NoBlending, MeshNormalMaterial, DstColorFactor, ZeroFactor, AddEquation, DstAlphaFactor, Color, LuminanceFormat, CustomBlending, Vector3, MathUtils, DataTexture, RedFormat, FloatType, RepeatWrapping } from \"three\";\nimport { Pass, FullScreenQuad } from \"./Pass.js\";\nimport { SimplexNoise } from \"../math/SimplexNoise.js\";\nimport { SSAOShader, SSAOBlurShader, SSAODepthShader } from \"../shaders/SSAOShader.js\";\nimport { CopyShader } from \"../shaders/CopyShader.js\";\nconst _SSAOPass = class extends Pass {\n  constructor(scene, camera, width, height) {\n    super();\n    this.width = width !== void 0 ? width : 512;\n    this.height = height !== void 0 ? height : 512;\n    this.clear = true;\n    this.camera = camera;\n    this.scene = scene;\n    this.kernelRadius = 8;\n    this.kernelSize = 32;\n    this.kernel = [];\n    this.noiseTexture = null;\n    this.output = 0;\n    this.minDistance = 5e-3;\n    this.maxDistance = 0.1;\n    this._visibilityCache = /* @__PURE__ */new Map();\n    this.generateSampleKernel();\n    this.generateRandomKernelRotations();\n    const depthTexture = new DepthTexture();\n    depthTexture.format = DepthStencilFormat;\n    depthTexture.type = UnsignedInt248Type;\n    this.beautyRenderTarget = new WebGLRenderTarget(this.width, this.height);\n    this.normalRenderTarget = new WebGLRenderTarget(this.width, this.height, {\n      minFilter: NearestFilter,\n      magFilter: NearestFilter,\n      depthTexture\n    });\n    this.ssaoRenderTarget = new WebGLRenderTarget(this.width, this.height);\n    this.blurRenderTarget = this.ssaoRenderTarget.clone();\n    if (SSAOShader === void 0) {\n      console.error(\"THREE.SSAOPass: The pass relies on SSAOShader.\");\n    }\n    this.ssaoMaterial = new ShaderMaterial({\n      defines: Object.assign({}, SSAOShader.defines),\n      uniforms: UniformsUtils.clone(SSAOShader.uniforms),\n      vertexShader: SSAOShader.vertexShader,\n      fragmentShader: SSAOShader.fragmentShader,\n      blending: NoBlending\n    });\n    this.ssaoMaterial.uniforms[\"tDiffuse\"].value = this.beautyRenderTarget.texture;\n    this.ssaoMaterial.uniforms[\"tNormal\"].value = this.normalRenderTarget.texture;\n    this.ssaoMaterial.uniforms[\"tDepth\"].value = this.normalRenderTarget.depthTexture;\n    this.ssaoMaterial.uniforms[\"tNoise\"].value = this.noiseTexture;\n    this.ssaoMaterial.uniforms[\"kernel\"].value = this.kernel;\n    this.ssaoMaterial.uniforms[\"cameraNear\"].value = this.camera.near;\n    this.ssaoMaterial.uniforms[\"cameraFar\"].value = this.camera.far;\n    this.ssaoMaterial.uniforms[\"resolution\"].value.set(this.width, this.height);\n    this.ssaoMaterial.uniforms[\"cameraProjectionMatrix\"].value.copy(this.camera.projectionMatrix);\n    this.ssaoMaterial.uniforms[\"cameraInverseProjectionMatrix\"].value.copy(this.camera.projectionMatrixInverse);\n    this.normalMaterial = new MeshNormalMaterial();\n    this.normalMaterial.blending = NoBlending;\n    this.blurMaterial = new ShaderMaterial({\n      defines: Object.assign({}, SSAOBlurShader.defines),\n      uniforms: UniformsUtils.clone(SSAOBlurShader.uniforms),\n      vertexShader: SSAOBlurShader.vertexShader,\n      fragmentShader: SSAOBlurShader.fragmentShader\n    });\n    this.blurMaterial.uniforms[\"tDiffuse\"].value = this.ssaoRenderTarget.texture;\n    this.blurMaterial.uniforms[\"resolution\"].value.set(this.width, this.height);\n    this.depthRenderMaterial = new ShaderMaterial({\n      defines: Object.assign({}, SSAODepthShader.defines),\n      uniforms: UniformsUtils.clone(SSAODepthShader.uniforms),\n      vertexShader: SSAODepthShader.vertexShader,\n      fragmentShader: SSAODepthShader.fragmentShader,\n      blending: NoBlending\n    });\n    this.depthRenderMaterial.uniforms[\"tDepth\"].value = this.normalRenderTarget.depthTexture;\n    this.depthRenderMaterial.uniforms[\"cameraNear\"].value = this.camera.near;\n    this.depthRenderMaterial.uniforms[\"cameraFar\"].value = this.camera.far;\n    this.copyMaterial = new ShaderMaterial({\n      uniforms: UniformsUtils.clone(CopyShader.uniforms),\n      vertexShader: CopyShader.vertexShader,\n      fragmentShader: CopyShader.fragmentShader,\n      transparent: true,\n      depthTest: false,\n      depthWrite: false,\n      blendSrc: DstColorFactor,\n      blendDst: ZeroFactor,\n      blendEquation: AddEquation,\n      blendSrcAlpha: DstAlphaFactor,\n      blendDstAlpha: ZeroFactor,\n      blendEquationAlpha: AddEquation\n    });\n    this.fsQuad = new FullScreenQuad(null);\n    this.originalClearColor = new Color();\n  }\n  dispose() {\n    this.beautyRenderTarget.dispose();\n    this.normalRenderTarget.dispose();\n    this.ssaoRenderTarget.dispose();\n    this.blurRenderTarget.dispose();\n    this.normalMaterial.dispose();\n    this.blurMaterial.dispose();\n    this.copyMaterial.dispose();\n    this.depthRenderMaterial.dispose();\n    this.fsQuad.dispose();\n  }\n  render(renderer, writeBuffer) {\n    if (renderer.capabilities.isWebGL2 === false) this.noiseTexture.format = LuminanceFormat;\n    renderer.setRenderTarget(this.beautyRenderTarget);\n    renderer.clear();\n    renderer.render(this.scene, this.camera);\n    this.overrideVisibility();\n    this.renderOverride(renderer, this.normalMaterial, this.normalRenderTarget, 7829503, 1);\n    this.restoreVisibility();\n    this.ssaoMaterial.uniforms[\"kernelRadius\"].value = this.kernelRadius;\n    this.ssaoMaterial.uniforms[\"minDistance\"].value = this.minDistance;\n    this.ssaoMaterial.uniforms[\"maxDistance\"].value = this.maxDistance;\n    this.renderPass(renderer, this.ssaoMaterial, this.ssaoRenderTarget);\n    this.renderPass(renderer, this.blurMaterial, this.blurRenderTarget);\n    switch (this.output) {\n      case _SSAOPass.OUTPUT.SSAO:\n        this.copyMaterial.uniforms[\"tDiffuse\"].value = this.ssaoRenderTarget.texture;\n        this.copyMaterial.blending = NoBlending;\n        this.renderPass(renderer, this.copyMaterial, this.renderToScreen ? null : writeBuffer);\n        break;\n      case _SSAOPass.OUTPUT.Blur:\n        this.copyMaterial.uniforms[\"tDiffuse\"].value = this.blurRenderTarget.texture;\n        this.copyMaterial.blending = NoBlending;\n        this.renderPass(renderer, this.copyMaterial, this.renderToScreen ? null : writeBuffer);\n        break;\n      case _SSAOPass.OUTPUT.Beauty:\n        this.copyMaterial.uniforms[\"tDiffuse\"].value = this.beautyRenderTarget.texture;\n        this.copyMaterial.blending = NoBlending;\n        this.renderPass(renderer, this.copyMaterial, this.renderToScreen ? null : writeBuffer);\n        break;\n      case _SSAOPass.OUTPUT.Depth:\n        this.renderPass(renderer, this.depthRenderMaterial, this.renderToScreen ? null : writeBuffer);\n        break;\n      case _SSAOPass.OUTPUT.Normal:\n        this.copyMaterial.uniforms[\"tDiffuse\"].value = this.normalRenderTarget.texture;\n        this.copyMaterial.blending = NoBlending;\n        this.renderPass(renderer, this.copyMaterial, this.renderToScreen ? null : writeBuffer);\n        break;\n      case _SSAOPass.OUTPUT.Default:\n        this.copyMaterial.uniforms[\"tDiffuse\"].value = this.beautyRenderTarget.texture;\n        this.copyMaterial.blending = NoBlending;\n        this.renderPass(renderer, this.copyMaterial, this.renderToScreen ? null : writeBuffer);\n        this.copyMaterial.uniforms[\"tDiffuse\"].value = this.blurRenderTarget.texture;\n        this.copyMaterial.blending = CustomBlending;\n        this.renderPass(renderer, this.copyMaterial, this.renderToScreen ? null : writeBuffer);\n        break;\n      default:\n        console.warn(\"THREE.SSAOPass: Unknown output type.\");\n    }\n  }\n  renderPass(renderer, passMaterial, renderTarget, clearColor, clearAlpha) {\n    renderer.getClearColor(this.originalClearColor);\n    const originalClearAlpha = renderer.getClearAlpha();\n    const originalAutoClear = renderer.autoClear;\n    renderer.setRenderTarget(renderTarget);\n    renderer.autoClear = false;\n    if (clearColor !== void 0 && clearColor !== null) {\n      renderer.setClearColor(clearColor);\n      renderer.setClearAlpha(clearAlpha || 0);\n      renderer.clear();\n    }\n    this.fsQuad.material = passMaterial;\n    this.fsQuad.render(renderer);\n    renderer.autoClear = originalAutoClear;\n    renderer.setClearColor(this.originalClearColor);\n    renderer.setClearAlpha(originalClearAlpha);\n  }\n  renderOverride(renderer, overrideMaterial, renderTarget, clearColor, clearAlpha) {\n    renderer.getClearColor(this.originalClearColor);\n    const originalClearAlpha = renderer.getClearAlpha();\n    const originalAutoClear = renderer.autoClear;\n    renderer.setRenderTarget(renderTarget);\n    renderer.autoClear = false;\n    clearColor = overrideMaterial.clearColor || clearColor;\n    clearAlpha = overrideMaterial.clearAlpha || clearAlpha;\n    if (clearColor !== void 0 && clearColor !== null) {\n      renderer.setClearColor(clearColor);\n      renderer.setClearAlpha(clearAlpha || 0);\n      renderer.clear();\n    }\n    this.scene.overrideMaterial = overrideMaterial;\n    renderer.render(this.scene, this.camera);\n    this.scene.overrideMaterial = null;\n    renderer.autoClear = originalAutoClear;\n    renderer.setClearColor(this.originalClearColor);\n    renderer.setClearAlpha(originalClearAlpha);\n  }\n  setSize(width, height) {\n    this.width = width;\n    this.height = height;\n    this.beautyRenderTarget.setSize(width, height);\n    this.ssaoRenderTarget.setSize(width, height);\n    this.normalRenderTarget.setSize(width, height);\n    this.blurRenderTarget.setSize(width, height);\n    this.ssaoMaterial.uniforms[\"resolution\"].value.set(width, height);\n    this.ssaoMaterial.uniforms[\"cameraProjectionMatrix\"].value.copy(this.camera.projectionMatrix);\n    this.ssaoMaterial.uniforms[\"cameraInverseProjectionMatrix\"].value.copy(this.camera.projectionMatrixInverse);\n    this.blurMaterial.uniforms[\"resolution\"].value.set(width, height);\n  }\n  generateSampleKernel() {\n    const kernelSize = this.kernelSize;\n    const kernel = this.kernel;\n    for (let i = 0; i < kernelSize; i++) {\n      const sample = new Vector3();\n      sample.x = Math.random() * 2 - 1;\n      sample.y = Math.random() * 2 - 1;\n      sample.z = Math.random();\n      sample.normalize();\n      let scale = i / kernelSize;\n      scale = MathUtils.lerp(0.1, 1, scale * scale);\n      sample.multiplyScalar(scale);\n      kernel.push(sample);\n    }\n  }\n  generateRandomKernelRotations() {\n    const width = 4,\n      height = 4;\n    if (SimplexNoise === void 0) {\n      console.error(\"THREE.SSAOPass: The pass relies on SimplexNoise.\");\n    }\n    const simplex = new SimplexNoise();\n    const size = width * height;\n    const data = new Float32Array(size);\n    for (let i = 0; i < size; i++) {\n      const x = Math.random() * 2 - 1;\n      const y = Math.random() * 2 - 1;\n      const z = 0;\n      data[i] = simplex.noise3d(x, y, z);\n    }\n    this.noiseTexture = new DataTexture(data, width, height, RedFormat, FloatType);\n    this.noiseTexture.wrapS = RepeatWrapping;\n    this.noiseTexture.wrapT = RepeatWrapping;\n    this.noiseTexture.needsUpdate = true;\n  }\n  overrideVisibility() {\n    const scene = this.scene;\n    const cache = this._visibilityCache;\n    scene.traverse(function (object) {\n      cache.set(object, object.visible);\n      if (object.isPoints || object.isLine) object.visible = false;\n    });\n  }\n  restoreVisibility() {\n    const scene = this.scene;\n    const cache = this._visibilityCache;\n    scene.traverse(function (object) {\n      const visible = cache.get(object);\n      object.visible = visible;\n    });\n    cache.clear();\n  }\n};\nlet SSAOPass = _SSAOPass;\n__publicField(SSAOPass, \"OUTPUT\", {\n  Default: 0,\n  SSAO: 1,\n  Blur: 2,\n  Beauty: 3,\n  Depth: 4,\n  Normal: 5\n});\nexport { SSAOPass };","map":{"version":3,"names":["__defProp","Object","defineProperty","__defNormalProp","obj","key","value","enumerable","configurable","writable","__publicField","DepthTexture","DepthStencilFormat","UnsignedInt248Type","WebGLRenderTarget","NearestFilter","ShaderMaterial","UniformsUtils","NoBlending","MeshNormalMaterial","DstColorFactor","ZeroFactor","AddEquation","DstAlphaFactor","Color","LuminanceFormat","CustomBlending","Vector3","MathUtils","DataTexture","RedFormat","FloatType","RepeatWrapping","Pass","FullScreenQuad","SimplexNoise","SSAOShader","SSAOBlurShader","SSAODepthShader","CopyShader","_SSAOPass","constructor","scene","camera","width","height","clear","kernelRadius","kernelSize","kernel","noiseTexture","output","minDistance","maxDistance","_visibilityCache","Map","generateSampleKernel","generateRandomKernelRotations","depthTexture","format","type","beautyRenderTarget","normalRenderTarget","minFilter","magFilter","ssaoRenderTarget","blurRenderTarget","clone","console","error","ssaoMaterial","defines","assign","uniforms","vertexShader","fragmentShader","blending","texture","near","far","set","copy","projectionMatrix","projectionMatrixInverse","normalMaterial","blurMaterial","depthRenderMaterial","copyMaterial","transparent","depthTest","depthWrite","blendSrc","blendDst","blendEquation","blendSrcAlpha","blendDstAlpha","blendEquationAlpha","fsQuad","originalClearColor","dispose","render","renderer","writeBuffer","capabilities","isWebGL2","setRenderTarget","overrideVisibility","renderOverride","restoreVisibility","renderPass","OUTPUT","SSAO","renderToScreen","Blur","Beauty","Depth","Normal","Default","warn","passMaterial","renderTarget","clearColor","clearAlpha","getClearColor","originalClearAlpha","getClearAlpha","originalAutoClear","autoClear","setClearColor","setClearAlpha","material","overrideMaterial","setSize","i","sample","x","Math","random","y","z","normalize","scale","lerp","multiplyScalar","push","simplex","size","data","Float32Array","noise3d","wrapS","wrapT","needsUpdate","cache","traverse","object","visible","isPoints","isLine","get","SSAOPass"],"sources":["/home/krug/Coding/JavaScript/Websites/Personal/personal/node_modules/.pnpm/three-stdlib@2.23.7_three@0.151.3/node_modules/three-stdlib/postprocessing/SSAOPass.js"],"sourcesContent":["var __defProp = Object.defineProperty;\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;\nvar __publicField = (obj, key, value) => {\n  __defNormalProp(obj, typeof key !== \"symbol\" ? key + \"\" : key, value);\n  return value;\n};\nimport { DepthTexture, DepthStencilFormat, UnsignedInt248Type, WebGLRenderTarget, NearestFilter, ShaderMaterial, UniformsUtils, NoBlending, MeshNormalMaterial, DstColorFactor, ZeroFactor, AddEquation, DstAlphaFactor, Color, LuminanceFormat, CustomBlending, Vector3, MathUtils, DataTexture, RedFormat, FloatType, RepeatWrapping } from \"three\";\nimport { Pass, FullScreenQuad } from \"./Pass.js\";\nimport { SimplexNoise } from \"../math/SimplexNoise.js\";\nimport { SSAOShader, SSAOBlurShader, SSAODepthShader } from \"../shaders/SSAOShader.js\";\nimport { CopyShader } from \"../shaders/CopyShader.js\";\nconst _SSAOPass = class extends Pass {\n  constructor(scene, camera, width, height) {\n    super();\n    this.width = width !== void 0 ? width : 512;\n    this.height = height !== void 0 ? height : 512;\n    this.clear = true;\n    this.camera = camera;\n    this.scene = scene;\n    this.kernelRadius = 8;\n    this.kernelSize = 32;\n    this.kernel = [];\n    this.noiseTexture = null;\n    this.output = 0;\n    this.minDistance = 5e-3;\n    this.maxDistance = 0.1;\n    this._visibilityCache = /* @__PURE__ */ new Map();\n    this.generateSampleKernel();\n    this.generateRandomKernelRotations();\n    const depthTexture = new DepthTexture();\n    depthTexture.format = DepthStencilFormat;\n    depthTexture.type = UnsignedInt248Type;\n    this.beautyRenderTarget = new WebGLRenderTarget(this.width, this.height);\n    this.normalRenderTarget = new WebGLRenderTarget(this.width, this.height, {\n      minFilter: NearestFilter,\n      magFilter: NearestFilter,\n      depthTexture\n    });\n    this.ssaoRenderTarget = new WebGLRenderTarget(this.width, this.height);\n    this.blurRenderTarget = this.ssaoRenderTarget.clone();\n    if (SSAOShader === void 0) {\n      console.error(\"THREE.SSAOPass: The pass relies on SSAOShader.\");\n    }\n    this.ssaoMaterial = new ShaderMaterial({\n      defines: Object.assign({}, SSAOShader.defines),\n      uniforms: UniformsUtils.clone(SSAOShader.uniforms),\n      vertexShader: SSAOShader.vertexShader,\n      fragmentShader: SSAOShader.fragmentShader,\n      blending: NoBlending\n    });\n    this.ssaoMaterial.uniforms[\"tDiffuse\"].value = this.beautyRenderTarget.texture;\n    this.ssaoMaterial.uniforms[\"tNormal\"].value = this.normalRenderTarget.texture;\n    this.ssaoMaterial.uniforms[\"tDepth\"].value = this.normalRenderTarget.depthTexture;\n    this.ssaoMaterial.uniforms[\"tNoise\"].value = this.noiseTexture;\n    this.ssaoMaterial.uniforms[\"kernel\"].value = this.kernel;\n    this.ssaoMaterial.uniforms[\"cameraNear\"].value = this.camera.near;\n    this.ssaoMaterial.uniforms[\"cameraFar\"].value = this.camera.far;\n    this.ssaoMaterial.uniforms[\"resolution\"].value.set(this.width, this.height);\n    this.ssaoMaterial.uniforms[\"cameraProjectionMatrix\"].value.copy(this.camera.projectionMatrix);\n    this.ssaoMaterial.uniforms[\"cameraInverseProjectionMatrix\"].value.copy(this.camera.projectionMatrixInverse);\n    this.normalMaterial = new MeshNormalMaterial();\n    this.normalMaterial.blending = NoBlending;\n    this.blurMaterial = new ShaderMaterial({\n      defines: Object.assign({}, SSAOBlurShader.defines),\n      uniforms: UniformsUtils.clone(SSAOBlurShader.uniforms),\n      vertexShader: SSAOBlurShader.vertexShader,\n      fragmentShader: SSAOBlurShader.fragmentShader\n    });\n    this.blurMaterial.uniforms[\"tDiffuse\"].value = this.ssaoRenderTarget.texture;\n    this.blurMaterial.uniforms[\"resolution\"].value.set(this.width, this.height);\n    this.depthRenderMaterial = new ShaderMaterial({\n      defines: Object.assign({}, SSAODepthShader.defines),\n      uniforms: UniformsUtils.clone(SSAODepthShader.uniforms),\n      vertexShader: SSAODepthShader.vertexShader,\n      fragmentShader: SSAODepthShader.fragmentShader,\n      blending: NoBlending\n    });\n    this.depthRenderMaterial.uniforms[\"tDepth\"].value = this.normalRenderTarget.depthTexture;\n    this.depthRenderMaterial.uniforms[\"cameraNear\"].value = this.camera.near;\n    this.depthRenderMaterial.uniforms[\"cameraFar\"].value = this.camera.far;\n    this.copyMaterial = new ShaderMaterial({\n      uniforms: UniformsUtils.clone(CopyShader.uniforms),\n      vertexShader: CopyShader.vertexShader,\n      fragmentShader: CopyShader.fragmentShader,\n      transparent: true,\n      depthTest: false,\n      depthWrite: false,\n      blendSrc: DstColorFactor,\n      blendDst: ZeroFactor,\n      blendEquation: AddEquation,\n      blendSrcAlpha: DstAlphaFactor,\n      blendDstAlpha: ZeroFactor,\n      blendEquationAlpha: AddEquation\n    });\n    this.fsQuad = new FullScreenQuad(null);\n    this.originalClearColor = new Color();\n  }\n  dispose() {\n    this.beautyRenderTarget.dispose();\n    this.normalRenderTarget.dispose();\n    this.ssaoRenderTarget.dispose();\n    this.blurRenderTarget.dispose();\n    this.normalMaterial.dispose();\n    this.blurMaterial.dispose();\n    this.copyMaterial.dispose();\n    this.depthRenderMaterial.dispose();\n    this.fsQuad.dispose();\n  }\n  render(renderer, writeBuffer) {\n    if (renderer.capabilities.isWebGL2 === false)\n      this.noiseTexture.format = LuminanceFormat;\n    renderer.setRenderTarget(this.beautyRenderTarget);\n    renderer.clear();\n    renderer.render(this.scene, this.camera);\n    this.overrideVisibility();\n    this.renderOverride(renderer, this.normalMaterial, this.normalRenderTarget, 7829503, 1);\n    this.restoreVisibility();\n    this.ssaoMaterial.uniforms[\"kernelRadius\"].value = this.kernelRadius;\n    this.ssaoMaterial.uniforms[\"minDistance\"].value = this.minDistance;\n    this.ssaoMaterial.uniforms[\"maxDistance\"].value = this.maxDistance;\n    this.renderPass(renderer, this.ssaoMaterial, this.ssaoRenderTarget);\n    this.renderPass(renderer, this.blurMaterial, this.blurRenderTarget);\n    switch (this.output) {\n      case _SSAOPass.OUTPUT.SSAO:\n        this.copyMaterial.uniforms[\"tDiffuse\"].value = this.ssaoRenderTarget.texture;\n        this.copyMaterial.blending = NoBlending;\n        this.renderPass(renderer, this.copyMaterial, this.renderToScreen ? null : writeBuffer);\n        break;\n      case _SSAOPass.OUTPUT.Blur:\n        this.copyMaterial.uniforms[\"tDiffuse\"].value = this.blurRenderTarget.texture;\n        this.copyMaterial.blending = NoBlending;\n        this.renderPass(renderer, this.copyMaterial, this.renderToScreen ? null : writeBuffer);\n        break;\n      case _SSAOPass.OUTPUT.Beauty:\n        this.copyMaterial.uniforms[\"tDiffuse\"].value = this.beautyRenderTarget.texture;\n        this.copyMaterial.blending = NoBlending;\n        this.renderPass(renderer, this.copyMaterial, this.renderToScreen ? null : writeBuffer);\n        break;\n      case _SSAOPass.OUTPUT.Depth:\n        this.renderPass(renderer, this.depthRenderMaterial, this.renderToScreen ? null : writeBuffer);\n        break;\n      case _SSAOPass.OUTPUT.Normal:\n        this.copyMaterial.uniforms[\"tDiffuse\"].value = this.normalRenderTarget.texture;\n        this.copyMaterial.blending = NoBlending;\n        this.renderPass(renderer, this.copyMaterial, this.renderToScreen ? null : writeBuffer);\n        break;\n      case _SSAOPass.OUTPUT.Default:\n        this.copyMaterial.uniforms[\"tDiffuse\"].value = this.beautyRenderTarget.texture;\n        this.copyMaterial.blending = NoBlending;\n        this.renderPass(renderer, this.copyMaterial, this.renderToScreen ? null : writeBuffer);\n        this.copyMaterial.uniforms[\"tDiffuse\"].value = this.blurRenderTarget.texture;\n        this.copyMaterial.blending = CustomBlending;\n        this.renderPass(renderer, this.copyMaterial, this.renderToScreen ? null : writeBuffer);\n        break;\n      default:\n        console.warn(\"THREE.SSAOPass: Unknown output type.\");\n    }\n  }\n  renderPass(renderer, passMaterial, renderTarget, clearColor, clearAlpha) {\n    renderer.getClearColor(this.originalClearColor);\n    const originalClearAlpha = renderer.getClearAlpha();\n    const originalAutoClear = renderer.autoClear;\n    renderer.setRenderTarget(renderTarget);\n    renderer.autoClear = false;\n    if (clearColor !== void 0 && clearColor !== null) {\n      renderer.setClearColor(clearColor);\n      renderer.setClearAlpha(clearAlpha || 0);\n      renderer.clear();\n    }\n    this.fsQuad.material = passMaterial;\n    this.fsQuad.render(renderer);\n    renderer.autoClear = originalAutoClear;\n    renderer.setClearColor(this.originalClearColor);\n    renderer.setClearAlpha(originalClearAlpha);\n  }\n  renderOverride(renderer, overrideMaterial, renderTarget, clearColor, clearAlpha) {\n    renderer.getClearColor(this.originalClearColor);\n    const originalClearAlpha = renderer.getClearAlpha();\n    const originalAutoClear = renderer.autoClear;\n    renderer.setRenderTarget(renderTarget);\n    renderer.autoClear = false;\n    clearColor = overrideMaterial.clearColor || clearColor;\n    clearAlpha = overrideMaterial.clearAlpha || clearAlpha;\n    if (clearColor !== void 0 && clearColor !== null) {\n      renderer.setClearColor(clearColor);\n      renderer.setClearAlpha(clearAlpha || 0);\n      renderer.clear();\n    }\n    this.scene.overrideMaterial = overrideMaterial;\n    renderer.render(this.scene, this.camera);\n    this.scene.overrideMaterial = null;\n    renderer.autoClear = originalAutoClear;\n    renderer.setClearColor(this.originalClearColor);\n    renderer.setClearAlpha(originalClearAlpha);\n  }\n  setSize(width, height) {\n    this.width = width;\n    this.height = height;\n    this.beautyRenderTarget.setSize(width, height);\n    this.ssaoRenderTarget.setSize(width, height);\n    this.normalRenderTarget.setSize(width, height);\n    this.blurRenderTarget.setSize(width, height);\n    this.ssaoMaterial.uniforms[\"resolution\"].value.set(width, height);\n    this.ssaoMaterial.uniforms[\"cameraProjectionMatrix\"].value.copy(this.camera.projectionMatrix);\n    this.ssaoMaterial.uniforms[\"cameraInverseProjectionMatrix\"].value.copy(this.camera.projectionMatrixInverse);\n    this.blurMaterial.uniforms[\"resolution\"].value.set(width, height);\n  }\n  generateSampleKernel() {\n    const kernelSize = this.kernelSize;\n    const kernel = this.kernel;\n    for (let i = 0; i < kernelSize; i++) {\n      const sample = new Vector3();\n      sample.x = Math.random() * 2 - 1;\n      sample.y = Math.random() * 2 - 1;\n      sample.z = Math.random();\n      sample.normalize();\n      let scale = i / kernelSize;\n      scale = MathUtils.lerp(0.1, 1, scale * scale);\n      sample.multiplyScalar(scale);\n      kernel.push(sample);\n    }\n  }\n  generateRandomKernelRotations() {\n    const width = 4, height = 4;\n    if (SimplexNoise === void 0) {\n      console.error(\"THREE.SSAOPass: The pass relies on SimplexNoise.\");\n    }\n    const simplex = new SimplexNoise();\n    const size = width * height;\n    const data = new Float32Array(size);\n    for (let i = 0; i < size; i++) {\n      const x = Math.random() * 2 - 1;\n      const y = Math.random() * 2 - 1;\n      const z = 0;\n      data[i] = simplex.noise3d(x, y, z);\n    }\n    this.noiseTexture = new DataTexture(data, width, height, RedFormat, FloatType);\n    this.noiseTexture.wrapS = RepeatWrapping;\n    this.noiseTexture.wrapT = RepeatWrapping;\n    this.noiseTexture.needsUpdate = true;\n  }\n  overrideVisibility() {\n    const scene = this.scene;\n    const cache = this._visibilityCache;\n    scene.traverse(function(object) {\n      cache.set(object, object.visible);\n      if (object.isPoints || object.isLine)\n        object.visible = false;\n    });\n  }\n  restoreVisibility() {\n    const scene = this.scene;\n    const cache = this._visibilityCache;\n    scene.traverse(function(object) {\n      const visible = cache.get(object);\n      object.visible = visible;\n    });\n    cache.clear();\n  }\n};\nlet SSAOPass = _SSAOPass;\n__publicField(SSAOPass, \"OUTPUT\", {\n  Default: 0,\n  SSAO: 1,\n  Blur: 2,\n  Beauty: 3,\n  Depth: 4,\n  Normal: 5\n});\nexport {\n  SSAOPass\n};\n"],"mappings":"AAAA,IAAIA,SAAS,GAAGC,MAAM,CAACC,cAAc;AACrC,IAAIC,eAAe,GAAGA,CAACC,GAAG,EAAEC,GAAG,EAAEC,KAAK,KAAKD,GAAG,IAAID,GAAG,GAAGJ,SAAS,CAACI,GAAG,EAAEC,GAAG,EAAE;EAAEE,UAAU,EAAE,IAAI;EAAEC,YAAY,EAAE,IAAI;EAAEC,QAAQ,EAAE,IAAI;EAAEH;AAAM,CAAC,CAAC,GAAGF,GAAG,CAACC,GAAG,CAAC,GAAGC,KAAK;AAC/J,IAAII,aAAa,GAAGA,CAACN,GAAG,EAAEC,GAAG,EAAEC,KAAK,KAAK;EACvCH,eAAe,CAACC,GAAG,EAAE,OAAOC,GAAG,KAAK,QAAQ,GAAGA,GAAG,GAAG,EAAE,GAAGA,GAAG,EAAEC,KAAK,CAAC;EACrE,OAAOA,KAAK;AACd,CAAC;AACD,SAASK,YAAY,EAAEC,kBAAkB,EAAEC,kBAAkB,EAAEC,iBAAiB,EAAEC,aAAa,EAAEC,cAAc,EAAEC,aAAa,EAAEC,UAAU,EAAEC,kBAAkB,EAAEC,cAAc,EAAEC,UAAU,EAAEC,WAAW,EAAEC,cAAc,EAAEC,KAAK,EAAEC,eAAe,EAAEC,cAAc,EAAEC,OAAO,EAAEC,SAAS,EAAEC,WAAW,EAAEC,SAAS,EAAEC,SAAS,EAAEC,cAAc,QAAQ,OAAO;AACrV,SAASC,IAAI,EAAEC,cAAc,QAAQ,WAAW;AAChD,SAASC,YAAY,QAAQ,yBAAyB;AACtD,SAASC,UAAU,EAAEC,cAAc,EAAEC,eAAe,QAAQ,0BAA0B;AACtF,SAASC,UAAU,QAAQ,0BAA0B;AACrD,MAAMC,SAAS,GAAG,cAAcP,IAAI,CAAC;EACnCQ,WAAWA,CAACC,KAAK,EAAEC,MAAM,EAAEC,KAAK,EAAEC,MAAM,EAAE;IACxC,KAAK,CAAC,CAAC;IACP,IAAI,CAACD,KAAK,GAAGA,KAAK,KAAK,KAAK,CAAC,GAAGA,KAAK,GAAG,GAAG;IAC3C,IAAI,CAACC,MAAM,GAAGA,MAAM,KAAK,KAAK,CAAC,GAAGA,MAAM,GAAG,GAAG;IAC9C,IAAI,CAACC,KAAK,GAAG,IAAI;IACjB,IAAI,CAACH,MAAM,GAAGA,MAAM;IACpB,IAAI,CAACD,KAAK,GAAGA,KAAK;IAClB,IAAI,CAACK,YAAY,GAAG,CAAC;IACrB,IAAI,CAACC,UAAU,GAAG,EAAE;IACpB,IAAI,CAACC,MAAM,GAAG,EAAE;IAChB,IAAI,CAACC,YAAY,GAAG,IAAI;IACxB,IAAI,CAACC,MAAM,GAAG,CAAC;IACf,IAAI,CAACC,WAAW,GAAG,IAAI;IACvB,IAAI,CAACC,WAAW,GAAG,GAAG;IACtB,IAAI,CAACC,gBAAgB,GAAG,eAAgB,IAAIC,GAAG,CAAC,CAAC;IACjD,IAAI,CAACC,oBAAoB,CAAC,CAAC;IAC3B,IAAI,CAACC,6BAA6B,CAAC,CAAC;IACpC,MAAMC,YAAY,GAAG,IAAI/C,YAAY,CAAC,CAAC;IACvC+C,YAAY,CAACC,MAAM,GAAG/C,kBAAkB;IACxC8C,YAAY,CAACE,IAAI,GAAG/C,kBAAkB;IACtC,IAAI,CAACgD,kBAAkB,GAAG,IAAI/C,iBAAiB,CAAC,IAAI,CAAC8B,KAAK,EAAE,IAAI,CAACC,MAAM,CAAC;IACxE,IAAI,CAACiB,kBAAkB,GAAG,IAAIhD,iBAAiB,CAAC,IAAI,CAAC8B,KAAK,EAAE,IAAI,CAACC,MAAM,EAAE;MACvEkB,SAAS,EAAEhD,aAAa;MACxBiD,SAAS,EAAEjD,aAAa;MACxB2C;IACF,CAAC,CAAC;IACF,IAAI,CAACO,gBAAgB,GAAG,IAAInD,iBAAiB,CAAC,IAAI,CAAC8B,KAAK,EAAE,IAAI,CAACC,MAAM,CAAC;IACtE,IAAI,CAACqB,gBAAgB,GAAG,IAAI,CAACD,gBAAgB,CAACE,KAAK,CAAC,CAAC;IACrD,IAAI/B,UAAU,KAAK,KAAK,CAAC,EAAE;MACzBgC,OAAO,CAACC,KAAK,CAAC,gDAAgD,CAAC;IACjE;IACA,IAAI,CAACC,YAAY,GAAG,IAAItD,cAAc,CAAC;MACrCuD,OAAO,EAAEtE,MAAM,CAACuE,MAAM,CAAC,CAAC,CAAC,EAAEpC,UAAU,CAACmC,OAAO,CAAC;MAC9CE,QAAQ,EAAExD,aAAa,CAACkD,KAAK,CAAC/B,UAAU,CAACqC,QAAQ,CAAC;MAClDC,YAAY,EAAEtC,UAAU,CAACsC,YAAY;MACrCC,cAAc,EAAEvC,UAAU,CAACuC,cAAc;MACzCC,QAAQ,EAAE1D;IACZ,CAAC,CAAC;IACF,IAAI,CAACoD,YAAY,CAACG,QAAQ,CAAC,UAAU,CAAC,CAACnE,KAAK,GAAG,IAAI,CAACuD,kBAAkB,CAACgB,OAAO;IAC9E,IAAI,CAACP,YAAY,CAACG,QAAQ,CAAC,SAAS,CAAC,CAACnE,KAAK,GAAG,IAAI,CAACwD,kBAAkB,CAACe,OAAO;IAC7E,IAAI,CAACP,YAAY,CAACG,QAAQ,CAAC,QAAQ,CAAC,CAACnE,KAAK,GAAG,IAAI,CAACwD,kBAAkB,CAACJ,YAAY;IACjF,IAAI,CAACY,YAAY,CAACG,QAAQ,CAAC,QAAQ,CAAC,CAACnE,KAAK,GAAG,IAAI,CAAC4C,YAAY;IAC9D,IAAI,CAACoB,YAAY,CAACG,QAAQ,CAAC,QAAQ,CAAC,CAACnE,KAAK,GAAG,IAAI,CAAC2C,MAAM;IACxD,IAAI,CAACqB,YAAY,CAACG,QAAQ,CAAC,YAAY,CAAC,CAACnE,KAAK,GAAG,IAAI,CAACqC,MAAM,CAACmC,IAAI;IACjE,IAAI,CAACR,YAAY,CAACG,QAAQ,CAAC,WAAW,CAAC,CAACnE,KAAK,GAAG,IAAI,CAACqC,MAAM,CAACoC,GAAG;IAC/D,IAAI,CAACT,YAAY,CAACG,QAAQ,CAAC,YAAY,CAAC,CAACnE,KAAK,CAAC0E,GAAG,CAAC,IAAI,CAACpC,KAAK,EAAE,IAAI,CAACC,MAAM,CAAC;IAC3E,IAAI,CAACyB,YAAY,CAACG,QAAQ,CAAC,wBAAwB,CAAC,CAACnE,KAAK,CAAC2E,IAAI,CAAC,IAAI,CAACtC,MAAM,CAACuC,gBAAgB,CAAC;IAC7F,IAAI,CAACZ,YAAY,CAACG,QAAQ,CAAC,+BAA+B,CAAC,CAACnE,KAAK,CAAC2E,IAAI,CAAC,IAAI,CAACtC,MAAM,CAACwC,uBAAuB,CAAC;IAC3G,IAAI,CAACC,cAAc,GAAG,IAAIjE,kBAAkB,CAAC,CAAC;IAC9C,IAAI,CAACiE,cAAc,CAACR,QAAQ,GAAG1D,UAAU;IACzC,IAAI,CAACmE,YAAY,GAAG,IAAIrE,cAAc,CAAC;MACrCuD,OAAO,EAAEtE,MAAM,CAACuE,MAAM,CAAC,CAAC,CAAC,EAAEnC,cAAc,CAACkC,OAAO,CAAC;MAClDE,QAAQ,EAAExD,aAAa,CAACkD,KAAK,CAAC9B,cAAc,CAACoC,QAAQ,CAAC;MACtDC,YAAY,EAAErC,cAAc,CAACqC,YAAY;MACzCC,cAAc,EAAEtC,cAAc,CAACsC;IACjC,CAAC,CAAC;IACF,IAAI,CAACU,YAAY,CAACZ,QAAQ,CAAC,UAAU,CAAC,CAACnE,KAAK,GAAG,IAAI,CAAC2D,gBAAgB,CAACY,OAAO;IAC5E,IAAI,CAACQ,YAAY,CAACZ,QAAQ,CAAC,YAAY,CAAC,CAACnE,KAAK,CAAC0E,GAAG,CAAC,IAAI,CAACpC,KAAK,EAAE,IAAI,CAACC,MAAM,CAAC;IAC3E,IAAI,CAACyC,mBAAmB,GAAG,IAAItE,cAAc,CAAC;MAC5CuD,OAAO,EAAEtE,MAAM,CAACuE,MAAM,CAAC,CAAC,CAAC,EAAElC,eAAe,CAACiC,OAAO,CAAC;MACnDE,QAAQ,EAAExD,aAAa,CAACkD,KAAK,CAAC7B,eAAe,CAACmC,QAAQ,CAAC;MACvDC,YAAY,EAAEpC,eAAe,CAACoC,YAAY;MAC1CC,cAAc,EAAErC,eAAe,CAACqC,cAAc;MAC9CC,QAAQ,EAAE1D;IACZ,CAAC,CAAC;IACF,IAAI,CAACoE,mBAAmB,CAACb,QAAQ,CAAC,QAAQ,CAAC,CAACnE,KAAK,GAAG,IAAI,CAACwD,kBAAkB,CAACJ,YAAY;IACxF,IAAI,CAAC4B,mBAAmB,CAACb,QAAQ,CAAC,YAAY,CAAC,CAACnE,KAAK,GAAG,IAAI,CAACqC,MAAM,CAACmC,IAAI;IACxE,IAAI,CAACQ,mBAAmB,CAACb,QAAQ,CAAC,WAAW,CAAC,CAACnE,KAAK,GAAG,IAAI,CAACqC,MAAM,CAACoC,GAAG;IACtE,IAAI,CAACQ,YAAY,GAAG,IAAIvE,cAAc,CAAC;MACrCyD,QAAQ,EAAExD,aAAa,CAACkD,KAAK,CAAC5B,UAAU,CAACkC,QAAQ,CAAC;MAClDC,YAAY,EAAEnC,UAAU,CAACmC,YAAY;MACrCC,cAAc,EAAEpC,UAAU,CAACoC,cAAc;MACzCa,WAAW,EAAE,IAAI;MACjBC,SAAS,EAAE,KAAK;MAChBC,UAAU,EAAE,KAAK;MACjBC,QAAQ,EAAEvE,cAAc;MACxBwE,QAAQ,EAAEvE,UAAU;MACpBwE,aAAa,EAAEvE,WAAW;MAC1BwE,aAAa,EAAEvE,cAAc;MAC7BwE,aAAa,EAAE1E,UAAU;MACzB2E,kBAAkB,EAAE1E;IACtB,CAAC,CAAC;IACF,IAAI,CAAC2E,MAAM,GAAG,IAAI/D,cAAc,CAAC,IAAI,CAAC;IACtC,IAAI,CAACgE,kBAAkB,GAAG,IAAI1E,KAAK,CAAC,CAAC;EACvC;EACA2E,OAAOA,CAAA,EAAG;IACR,IAAI,CAACtC,kBAAkB,CAACsC,OAAO,CAAC,CAAC;IACjC,IAAI,CAACrC,kBAAkB,CAACqC,OAAO,CAAC,CAAC;IACjC,IAAI,CAAClC,gBAAgB,CAACkC,OAAO,CAAC,CAAC;IAC/B,IAAI,CAACjC,gBAAgB,CAACiC,OAAO,CAAC,CAAC;IAC/B,IAAI,CAACf,cAAc,CAACe,OAAO,CAAC,CAAC;IAC7B,IAAI,CAACd,YAAY,CAACc,OAAO,CAAC,CAAC;IAC3B,IAAI,CAACZ,YAAY,CAACY,OAAO,CAAC,CAAC;IAC3B,IAAI,CAACb,mBAAmB,CAACa,OAAO,CAAC,CAAC;IAClC,IAAI,CAACF,MAAM,CAACE,OAAO,CAAC,CAAC;EACvB;EACAC,MAAMA,CAACC,QAAQ,EAAEC,WAAW,EAAE;IAC5B,IAAID,QAAQ,CAACE,YAAY,CAACC,QAAQ,KAAK,KAAK,EAC1C,IAAI,CAACtD,YAAY,CAACS,MAAM,GAAGlC,eAAe;IAC5C4E,QAAQ,CAACI,eAAe,CAAC,IAAI,CAAC5C,kBAAkB,CAAC;IACjDwC,QAAQ,CAACvD,KAAK,CAAC,CAAC;IAChBuD,QAAQ,CAACD,MAAM,CAAC,IAAI,CAAC1D,KAAK,EAAE,IAAI,CAACC,MAAM,CAAC;IACxC,IAAI,CAAC+D,kBAAkB,CAAC,CAAC;IACzB,IAAI,CAACC,cAAc,CAACN,QAAQ,EAAE,IAAI,CAACjB,cAAc,EAAE,IAAI,CAACtB,kBAAkB,EAAE,OAAO,EAAE,CAAC,CAAC;IACvF,IAAI,CAAC8C,iBAAiB,CAAC,CAAC;IACxB,IAAI,CAACtC,YAAY,CAACG,QAAQ,CAAC,cAAc,CAAC,CAACnE,KAAK,GAAG,IAAI,CAACyC,YAAY;IACpE,IAAI,CAACuB,YAAY,CAACG,QAAQ,CAAC,aAAa,CAAC,CAACnE,KAAK,GAAG,IAAI,CAAC8C,WAAW;IAClE,IAAI,CAACkB,YAAY,CAACG,QAAQ,CAAC,aAAa,CAAC,CAACnE,KAAK,GAAG,IAAI,CAAC+C,WAAW;IAClE,IAAI,CAACwD,UAAU,CAACR,QAAQ,EAAE,IAAI,CAAC/B,YAAY,EAAE,IAAI,CAACL,gBAAgB,CAAC;IACnE,IAAI,CAAC4C,UAAU,CAACR,QAAQ,EAAE,IAAI,CAAChB,YAAY,EAAE,IAAI,CAACnB,gBAAgB,CAAC;IACnE,QAAQ,IAAI,CAACf,MAAM;MACjB,KAAKX,SAAS,CAACsE,MAAM,CAACC,IAAI;QACxB,IAAI,CAACxB,YAAY,CAACd,QAAQ,CAAC,UAAU,CAAC,CAACnE,KAAK,GAAG,IAAI,CAAC2D,gBAAgB,CAACY,OAAO;QAC5E,IAAI,CAACU,YAAY,CAACX,QAAQ,GAAG1D,UAAU;QACvC,IAAI,CAAC2F,UAAU,CAACR,QAAQ,EAAE,IAAI,CAACd,YAAY,EAAE,IAAI,CAACyB,cAAc,GAAG,IAAI,GAAGV,WAAW,CAAC;QACtF;MACF,KAAK9D,SAAS,CAACsE,MAAM,CAACG,IAAI;QACxB,IAAI,CAAC1B,YAAY,CAACd,QAAQ,CAAC,UAAU,CAAC,CAACnE,KAAK,GAAG,IAAI,CAAC4D,gBAAgB,CAACW,OAAO;QAC5E,IAAI,CAACU,YAAY,CAACX,QAAQ,GAAG1D,UAAU;QACvC,IAAI,CAAC2F,UAAU,CAACR,QAAQ,EAAE,IAAI,CAACd,YAAY,EAAE,IAAI,CAACyB,cAAc,GAAG,IAAI,GAAGV,WAAW,CAAC;QACtF;MACF,KAAK9D,SAAS,CAACsE,MAAM,CAACI,MAAM;QAC1B,IAAI,CAAC3B,YAAY,CAACd,QAAQ,CAAC,UAAU,CAAC,CAACnE,KAAK,GAAG,IAAI,CAACuD,kBAAkB,CAACgB,OAAO;QAC9E,IAAI,CAACU,YAAY,CAACX,QAAQ,GAAG1D,UAAU;QACvC,IAAI,CAAC2F,UAAU,CAACR,QAAQ,EAAE,IAAI,CAACd,YAAY,EAAE,IAAI,CAACyB,cAAc,GAAG,IAAI,GAAGV,WAAW,CAAC;QACtF;MACF,KAAK9D,SAAS,CAACsE,MAAM,CAACK,KAAK;QACzB,IAAI,CAACN,UAAU,CAACR,QAAQ,EAAE,IAAI,CAACf,mBAAmB,EAAE,IAAI,CAAC0B,cAAc,GAAG,IAAI,GAAGV,WAAW,CAAC;QAC7F;MACF,KAAK9D,SAAS,CAACsE,MAAM,CAACM,MAAM;QAC1B,IAAI,CAAC7B,YAAY,CAACd,QAAQ,CAAC,UAAU,CAAC,CAACnE,KAAK,GAAG,IAAI,CAACwD,kBAAkB,CAACe,OAAO;QAC9E,IAAI,CAACU,YAAY,CAACX,QAAQ,GAAG1D,UAAU;QACvC,IAAI,CAAC2F,UAAU,CAACR,QAAQ,EAAE,IAAI,CAACd,YAAY,EAAE,IAAI,CAACyB,cAAc,GAAG,IAAI,GAAGV,WAAW,CAAC;QACtF;MACF,KAAK9D,SAAS,CAACsE,MAAM,CAACO,OAAO;QAC3B,IAAI,CAAC9B,YAAY,CAACd,QAAQ,CAAC,UAAU,CAAC,CAACnE,KAAK,GAAG,IAAI,CAACuD,kBAAkB,CAACgB,OAAO;QAC9E,IAAI,CAACU,YAAY,CAACX,QAAQ,GAAG1D,UAAU;QACvC,IAAI,CAAC2F,UAAU,CAACR,QAAQ,EAAE,IAAI,CAACd,YAAY,EAAE,IAAI,CAACyB,cAAc,GAAG,IAAI,GAAGV,WAAW,CAAC;QACtF,IAAI,CAACf,YAAY,CAACd,QAAQ,CAAC,UAAU,CAAC,CAACnE,KAAK,GAAG,IAAI,CAAC4D,gBAAgB,CAACW,OAAO;QAC5E,IAAI,CAACU,YAAY,CAACX,QAAQ,GAAGlD,cAAc;QAC3C,IAAI,CAACmF,UAAU,CAACR,QAAQ,EAAE,IAAI,CAACd,YAAY,EAAE,IAAI,CAACyB,cAAc,GAAG,IAAI,GAAGV,WAAW,CAAC;QACtF;MACF;QACElC,OAAO,CAACkD,IAAI,CAAC,sCAAsC,CAAC;IACxD;EACF;EACAT,UAAUA,CAACR,QAAQ,EAAEkB,YAAY,EAAEC,YAAY,EAAEC,UAAU,EAAEC,UAAU,EAAE;IACvErB,QAAQ,CAACsB,aAAa,CAAC,IAAI,CAACzB,kBAAkB,CAAC;IAC/C,MAAM0B,kBAAkB,GAAGvB,QAAQ,CAACwB,aAAa,CAAC,CAAC;IACnD,MAAMC,iBAAiB,GAAGzB,QAAQ,CAAC0B,SAAS;IAC5C1B,QAAQ,CAACI,eAAe,CAACe,YAAY,CAAC;IACtCnB,QAAQ,CAAC0B,SAAS,GAAG,KAAK;IAC1B,IAAIN,UAAU,KAAK,KAAK,CAAC,IAAIA,UAAU,KAAK,IAAI,EAAE;MAChDpB,QAAQ,CAAC2B,aAAa,CAACP,UAAU,CAAC;MAClCpB,QAAQ,CAAC4B,aAAa,CAACP,UAAU,IAAI,CAAC,CAAC;MACvCrB,QAAQ,CAACvD,KAAK,CAAC,CAAC;IAClB;IACA,IAAI,CAACmD,MAAM,CAACiC,QAAQ,GAAGX,YAAY;IACnC,IAAI,CAACtB,MAAM,CAACG,MAAM,CAACC,QAAQ,CAAC;IAC5BA,QAAQ,CAAC0B,SAAS,GAAGD,iBAAiB;IACtCzB,QAAQ,CAAC2B,aAAa,CAAC,IAAI,CAAC9B,kBAAkB,CAAC;IAC/CG,QAAQ,CAAC4B,aAAa,CAACL,kBAAkB,CAAC;EAC5C;EACAjB,cAAcA,CAACN,QAAQ,EAAE8B,gBAAgB,EAAEX,YAAY,EAAEC,UAAU,EAAEC,UAAU,EAAE;IAC/ErB,QAAQ,CAACsB,aAAa,CAAC,IAAI,CAACzB,kBAAkB,CAAC;IAC/C,MAAM0B,kBAAkB,GAAGvB,QAAQ,CAACwB,aAAa,CAAC,CAAC;IACnD,MAAMC,iBAAiB,GAAGzB,QAAQ,CAAC0B,SAAS;IAC5C1B,QAAQ,CAACI,eAAe,CAACe,YAAY,CAAC;IACtCnB,QAAQ,CAAC0B,SAAS,GAAG,KAAK;IAC1BN,UAAU,GAAGU,gBAAgB,CAACV,UAAU,IAAIA,UAAU;IACtDC,UAAU,GAAGS,gBAAgB,CAACT,UAAU,IAAIA,UAAU;IACtD,IAAID,UAAU,KAAK,KAAK,CAAC,IAAIA,UAAU,KAAK,IAAI,EAAE;MAChDpB,QAAQ,CAAC2B,aAAa,CAACP,UAAU,CAAC;MAClCpB,QAAQ,CAAC4B,aAAa,CAACP,UAAU,IAAI,CAAC,CAAC;MACvCrB,QAAQ,CAACvD,KAAK,CAAC,CAAC;IAClB;IACA,IAAI,CAACJ,KAAK,CAACyF,gBAAgB,GAAGA,gBAAgB;IAC9C9B,QAAQ,CAACD,MAAM,CAAC,IAAI,CAAC1D,KAAK,EAAE,IAAI,CAACC,MAAM,CAAC;IACxC,IAAI,CAACD,KAAK,CAACyF,gBAAgB,GAAG,IAAI;IAClC9B,QAAQ,CAAC0B,SAAS,GAAGD,iBAAiB;IACtCzB,QAAQ,CAAC2B,aAAa,CAAC,IAAI,CAAC9B,kBAAkB,CAAC;IAC/CG,QAAQ,CAAC4B,aAAa,CAACL,kBAAkB,CAAC;EAC5C;EACAQ,OAAOA,CAACxF,KAAK,EAAEC,MAAM,EAAE;IACrB,IAAI,CAACD,KAAK,GAAGA,KAAK;IAClB,IAAI,CAACC,MAAM,GAAGA,MAAM;IACpB,IAAI,CAACgB,kBAAkB,CAACuE,OAAO,CAACxF,KAAK,EAAEC,MAAM,CAAC;IAC9C,IAAI,CAACoB,gBAAgB,CAACmE,OAAO,CAACxF,KAAK,EAAEC,MAAM,CAAC;IAC5C,IAAI,CAACiB,kBAAkB,CAACsE,OAAO,CAACxF,KAAK,EAAEC,MAAM,CAAC;IAC9C,IAAI,CAACqB,gBAAgB,CAACkE,OAAO,CAACxF,KAAK,EAAEC,MAAM,CAAC;IAC5C,IAAI,CAACyB,YAAY,CAACG,QAAQ,CAAC,YAAY,CAAC,CAACnE,KAAK,CAAC0E,GAAG,CAACpC,KAAK,EAAEC,MAAM,CAAC;IACjE,IAAI,CAACyB,YAAY,CAACG,QAAQ,CAAC,wBAAwB,CAAC,CAACnE,KAAK,CAAC2E,IAAI,CAAC,IAAI,CAACtC,MAAM,CAACuC,gBAAgB,CAAC;IAC7F,IAAI,CAACZ,YAAY,CAACG,QAAQ,CAAC,+BAA+B,CAAC,CAACnE,KAAK,CAAC2E,IAAI,CAAC,IAAI,CAACtC,MAAM,CAACwC,uBAAuB,CAAC;IAC3G,IAAI,CAACE,YAAY,CAACZ,QAAQ,CAAC,YAAY,CAAC,CAACnE,KAAK,CAAC0E,GAAG,CAACpC,KAAK,EAAEC,MAAM,CAAC;EACnE;EACAW,oBAAoBA,CAAA,EAAG;IACrB,MAAMR,UAAU,GAAG,IAAI,CAACA,UAAU;IAClC,MAAMC,MAAM,GAAG,IAAI,CAACA,MAAM;IAC1B,KAAK,IAAIoF,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGrF,UAAU,EAAEqF,CAAC,EAAE,EAAE;MACnC,MAAMC,MAAM,GAAG,IAAI3G,OAAO,CAAC,CAAC;MAC5B2G,MAAM,CAACC,CAAC,GAAGC,IAAI,CAACC,MAAM,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC;MAChCH,MAAM,CAACI,CAAC,GAAGF,IAAI,CAACC,MAAM,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC;MAChCH,MAAM,CAACK,CAAC,GAAGH,IAAI,CAACC,MAAM,CAAC,CAAC;MACxBH,MAAM,CAACM,SAAS,CAAC,CAAC;MAClB,IAAIC,KAAK,GAAGR,CAAC,GAAGrF,UAAU;MAC1B6F,KAAK,GAAGjH,SAAS,CAACkH,IAAI,CAAC,GAAG,EAAE,CAAC,EAAED,KAAK,GAAGA,KAAK,CAAC;MAC7CP,MAAM,CAACS,cAAc,CAACF,KAAK,CAAC;MAC5B5F,MAAM,CAAC+F,IAAI,CAACV,MAAM,CAAC;IACrB;EACF;EACA7E,6BAA6BA,CAAA,EAAG;IAC9B,MAAMb,KAAK,GAAG,CAAC;MAAEC,MAAM,GAAG,CAAC;IAC3B,IAAIV,YAAY,KAAK,KAAK,CAAC,EAAE;MAC3BiC,OAAO,CAACC,KAAK,CAAC,kDAAkD,CAAC;IACnE;IACA,MAAM4E,OAAO,GAAG,IAAI9G,YAAY,CAAC,CAAC;IAClC,MAAM+G,IAAI,GAAGtG,KAAK,GAAGC,MAAM;IAC3B,MAAMsG,IAAI,GAAG,IAAIC,YAAY,CAACF,IAAI,CAAC;IACnC,KAAK,IAAIb,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGa,IAAI,EAAEb,CAAC,EAAE,EAAE;MAC7B,MAAME,CAAC,GAAGC,IAAI,CAACC,MAAM,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC;MAC/B,MAAMC,CAAC,GAAGF,IAAI,CAACC,MAAM,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC;MAC/B,MAAME,CAAC,GAAG,CAAC;MACXQ,IAAI,CAACd,CAAC,CAAC,GAAGY,OAAO,CAACI,OAAO,CAACd,CAAC,EAAEG,CAAC,EAAEC,CAAC,CAAC;IACpC;IACA,IAAI,CAACzF,YAAY,GAAG,IAAIrB,WAAW,CAACsH,IAAI,EAAEvG,KAAK,EAAEC,MAAM,EAAEf,SAAS,EAAEC,SAAS,CAAC;IAC9E,IAAI,CAACmB,YAAY,CAACoG,KAAK,GAAGtH,cAAc;IACxC,IAAI,CAACkB,YAAY,CAACqG,KAAK,GAAGvH,cAAc;IACxC,IAAI,CAACkB,YAAY,CAACsG,WAAW,GAAG,IAAI;EACtC;EACA9C,kBAAkBA,CAAA,EAAG;IACnB,MAAMhE,KAAK,GAAG,IAAI,CAACA,KAAK;IACxB,MAAM+G,KAAK,GAAG,IAAI,CAACnG,gBAAgB;IACnCZ,KAAK,CAACgH,QAAQ,CAAC,UAASC,MAAM,EAAE;MAC9BF,KAAK,CAACzE,GAAG,CAAC2E,MAAM,EAAEA,MAAM,CAACC,OAAO,CAAC;MACjC,IAAID,MAAM,CAACE,QAAQ,IAAIF,MAAM,CAACG,MAAM,EAClCH,MAAM,CAACC,OAAO,GAAG,KAAK;IAC1B,CAAC,CAAC;EACJ;EACAhD,iBAAiBA,CAAA,EAAG;IAClB,MAAMlE,KAAK,GAAG,IAAI,CAACA,KAAK;IACxB,MAAM+G,KAAK,GAAG,IAAI,CAACnG,gBAAgB;IACnCZ,KAAK,CAACgH,QAAQ,CAAC,UAASC,MAAM,EAAE;MAC9B,MAAMC,OAAO,GAAGH,KAAK,CAACM,GAAG,CAACJ,MAAM,CAAC;MACjCA,MAAM,CAACC,OAAO,GAAGA,OAAO;IAC1B,CAAC,CAAC;IACFH,KAAK,CAAC3G,KAAK,CAAC,CAAC;EACf;AACF,CAAC;AACD,IAAIkH,QAAQ,GAAGxH,SAAS;AACxB9B,aAAa,CAACsJ,QAAQ,EAAE,QAAQ,EAAE;EAChC3C,OAAO,EAAE,CAAC;EACVN,IAAI,EAAE,CAAC;EACPE,IAAI,EAAE,CAAC;EACPC,MAAM,EAAE,CAAC;EACTC,KAAK,EAAE,CAAC;EACRC,MAAM,EAAE;AACV,CAAC,CAAC;AACF,SACE4C,QAAQ"},"metadata":{},"sourceType":"module","externalDependencies":[]}