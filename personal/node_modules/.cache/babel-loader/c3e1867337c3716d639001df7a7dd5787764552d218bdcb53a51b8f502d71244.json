{"ast":null,"code":"import _construct from \"/home/krug/Coding/JavaScript/Websites/Personal/personal/node_modules/.pnpm/@babel+runtime@7.22.3/node_modules/@babel/runtime/helpers/esm/construct.js\";\nimport _toConsumableArray from \"/home/krug/Coding/JavaScript/Websites/Personal/personal/node_modules/.pnpm/@babel+runtime@7.22.3/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport _objectWithoutProperties from \"/home/krug/Coding/JavaScript/Websites/Personal/personal/node_modules/.pnpm/@babel+runtime@7.22.3/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js\";\nvar _excluded = [\"points\", \"closed\", \"curveType\", \"tension\", \"segments\", \"vertexColors\"];\nimport _extends from '@babel/runtime/helpers/esm/extends';\nimport * as React from 'react';\nimport { Vector3, CatmullRomCurve3, Color } from 'three';\nimport { Line } from './Line.js';\nvar CatmullRomLine = /*#__PURE__*/React.forwardRef(function CatmullRomLine(_ref, ref) {\n  var points = _ref.points,\n    _ref$closed = _ref.closed,\n    closed = _ref$closed === void 0 ? false : _ref$closed,\n    _ref$curveType = _ref.curveType,\n    curveType = _ref$curveType === void 0 ? 'centripetal' : _ref$curveType,\n    _ref$tension = _ref.tension,\n    tension = _ref$tension === void 0 ? 0.5 : _ref$tension,\n    _ref$segments = _ref.segments,\n    segments = _ref$segments === void 0 ? 20 : _ref$segments,\n    vertexColors = _ref.vertexColors,\n    rest = _objectWithoutProperties(_ref, _excluded);\n  var curve = React.useMemo(function () {\n    var mappedPoints = points.map(function (pt) {\n      return pt instanceof Vector3 ? pt : _construct(Vector3, _toConsumableArray(pt));\n    });\n    return new CatmullRomCurve3(mappedPoints, closed, curveType, tension);\n  }, [points, closed, curveType, tension]);\n  var segmentedPoints = React.useMemo(function () {\n    return curve.getPoints(segments);\n  }, [curve, segments]);\n  var interpolatedVertexColors = React.useMemo(function () {\n    if (!vertexColors || vertexColors.length < 2) return undefined;\n    if (vertexColors.length === segments + 1) return vertexColors;\n    var mappedColors = vertexColors.map(function (color) {\n      return color instanceof Color ? color : _construct(Color, _toConsumableArray(color));\n    });\n    if (closed) mappedColors.push(mappedColors[0].clone());\n    var iColors = [mappedColors[0]];\n    var divisions = segments / (mappedColors.length - 1);\n    for (var i = 1; i < segments; i++) {\n      var alpha = i % divisions / divisions;\n      var colorIndex = Math.floor(i / divisions);\n      iColors.push(mappedColors[colorIndex].clone().lerp(mappedColors[colorIndex + 1], alpha));\n    }\n    iColors.push(mappedColors[mappedColors.length - 1]);\n    return iColors;\n  }, [vertexColors, segments]);\n  return /*#__PURE__*/React.createElement(Line, _extends({\n    ref: ref,\n    points: segmentedPoints,\n    vertexColors: interpolatedVertexColors\n  }, rest));\n});\nexport { CatmullRomLine };","map":{"version":3,"names":["_extends","React","Vector3","CatmullRomCurve3","Color","Line","CatmullRomLine","forwardRef","_ref","ref","points","_ref$closed","closed","_ref$curveType","curveType","_ref$tension","tension","_ref$segments","segments","vertexColors","rest","_objectWithoutProperties","_excluded","curve","useMemo","mappedPoints","map","pt","_construct","_toConsumableArray","segmentedPoints","getPoints","interpolatedVertexColors","length","undefined","mappedColors","color","push","clone","iColors","divisions","i","alpha","colorIndex","Math","floor","lerp","createElement"],"sources":["/home/krug/Coding/JavaScript/Websites/Personal/personal/node_modules/.pnpm/@react-three+drei@9.72.1_@react-three+fiber@8.13.0_@types+three@0.150.2_react-dom@18.2.0_react@18.2.0_three@0.151.3/node_modules/@react-three/drei/core/CatmullRomLine.js"],"sourcesContent":["import _extends from '@babel/runtime/helpers/esm/extends';\nimport * as React from 'react';\nimport { Vector3, CatmullRomCurve3, Color } from 'three';\nimport { Line } from './Line.js';\n\nconst CatmullRomLine = /*#__PURE__*/React.forwardRef(function CatmullRomLine({\n  points,\n  closed = false,\n  curveType = 'centripetal',\n  tension = 0.5,\n  segments = 20,\n  vertexColors,\n  ...rest\n}, ref) {\n  const curve = React.useMemo(() => {\n    const mappedPoints = points.map(pt => pt instanceof Vector3 ? pt : new Vector3(...pt));\n    return new CatmullRomCurve3(mappedPoints, closed, curveType, tension);\n  }, [points, closed, curveType, tension]);\n  const segmentedPoints = React.useMemo(() => curve.getPoints(segments), [curve, segments]);\n  const interpolatedVertexColors = React.useMemo(() => {\n    if (!vertexColors || vertexColors.length < 2) return undefined;\n    if (vertexColors.length === segments + 1) return vertexColors;\n    const mappedColors = vertexColors.map(color => color instanceof Color ? color : new Color(...color));\n    if (closed) mappedColors.push(mappedColors[0].clone());\n    const iColors = [mappedColors[0]];\n    const divisions = segments / (mappedColors.length - 1);\n\n    for (let i = 1; i < segments; i++) {\n      const alpha = i % divisions / divisions;\n      const colorIndex = Math.floor(i / divisions);\n      iColors.push(mappedColors[colorIndex].clone().lerp(mappedColors[colorIndex + 1], alpha));\n    }\n\n    iColors.push(mappedColors[mappedColors.length - 1]);\n    return iColors;\n  }, [vertexColors, segments]);\n  return /*#__PURE__*/React.createElement(Line, _extends({\n    ref: ref,\n    points: segmentedPoints,\n    vertexColors: interpolatedVertexColors\n  }, rest));\n});\n\nexport { CatmullRomLine };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}