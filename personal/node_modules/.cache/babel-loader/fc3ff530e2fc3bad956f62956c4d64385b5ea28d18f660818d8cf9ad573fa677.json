{"ast":null,"code":"import { BufferGeometry, Vector3, Quaternion, BufferAttribute, Raycaster, Color } from \"three\";\nclass RollerCoasterGeometry extends BufferGeometry {\n  constructor(curve, divisions) {\n    super();\n    const vertices = [];\n    const normals = [];\n    const colors = [];\n    const color1 = [1, 1, 1];\n    const color2 = [1, 1, 0];\n    const up = new Vector3(0, 1, 0);\n    const forward = new Vector3();\n    const right = new Vector3();\n    const quaternion = new Quaternion();\n    const prevQuaternion = new Quaternion();\n    prevQuaternion.setFromAxisAngle(up, Math.PI / 2);\n    const point = new Vector3();\n    const prevPoint = new Vector3();\n    prevPoint.copy(curve.getPointAt(0));\n    const step = [new Vector3(-0.225, 0, 0), new Vector3(0, -0.05, 0), new Vector3(0, -0.175, 0), new Vector3(0, -0.05, 0), new Vector3(0.225, 0, 0), new Vector3(0, -0.175, 0)];\n    const PI2 = Math.PI * 2;\n    let sides = 5;\n    const tube1 = [];\n    for (let i = 0; i < sides; i++) {\n      const angle = i / sides * PI2;\n      tube1.push(new Vector3(Math.sin(angle) * 0.06, Math.cos(angle) * 0.06, 0));\n    }\n    sides = 6;\n    const tube2 = [];\n    for (let i = 0; i < sides; i++) {\n      const angle = i / sides * PI2;\n      tube2.push(new Vector3(Math.sin(angle) * 0.025, Math.cos(angle) * 0.025, 0));\n    }\n    const vector = new Vector3();\n    const normal = new Vector3();\n    function drawShape(shape, color) {\n      normal.set(0, 0, -1).applyQuaternion(quaternion);\n      for (let j = 0; j < shape.length; j++) {\n        vector.copy(shape[j]);\n        vector.applyQuaternion(quaternion);\n        vector.add(point);\n        vertices.push(vector.x, vector.y, vector.z);\n        normals.push(normal.x, normal.y, normal.z);\n        colors.push(color[0], color[1], color[2]);\n      }\n      normal.set(0, 0, 1).applyQuaternion(quaternion);\n      for (let j = shape.length - 1; j >= 0; j--) {\n        vector.copy(shape[j]);\n        vector.applyQuaternion(quaternion);\n        vector.add(point);\n        vertices.push(vector.x, vector.y, vector.z);\n        normals.push(normal.x, normal.y, normal.z);\n        colors.push(color[0], color[1], color[2]);\n      }\n    }\n    const vector1 = new Vector3();\n    const vector2 = new Vector3();\n    const vector3 = new Vector3();\n    const vector4 = new Vector3();\n    const normal1 = new Vector3();\n    const normal2 = new Vector3();\n    const normal3 = new Vector3();\n    const normal4 = new Vector3();\n    function extrudeShape(shape, offset2, color) {\n      for (let j = 0, jl = shape.length; j < jl; j++) {\n        const point1 = shape[j];\n        const point2 = shape[(j + 1) % jl];\n        vector1.copy(point1).add(offset2);\n        vector1.applyQuaternion(quaternion);\n        vector1.add(point);\n        vector2.copy(point2).add(offset2);\n        vector2.applyQuaternion(quaternion);\n        vector2.add(point);\n        vector3.copy(point2).add(offset2);\n        vector3.applyQuaternion(prevQuaternion);\n        vector3.add(prevPoint);\n        vector4.copy(point1).add(offset2);\n        vector4.applyQuaternion(prevQuaternion);\n        vector4.add(prevPoint);\n        vertices.push(vector1.x, vector1.y, vector1.z);\n        vertices.push(vector2.x, vector2.y, vector2.z);\n        vertices.push(vector4.x, vector4.y, vector4.z);\n        vertices.push(vector2.x, vector2.y, vector2.z);\n        vertices.push(vector3.x, vector3.y, vector3.z);\n        vertices.push(vector4.x, vector4.y, vector4.z);\n        normal1.copy(point1);\n        normal1.applyQuaternion(quaternion);\n        normal1.normalize();\n        normal2.copy(point2);\n        normal2.applyQuaternion(quaternion);\n        normal2.normalize();\n        normal3.copy(point2);\n        normal3.applyQuaternion(prevQuaternion);\n        normal3.normalize();\n        normal4.copy(point1);\n        normal4.applyQuaternion(prevQuaternion);\n        normal4.normalize();\n        normals.push(normal1.x, normal1.y, normal1.z);\n        normals.push(normal2.x, normal2.y, normal2.z);\n        normals.push(normal4.x, normal4.y, normal4.z);\n        normals.push(normal2.x, normal2.y, normal2.z);\n        normals.push(normal3.x, normal3.y, normal3.z);\n        normals.push(normal4.x, normal4.y, normal4.z);\n        colors.push(color[0], color[1], color[2]);\n        colors.push(color[0], color[1], color[2]);\n        colors.push(color[0], color[1], color[2]);\n        colors.push(color[0], color[1], color[2]);\n        colors.push(color[0], color[1], color[2]);\n        colors.push(color[0], color[1], color[2]);\n      }\n    }\n    const offset = new Vector3();\n    for (let i = 1; i <= divisions; i++) {\n      point.copy(curve.getPointAt(i / divisions));\n      up.set(0, 1, 0);\n      forward.subVectors(point, prevPoint).normalize();\n      right.crossVectors(up, forward).normalize();\n      up.crossVectors(forward, right);\n      const angle = Math.atan2(forward.x, forward.z);\n      quaternion.setFromAxisAngle(up, angle);\n      if (i % 2 === 0) {\n        drawShape(step, color2);\n      }\n      extrudeShape(tube1, offset.set(0, -0.125, 0), color2);\n      extrudeShape(tube2, offset.set(0.2, 0, 0), color1);\n      extrudeShape(tube2, offset.set(-0.2, 0, 0), color1);\n      prevPoint.copy(point);\n      prevQuaternion.copy(quaternion);\n    }\n    this.setAttribute(\"position\", new BufferAttribute(new Float32Array(vertices), 3));\n    this.setAttribute(\"normal\", new BufferAttribute(new Float32Array(normals), 3));\n    this.setAttribute(\"color\", new BufferAttribute(new Float32Array(colors), 3));\n  }\n}\nclass RollerCoasterLiftersGeometry extends BufferGeometry {\n  constructor(curve, divisions) {\n    super();\n    const vertices = [];\n    const normals = [];\n    const quaternion = new Quaternion();\n    const up = new Vector3(0, 1, 0);\n    const point = new Vector3();\n    const tangent = new Vector3();\n    const tube1 = [new Vector3(0, 0.05, -0.05), new Vector3(0, 0.05, 0.05), new Vector3(0, -0.05, 0)];\n    const tube2 = [new Vector3(-0.05, 0, 0.05), new Vector3(-0.05, 0, -0.05), new Vector3(0.05, 0, 0)];\n    const tube3 = [new Vector3(0.05, 0, -0.05), new Vector3(0.05, 0, 0.05), new Vector3(-0.05, 0, 0)];\n    const vector1 = new Vector3();\n    const vector2 = new Vector3();\n    const vector3 = new Vector3();\n    const vector4 = new Vector3();\n    const normal1 = new Vector3();\n    const normal2 = new Vector3();\n    const normal3 = new Vector3();\n    const normal4 = new Vector3();\n    function extrudeShape(shape, fromPoint2, toPoint2) {\n      for (let j = 0, jl = shape.length; j < jl; j++) {\n        const point1 = shape[j];\n        const point2 = shape[(j + 1) % jl];\n        vector1.copy(point1);\n        vector1.applyQuaternion(quaternion);\n        vector1.add(fromPoint2);\n        vector2.copy(point2);\n        vector2.applyQuaternion(quaternion);\n        vector2.add(fromPoint2);\n        vector3.copy(point2);\n        vector3.applyQuaternion(quaternion);\n        vector3.add(toPoint2);\n        vector4.copy(point1);\n        vector4.applyQuaternion(quaternion);\n        vector4.add(toPoint2);\n        vertices.push(vector1.x, vector1.y, vector1.z);\n        vertices.push(vector2.x, vector2.y, vector2.z);\n        vertices.push(vector4.x, vector4.y, vector4.z);\n        vertices.push(vector2.x, vector2.y, vector2.z);\n        vertices.push(vector3.x, vector3.y, vector3.z);\n        vertices.push(vector4.x, vector4.y, vector4.z);\n        normal1.copy(point1);\n        normal1.applyQuaternion(quaternion);\n        normal1.normalize();\n        normal2.copy(point2);\n        normal2.applyQuaternion(quaternion);\n        normal2.normalize();\n        normal3.copy(point2);\n        normal3.applyQuaternion(quaternion);\n        normal3.normalize();\n        normal4.copy(point1);\n        normal4.applyQuaternion(quaternion);\n        normal4.normalize();\n        normals.push(normal1.x, normal1.y, normal1.z);\n        normals.push(normal2.x, normal2.y, normal2.z);\n        normals.push(normal4.x, normal4.y, normal4.z);\n        normals.push(normal2.x, normal2.y, normal2.z);\n        normals.push(normal3.x, normal3.y, normal3.z);\n        normals.push(normal4.x, normal4.y, normal4.z);\n      }\n    }\n    const fromPoint = new Vector3();\n    const toPoint = new Vector3();\n    for (let i = 1; i <= divisions; i++) {\n      point.copy(curve.getPointAt(i / divisions));\n      tangent.copy(curve.getTangentAt(i / divisions));\n      const angle = Math.atan2(tangent.x, tangent.z);\n      quaternion.setFromAxisAngle(up, angle);\n      if (point.y > 10) {\n        fromPoint.set(-0.75, -0.35, 0);\n        fromPoint.applyQuaternion(quaternion);\n        fromPoint.add(point);\n        toPoint.set(0.75, -0.35, 0);\n        toPoint.applyQuaternion(quaternion);\n        toPoint.add(point);\n        extrudeShape(tube1, fromPoint, toPoint);\n        fromPoint.set(-0.7, -0.3, 0);\n        fromPoint.applyQuaternion(quaternion);\n        fromPoint.add(point);\n        toPoint.set(-0.7, -point.y, 0);\n        toPoint.applyQuaternion(quaternion);\n        toPoint.add(point);\n        extrudeShape(tube2, fromPoint, toPoint);\n        fromPoint.set(0.7, -0.3, 0);\n        fromPoint.applyQuaternion(quaternion);\n        fromPoint.add(point);\n        toPoint.set(0.7, -point.y, 0);\n        toPoint.applyQuaternion(quaternion);\n        toPoint.add(point);\n        extrudeShape(tube3, fromPoint, toPoint);\n      } else {\n        fromPoint.set(0, -0.2, 0);\n        fromPoint.applyQuaternion(quaternion);\n        fromPoint.add(point);\n        toPoint.set(0, -point.y, 0);\n        toPoint.applyQuaternion(quaternion);\n        toPoint.add(point);\n        extrudeShape(tube3, fromPoint, toPoint);\n      }\n    }\n    this.setAttribute(\"position\", new BufferAttribute(new Float32Array(vertices), 3));\n    this.setAttribute(\"normal\", new BufferAttribute(new Float32Array(normals), 3));\n  }\n}\nclass RollerCoasterShadowGeometry extends BufferGeometry {\n  constructor(curve, divisions) {\n    super();\n    const vertices = [];\n    const up = new Vector3(0, 1, 0);\n    const forward = new Vector3();\n    const quaternion = new Quaternion();\n    const prevQuaternion = new Quaternion();\n    prevQuaternion.setFromAxisAngle(up, Math.PI / 2);\n    const point = new Vector3();\n    const prevPoint = new Vector3();\n    prevPoint.copy(curve.getPointAt(0));\n    prevPoint.y = 0;\n    const vector1 = new Vector3();\n    const vector2 = new Vector3();\n    const vector3 = new Vector3();\n    const vector4 = new Vector3();\n    for (let i = 1; i <= divisions; i++) {\n      point.copy(curve.getPointAt(i / divisions));\n      point.y = 0;\n      forward.subVectors(point, prevPoint);\n      const angle = Math.atan2(forward.x, forward.z);\n      quaternion.setFromAxisAngle(up, angle);\n      vector1.set(-0.3, 0, 0);\n      vector1.applyQuaternion(quaternion);\n      vector1.add(point);\n      vector2.set(0.3, 0, 0);\n      vector2.applyQuaternion(quaternion);\n      vector2.add(point);\n      vector3.set(0.3, 0, 0);\n      vector3.applyQuaternion(prevQuaternion);\n      vector3.add(prevPoint);\n      vector4.set(-0.3, 0, 0);\n      vector4.applyQuaternion(prevQuaternion);\n      vector4.add(prevPoint);\n      vertices.push(vector1.x, vector1.y, vector1.z);\n      vertices.push(vector2.x, vector2.y, vector2.z);\n      vertices.push(vector4.x, vector4.y, vector4.z);\n      vertices.push(vector2.x, vector2.y, vector2.z);\n      vertices.push(vector3.x, vector3.y, vector3.z);\n      vertices.push(vector4.x, vector4.y, vector4.z);\n      prevPoint.copy(point);\n      prevQuaternion.copy(quaternion);\n    }\n    this.setAttribute(\"position\", new BufferAttribute(new Float32Array(vertices), 3));\n  }\n}\nclass SkyGeometry extends BufferGeometry {\n  constructor() {\n    super();\n    const vertices = [];\n    for (let i = 0; i < 100; i++) {\n      const x = Math.random() * 800 - 400;\n      const y = Math.random() * 50 + 50;\n      const z = Math.random() * 800 - 400;\n      const size = Math.random() * 40 + 20;\n      vertices.push(x - size, y, z - size);\n      vertices.push(x + size, y, z - size);\n      vertices.push(x - size, y, z + size);\n      vertices.push(x + size, y, z - size);\n      vertices.push(x + size, y, z + size);\n      vertices.push(x - size, y, z + size);\n    }\n    this.setAttribute(\"position\", new BufferAttribute(new Float32Array(vertices), 3));\n  }\n}\nclass TreesGeometry extends BufferGeometry {\n  constructor(landscape) {\n    super();\n    const vertices = [];\n    const colors = [];\n    const raycaster = new Raycaster();\n    raycaster.ray.direction.set(0, -1, 0);\n    const _color = new Color();\n    for (let i = 0; i < 2e3; i++) {\n      const x = Math.random() * 500 - 250;\n      const z = Math.random() * 500 - 250;\n      raycaster.ray.origin.set(x, 50, z);\n      const intersections = raycaster.intersectObject(landscape);\n      if (intersections.length === 0) continue;\n      const y = intersections[0].point.y;\n      const height = Math.random() * 5 + 0.5;\n      let angle = Math.random() * Math.PI * 2;\n      vertices.push(x + Math.sin(angle), y, z + Math.cos(angle));\n      vertices.push(x, y + height, z);\n      vertices.push(x + Math.sin(angle + Math.PI), y, z + Math.cos(angle + Math.PI));\n      angle += Math.PI / 2;\n      vertices.push(x + Math.sin(angle), y, z + Math.cos(angle));\n      vertices.push(x, y + height, z);\n      vertices.push(x + Math.sin(angle + Math.PI), y, z + Math.cos(angle + Math.PI));\n      const random = Math.random() * 0.1;\n      for (let j = 0; j < 6; j++) {\n        _color.setRGB(0.2 + random, 0.4 + random, 0, \"srgb\");\n        colors.push(_color.r, _color.g, _color.b);\n      }\n    }\n    this.setAttribute(\"position\", new BufferAttribute(new Float32Array(vertices), 3));\n    this.setAttribute(\"color\", new BufferAttribute(new Float32Array(colors), 3));\n  }\n}\nexport { RollerCoasterGeometry, RollerCoasterLiftersGeometry, RollerCoasterShadowGeometry, SkyGeometry, TreesGeometry };","map":{"version":3,"names":["BufferGeometry","Vector3","Quaternion","BufferAttribute","Raycaster","Color","RollerCoasterGeometry","constructor","curve","divisions","vertices","normals","colors","color1","color2","up","forward","right","quaternion","prevQuaternion","setFromAxisAngle","Math","PI","point","prevPoint","copy","getPointAt","step","PI2","sides","tube1","i","angle","push","sin","cos","tube2","vector","normal","drawShape","shape","color","set","applyQuaternion","j","length","add","x","y","z","vector1","vector2","vector3","vector4","normal1","normal2","normal3","normal4","extrudeShape","offset2","jl","point1","point2","normalize","offset","subVectors","crossVectors","atan2","setAttribute","Float32Array","RollerCoasterLiftersGeometry","tangent","tube3","fromPoint2","toPoint2","fromPoint","toPoint","getTangentAt","RollerCoasterShadowGeometry","SkyGeometry","random","size","TreesGeometry","landscape","raycaster","ray","direction","_color","origin","intersections","intersectObject","height","setRGB","r","g","b"],"sources":["/home/krug/Coding/JavaScript/Websites/Personal/personal/node_modules/.pnpm/three-stdlib@2.23.7_three@0.151.3/node_modules/three-stdlib/misc/RollerCoaster.js"],"sourcesContent":["import { BufferGeometry, Vector3, Quaternion, BufferAttribute, Raycaster, Color } from \"three\";\nclass RollerCoasterGeometry extends BufferGeometry {\n  constructor(curve, divisions) {\n    super();\n    const vertices = [];\n    const normals = [];\n    const colors = [];\n    const color1 = [1, 1, 1];\n    const color2 = [1, 1, 0];\n    const up = new Vector3(0, 1, 0);\n    const forward = new Vector3();\n    const right = new Vector3();\n    const quaternion = new Quaternion();\n    const prevQuaternion = new Quaternion();\n    prevQuaternion.setFromAxisAngle(up, Math.PI / 2);\n    const point = new Vector3();\n    const prevPoint = new Vector3();\n    prevPoint.copy(curve.getPointAt(0));\n    const step = [\n      new Vector3(-0.225, 0, 0),\n      new Vector3(0, -0.05, 0),\n      new Vector3(0, -0.175, 0),\n      new Vector3(0, -0.05, 0),\n      new Vector3(0.225, 0, 0),\n      new Vector3(0, -0.175, 0)\n    ];\n    const PI2 = Math.PI * 2;\n    let sides = 5;\n    const tube1 = [];\n    for (let i = 0; i < sides; i++) {\n      const angle = i / sides * PI2;\n      tube1.push(new Vector3(Math.sin(angle) * 0.06, Math.cos(angle) * 0.06, 0));\n    }\n    sides = 6;\n    const tube2 = [];\n    for (let i = 0; i < sides; i++) {\n      const angle = i / sides * PI2;\n      tube2.push(new Vector3(Math.sin(angle) * 0.025, Math.cos(angle) * 0.025, 0));\n    }\n    const vector = new Vector3();\n    const normal = new Vector3();\n    function drawShape(shape, color) {\n      normal.set(0, 0, -1).applyQuaternion(quaternion);\n      for (let j = 0; j < shape.length; j++) {\n        vector.copy(shape[j]);\n        vector.applyQuaternion(quaternion);\n        vector.add(point);\n        vertices.push(vector.x, vector.y, vector.z);\n        normals.push(normal.x, normal.y, normal.z);\n        colors.push(color[0], color[1], color[2]);\n      }\n      normal.set(0, 0, 1).applyQuaternion(quaternion);\n      for (let j = shape.length - 1; j >= 0; j--) {\n        vector.copy(shape[j]);\n        vector.applyQuaternion(quaternion);\n        vector.add(point);\n        vertices.push(vector.x, vector.y, vector.z);\n        normals.push(normal.x, normal.y, normal.z);\n        colors.push(color[0], color[1], color[2]);\n      }\n    }\n    const vector1 = new Vector3();\n    const vector2 = new Vector3();\n    const vector3 = new Vector3();\n    const vector4 = new Vector3();\n    const normal1 = new Vector3();\n    const normal2 = new Vector3();\n    const normal3 = new Vector3();\n    const normal4 = new Vector3();\n    function extrudeShape(shape, offset2, color) {\n      for (let j = 0, jl = shape.length; j < jl; j++) {\n        const point1 = shape[j];\n        const point2 = shape[(j + 1) % jl];\n        vector1.copy(point1).add(offset2);\n        vector1.applyQuaternion(quaternion);\n        vector1.add(point);\n        vector2.copy(point2).add(offset2);\n        vector2.applyQuaternion(quaternion);\n        vector2.add(point);\n        vector3.copy(point2).add(offset2);\n        vector3.applyQuaternion(prevQuaternion);\n        vector3.add(prevPoint);\n        vector4.copy(point1).add(offset2);\n        vector4.applyQuaternion(prevQuaternion);\n        vector4.add(prevPoint);\n        vertices.push(vector1.x, vector1.y, vector1.z);\n        vertices.push(vector2.x, vector2.y, vector2.z);\n        vertices.push(vector4.x, vector4.y, vector4.z);\n        vertices.push(vector2.x, vector2.y, vector2.z);\n        vertices.push(vector3.x, vector3.y, vector3.z);\n        vertices.push(vector4.x, vector4.y, vector4.z);\n        normal1.copy(point1);\n        normal1.applyQuaternion(quaternion);\n        normal1.normalize();\n        normal2.copy(point2);\n        normal2.applyQuaternion(quaternion);\n        normal2.normalize();\n        normal3.copy(point2);\n        normal3.applyQuaternion(prevQuaternion);\n        normal3.normalize();\n        normal4.copy(point1);\n        normal4.applyQuaternion(prevQuaternion);\n        normal4.normalize();\n        normals.push(normal1.x, normal1.y, normal1.z);\n        normals.push(normal2.x, normal2.y, normal2.z);\n        normals.push(normal4.x, normal4.y, normal4.z);\n        normals.push(normal2.x, normal2.y, normal2.z);\n        normals.push(normal3.x, normal3.y, normal3.z);\n        normals.push(normal4.x, normal4.y, normal4.z);\n        colors.push(color[0], color[1], color[2]);\n        colors.push(color[0], color[1], color[2]);\n        colors.push(color[0], color[1], color[2]);\n        colors.push(color[0], color[1], color[2]);\n        colors.push(color[0], color[1], color[2]);\n        colors.push(color[0], color[1], color[2]);\n      }\n    }\n    const offset = new Vector3();\n    for (let i = 1; i <= divisions; i++) {\n      point.copy(curve.getPointAt(i / divisions));\n      up.set(0, 1, 0);\n      forward.subVectors(point, prevPoint).normalize();\n      right.crossVectors(up, forward).normalize();\n      up.crossVectors(forward, right);\n      const angle = Math.atan2(forward.x, forward.z);\n      quaternion.setFromAxisAngle(up, angle);\n      if (i % 2 === 0) {\n        drawShape(step, color2);\n      }\n      extrudeShape(tube1, offset.set(0, -0.125, 0), color2);\n      extrudeShape(tube2, offset.set(0.2, 0, 0), color1);\n      extrudeShape(tube2, offset.set(-0.2, 0, 0), color1);\n      prevPoint.copy(point);\n      prevQuaternion.copy(quaternion);\n    }\n    this.setAttribute(\"position\", new BufferAttribute(new Float32Array(vertices), 3));\n    this.setAttribute(\"normal\", new BufferAttribute(new Float32Array(normals), 3));\n    this.setAttribute(\"color\", new BufferAttribute(new Float32Array(colors), 3));\n  }\n}\nclass RollerCoasterLiftersGeometry extends BufferGeometry {\n  constructor(curve, divisions) {\n    super();\n    const vertices = [];\n    const normals = [];\n    const quaternion = new Quaternion();\n    const up = new Vector3(0, 1, 0);\n    const point = new Vector3();\n    const tangent = new Vector3();\n    const tube1 = [new Vector3(0, 0.05, -0.05), new Vector3(0, 0.05, 0.05), new Vector3(0, -0.05, 0)];\n    const tube2 = [new Vector3(-0.05, 0, 0.05), new Vector3(-0.05, 0, -0.05), new Vector3(0.05, 0, 0)];\n    const tube3 = [new Vector3(0.05, 0, -0.05), new Vector3(0.05, 0, 0.05), new Vector3(-0.05, 0, 0)];\n    const vector1 = new Vector3();\n    const vector2 = new Vector3();\n    const vector3 = new Vector3();\n    const vector4 = new Vector3();\n    const normal1 = new Vector3();\n    const normal2 = new Vector3();\n    const normal3 = new Vector3();\n    const normal4 = new Vector3();\n    function extrudeShape(shape, fromPoint2, toPoint2) {\n      for (let j = 0, jl = shape.length; j < jl; j++) {\n        const point1 = shape[j];\n        const point2 = shape[(j + 1) % jl];\n        vector1.copy(point1);\n        vector1.applyQuaternion(quaternion);\n        vector1.add(fromPoint2);\n        vector2.copy(point2);\n        vector2.applyQuaternion(quaternion);\n        vector2.add(fromPoint2);\n        vector3.copy(point2);\n        vector3.applyQuaternion(quaternion);\n        vector3.add(toPoint2);\n        vector4.copy(point1);\n        vector4.applyQuaternion(quaternion);\n        vector4.add(toPoint2);\n        vertices.push(vector1.x, vector1.y, vector1.z);\n        vertices.push(vector2.x, vector2.y, vector2.z);\n        vertices.push(vector4.x, vector4.y, vector4.z);\n        vertices.push(vector2.x, vector2.y, vector2.z);\n        vertices.push(vector3.x, vector3.y, vector3.z);\n        vertices.push(vector4.x, vector4.y, vector4.z);\n        normal1.copy(point1);\n        normal1.applyQuaternion(quaternion);\n        normal1.normalize();\n        normal2.copy(point2);\n        normal2.applyQuaternion(quaternion);\n        normal2.normalize();\n        normal3.copy(point2);\n        normal3.applyQuaternion(quaternion);\n        normal3.normalize();\n        normal4.copy(point1);\n        normal4.applyQuaternion(quaternion);\n        normal4.normalize();\n        normals.push(normal1.x, normal1.y, normal1.z);\n        normals.push(normal2.x, normal2.y, normal2.z);\n        normals.push(normal4.x, normal4.y, normal4.z);\n        normals.push(normal2.x, normal2.y, normal2.z);\n        normals.push(normal3.x, normal3.y, normal3.z);\n        normals.push(normal4.x, normal4.y, normal4.z);\n      }\n    }\n    const fromPoint = new Vector3();\n    const toPoint = new Vector3();\n    for (let i = 1; i <= divisions; i++) {\n      point.copy(curve.getPointAt(i / divisions));\n      tangent.copy(curve.getTangentAt(i / divisions));\n      const angle = Math.atan2(tangent.x, tangent.z);\n      quaternion.setFromAxisAngle(up, angle);\n      if (point.y > 10) {\n        fromPoint.set(-0.75, -0.35, 0);\n        fromPoint.applyQuaternion(quaternion);\n        fromPoint.add(point);\n        toPoint.set(0.75, -0.35, 0);\n        toPoint.applyQuaternion(quaternion);\n        toPoint.add(point);\n        extrudeShape(tube1, fromPoint, toPoint);\n        fromPoint.set(-0.7, -0.3, 0);\n        fromPoint.applyQuaternion(quaternion);\n        fromPoint.add(point);\n        toPoint.set(-0.7, -point.y, 0);\n        toPoint.applyQuaternion(quaternion);\n        toPoint.add(point);\n        extrudeShape(tube2, fromPoint, toPoint);\n        fromPoint.set(0.7, -0.3, 0);\n        fromPoint.applyQuaternion(quaternion);\n        fromPoint.add(point);\n        toPoint.set(0.7, -point.y, 0);\n        toPoint.applyQuaternion(quaternion);\n        toPoint.add(point);\n        extrudeShape(tube3, fromPoint, toPoint);\n      } else {\n        fromPoint.set(0, -0.2, 0);\n        fromPoint.applyQuaternion(quaternion);\n        fromPoint.add(point);\n        toPoint.set(0, -point.y, 0);\n        toPoint.applyQuaternion(quaternion);\n        toPoint.add(point);\n        extrudeShape(tube3, fromPoint, toPoint);\n      }\n    }\n    this.setAttribute(\"position\", new BufferAttribute(new Float32Array(vertices), 3));\n    this.setAttribute(\"normal\", new BufferAttribute(new Float32Array(normals), 3));\n  }\n}\nclass RollerCoasterShadowGeometry extends BufferGeometry {\n  constructor(curve, divisions) {\n    super();\n    const vertices = [];\n    const up = new Vector3(0, 1, 0);\n    const forward = new Vector3();\n    const quaternion = new Quaternion();\n    const prevQuaternion = new Quaternion();\n    prevQuaternion.setFromAxisAngle(up, Math.PI / 2);\n    const point = new Vector3();\n    const prevPoint = new Vector3();\n    prevPoint.copy(curve.getPointAt(0));\n    prevPoint.y = 0;\n    const vector1 = new Vector3();\n    const vector2 = new Vector3();\n    const vector3 = new Vector3();\n    const vector4 = new Vector3();\n    for (let i = 1; i <= divisions; i++) {\n      point.copy(curve.getPointAt(i / divisions));\n      point.y = 0;\n      forward.subVectors(point, prevPoint);\n      const angle = Math.atan2(forward.x, forward.z);\n      quaternion.setFromAxisAngle(up, angle);\n      vector1.set(-0.3, 0, 0);\n      vector1.applyQuaternion(quaternion);\n      vector1.add(point);\n      vector2.set(0.3, 0, 0);\n      vector2.applyQuaternion(quaternion);\n      vector2.add(point);\n      vector3.set(0.3, 0, 0);\n      vector3.applyQuaternion(prevQuaternion);\n      vector3.add(prevPoint);\n      vector4.set(-0.3, 0, 0);\n      vector4.applyQuaternion(prevQuaternion);\n      vector4.add(prevPoint);\n      vertices.push(vector1.x, vector1.y, vector1.z);\n      vertices.push(vector2.x, vector2.y, vector2.z);\n      vertices.push(vector4.x, vector4.y, vector4.z);\n      vertices.push(vector2.x, vector2.y, vector2.z);\n      vertices.push(vector3.x, vector3.y, vector3.z);\n      vertices.push(vector4.x, vector4.y, vector4.z);\n      prevPoint.copy(point);\n      prevQuaternion.copy(quaternion);\n    }\n    this.setAttribute(\"position\", new BufferAttribute(new Float32Array(vertices), 3));\n  }\n}\nclass SkyGeometry extends BufferGeometry {\n  constructor() {\n    super();\n    const vertices = [];\n    for (let i = 0; i < 100; i++) {\n      const x = Math.random() * 800 - 400;\n      const y = Math.random() * 50 + 50;\n      const z = Math.random() * 800 - 400;\n      const size = Math.random() * 40 + 20;\n      vertices.push(x - size, y, z - size);\n      vertices.push(x + size, y, z - size);\n      vertices.push(x - size, y, z + size);\n      vertices.push(x + size, y, z - size);\n      vertices.push(x + size, y, z + size);\n      vertices.push(x - size, y, z + size);\n    }\n    this.setAttribute(\"position\", new BufferAttribute(new Float32Array(vertices), 3));\n  }\n}\nclass TreesGeometry extends BufferGeometry {\n  constructor(landscape) {\n    super();\n    const vertices = [];\n    const colors = [];\n    const raycaster = new Raycaster();\n    raycaster.ray.direction.set(0, -1, 0);\n    const _color = new Color();\n    for (let i = 0; i < 2e3; i++) {\n      const x = Math.random() * 500 - 250;\n      const z = Math.random() * 500 - 250;\n      raycaster.ray.origin.set(x, 50, z);\n      const intersections = raycaster.intersectObject(landscape);\n      if (intersections.length === 0)\n        continue;\n      const y = intersections[0].point.y;\n      const height = Math.random() * 5 + 0.5;\n      let angle = Math.random() * Math.PI * 2;\n      vertices.push(x + Math.sin(angle), y, z + Math.cos(angle));\n      vertices.push(x, y + height, z);\n      vertices.push(x + Math.sin(angle + Math.PI), y, z + Math.cos(angle + Math.PI));\n      angle += Math.PI / 2;\n      vertices.push(x + Math.sin(angle), y, z + Math.cos(angle));\n      vertices.push(x, y + height, z);\n      vertices.push(x + Math.sin(angle + Math.PI), y, z + Math.cos(angle + Math.PI));\n      const random = Math.random() * 0.1;\n      for (let j = 0; j < 6; j++) {\n        _color.setRGB(0.2 + random, 0.4 + random, 0, \"srgb\");\n        colors.push(_color.r, _color.g, _color.b);\n      }\n    }\n    this.setAttribute(\"position\", new BufferAttribute(new Float32Array(vertices), 3));\n    this.setAttribute(\"color\", new BufferAttribute(new Float32Array(colors), 3));\n  }\n}\nexport {\n  RollerCoasterGeometry,\n  RollerCoasterLiftersGeometry,\n  RollerCoasterShadowGeometry,\n  SkyGeometry,\n  TreesGeometry\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}