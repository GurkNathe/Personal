{"ast":null,"code":"import _createClass from \"/home/krug/Coding/JavaScript/Websites/Personal/personal/node_modules/.pnpm/@babel+runtime@7.22.3/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _classCallCheck from \"/home/krug/Coding/JavaScript/Websites/Personal/personal/node_modules/.pnpm/@babel+runtime@7.22.3/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _assertThisInitialized from \"/home/krug/Coding/JavaScript/Websites/Personal/personal/node_modules/.pnpm/@babel+runtime@7.22.3/node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js\";\nimport _inherits from \"/home/krug/Coding/JavaScript/Websites/Personal/personal/node_modules/.pnpm/@babel+runtime@7.22.3/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/home/krug/Coding/JavaScript/Websites/Personal/personal/node_modules/.pnpm/@babel+runtime@7.22.3/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nvar __defProp = Object.defineProperty;\nvar __defNormalProp = function __defNormalProp(obj, key, value) {\n  return key in obj ? __defProp(obj, key, {\n    enumerable: true,\n    configurable: true,\n    writable: true,\n    value: value\n  }) : obj[key] = value;\n};\nvar __publicField = function __publicField(obj, key, value) {\n  __defNormalProp(obj, typeof key !== \"symbol\" ? key + \"\" : key, value);\n  return value;\n};\nimport { Mesh, Matrix4, Vector2, Color, Vector3, PerspectiveCamera, DepthTexture, UnsignedShortType, NearestFilter, HalfFloatType, WebGLRenderTarget, ShaderMaterial, UniformsUtils, Plane } from \"three\";\nvar _ReflectorForSSRPass = /*#__PURE__*/function (_Mesh) {\n  _inherits(_ReflectorForSSRPass, _Mesh);\n  var _super = _createSuper(_ReflectorForSSRPass);\n  function _ReflectorForSSRPass(geometry) {\n    var _this;\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    _classCallCheck(this, _ReflectorForSSRPass);\n    _this = _super.call(this, geometry);\n    _this.isReflectorForSSRPass = true;\n    _this.type = \"ReflectorForSSRPass\";\n    var scope = _assertThisInitialized(_this);\n    var color = options.color !== void 0 ? new Color(options.color) : new Color(8355711);\n    var textureWidth = options.textureWidth || 512;\n    var textureHeight = options.textureHeight || 512;\n    var clipBias = options.clipBias || 0;\n    var shader = options.shader || _ReflectorForSSRPass.ReflectorShader;\n    var useDepthTexture = options.useDepthTexture === true;\n    var yAxis = new Vector3(0, 1, 0);\n    var vecTemp0 = new Vector3();\n    var vecTemp1 = new Vector3();\n    scope.needsUpdate = false;\n    scope.maxDistance = _ReflectorForSSRPass.ReflectorShader.uniforms.maxDistance.value;\n    scope.opacity = _ReflectorForSSRPass.ReflectorShader.uniforms.opacity.value;\n    scope.color = color;\n    scope.resolution = options.resolution || new Vector2(window.innerWidth, window.innerHeight);\n    scope._distanceAttenuation = _ReflectorForSSRPass.ReflectorShader.defines.DISTANCE_ATTENUATION;\n    Object.defineProperty(scope, \"distanceAttenuation\", {\n      get: function get() {\n        return scope._distanceAttenuation;\n      },\n      set: function set(val) {\n        if (scope._distanceAttenuation === val) return;\n        scope._distanceAttenuation = val;\n        scope.material.defines.DISTANCE_ATTENUATION = val;\n        scope.material.needsUpdate = true;\n      }\n    });\n    scope._fresnel = _ReflectorForSSRPass.ReflectorShader.defines.FRESNEL;\n    Object.defineProperty(scope, \"fresnel\", {\n      get: function get() {\n        return scope._fresnel;\n      },\n      set: function set(val) {\n        if (scope._fresnel === val) return;\n        scope._fresnel = val;\n        scope.material.defines.FRESNEL = val;\n        scope.material.needsUpdate = true;\n      }\n    });\n    var normal = new Vector3();\n    var reflectorWorldPosition = new Vector3();\n    var cameraWorldPosition = new Vector3();\n    var rotationMatrix = new Matrix4();\n    var lookAtPosition = new Vector3(0, 0, -1);\n    var view = new Vector3();\n    var target = new Vector3();\n    var textureMatrix = new Matrix4();\n    var virtualCamera = new PerspectiveCamera();\n    var depthTexture;\n    if (useDepthTexture) {\n      depthTexture = new DepthTexture();\n      depthTexture.type = UnsignedShortType;\n      depthTexture.minFilter = NearestFilter;\n      depthTexture.magFilter = NearestFilter;\n    }\n    var parameters = {\n      depthTexture: useDepthTexture ? depthTexture : null,\n      type: HalfFloatType\n    };\n    var renderTarget = new WebGLRenderTarget(textureWidth, textureHeight, parameters);\n    var material = new ShaderMaterial({\n      transparent: useDepthTexture,\n      defines: Object.assign({}, _ReflectorForSSRPass.ReflectorShader.defines, {\n        useDepthTexture: useDepthTexture\n      }),\n      uniforms: UniformsUtils.clone(shader.uniforms),\n      fragmentShader: shader.fragmentShader,\n      vertexShader: shader.vertexShader\n    });\n    material.uniforms[\"tDiffuse\"].value = renderTarget.texture;\n    material.uniforms[\"color\"].value = scope.color;\n    material.uniforms[\"textureMatrix\"].value = textureMatrix;\n    if (useDepthTexture) {\n      material.uniforms[\"tDepth\"].value = renderTarget.depthTexture;\n    }\n    _this.material = material;\n    var globalPlane = new Plane(new Vector3(0, 1, 0), clipBias);\n    var globalPlanes = [globalPlane];\n    _this.doRender = function (renderer, scene, camera) {\n      material.uniforms[\"maxDistance\"].value = scope.maxDistance;\n      material.uniforms[\"color\"].value = scope.color;\n      material.uniforms[\"opacity\"].value = scope.opacity;\n      vecTemp0.copy(camera.position).normalize();\n      vecTemp1.copy(vecTemp0).reflect(yAxis);\n      material.uniforms[\"fresnelCoe\"].value = (vecTemp0.dot(vecTemp1) + 1) / 2;\n      reflectorWorldPosition.setFromMatrixPosition(scope.matrixWorld);\n      cameraWorldPosition.setFromMatrixPosition(camera.matrixWorld);\n      rotationMatrix.extractRotation(scope.matrixWorld);\n      normal.set(0, 0, 1);\n      normal.applyMatrix4(rotationMatrix);\n      view.subVectors(reflectorWorldPosition, cameraWorldPosition);\n      if (view.dot(normal) > 0) return;\n      view.reflect(normal).negate();\n      view.add(reflectorWorldPosition);\n      rotationMatrix.extractRotation(camera.matrixWorld);\n      lookAtPosition.set(0, 0, -1);\n      lookAtPosition.applyMatrix4(rotationMatrix);\n      lookAtPosition.add(cameraWorldPosition);\n      target.subVectors(reflectorWorldPosition, lookAtPosition);\n      target.reflect(normal).negate();\n      target.add(reflectorWorldPosition);\n      virtualCamera.position.copy(view);\n      virtualCamera.up.set(0, 1, 0);\n      virtualCamera.up.applyMatrix4(rotationMatrix);\n      virtualCamera.up.reflect(normal);\n      virtualCamera.lookAt(target);\n      virtualCamera.far = camera.far;\n      virtualCamera.updateMatrixWorld();\n      virtualCamera.projectionMatrix.copy(camera.projectionMatrix);\n      material.uniforms[\"virtualCameraNear\"].value = camera.near;\n      material.uniforms[\"virtualCameraFar\"].value = camera.far;\n      material.uniforms[\"virtualCameraMatrixWorld\"].value = virtualCamera.matrixWorld;\n      material.uniforms[\"virtualCameraProjectionMatrix\"].value = camera.projectionMatrix;\n      material.uniforms[\"virtualCameraProjectionMatrixInverse\"].value = camera.projectionMatrixInverse;\n      material.uniforms[\"resolution\"].value = scope.resolution;\n      textureMatrix.set(0.5, 0, 0, 0.5, 0, 0.5, 0, 0.5, 0, 0, 0.5, 0.5, 0, 0, 0, 1);\n      textureMatrix.multiply(virtualCamera.projectionMatrix);\n      textureMatrix.multiply(virtualCamera.matrixWorldInverse);\n      textureMatrix.multiply(scope.matrixWorld);\n      var currentRenderTarget = renderer.getRenderTarget();\n      var currentXrEnabled = renderer.xr.enabled;\n      var currentShadowAutoUpdate = renderer.shadowMap.autoUpdate;\n      var currentClippingPlanes = renderer.clippingPlanes;\n      renderer.xr.enabled = false;\n      renderer.shadowMap.autoUpdate = false;\n      renderer.clippingPlanes = globalPlanes;\n      renderer.setRenderTarget(renderTarget);\n      renderer.state.buffers.depth.setMask(true);\n      if (renderer.autoClear === false) renderer.clear();\n      renderer.render(scene, virtualCamera);\n      renderer.xr.enabled = currentXrEnabled;\n      renderer.shadowMap.autoUpdate = currentShadowAutoUpdate;\n      renderer.clippingPlanes = currentClippingPlanes;\n      renderer.setRenderTarget(currentRenderTarget);\n      var viewport = camera.viewport;\n      if (viewport !== void 0) {\n        renderer.state.viewport(viewport);\n      }\n    };\n    _this.getRenderTarget = function () {\n      return renderTarget;\n    };\n    return _this;\n  }\n  return _createClass(_ReflectorForSSRPass);\n}(Mesh);\nvar ReflectorForSSRPass = _ReflectorForSSRPass;\n__publicField(ReflectorForSSRPass, \"ReflectorShader\", {\n  defines: {\n    DISTANCE_ATTENUATION: true,\n    FRESNEL: true\n  },\n  uniforms: {\n    color: {\n      value: null\n    },\n    tDiffuse: {\n      value: null\n    },\n    tDepth: {\n      value: null\n    },\n    textureMatrix: {\n      value: /* @__PURE__ */new Matrix4()\n    },\n    maxDistance: {\n      value: 180\n    },\n    opacity: {\n      value: 0.5\n    },\n    fresnelCoe: {\n      value: null\n    },\n    virtualCameraNear: {\n      value: null\n    },\n    virtualCameraFar: {\n      value: null\n    },\n    virtualCameraProjectionMatrix: {\n      value: /* @__PURE__ */new Matrix4()\n    },\n    virtualCameraMatrixWorld: {\n      value: /* @__PURE__ */new Matrix4()\n    },\n    virtualCameraProjectionMatrixInverse: {\n      value: /* @__PURE__ */new Matrix4()\n    },\n    resolution: {\n      value: /* @__PURE__ */new Vector2()\n    }\n  },\n  vertexShader: /* glsl */\"\\n\\t\\tuniform mat4 textureMatrix;\\n\\t\\tvarying vec4 vUv;\\n\\n\\t\\tvoid main() {\\n\\n\\t\\t\\tvUv = textureMatrix * vec4( position, 1.0 );\\n\\n\\t\\t\\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\\n\\n\\t\\t}\",\n  fragmentShader: /* glsl */\"\\n\\t\\tuniform vec3 color;\\n\\t\\tuniform sampler2D tDiffuse;\\n\\t\\tuniform sampler2D tDepth;\\n\\t\\tuniform float maxDistance;\\n\\t\\tuniform float opacity;\\n\\t\\tuniform float fresnelCoe;\\n\\t\\tuniform float virtualCameraNear;\\n\\t\\tuniform float virtualCameraFar;\\n\\t\\tuniform mat4 virtualCameraProjectionMatrix;\\n\\t\\tuniform mat4 virtualCameraProjectionMatrixInverse;\\n\\t\\tuniform mat4 virtualCameraMatrixWorld;\\n\\t\\tuniform vec2 resolution;\\n\\t\\tvarying vec4 vUv;\\n\\t\\t#include <packing>\\n\\t\\tfloat blendOverlay( float base, float blend ) {\\n\\t\\t\\treturn( base < 0.5 ? ( 2.0 * base * blend ) : ( 1.0 - 2.0 * ( 1.0 - base ) * ( 1.0 - blend ) ) );\\n\\t\\t}\\n\\t\\tvec3 blendOverlay( vec3 base, vec3 blend ) {\\n\\t\\t\\treturn vec3( blendOverlay( base.r, blend.r ), blendOverlay( base.g, blend.g ), blendOverlay( base.b, blend.b ) );\\n\\t\\t}\\n\\t\\tfloat getDepth( const in vec2 uv ) {\\n\\t\\t\\treturn texture2D( tDepth, uv ).x;\\n\\t\\t}\\n\\t\\tfloat getViewZ( const in float depth ) {\\n\\t\\t\\treturn perspectiveDepthToViewZ( depth, virtualCameraNear, virtualCameraFar );\\n\\t\\t}\\n\\t\\tvec3 getViewPosition( const in vec2 uv, const in float depth/*clip space*/, const in float clipW ) {\\n\\t\\t\\tvec4 clipPosition = vec4( ( vec3( uv, depth ) - 0.5 ) * 2.0, 1.0 );//ndc\\n\\t\\t\\tclipPosition *= clipW; //clip\\n\\t\\t\\treturn ( virtualCameraProjectionMatrixInverse * clipPosition ).xyz;//view\\n\\t\\t}\\n\\t\\tvoid main() {\\n\\t\\t\\tvec4 base = texture2DProj( tDiffuse, vUv );\\n\\t\\t\\t#ifdef useDepthTexture\\n\\t\\t\\t\\tvec2 uv=(gl_FragCoord.xy-.5)/resolution.xy;\\n\\t\\t\\t\\tuv.x=1.-uv.x;\\n\\t\\t\\t\\tfloat depth = texture2DProj( tDepth, vUv ).r;\\n\\t\\t\\t\\tfloat viewZ = getViewZ( depth );\\n\\t\\t\\t\\tfloat clipW = virtualCameraProjectionMatrix[2][3] * viewZ+virtualCameraProjectionMatrix[3][3];\\n\\t\\t\\t\\tvec3 viewPosition=getViewPosition( uv, depth, clipW );\\n\\t\\t\\t\\tvec3 worldPosition=(virtualCameraMatrixWorld*vec4(viewPosition,1)).xyz;\\n\\t\\t\\t\\tif(worldPosition.y>maxDistance) discard;\\n\\t\\t\\t\\tfloat op=opacity;\\n\\t\\t\\t\\t#ifdef DISTANCE_ATTENUATION\\n\\t\\t\\t\\t\\tfloat ratio=1.-(worldPosition.y/maxDistance);\\n\\t\\t\\t\\t\\tfloat attenuation=ratio*ratio;\\n\\t\\t\\t\\t\\top=opacity*attenuation;\\n\\t\\t\\t\\t#endif\\n\\t\\t\\t\\t#ifdef FRESNEL\\n\\t\\t\\t\\t\\top*=fresnelCoe;\\n\\t\\t\\t\\t#endif\\n\\t\\t\\t\\tgl_FragColor = vec4( blendOverlay( base.rgb, color ), op );\\n\\t\\t\\t#else\\n\\t\\t\\t\\tgl_FragColor = vec4( blendOverlay( base.rgb, color ), 1.0 );\\n\\t\\t\\t#endif\\n\\t\\t}\\n\\t\"\n});\nexport { ReflectorForSSRPass };","map":{"version":3,"names":["__defProp","Object","defineProperty","__defNormalProp","obj","key","value","enumerable","configurable","writable","__publicField","Mesh","Matrix4","Vector2","Color","Vector3","PerspectiveCamera","DepthTexture","UnsignedShortType","NearestFilter","HalfFloatType","WebGLRenderTarget","ShaderMaterial","UniformsUtils","Plane","_ReflectorForSSRPass","_Mesh","_inherits","_super","_createSuper","geometry","_this","options","arguments","length","undefined","_classCallCheck","call","isReflectorForSSRPass","type","scope","_assertThisInitialized","color","textureWidth","textureHeight","clipBias","shader","ReflectorShader","useDepthTexture","yAxis","vecTemp0","vecTemp1","needsUpdate","maxDistance","uniforms","opacity","resolution","window","innerWidth","innerHeight","_distanceAttenuation","defines","DISTANCE_ATTENUATION","get","set","val","material","_fresnel","FRESNEL","normal","reflectorWorldPosition","cameraWorldPosition","rotationMatrix","lookAtPosition","view","target","textureMatrix","virtualCamera","depthTexture","minFilter","magFilter","parameters","renderTarget","transparent","assign","clone","fragmentShader","vertexShader","texture","globalPlane","globalPlanes","doRender","renderer","scene","camera","copy","position","normalize","reflect","dot","setFromMatrixPosition","matrixWorld","extractRotation","applyMatrix4","subVectors","negate","add","up","lookAt","far","updateMatrixWorld","projectionMatrix","near","projectionMatrixInverse","multiply","matrixWorldInverse","currentRenderTarget","getRenderTarget","currentXrEnabled","xr","enabled","currentShadowAutoUpdate","shadowMap","autoUpdate","currentClippingPlanes","clippingPlanes","setRenderTarget","state","buffers","depth","setMask","autoClear","clear","render","viewport","_createClass","ReflectorForSSRPass","tDiffuse","tDepth","fresnelCoe","virtualCameraNear","virtualCameraFar","virtualCameraProjectionMatrix","virtualCameraMatrixWorld","virtualCameraProjectionMatrixInverse"],"sources":["/home/krug/Coding/JavaScript/Websites/Personal/personal/node_modules/.pnpm/three-stdlib@2.23.7_three@0.151.3/node_modules/three-stdlib/objects/ReflectorForSSRPass.js"],"sourcesContent":["var __defProp = Object.defineProperty;\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;\nvar __publicField = (obj, key, value) => {\n  __defNormalProp(obj, typeof key !== \"symbol\" ? key + \"\" : key, value);\n  return value;\n};\nimport { Mesh, Matrix4, Vector2, Color, Vector3, PerspectiveCamera, DepthTexture, UnsignedShortType, NearestFilter, HalfFloatType, WebGLRenderTarget, ShaderMaterial, UniformsUtils, Plane } from \"three\";\nconst _ReflectorForSSRPass = class extends Mesh {\n  constructor(geometry, options = {}) {\n    super(geometry);\n    this.isReflectorForSSRPass = true;\n    this.type = \"ReflectorForSSRPass\";\n    const scope = this;\n    const color = options.color !== void 0 ? new Color(options.color) : new Color(8355711);\n    const textureWidth = options.textureWidth || 512;\n    const textureHeight = options.textureHeight || 512;\n    const clipBias = options.clipBias || 0;\n    const shader = options.shader || _ReflectorForSSRPass.ReflectorShader;\n    const useDepthTexture = options.useDepthTexture === true;\n    const yAxis = new Vector3(0, 1, 0);\n    const vecTemp0 = new Vector3();\n    const vecTemp1 = new Vector3();\n    scope.needsUpdate = false;\n    scope.maxDistance = _ReflectorForSSRPass.ReflectorShader.uniforms.maxDistance.value;\n    scope.opacity = _ReflectorForSSRPass.ReflectorShader.uniforms.opacity.value;\n    scope.color = color;\n    scope.resolution = options.resolution || new Vector2(window.innerWidth, window.innerHeight);\n    scope._distanceAttenuation = _ReflectorForSSRPass.ReflectorShader.defines.DISTANCE_ATTENUATION;\n    Object.defineProperty(scope, \"distanceAttenuation\", {\n      get() {\n        return scope._distanceAttenuation;\n      },\n      set(val) {\n        if (scope._distanceAttenuation === val)\n          return;\n        scope._distanceAttenuation = val;\n        scope.material.defines.DISTANCE_ATTENUATION = val;\n        scope.material.needsUpdate = true;\n      }\n    });\n    scope._fresnel = _ReflectorForSSRPass.ReflectorShader.defines.FRESNEL;\n    Object.defineProperty(scope, \"fresnel\", {\n      get() {\n        return scope._fresnel;\n      },\n      set(val) {\n        if (scope._fresnel === val)\n          return;\n        scope._fresnel = val;\n        scope.material.defines.FRESNEL = val;\n        scope.material.needsUpdate = true;\n      }\n    });\n    const normal = new Vector3();\n    const reflectorWorldPosition = new Vector3();\n    const cameraWorldPosition = new Vector3();\n    const rotationMatrix = new Matrix4();\n    const lookAtPosition = new Vector3(0, 0, -1);\n    const view = new Vector3();\n    const target = new Vector3();\n    const textureMatrix = new Matrix4();\n    const virtualCamera = new PerspectiveCamera();\n    let depthTexture;\n    if (useDepthTexture) {\n      depthTexture = new DepthTexture();\n      depthTexture.type = UnsignedShortType;\n      depthTexture.minFilter = NearestFilter;\n      depthTexture.magFilter = NearestFilter;\n    }\n    const parameters = {\n      depthTexture: useDepthTexture ? depthTexture : null,\n      type: HalfFloatType\n    };\n    const renderTarget = new WebGLRenderTarget(textureWidth, textureHeight, parameters);\n    const material = new ShaderMaterial({\n      transparent: useDepthTexture,\n      defines: Object.assign({}, _ReflectorForSSRPass.ReflectorShader.defines, {\n        useDepthTexture\n      }),\n      uniforms: UniformsUtils.clone(shader.uniforms),\n      fragmentShader: shader.fragmentShader,\n      vertexShader: shader.vertexShader\n    });\n    material.uniforms[\"tDiffuse\"].value = renderTarget.texture;\n    material.uniforms[\"color\"].value = scope.color;\n    material.uniforms[\"textureMatrix\"].value = textureMatrix;\n    if (useDepthTexture) {\n      material.uniforms[\"tDepth\"].value = renderTarget.depthTexture;\n    }\n    this.material = material;\n    const globalPlane = new Plane(new Vector3(0, 1, 0), clipBias);\n    const globalPlanes = [globalPlane];\n    this.doRender = function(renderer, scene, camera) {\n      material.uniforms[\"maxDistance\"].value = scope.maxDistance;\n      material.uniforms[\"color\"].value = scope.color;\n      material.uniforms[\"opacity\"].value = scope.opacity;\n      vecTemp0.copy(camera.position).normalize();\n      vecTemp1.copy(vecTemp0).reflect(yAxis);\n      material.uniforms[\"fresnelCoe\"].value = (vecTemp0.dot(vecTemp1) + 1) / 2;\n      reflectorWorldPosition.setFromMatrixPosition(scope.matrixWorld);\n      cameraWorldPosition.setFromMatrixPosition(camera.matrixWorld);\n      rotationMatrix.extractRotation(scope.matrixWorld);\n      normal.set(0, 0, 1);\n      normal.applyMatrix4(rotationMatrix);\n      view.subVectors(reflectorWorldPosition, cameraWorldPosition);\n      if (view.dot(normal) > 0)\n        return;\n      view.reflect(normal).negate();\n      view.add(reflectorWorldPosition);\n      rotationMatrix.extractRotation(camera.matrixWorld);\n      lookAtPosition.set(0, 0, -1);\n      lookAtPosition.applyMatrix4(rotationMatrix);\n      lookAtPosition.add(cameraWorldPosition);\n      target.subVectors(reflectorWorldPosition, lookAtPosition);\n      target.reflect(normal).negate();\n      target.add(reflectorWorldPosition);\n      virtualCamera.position.copy(view);\n      virtualCamera.up.set(0, 1, 0);\n      virtualCamera.up.applyMatrix4(rotationMatrix);\n      virtualCamera.up.reflect(normal);\n      virtualCamera.lookAt(target);\n      virtualCamera.far = camera.far;\n      virtualCamera.updateMatrixWorld();\n      virtualCamera.projectionMatrix.copy(camera.projectionMatrix);\n      material.uniforms[\"virtualCameraNear\"].value = camera.near;\n      material.uniforms[\"virtualCameraFar\"].value = camera.far;\n      material.uniforms[\"virtualCameraMatrixWorld\"].value = virtualCamera.matrixWorld;\n      material.uniforms[\"virtualCameraProjectionMatrix\"].value = camera.projectionMatrix;\n      material.uniforms[\"virtualCameraProjectionMatrixInverse\"].value = camera.projectionMatrixInverse;\n      material.uniforms[\"resolution\"].value = scope.resolution;\n      textureMatrix.set(0.5, 0, 0, 0.5, 0, 0.5, 0, 0.5, 0, 0, 0.5, 0.5, 0, 0, 0, 1);\n      textureMatrix.multiply(virtualCamera.projectionMatrix);\n      textureMatrix.multiply(virtualCamera.matrixWorldInverse);\n      textureMatrix.multiply(scope.matrixWorld);\n      const currentRenderTarget = renderer.getRenderTarget();\n      const currentXrEnabled = renderer.xr.enabled;\n      const currentShadowAutoUpdate = renderer.shadowMap.autoUpdate;\n      const currentClippingPlanes = renderer.clippingPlanes;\n      renderer.xr.enabled = false;\n      renderer.shadowMap.autoUpdate = false;\n      renderer.clippingPlanes = globalPlanes;\n      renderer.setRenderTarget(renderTarget);\n      renderer.state.buffers.depth.setMask(true);\n      if (renderer.autoClear === false)\n        renderer.clear();\n      renderer.render(scene, virtualCamera);\n      renderer.xr.enabled = currentXrEnabled;\n      renderer.shadowMap.autoUpdate = currentShadowAutoUpdate;\n      renderer.clippingPlanes = currentClippingPlanes;\n      renderer.setRenderTarget(currentRenderTarget);\n      const viewport = camera.viewport;\n      if (viewport !== void 0) {\n        renderer.state.viewport(viewport);\n      }\n    };\n    this.getRenderTarget = function() {\n      return renderTarget;\n    };\n  }\n};\nlet ReflectorForSSRPass = _ReflectorForSSRPass;\n__publicField(ReflectorForSSRPass, \"ReflectorShader\", {\n  defines: {\n    DISTANCE_ATTENUATION: true,\n    FRESNEL: true\n  },\n  uniforms: {\n    color: { value: null },\n    tDiffuse: { value: null },\n    tDepth: { value: null },\n    textureMatrix: { value: /* @__PURE__ */ new Matrix4() },\n    maxDistance: { value: 180 },\n    opacity: { value: 0.5 },\n    fresnelCoe: { value: null },\n    virtualCameraNear: { value: null },\n    virtualCameraFar: { value: null },\n    virtualCameraProjectionMatrix: { value: /* @__PURE__ */ new Matrix4() },\n    virtualCameraMatrixWorld: { value: /* @__PURE__ */ new Matrix4() },\n    virtualCameraProjectionMatrixInverse: { value: /* @__PURE__ */ new Matrix4() },\n    resolution: { value: /* @__PURE__ */ new Vector2() }\n  },\n  vertexShader: (\n    /* glsl */\n    `\n\t\tuniform mat4 textureMatrix;\n\t\tvarying vec4 vUv;\n\n\t\tvoid main() {\n\n\t\t\tvUv = textureMatrix * vec4( position, 1.0 );\n\n\t\t\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n\n\t\t}`\n  ),\n  fragmentShader: (\n    /* glsl */\n    `\n\t\tuniform vec3 color;\n\t\tuniform sampler2D tDiffuse;\n\t\tuniform sampler2D tDepth;\n\t\tuniform float maxDistance;\n\t\tuniform float opacity;\n\t\tuniform float fresnelCoe;\n\t\tuniform float virtualCameraNear;\n\t\tuniform float virtualCameraFar;\n\t\tuniform mat4 virtualCameraProjectionMatrix;\n\t\tuniform mat4 virtualCameraProjectionMatrixInverse;\n\t\tuniform mat4 virtualCameraMatrixWorld;\n\t\tuniform vec2 resolution;\n\t\tvarying vec4 vUv;\n\t\t#include <packing>\n\t\tfloat blendOverlay( float base, float blend ) {\n\t\t\treturn( base < 0.5 ? ( 2.0 * base * blend ) : ( 1.0 - 2.0 * ( 1.0 - base ) * ( 1.0 - blend ) ) );\n\t\t}\n\t\tvec3 blendOverlay( vec3 base, vec3 blend ) {\n\t\t\treturn vec3( blendOverlay( base.r, blend.r ), blendOverlay( base.g, blend.g ), blendOverlay( base.b, blend.b ) );\n\t\t}\n\t\tfloat getDepth( const in vec2 uv ) {\n\t\t\treturn texture2D( tDepth, uv ).x;\n\t\t}\n\t\tfloat getViewZ( const in float depth ) {\n\t\t\treturn perspectiveDepthToViewZ( depth, virtualCameraNear, virtualCameraFar );\n\t\t}\n\t\tvec3 getViewPosition( const in vec2 uv, const in float depth/*clip space*/, const in float clipW ) {\n\t\t\tvec4 clipPosition = vec4( ( vec3( uv, depth ) - 0.5 ) * 2.0, 1.0 );//ndc\n\t\t\tclipPosition *= clipW; //clip\n\t\t\treturn ( virtualCameraProjectionMatrixInverse * clipPosition ).xyz;//view\n\t\t}\n\t\tvoid main() {\n\t\t\tvec4 base = texture2DProj( tDiffuse, vUv );\n\t\t\t#ifdef useDepthTexture\n\t\t\t\tvec2 uv=(gl_FragCoord.xy-.5)/resolution.xy;\n\t\t\t\tuv.x=1.-uv.x;\n\t\t\t\tfloat depth = texture2DProj( tDepth, vUv ).r;\n\t\t\t\tfloat viewZ = getViewZ( depth );\n\t\t\t\tfloat clipW = virtualCameraProjectionMatrix[2][3] * viewZ+virtualCameraProjectionMatrix[3][3];\n\t\t\t\tvec3 viewPosition=getViewPosition( uv, depth, clipW );\n\t\t\t\tvec3 worldPosition=(virtualCameraMatrixWorld*vec4(viewPosition,1)).xyz;\n\t\t\t\tif(worldPosition.y>maxDistance) discard;\n\t\t\t\tfloat op=opacity;\n\t\t\t\t#ifdef DISTANCE_ATTENUATION\n\t\t\t\t\tfloat ratio=1.-(worldPosition.y/maxDistance);\n\t\t\t\t\tfloat attenuation=ratio*ratio;\n\t\t\t\t\top=opacity*attenuation;\n\t\t\t\t#endif\n\t\t\t\t#ifdef FRESNEL\n\t\t\t\t\top*=fresnelCoe;\n\t\t\t\t#endif\n\t\t\t\tgl_FragColor = vec4( blendOverlay( base.rgb, color ), op );\n\t\t\t#else\n\t\t\t\tgl_FragColor = vec4( blendOverlay( base.rgb, color ), 1.0 );\n\t\t\t#endif\n\t\t}\n\t`\n  )\n});\nexport {\n  ReflectorForSSRPass\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}