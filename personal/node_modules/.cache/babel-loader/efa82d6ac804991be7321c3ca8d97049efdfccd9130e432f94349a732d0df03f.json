{"ast":null,"code":"import _classCallCheck from \"/home/krug/Coding/JavaScript/Websites/Personal/personal/node_modules/.pnpm/@babel+runtime@7.22.3/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/home/krug/Coding/JavaScript/Websites/Personal/personal/node_modules/.pnpm/@babel+runtime@7.22.3/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _get from \"/home/krug/Coding/JavaScript/Websites/Personal/personal/node_modules/.pnpm/@babel+runtime@7.22.3/node_modules/@babel/runtime/helpers/esm/get.js\";\nimport _getPrototypeOf from \"/home/krug/Coding/JavaScript/Websites/Personal/personal/node_modules/.pnpm/@babel+runtime@7.22.3/node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js\";\nimport _inherits from \"/home/krug/Coding/JavaScript/Websites/Personal/personal/node_modules/.pnpm/@babel+runtime@7.22.3/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/home/krug/Coding/JavaScript/Websites/Personal/personal/node_modules/.pnpm/@babel+runtime@7.22.3/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { Object3D, MeshBasicMaterial, MathUtils, Mesh } from \"three\";\nimport { LightningStrike } from \"../geometries/LightningStrike.js\";\nvar LightningStorm = /*#__PURE__*/function (_Object3D) {\n  _inherits(LightningStorm, _Object3D);\n  var _super = _createSuper(LightningStorm);\n  function LightningStorm() {\n    var _this;\n    var stormParams = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    _classCallCheck(this, LightningStorm);\n    _this = _super.call(this);\n    _this.isLightningStorm = true;\n    _this.stormParams = stormParams;\n    stormParams.size = stormParams.size !== void 0 ? stormParams.size : 1e3;\n    stormParams.minHeight = stormParams.minHeight !== void 0 ? stormParams.minHeight : 80;\n    stormParams.maxHeight = stormParams.maxHeight !== void 0 ? stormParams.maxHeight : 100;\n    stormParams.maxSlope = stormParams.maxSlope !== void 0 ? stormParams.maxSlope : 1.1;\n    stormParams.maxLightnings = stormParams.maxLightnings !== void 0 ? stormParams.maxLightnings : 3;\n    stormParams.lightningMinPeriod = stormParams.lightningMinPeriod !== void 0 ? stormParams.lightningMinPeriod : 3;\n    stormParams.lightningMaxPeriod = stormParams.lightningMaxPeriod !== void 0 ? stormParams.lightningMaxPeriod : 7;\n    stormParams.lightningMinDuration = stormParams.lightningMinDuration !== void 0 ? stormParams.lightningMinDuration : 1;\n    stormParams.lightningMaxDuration = stormParams.lightningMaxDuration !== void 0 ? stormParams.lightningMaxDuration : 2.5;\n    _this.lightningParameters = LightningStrike.copyParameters(stormParams.lightningParameters, stormParams.lightningParameters);\n    _this.lightningParameters.isEternal = false;\n    _this.lightningMaterial = stormParams.lightningMaterial !== void 0 ? stormParams.lightningMaterial : new MeshBasicMaterial({\n      color: 11599871\n    });\n    if (stormParams.onRayPosition !== void 0) {\n      _this.onRayPosition = stormParams.onRayPosition;\n    } else {\n      _this.onRayPosition = function (source, dest) {\n        dest.set((Math.random() - 0.5) * stormParams.size, 0, (Math.random() - 0.5) * stormParams.size);\n        var height = MathUtils.lerp(stormParams.minHeight, stormParams.maxHeight, Math.random());\n        source.set(stormParams.maxSlope * (2 * Math.random() - 1), 1, stormParams.maxSlope * (2 * Math.random() - 1)).multiplyScalar(height).add(dest);\n      };\n    }\n    _this.onLightningDown = stormParams.onLightningDown;\n    _this.inited = false;\n    _this.nextLightningTime = 0;\n    _this.lightningsMeshes = [];\n    _this.deadLightningsMeshes = [];\n    for (var i = 0; i < _this.stormParams.maxLightnings; i++) {\n      var lightning = new LightningStrike(LightningStrike.copyParameters({}, _this.lightningParameters));\n      var mesh = new Mesh(lightning, _this.lightningMaterial);\n      _this.deadLightningsMeshes.push(mesh);\n    }\n    return _this;\n  }\n  _createClass(LightningStorm, [{\n    key: \"update\",\n    value: function update(time) {\n      if (!this.inited) {\n        this.nextLightningTime = this.getNextLightningTime(time) * Math.random();\n        this.inited = true;\n      }\n      if (time >= this.nextLightningTime) {\n        var lightningMesh = this.deadLightningsMeshes.pop();\n        if (lightningMesh) {\n          var lightningParams1 = LightningStrike.copyParameters(lightningMesh.geometry.rayParameters, this.lightningParameters);\n          lightningParams1.birthTime = time;\n          lightningParams1.deathTime = time + MathUtils.lerp(this.stormParams.lightningMinDuration, this.stormParams.lightningMaxDuration, Math.random());\n          this.onRayPosition(lightningParams1.sourceOffset, lightningParams1.destOffset);\n          lightningParams1.noiseSeed = Math.random();\n          this.add(lightningMesh);\n          this.lightningsMeshes.push(lightningMesh);\n        }\n        this.nextLightningTime = this.getNextLightningTime(time);\n      }\n      var i = 0,\n        il = this.lightningsMeshes.length;\n      while (i < il) {\n        var mesh = this.lightningsMeshes[i];\n        var lightning = mesh.geometry;\n        var prevState = lightning.state;\n        lightning.update(time);\n        if (prevState === LightningStrike.RAY_PROPAGATING && lightning.state > prevState) {\n          if (this.onLightningDown) {\n            this.onLightningDown(lightning);\n          }\n        }\n        if (lightning.state === LightningStrike.RAY_EXTINGUISHED) {\n          this.lightningsMeshes.splice(this.lightningsMeshes.indexOf(mesh), 1);\n          this.deadLightningsMeshes.push(mesh);\n          this.remove(mesh);\n          il--;\n        } else {\n          i++;\n        }\n      }\n    }\n  }, {\n    key: \"getNextLightningTime\",\n    value: function getNextLightningTime(currentTime) {\n      return currentTime + MathUtils.lerp(this.stormParams.lightningMinPeriod, this.stormParams.lightningMaxPeriod, Math.random()) / (this.stormParams.maxLightnings + 1);\n    }\n  }, {\n    key: \"copy\",\n    value: function copy(source, recursive) {\n      _get(_getPrototypeOf(LightningStorm.prototype), \"copy\", this).call(this, source, recursive);\n      this.stormParams.size = source.stormParams.size;\n      this.stormParams.minHeight = source.stormParams.minHeight;\n      this.stormParams.maxHeight = source.stormParams.maxHeight;\n      this.stormParams.maxSlope = source.stormParams.maxSlope;\n      this.stormParams.maxLightnings = source.stormParams.maxLightnings;\n      this.stormParams.lightningMinPeriod = source.stormParams.lightningMinPeriod;\n      this.stormParams.lightningMaxPeriod = source.stormParams.lightningMaxPeriod;\n      this.stormParams.lightningMinDuration = source.stormParams.lightningMinDuration;\n      this.stormParams.lightningMaxDuration = source.stormParams.lightningMaxDuration;\n      this.lightningParameters = LightningStrike.copyParameters({}, source.lightningParameters);\n      this.lightningMaterial = source.stormParams.lightningMaterial;\n      this.onLightningDown = source.onLightningDown;\n      return this;\n    }\n  }, {\n    key: \"clone\",\n    value: function clone() {\n      return new this.constructor(this.stormParams).copy(this);\n    }\n  }]);\n  return LightningStorm;\n}(Object3D);\nexport { LightningStorm };","map":{"version":3,"names":["Object3D","MeshBasicMaterial","MathUtils","Mesh","LightningStrike","LightningStorm","_Object3D","_inherits","_super","_createSuper","_this","stormParams","arguments","length","undefined","_classCallCheck","call","isLightningStorm","size","minHeight","maxHeight","maxSlope","maxLightnings","lightningMinPeriod","lightningMaxPeriod","lightningMinDuration","lightningMaxDuration","lightningParameters","copyParameters","isEternal","lightningMaterial","color","onRayPosition","source","dest","set","Math","random","height","lerp","multiplyScalar","add","onLightningDown","inited","nextLightningTime","lightningsMeshes","deadLightningsMeshes","i","lightning","mesh","push","_createClass","key","value","update","time","getNextLightningTime","lightningMesh","pop","lightningParams1","geometry","rayParameters","birthTime","deathTime","sourceOffset","destOffset","noiseSeed","il","prevState","state","RAY_PROPAGATING","RAY_EXTINGUISHED","splice","indexOf","remove","currentTime","copy","recursive","_get","_getPrototypeOf","prototype","clone","constructor"],"sources":["/home/krug/Coding/JavaScript/Websites/Personal/personal/node_modules/.pnpm/three-stdlib@2.23.7_three@0.151.3/node_modules/three-stdlib/objects/LightningStorm.js"],"sourcesContent":["import { Object3D, MeshBasicMaterial, MathUtils, Mesh } from \"three\";\nimport { LightningStrike } from \"../geometries/LightningStrike.js\";\nclass LightningStorm extends Object3D {\n  constructor(stormParams = {}) {\n    super();\n    this.isLightningStorm = true;\n    this.stormParams = stormParams;\n    stormParams.size = stormParams.size !== void 0 ? stormParams.size : 1e3;\n    stormParams.minHeight = stormParams.minHeight !== void 0 ? stormParams.minHeight : 80;\n    stormParams.maxHeight = stormParams.maxHeight !== void 0 ? stormParams.maxHeight : 100;\n    stormParams.maxSlope = stormParams.maxSlope !== void 0 ? stormParams.maxSlope : 1.1;\n    stormParams.maxLightnings = stormParams.maxLightnings !== void 0 ? stormParams.maxLightnings : 3;\n    stormParams.lightningMinPeriod = stormParams.lightningMinPeriod !== void 0 ? stormParams.lightningMinPeriod : 3;\n    stormParams.lightningMaxPeriod = stormParams.lightningMaxPeriod !== void 0 ? stormParams.lightningMaxPeriod : 7;\n    stormParams.lightningMinDuration = stormParams.lightningMinDuration !== void 0 ? stormParams.lightningMinDuration : 1;\n    stormParams.lightningMaxDuration = stormParams.lightningMaxDuration !== void 0 ? stormParams.lightningMaxDuration : 2.5;\n    this.lightningParameters = LightningStrike.copyParameters(\n      stormParams.lightningParameters,\n      stormParams.lightningParameters\n    );\n    this.lightningParameters.isEternal = false;\n    this.lightningMaterial = stormParams.lightningMaterial !== void 0 ? stormParams.lightningMaterial : new MeshBasicMaterial({ color: 11599871 });\n    if (stormParams.onRayPosition !== void 0) {\n      this.onRayPosition = stormParams.onRayPosition;\n    } else {\n      this.onRayPosition = function(source, dest) {\n        dest.set((Math.random() - 0.5) * stormParams.size, 0, (Math.random() - 0.5) * stormParams.size);\n        const height = MathUtils.lerp(stormParams.minHeight, stormParams.maxHeight, Math.random());\n        source.set(stormParams.maxSlope * (2 * Math.random() - 1), 1, stormParams.maxSlope * (2 * Math.random() - 1)).multiplyScalar(height).add(dest);\n      };\n    }\n    this.onLightningDown = stormParams.onLightningDown;\n    this.inited = false;\n    this.nextLightningTime = 0;\n    this.lightningsMeshes = [];\n    this.deadLightningsMeshes = [];\n    for (let i = 0; i < this.stormParams.maxLightnings; i++) {\n      const lightning = new LightningStrike(LightningStrike.copyParameters({}, this.lightningParameters));\n      const mesh = new Mesh(lightning, this.lightningMaterial);\n      this.deadLightningsMeshes.push(mesh);\n    }\n  }\n  update(time) {\n    if (!this.inited) {\n      this.nextLightningTime = this.getNextLightningTime(time) * Math.random();\n      this.inited = true;\n    }\n    if (time >= this.nextLightningTime) {\n      const lightningMesh = this.deadLightningsMeshes.pop();\n      if (lightningMesh) {\n        const lightningParams1 = LightningStrike.copyParameters(\n          lightningMesh.geometry.rayParameters,\n          this.lightningParameters\n        );\n        lightningParams1.birthTime = time;\n        lightningParams1.deathTime = time + MathUtils.lerp(this.stormParams.lightningMinDuration, this.stormParams.lightningMaxDuration, Math.random());\n        this.onRayPosition(lightningParams1.sourceOffset, lightningParams1.destOffset);\n        lightningParams1.noiseSeed = Math.random();\n        this.add(lightningMesh);\n        this.lightningsMeshes.push(lightningMesh);\n      }\n      this.nextLightningTime = this.getNextLightningTime(time);\n    }\n    let i = 0, il = this.lightningsMeshes.length;\n    while (i < il) {\n      const mesh = this.lightningsMeshes[i];\n      const lightning = mesh.geometry;\n      const prevState = lightning.state;\n      lightning.update(time);\n      if (prevState === LightningStrike.RAY_PROPAGATING && lightning.state > prevState) {\n        if (this.onLightningDown) {\n          this.onLightningDown(lightning);\n        }\n      }\n      if (lightning.state === LightningStrike.RAY_EXTINGUISHED) {\n        this.lightningsMeshes.splice(this.lightningsMeshes.indexOf(mesh), 1);\n        this.deadLightningsMeshes.push(mesh);\n        this.remove(mesh);\n        il--;\n      } else {\n        i++;\n      }\n    }\n  }\n  getNextLightningTime(currentTime) {\n    return currentTime + MathUtils.lerp(this.stormParams.lightningMinPeriod, this.stormParams.lightningMaxPeriod, Math.random()) / (this.stormParams.maxLightnings + 1);\n  }\n  copy(source, recursive) {\n    super.copy(source, recursive);\n    this.stormParams.size = source.stormParams.size;\n    this.stormParams.minHeight = source.stormParams.minHeight;\n    this.stormParams.maxHeight = source.stormParams.maxHeight;\n    this.stormParams.maxSlope = source.stormParams.maxSlope;\n    this.stormParams.maxLightnings = source.stormParams.maxLightnings;\n    this.stormParams.lightningMinPeriod = source.stormParams.lightningMinPeriod;\n    this.stormParams.lightningMaxPeriod = source.stormParams.lightningMaxPeriod;\n    this.stormParams.lightningMinDuration = source.stormParams.lightningMinDuration;\n    this.stormParams.lightningMaxDuration = source.stormParams.lightningMaxDuration;\n    this.lightningParameters = LightningStrike.copyParameters({}, source.lightningParameters);\n    this.lightningMaterial = source.stormParams.lightningMaterial;\n    this.onLightningDown = source.onLightningDown;\n    return this;\n  }\n  clone() {\n    return new this.constructor(this.stormParams).copy(this);\n  }\n}\nexport {\n  LightningStorm\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}