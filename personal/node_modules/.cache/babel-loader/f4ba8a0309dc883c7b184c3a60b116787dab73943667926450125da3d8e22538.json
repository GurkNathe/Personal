{"ast":null,"code":"import { BufferGeometry, Vector3, Matrix4, Float32BufferAttribute } from \"three\";\nclass DecalGeometry extends BufferGeometry {\n  constructor(mesh, position, orientation, size) {\n    super();\n    const vertices = [];\n    const normals = [];\n    const uvs = [];\n    const plane = new Vector3();\n    const projectorMatrix = new Matrix4();\n    projectorMatrix.makeRotationFromEuler(orientation);\n    projectorMatrix.setPosition(position);\n    const projectorMatrixInverse = new Matrix4();\n    projectorMatrixInverse.copy(projectorMatrix).invert();\n    generate();\n    this.setAttribute(\"position\", new Float32BufferAttribute(vertices, 3));\n    this.setAttribute(\"normal\", new Float32BufferAttribute(normals, 3));\n    this.setAttribute(\"uv\", new Float32BufferAttribute(uvs, 2));\n    function generate() {\n      let i;\n      let decalVertices = [];\n      const vertex = new Vector3();\n      const normal = new Vector3();\n      if (mesh.geometry.isGeometry === true) {\n        console.error(\"THREE.DecalGeometry no longer supports THREE.Geometry. Use BufferGeometry instead.\");\n        return;\n      }\n      const geometry = mesh.geometry;\n      const positionAttribute = geometry.attributes.position;\n      const normalAttribute = geometry.attributes.normal;\n      if (geometry.index !== null) {\n        const index = geometry.index;\n        for (i = 0; i < index.count; i++) {\n          vertex.fromBufferAttribute(positionAttribute, index.getX(i));\n          normal.fromBufferAttribute(normalAttribute, index.getX(i));\n          pushDecalVertex(decalVertices, vertex, normal);\n        }\n      } else {\n        for (i = 0; i < positionAttribute.count; i++) {\n          vertex.fromBufferAttribute(positionAttribute, i);\n          normal.fromBufferAttribute(normalAttribute, i);\n          pushDecalVertex(decalVertices, vertex, normal);\n        }\n      }\n      decalVertices = clipGeometry(decalVertices, plane.set(1, 0, 0));\n      decalVertices = clipGeometry(decalVertices, plane.set(-1, 0, 0));\n      decalVertices = clipGeometry(decalVertices, plane.set(0, 1, 0));\n      decalVertices = clipGeometry(decalVertices, plane.set(0, -1, 0));\n      decalVertices = clipGeometry(decalVertices, plane.set(0, 0, 1));\n      decalVertices = clipGeometry(decalVertices, plane.set(0, 0, -1));\n      for (i = 0; i < decalVertices.length; i++) {\n        const decalVertex = decalVertices[i];\n        uvs.push(0.5 + decalVertex.position.x / size.x, 0.5 + decalVertex.position.y / size.y);\n        decalVertex.position.applyMatrix4(projectorMatrix);\n        vertices.push(decalVertex.position.x, decalVertex.position.y, decalVertex.position.z);\n        normals.push(decalVertex.normal.x, decalVertex.normal.y, decalVertex.normal.z);\n      }\n    }\n    function pushDecalVertex(decalVertices, vertex, normal) {\n      vertex.applyMatrix4(mesh.matrixWorld);\n      vertex.applyMatrix4(projectorMatrixInverse);\n      normal.transformDirection(mesh.matrixWorld);\n      decalVertices.push(new DecalVertex(vertex.clone(), normal.clone()));\n    }\n    function clipGeometry(inVertices, plane2) {\n      const outVertices = [];\n      const s = 0.5 * Math.abs(size.dot(plane2));\n      for (let i = 0; i < inVertices.length; i += 3) {\n        let v1Out,\n          v2Out,\n          v3Out,\n          total = 0;\n        let nV1, nV2, nV3, nV4;\n        const d1 = inVertices[i + 0].position.dot(plane2) - s;\n        const d2 = inVertices[i + 1].position.dot(plane2) - s;\n        const d3 = inVertices[i + 2].position.dot(plane2) - s;\n        v1Out = d1 > 0;\n        v2Out = d2 > 0;\n        v3Out = d3 > 0;\n        total = (v1Out ? 1 : 0) + (v2Out ? 1 : 0) + (v3Out ? 1 : 0);\n        switch (total) {\n          case 0:\n            {\n              outVertices.push(inVertices[i]);\n              outVertices.push(inVertices[i + 1]);\n              outVertices.push(inVertices[i + 2]);\n              break;\n            }\n          case 1:\n            {\n              if (v1Out) {\n                nV1 = inVertices[i + 1];\n                nV2 = inVertices[i + 2];\n                nV3 = clip(inVertices[i], nV1, plane2, s);\n                nV4 = clip(inVertices[i], nV2, plane2, s);\n              }\n              if (v2Out) {\n                nV1 = inVertices[i];\n                nV2 = inVertices[i + 2];\n                nV3 = clip(inVertices[i + 1], nV1, plane2, s);\n                nV4 = clip(inVertices[i + 1], nV2, plane2, s);\n                outVertices.push(nV3);\n                outVertices.push(nV2.clone());\n                outVertices.push(nV1.clone());\n                outVertices.push(nV2.clone());\n                outVertices.push(nV3.clone());\n                outVertices.push(nV4);\n                break;\n              }\n              if (v3Out) {\n                nV1 = inVertices[i];\n                nV2 = inVertices[i + 1];\n                nV3 = clip(inVertices[i + 2], nV1, plane2, s);\n                nV4 = clip(inVertices[i + 2], nV2, plane2, s);\n              }\n              outVertices.push(nV1.clone());\n              outVertices.push(nV2.clone());\n              outVertices.push(nV3);\n              outVertices.push(nV4);\n              outVertices.push(nV3.clone());\n              outVertices.push(nV2.clone());\n              break;\n            }\n          case 2:\n            {\n              if (!v1Out) {\n                nV1 = inVertices[i].clone();\n                nV2 = clip(nV1, inVertices[i + 1], plane2, s);\n                nV3 = clip(nV1, inVertices[i + 2], plane2, s);\n                outVertices.push(nV1);\n                outVertices.push(nV2);\n                outVertices.push(nV3);\n              }\n              if (!v2Out) {\n                nV1 = inVertices[i + 1].clone();\n                nV2 = clip(nV1, inVertices[i + 2], plane2, s);\n                nV3 = clip(nV1, inVertices[i], plane2, s);\n                outVertices.push(nV1);\n                outVertices.push(nV2);\n                outVertices.push(nV3);\n              }\n              if (!v3Out) {\n                nV1 = inVertices[i + 2].clone();\n                nV2 = clip(nV1, inVertices[i], plane2, s);\n                nV3 = clip(nV1, inVertices[i + 1], plane2, s);\n                outVertices.push(nV1);\n                outVertices.push(nV2);\n                outVertices.push(nV3);\n              }\n              break;\n            }\n          case 3:\n            {\n              break;\n            }\n        }\n      }\n      return outVertices;\n    }\n    function clip(v0, v1, p, s) {\n      const d0 = v0.position.dot(p) - s;\n      const d1 = v1.position.dot(p) - s;\n      const s0 = d0 / (d0 - d1);\n      const v = new DecalVertex(new Vector3(v0.position.x + s0 * (v1.position.x - v0.position.x), v0.position.y + s0 * (v1.position.y - v0.position.y), v0.position.z + s0 * (v1.position.z - v0.position.z)), new Vector3(v0.normal.x + s0 * (v1.normal.x - v0.normal.x), v0.normal.y + s0 * (v1.normal.y - v0.normal.y), v0.normal.z + s0 * (v1.normal.z - v0.normal.z)));\n      return v;\n    }\n  }\n}\nclass DecalVertex {\n  constructor(position, normal) {\n    this.position = position;\n    this.normal = normal;\n  }\n  clone() {\n    return new this.constructor(this.position.clone(), this.normal.clone());\n  }\n}\nexport { DecalGeometry, DecalVertex };","map":{"version":3,"names":["BufferGeometry","Vector3","Matrix4","Float32BufferAttribute","DecalGeometry","constructor","mesh","position","orientation","size","vertices","normals","uvs","plane","projectorMatrix","makeRotationFromEuler","setPosition","projectorMatrixInverse","copy","invert","generate","setAttribute","i","decalVertices","vertex","normal","geometry","isGeometry","console","error","positionAttribute","attributes","normalAttribute","index","count","fromBufferAttribute","getX","pushDecalVertex","clipGeometry","set","length","decalVertex","push","x","y","applyMatrix4","z","matrixWorld","transformDirection","DecalVertex","clone","inVertices","plane2","outVertices","s","Math","abs","dot","v1Out","v2Out","v3Out","total","nV1","nV2","nV3","nV4","d1","d2","d3","clip","v0","v1","p","d0","s0","v"],"sources":["/home/krug/Coding/JavaScript/Websites/Personal/personal/node_modules/.pnpm/three-stdlib@2.23.7_three@0.151.3/node_modules/three-stdlib/geometries/DecalGeometry.js"],"sourcesContent":["import { BufferGeometry, Vector3, Matrix4, Float32BufferAttribute } from \"three\";\nclass DecalGeometry extends BufferGeometry {\n  constructor(mesh, position, orientation, size) {\n    super();\n    const vertices = [];\n    const normals = [];\n    const uvs = [];\n    const plane = new Vector3();\n    const projectorMatrix = new Matrix4();\n    projectorMatrix.makeRotationFromEuler(orientation);\n    projectorMatrix.setPosition(position);\n    const projectorMatrixInverse = new Matrix4();\n    projectorMatrixInverse.copy(projectorMatrix).invert();\n    generate();\n    this.setAttribute(\"position\", new Float32BufferAttribute(vertices, 3));\n    this.setAttribute(\"normal\", new Float32BufferAttribute(normals, 3));\n    this.setAttribute(\"uv\", new Float32BufferAttribute(uvs, 2));\n    function generate() {\n      let i;\n      let decalVertices = [];\n      const vertex = new Vector3();\n      const normal = new Vector3();\n      if (mesh.geometry.isGeometry === true) {\n        console.error(\"THREE.DecalGeometry no longer supports THREE.Geometry. Use BufferGeometry instead.\");\n        return;\n      }\n      const geometry = mesh.geometry;\n      const positionAttribute = geometry.attributes.position;\n      const normalAttribute = geometry.attributes.normal;\n      if (geometry.index !== null) {\n        const index = geometry.index;\n        for (i = 0; i < index.count; i++) {\n          vertex.fromBufferAttribute(positionAttribute, index.getX(i));\n          normal.fromBufferAttribute(normalAttribute, index.getX(i));\n          pushDecalVertex(decalVertices, vertex, normal);\n        }\n      } else {\n        for (i = 0; i < positionAttribute.count; i++) {\n          vertex.fromBufferAttribute(positionAttribute, i);\n          normal.fromBufferAttribute(normalAttribute, i);\n          pushDecalVertex(decalVertices, vertex, normal);\n        }\n      }\n      decalVertices = clipGeometry(decalVertices, plane.set(1, 0, 0));\n      decalVertices = clipGeometry(decalVertices, plane.set(-1, 0, 0));\n      decalVertices = clipGeometry(decalVertices, plane.set(0, 1, 0));\n      decalVertices = clipGeometry(decalVertices, plane.set(0, -1, 0));\n      decalVertices = clipGeometry(decalVertices, plane.set(0, 0, 1));\n      decalVertices = clipGeometry(decalVertices, plane.set(0, 0, -1));\n      for (i = 0; i < decalVertices.length; i++) {\n        const decalVertex = decalVertices[i];\n        uvs.push(0.5 + decalVertex.position.x / size.x, 0.5 + decalVertex.position.y / size.y);\n        decalVertex.position.applyMatrix4(projectorMatrix);\n        vertices.push(decalVertex.position.x, decalVertex.position.y, decalVertex.position.z);\n        normals.push(decalVertex.normal.x, decalVertex.normal.y, decalVertex.normal.z);\n      }\n    }\n    function pushDecalVertex(decalVertices, vertex, normal) {\n      vertex.applyMatrix4(mesh.matrixWorld);\n      vertex.applyMatrix4(projectorMatrixInverse);\n      normal.transformDirection(mesh.matrixWorld);\n      decalVertices.push(new DecalVertex(vertex.clone(), normal.clone()));\n    }\n    function clipGeometry(inVertices, plane2) {\n      const outVertices = [];\n      const s = 0.5 * Math.abs(size.dot(plane2));\n      for (let i = 0; i < inVertices.length; i += 3) {\n        let v1Out, v2Out, v3Out, total = 0;\n        let nV1, nV2, nV3, nV4;\n        const d1 = inVertices[i + 0].position.dot(plane2) - s;\n        const d2 = inVertices[i + 1].position.dot(plane2) - s;\n        const d3 = inVertices[i + 2].position.dot(plane2) - s;\n        v1Out = d1 > 0;\n        v2Out = d2 > 0;\n        v3Out = d3 > 0;\n        total = (v1Out ? 1 : 0) + (v2Out ? 1 : 0) + (v3Out ? 1 : 0);\n        switch (total) {\n          case 0: {\n            outVertices.push(inVertices[i]);\n            outVertices.push(inVertices[i + 1]);\n            outVertices.push(inVertices[i + 2]);\n            break;\n          }\n          case 1: {\n            if (v1Out) {\n              nV1 = inVertices[i + 1];\n              nV2 = inVertices[i + 2];\n              nV3 = clip(inVertices[i], nV1, plane2, s);\n              nV4 = clip(inVertices[i], nV2, plane2, s);\n            }\n            if (v2Out) {\n              nV1 = inVertices[i];\n              nV2 = inVertices[i + 2];\n              nV3 = clip(inVertices[i + 1], nV1, plane2, s);\n              nV4 = clip(inVertices[i + 1], nV2, plane2, s);\n              outVertices.push(nV3);\n              outVertices.push(nV2.clone());\n              outVertices.push(nV1.clone());\n              outVertices.push(nV2.clone());\n              outVertices.push(nV3.clone());\n              outVertices.push(nV4);\n              break;\n            }\n            if (v3Out) {\n              nV1 = inVertices[i];\n              nV2 = inVertices[i + 1];\n              nV3 = clip(inVertices[i + 2], nV1, plane2, s);\n              nV4 = clip(inVertices[i + 2], nV2, plane2, s);\n            }\n            outVertices.push(nV1.clone());\n            outVertices.push(nV2.clone());\n            outVertices.push(nV3);\n            outVertices.push(nV4);\n            outVertices.push(nV3.clone());\n            outVertices.push(nV2.clone());\n            break;\n          }\n          case 2: {\n            if (!v1Out) {\n              nV1 = inVertices[i].clone();\n              nV2 = clip(nV1, inVertices[i + 1], plane2, s);\n              nV3 = clip(nV1, inVertices[i + 2], plane2, s);\n              outVertices.push(nV1);\n              outVertices.push(nV2);\n              outVertices.push(nV3);\n            }\n            if (!v2Out) {\n              nV1 = inVertices[i + 1].clone();\n              nV2 = clip(nV1, inVertices[i + 2], plane2, s);\n              nV3 = clip(nV1, inVertices[i], plane2, s);\n              outVertices.push(nV1);\n              outVertices.push(nV2);\n              outVertices.push(nV3);\n            }\n            if (!v3Out) {\n              nV1 = inVertices[i + 2].clone();\n              nV2 = clip(nV1, inVertices[i], plane2, s);\n              nV3 = clip(nV1, inVertices[i + 1], plane2, s);\n              outVertices.push(nV1);\n              outVertices.push(nV2);\n              outVertices.push(nV3);\n            }\n            break;\n          }\n          case 3: {\n            break;\n          }\n        }\n      }\n      return outVertices;\n    }\n    function clip(v0, v1, p, s) {\n      const d0 = v0.position.dot(p) - s;\n      const d1 = v1.position.dot(p) - s;\n      const s0 = d0 / (d0 - d1);\n      const v = new DecalVertex(\n        new Vector3(\n          v0.position.x + s0 * (v1.position.x - v0.position.x),\n          v0.position.y + s0 * (v1.position.y - v0.position.y),\n          v0.position.z + s0 * (v1.position.z - v0.position.z)\n        ),\n        new Vector3(\n          v0.normal.x + s0 * (v1.normal.x - v0.normal.x),\n          v0.normal.y + s0 * (v1.normal.y - v0.normal.y),\n          v0.normal.z + s0 * (v1.normal.z - v0.normal.z)\n        )\n      );\n      return v;\n    }\n  }\n}\nclass DecalVertex {\n  constructor(position, normal) {\n    this.position = position;\n    this.normal = normal;\n  }\n  clone() {\n    return new this.constructor(this.position.clone(), this.normal.clone());\n  }\n}\nexport {\n  DecalGeometry,\n  DecalVertex\n};\n"],"mappings":"AAAA,SAASA,cAAc,EAAEC,OAAO,EAAEC,OAAO,EAAEC,sBAAsB,QAAQ,OAAO;AAChF,MAAMC,aAAa,SAASJ,cAAc,CAAC;EACzCK,WAAWA,CAACC,IAAI,EAAEC,QAAQ,EAAEC,WAAW,EAAEC,IAAI,EAAE;IAC7C,KAAK,CAAC,CAAC;IACP,MAAMC,QAAQ,GAAG,EAAE;IACnB,MAAMC,OAAO,GAAG,EAAE;IAClB,MAAMC,GAAG,GAAG,EAAE;IACd,MAAMC,KAAK,GAAG,IAAIZ,OAAO,CAAC,CAAC;IAC3B,MAAMa,eAAe,GAAG,IAAIZ,OAAO,CAAC,CAAC;IACrCY,eAAe,CAACC,qBAAqB,CAACP,WAAW,CAAC;IAClDM,eAAe,CAACE,WAAW,CAACT,QAAQ,CAAC;IACrC,MAAMU,sBAAsB,GAAG,IAAIf,OAAO,CAAC,CAAC;IAC5Ce,sBAAsB,CAACC,IAAI,CAACJ,eAAe,CAAC,CAACK,MAAM,CAAC,CAAC;IACrDC,QAAQ,CAAC,CAAC;IACV,IAAI,CAACC,YAAY,CAAC,UAAU,EAAE,IAAIlB,sBAAsB,CAACO,QAAQ,EAAE,CAAC,CAAC,CAAC;IACtE,IAAI,CAACW,YAAY,CAAC,QAAQ,EAAE,IAAIlB,sBAAsB,CAACQ,OAAO,EAAE,CAAC,CAAC,CAAC;IACnE,IAAI,CAACU,YAAY,CAAC,IAAI,EAAE,IAAIlB,sBAAsB,CAACS,GAAG,EAAE,CAAC,CAAC,CAAC;IAC3D,SAASQ,QAAQA,CAAA,EAAG;MAClB,IAAIE,CAAC;MACL,IAAIC,aAAa,GAAG,EAAE;MACtB,MAAMC,MAAM,GAAG,IAAIvB,OAAO,CAAC,CAAC;MAC5B,MAAMwB,MAAM,GAAG,IAAIxB,OAAO,CAAC,CAAC;MAC5B,IAAIK,IAAI,CAACoB,QAAQ,CAACC,UAAU,KAAK,IAAI,EAAE;QACrCC,OAAO,CAACC,KAAK,CAAC,oFAAoF,CAAC;QACnG;MACF;MACA,MAAMH,QAAQ,GAAGpB,IAAI,CAACoB,QAAQ;MAC9B,MAAMI,iBAAiB,GAAGJ,QAAQ,CAACK,UAAU,CAACxB,QAAQ;MACtD,MAAMyB,eAAe,GAAGN,QAAQ,CAACK,UAAU,CAACN,MAAM;MAClD,IAAIC,QAAQ,CAACO,KAAK,KAAK,IAAI,EAAE;QAC3B,MAAMA,KAAK,GAAGP,QAAQ,CAACO,KAAK;QAC5B,KAAKX,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGW,KAAK,CAACC,KAAK,EAAEZ,CAAC,EAAE,EAAE;UAChCE,MAAM,CAACW,mBAAmB,CAACL,iBAAiB,EAAEG,KAAK,CAACG,IAAI,CAACd,CAAC,CAAC,CAAC;UAC5DG,MAAM,CAACU,mBAAmB,CAACH,eAAe,EAAEC,KAAK,CAACG,IAAI,CAACd,CAAC,CAAC,CAAC;UAC1De,eAAe,CAACd,aAAa,EAAEC,MAAM,EAAEC,MAAM,CAAC;QAChD;MACF,CAAC,MAAM;QACL,KAAKH,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGQ,iBAAiB,CAACI,KAAK,EAAEZ,CAAC,EAAE,EAAE;UAC5CE,MAAM,CAACW,mBAAmB,CAACL,iBAAiB,EAAER,CAAC,CAAC;UAChDG,MAAM,CAACU,mBAAmB,CAACH,eAAe,EAAEV,CAAC,CAAC;UAC9Ce,eAAe,CAACd,aAAa,EAAEC,MAAM,EAAEC,MAAM,CAAC;QAChD;MACF;MACAF,aAAa,GAAGe,YAAY,CAACf,aAAa,EAAEV,KAAK,CAAC0B,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;MAC/DhB,aAAa,GAAGe,YAAY,CAACf,aAAa,EAAEV,KAAK,CAAC0B,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;MAChEhB,aAAa,GAAGe,YAAY,CAACf,aAAa,EAAEV,KAAK,CAAC0B,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;MAC/DhB,aAAa,GAAGe,YAAY,CAACf,aAAa,EAAEV,KAAK,CAAC0B,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;MAChEhB,aAAa,GAAGe,YAAY,CAACf,aAAa,EAAEV,KAAK,CAAC0B,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;MAC/DhB,aAAa,GAAGe,YAAY,CAACf,aAAa,EAAEV,KAAK,CAAC0B,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;MAChE,KAAKjB,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGC,aAAa,CAACiB,MAAM,EAAElB,CAAC,EAAE,EAAE;QACzC,MAAMmB,WAAW,GAAGlB,aAAa,CAACD,CAAC,CAAC;QACpCV,GAAG,CAAC8B,IAAI,CAAC,GAAG,GAAGD,WAAW,CAAClC,QAAQ,CAACoC,CAAC,GAAGlC,IAAI,CAACkC,CAAC,EAAE,GAAG,GAAGF,WAAW,CAAClC,QAAQ,CAACqC,CAAC,GAAGnC,IAAI,CAACmC,CAAC,CAAC;QACtFH,WAAW,CAAClC,QAAQ,CAACsC,YAAY,CAAC/B,eAAe,CAAC;QAClDJ,QAAQ,CAACgC,IAAI,CAACD,WAAW,CAAClC,QAAQ,CAACoC,CAAC,EAAEF,WAAW,CAAClC,QAAQ,CAACqC,CAAC,EAAEH,WAAW,CAAClC,QAAQ,CAACuC,CAAC,CAAC;QACrFnC,OAAO,CAAC+B,IAAI,CAACD,WAAW,CAAChB,MAAM,CAACkB,CAAC,EAAEF,WAAW,CAAChB,MAAM,CAACmB,CAAC,EAAEH,WAAW,CAAChB,MAAM,CAACqB,CAAC,CAAC;MAChF;IACF;IACA,SAAST,eAAeA,CAACd,aAAa,EAAEC,MAAM,EAAEC,MAAM,EAAE;MACtDD,MAAM,CAACqB,YAAY,CAACvC,IAAI,CAACyC,WAAW,CAAC;MACrCvB,MAAM,CAACqB,YAAY,CAAC5B,sBAAsB,CAAC;MAC3CQ,MAAM,CAACuB,kBAAkB,CAAC1C,IAAI,CAACyC,WAAW,CAAC;MAC3CxB,aAAa,CAACmB,IAAI,CAAC,IAAIO,WAAW,CAACzB,MAAM,CAAC0B,KAAK,CAAC,CAAC,EAAEzB,MAAM,CAACyB,KAAK,CAAC,CAAC,CAAC,CAAC;IACrE;IACA,SAASZ,YAAYA,CAACa,UAAU,EAAEC,MAAM,EAAE;MACxC,MAAMC,WAAW,GAAG,EAAE;MACtB,MAAMC,CAAC,GAAG,GAAG,GAAGC,IAAI,CAACC,GAAG,CAAC/C,IAAI,CAACgD,GAAG,CAACL,MAAM,CAAC,CAAC;MAC1C,KAAK,IAAI9B,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG6B,UAAU,CAACX,MAAM,EAAElB,CAAC,IAAI,CAAC,EAAE;QAC7C,IAAIoC,KAAK;UAAEC,KAAK;UAAEC,KAAK;UAAEC,KAAK,GAAG,CAAC;QAClC,IAAIC,GAAG,EAAEC,GAAG,EAAEC,GAAG,EAAEC,GAAG;QACtB,MAAMC,EAAE,GAAGf,UAAU,CAAC7B,CAAC,GAAG,CAAC,CAAC,CAACf,QAAQ,CAACkD,GAAG,CAACL,MAAM,CAAC,GAAGE,CAAC;QACrD,MAAMa,EAAE,GAAGhB,UAAU,CAAC7B,CAAC,GAAG,CAAC,CAAC,CAACf,QAAQ,CAACkD,GAAG,CAACL,MAAM,CAAC,GAAGE,CAAC;QACrD,MAAMc,EAAE,GAAGjB,UAAU,CAAC7B,CAAC,GAAG,CAAC,CAAC,CAACf,QAAQ,CAACkD,GAAG,CAACL,MAAM,CAAC,GAAGE,CAAC;QACrDI,KAAK,GAAGQ,EAAE,GAAG,CAAC;QACdP,KAAK,GAAGQ,EAAE,GAAG,CAAC;QACdP,KAAK,GAAGQ,EAAE,GAAG,CAAC;QACdP,KAAK,GAAG,CAACH,KAAK,GAAG,CAAC,GAAG,CAAC,KAAKC,KAAK,GAAG,CAAC,GAAG,CAAC,CAAC,IAAIC,KAAK,GAAG,CAAC,GAAG,CAAC,CAAC;QAC3D,QAAQC,KAAK;UACX,KAAK,CAAC;YAAE;cACNR,WAAW,CAACX,IAAI,CAACS,UAAU,CAAC7B,CAAC,CAAC,CAAC;cAC/B+B,WAAW,CAACX,IAAI,CAACS,UAAU,CAAC7B,CAAC,GAAG,CAAC,CAAC,CAAC;cACnC+B,WAAW,CAACX,IAAI,CAACS,UAAU,CAAC7B,CAAC,GAAG,CAAC,CAAC,CAAC;cACnC;YACF;UACA,KAAK,CAAC;YAAE;cACN,IAAIoC,KAAK,EAAE;gBACTI,GAAG,GAAGX,UAAU,CAAC7B,CAAC,GAAG,CAAC,CAAC;gBACvByC,GAAG,GAAGZ,UAAU,CAAC7B,CAAC,GAAG,CAAC,CAAC;gBACvB0C,GAAG,GAAGK,IAAI,CAAClB,UAAU,CAAC7B,CAAC,CAAC,EAAEwC,GAAG,EAAEV,MAAM,EAAEE,CAAC,CAAC;gBACzCW,GAAG,GAAGI,IAAI,CAAClB,UAAU,CAAC7B,CAAC,CAAC,EAAEyC,GAAG,EAAEX,MAAM,EAAEE,CAAC,CAAC;cAC3C;cACA,IAAIK,KAAK,EAAE;gBACTG,GAAG,GAAGX,UAAU,CAAC7B,CAAC,CAAC;gBACnByC,GAAG,GAAGZ,UAAU,CAAC7B,CAAC,GAAG,CAAC,CAAC;gBACvB0C,GAAG,GAAGK,IAAI,CAAClB,UAAU,CAAC7B,CAAC,GAAG,CAAC,CAAC,EAAEwC,GAAG,EAAEV,MAAM,EAAEE,CAAC,CAAC;gBAC7CW,GAAG,GAAGI,IAAI,CAAClB,UAAU,CAAC7B,CAAC,GAAG,CAAC,CAAC,EAAEyC,GAAG,EAAEX,MAAM,EAAEE,CAAC,CAAC;gBAC7CD,WAAW,CAACX,IAAI,CAACsB,GAAG,CAAC;gBACrBX,WAAW,CAACX,IAAI,CAACqB,GAAG,CAACb,KAAK,CAAC,CAAC,CAAC;gBAC7BG,WAAW,CAACX,IAAI,CAACoB,GAAG,CAACZ,KAAK,CAAC,CAAC,CAAC;gBAC7BG,WAAW,CAACX,IAAI,CAACqB,GAAG,CAACb,KAAK,CAAC,CAAC,CAAC;gBAC7BG,WAAW,CAACX,IAAI,CAACsB,GAAG,CAACd,KAAK,CAAC,CAAC,CAAC;gBAC7BG,WAAW,CAACX,IAAI,CAACuB,GAAG,CAAC;gBACrB;cACF;cACA,IAAIL,KAAK,EAAE;gBACTE,GAAG,GAAGX,UAAU,CAAC7B,CAAC,CAAC;gBACnByC,GAAG,GAAGZ,UAAU,CAAC7B,CAAC,GAAG,CAAC,CAAC;gBACvB0C,GAAG,GAAGK,IAAI,CAAClB,UAAU,CAAC7B,CAAC,GAAG,CAAC,CAAC,EAAEwC,GAAG,EAAEV,MAAM,EAAEE,CAAC,CAAC;gBAC7CW,GAAG,GAAGI,IAAI,CAAClB,UAAU,CAAC7B,CAAC,GAAG,CAAC,CAAC,EAAEyC,GAAG,EAAEX,MAAM,EAAEE,CAAC,CAAC;cAC/C;cACAD,WAAW,CAACX,IAAI,CAACoB,GAAG,CAACZ,KAAK,CAAC,CAAC,CAAC;cAC7BG,WAAW,CAACX,IAAI,CAACqB,GAAG,CAACb,KAAK,CAAC,CAAC,CAAC;cAC7BG,WAAW,CAACX,IAAI,CAACsB,GAAG,CAAC;cACrBX,WAAW,CAACX,IAAI,CAACuB,GAAG,CAAC;cACrBZ,WAAW,CAACX,IAAI,CAACsB,GAAG,CAACd,KAAK,CAAC,CAAC,CAAC;cAC7BG,WAAW,CAACX,IAAI,CAACqB,GAAG,CAACb,KAAK,CAAC,CAAC,CAAC;cAC7B;YACF;UACA,KAAK,CAAC;YAAE;cACN,IAAI,CAACQ,KAAK,EAAE;gBACVI,GAAG,GAAGX,UAAU,CAAC7B,CAAC,CAAC,CAAC4B,KAAK,CAAC,CAAC;gBAC3Ba,GAAG,GAAGM,IAAI,CAACP,GAAG,EAAEX,UAAU,CAAC7B,CAAC,GAAG,CAAC,CAAC,EAAE8B,MAAM,EAAEE,CAAC,CAAC;gBAC7CU,GAAG,GAAGK,IAAI,CAACP,GAAG,EAAEX,UAAU,CAAC7B,CAAC,GAAG,CAAC,CAAC,EAAE8B,MAAM,EAAEE,CAAC,CAAC;gBAC7CD,WAAW,CAACX,IAAI,CAACoB,GAAG,CAAC;gBACrBT,WAAW,CAACX,IAAI,CAACqB,GAAG,CAAC;gBACrBV,WAAW,CAACX,IAAI,CAACsB,GAAG,CAAC;cACvB;cACA,IAAI,CAACL,KAAK,EAAE;gBACVG,GAAG,GAAGX,UAAU,CAAC7B,CAAC,GAAG,CAAC,CAAC,CAAC4B,KAAK,CAAC,CAAC;gBAC/Ba,GAAG,GAAGM,IAAI,CAACP,GAAG,EAAEX,UAAU,CAAC7B,CAAC,GAAG,CAAC,CAAC,EAAE8B,MAAM,EAAEE,CAAC,CAAC;gBAC7CU,GAAG,GAAGK,IAAI,CAACP,GAAG,EAAEX,UAAU,CAAC7B,CAAC,CAAC,EAAE8B,MAAM,EAAEE,CAAC,CAAC;gBACzCD,WAAW,CAACX,IAAI,CAACoB,GAAG,CAAC;gBACrBT,WAAW,CAACX,IAAI,CAACqB,GAAG,CAAC;gBACrBV,WAAW,CAACX,IAAI,CAACsB,GAAG,CAAC;cACvB;cACA,IAAI,CAACJ,KAAK,EAAE;gBACVE,GAAG,GAAGX,UAAU,CAAC7B,CAAC,GAAG,CAAC,CAAC,CAAC4B,KAAK,CAAC,CAAC;gBAC/Ba,GAAG,GAAGM,IAAI,CAACP,GAAG,EAAEX,UAAU,CAAC7B,CAAC,CAAC,EAAE8B,MAAM,EAAEE,CAAC,CAAC;gBACzCU,GAAG,GAAGK,IAAI,CAACP,GAAG,EAAEX,UAAU,CAAC7B,CAAC,GAAG,CAAC,CAAC,EAAE8B,MAAM,EAAEE,CAAC,CAAC;gBAC7CD,WAAW,CAACX,IAAI,CAACoB,GAAG,CAAC;gBACrBT,WAAW,CAACX,IAAI,CAACqB,GAAG,CAAC;gBACrBV,WAAW,CAACX,IAAI,CAACsB,GAAG,CAAC;cACvB;cACA;YACF;UACA,KAAK,CAAC;YAAE;cACN;YACF;QACF;MACF;MACA,OAAOX,WAAW;IACpB;IACA,SAASgB,IAAIA,CAACC,EAAE,EAAEC,EAAE,EAAEC,CAAC,EAAElB,CAAC,EAAE;MAC1B,MAAMmB,EAAE,GAAGH,EAAE,CAAC/D,QAAQ,CAACkD,GAAG,CAACe,CAAC,CAAC,GAAGlB,CAAC;MACjC,MAAMY,EAAE,GAAGK,EAAE,CAAChE,QAAQ,CAACkD,GAAG,CAACe,CAAC,CAAC,GAAGlB,CAAC;MACjC,MAAMoB,EAAE,GAAGD,EAAE,IAAIA,EAAE,GAAGP,EAAE,CAAC;MACzB,MAAMS,CAAC,GAAG,IAAI1B,WAAW,CACvB,IAAIhD,OAAO,CACTqE,EAAE,CAAC/D,QAAQ,CAACoC,CAAC,GAAG+B,EAAE,IAAIH,EAAE,CAAChE,QAAQ,CAACoC,CAAC,GAAG2B,EAAE,CAAC/D,QAAQ,CAACoC,CAAC,CAAC,EACpD2B,EAAE,CAAC/D,QAAQ,CAACqC,CAAC,GAAG8B,EAAE,IAAIH,EAAE,CAAChE,QAAQ,CAACqC,CAAC,GAAG0B,EAAE,CAAC/D,QAAQ,CAACqC,CAAC,CAAC,EACpD0B,EAAE,CAAC/D,QAAQ,CAACuC,CAAC,GAAG4B,EAAE,IAAIH,EAAE,CAAChE,QAAQ,CAACuC,CAAC,GAAGwB,EAAE,CAAC/D,QAAQ,CAACuC,CAAC,CACrD,CAAC,EACD,IAAI7C,OAAO,CACTqE,EAAE,CAAC7C,MAAM,CAACkB,CAAC,GAAG+B,EAAE,IAAIH,EAAE,CAAC9C,MAAM,CAACkB,CAAC,GAAG2B,EAAE,CAAC7C,MAAM,CAACkB,CAAC,CAAC,EAC9C2B,EAAE,CAAC7C,MAAM,CAACmB,CAAC,GAAG8B,EAAE,IAAIH,EAAE,CAAC9C,MAAM,CAACmB,CAAC,GAAG0B,EAAE,CAAC7C,MAAM,CAACmB,CAAC,CAAC,EAC9C0B,EAAE,CAAC7C,MAAM,CAACqB,CAAC,GAAG4B,EAAE,IAAIH,EAAE,CAAC9C,MAAM,CAACqB,CAAC,GAAGwB,EAAE,CAAC7C,MAAM,CAACqB,CAAC,CAC/C,CACF,CAAC;MACD,OAAO6B,CAAC;IACV;EACF;AACF;AACA,MAAM1B,WAAW,CAAC;EAChB5C,WAAWA,CAACE,QAAQ,EAAEkB,MAAM,EAAE;IAC5B,IAAI,CAAClB,QAAQ,GAAGA,QAAQ;IACxB,IAAI,CAACkB,MAAM,GAAGA,MAAM;EACtB;EACAyB,KAAKA,CAAA,EAAG;IACN,OAAO,IAAI,IAAI,CAAC7C,WAAW,CAAC,IAAI,CAACE,QAAQ,CAAC2C,KAAK,CAAC,CAAC,EAAE,IAAI,CAACzB,MAAM,CAACyB,KAAK,CAAC,CAAC,CAAC;EACzE;AACF;AACA,SACE9C,aAAa,EACb6C,WAAW"},"metadata":{},"sourceType":"module","externalDependencies":[]}