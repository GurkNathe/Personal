{"ast":null,"code":"import _defineProperty from \"/home/krug/Coding/JavaScript/Websites/Personal/personal/node_modules/.pnpm/@babel+runtime@7.22.3/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nimport _regeneratorRuntime from \"/home/krug/Coding/JavaScript/Websites/Personal/personal/node_modules/.pnpm/@babel+runtime@7.22.3/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"/home/krug/Coding/JavaScript/Websites/Personal/personal/node_modules/.pnpm/@babel+runtime@7.22.3/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _slicedToArray from \"/home/krug/Coding/JavaScript/Websites/Personal/personal/node_modules/.pnpm/@babel+runtime@7.22.3/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _classCallCheck from \"/home/krug/Coding/JavaScript/Websites/Personal/personal/node_modules/.pnpm/@babel+runtime@7.22.3/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/home/krug/Coding/JavaScript/Websites/Personal/personal/node_modules/.pnpm/@babel+runtime@7.22.3/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"/home/krug/Coding/JavaScript/Websites/Personal/personal/node_modules/.pnpm/@babel+runtime@7.22.3/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/home/krug/Coding/JavaScript/Websites/Personal/personal/node_modules/.pnpm/@babel+runtime@7.22.3/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nvar _FORMAT_MAP, _TYPE_MAP, _ENCODING_MAP;\nvar __defProp = Object.defineProperty;\nvar __defNormalProp = function __defNormalProp(obj, key, value) {\n  return key in obj ? __defProp(obj, key, {\n    enumerable: true,\n    configurable: true,\n    writable: true,\n    value: value\n  }) : obj[key] = value;\n};\nvar __publicField = function __publicField(obj, key, value) {\n  __defNormalProp(obj, typeof key !== \"symbol\" ? key + \"\" : key, value);\n  return value;\n};\nimport { Loader, RGBAFormat, RGBA_ASTC_4x4_Format, RGBA_BPTC_Format, RGBA_ETC2_EAC_Format, RGBA_PVRTC_4BPPV1_Format, RGBA_S3TC_DXT5_Format, RGB_ETC1_Format, RGB_ETC2_Format, RGB_PVRTC_4BPPV1_Format, RGB_S3TC_DXT1_Format, FileLoader, UnsignedByteType, CompressedTexture, LinearFilter, LinearMipmapLinearFilter, RGFormat, RedFormat, FloatType, HalfFloatType, DataTexture } from \"three\";\nimport { WorkerPool } from \"../utils/WorkerPool.js\";\nimport { KHR_DF_TRANSFER_SRGB, KHR_DF_FLAG_ALPHA_PREMULTIPLIED, read, VK_FORMAT_UNDEFINED, VK_FORMAT_R32G32B32A32_SFLOAT, VK_FORMAT_R16G16B16A16_SFLOAT, VK_FORMAT_R8G8B8A8_UNORM, VK_FORMAT_R8G8B8A8_SRGB, VK_FORMAT_R32G32_SFLOAT, VK_FORMAT_R16G16_SFLOAT, VK_FORMAT_R8G8_UNORM, VK_FORMAT_R8G8_SRGB, VK_FORMAT_R32_SFLOAT, VK_FORMAT_R16_SFLOAT, VK_FORMAT_R8_SRGB, VK_FORMAT_R8_UNORM, KHR_SUPERCOMPRESSION_NONE, KHR_SUPERCOMPRESSION_ZSTD } from \"ktx-parse\";\nimport { ZSTDDecoder } from \"zstddec\";\nimport { CompressedArrayTexture } from \"../_polyfill/CompressedArrayTexture.js\";\nimport { Data3DTexture } from \"../_polyfill/Data3DTexture.js\";\nvar _taskCache = /* @__PURE__ */new WeakMap();\nvar _activeLoaders = 0;\nvar _zstd;\nvar _KTX2Loader = /*#__PURE__*/function (_Loader) {\n  _inherits(_KTX2Loader, _Loader);\n  var _super = _createSuper(_KTX2Loader);\n  function _KTX2Loader(manager) {\n    var _this;\n    _classCallCheck(this, _KTX2Loader);\n    _this = _super.call(this, manager);\n    _this.transcoderPath = \"\";\n    _this.transcoderBinary = null;\n    _this.transcoderPending = null;\n    _this.workerPool = new WorkerPool();\n    _this.workerSourceURL = \"\";\n    _this.workerConfig = null;\n    if (typeof MSC_TRANSCODER !== \"undefined\") {\n      console.warn('THREE.KTX2Loader: Please update to latest \"basis_transcoder\". \"msc_basis_transcoder\" is no longer supported in three.js r125+.');\n    }\n    return _this;\n  }\n  _createClass(_KTX2Loader, [{\n    key: \"setTranscoderPath\",\n    value: function setTranscoderPath(path) {\n      this.transcoderPath = path;\n      return this;\n    }\n  }, {\n    key: \"setWorkerLimit\",\n    value: function setWorkerLimit(num) {\n      this.workerPool.setWorkerLimit(num);\n      return this;\n    }\n  }, {\n    key: \"detectSupport\",\n    value: function detectSupport(renderer) {\n      this.workerConfig = {\n        astcSupported: renderer.extensions.has(\"WEBGL_compressed_texture_astc\"),\n        etc1Supported: renderer.extensions.has(\"WEBGL_compressed_texture_etc1\"),\n        etc2Supported: renderer.extensions.has(\"WEBGL_compressed_texture_etc\"),\n        dxtSupported: renderer.extensions.has(\"WEBGL_compressed_texture_s3tc\"),\n        bptcSupported: renderer.extensions.has(\"EXT_texture_compression_bptc\"),\n        pvrtcSupported: renderer.extensions.has(\"WEBGL_compressed_texture_pvrtc\") || renderer.extensions.has(\"WEBKIT_WEBGL_compressed_texture_pvrtc\")\n      };\n      if (renderer.capabilities.isWebGL2) {\n        this.workerConfig.etc1Supported = false;\n      }\n      return this;\n    }\n  }, {\n    key: \"init\",\n    value: function init() {\n      var _this2 = this;\n      if (!this.transcoderPending) {\n        var jsLoader = new FileLoader(this.manager);\n        jsLoader.setPath(this.transcoderPath);\n        jsLoader.setWithCredentials(this.withCredentials);\n        var jsContent = jsLoader.loadAsync(\"basis_transcoder.js\");\n        var binaryLoader = new FileLoader(this.manager);\n        binaryLoader.setPath(this.transcoderPath);\n        binaryLoader.setResponseType(\"arraybuffer\");\n        binaryLoader.setWithCredentials(this.withCredentials);\n        var binaryContent = binaryLoader.loadAsync(\"basis_transcoder.wasm\");\n        this.transcoderPending = Promise.all([jsContent, binaryContent]).then(function (_ref) {\n          var _ref2 = _slicedToArray(_ref, 2),\n            jsContent2 = _ref2[0],\n            binaryContent2 = _ref2[1];\n          var fn = _KTX2Loader.BasisWorker.toString();\n          var body = [\"/* constants */\", \"let _EngineFormat = \" + JSON.stringify(_KTX2Loader.EngineFormat), \"let _TranscoderFormat = \" + JSON.stringify(_KTX2Loader.TranscoderFormat), \"let _BasisFormat = \" + JSON.stringify(_KTX2Loader.BasisFormat), \"/* basis_transcoder.js */\", jsContent2, \"/* worker */\", fn.substring(fn.indexOf(\"{\") + 1, fn.lastIndexOf(\"}\"))].join(\"\\n\");\n          _this2.workerSourceURL = URL.createObjectURL(new Blob([body]));\n          _this2.transcoderBinary = binaryContent2;\n          _this2.workerPool.setWorkerCreator(function () {\n            var worker = new Worker(_this2.workerSourceURL);\n            var transcoderBinary = _this2.transcoderBinary.slice(0);\n            worker.postMessage({\n              type: \"init\",\n              config: _this2.workerConfig,\n              transcoderBinary: transcoderBinary\n            }, [transcoderBinary]);\n            return worker;\n          });\n        });\n        if (_activeLoaders > 0) {\n          console.warn(\"THREE.KTX2Loader: Multiple active KTX2 loaders may cause performance issues. Use a single KTX2Loader instance, or call .dispose() on old instances.\");\n        }\n        _activeLoaders++;\n      }\n      return this.transcoderPending;\n    }\n  }, {\n    key: \"load\",\n    value: function load(url, onLoad, onProgress, onError) {\n      var _this3 = this;\n      if (this.workerConfig === null) {\n        throw new Error(\"THREE.KTX2Loader: Missing initialization with `.detectSupport( renderer )`.\");\n      }\n      var loader = new FileLoader(this.manager);\n      loader.setResponseType(\"arraybuffer\");\n      loader.setWithCredentials(this.withCredentials);\n      loader.load(url, function (buffer) {\n        if (_taskCache.has(buffer)) {\n          var cachedTask = _taskCache.get(buffer);\n          return cachedTask.promise.then(onLoad).catch(onError);\n        }\n        _this3._createTexture(buffer).then(function (texture) {\n          return onLoad ? onLoad(texture) : null;\n        }).catch(onError);\n      }, onProgress, onError);\n    }\n  }, {\n    key: \"_createTextureFrom\",\n    value: function _createTextureFrom(transcodeResult, container) {\n      var mipmaps = transcodeResult.mipmaps,\n        width = transcodeResult.width,\n        height = transcodeResult.height,\n        format = transcodeResult.format,\n        type = transcodeResult.type,\n        error = transcodeResult.error,\n        dfdTransferFn = transcodeResult.dfdTransferFn,\n        dfdFlags = transcodeResult.dfdFlags;\n      if (type === \"error\") return Promise.reject(error);\n      var texture = container.layerCount > 1 ? new CompressedArrayTexture(mipmaps, width, height, container.layerCount, format, UnsignedByteType) : new CompressedTexture(mipmaps, width, height, format, UnsignedByteType);\n      texture.minFilter = mipmaps.length === 1 ? LinearFilter : LinearMipmapLinearFilter;\n      texture.magFilter = LinearFilter;\n      texture.generateMipmaps = false;\n      texture.needsUpdate = true;\n      if (\"colorSpace\" in texture) texture.colorSpace = dfdTransferFn === KHR_DF_TRANSFER_SRGB ? \"srgb\" : \"srgb-linear\";else texture.encoding = dfdTransferFn === KHR_DF_TRANSFER_SRGB ? 3001 : 3e3;\n      texture.premultiplyAlpha = !!(dfdFlags & KHR_DF_FLAG_ALPHA_PREMULTIPLIED);\n      return texture;\n    }\n    /**\n     * @param {ArrayBuffer} buffer\n     * @param {object?} config\n     * @return {Promise<CompressedTexture|CompressedArrayTexture|DataTexture|Data3DTexture>}\n     */\n  }, {\n    key: \"_createTexture\",\n    value: function () {\n      var _createTexture2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(buffer) {\n        var _this4 = this;\n        var config,\n          container,\n          taskConfig,\n          texturePending,\n          _args = arguments;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              config = _args.length > 1 && _args[1] !== undefined ? _args[1] : {};\n              container = read(new Uint8Array(buffer));\n              if (!(container.vkFormat !== VK_FORMAT_UNDEFINED)) {\n                _context.next = 4;\n                break;\n              }\n              return _context.abrupt(\"return\", createDataTexture(container));\n            case 4:\n              taskConfig = config;\n              texturePending = this.init().then(function () {\n                return _this4.workerPool.postMessage({\n                  type: \"transcode\",\n                  buffer: buffer,\n                  taskConfig: taskConfig\n                }, [buffer]);\n              }).then(function (e) {\n                return _this4._createTextureFrom(e.data, container);\n              });\n              _taskCache.set(buffer, {\n                promise: texturePending\n              });\n              return _context.abrupt(\"return\", texturePending);\n            case 8:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee, this);\n      }));\n      function _createTexture(_x) {\n        return _createTexture2.apply(this, arguments);\n      }\n      return _createTexture;\n    }()\n  }, {\n    key: \"dispose\",\n    value: function dispose() {\n      this.workerPool.dispose();\n      if (this.workerSourceURL) URL.revokeObjectURL(this.workerSourceURL);\n      _activeLoaders--;\n      return this;\n    }\n  }]);\n  return _KTX2Loader;\n}(Loader);\nvar KTX2Loader = _KTX2Loader;\n/* CONSTANTS */\n__publicField(KTX2Loader, \"BasisFormat\", {\n  ETC1S: 0,\n  UASTC_4x4: 1\n});\n__publicField(KTX2Loader, \"TranscoderFormat\", {\n  ETC1: 0,\n  ETC2: 1,\n  BC1: 2,\n  BC3: 3,\n  BC4: 4,\n  BC5: 5,\n  BC7_M6_OPAQUE_ONLY: 6,\n  BC7_M5: 7,\n  PVRTC1_4_RGB: 8,\n  PVRTC1_4_RGBA: 9,\n  ASTC_4x4: 10,\n  ATC_RGB: 11,\n  ATC_RGBA_INTERPOLATED_ALPHA: 12,\n  RGBA32: 13,\n  RGB565: 14,\n  BGR565: 15,\n  RGBA4444: 16\n});\n__publicField(KTX2Loader, \"EngineFormat\", {\n  RGBAFormat: RGBAFormat,\n  RGBA_ASTC_4x4_Format: RGBA_ASTC_4x4_Format,\n  RGBA_BPTC_Format: RGBA_BPTC_Format,\n  RGBA_ETC2_EAC_Format: RGBA_ETC2_EAC_Format,\n  RGBA_PVRTC_4BPPV1_Format: RGBA_PVRTC_4BPPV1_Format,\n  RGBA_S3TC_DXT5_Format: RGBA_S3TC_DXT5_Format,\n  RGB_ETC1_Format: RGB_ETC1_Format,\n  RGB_ETC2_Format: RGB_ETC2_Format,\n  RGB_PVRTC_4BPPV1_Format: RGB_PVRTC_4BPPV1_Format,\n  RGB_S3TC_DXT1_Format: RGB_S3TC_DXT1_Format\n});\n/* WEB WORKER */\n__publicField(KTX2Loader, \"BasisWorker\", function () {\n  var config;\n  var transcoderPending;\n  var BasisModule;\n  var EngineFormat = _EngineFormat;\n  var TranscoderFormat = _TranscoderFormat;\n  var BasisFormat = _BasisFormat;\n  self.addEventListener(\"message\", function (e) {\n    var message = e.data;\n    switch (message.type) {\n      case \"init\":\n        config = message.config;\n        init(message.transcoderBinary);\n        break;\n      case \"transcode\":\n        transcoderPending.then(function () {\n          try {\n            var _transcode = transcode(message.buffer),\n              width = _transcode.width,\n              height = _transcode.height,\n              hasAlpha = _transcode.hasAlpha,\n              mipmaps = _transcode.mipmaps,\n              format = _transcode.format,\n              dfdTransferFn = _transcode.dfdTransferFn,\n              dfdFlags = _transcode.dfdFlags;\n            var buffers = [];\n            for (var i = 0; i < mipmaps.length; ++i) {\n              buffers.push(mipmaps[i].data.buffer);\n            }\n            self.postMessage({\n              type: \"transcode\",\n              id: message.id,\n              width: width,\n              height: height,\n              hasAlpha: hasAlpha,\n              mipmaps: mipmaps,\n              format: format,\n              dfdTransferFn: dfdTransferFn,\n              dfdFlags: dfdFlags\n            }, buffers);\n          } catch (error) {\n            console.error(error);\n            self.postMessage({\n              type: \"error\",\n              id: message.id,\n              error: error.message\n            });\n          }\n        });\n        break;\n    }\n  });\n  function init(wasmBinary) {\n    transcoderPending = new Promise(function (resolve) {\n      BasisModule = {\n        wasmBinary: wasmBinary,\n        onRuntimeInitialized: resolve\n      };\n      BASIS(BasisModule);\n    }).then(function () {\n      BasisModule.initializeBasis();\n      if (BasisModule.KTX2File === void 0) {\n        console.warn(\"THREE.KTX2Loader: Please update Basis Universal transcoder.\");\n      }\n    });\n  }\n  function transcode(buffer) {\n    var ktx2File = new BasisModule.KTX2File(new Uint8Array(buffer));\n    function cleanup() {\n      ktx2File.close();\n      ktx2File.delete();\n    }\n    if (!ktx2File.isValid()) {\n      cleanup();\n      throw new Error(\"THREE.KTX2Loader:\tInvalid or unsupported .ktx2 file\");\n    }\n    var basisFormat = ktx2File.isUASTC() ? BasisFormat.UASTC_4x4 : BasisFormat.ETC1S;\n    var width = ktx2File.getWidth();\n    var height = ktx2File.getHeight();\n    var layers = ktx2File.getLayers() || 1;\n    var levels = ktx2File.getLevels();\n    var hasAlpha = ktx2File.getHasAlpha();\n    var dfdTransferFn = ktx2File.getDFDTransferFunc();\n    var dfdFlags = ktx2File.getDFDFlags();\n    var _getTranscoderFormat = getTranscoderFormat(basisFormat, width, height, hasAlpha),\n      transcoderFormat = _getTranscoderFormat.transcoderFormat,\n      engineFormat = _getTranscoderFormat.engineFormat;\n    if (!width || !height || !levels) {\n      cleanup();\n      throw new Error(\"THREE.KTX2Loader:\tInvalid texture\");\n    }\n    if (!ktx2File.startTranscoding()) {\n      cleanup();\n      throw new Error(\"THREE.KTX2Loader: .startTranscoding failed\");\n    }\n    var mipmaps = [];\n    for (var mip = 0; mip < levels; mip++) {\n      var layerMips = [];\n      var mipWidth = void 0,\n        mipHeight = void 0;\n      for (var layer = 0; layer < layers; layer++) {\n        var levelInfo = ktx2File.getImageLevelInfo(mip, layer, 0);\n        mipWidth = levelInfo.origWidth < 4 ? levelInfo.origWidth : levelInfo.width;\n        mipHeight = levelInfo.origHeight < 4 ? levelInfo.origHeight : levelInfo.height;\n        var dst = new Uint8Array(ktx2File.getImageTranscodedSizeInBytes(mip, layer, 0, transcoderFormat));\n        var status = ktx2File.transcodeImage(dst, mip, layer, 0, transcoderFormat, 0, -1, -1);\n        if (!status) {\n          cleanup();\n          throw new Error(\"THREE.KTX2Loader: .transcodeImage failed.\");\n        }\n        layerMips.push(dst);\n      }\n      mipmaps.push({\n        data: concat(layerMips),\n        width: mipWidth,\n        height: mipHeight\n      });\n    }\n    cleanup();\n    return {\n      width: width,\n      height: height,\n      hasAlpha: hasAlpha,\n      mipmaps: mipmaps,\n      format: engineFormat,\n      dfdTransferFn: dfdTransferFn,\n      dfdFlags: dfdFlags\n    };\n  }\n  var FORMAT_OPTIONS = [{\n    if: \"astcSupported\",\n    basisFormat: [BasisFormat.UASTC_4x4],\n    transcoderFormat: [TranscoderFormat.ASTC_4x4, TranscoderFormat.ASTC_4x4],\n    engineFormat: [EngineFormat.RGBA_ASTC_4x4_Format, EngineFormat.RGBA_ASTC_4x4_Format],\n    priorityETC1S: Infinity,\n    priorityUASTC: 1,\n    needsPowerOfTwo: false\n  }, {\n    if: \"bptcSupported\",\n    basisFormat: [BasisFormat.ETC1S, BasisFormat.UASTC_4x4],\n    transcoderFormat: [TranscoderFormat.BC7_M5, TranscoderFormat.BC7_M5],\n    engineFormat: [EngineFormat.RGBA_BPTC_Format, EngineFormat.RGBA_BPTC_Format],\n    priorityETC1S: 3,\n    priorityUASTC: 2,\n    needsPowerOfTwo: false\n  }, {\n    if: \"dxtSupported\",\n    basisFormat: [BasisFormat.ETC1S, BasisFormat.UASTC_4x4],\n    transcoderFormat: [TranscoderFormat.BC1, TranscoderFormat.BC3],\n    engineFormat: [EngineFormat.RGB_S3TC_DXT1_Format, EngineFormat.RGBA_S3TC_DXT5_Format],\n    priorityETC1S: 4,\n    priorityUASTC: 5,\n    needsPowerOfTwo: false\n  }, {\n    if: \"etc2Supported\",\n    basisFormat: [BasisFormat.ETC1S, BasisFormat.UASTC_4x4],\n    transcoderFormat: [TranscoderFormat.ETC1, TranscoderFormat.ETC2],\n    engineFormat: [EngineFormat.RGB_ETC2_Format, EngineFormat.RGBA_ETC2_EAC_Format],\n    priorityETC1S: 1,\n    priorityUASTC: 3,\n    needsPowerOfTwo: false\n  }, {\n    if: \"etc1Supported\",\n    basisFormat: [BasisFormat.ETC1S, BasisFormat.UASTC_4x4],\n    transcoderFormat: [TranscoderFormat.ETC1],\n    engineFormat: [EngineFormat.RGB_ETC1_Format],\n    priorityETC1S: 2,\n    priorityUASTC: 4,\n    needsPowerOfTwo: false\n  }, {\n    if: \"pvrtcSupported\",\n    basisFormat: [BasisFormat.ETC1S, BasisFormat.UASTC_4x4],\n    transcoderFormat: [TranscoderFormat.PVRTC1_4_RGB, TranscoderFormat.PVRTC1_4_RGBA],\n    engineFormat: [EngineFormat.RGB_PVRTC_4BPPV1_Format, EngineFormat.RGBA_PVRTC_4BPPV1_Format],\n    priorityETC1S: 5,\n    priorityUASTC: 6,\n    needsPowerOfTwo: true\n  }];\n  var ETC1S_OPTIONS = FORMAT_OPTIONS.sort(function (a, b) {\n    return a.priorityETC1S - b.priorityETC1S;\n  });\n  var UASTC_OPTIONS = FORMAT_OPTIONS.sort(function (a, b) {\n    return a.priorityUASTC - b.priorityUASTC;\n  });\n  function getTranscoderFormat(basisFormat, width, height, hasAlpha) {\n    var transcoderFormat;\n    var engineFormat;\n    var options = basisFormat === BasisFormat.ETC1S ? ETC1S_OPTIONS : UASTC_OPTIONS;\n    for (var i = 0; i < options.length; i++) {\n      var opt = options[i];\n      if (!config[opt.if]) continue;\n      if (!opt.basisFormat.includes(basisFormat)) continue;\n      if (hasAlpha && opt.transcoderFormat.length < 2) continue;\n      if (opt.needsPowerOfTwo && !(isPowerOfTwo(width) && isPowerOfTwo(height))) continue;\n      transcoderFormat = opt.transcoderFormat[hasAlpha ? 1 : 0];\n      engineFormat = opt.engineFormat[hasAlpha ? 1 : 0];\n      return {\n        transcoderFormat: transcoderFormat,\n        engineFormat: engineFormat\n      };\n    }\n    console.warn(\"THREE.KTX2Loader: No suitable compressed texture format found. Decoding to RGBA32.\");\n    transcoderFormat = TranscoderFormat.RGBA32;\n    engineFormat = EngineFormat.RGBAFormat;\n    return {\n      transcoderFormat: transcoderFormat,\n      engineFormat: engineFormat\n    };\n  }\n  function isPowerOfTwo(value) {\n    if (value <= 2) return true;\n    return (value & value - 1) === 0 && value !== 0;\n  }\n  function concat(arrays) {\n    var totalByteLength = 0;\n    for (var i = 0; i < arrays.length; i++) {\n      var array = arrays[i];\n      totalByteLength += array.byteLength;\n    }\n    var result = new Uint8Array(totalByteLength);\n    var byteOffset = 0;\n    for (var _i = 0; _i < arrays.length; _i++) {\n      var _array = arrays[_i];\n      result.set(_array, byteOffset);\n      byteOffset += _array.byteLength;\n    }\n    return result;\n  }\n});\nvar FORMAT_MAP = (_FORMAT_MAP = {}, _defineProperty(_FORMAT_MAP, VK_FORMAT_R32G32B32A32_SFLOAT, RGBAFormat), _defineProperty(_FORMAT_MAP, VK_FORMAT_R16G16B16A16_SFLOAT, RGBAFormat), _defineProperty(_FORMAT_MAP, VK_FORMAT_R8G8B8A8_UNORM, RGBAFormat), _defineProperty(_FORMAT_MAP, VK_FORMAT_R8G8B8A8_SRGB, RGBAFormat), _defineProperty(_FORMAT_MAP, VK_FORMAT_R32G32_SFLOAT, RGFormat), _defineProperty(_FORMAT_MAP, VK_FORMAT_R16G16_SFLOAT, RGFormat), _defineProperty(_FORMAT_MAP, VK_FORMAT_R8G8_UNORM, RGFormat), _defineProperty(_FORMAT_MAP, VK_FORMAT_R8G8_SRGB, RGFormat), _defineProperty(_FORMAT_MAP, VK_FORMAT_R32_SFLOAT, RedFormat), _defineProperty(_FORMAT_MAP, VK_FORMAT_R16_SFLOAT, RedFormat), _defineProperty(_FORMAT_MAP, VK_FORMAT_R8_SRGB, RedFormat), _defineProperty(_FORMAT_MAP, VK_FORMAT_R8_UNORM, RedFormat), _FORMAT_MAP);\nvar TYPE_MAP = (_TYPE_MAP = {}, _defineProperty(_TYPE_MAP, VK_FORMAT_R32G32B32A32_SFLOAT, FloatType), _defineProperty(_TYPE_MAP, VK_FORMAT_R16G16B16A16_SFLOAT, HalfFloatType), _defineProperty(_TYPE_MAP, VK_FORMAT_R8G8B8A8_UNORM, UnsignedByteType), _defineProperty(_TYPE_MAP, VK_FORMAT_R8G8B8A8_SRGB, UnsignedByteType), _defineProperty(_TYPE_MAP, VK_FORMAT_R32G32_SFLOAT, FloatType), _defineProperty(_TYPE_MAP, VK_FORMAT_R16G16_SFLOAT, HalfFloatType), _defineProperty(_TYPE_MAP, VK_FORMAT_R8G8_UNORM, UnsignedByteType), _defineProperty(_TYPE_MAP, VK_FORMAT_R8G8_SRGB, UnsignedByteType), _defineProperty(_TYPE_MAP, VK_FORMAT_R32_SFLOAT, FloatType), _defineProperty(_TYPE_MAP, VK_FORMAT_R16_SFLOAT, HalfFloatType), _defineProperty(_TYPE_MAP, VK_FORMAT_R8_SRGB, UnsignedByteType), _defineProperty(_TYPE_MAP, VK_FORMAT_R8_UNORM, UnsignedByteType), _TYPE_MAP);\nvar ENCODING_MAP = (_ENCODING_MAP = {}, _defineProperty(_ENCODING_MAP, VK_FORMAT_R8G8B8A8_SRGB, 3001), _defineProperty(_ENCODING_MAP, VK_FORMAT_R8G8_SRGB, 3001), _defineProperty(_ENCODING_MAP, VK_FORMAT_R8_SRGB, 3001), _ENCODING_MAP);\nfunction createDataTexture(_x2) {\n  return _createDataTexture.apply(this, arguments);\n}\nfunction _createDataTexture() {\n  _createDataTexture = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3(container) {\n    var vkFormat, pixelWidth, pixelHeight, pixelDepth, level, levelData, view, texture;\n    return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n      while (1) switch (_context3.prev = _context3.next) {\n        case 0:\n          vkFormat = container.vkFormat, pixelWidth = container.pixelWidth, pixelHeight = container.pixelHeight, pixelDepth = container.pixelDepth;\n          if (!(FORMAT_MAP[vkFormat] === void 0)) {\n            _context3.next = 3;\n            break;\n          }\n          throw new Error(\"THREE.KTX2Loader: Unsupported vkFormat.\");\n        case 3:\n          level = container.levels[0];\n          if (!(container.supercompressionScheme === KHR_SUPERCOMPRESSION_NONE)) {\n            _context3.next = 8;\n            break;\n          }\n          levelData = level.levelData;\n          _context3.next = 16;\n          break;\n        case 8:\n          if (!(container.supercompressionScheme === KHR_SUPERCOMPRESSION_ZSTD)) {\n            _context3.next = 15;\n            break;\n          }\n          if (!_zstd) {\n            _zstd = new Promise( /*#__PURE__*/function () {\n              var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(resolve) {\n                var zstd;\n                return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n                  while (1) switch (_context2.prev = _context2.next) {\n                    case 0:\n                      zstd = new ZSTDDecoder();\n                      _context2.next = 3;\n                      return zstd.init();\n                    case 3:\n                      resolve(zstd);\n                    case 4:\n                    case \"end\":\n                      return _context2.stop();\n                  }\n                }, _callee2);\n              }));\n              return function (_x3) {\n                return _ref3.apply(this, arguments);\n              };\n            }());\n          }\n          _context3.next = 12;\n          return _zstd;\n        case 12:\n          levelData = _context3.sent.decode(level.levelData, level.uncompressedByteLength);\n          _context3.next = 16;\n          break;\n        case 15:\n          throw new Error(\"THREE.KTX2Loader: Unsupported supercompressionScheme.\");\n        case 16:\n          if (TYPE_MAP[vkFormat] === FloatType) {\n            view = new Float32Array(levelData.buffer, levelData.byteOffset, levelData.byteLength / Float32Array.BYTES_PER_ELEMENT);\n          } else if (TYPE_MAP[vkFormat] === HalfFloatType) {\n            view = new Uint16Array(levelData.buffer, levelData.byteOffset, levelData.byteLength / Uint16Array.BYTES_PER_ELEMENT);\n          } else {\n            view = levelData;\n          }\n          texture = pixelDepth === 0 ? new DataTexture(view, pixelWidth, pixelHeight) : new Data3DTexture(view, pixelWidth, pixelHeight, pixelDepth);\n          texture.type = TYPE_MAP[vkFormat];\n          texture.format = FORMAT_MAP[vkFormat];\n          texture.encoding = ENCODING_MAP[vkFormat] || 3e3;\n          texture.needsUpdate = true;\n          return _context3.abrupt(\"return\", Promise.resolve(texture));\n        case 23:\n        case \"end\":\n          return _context3.stop();\n      }\n    }, _callee3);\n  }));\n  return _createDataTexture.apply(this, arguments);\n}\nexport { KTX2Loader };","map":{"version":3,"names":["__defProp","Object","defineProperty","__defNormalProp","obj","key","value","enumerable","configurable","writable","__publicField","Loader","RGBAFormat","RGBA_ASTC_4x4_Format","RGBA_BPTC_Format","RGBA_ETC2_EAC_Format","RGBA_PVRTC_4BPPV1_Format","RGBA_S3TC_DXT5_Format","RGB_ETC1_Format","RGB_ETC2_Format","RGB_PVRTC_4BPPV1_Format","RGB_S3TC_DXT1_Format","FileLoader","UnsignedByteType","CompressedTexture","LinearFilter","LinearMipmapLinearFilter","RGFormat","RedFormat","FloatType","HalfFloatType","DataTexture","WorkerPool","KHR_DF_TRANSFER_SRGB","KHR_DF_FLAG_ALPHA_PREMULTIPLIED","read","VK_FORMAT_UNDEFINED","VK_FORMAT_R32G32B32A32_SFLOAT","VK_FORMAT_R16G16B16A16_SFLOAT","VK_FORMAT_R8G8B8A8_UNORM","VK_FORMAT_R8G8B8A8_SRGB","VK_FORMAT_R32G32_SFLOAT","VK_FORMAT_R16G16_SFLOAT","VK_FORMAT_R8G8_UNORM","VK_FORMAT_R8G8_SRGB","VK_FORMAT_R32_SFLOAT","VK_FORMAT_R16_SFLOAT","VK_FORMAT_R8_SRGB","VK_FORMAT_R8_UNORM","KHR_SUPERCOMPRESSION_NONE","KHR_SUPERCOMPRESSION_ZSTD","ZSTDDecoder","CompressedArrayTexture","Data3DTexture","_taskCache","WeakMap","_activeLoaders","_zstd","_KTX2Loader","_Loader","_inherits","_super","_createSuper","manager","_this","_classCallCheck","call","transcoderPath","transcoderBinary","transcoderPending","workerPool","workerSourceURL","workerConfig","MSC_TRANSCODER","console","warn","_createClass","setTranscoderPath","path","setWorkerLimit","num","detectSupport","renderer","astcSupported","extensions","has","etc1Supported","etc2Supported","dxtSupported","bptcSupported","pvrtcSupported","capabilities","isWebGL2","init","_this2","jsLoader","setPath","setWithCredentials","withCredentials","jsContent","loadAsync","binaryLoader","setResponseType","binaryContent","Promise","all","then","_ref","_ref2","_slicedToArray","jsContent2","binaryContent2","fn","BasisWorker","toString","body","JSON","stringify","EngineFormat","TranscoderFormat","BasisFormat","substring","indexOf","lastIndexOf","join","URL","createObjectURL","Blob","setWorkerCreator","worker","Worker","slice","postMessage","type","config","load","url","onLoad","onProgress","onError","_this3","Error","loader","buffer","cachedTask","get","promise","catch","_createTexture","texture","_createTextureFrom","transcodeResult","container","mipmaps","width","height","format","error","dfdTransferFn","dfdFlags","reject","layerCount","minFilter","length","magFilter","generateMipmaps","needsUpdate","colorSpace","encoding","premultiplyAlpha","_createTexture2","_asyncToGenerator","_regeneratorRuntime","mark","_callee","_this4","taskConfig","texturePending","_args","arguments","wrap","_callee$","_context","prev","next","undefined","Uint8Array","vkFormat","abrupt","createDataTexture","e","data","set","stop","_x","apply","dispose","revokeObjectURL","KTX2Loader","ETC1S","UASTC_4x4","ETC1","ETC2","BC1","BC3","BC4","BC5","BC7_M6_OPAQUE_ONLY","BC7_M5","PVRTC1_4_RGB","PVRTC1_4_RGBA","ASTC_4x4","ATC_RGB","ATC_RGBA_INTERPOLATED_ALPHA","RGBA32","RGB565","BGR565","RGBA4444","BasisModule","_EngineFormat","_TranscoderFormat","_BasisFormat","self","addEventListener","message","_transcode","transcode","hasAlpha","buffers","i","push","id","wasmBinary","resolve","onRuntimeInitialized","BASIS","initializeBasis","KTX2File","ktx2File","cleanup","close","delete","isValid","basisFormat","isUASTC","getWidth","getHeight","layers","getLayers","levels","getLevels","getHasAlpha","getDFDTransferFunc","getDFDFlags","_getTranscoderFormat","getTranscoderFormat","transcoderFormat","engineFormat","startTranscoding","mip","layerMips","mipWidth","mipHeight","layer","levelInfo","getImageLevelInfo","origWidth","origHeight","dst","getImageTranscodedSizeInBytes","status","transcodeImage","concat","FORMAT_OPTIONS","if","priorityETC1S","Infinity","priorityUASTC","needsPowerOfTwo","ETC1S_OPTIONS","sort","a","b","UASTC_OPTIONS","options","opt","includes","isPowerOfTwo","arrays","totalByteLength","array","byteLength","result","byteOffset","FORMAT_MAP","_FORMAT_MAP","_defineProperty","TYPE_MAP","_TYPE_MAP","ENCODING_MAP","_ENCODING_MAP","_x2","_createDataTexture","_callee3","pixelWidth","pixelHeight","pixelDepth","level","levelData","view","_callee3$","_context3","supercompressionScheme","_ref3","_callee2","zstd","_callee2$","_context2","_x3","sent","decode","uncompressedByteLength","Float32Array","BYTES_PER_ELEMENT","Uint16Array"],"sources":["/home/krug/Coding/JavaScript/Websites/Personal/personal/node_modules/.pnpm/three-stdlib@2.23.7_three@0.151.3/node_modules/three-stdlib/loaders/KTX2Loader.js"],"sourcesContent":["var __defProp = Object.defineProperty;\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;\nvar __publicField = (obj, key, value) => {\n  __defNormalProp(obj, typeof key !== \"symbol\" ? key + \"\" : key, value);\n  return value;\n};\nimport { Loader, RGBAFormat, RGBA_ASTC_4x4_Format, RGBA_BPTC_Format, RGBA_ETC2_EAC_Format, RGBA_PVRTC_4BPPV1_Format, RGBA_S3TC_DXT5_Format, RGB_ETC1_Format, RGB_ETC2_Format, RGB_PVRTC_4BPPV1_Format, RGB_S3TC_DXT1_Format, FileLoader, UnsignedByteType, CompressedTexture, LinearFilter, LinearMipmapLinearFilter, RGFormat, RedFormat, FloatType, HalfFloatType, DataTexture } from \"three\";\nimport { WorkerPool } from \"../utils/WorkerPool.js\";\nimport { KHR_DF_TRANSFER_SRGB, KHR_DF_FLAG_ALPHA_PREMULTIPLIED, read, VK_FORMAT_UNDEFINED, VK_FORMAT_R32G32B32A32_SFLOAT, VK_FORMAT_R16G16B16A16_SFLOAT, VK_FORMAT_R8G8B8A8_UNORM, VK_FORMAT_R8G8B8A8_SRGB, VK_FORMAT_R32G32_SFLOAT, VK_FORMAT_R16G16_SFLOAT, VK_FORMAT_R8G8_UNORM, VK_FORMAT_R8G8_SRGB, VK_FORMAT_R32_SFLOAT, VK_FORMAT_R16_SFLOAT, VK_FORMAT_R8_SRGB, VK_FORMAT_R8_UNORM, KHR_SUPERCOMPRESSION_NONE, KHR_SUPERCOMPRESSION_ZSTD } from \"ktx-parse\";\nimport { ZSTDDecoder } from \"zstddec\";\nimport { CompressedArrayTexture } from \"../_polyfill/CompressedArrayTexture.js\";\nimport { Data3DTexture } from \"../_polyfill/Data3DTexture.js\";\nconst _taskCache = /* @__PURE__ */ new WeakMap();\nlet _activeLoaders = 0;\nlet _zstd;\nconst _KTX2Loader = class extends Loader {\n  constructor(manager) {\n    super(manager);\n    this.transcoderPath = \"\";\n    this.transcoderBinary = null;\n    this.transcoderPending = null;\n    this.workerPool = new WorkerPool();\n    this.workerSourceURL = \"\";\n    this.workerConfig = null;\n    if (typeof MSC_TRANSCODER !== \"undefined\") {\n      console.warn(\n        'THREE.KTX2Loader: Please update to latest \"basis_transcoder\". \"msc_basis_transcoder\" is no longer supported in three.js r125+.'\n      );\n    }\n  }\n  setTranscoderPath(path) {\n    this.transcoderPath = path;\n    return this;\n  }\n  setWorkerLimit(num) {\n    this.workerPool.setWorkerLimit(num);\n    return this;\n  }\n  detectSupport(renderer) {\n    this.workerConfig = {\n      astcSupported: renderer.extensions.has(\"WEBGL_compressed_texture_astc\"),\n      etc1Supported: renderer.extensions.has(\"WEBGL_compressed_texture_etc1\"),\n      etc2Supported: renderer.extensions.has(\"WEBGL_compressed_texture_etc\"),\n      dxtSupported: renderer.extensions.has(\"WEBGL_compressed_texture_s3tc\"),\n      bptcSupported: renderer.extensions.has(\"EXT_texture_compression_bptc\"),\n      pvrtcSupported: renderer.extensions.has(\"WEBGL_compressed_texture_pvrtc\") || renderer.extensions.has(\"WEBKIT_WEBGL_compressed_texture_pvrtc\")\n    };\n    if (renderer.capabilities.isWebGL2) {\n      this.workerConfig.etc1Supported = false;\n    }\n    return this;\n  }\n  init() {\n    if (!this.transcoderPending) {\n      const jsLoader = new FileLoader(this.manager);\n      jsLoader.setPath(this.transcoderPath);\n      jsLoader.setWithCredentials(this.withCredentials);\n      const jsContent = jsLoader.loadAsync(\"basis_transcoder.js\");\n      const binaryLoader = new FileLoader(this.manager);\n      binaryLoader.setPath(this.transcoderPath);\n      binaryLoader.setResponseType(\"arraybuffer\");\n      binaryLoader.setWithCredentials(this.withCredentials);\n      const binaryContent = binaryLoader.loadAsync(\"basis_transcoder.wasm\");\n      this.transcoderPending = Promise.all([jsContent, binaryContent]).then(([jsContent2, binaryContent2]) => {\n        const fn = _KTX2Loader.BasisWorker.toString();\n        const body = [\n          \"/* constants */\",\n          \"let _EngineFormat = \" + JSON.stringify(_KTX2Loader.EngineFormat),\n          \"let _TranscoderFormat = \" + JSON.stringify(_KTX2Loader.TranscoderFormat),\n          \"let _BasisFormat = \" + JSON.stringify(_KTX2Loader.BasisFormat),\n          \"/* basis_transcoder.js */\",\n          jsContent2,\n          \"/* worker */\",\n          fn.substring(fn.indexOf(\"{\") + 1, fn.lastIndexOf(\"}\"))\n        ].join(\"\\n\");\n        this.workerSourceURL = URL.createObjectURL(new Blob([body]));\n        this.transcoderBinary = binaryContent2;\n        this.workerPool.setWorkerCreator(() => {\n          const worker = new Worker(this.workerSourceURL);\n          const transcoderBinary = this.transcoderBinary.slice(0);\n          worker.postMessage({ type: \"init\", config: this.workerConfig, transcoderBinary }, [transcoderBinary]);\n          return worker;\n        });\n      });\n      if (_activeLoaders > 0) {\n        console.warn(\n          \"THREE.KTX2Loader: Multiple active KTX2 loaders may cause performance issues. Use a single KTX2Loader instance, or call .dispose() on old instances.\"\n        );\n      }\n      _activeLoaders++;\n    }\n    return this.transcoderPending;\n  }\n  load(url, onLoad, onProgress, onError) {\n    if (this.workerConfig === null) {\n      throw new Error(\"THREE.KTX2Loader: Missing initialization with `.detectSupport( renderer )`.\");\n    }\n    const loader = new FileLoader(this.manager);\n    loader.setResponseType(\"arraybuffer\");\n    loader.setWithCredentials(this.withCredentials);\n    loader.load(\n      url,\n      (buffer) => {\n        if (_taskCache.has(buffer)) {\n          const cachedTask = _taskCache.get(buffer);\n          return cachedTask.promise.then(onLoad).catch(onError);\n        }\n        this._createTexture(buffer).then((texture) => onLoad ? onLoad(texture) : null).catch(onError);\n      },\n      onProgress,\n      onError\n    );\n  }\n  _createTextureFrom(transcodeResult, container) {\n    const { mipmaps, width, height, format, type, error, dfdTransferFn, dfdFlags } = transcodeResult;\n    if (type === \"error\")\n      return Promise.reject(error);\n    const texture = container.layerCount > 1 ? new CompressedArrayTexture(mipmaps, width, height, container.layerCount, format, UnsignedByteType) : new CompressedTexture(mipmaps, width, height, format, UnsignedByteType);\n    texture.minFilter = mipmaps.length === 1 ? LinearFilter : LinearMipmapLinearFilter;\n    texture.magFilter = LinearFilter;\n    texture.generateMipmaps = false;\n    texture.needsUpdate = true;\n    if (\"colorSpace\" in texture)\n      texture.colorSpace = dfdTransferFn === KHR_DF_TRANSFER_SRGB ? \"srgb\" : \"srgb-linear\";\n    else\n      texture.encoding = dfdTransferFn === KHR_DF_TRANSFER_SRGB ? 3001 : 3e3;\n    texture.premultiplyAlpha = !!(dfdFlags & KHR_DF_FLAG_ALPHA_PREMULTIPLIED);\n    return texture;\n  }\n  /**\n   * @param {ArrayBuffer} buffer\n   * @param {object?} config\n   * @return {Promise<CompressedTexture|CompressedArrayTexture|DataTexture|Data3DTexture>}\n   */\n  async _createTexture(buffer, config = {}) {\n    const container = read(new Uint8Array(buffer));\n    if (container.vkFormat !== VK_FORMAT_UNDEFINED) {\n      return createDataTexture(container);\n    }\n    const taskConfig = config;\n    const texturePending = this.init().then(() => {\n      return this.workerPool.postMessage({ type: \"transcode\", buffer, taskConfig }, [buffer]);\n    }).then((e) => this._createTextureFrom(e.data, container));\n    _taskCache.set(buffer, { promise: texturePending });\n    return texturePending;\n  }\n  dispose() {\n    this.workerPool.dispose();\n    if (this.workerSourceURL)\n      URL.revokeObjectURL(this.workerSourceURL);\n    _activeLoaders--;\n    return this;\n  }\n};\nlet KTX2Loader = _KTX2Loader;\n/* CONSTANTS */\n__publicField(KTX2Loader, \"BasisFormat\", {\n  ETC1S: 0,\n  UASTC_4x4: 1\n});\n__publicField(KTX2Loader, \"TranscoderFormat\", {\n  ETC1: 0,\n  ETC2: 1,\n  BC1: 2,\n  BC3: 3,\n  BC4: 4,\n  BC5: 5,\n  BC7_M6_OPAQUE_ONLY: 6,\n  BC7_M5: 7,\n  PVRTC1_4_RGB: 8,\n  PVRTC1_4_RGBA: 9,\n  ASTC_4x4: 10,\n  ATC_RGB: 11,\n  ATC_RGBA_INTERPOLATED_ALPHA: 12,\n  RGBA32: 13,\n  RGB565: 14,\n  BGR565: 15,\n  RGBA4444: 16\n});\n__publicField(KTX2Loader, \"EngineFormat\", {\n  RGBAFormat,\n  RGBA_ASTC_4x4_Format,\n  RGBA_BPTC_Format,\n  RGBA_ETC2_EAC_Format,\n  RGBA_PVRTC_4BPPV1_Format,\n  RGBA_S3TC_DXT5_Format,\n  RGB_ETC1_Format,\n  RGB_ETC2_Format,\n  RGB_PVRTC_4BPPV1_Format,\n  RGB_S3TC_DXT1_Format\n});\n/* WEB WORKER */\n__publicField(KTX2Loader, \"BasisWorker\", function() {\n  let config;\n  let transcoderPending;\n  let BasisModule;\n  const EngineFormat = _EngineFormat;\n  const TranscoderFormat = _TranscoderFormat;\n  const BasisFormat = _BasisFormat;\n  self.addEventListener(\"message\", function(e) {\n    const message = e.data;\n    switch (message.type) {\n      case \"init\":\n        config = message.config;\n        init(message.transcoderBinary);\n        break;\n      case \"transcode\":\n        transcoderPending.then(() => {\n          try {\n            const { width, height, hasAlpha, mipmaps, format, dfdTransferFn, dfdFlags } = transcode(message.buffer);\n            const buffers = [];\n            for (let i = 0; i < mipmaps.length; ++i) {\n              buffers.push(mipmaps[i].data.buffer);\n            }\n            self.postMessage(\n              {\n                type: \"transcode\",\n                id: message.id,\n                width,\n                height,\n                hasAlpha,\n                mipmaps,\n                format,\n                dfdTransferFn,\n                dfdFlags\n              },\n              buffers\n            );\n          } catch (error) {\n            console.error(error);\n            self.postMessage({ type: \"error\", id: message.id, error: error.message });\n          }\n        });\n        break;\n    }\n  });\n  function init(wasmBinary) {\n    transcoderPending = new Promise((resolve) => {\n      BasisModule = { wasmBinary, onRuntimeInitialized: resolve };\n      BASIS(BasisModule);\n    }).then(() => {\n      BasisModule.initializeBasis();\n      if (BasisModule.KTX2File === void 0) {\n        console.warn(\"THREE.KTX2Loader: Please update Basis Universal transcoder.\");\n      }\n    });\n  }\n  function transcode(buffer) {\n    const ktx2File = new BasisModule.KTX2File(new Uint8Array(buffer));\n    function cleanup() {\n      ktx2File.close();\n      ktx2File.delete();\n    }\n    if (!ktx2File.isValid()) {\n      cleanup();\n      throw new Error(\"THREE.KTX2Loader:\tInvalid or unsupported .ktx2 file\");\n    }\n    const basisFormat = ktx2File.isUASTC() ? BasisFormat.UASTC_4x4 : BasisFormat.ETC1S;\n    const width = ktx2File.getWidth();\n    const height = ktx2File.getHeight();\n    const layers = ktx2File.getLayers() || 1;\n    const levels = ktx2File.getLevels();\n    const hasAlpha = ktx2File.getHasAlpha();\n    const dfdTransferFn = ktx2File.getDFDTransferFunc();\n    const dfdFlags = ktx2File.getDFDFlags();\n    const { transcoderFormat, engineFormat } = getTranscoderFormat(basisFormat, width, height, hasAlpha);\n    if (!width || !height || !levels) {\n      cleanup();\n      throw new Error(\"THREE.KTX2Loader:\tInvalid texture\");\n    }\n    if (!ktx2File.startTranscoding()) {\n      cleanup();\n      throw new Error(\"THREE.KTX2Loader: .startTranscoding failed\");\n    }\n    const mipmaps = [];\n    for (let mip = 0; mip < levels; mip++) {\n      const layerMips = [];\n      let mipWidth, mipHeight;\n      for (let layer = 0; layer < layers; layer++) {\n        const levelInfo = ktx2File.getImageLevelInfo(mip, layer, 0);\n        mipWidth = levelInfo.origWidth < 4 ? levelInfo.origWidth : levelInfo.width;\n        mipHeight = levelInfo.origHeight < 4 ? levelInfo.origHeight : levelInfo.height;\n        const dst = new Uint8Array(ktx2File.getImageTranscodedSizeInBytes(mip, layer, 0, transcoderFormat));\n        const status = ktx2File.transcodeImage(dst, mip, layer, 0, transcoderFormat, 0, -1, -1);\n        if (!status) {\n          cleanup();\n          throw new Error(\"THREE.KTX2Loader: .transcodeImage failed.\");\n        }\n        layerMips.push(dst);\n      }\n      mipmaps.push({ data: concat(layerMips), width: mipWidth, height: mipHeight });\n    }\n    cleanup();\n    return { width, height, hasAlpha, mipmaps, format: engineFormat, dfdTransferFn, dfdFlags };\n  }\n  const FORMAT_OPTIONS = [\n    {\n      if: \"astcSupported\",\n      basisFormat: [BasisFormat.UASTC_4x4],\n      transcoderFormat: [TranscoderFormat.ASTC_4x4, TranscoderFormat.ASTC_4x4],\n      engineFormat: [EngineFormat.RGBA_ASTC_4x4_Format, EngineFormat.RGBA_ASTC_4x4_Format],\n      priorityETC1S: Infinity,\n      priorityUASTC: 1,\n      needsPowerOfTwo: false\n    },\n    {\n      if: \"bptcSupported\",\n      basisFormat: [BasisFormat.ETC1S, BasisFormat.UASTC_4x4],\n      transcoderFormat: [TranscoderFormat.BC7_M5, TranscoderFormat.BC7_M5],\n      engineFormat: [EngineFormat.RGBA_BPTC_Format, EngineFormat.RGBA_BPTC_Format],\n      priorityETC1S: 3,\n      priorityUASTC: 2,\n      needsPowerOfTwo: false\n    },\n    {\n      if: \"dxtSupported\",\n      basisFormat: [BasisFormat.ETC1S, BasisFormat.UASTC_4x4],\n      transcoderFormat: [TranscoderFormat.BC1, TranscoderFormat.BC3],\n      engineFormat: [EngineFormat.RGB_S3TC_DXT1_Format, EngineFormat.RGBA_S3TC_DXT5_Format],\n      priorityETC1S: 4,\n      priorityUASTC: 5,\n      needsPowerOfTwo: false\n    },\n    {\n      if: \"etc2Supported\",\n      basisFormat: [BasisFormat.ETC1S, BasisFormat.UASTC_4x4],\n      transcoderFormat: [TranscoderFormat.ETC1, TranscoderFormat.ETC2],\n      engineFormat: [EngineFormat.RGB_ETC2_Format, EngineFormat.RGBA_ETC2_EAC_Format],\n      priorityETC1S: 1,\n      priorityUASTC: 3,\n      needsPowerOfTwo: false\n    },\n    {\n      if: \"etc1Supported\",\n      basisFormat: [BasisFormat.ETC1S, BasisFormat.UASTC_4x4],\n      transcoderFormat: [TranscoderFormat.ETC1],\n      engineFormat: [EngineFormat.RGB_ETC1_Format],\n      priorityETC1S: 2,\n      priorityUASTC: 4,\n      needsPowerOfTwo: false\n    },\n    {\n      if: \"pvrtcSupported\",\n      basisFormat: [BasisFormat.ETC1S, BasisFormat.UASTC_4x4],\n      transcoderFormat: [TranscoderFormat.PVRTC1_4_RGB, TranscoderFormat.PVRTC1_4_RGBA],\n      engineFormat: [EngineFormat.RGB_PVRTC_4BPPV1_Format, EngineFormat.RGBA_PVRTC_4BPPV1_Format],\n      priorityETC1S: 5,\n      priorityUASTC: 6,\n      needsPowerOfTwo: true\n    }\n  ];\n  const ETC1S_OPTIONS = FORMAT_OPTIONS.sort(function(a, b) {\n    return a.priorityETC1S - b.priorityETC1S;\n  });\n  const UASTC_OPTIONS = FORMAT_OPTIONS.sort(function(a, b) {\n    return a.priorityUASTC - b.priorityUASTC;\n  });\n  function getTranscoderFormat(basisFormat, width, height, hasAlpha) {\n    let transcoderFormat;\n    let engineFormat;\n    const options = basisFormat === BasisFormat.ETC1S ? ETC1S_OPTIONS : UASTC_OPTIONS;\n    for (let i = 0; i < options.length; i++) {\n      const opt = options[i];\n      if (!config[opt.if])\n        continue;\n      if (!opt.basisFormat.includes(basisFormat))\n        continue;\n      if (hasAlpha && opt.transcoderFormat.length < 2)\n        continue;\n      if (opt.needsPowerOfTwo && !(isPowerOfTwo(width) && isPowerOfTwo(height)))\n        continue;\n      transcoderFormat = opt.transcoderFormat[hasAlpha ? 1 : 0];\n      engineFormat = opt.engineFormat[hasAlpha ? 1 : 0];\n      return { transcoderFormat, engineFormat };\n    }\n    console.warn(\"THREE.KTX2Loader: No suitable compressed texture format found. Decoding to RGBA32.\");\n    transcoderFormat = TranscoderFormat.RGBA32;\n    engineFormat = EngineFormat.RGBAFormat;\n    return { transcoderFormat, engineFormat };\n  }\n  function isPowerOfTwo(value) {\n    if (value <= 2)\n      return true;\n    return (value & value - 1) === 0 && value !== 0;\n  }\n  function concat(arrays) {\n    let totalByteLength = 0;\n    for (let i = 0; i < arrays.length; i++) {\n      const array = arrays[i];\n      totalByteLength += array.byteLength;\n    }\n    const result = new Uint8Array(totalByteLength);\n    let byteOffset = 0;\n    for (let i = 0; i < arrays.length; i++) {\n      const array = arrays[i];\n      result.set(array, byteOffset);\n      byteOffset += array.byteLength;\n    }\n    return result;\n  }\n});\nconst FORMAT_MAP = {\n  [VK_FORMAT_R32G32B32A32_SFLOAT]: RGBAFormat,\n  [VK_FORMAT_R16G16B16A16_SFLOAT]: RGBAFormat,\n  [VK_FORMAT_R8G8B8A8_UNORM]: RGBAFormat,\n  [VK_FORMAT_R8G8B8A8_SRGB]: RGBAFormat,\n  [VK_FORMAT_R32G32_SFLOAT]: RGFormat,\n  [VK_FORMAT_R16G16_SFLOAT]: RGFormat,\n  [VK_FORMAT_R8G8_UNORM]: RGFormat,\n  [VK_FORMAT_R8G8_SRGB]: RGFormat,\n  [VK_FORMAT_R32_SFLOAT]: RedFormat,\n  [VK_FORMAT_R16_SFLOAT]: RedFormat,\n  [VK_FORMAT_R8_SRGB]: RedFormat,\n  [VK_FORMAT_R8_UNORM]: RedFormat\n};\nconst TYPE_MAP = {\n  [VK_FORMAT_R32G32B32A32_SFLOAT]: FloatType,\n  [VK_FORMAT_R16G16B16A16_SFLOAT]: HalfFloatType,\n  [VK_FORMAT_R8G8B8A8_UNORM]: UnsignedByteType,\n  [VK_FORMAT_R8G8B8A8_SRGB]: UnsignedByteType,\n  [VK_FORMAT_R32G32_SFLOAT]: FloatType,\n  [VK_FORMAT_R16G16_SFLOAT]: HalfFloatType,\n  [VK_FORMAT_R8G8_UNORM]: UnsignedByteType,\n  [VK_FORMAT_R8G8_SRGB]: UnsignedByteType,\n  [VK_FORMAT_R32_SFLOAT]: FloatType,\n  [VK_FORMAT_R16_SFLOAT]: HalfFloatType,\n  [VK_FORMAT_R8_SRGB]: UnsignedByteType,\n  [VK_FORMAT_R8_UNORM]: UnsignedByteType\n};\nconst ENCODING_MAP = {\n  [VK_FORMAT_R8G8B8A8_SRGB]: 3001,\n  // sRGBEncoding\n  [VK_FORMAT_R8G8_SRGB]: 3001,\n  // sRGBEncoding\n  [VK_FORMAT_R8_SRGB]: 3001\n  // sRGBEncoding\n};\nasync function createDataTexture(container) {\n  const { vkFormat, pixelWidth, pixelHeight, pixelDepth } = container;\n  if (FORMAT_MAP[vkFormat] === void 0) {\n    throw new Error(\"THREE.KTX2Loader: Unsupported vkFormat.\");\n  }\n  const level = container.levels[0];\n  let levelData;\n  let view;\n  if (container.supercompressionScheme === KHR_SUPERCOMPRESSION_NONE) {\n    levelData = level.levelData;\n  } else if (container.supercompressionScheme === KHR_SUPERCOMPRESSION_ZSTD) {\n    if (!_zstd) {\n      _zstd = new Promise(async (resolve) => {\n        const zstd = new ZSTDDecoder();\n        await zstd.init();\n        resolve(zstd);\n      });\n    }\n    levelData = (await _zstd).decode(level.levelData, level.uncompressedByteLength);\n  } else {\n    throw new Error(\"THREE.KTX2Loader: Unsupported supercompressionScheme.\");\n  }\n  if (TYPE_MAP[vkFormat] === FloatType) {\n    view = new Float32Array(\n      levelData.buffer,\n      levelData.byteOffset,\n      levelData.byteLength / Float32Array.BYTES_PER_ELEMENT\n    );\n  } else if (TYPE_MAP[vkFormat] === HalfFloatType) {\n    view = new Uint16Array(levelData.buffer, levelData.byteOffset, levelData.byteLength / Uint16Array.BYTES_PER_ELEMENT);\n  } else {\n    view = levelData;\n  }\n  const texture = pixelDepth === 0 ? new DataTexture(view, pixelWidth, pixelHeight) : new Data3DTexture(view, pixelWidth, pixelHeight, pixelDepth);\n  texture.type = TYPE_MAP[vkFormat];\n  texture.format = FORMAT_MAP[vkFormat];\n  texture.encoding = ENCODING_MAP[vkFormat] || 3e3;\n  texture.needsUpdate = true;\n  return Promise.resolve(texture);\n}\nexport {\n  KTX2Loader\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}