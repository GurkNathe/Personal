{"ast":null,"code":"var ToneMapShader = {\n  uniforms: {\n    tDiffuse: {\n      value: null\n    },\n    averageLuminance: {\n      value: 1\n    },\n    luminanceMap: {\n      value: null\n    },\n    maxLuminance: {\n      value: 16\n    },\n    minLuminance: {\n      value: 0.01\n    },\n    middleGrey: {\n      value: 0.6\n    }\n  },\n  vertexShader: [\"varying vec2 vUv;\", \"void main() {\", \"\tvUv = uv;\", \"\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\", \"}\"].join(\"\\n\"),\n  fragmentShader: [\"#include <common>\", \"uniform sampler2D tDiffuse;\", \"varying vec2 vUv;\", \"uniform float middleGrey;\", \"uniform float minLuminance;\", \"uniform float maxLuminance;\", \"#ifdef ADAPTED_LUMINANCE\", \"\tuniform sampler2D luminanceMap;\", \"#else\", \"\tuniform float averageLuminance;\", \"#endif\", \"vec3 ToneMap( vec3 vColor ) {\", \"\t#ifdef ADAPTED_LUMINANCE\",\n  // Get the calculated average luminance\n  \"\t\tfloat fLumAvg = texture2D(luminanceMap, vec2(0.5, 0.5)).r;\", \"\t#else\", \"\t\tfloat fLumAvg = averageLuminance;\", \"\t#endif\",\n  // Calculate the luminance of the current pixel\n  \"\tfloat fLumPixel = linearToRelativeLuminance( vColor );\",\n  // Apply the modified operator (Eq. 4)\n  \"\tfloat fLumScaled = (fLumPixel * middleGrey) / max( minLuminance, fLumAvg );\", \"\tfloat fLumCompressed = (fLumScaled * (1.0 + (fLumScaled / (maxLuminance * maxLuminance)))) / (1.0 + fLumScaled);\", \"\treturn fLumCompressed * vColor;\", \"}\", \"void main() {\", \"\tvec4 texel = texture2D( tDiffuse, vUv );\", \"\tgl_FragColor = vec4( ToneMap( texel.xyz ), texel.w );\", \"}\"].join(\"\\n\")\n};\nexport { ToneMapShader };","map":{"version":3,"names":["ToneMapShader","uniforms","tDiffuse","value","averageLuminance","luminanceMap","maxLuminance","minLuminance","middleGrey","vertexShader","join","fragmentShader"],"sources":["/home/krug/Coding/JavaScript/Websites/Personal/personal/node_modules/.pnpm/three-stdlib@2.23.7_three@0.151.3/node_modules/three-stdlib/shaders/ToneMapShader.js"],"sourcesContent":["const ToneMapShader = {\n  uniforms: {\n    tDiffuse: { value: null },\n    averageLuminance: { value: 1 },\n    luminanceMap: { value: null },\n    maxLuminance: { value: 16 },\n    minLuminance: { value: 0.01 },\n    middleGrey: { value: 0.6 }\n  },\n  vertexShader: [\n    \"varying vec2 vUv;\",\n    \"void main() {\",\n    \"\tvUv = uv;\",\n    \"\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\",\n    \"}\"\n  ].join(\"\\n\"),\n  fragmentShader: [\n    \"#include <common>\",\n    \"uniform sampler2D tDiffuse;\",\n    \"varying vec2 vUv;\",\n    \"uniform float middleGrey;\",\n    \"uniform float minLuminance;\",\n    \"uniform float maxLuminance;\",\n    \"#ifdef ADAPTED_LUMINANCE\",\n    \"\tuniform sampler2D luminanceMap;\",\n    \"#else\",\n    \"\tuniform float averageLuminance;\",\n    \"#endif\",\n    \"vec3 ToneMap( vec3 vColor ) {\",\n    \"\t#ifdef ADAPTED_LUMINANCE\",\n    // Get the calculated average luminance\n    \"\t\tfloat fLumAvg = texture2D(luminanceMap, vec2(0.5, 0.5)).r;\",\n    \"\t#else\",\n    \"\t\tfloat fLumAvg = averageLuminance;\",\n    \"\t#endif\",\n    // Calculate the luminance of the current pixel\n    \"\tfloat fLumPixel = linearToRelativeLuminance( vColor );\",\n    // Apply the modified operator (Eq. 4)\n    \"\tfloat fLumScaled = (fLumPixel * middleGrey) / max( minLuminance, fLumAvg );\",\n    \"\tfloat fLumCompressed = (fLumScaled * (1.0 + (fLumScaled / (maxLuminance * maxLuminance)))) / (1.0 + fLumScaled);\",\n    \"\treturn fLumCompressed * vColor;\",\n    \"}\",\n    \"void main() {\",\n    \"\tvec4 texel = texture2D( tDiffuse, vUv );\",\n    \"\tgl_FragColor = vec4( ToneMap( texel.xyz ), texel.w );\",\n    \"}\"\n  ].join(\"\\n\")\n};\nexport {\n  ToneMapShader\n};\n"],"mappings":"AAAA,IAAMA,aAAa,GAAG;EACpBC,QAAQ,EAAE;IACRC,QAAQ,EAAE;MAAEC,KAAK,EAAE;IAAK,CAAC;IACzBC,gBAAgB,EAAE;MAAED,KAAK,EAAE;IAAE,CAAC;IAC9BE,YAAY,EAAE;MAAEF,KAAK,EAAE;IAAK,CAAC;IAC7BG,YAAY,EAAE;MAAEH,KAAK,EAAE;IAAG,CAAC;IAC3BI,YAAY,EAAE;MAAEJ,KAAK,EAAE;IAAK,CAAC;IAC7BK,UAAU,EAAE;MAAEL,KAAK,EAAE;IAAI;EAC3B,CAAC;EACDM,YAAY,EAAE,CACZ,mBAAmB,EACnB,eAAe,EACf,YAAY,EACZ,4EAA4E,EAC5E,GAAG,CACJ,CAACC,IAAI,CAAC,IAAI,CAAC;EACZC,cAAc,EAAE,CACd,mBAAmB,EACnB,6BAA6B,EAC7B,mBAAmB,EACnB,2BAA2B,EAC3B,6BAA6B,EAC7B,6BAA6B,EAC7B,0BAA0B,EAC1B,kCAAkC,EAClC,OAAO,EACP,kCAAkC,EAClC,QAAQ,EACR,+BAA+B,EAC/B,2BAA2B;EAC3B;EACA,8DAA8D,EAC9D,QAAQ,EACR,qCAAqC,EACrC,SAAS;EACT;EACA,yDAAyD;EACzD;EACA,8EAA8E,EAC9E,mHAAmH,EACnH,kCAAkC,EAClC,GAAG,EACH,eAAe,EACf,2CAA2C,EAC3C,wDAAwD,EACxD,GAAG,CACJ,CAACD,IAAI,CAAC,IAAI;AACb,CAAC;AACD,SACEV,aAAa"},"metadata":{},"sourceType":"module","externalDependencies":[]}