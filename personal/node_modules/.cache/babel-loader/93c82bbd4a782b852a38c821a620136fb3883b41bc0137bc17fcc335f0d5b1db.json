{"ast":null,"code":"import { Vector4 } from \"three\";\nimport { calcSurfacePoint } from \"./NURBSUtils.js\";\nclass NURBSSurface {\n  constructor(degree1, degree2, knots1, knots2, controlPoints) {\n    this.degree1 = degree1;\n    this.degree2 = degree2;\n    this.knots1 = knots1;\n    this.knots2 = knots2;\n    this.controlPoints = [];\n    const len1 = knots1.length - degree1 - 1;\n    const len2 = knots2.length - degree2 - 1;\n    for (let i = 0; i < len1; ++i) {\n      this.controlPoints[i] = [];\n      for (let j = 0; j < len2; ++j) {\n        const point = controlPoints[i][j];\n        this.controlPoints[i][j] = new Vector4(point.x, point.y, point.z, point.w);\n      }\n    }\n  }\n  getPoint(t1, t2, target) {\n    const u = this.knots1[0] + t1 * (this.knots1[this.knots1.length - 1] - this.knots1[0]);\n    const v = this.knots2[0] + t2 * (this.knots2[this.knots2.length - 1] - this.knots2[0]);\n    calcSurfacePoint(this.degree1, this.degree2, this.knots1, this.knots2, this.controlPoints, u, v, target);\n  }\n}\nexport { NURBSSurface };","map":{"version":3,"names":["Vector4","calcSurfacePoint","NURBSSurface","constructor","degree1","degree2","knots1","knots2","controlPoints","len1","length","len2","i","j","point","x","y","z","w","getPoint","t1","t2","target","u","v"],"sources":["/home/krug/Coding/JavaScript/Websites/Personal/personal/node_modules/.pnpm/three-stdlib@2.23.7_three@0.151.3/node_modules/three-stdlib/curves/NURBSSurface.js"],"sourcesContent":["import { Vector4 } from \"three\";\nimport { calcSurfacePoint } from \"./NURBSUtils.js\";\nclass NURBSSurface {\n  constructor(degree1, degree2, knots1, knots2, controlPoints) {\n    this.degree1 = degree1;\n    this.degree2 = degree2;\n    this.knots1 = knots1;\n    this.knots2 = knots2;\n    this.controlPoints = [];\n    const len1 = knots1.length - degree1 - 1;\n    const len2 = knots2.length - degree2 - 1;\n    for (let i = 0; i < len1; ++i) {\n      this.controlPoints[i] = [];\n      for (let j = 0; j < len2; ++j) {\n        const point = controlPoints[i][j];\n        this.controlPoints[i][j] = new Vector4(point.x, point.y, point.z, point.w);\n      }\n    }\n  }\n  getPoint(t1, t2, target) {\n    const u = this.knots1[0] + t1 * (this.knots1[this.knots1.length - 1] - this.knots1[0]);\n    const v = this.knots2[0] + t2 * (this.knots2[this.knots2.length - 1] - this.knots2[0]);\n    calcSurfacePoint(this.degree1, this.degree2, this.knots1, this.knots2, this.controlPoints, u, v, target);\n  }\n}\nexport {\n  NURBSSurface\n};\n"],"mappings":"AAAA,SAASA,OAAO,QAAQ,OAAO;AAC/B,SAASC,gBAAgB,QAAQ,iBAAiB;AAClD,MAAMC,YAAY,CAAC;EACjBC,WAAWA,CAACC,OAAO,EAAEC,OAAO,EAAEC,MAAM,EAAEC,MAAM,EAAEC,aAAa,EAAE;IAC3D,IAAI,CAACJ,OAAO,GAAGA,OAAO;IACtB,IAAI,CAACC,OAAO,GAAGA,OAAO;IACtB,IAAI,CAACC,MAAM,GAAGA,MAAM;IACpB,IAAI,CAACC,MAAM,GAAGA,MAAM;IACpB,IAAI,CAACC,aAAa,GAAG,EAAE;IACvB,MAAMC,IAAI,GAAGH,MAAM,CAACI,MAAM,GAAGN,OAAO,GAAG,CAAC;IACxC,MAAMO,IAAI,GAAGJ,MAAM,CAACG,MAAM,GAAGL,OAAO,GAAG,CAAC;IACxC,KAAK,IAAIO,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGH,IAAI,EAAE,EAAEG,CAAC,EAAE;MAC7B,IAAI,CAACJ,aAAa,CAACI,CAAC,CAAC,GAAG,EAAE;MAC1B,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGF,IAAI,EAAE,EAAEE,CAAC,EAAE;QAC7B,MAAMC,KAAK,GAAGN,aAAa,CAACI,CAAC,CAAC,CAACC,CAAC,CAAC;QACjC,IAAI,CAACL,aAAa,CAACI,CAAC,CAAC,CAACC,CAAC,CAAC,GAAG,IAAIb,OAAO,CAACc,KAAK,CAACC,CAAC,EAAED,KAAK,CAACE,CAAC,EAAEF,KAAK,CAACG,CAAC,EAAEH,KAAK,CAACI,CAAC,CAAC;MAC5E;IACF;EACF;EACAC,QAAQA,CAACC,EAAE,EAAEC,EAAE,EAAEC,MAAM,EAAE;IACvB,MAAMC,CAAC,GAAG,IAAI,CAACjB,MAAM,CAAC,CAAC,CAAC,GAAGc,EAAE,IAAI,IAAI,CAACd,MAAM,CAAC,IAAI,CAACA,MAAM,CAACI,MAAM,GAAG,CAAC,CAAC,GAAG,IAAI,CAACJ,MAAM,CAAC,CAAC,CAAC,CAAC;IACtF,MAAMkB,CAAC,GAAG,IAAI,CAACjB,MAAM,CAAC,CAAC,CAAC,GAAGc,EAAE,IAAI,IAAI,CAACd,MAAM,CAAC,IAAI,CAACA,MAAM,CAACG,MAAM,GAAG,CAAC,CAAC,GAAG,IAAI,CAACH,MAAM,CAAC,CAAC,CAAC,CAAC;IACtFN,gBAAgB,CAAC,IAAI,CAACG,OAAO,EAAE,IAAI,CAACC,OAAO,EAAE,IAAI,CAACC,MAAM,EAAE,IAAI,CAACC,MAAM,EAAE,IAAI,CAACC,aAAa,EAAEe,CAAC,EAAEC,CAAC,EAAEF,MAAM,CAAC;EAC1G;AACF;AACA,SACEpB,YAAY"},"metadata":{},"sourceType":"module","externalDependencies":[]}