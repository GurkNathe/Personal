{"ast":null,"code":"import { ShaderChunk, UniformsUtils, ShaderLib, Color } from \"three\";\nvar _SubsurfaceScatteringShader;\nfunction get() {\n  if (_SubsurfaceScatteringShader) return _SubsurfaceScatteringShader;\n  var meshphong_frag_head = ShaderChunk[\"meshphong_frag\"].slice(0, ShaderChunk[\"meshphong_frag\"].indexOf(\"void main() {\"));\n  var meshphong_frag_body = ShaderChunk[\"meshphong_frag\"].slice(ShaderChunk[\"meshphong_frag\"].indexOf(\"void main() {\"));\n  _SubsurfaceScatteringShader = {\n    uniforms: /* @__PURE__ */UniformsUtils.merge([ShaderLib[\"phong\"].uniforms, {\n      thicknessMap: {\n        value: null\n      },\n      thicknessColor: {\n        value: /* @__PURE__ */new Color(16777215)\n      },\n      thicknessDistortion: {\n        value: 0.1\n      },\n      thicknessAmbient: {\n        value: 0\n      },\n      thicknessAttenuation: {\n        value: 0.1\n      },\n      thicknessPower: {\n        value: 2\n      },\n      thicknessScale: {\n        value: 10\n      }\n    }]),\n    vertexShader: /* glsl */\"\\n    #define USE_UV\\n    \".concat(ShaderChunk[\"meshphong_vert\"], \"\\n  \"),\n    fragmentShader: /* glsl */\"\\n    #define USE_UV',\\n    #define SUBSURFACE',\\n\\n    \".concat(meshphong_frag_head, \"\\n\\n    uniform sampler2D thicknessMap;\\n    uniform float thicknessPower;\\n    uniform float thicknessScale;\\n    uniform float thicknessDistortion;\\n    uniform float thicknessAmbient;\\n    uniform float thicknessAttenuation;\\n    uniform vec3 thicknessColor;\\n\\n    void RE_Direct_Scattering(const in IncidentLight directLight, const in vec2 uv, const in GeometricContext geometry, inout ReflectedLight reflectedLight) {\\n    \\tvec3 thickness = thicknessColor * texture2D(thicknessMap, uv).r;\\n    \\tvec3 scatteringHalf = normalize(directLight.direction + (geometry.normal * thicknessDistortion));\\n    \\tfloat scatteringDot = pow(saturate(dot(geometry.viewDir, -scatteringHalf)), thicknessPower) * thicknessScale;\\n    \\tvec3 scatteringIllu = (scatteringDot + thicknessAmbient) * thickness;\\n    \\treflectedLight.directDiffuse += scatteringIllu * thicknessAttenuation * directLight.color;\\n    }\\n\\n    \").concat(meshphong_frag_body.replace(\"#include <lights_fragment_begin>\", ShaderChunk[\"lights_fragment_begin\"].replace(/RE_Direct\\( directLight, geometry, material, reflectedLight \\);/g, /* glsl */\"\\n        RE_Direct( directLight, geometry, material, reflectedLight );\\n\\n        #if defined( SUBSURFACE ) && defined( USE_UV )\\n          RE_Direct_Scattering(directLight, vUv, geometry, reflectedLight);\\n        #endif\\n      \")), \"\\n  \")\n  };\n  return _SubsurfaceScatteringShader;\n}\nvar SubsurfaceScatteringShader = {\n  get uniforms() {\n    return get().uniforms;\n  },\n  set uniforms(value) {\n    get().uniforms = value;\n  },\n  get vertexShader() {\n    return get().vertexShader;\n  },\n  set vertexShader(value) {\n    get().vertexShader = value;\n  },\n  get fragmentShader() {\n    return get().vertexShader;\n  },\n  set fragmentShader(value) {\n    get().vertexShader = value;\n  }\n};\nexport { SubsurfaceScatteringShader };","map":{"version":3,"names":["ShaderChunk","UniformsUtils","ShaderLib","Color","_SubsurfaceScatteringShader","get","meshphong_frag_head","slice","indexOf","meshphong_frag_body","uniforms","merge","thicknessMap","value","thicknessColor","thicknessDistortion","thicknessAmbient","thicknessAttenuation","thicknessPower","thicknessScale","vertexShader","concat","fragmentShader","replace","SubsurfaceScatteringShader"],"sources":["/home/krug/Coding/JavaScript/Websites/Personal/personal/node_modules/.pnpm/three-stdlib@2.23.7_three@0.151.3/node_modules/three-stdlib/shaders/SubsurfaceScatteringShader.js"],"sourcesContent":["import { ShaderChunk, UniformsUtils, ShaderLib, Color } from \"three\";\nlet _SubsurfaceScatteringShader;\nfunction get() {\n  if (_SubsurfaceScatteringShader)\n    return _SubsurfaceScatteringShader;\n  const meshphong_frag_head = ShaderChunk[\"meshphong_frag\"].slice(\n    0,\n    ShaderChunk[\"meshphong_frag\"].indexOf(\"void main() {\")\n  );\n  const meshphong_frag_body = ShaderChunk[\"meshphong_frag\"].slice(\n    ShaderChunk[\"meshphong_frag\"].indexOf(\"void main() {\")\n  );\n  _SubsurfaceScatteringShader = {\n    uniforms: /* @__PURE__ */ UniformsUtils.merge([\n      ShaderLib[\"phong\"].uniforms,\n      {\n        thicknessMap: { value: null },\n        thicknessColor: { value: /* @__PURE__ */ new Color(16777215) },\n        thicknessDistortion: { value: 0.1 },\n        thicknessAmbient: { value: 0 },\n        thicknessAttenuation: { value: 0.1 },\n        thicknessPower: { value: 2 },\n        thicknessScale: { value: 10 }\n      }\n    ]),\n    vertexShader: (\n      /* glsl */\n      `\n    #define USE_UV\n    ${ShaderChunk[\"meshphong_vert\"]}\n  `\n    ),\n    fragmentShader: (\n      /* glsl */\n      `\n    #define USE_UV',\n    #define SUBSURFACE',\n\n    ${meshphong_frag_head}\n\n    uniform sampler2D thicknessMap;\n    uniform float thicknessPower;\n    uniform float thicknessScale;\n    uniform float thicknessDistortion;\n    uniform float thicknessAmbient;\n    uniform float thicknessAttenuation;\n    uniform vec3 thicknessColor;\n\n    void RE_Direct_Scattering(const in IncidentLight directLight, const in vec2 uv, const in GeometricContext geometry, inout ReflectedLight reflectedLight) {\n    \tvec3 thickness = thicknessColor * texture2D(thicknessMap, uv).r;\n    \tvec3 scatteringHalf = normalize(directLight.direction + (geometry.normal * thicknessDistortion));\n    \tfloat scatteringDot = pow(saturate(dot(geometry.viewDir, -scatteringHalf)), thicknessPower) * thicknessScale;\n    \tvec3 scatteringIllu = (scatteringDot + thicknessAmbient) * thickness;\n    \treflectedLight.directDiffuse += scatteringIllu * thicknessAttenuation * directLight.color;\n    }\n\n    ${meshphong_frag_body.replace(\n        \"#include <lights_fragment_begin>\",\n        ShaderChunk[\"lights_fragment_begin\"].replace(\n          /RE_Direct\\( directLight, geometry, material, reflectedLight \\);/g,\n          /* glsl */\n          `\n        RE_Direct( directLight, geometry, material, reflectedLight );\n\n        #if defined( SUBSURFACE ) && defined( USE_UV )\n          RE_Direct_Scattering(directLight, vUv, geometry, reflectedLight);\n        #endif\n      `\n        )\n      )}\n  `\n    )\n  };\n  return _SubsurfaceScatteringShader;\n}\nconst SubsurfaceScatteringShader = {\n  get uniforms() {\n    return get().uniforms;\n  },\n  set uniforms(value) {\n    get().uniforms = value;\n  },\n  get vertexShader() {\n    return get().vertexShader;\n  },\n  set vertexShader(value) {\n    get().vertexShader = value;\n  },\n  get fragmentShader() {\n    return get().vertexShader;\n  },\n  set fragmentShader(value) {\n    get().vertexShader = value;\n  }\n};\nexport {\n  SubsurfaceScatteringShader\n};\n"],"mappings":"AAAA,SAASA,WAAW,EAAEC,aAAa,EAAEC,SAAS,EAAEC,KAAK,QAAQ,OAAO;AACpE,IAAIC,2BAA2B;AAC/B,SAASC,GAAGA,CAAA,EAAG;EACb,IAAID,2BAA2B,EAC7B,OAAOA,2BAA2B;EACpC,IAAME,mBAAmB,GAAGN,WAAW,CAAC,gBAAgB,CAAC,CAACO,KAAK,CAC7D,CAAC,EACDP,WAAW,CAAC,gBAAgB,CAAC,CAACQ,OAAO,CAAC,eAAe,CACvD,CAAC;EACD,IAAMC,mBAAmB,GAAGT,WAAW,CAAC,gBAAgB,CAAC,CAACO,KAAK,CAC7DP,WAAW,CAAC,gBAAgB,CAAC,CAACQ,OAAO,CAAC,eAAe,CACvD,CAAC;EACDJ,2BAA2B,GAAG;IAC5BM,QAAQ,EAAE,eAAgBT,aAAa,CAACU,KAAK,CAAC,CAC5CT,SAAS,CAAC,OAAO,CAAC,CAACQ,QAAQ,EAC3B;MACEE,YAAY,EAAE;QAAEC,KAAK,EAAE;MAAK,CAAC;MAC7BC,cAAc,EAAE;QAAED,KAAK,EAAE,eAAgB,IAAIV,KAAK,CAAC,QAAQ;MAAE,CAAC;MAC9DY,mBAAmB,EAAE;QAAEF,KAAK,EAAE;MAAI,CAAC;MACnCG,gBAAgB,EAAE;QAAEH,KAAK,EAAE;MAAE,CAAC;MAC9BI,oBAAoB,EAAE;QAAEJ,KAAK,EAAE;MAAI,CAAC;MACpCK,cAAc,EAAE;QAAEL,KAAK,EAAE;MAAE,CAAC;MAC5BM,cAAc,EAAE;QAAEN,KAAK,EAAE;MAAG;IAC9B,CAAC,CACF,CAAC;IACFO,YAAY,EACV,uCAAAC,MAAA,CAGArB,WAAW,CAAC,gBAAgB,CAAC,SAE9B;IACDsB,cAAc,EACZ,qEAAAD,MAAA,CAKAf,mBAAmB,i5BAAAe,MAAA,CAkBnBZ,mBAAmB,CAACc,OAAO,CACzB,kCAAkC,EAClCvB,WAAW,CAAC,uBAAuB,CAAC,CAACuB,OAAO,CAC1C,kEAAkE,EAClE,kPAQF,CACF,CAAC;EAGL,CAAC;EACD,OAAOnB,2BAA2B;AACpC;AACA,IAAMoB,0BAA0B,GAAG;EACjC,IAAId,QAAQA,CAAA,EAAG;IACb,OAAOL,GAAG,CAAC,CAAC,CAACK,QAAQ;EACvB,CAAC;EACD,IAAIA,QAAQA,CAACG,KAAK,EAAE;IAClBR,GAAG,CAAC,CAAC,CAACK,QAAQ,GAAGG,KAAK;EACxB,CAAC;EACD,IAAIO,YAAYA,CAAA,EAAG;IACjB,OAAOf,GAAG,CAAC,CAAC,CAACe,YAAY;EAC3B,CAAC;EACD,IAAIA,YAAYA,CAACP,KAAK,EAAE;IACtBR,GAAG,CAAC,CAAC,CAACe,YAAY,GAAGP,KAAK;EAC5B,CAAC;EACD,IAAIS,cAAcA,CAAA,EAAG;IACnB,OAAOjB,GAAG,CAAC,CAAC,CAACe,YAAY;EAC3B,CAAC;EACD,IAAIE,cAAcA,CAACT,KAAK,EAAE;IACxBR,GAAG,CAAC,CAAC,CAACe,YAAY,GAAGP,KAAK;EAC5B;AACF,CAAC;AACD,SACEW,0BAA0B"},"metadata":{},"sourceType":"module","externalDependencies":[]}