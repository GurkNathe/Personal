{"ast":null,"code":"import _createClass from \"/home/krug/Coding/JavaScript/Websites/Personal/personal/node_modules/.pnpm/@babel+runtime@7.22.3/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _classCallCheck from \"/home/krug/Coding/JavaScript/Websites/Personal/personal/node_modules/.pnpm/@babel+runtime@7.22.3/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _inherits from \"/home/krug/Coding/JavaScript/Websites/Personal/personal/node_modules/.pnpm/@babel+runtime@7.22.3/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/home/krug/Coding/JavaScript/Websites/Personal/personal/node_modules/.pnpm/@babel+runtime@7.22.3/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { Vector3, Curve } from \"three\";\nimport { ParametricGeometry } from \"./ParametricGeometry.js\";\nvar TubeGeometry = /*#__PURE__*/function (_ParametricGeometry) {\n  _inherits(TubeGeometry, _ParametricGeometry);\n  var _super = _createSuper(TubeGeometry);\n  function TubeGeometry(path) {\n    var _this;\n    var segments = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 64;\n    var radius = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;\n    var segmentsRadius = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 8;\n    var closed = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;\n    _classCallCheck(this, TubeGeometry);\n    var numpoints = segments + 1;\n    var frames = path.computeFrenetFrames(segments, closed),\n      tangents = frames.tangents,\n      normals = frames.normals,\n      binormals = frames.binormals;\n    var position = new Vector3();\n    function ParametricTube(u, v, target) {\n      v *= 2 * Math.PI;\n      var i = Math.floor(u * (numpoints - 1));\n      path.getPointAt(u, position);\n      var normal = normals[i];\n      var binormal = binormals[i];\n      var cx = -radius * Math.cos(v);\n      var cy = radius * Math.sin(v);\n      position.x += cx * normal.x + cy * binormal.x;\n      position.y += cx * normal.y + cy * binormal.y;\n      position.z += cx * normal.z + cy * binormal.z;\n      target.copy(position);\n    }\n    _this = _super.call(this, ParametricTube, segments, segmentsRadius);\n    _this.tangents = tangents;\n    _this.normals = normals;\n    _this.binormals = binormals;\n    _this.path = path;\n    _this.segments = segments;\n    _this.radius = radius;\n    _this.segmentsRadius = segmentsRadius;\n    _this.closed = closed;\n    return _this;\n  }\n  return _createClass(TubeGeometry);\n}(ParametricGeometry);\nvar ParametricGeometries = {\n  klein: function klein(v, u, target) {\n    u *= Math.PI;\n    v *= 2 * Math.PI;\n    u = u * 2;\n    var x, z;\n    if (u < Math.PI) {\n      x = 3 * Math.cos(u) * (1 + Math.sin(u)) + 2 * (1 - Math.cos(u) / 2) * Math.cos(u) * Math.cos(v);\n      z = -8 * Math.sin(u) - 2 * (1 - Math.cos(u) / 2) * Math.sin(u) * Math.cos(v);\n    } else {\n      x = 3 * Math.cos(u) * (1 + Math.sin(u)) + 2 * (1 - Math.cos(u) / 2) * Math.cos(v + Math.PI);\n      z = -8 * Math.sin(u);\n    }\n    var y = -2 * (1 - Math.cos(u) / 2) * Math.sin(v);\n    target.set(x, y, z);\n  },\n  plane: function plane(width, height) {\n    return function (u, v, target) {\n      var x = u * width;\n      var y = 0;\n      var z = v * height;\n      target.set(x, y, z);\n    };\n  },\n  mobius: function mobius(u, t, target) {\n    u = u - 0.5;\n    var v = 2 * Math.PI * t;\n    var a = 2;\n    var x = Math.cos(v) * (a + u * Math.cos(v / 2));\n    var y = Math.sin(v) * (a + u * Math.cos(v / 2));\n    var z = u * Math.sin(v / 2);\n    target.set(x, y, z);\n  },\n  mobius3d: function mobius3d(u, t, target) {\n    u *= Math.PI;\n    t *= 2 * Math.PI;\n    u = u * 2;\n    var phi = u / 2;\n    var major = 2.25,\n      a = 0.125,\n      b = 0.65;\n    var x = a * Math.cos(t) * Math.cos(phi) - b * Math.sin(t) * Math.sin(phi);\n    var z = a * Math.cos(t) * Math.sin(phi) + b * Math.sin(t) * Math.cos(phi);\n    var y = (major + x) * Math.sin(u);\n    x = (major + x) * Math.cos(u);\n    target.set(x, y, z);\n  },\n  TubeGeometry: TubeGeometry,\n  TorusKnotGeometry: /*#__PURE__*/function (_TubeGeometry) {\n    _inherits(TorusKnotGeometry, _TubeGeometry);\n    var _super2 = _createSuper(TorusKnotGeometry);\n    function TorusKnotGeometry() {\n      var _this2;\n      var radius = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 200;\n      var tube = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 40;\n      var segmentsT = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 64;\n      var segmentsR = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 8;\n      var p = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 2;\n      var q = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : 3;\n      _classCallCheck(this, TorusKnotGeometry);\n      var TorusKnotCurve = /*#__PURE__*/function (_Curve) {\n        _inherits(TorusKnotCurve, _Curve);\n        var _super3 = _createSuper(TorusKnotCurve);\n        function TorusKnotCurve() {\n          _classCallCheck(this, TorusKnotCurve);\n          return _super3.apply(this, arguments);\n        }\n        _createClass(TorusKnotCurve, [{\n          key: \"getPoint\",\n          value: function getPoint(t) {\n            var optionalTarget = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : new Vector3();\n            var point = optionalTarget;\n            t *= Math.PI * 2;\n            var r = 0.5;\n            var x = (1 + r * Math.cos(q * t)) * Math.cos(p * t);\n            var y = (1 + r * Math.cos(q * t)) * Math.sin(p * t);\n            var z = r * Math.sin(q * t);\n            return point.set(x, y, z).multiplyScalar(radius);\n          }\n        }]);\n        return TorusKnotCurve;\n      }(Curve);\n      var segments = segmentsT;\n      var radiusSegments = segmentsR;\n      var extrudePath = new TorusKnotCurve();\n      _this2 = _super2.call(this, extrudePath, segments, tube, radiusSegments, true, false);\n      _this2.radius = radius;\n      _this2.tube = tube;\n      _this2.segmentsT = segmentsT;\n      _this2.segmentsR = segmentsR;\n      _this2.p = p;\n      _this2.q = q;\n      return _this2;\n    }\n    return _createClass(TorusKnotGeometry);\n  }(TubeGeometry),\n  SphereGeometry: /*#__PURE__*/function (_ParametricGeometry2) {\n    _inherits(SphereGeometry, _ParametricGeometry2);\n    var _super4 = _createSuper(SphereGeometry);\n    function SphereGeometry(size, u, v) {\n      _classCallCheck(this, SphereGeometry);\n      function sphere(u2, v2, target) {\n        u2 *= Math.PI;\n        v2 *= 2 * Math.PI;\n        var x = size * Math.sin(u2) * Math.cos(v2);\n        var y = size * Math.sin(u2) * Math.sin(v2);\n        var z = size * Math.cos(u2);\n        target.set(x, y, z);\n      }\n      return _super4.call(this, sphere, u, v);\n    }\n    return _createClass(SphereGeometry);\n  }(ParametricGeometry),\n  PlaneGeometry: /*#__PURE__*/function (_ParametricGeometry3) {\n    _inherits(PlaneGeometry, _ParametricGeometry3);\n    var _super5 = _createSuper(PlaneGeometry);\n    function PlaneGeometry(width, depth, segmentsWidth, segmentsDepth) {\n      _classCallCheck(this, PlaneGeometry);\n      function plane(u, v, target) {\n        var x = u * width;\n        var y = 0;\n        var z = v * depth;\n        target.set(x, y, z);\n      }\n      return _super5.call(this, plane, segmentsWidth, segmentsDepth);\n    }\n    return _createClass(PlaneGeometry);\n  }(ParametricGeometry)\n};\nexport { ParametricGeometries };","map":{"version":3,"names":["Vector3","Curve","ParametricGeometry","TubeGeometry","_ParametricGeometry","_inherits","_super","_createSuper","path","_this","segments","arguments","length","undefined","radius","segmentsRadius","closed","_classCallCheck","numpoints","frames","computeFrenetFrames","tangents","normals","binormals","position","ParametricTube","u","v","target","Math","PI","i","floor","getPointAt","normal","binormal","cx","cos","cy","sin","x","y","z","copy","call","_createClass","ParametricGeometries","klein","set","plane","width","height","mobius","t","a","mobius3d","phi","major","b","TorusKnotGeometry","_TubeGeometry","_super2","_this2","tube","segmentsT","segmentsR","p","q","TorusKnotCurve","_Curve","_super3","apply","key","value","getPoint","optionalTarget","point","r","multiplyScalar","radiusSegments","extrudePath","SphereGeometry","_ParametricGeometry2","_super4","size","sphere","u2","v2","PlaneGeometry","_ParametricGeometry3","_super5","depth","segmentsWidth","segmentsDepth"],"sources":["/home/krug/Coding/JavaScript/Websites/Personal/personal/node_modules/.pnpm/three-stdlib@2.23.7_three@0.151.3/node_modules/three-stdlib/geometries/ParametricGeometries.js"],"sourcesContent":["import { Vector3, Curve } from \"three\";\nimport { ParametricGeometry } from \"./ParametricGeometry.js\";\nclass TubeGeometry extends ParametricGeometry {\n  constructor(path, segments = 64, radius = 1, segmentsRadius = 8, closed = false) {\n    const numpoints = segments + 1;\n    const frames = path.computeFrenetFrames(segments, closed), tangents = frames.tangents, normals = frames.normals, binormals = frames.binormals;\n    const position = new Vector3();\n    function ParametricTube(u, v, target) {\n      v *= 2 * Math.PI;\n      const i = Math.floor(u * (numpoints - 1));\n      path.getPointAt(u, position);\n      const normal = normals[i];\n      const binormal = binormals[i];\n      const cx = -radius * Math.cos(v);\n      const cy = radius * Math.sin(v);\n      position.x += cx * normal.x + cy * binormal.x;\n      position.y += cx * normal.y + cy * binormal.y;\n      position.z += cx * normal.z + cy * binormal.z;\n      target.copy(position);\n    }\n    super(ParametricTube, segments, segmentsRadius);\n    this.tangents = tangents;\n    this.normals = normals;\n    this.binormals = binormals;\n    this.path = path;\n    this.segments = segments;\n    this.radius = radius;\n    this.segmentsRadius = segmentsRadius;\n    this.closed = closed;\n  }\n}\nconst ParametricGeometries = {\n  klein: function(v, u, target) {\n    u *= Math.PI;\n    v *= 2 * Math.PI;\n    u = u * 2;\n    let x, z;\n    if (u < Math.PI) {\n      x = 3 * Math.cos(u) * (1 + Math.sin(u)) + 2 * (1 - Math.cos(u) / 2) * Math.cos(u) * Math.cos(v);\n      z = -8 * Math.sin(u) - 2 * (1 - Math.cos(u) / 2) * Math.sin(u) * Math.cos(v);\n    } else {\n      x = 3 * Math.cos(u) * (1 + Math.sin(u)) + 2 * (1 - Math.cos(u) / 2) * Math.cos(v + Math.PI);\n      z = -8 * Math.sin(u);\n    }\n    const y = -2 * (1 - Math.cos(u) / 2) * Math.sin(v);\n    target.set(x, y, z);\n  },\n  plane: function(width, height) {\n    return function(u, v, target) {\n      const x = u * width;\n      const y = 0;\n      const z = v * height;\n      target.set(x, y, z);\n    };\n  },\n  mobius: function(u, t, target) {\n    u = u - 0.5;\n    const v = 2 * Math.PI * t;\n    const a = 2;\n    const x = Math.cos(v) * (a + u * Math.cos(v / 2));\n    const y = Math.sin(v) * (a + u * Math.cos(v / 2));\n    const z = u * Math.sin(v / 2);\n    target.set(x, y, z);\n  },\n  mobius3d: function(u, t, target) {\n    u *= Math.PI;\n    t *= 2 * Math.PI;\n    u = u * 2;\n    const phi = u / 2;\n    const major = 2.25, a = 0.125, b = 0.65;\n    let x = a * Math.cos(t) * Math.cos(phi) - b * Math.sin(t) * Math.sin(phi);\n    const z = a * Math.cos(t) * Math.sin(phi) + b * Math.sin(t) * Math.cos(phi);\n    const y = (major + x) * Math.sin(u);\n    x = (major + x) * Math.cos(u);\n    target.set(x, y, z);\n  },\n  TubeGeometry,\n  TorusKnotGeometry: class TorusKnotGeometry extends TubeGeometry {\n    constructor(radius = 200, tube = 40, segmentsT = 64, segmentsR = 8, p = 2, q = 3) {\n      class TorusKnotCurve extends Curve {\n        getPoint(t, optionalTarget = new Vector3()) {\n          const point = optionalTarget;\n          t *= Math.PI * 2;\n          const r = 0.5;\n          const x = (1 + r * Math.cos(q * t)) * Math.cos(p * t);\n          const y = (1 + r * Math.cos(q * t)) * Math.sin(p * t);\n          const z = r * Math.sin(q * t);\n          return point.set(x, y, z).multiplyScalar(radius);\n        }\n      }\n      const segments = segmentsT;\n      const radiusSegments = segmentsR;\n      const extrudePath = new TorusKnotCurve();\n      super(extrudePath, segments, tube, radiusSegments, true, false);\n      this.radius = radius;\n      this.tube = tube;\n      this.segmentsT = segmentsT;\n      this.segmentsR = segmentsR;\n      this.p = p;\n      this.q = q;\n    }\n  },\n  SphereGeometry: class SphereGeometry extends ParametricGeometry {\n    constructor(size, u, v) {\n      function sphere(u2, v2, target) {\n        u2 *= Math.PI;\n        v2 *= 2 * Math.PI;\n        const x = size * Math.sin(u2) * Math.cos(v2);\n        const y = size * Math.sin(u2) * Math.sin(v2);\n        const z = size * Math.cos(u2);\n        target.set(x, y, z);\n      }\n      super(sphere, u, v);\n    }\n  },\n  PlaneGeometry: class PlaneGeometry extends ParametricGeometry {\n    constructor(width, depth, segmentsWidth, segmentsDepth) {\n      function plane(u, v, target) {\n        const x = u * width;\n        const y = 0;\n        const z = v * depth;\n        target.set(x, y, z);\n      }\n      super(plane, segmentsWidth, segmentsDepth);\n    }\n  }\n};\nexport {\n  ParametricGeometries\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}