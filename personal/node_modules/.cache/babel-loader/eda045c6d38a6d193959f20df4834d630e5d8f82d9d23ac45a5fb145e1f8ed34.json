{"ast":null,"code":"import _createClass from \"/home/krug/Coding/JavaScript/Websites/Personal/personal/node_modules/.pnpm/@babel+runtime@7.22.3/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _classCallCheck from \"/home/krug/Coding/JavaScript/Websites/Personal/personal/node_modules/.pnpm/@babel+runtime@7.22.3/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport { OrthographicCamera, Scene, StereoCamera, LinearFilter, NearestFilter, RGBAFormat, WebGLRenderTarget, ShaderMaterial, Mesh, PlaneGeometry } from \"three\";\nvar ParallaxBarrierEffect = /*#__PURE__*/_createClass(function ParallaxBarrierEffect(renderer) {\n  _classCallCheck(this, ParallaxBarrierEffect);\n  var _camera = new OrthographicCamera(-1, 1, 1, -1, 0, 1);\n  var _scene = new Scene();\n  var _stereo = new StereoCamera();\n  var _params = {\n    minFilter: LinearFilter,\n    magFilter: NearestFilter,\n    format: RGBAFormat\n  };\n  var _renderTargetL = new WebGLRenderTarget(512, 512, _params);\n  var _renderTargetR = new WebGLRenderTarget(512, 512, _params);\n  var _material = new ShaderMaterial({\n    uniforms: {\n      mapLeft: {\n        value: _renderTargetL.texture\n      },\n      mapRight: {\n        value: _renderTargetR.texture\n      }\n    },\n    vertexShader: [\"varying vec2 vUv;\", \"void main() {\", \"\tvUv = vec2( uv.x, uv.y );\", \"\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\", \"}\"].join(\"\\n\"),\n    fragmentShader: [\"uniform sampler2D mapLeft;\", \"uniform sampler2D mapRight;\", \"varying vec2 vUv;\", \"void main() {\", \"\tvec2 uv = vUv;\", \"\tif ( ( mod( gl_FragCoord.y, 2.0 ) ) > 1.00 ) {\", \"\t\tgl_FragColor = texture2D( mapLeft, uv );\", \"\t} else {\", \"\t\tgl_FragColor = texture2D( mapRight, uv );\", \"\t}\", \"\t#include <tonemapping_fragment>\", \"\t#include <encodings_fragment>\", \"}\"].join(\"\\n\")\n  });\n  var mesh = new Mesh(new PlaneGeometry(2, 2), _material);\n  _scene.add(mesh);\n  this.setSize = function (width, height) {\n    renderer.setSize(width, height);\n    var pixelRatio = renderer.getPixelRatio();\n    _renderTargetL.setSize(width * pixelRatio, height * pixelRatio);\n    _renderTargetR.setSize(width * pixelRatio, height * pixelRatio);\n  };\n  this.render = function (scene, camera) {\n    if (scene.matrixWorldAutoUpdate === true) scene.updateMatrixWorld();\n    if (camera.parent === null && camera.matrixWorldAutoUpdate === true) camera.updateMatrixWorld();\n    _stereo.update(camera);\n    renderer.setRenderTarget(_renderTargetL);\n    renderer.clear();\n    renderer.render(scene, _stereo.cameraL);\n    renderer.setRenderTarget(_renderTargetR);\n    renderer.clear();\n    renderer.render(scene, _stereo.cameraR);\n    renderer.setRenderTarget(null);\n    renderer.render(_scene, _camera);\n  };\n});\nexport { ParallaxBarrierEffect };","map":{"version":3,"names":["OrthographicCamera","Scene","StereoCamera","LinearFilter","NearestFilter","RGBAFormat","WebGLRenderTarget","ShaderMaterial","Mesh","PlaneGeometry","ParallaxBarrierEffect","_createClass","renderer","_classCallCheck","_camera","_scene","_stereo","_params","minFilter","magFilter","format","_renderTargetL","_renderTargetR","_material","uniforms","mapLeft","value","texture","mapRight","vertexShader","join","fragmentShader","mesh","add","setSize","width","height","pixelRatio","getPixelRatio","render","scene","camera","matrixWorldAutoUpdate","updateMatrixWorld","parent","update","setRenderTarget","clear","cameraL","cameraR"],"sources":["/home/krug/Coding/JavaScript/Websites/Personal/personal/node_modules/.pnpm/three-stdlib@2.23.7_three@0.151.3/node_modules/three-stdlib/effects/ParallaxBarrierEffect.js"],"sourcesContent":["import { OrthographicCamera, Scene, StereoCamera, LinearFilter, NearestFilter, RGBAFormat, WebGLRenderTarget, ShaderMaterial, Mesh, PlaneGeometry } from \"three\";\nclass ParallaxBarrierEffect {\n  constructor(renderer) {\n    const _camera = new OrthographicCamera(-1, 1, 1, -1, 0, 1);\n    const _scene = new Scene();\n    const _stereo = new StereoCamera();\n    const _params = { minFilter: LinearFilter, magFilter: NearestFilter, format: RGBAFormat };\n    const _renderTargetL = new WebGLRenderTarget(512, 512, _params);\n    const _renderTargetR = new WebGLRenderTarget(512, 512, _params);\n    const _material = new ShaderMaterial({\n      uniforms: {\n        mapLeft: { value: _renderTargetL.texture },\n        mapRight: { value: _renderTargetR.texture }\n      },\n      vertexShader: [\n        \"varying vec2 vUv;\",\n        \"void main() {\",\n        \"\tvUv = vec2( uv.x, uv.y );\",\n        \"\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\",\n        \"}\"\n      ].join(\"\\n\"),\n      fragmentShader: [\n        \"uniform sampler2D mapLeft;\",\n        \"uniform sampler2D mapRight;\",\n        \"varying vec2 vUv;\",\n        \"void main() {\",\n        \"\tvec2 uv = vUv;\",\n        \"\tif ( ( mod( gl_FragCoord.y, 2.0 ) ) > 1.00 ) {\",\n        \"\t\tgl_FragColor = texture2D( mapLeft, uv );\",\n        \"\t} else {\",\n        \"\t\tgl_FragColor = texture2D( mapRight, uv );\",\n        \"\t}\",\n        \"\t#include <tonemapping_fragment>\",\n        \"\t#include <encodings_fragment>\",\n        \"}\"\n      ].join(\"\\n\")\n    });\n    const mesh = new Mesh(new PlaneGeometry(2, 2), _material);\n    _scene.add(mesh);\n    this.setSize = function(width, height) {\n      renderer.setSize(width, height);\n      const pixelRatio = renderer.getPixelRatio();\n      _renderTargetL.setSize(width * pixelRatio, height * pixelRatio);\n      _renderTargetR.setSize(width * pixelRatio, height * pixelRatio);\n    };\n    this.render = function(scene, camera) {\n      if (scene.matrixWorldAutoUpdate === true)\n        scene.updateMatrixWorld();\n      if (camera.parent === null && camera.matrixWorldAutoUpdate === true)\n        camera.updateMatrixWorld();\n      _stereo.update(camera);\n      renderer.setRenderTarget(_renderTargetL);\n      renderer.clear();\n      renderer.render(scene, _stereo.cameraL);\n      renderer.setRenderTarget(_renderTargetR);\n      renderer.clear();\n      renderer.render(scene, _stereo.cameraR);\n      renderer.setRenderTarget(null);\n      renderer.render(_scene, _camera);\n    };\n  }\n}\nexport {\n  ParallaxBarrierEffect\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}