{"ast":null,"code":"const FocusShader = {\n  uniforms: {\n    tDiffuse: {\n      value: null\n    },\n    screenWidth: {\n      value: 1024\n    },\n    screenHeight: {\n      value: 1024\n    },\n    sampleDistance: {\n      value: 0.94\n    },\n    waveFactor: {\n      value: 125e-5\n    }\n  },\n  vertexShader: [\"varying vec2 vUv;\", \"void main() {\", \"\tvUv = uv;\", \"\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\", \"}\"].join(\"\\n\"),\n  fragmentShader: [\"uniform float screenWidth;\", \"uniform float screenHeight;\", \"uniform float sampleDistance;\", \"uniform float waveFactor;\", \"uniform sampler2D tDiffuse;\", \"varying vec2 vUv;\", \"void main() {\", \"\tvec4 color, org, tmp, add;\", \"\tfloat sample_dist, f;\", \"\tvec2 vin;\", \"\tvec2 uv = vUv;\", \"\tadd = color = org = texture2D( tDiffuse, uv );\", \"\tvin = ( uv - vec2( 0.5 ) ) * vec2( 1.4 );\", \"\tsample_dist = dot( vin, vin ) * 2.0;\", \"\tf = ( waveFactor * 100.0 + sample_dist ) * sampleDistance * 4.0;\", \"\tvec2 sampleSize = vec2(  1.0 / screenWidth, 1.0 / screenHeight ) * vec2( f );\", \"\tadd += tmp = texture2D( tDiffuse, uv + vec2( 0.111964, 0.993712 ) * sampleSize );\", \"\tif( tmp.b < color.b ) color = tmp;\", \"\tadd += tmp = texture2D( tDiffuse, uv + vec2( 0.846724, 0.532032 ) * sampleSize );\", \"\tif( tmp.b < color.b ) color = tmp;\", \"\tadd += tmp = texture2D( tDiffuse, uv + vec2( 0.943883, -0.330279 ) * sampleSize );\", \"\tif( tmp.b < color.b ) color = tmp;\", \"\tadd += tmp = texture2D( tDiffuse, uv + vec2( 0.330279, -0.943883 ) * sampleSize );\", \"\tif( tmp.b < color.b ) color = tmp;\", \"\tadd += tmp = texture2D( tDiffuse, uv + vec2( -0.532032, -0.846724 ) * sampleSize );\", \"\tif( tmp.b < color.b ) color = tmp;\", \"\tadd += tmp = texture2D( tDiffuse, uv + vec2( -0.993712, -0.111964 ) * sampleSize );\", \"\tif( tmp.b < color.b ) color = tmp;\", \"\tadd += tmp = texture2D( tDiffuse, uv + vec2( -0.707107, 0.707107 ) * sampleSize );\", \"\tif( tmp.b < color.b ) color = tmp;\", \"\tcolor = color * vec4( 2.0 ) - ( add / vec4( 8.0 ) );\", \"\tcolor = color + ( add / vec4( 8.0 ) - color ) * ( vec4( 1.0 ) - vec4( sample_dist * 0.5 ) );\", \"\tgl_FragColor = vec4( color.rgb * color.rgb * vec3( 0.95 ) + color.rgb, 1.0 );\", \"}\"].join(\"\\n\")\n};\nexport { FocusShader };","map":{"version":3,"names":["FocusShader","uniforms","tDiffuse","value","screenWidth","screenHeight","sampleDistance","waveFactor","vertexShader","join","fragmentShader"],"sources":["/home/krug/Coding/JavaScript/Websites/Personal/personal/node_modules/.pnpm/three-stdlib@2.23.7_three@0.151.3/node_modules/three-stdlib/shaders/FocusShader.js"],"sourcesContent":["const FocusShader = {\n  uniforms: {\n    tDiffuse: { value: null },\n    screenWidth: { value: 1024 },\n    screenHeight: { value: 1024 },\n    sampleDistance: { value: 0.94 },\n    waveFactor: { value: 125e-5 }\n  },\n  vertexShader: [\n    \"varying vec2 vUv;\",\n    \"void main() {\",\n    \"\tvUv = uv;\",\n    \"\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\",\n    \"}\"\n  ].join(\"\\n\"),\n  fragmentShader: [\n    \"uniform float screenWidth;\",\n    \"uniform float screenHeight;\",\n    \"uniform float sampleDistance;\",\n    \"uniform float waveFactor;\",\n    \"uniform sampler2D tDiffuse;\",\n    \"varying vec2 vUv;\",\n    \"void main() {\",\n    \"\tvec4 color, org, tmp, add;\",\n    \"\tfloat sample_dist, f;\",\n    \"\tvec2 vin;\",\n    \"\tvec2 uv = vUv;\",\n    \"\tadd = color = org = texture2D( tDiffuse, uv );\",\n    \"\tvin = ( uv - vec2( 0.5 ) ) * vec2( 1.4 );\",\n    \"\tsample_dist = dot( vin, vin ) * 2.0;\",\n    \"\tf = ( waveFactor * 100.0 + sample_dist ) * sampleDistance * 4.0;\",\n    \"\tvec2 sampleSize = vec2(  1.0 / screenWidth, 1.0 / screenHeight ) * vec2( f );\",\n    \"\tadd += tmp = texture2D( tDiffuse, uv + vec2( 0.111964, 0.993712 ) * sampleSize );\",\n    \"\tif( tmp.b < color.b ) color = tmp;\",\n    \"\tadd += tmp = texture2D( tDiffuse, uv + vec2( 0.846724, 0.532032 ) * sampleSize );\",\n    \"\tif( tmp.b < color.b ) color = tmp;\",\n    \"\tadd += tmp = texture2D( tDiffuse, uv + vec2( 0.943883, -0.330279 ) * sampleSize );\",\n    \"\tif( tmp.b < color.b ) color = tmp;\",\n    \"\tadd += tmp = texture2D( tDiffuse, uv + vec2( 0.330279, -0.943883 ) * sampleSize );\",\n    \"\tif( tmp.b < color.b ) color = tmp;\",\n    \"\tadd += tmp = texture2D( tDiffuse, uv + vec2( -0.532032, -0.846724 ) * sampleSize );\",\n    \"\tif( tmp.b < color.b ) color = tmp;\",\n    \"\tadd += tmp = texture2D( tDiffuse, uv + vec2( -0.993712, -0.111964 ) * sampleSize );\",\n    \"\tif( tmp.b < color.b ) color = tmp;\",\n    \"\tadd += tmp = texture2D( tDiffuse, uv + vec2( -0.707107, 0.707107 ) * sampleSize );\",\n    \"\tif( tmp.b < color.b ) color = tmp;\",\n    \"\tcolor = color * vec4( 2.0 ) - ( add / vec4( 8.0 ) );\",\n    \"\tcolor = color + ( add / vec4( 8.0 ) - color ) * ( vec4( 1.0 ) - vec4( sample_dist * 0.5 ) );\",\n    \"\tgl_FragColor = vec4( color.rgb * color.rgb * vec3( 0.95 ) + color.rgb, 1.0 );\",\n    \"}\"\n  ].join(\"\\n\")\n};\nexport {\n  FocusShader\n};\n"],"mappings":"AAAA,MAAMA,WAAW,GAAG;EAClBC,QAAQ,EAAE;IACRC,QAAQ,EAAE;MAAEC,KAAK,EAAE;IAAK,CAAC;IACzBC,WAAW,EAAE;MAAED,KAAK,EAAE;IAAK,CAAC;IAC5BE,YAAY,EAAE;MAAEF,KAAK,EAAE;IAAK,CAAC;IAC7BG,cAAc,EAAE;MAAEH,KAAK,EAAE;IAAK,CAAC;IAC/BI,UAAU,EAAE;MAAEJ,KAAK,EAAE;IAAO;EAC9B,CAAC;EACDK,YAAY,EAAE,CACZ,mBAAmB,EACnB,eAAe,EACf,YAAY,EACZ,4EAA4E,EAC5E,GAAG,CACJ,CAACC,IAAI,CAAC,IAAI,CAAC;EACZC,cAAc,EAAE,CACd,4BAA4B,EAC5B,6BAA6B,EAC7B,+BAA+B,EAC/B,2BAA2B,EAC3B,6BAA6B,EAC7B,mBAAmB,EACnB,eAAe,EACf,6BAA6B,EAC7B,wBAAwB,EACxB,YAAY,EACZ,iBAAiB,EACjB,iDAAiD,EACjD,4CAA4C,EAC5C,uCAAuC,EACvC,mEAAmE,EACnE,gFAAgF,EAChF,oFAAoF,EACpF,qCAAqC,EACrC,oFAAoF,EACpF,qCAAqC,EACrC,qFAAqF,EACrF,qCAAqC,EACrC,qFAAqF,EACrF,qCAAqC,EACrC,sFAAsF,EACtF,qCAAqC,EACrC,sFAAsF,EACtF,qCAAqC,EACrC,qFAAqF,EACrF,qCAAqC,EACrC,uDAAuD,EACvD,+FAA+F,EAC/F,gFAAgF,EAChF,GAAG,CACJ,CAACD,IAAI,CAAC,IAAI;AACb,CAAC;AACD,SACET,WAAW"},"metadata":{},"sourceType":"module","externalDependencies":[]}