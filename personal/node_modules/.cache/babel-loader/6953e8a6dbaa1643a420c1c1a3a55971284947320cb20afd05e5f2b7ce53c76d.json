{"ast":null,"code":"import _get from \"/home/krug/Coding/JavaScript/Websites/Personal/personal/node_modules/.pnpm/@babel+runtime@7.22.3/node_modules/@babel/runtime/helpers/esm/get.js\";\nimport _getPrototypeOf from \"/home/krug/Coding/JavaScript/Websites/Personal/personal/node_modules/.pnpm/@babel+runtime@7.22.3/node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js\";\nimport _inherits from \"/home/krug/Coding/JavaScript/Websites/Personal/personal/node_modules/.pnpm/@babel+runtime@7.22.3/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/home/krug/Coding/JavaScript/Websites/Personal/personal/node_modules/.pnpm/@babel+runtime@7.22.3/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport _classCallCheck from \"/home/krug/Coding/JavaScript/Websites/Personal/personal/node_modules/.pnpm/@babel+runtime@7.22.3/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/home/krug/Coding/JavaScript/Websites/Personal/personal/node_modules/.pnpm/@babel+runtime@7.22.3/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport { Vector3, Matrix4, Quaternion, Euler, Bone, Object3D, MeshBasicMaterial, Color, BoxGeometry, SphereGeometry, Mesh } from \"three\";\nimport { CapsuleGeometry } from \"../_polyfill/CapsuleGeometry.js\";\nvar MMDPhysics = /*#__PURE__*/function () {\n  /**\n   * @param {THREE.SkinnedMesh} mesh\n   * @param {Array<Object>} rigidBodyParams\n   * @param {Array<Object>} (optional) constraintParams\n   * @param {Object} params - (optional)\n   * @param {Number} params.unitStep - Default is 1 / 65.\n   * @param {Integer} params.maxStepNum - Default is 3.\n   * @param {Vector3} params.gravity - Default is ( 0, - 9.8 * 10, 0 )\n   */\n  function MMDPhysics(mesh, rigidBodyParams) {\n    var constraintParams = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];\n    var params = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n    _classCallCheck(this, MMDPhysics);\n    if (typeof Ammo === \"undefined\") {\n      throw new Error(\"THREE.MMDPhysics: Import ammo.js https://github.com/kripken/ammo.js\");\n    }\n    this.manager = new ResourceManager();\n    this.mesh = mesh;\n    this.unitStep = params.unitStep !== void 0 ? params.unitStep : 1 / 65;\n    this.maxStepNum = params.maxStepNum !== void 0 ? params.maxStepNum : 3;\n    this.gravity = new Vector3(0, -9.8 * 10, 0);\n    if (params.gravity !== void 0) this.gravity.copy(params.gravity);\n    this.world = params.world !== void 0 ? params.world : null;\n    this.bodies = [];\n    this.constraints = [];\n    this._init(mesh, rigidBodyParams, constraintParams);\n  }\n  /**\n   * Advances Physics calculation and updates bones.\n   *\n   * @param {Number} delta - time in second\n   * @return {MMDPhysics}\n   */\n  _createClass(MMDPhysics, [{\n    key: \"update\",\n    value: function update(delta) {\n      var manager = this.manager;\n      var mesh = this.mesh;\n      var isNonDefaultScale = false;\n      var position = manager.allocThreeVector3();\n      var quaternion = manager.allocThreeQuaternion();\n      var scale = manager.allocThreeVector3();\n      mesh.matrixWorld.decompose(position, quaternion, scale);\n      if (scale.x !== 1 || scale.y !== 1 || scale.z !== 1) {\n        isNonDefaultScale = true;\n      }\n      var parent;\n      if (isNonDefaultScale) {\n        parent = mesh.parent;\n        if (parent !== null) mesh.parent = null;\n        scale.copy(this.mesh.scale);\n        mesh.scale.set(1, 1, 1);\n        mesh.updateMatrixWorld(true);\n      }\n      this._updateRigidBodies();\n      this._stepSimulation(delta);\n      this._updateBones();\n      if (isNonDefaultScale) {\n        if (parent !== null) mesh.parent = parent;\n        mesh.scale.copy(scale);\n      }\n      manager.freeThreeVector3(scale);\n      manager.freeThreeQuaternion(quaternion);\n      manager.freeThreeVector3(position);\n      return this;\n    }\n    /**\n     * Resets rigid bodies transorm to current bone's.\n     *\n     * @return {MMDPhysics}\n     */\n  }, {\n    key: \"reset\",\n    value: function reset() {\n      for (var i = 0, il = this.bodies.length; i < il; i++) {\n        this.bodies[i].reset();\n      }\n      return this;\n    }\n    /**\n     * Warm ups Rigid bodies. Calculates cycles steps.\n     *\n     * @param {Integer} cycles\n     * @return {MMDPhysics}\n     */\n  }, {\n    key: \"warmup\",\n    value: function warmup(cycles) {\n      for (var i = 0; i < cycles; i++) {\n        this.update(1 / 60);\n      }\n      return this;\n    }\n    /**\n     * Sets gravity.\n     *\n     * @param {Vector3} gravity\n     * @return {MMDPhysicsHelper}\n     */\n  }, {\n    key: \"setGravity\",\n    value: function setGravity(gravity) {\n      this.world.setGravity(new Ammo.btVector3(gravity.x, gravity.y, gravity.z));\n      this.gravity.copy(gravity);\n      return this;\n    }\n    /**\n     * Creates MMDPhysicsHelper\n     *\n     * @return {MMDPhysicsHelper}\n     */\n  }, {\n    key: \"createHelper\",\n    value: function createHelper() {\n      return new MMDPhysicsHelper(this.mesh, this);\n    }\n    // private methods\n  }, {\n    key: \"_init\",\n    value: function _init(mesh, rigidBodyParams, constraintParams) {\n      var manager = this.manager;\n      var parent = mesh.parent;\n      if (parent !== null) mesh.parent = null;\n      var currentPosition = manager.allocThreeVector3();\n      var currentQuaternion = manager.allocThreeQuaternion();\n      var currentScale = manager.allocThreeVector3();\n      currentPosition.copy(mesh.position);\n      currentQuaternion.copy(mesh.quaternion);\n      currentScale.copy(mesh.scale);\n      mesh.position.set(0, 0, 0);\n      mesh.quaternion.set(0, 0, 0, 1);\n      mesh.scale.set(1, 1, 1);\n      mesh.updateMatrixWorld(true);\n      if (this.world === null) {\n        this.world = this._createWorld();\n        this.setGravity(this.gravity);\n      }\n      this._initRigidBodies(rigidBodyParams);\n      this._initConstraints(constraintParams);\n      if (parent !== null) mesh.parent = parent;\n      mesh.position.copy(currentPosition);\n      mesh.quaternion.copy(currentQuaternion);\n      mesh.scale.copy(currentScale);\n      mesh.updateMatrixWorld(true);\n      this.reset();\n      manager.freeThreeVector3(currentPosition);\n      manager.freeThreeQuaternion(currentQuaternion);\n      manager.freeThreeVector3(currentScale);\n    }\n  }, {\n    key: \"_createWorld\",\n    value: function _createWorld() {\n      var config = new Ammo.btDefaultCollisionConfiguration();\n      var dispatcher = new Ammo.btCollisionDispatcher(config);\n      var cache = new Ammo.btDbvtBroadphase();\n      var solver = new Ammo.btSequentialImpulseConstraintSolver();\n      var world = new Ammo.btDiscreteDynamicsWorld(dispatcher, cache, solver, config);\n      return world;\n    }\n  }, {\n    key: \"_initRigidBodies\",\n    value: function _initRigidBodies(rigidBodies) {\n      for (var i = 0, il = rigidBodies.length; i < il; i++) {\n        this.bodies.push(new RigidBody(this.mesh, this.world, rigidBodies[i], this.manager));\n      }\n    }\n  }, {\n    key: \"_initConstraints\",\n    value: function _initConstraints(constraints) {\n      for (var i = 0, il = constraints.length; i < il; i++) {\n        var params = constraints[i];\n        var bodyA = this.bodies[params.rigidBodyIndex1];\n        var bodyB = this.bodies[params.rigidBodyIndex2];\n        this.constraints.push(new Constraint(this.mesh, this.world, bodyA, bodyB, params, this.manager));\n      }\n    }\n  }, {\n    key: \"_stepSimulation\",\n    value: function _stepSimulation(delta) {\n      var unitStep = this.unitStep;\n      var stepTime = delta;\n      var maxStepNum = (delta / unitStep | 0) + 1;\n      if (stepTime < unitStep) {\n        stepTime = unitStep;\n        maxStepNum = 1;\n      }\n      if (maxStepNum > this.maxStepNum) {\n        maxStepNum = this.maxStepNum;\n      }\n      this.world.stepSimulation(stepTime, maxStepNum, unitStep);\n    }\n  }, {\n    key: \"_updateRigidBodies\",\n    value: function _updateRigidBodies() {\n      for (var i = 0, il = this.bodies.length; i < il; i++) {\n        this.bodies[i].updateFromBone();\n      }\n    }\n  }, {\n    key: \"_updateBones\",\n    value: function _updateBones() {\n      for (var i = 0, il = this.bodies.length; i < il; i++) {\n        this.bodies[i].updateBone();\n      }\n    }\n  }]);\n  return MMDPhysics;\n}();\nvar ResourceManager = /*#__PURE__*/function () {\n  function ResourceManager() {\n    _classCallCheck(this, ResourceManager);\n    this.threeVector3s = [];\n    this.threeMatrix4s = [];\n    this.threeQuaternions = [];\n    this.threeEulers = [];\n    this.transforms = [];\n    this.quaternions = [];\n    this.vector3s = [];\n  }\n  _createClass(ResourceManager, [{\n    key: \"allocThreeVector3\",\n    value: function allocThreeVector3() {\n      return this.threeVector3s.length > 0 ? this.threeVector3s.pop() : new Vector3();\n    }\n  }, {\n    key: \"freeThreeVector3\",\n    value: function freeThreeVector3(v) {\n      this.threeVector3s.push(v);\n    }\n  }, {\n    key: \"allocThreeMatrix4\",\n    value: function allocThreeMatrix4() {\n      return this.threeMatrix4s.length > 0 ? this.threeMatrix4s.pop() : new Matrix4();\n    }\n  }, {\n    key: \"freeThreeMatrix4\",\n    value: function freeThreeMatrix4(m) {\n      this.threeMatrix4s.push(m);\n    }\n  }, {\n    key: \"allocThreeQuaternion\",\n    value: function allocThreeQuaternion() {\n      return this.threeQuaternions.length > 0 ? this.threeQuaternions.pop() : new Quaternion();\n    }\n  }, {\n    key: \"freeThreeQuaternion\",\n    value: function freeThreeQuaternion(q) {\n      this.threeQuaternions.push(q);\n    }\n  }, {\n    key: \"allocThreeEuler\",\n    value: function allocThreeEuler() {\n      return this.threeEulers.length > 0 ? this.threeEulers.pop() : new Euler();\n    }\n  }, {\n    key: \"freeThreeEuler\",\n    value: function freeThreeEuler(e) {\n      this.threeEulers.push(e);\n    }\n  }, {\n    key: \"allocTransform\",\n    value: function allocTransform() {\n      return this.transforms.length > 0 ? this.transforms.pop() : new Ammo.btTransform();\n    }\n  }, {\n    key: \"freeTransform\",\n    value: function freeTransform(t) {\n      this.transforms.push(t);\n    }\n  }, {\n    key: \"allocQuaternion\",\n    value: function allocQuaternion() {\n      return this.quaternions.length > 0 ? this.quaternions.pop() : new Ammo.btQuaternion();\n    }\n  }, {\n    key: \"freeQuaternion\",\n    value: function freeQuaternion(q) {\n      this.quaternions.push(q);\n    }\n  }, {\n    key: \"allocVector3\",\n    value: function allocVector3() {\n      return this.vector3s.length > 0 ? this.vector3s.pop() : new Ammo.btVector3();\n    }\n  }, {\n    key: \"freeVector3\",\n    value: function freeVector3(v) {\n      this.vector3s.push(v);\n    }\n  }, {\n    key: \"setIdentity\",\n    value: function setIdentity(t) {\n      t.setIdentity();\n    }\n  }, {\n    key: \"getBasis\",\n    value: function getBasis(t) {\n      var q = this.allocQuaternion();\n      t.getBasis().getRotation(q);\n      return q;\n    }\n  }, {\n    key: \"getBasisAsMatrix3\",\n    value: function getBasisAsMatrix3(t) {\n      var q = this.getBasis(t);\n      var m = this.quaternionToMatrix3(q);\n      this.freeQuaternion(q);\n      return m;\n    }\n  }, {\n    key: \"getOrigin\",\n    value: function getOrigin(t) {\n      return t.getOrigin();\n    }\n  }, {\n    key: \"setOrigin\",\n    value: function setOrigin(t, v) {\n      t.getOrigin().setValue(v.x(), v.y(), v.z());\n    }\n  }, {\n    key: \"copyOrigin\",\n    value: function copyOrigin(t1, t2) {\n      var o = t2.getOrigin();\n      this.setOrigin(t1, o);\n    }\n  }, {\n    key: \"setBasis\",\n    value: function setBasis(t, q) {\n      t.setRotation(q);\n    }\n  }, {\n    key: \"setBasisFromMatrix3\",\n    value: function setBasisFromMatrix3(t, m) {\n      var q = this.matrix3ToQuaternion(m);\n      this.setBasis(t, q);\n      this.freeQuaternion(q);\n    }\n  }, {\n    key: \"setOriginFromArray3\",\n    value: function setOriginFromArray3(t, a) {\n      t.getOrigin().setValue(a[0], a[1], a[2]);\n    }\n  }, {\n    key: \"setOriginFromThreeVector3\",\n    value: function setOriginFromThreeVector3(t, v) {\n      t.getOrigin().setValue(v.x, v.y, v.z);\n    }\n  }, {\n    key: \"setBasisFromArray3\",\n    value: function setBasisFromArray3(t, a) {\n      var thQ = this.allocThreeQuaternion();\n      var thE = this.allocThreeEuler();\n      thE.set(a[0], a[1], a[2]);\n      this.setBasisFromThreeQuaternion(t, thQ.setFromEuler(thE));\n      this.freeThreeEuler(thE);\n      this.freeThreeQuaternion(thQ);\n    }\n  }, {\n    key: \"setBasisFromThreeQuaternion\",\n    value: function setBasisFromThreeQuaternion(t, a) {\n      var q = this.allocQuaternion();\n      q.setX(a.x);\n      q.setY(a.y);\n      q.setZ(a.z);\n      q.setW(a.w);\n      this.setBasis(t, q);\n      this.freeQuaternion(q);\n    }\n  }, {\n    key: \"multiplyTransforms\",\n    value: function multiplyTransforms(t1, t2) {\n      var t = this.allocTransform();\n      this.setIdentity(t);\n      var m1 = this.getBasisAsMatrix3(t1);\n      var m2 = this.getBasisAsMatrix3(t2);\n      var o1 = this.getOrigin(t1);\n      var o2 = this.getOrigin(t2);\n      var v1 = this.multiplyMatrix3ByVector3(m1, o2);\n      var v2 = this.addVector3(v1, o1);\n      this.setOrigin(t, v2);\n      var m3 = this.multiplyMatrices3(m1, m2);\n      this.setBasisFromMatrix3(t, m3);\n      this.freeVector3(v1);\n      this.freeVector3(v2);\n      return t;\n    }\n  }, {\n    key: \"inverseTransform\",\n    value: function inverseTransform(t) {\n      var t2 = this.allocTransform();\n      var m1 = this.getBasisAsMatrix3(t);\n      var o = this.getOrigin(t);\n      var m2 = this.transposeMatrix3(m1);\n      var v1 = this.negativeVector3(o);\n      var v2 = this.multiplyMatrix3ByVector3(m2, v1);\n      this.setOrigin(t2, v2);\n      this.setBasisFromMatrix3(t2, m2);\n      this.freeVector3(v1);\n      this.freeVector3(v2);\n      return t2;\n    }\n  }, {\n    key: \"multiplyMatrices3\",\n    value: function multiplyMatrices3(m1, m2) {\n      var m3 = [];\n      var v10 = this.rowOfMatrix3(m1, 0);\n      var v11 = this.rowOfMatrix3(m1, 1);\n      var v12 = this.rowOfMatrix3(m1, 2);\n      var v20 = this.columnOfMatrix3(m2, 0);\n      var v21 = this.columnOfMatrix3(m2, 1);\n      var v22 = this.columnOfMatrix3(m2, 2);\n      m3[0] = this.dotVectors3(v10, v20);\n      m3[1] = this.dotVectors3(v10, v21);\n      m3[2] = this.dotVectors3(v10, v22);\n      m3[3] = this.dotVectors3(v11, v20);\n      m3[4] = this.dotVectors3(v11, v21);\n      m3[5] = this.dotVectors3(v11, v22);\n      m3[6] = this.dotVectors3(v12, v20);\n      m3[7] = this.dotVectors3(v12, v21);\n      m3[8] = this.dotVectors3(v12, v22);\n      this.freeVector3(v10);\n      this.freeVector3(v11);\n      this.freeVector3(v12);\n      this.freeVector3(v20);\n      this.freeVector3(v21);\n      this.freeVector3(v22);\n      return m3;\n    }\n  }, {\n    key: \"addVector3\",\n    value: function addVector3(v1, v2) {\n      var v = this.allocVector3();\n      v.setValue(v1.x() + v2.x(), v1.y() + v2.y(), v1.z() + v2.z());\n      return v;\n    }\n  }, {\n    key: \"dotVectors3\",\n    value: function dotVectors3(v1, v2) {\n      return v1.x() * v2.x() + v1.y() * v2.y() + v1.z() * v2.z();\n    }\n  }, {\n    key: \"rowOfMatrix3\",\n    value: function rowOfMatrix3(m, i) {\n      var v = this.allocVector3();\n      v.setValue(m[i * 3 + 0], m[i * 3 + 1], m[i * 3 + 2]);\n      return v;\n    }\n  }, {\n    key: \"columnOfMatrix3\",\n    value: function columnOfMatrix3(m, i) {\n      var v = this.allocVector3();\n      v.setValue(m[i + 0], m[i + 3], m[i + 6]);\n      return v;\n    }\n  }, {\n    key: \"negativeVector3\",\n    value: function negativeVector3(v) {\n      var v2 = this.allocVector3();\n      v2.setValue(-v.x(), -v.y(), -v.z());\n      return v2;\n    }\n  }, {\n    key: \"multiplyMatrix3ByVector3\",\n    value: function multiplyMatrix3ByVector3(m, v) {\n      var v4 = this.allocVector3();\n      var v0 = this.rowOfMatrix3(m, 0);\n      var v1 = this.rowOfMatrix3(m, 1);\n      var v2 = this.rowOfMatrix3(m, 2);\n      var x = this.dotVectors3(v0, v);\n      var y = this.dotVectors3(v1, v);\n      var z = this.dotVectors3(v2, v);\n      v4.setValue(x, y, z);\n      this.freeVector3(v0);\n      this.freeVector3(v1);\n      this.freeVector3(v2);\n      return v4;\n    }\n  }, {\n    key: \"transposeMatrix3\",\n    value: function transposeMatrix3(m) {\n      var m2 = [];\n      m2[0] = m[0];\n      m2[1] = m[3];\n      m2[2] = m[6];\n      m2[3] = m[1];\n      m2[4] = m[4];\n      m2[5] = m[7];\n      m2[6] = m[2];\n      m2[7] = m[5];\n      m2[8] = m[8];\n      return m2;\n    }\n  }, {\n    key: \"quaternionToMatrix3\",\n    value: function quaternionToMatrix3(q) {\n      var m = [];\n      var x = q.x();\n      var y = q.y();\n      var z = q.z();\n      var w = q.w();\n      var xx = x * x;\n      var yy = y * y;\n      var zz = z * z;\n      var xy = x * y;\n      var yz = y * z;\n      var zx = z * x;\n      var xw = x * w;\n      var yw = y * w;\n      var zw = z * w;\n      m[0] = 1 - 2 * (yy + zz);\n      m[1] = 2 * (xy - zw);\n      m[2] = 2 * (zx + yw);\n      m[3] = 2 * (xy + zw);\n      m[4] = 1 - 2 * (zz + xx);\n      m[5] = 2 * (yz - xw);\n      m[6] = 2 * (zx - yw);\n      m[7] = 2 * (yz + xw);\n      m[8] = 1 - 2 * (xx + yy);\n      return m;\n    }\n  }, {\n    key: \"matrix3ToQuaternion\",\n    value: function matrix3ToQuaternion(m) {\n      var t = m[0] + m[4] + m[8];\n      var s, x, y, z, w;\n      if (t > 0) {\n        s = Math.sqrt(t + 1) * 2;\n        w = 0.25 * s;\n        x = (m[7] - m[5]) / s;\n        y = (m[2] - m[6]) / s;\n        z = (m[3] - m[1]) / s;\n      } else if (m[0] > m[4] && m[0] > m[8]) {\n        s = Math.sqrt(1 + m[0] - m[4] - m[8]) * 2;\n        w = (m[7] - m[5]) / s;\n        x = 0.25 * s;\n        y = (m[1] + m[3]) / s;\n        z = (m[2] + m[6]) / s;\n      } else if (m[4] > m[8]) {\n        s = Math.sqrt(1 + m[4] - m[0] - m[8]) * 2;\n        w = (m[2] - m[6]) / s;\n        x = (m[1] + m[3]) / s;\n        y = 0.25 * s;\n        z = (m[5] + m[7]) / s;\n      } else {\n        s = Math.sqrt(1 + m[8] - m[0] - m[4]) * 2;\n        w = (m[3] - m[1]) / s;\n        x = (m[2] + m[6]) / s;\n        y = (m[5] + m[7]) / s;\n        z = 0.25 * s;\n      }\n      var q = this.allocQuaternion();\n      q.setX(x);\n      q.setY(y);\n      q.setZ(z);\n      q.setW(w);\n      return q;\n    }\n  }]);\n  return ResourceManager;\n}();\nvar RigidBody = /*#__PURE__*/function () {\n  function RigidBody(mesh, world, params, manager) {\n    _classCallCheck(this, RigidBody);\n    this.mesh = mesh;\n    this.world = world;\n    this.params = params;\n    this.manager = manager;\n    this.body = null;\n    this.bone = null;\n    this.boneOffsetForm = null;\n    this.boneOffsetFormInverse = null;\n    this._init();\n  }\n  /**\n   * Resets rigid body transform to the current bone's.\n   *\n   * @return {RigidBody}\n   */\n  _createClass(RigidBody, [{\n    key: \"reset\",\n    value: function reset() {\n      this._setTransformFromBone();\n      return this;\n    }\n    /**\n     * Updates rigid body's transform from the current bone.\n     *\n     * @return {RidigBody}\n     */\n  }, {\n    key: \"updateFromBone\",\n    value: function updateFromBone() {\n      if (this.params.boneIndex !== -1 && this.params.type === 0) {\n        this._setTransformFromBone();\n      }\n      return this;\n    }\n    /**\n     * Updates bone from the current ridid body's transform.\n     *\n     * @return {RidigBody}\n     */\n  }, {\n    key: \"updateBone\",\n    value: function updateBone() {\n      if (this.params.type === 0 || this.params.boneIndex === -1) {\n        return this;\n      }\n      this._updateBoneRotation();\n      if (this.params.type === 1) {\n        this._updateBonePosition();\n      }\n      this.bone.updateMatrixWorld(true);\n      if (this.params.type === 2) {\n        this._setPositionFromBone();\n      }\n      return this;\n    }\n    // private methods\n  }, {\n    key: \"_init\",\n    value: function _init() {\n      function generateShape(p) {\n        switch (p.shapeType) {\n          case 0:\n            return new Ammo.btSphereShape(p.width);\n          case 1:\n            return new Ammo.btBoxShape(new Ammo.btVector3(p.width, p.height, p.depth));\n          case 2:\n            return new Ammo.btCapsuleShape(p.width, p.height);\n          default:\n            throw new Error(\"unknown shape type \" + p.shapeType);\n        }\n      }\n      var manager = this.manager;\n      var params = this.params;\n      var bones = this.mesh.skeleton.bones;\n      var bone = params.boneIndex === -1 ? new Bone() : bones[params.boneIndex];\n      var shape = generateShape(params);\n      var weight = params.type === 0 ? 0 : params.weight;\n      var localInertia = manager.allocVector3();\n      localInertia.setValue(0, 0, 0);\n      if (weight !== 0) {\n        shape.calculateLocalInertia(weight, localInertia);\n      }\n      var boneOffsetForm = manager.allocTransform();\n      manager.setIdentity(boneOffsetForm);\n      manager.setOriginFromArray3(boneOffsetForm, params.position);\n      manager.setBasisFromArray3(boneOffsetForm, params.rotation);\n      var vector = manager.allocThreeVector3();\n      var boneForm = manager.allocTransform();\n      manager.setIdentity(boneForm);\n      manager.setOriginFromThreeVector3(boneForm, bone.getWorldPosition(vector));\n      var form = manager.multiplyTransforms(boneForm, boneOffsetForm);\n      var state = new Ammo.btDefaultMotionState(form);\n      var info = new Ammo.btRigidBodyConstructionInfo(weight, state, shape, localInertia);\n      info.set_m_friction(params.friction);\n      info.set_m_restitution(params.restitution);\n      var body = new Ammo.btRigidBody(info);\n      if (params.type === 0) {\n        body.setCollisionFlags(body.getCollisionFlags() | 2);\n        body.setActivationState(4);\n      }\n      body.setDamping(params.positionDamping, params.rotationDamping);\n      body.setSleepingThresholds(0, 0);\n      this.world.addRigidBody(body, 1 << params.groupIndex, params.groupTarget);\n      this.body = body;\n      this.bone = bone;\n      this.boneOffsetForm = boneOffsetForm;\n      this.boneOffsetFormInverse = manager.inverseTransform(boneOffsetForm);\n      manager.freeVector3(localInertia);\n      manager.freeTransform(form);\n      manager.freeTransform(boneForm);\n      manager.freeThreeVector3(vector);\n    }\n  }, {\n    key: \"_getBoneTransform\",\n    value: function _getBoneTransform() {\n      var manager = this.manager;\n      var p = manager.allocThreeVector3();\n      var q = manager.allocThreeQuaternion();\n      var s = manager.allocThreeVector3();\n      this.bone.matrixWorld.decompose(p, q, s);\n      var tr = manager.allocTransform();\n      manager.setOriginFromThreeVector3(tr, p);\n      manager.setBasisFromThreeQuaternion(tr, q);\n      var form = manager.multiplyTransforms(tr, this.boneOffsetForm);\n      manager.freeTransform(tr);\n      manager.freeThreeVector3(s);\n      manager.freeThreeQuaternion(q);\n      manager.freeThreeVector3(p);\n      return form;\n    }\n  }, {\n    key: \"_getWorldTransformForBone\",\n    value: function _getWorldTransformForBone() {\n      var manager = this.manager;\n      var tr = this.body.getCenterOfMassTransform();\n      return manager.multiplyTransforms(tr, this.boneOffsetFormInverse);\n    }\n  }, {\n    key: \"_setTransformFromBone\",\n    value: function _setTransformFromBone() {\n      var manager = this.manager;\n      var form = this._getBoneTransform();\n      this.body.setCenterOfMassTransform(form);\n      this.body.getMotionState().setWorldTransform(form);\n      manager.freeTransform(form);\n    }\n  }, {\n    key: \"_setPositionFromBone\",\n    value: function _setPositionFromBone() {\n      var manager = this.manager;\n      var form = this._getBoneTransform();\n      var tr = manager.allocTransform();\n      this.body.getMotionState().getWorldTransform(tr);\n      manager.copyOrigin(tr, form);\n      this.body.setCenterOfMassTransform(tr);\n      this.body.getMotionState().setWorldTransform(tr);\n      manager.freeTransform(tr);\n      manager.freeTransform(form);\n    }\n  }, {\n    key: \"_updateBoneRotation\",\n    value: function _updateBoneRotation() {\n      var manager = this.manager;\n      var tr = this._getWorldTransformForBone();\n      var q = manager.getBasis(tr);\n      var thQ = manager.allocThreeQuaternion();\n      var thQ2 = manager.allocThreeQuaternion();\n      var thQ3 = manager.allocThreeQuaternion();\n      thQ.set(q.x(), q.y(), q.z(), q.w());\n      thQ2.setFromRotationMatrix(this.bone.matrixWorld);\n      thQ2.conjugate();\n      thQ2.multiply(thQ);\n      thQ3.setFromRotationMatrix(this.bone.matrix);\n      this.bone.quaternion.copy(thQ2.multiply(thQ3).normalize());\n      manager.freeThreeQuaternion(thQ);\n      manager.freeThreeQuaternion(thQ2);\n      manager.freeThreeQuaternion(thQ3);\n      manager.freeQuaternion(q);\n      manager.freeTransform(tr);\n    }\n  }, {\n    key: \"_updateBonePosition\",\n    value: function _updateBonePosition() {\n      var manager = this.manager;\n      var tr = this._getWorldTransformForBone();\n      var thV = manager.allocThreeVector3();\n      var o = manager.getOrigin(tr);\n      thV.set(o.x(), o.y(), o.z());\n      if (this.bone.parent) {\n        this.bone.parent.worldToLocal(thV);\n      }\n      this.bone.position.copy(thV);\n      manager.freeThreeVector3(thV);\n      manager.freeTransform(tr);\n    }\n  }]);\n  return RigidBody;\n}();\nvar Constraint = /*#__PURE__*/function () {\n  /**\n   * @param {THREE.SkinnedMesh} mesh\n   * @param {Ammo.btDiscreteDynamicsWorld} world\n   * @param {RigidBody} bodyA\n   * @param {RigidBody} bodyB\n   * @param {Object} params\n   * @param {ResourceManager} manager\n   */\n  function Constraint(mesh, world, bodyA, bodyB, params, manager) {\n    _classCallCheck(this, Constraint);\n    this.mesh = mesh;\n    this.world = world;\n    this.bodyA = bodyA;\n    this.bodyB = bodyB;\n    this.params = params;\n    this.manager = manager;\n    this.constraint = null;\n    this._init();\n  }\n  // private method\n  _createClass(Constraint, [{\n    key: \"_init\",\n    value: function _init() {\n      var manager = this.manager;\n      var params = this.params;\n      var bodyA = this.bodyA;\n      var bodyB = this.bodyB;\n      var form = manager.allocTransform();\n      manager.setIdentity(form);\n      manager.setOriginFromArray3(form, params.position);\n      manager.setBasisFromArray3(form, params.rotation);\n      var formA = manager.allocTransform();\n      var formB = manager.allocTransform();\n      bodyA.body.getMotionState().getWorldTransform(formA);\n      bodyB.body.getMotionState().getWorldTransform(formB);\n      var formInverseA = manager.inverseTransform(formA);\n      var formInverseB = manager.inverseTransform(formB);\n      var formA2 = manager.multiplyTransforms(formInverseA, form);\n      var formB2 = manager.multiplyTransforms(formInverseB, form);\n      var constraint = new Ammo.btGeneric6DofSpringConstraint(bodyA.body, bodyB.body, formA2, formB2, true);\n      var lll = manager.allocVector3();\n      var lul = manager.allocVector3();\n      var all = manager.allocVector3();\n      var aul = manager.allocVector3();\n      lll.setValue(params.translationLimitation1[0], params.translationLimitation1[1], params.translationLimitation1[2]);\n      lul.setValue(params.translationLimitation2[0], params.translationLimitation2[1], params.translationLimitation2[2]);\n      all.setValue(params.rotationLimitation1[0], params.rotationLimitation1[1], params.rotationLimitation1[2]);\n      aul.setValue(params.rotationLimitation2[0], params.rotationLimitation2[1], params.rotationLimitation2[2]);\n      constraint.setLinearLowerLimit(lll);\n      constraint.setLinearUpperLimit(lul);\n      constraint.setAngularLowerLimit(all);\n      constraint.setAngularUpperLimit(aul);\n      for (var i = 0; i < 3; i++) {\n        if (params.springPosition[i] !== 0) {\n          constraint.enableSpring(i, true);\n          constraint.setStiffness(i, params.springPosition[i]);\n        }\n      }\n      for (var _i = 0; _i < 3; _i++) {\n        if (params.springRotation[_i] !== 0) {\n          constraint.enableSpring(_i + 3, true);\n          constraint.setStiffness(_i + 3, params.springRotation[_i]);\n        }\n      }\n      if (constraint.setParam !== void 0) {\n        for (var _i2 = 0; _i2 < 6; _i2++) {\n          constraint.setParam(2, 0.475, _i2);\n        }\n      }\n      this.world.addConstraint(constraint, true);\n      this.constraint = constraint;\n      manager.freeTransform(form);\n      manager.freeTransform(formA);\n      manager.freeTransform(formB);\n      manager.freeTransform(formInverseA);\n      manager.freeTransform(formInverseB);\n      manager.freeTransform(formA2);\n      manager.freeTransform(formB2);\n      manager.freeVector3(lll);\n      manager.freeVector3(lul);\n      manager.freeVector3(all);\n      manager.freeVector3(aul);\n    }\n  }]);\n  return Constraint;\n}();\nvar _position = /* @__PURE__ */new Vector3();\nvar _quaternion = /* @__PURE__ */new Quaternion();\nvar _scale = /* @__PURE__ */new Vector3();\nvar _matrixWorldInv = /* @__PURE__ */new Matrix4();\nvar MMDPhysicsHelper = /*#__PURE__*/function (_Object3D) {\n  _inherits(MMDPhysicsHelper, _Object3D);\n  var _super = _createSuper(MMDPhysicsHelper);\n  /**\n   * Visualize Rigid bodies\n   *\n   * @param {THREE.SkinnedMesh} mesh\n   * @param {Physics} physics\n   */\n  function MMDPhysicsHelper(mesh, physics) {\n    var _this;\n    _classCallCheck(this, MMDPhysicsHelper);\n    _this = _super.call(this);\n    _this.root = mesh;\n    _this.physics = physics;\n    _this.matrix.copy(mesh.matrixWorld);\n    _this.matrixAutoUpdate = false;\n    _this.materials = [];\n    _this.materials.push(new MeshBasicMaterial({\n      color: new Color(16746632),\n      wireframe: true,\n      depthTest: false,\n      depthWrite: false,\n      opacity: 0.25,\n      transparent: true\n    }));\n    _this.materials.push(new MeshBasicMaterial({\n      color: new Color(8978312),\n      wireframe: true,\n      depthTest: false,\n      depthWrite: false,\n      opacity: 0.25,\n      transparent: true\n    }));\n    _this.materials.push(new MeshBasicMaterial({\n      color: new Color(8947967),\n      wireframe: true,\n      depthTest: false,\n      depthWrite: false,\n      opacity: 0.25,\n      transparent: true\n    }));\n    _this._init();\n    return _this;\n  }\n  /**\n   * Frees the GPU-related resources allocated by this instance. Call this method whenever this instance is no longer used in your app.\n   */\n  _createClass(MMDPhysicsHelper, [{\n    key: \"dispose\",\n    value: function dispose() {\n      var materials = this.materials;\n      var children = this.children;\n      for (var i = 0; i < materials.length; i++) {\n        materials[i].dispose();\n      }\n      for (var _i3 = 0; _i3 < children.length; _i3++) {\n        var child = children[_i3];\n        if (child.isMesh) child.geometry.dispose();\n      }\n    }\n    /**\n     * Updates Rigid Bodies visualization.\n     */\n  }, {\n    key: \"updateMatrixWorld\",\n    value: function updateMatrixWorld(force) {\n      var mesh = this.root;\n      if (this.visible) {\n        var bodies = this.physics.bodies;\n        _matrixWorldInv.copy(mesh.matrixWorld).decompose(_position, _quaternion, _scale).compose(_position, _quaternion, _scale.set(1, 1, 1)).invert();\n        for (var i = 0, il = bodies.length; i < il; i++) {\n          var body = bodies[i].body;\n          var child = this.children[i];\n          var tr = body.getCenterOfMassTransform();\n          var origin = tr.getOrigin();\n          var rotation = tr.getRotation();\n          child.position.set(origin.x(), origin.y(), origin.z()).applyMatrix4(_matrixWorldInv);\n          child.quaternion.setFromRotationMatrix(_matrixWorldInv).multiply(_quaternion.set(rotation.x(), rotation.y(), rotation.z(), rotation.w()));\n        }\n      }\n      this.matrix.copy(mesh.matrixWorld).decompose(_position, _quaternion, _scale).compose(_position, _quaternion, _scale.set(1, 1, 1));\n      _get(_getPrototypeOf(MMDPhysicsHelper.prototype), \"updateMatrixWorld\", this).call(this, force);\n    }\n    // private method\n  }, {\n    key: \"_init\",\n    value: function _init() {\n      var bodies = this.physics.bodies;\n      function createGeometry(param2) {\n        switch (param2.shapeType) {\n          case 0:\n            return new SphereGeometry(param2.width, 16, 8);\n          case 1:\n            return new BoxGeometry(param2.width * 2, param2.height * 2, param2.depth * 2, 8, 8, 8);\n          case 2:\n            return new CapsuleGeometry(param2.width, param2.height, 8, 16);\n          default:\n            return null;\n        }\n      }\n      for (var i = 0, il = bodies.length; i < il; i++) {\n        var param = bodies[i].params;\n        this.add(new Mesh(createGeometry(param), this.materials[param.type]));\n      }\n    }\n  }]);\n  return MMDPhysicsHelper;\n}(Object3D);\nexport { MMDPhysics };","map":{"version":3,"names":["Vector3","Matrix4","Quaternion","Euler","Bone","Object3D","MeshBasicMaterial","Color","BoxGeometry","SphereGeometry","Mesh","CapsuleGeometry","MMDPhysics","mesh","rigidBodyParams","constraintParams","arguments","length","undefined","params","_classCallCheck","Ammo","Error","manager","ResourceManager","unitStep","maxStepNum","gravity","copy","world","bodies","constraints","_init","_createClass","key","value","update","delta","isNonDefaultScale","position","allocThreeVector3","quaternion","allocThreeQuaternion","scale","matrixWorld","decompose","x","y","z","parent","set","updateMatrixWorld","_updateRigidBodies","_stepSimulation","_updateBones","freeThreeVector3","freeThreeQuaternion","reset","i","il","warmup","cycles","setGravity","btVector3","createHelper","MMDPhysicsHelper","currentPosition","currentQuaternion","currentScale","_createWorld","_initRigidBodies","_initConstraints","config","btDefaultCollisionConfiguration","dispatcher","btCollisionDispatcher","cache","btDbvtBroadphase","solver","btSequentialImpulseConstraintSolver","btDiscreteDynamicsWorld","rigidBodies","push","RigidBody","bodyA","rigidBodyIndex1","bodyB","rigidBodyIndex2","Constraint","stepTime","stepSimulation","updateFromBone","updateBone","threeVector3s","threeMatrix4s","threeQuaternions","threeEulers","transforms","quaternions","vector3s","pop","v","allocThreeMatrix4","freeThreeMatrix4","m","q","allocThreeEuler","freeThreeEuler","e","allocTransform","btTransform","freeTransform","t","allocQuaternion","btQuaternion","freeQuaternion","allocVector3","freeVector3","setIdentity","getBasis","getRotation","getBasisAsMatrix3","quaternionToMatrix3","getOrigin","setOrigin","setValue","copyOrigin","t1","t2","o","setBasis","setRotation","setBasisFromMatrix3","matrix3ToQuaternion","setOriginFromArray3","a","setOriginFromThreeVector3","setBasisFromArray3","thQ","thE","setBasisFromThreeQuaternion","setFromEuler","setX","setY","setZ","setW","w","multiplyTransforms","m1","m2","o1","o2","v1","multiplyMatrix3ByVector3","v2","addVector3","m3","multiplyMatrices3","inverseTransform","transposeMatrix3","negativeVector3","v10","rowOfMatrix3","v11","v12","v20","columnOfMatrix3","v21","v22","dotVectors3","v4","v0","xx","yy","zz","xy","yz","zx","xw","yw","zw","s","Math","sqrt","body","bone","boneOffsetForm","boneOffsetFormInverse","_setTransformFromBone","boneIndex","type","_updateBoneRotation","_updateBonePosition","_setPositionFromBone","generateShape","p","shapeType","btSphereShape","width","btBoxShape","height","depth","btCapsuleShape","bones","skeleton","shape","weight","localInertia","calculateLocalInertia","rotation","vector","boneForm","getWorldPosition","form","state","btDefaultMotionState","info","btRigidBodyConstructionInfo","set_m_friction","friction","set_m_restitution","restitution","btRigidBody","setCollisionFlags","getCollisionFlags","setActivationState","setDamping","positionDamping","rotationDamping","setSleepingThresholds","addRigidBody","groupIndex","groupTarget","_getBoneTransform","tr","_getWorldTransformForBone","getCenterOfMassTransform","setCenterOfMassTransform","getMotionState","setWorldTransform","getWorldTransform","thQ2","thQ3","setFromRotationMatrix","conjugate","multiply","matrix","normalize","thV","worldToLocal","constraint","formA","formB","formInverseA","formInverseB","formA2","formB2","btGeneric6DofSpringConstraint","lll","lul","all","aul","translationLimitation1","translationLimitation2","rotationLimitation1","rotationLimitation2","setLinearLowerLimit","setLinearUpperLimit","setAngularLowerLimit","setAngularUpperLimit","springPosition","enableSpring","setStiffness","springRotation","setParam","addConstraint","_position","_quaternion","_scale","_matrixWorldInv","_Object3D","_inherits","_super","_createSuper","physics","_this","call","root","matrixAutoUpdate","materials","color","wireframe","depthTest","depthWrite","opacity","transparent","dispose","children","child","isMesh","geometry","force","visible","compose","invert","origin","applyMatrix4","_get","_getPrototypeOf","prototype","createGeometry","param2","param","add"],"sources":["/home/krug/Coding/JavaScript/Websites/Personal/personal/node_modules/.pnpm/three-stdlib@2.23.7_three@0.151.3/node_modules/three-stdlib/animation/MMDPhysics.js"],"sourcesContent":["import { Vector3, Matrix4, Quaternion, Euler, Bone, Object3D, MeshBasicMaterial, Color, BoxGeometry, SphereGeometry, Mesh } from \"three\";\nimport { CapsuleGeometry } from \"../_polyfill/CapsuleGeometry.js\";\nclass MMDPhysics {\n  /**\n   * @param {THREE.SkinnedMesh} mesh\n   * @param {Array<Object>} rigidBodyParams\n   * @param {Array<Object>} (optional) constraintParams\n   * @param {Object} params - (optional)\n   * @param {Number} params.unitStep - Default is 1 / 65.\n   * @param {Integer} params.maxStepNum - Default is 3.\n   * @param {Vector3} params.gravity - Default is ( 0, - 9.8 * 10, 0 )\n   */\n  constructor(mesh, rigidBodyParams, constraintParams = [], params = {}) {\n    if (typeof Ammo === \"undefined\") {\n      throw new Error(\"THREE.MMDPhysics: Import ammo.js https://github.com/kripken/ammo.js\");\n    }\n    this.manager = new ResourceManager();\n    this.mesh = mesh;\n    this.unitStep = params.unitStep !== void 0 ? params.unitStep : 1 / 65;\n    this.maxStepNum = params.maxStepNum !== void 0 ? params.maxStepNum : 3;\n    this.gravity = new Vector3(0, -9.8 * 10, 0);\n    if (params.gravity !== void 0)\n      this.gravity.copy(params.gravity);\n    this.world = params.world !== void 0 ? params.world : null;\n    this.bodies = [];\n    this.constraints = [];\n    this._init(mesh, rigidBodyParams, constraintParams);\n  }\n  /**\n   * Advances Physics calculation and updates bones.\n   *\n   * @param {Number} delta - time in second\n   * @return {MMDPhysics}\n   */\n  update(delta) {\n    const manager = this.manager;\n    const mesh = this.mesh;\n    let isNonDefaultScale = false;\n    const position = manager.allocThreeVector3();\n    const quaternion = manager.allocThreeQuaternion();\n    const scale = manager.allocThreeVector3();\n    mesh.matrixWorld.decompose(position, quaternion, scale);\n    if (scale.x !== 1 || scale.y !== 1 || scale.z !== 1) {\n      isNonDefaultScale = true;\n    }\n    let parent;\n    if (isNonDefaultScale) {\n      parent = mesh.parent;\n      if (parent !== null)\n        mesh.parent = null;\n      scale.copy(this.mesh.scale);\n      mesh.scale.set(1, 1, 1);\n      mesh.updateMatrixWorld(true);\n    }\n    this._updateRigidBodies();\n    this._stepSimulation(delta);\n    this._updateBones();\n    if (isNonDefaultScale) {\n      if (parent !== null)\n        mesh.parent = parent;\n      mesh.scale.copy(scale);\n    }\n    manager.freeThreeVector3(scale);\n    manager.freeThreeQuaternion(quaternion);\n    manager.freeThreeVector3(position);\n    return this;\n  }\n  /**\n   * Resets rigid bodies transorm to current bone's.\n   *\n   * @return {MMDPhysics}\n   */\n  reset() {\n    for (let i = 0, il = this.bodies.length; i < il; i++) {\n      this.bodies[i].reset();\n    }\n    return this;\n  }\n  /**\n   * Warm ups Rigid bodies. Calculates cycles steps.\n   *\n   * @param {Integer} cycles\n   * @return {MMDPhysics}\n   */\n  warmup(cycles) {\n    for (let i = 0; i < cycles; i++) {\n      this.update(1 / 60);\n    }\n    return this;\n  }\n  /**\n   * Sets gravity.\n   *\n   * @param {Vector3} gravity\n   * @return {MMDPhysicsHelper}\n   */\n  setGravity(gravity) {\n    this.world.setGravity(new Ammo.btVector3(gravity.x, gravity.y, gravity.z));\n    this.gravity.copy(gravity);\n    return this;\n  }\n  /**\n   * Creates MMDPhysicsHelper\n   *\n   * @return {MMDPhysicsHelper}\n   */\n  createHelper() {\n    return new MMDPhysicsHelper(this.mesh, this);\n  }\n  // private methods\n  _init(mesh, rigidBodyParams, constraintParams) {\n    const manager = this.manager;\n    const parent = mesh.parent;\n    if (parent !== null)\n      mesh.parent = null;\n    const currentPosition = manager.allocThreeVector3();\n    const currentQuaternion = manager.allocThreeQuaternion();\n    const currentScale = manager.allocThreeVector3();\n    currentPosition.copy(mesh.position);\n    currentQuaternion.copy(mesh.quaternion);\n    currentScale.copy(mesh.scale);\n    mesh.position.set(0, 0, 0);\n    mesh.quaternion.set(0, 0, 0, 1);\n    mesh.scale.set(1, 1, 1);\n    mesh.updateMatrixWorld(true);\n    if (this.world === null) {\n      this.world = this._createWorld();\n      this.setGravity(this.gravity);\n    }\n    this._initRigidBodies(rigidBodyParams);\n    this._initConstraints(constraintParams);\n    if (parent !== null)\n      mesh.parent = parent;\n    mesh.position.copy(currentPosition);\n    mesh.quaternion.copy(currentQuaternion);\n    mesh.scale.copy(currentScale);\n    mesh.updateMatrixWorld(true);\n    this.reset();\n    manager.freeThreeVector3(currentPosition);\n    manager.freeThreeQuaternion(currentQuaternion);\n    manager.freeThreeVector3(currentScale);\n  }\n  _createWorld() {\n    const config = new Ammo.btDefaultCollisionConfiguration();\n    const dispatcher = new Ammo.btCollisionDispatcher(config);\n    const cache = new Ammo.btDbvtBroadphase();\n    const solver = new Ammo.btSequentialImpulseConstraintSolver();\n    const world = new Ammo.btDiscreteDynamicsWorld(dispatcher, cache, solver, config);\n    return world;\n  }\n  _initRigidBodies(rigidBodies) {\n    for (let i = 0, il = rigidBodies.length; i < il; i++) {\n      this.bodies.push(new RigidBody(this.mesh, this.world, rigidBodies[i], this.manager));\n    }\n  }\n  _initConstraints(constraints) {\n    for (let i = 0, il = constraints.length; i < il; i++) {\n      const params = constraints[i];\n      const bodyA = this.bodies[params.rigidBodyIndex1];\n      const bodyB = this.bodies[params.rigidBodyIndex2];\n      this.constraints.push(new Constraint(this.mesh, this.world, bodyA, bodyB, params, this.manager));\n    }\n  }\n  _stepSimulation(delta) {\n    const unitStep = this.unitStep;\n    let stepTime = delta;\n    let maxStepNum = (delta / unitStep | 0) + 1;\n    if (stepTime < unitStep) {\n      stepTime = unitStep;\n      maxStepNum = 1;\n    }\n    if (maxStepNum > this.maxStepNum) {\n      maxStepNum = this.maxStepNum;\n    }\n    this.world.stepSimulation(stepTime, maxStepNum, unitStep);\n  }\n  _updateRigidBodies() {\n    for (let i = 0, il = this.bodies.length; i < il; i++) {\n      this.bodies[i].updateFromBone();\n    }\n  }\n  _updateBones() {\n    for (let i = 0, il = this.bodies.length; i < il; i++) {\n      this.bodies[i].updateBone();\n    }\n  }\n}\nclass ResourceManager {\n  constructor() {\n    this.threeVector3s = [];\n    this.threeMatrix4s = [];\n    this.threeQuaternions = [];\n    this.threeEulers = [];\n    this.transforms = [];\n    this.quaternions = [];\n    this.vector3s = [];\n  }\n  allocThreeVector3() {\n    return this.threeVector3s.length > 0 ? this.threeVector3s.pop() : new Vector3();\n  }\n  freeThreeVector3(v) {\n    this.threeVector3s.push(v);\n  }\n  allocThreeMatrix4() {\n    return this.threeMatrix4s.length > 0 ? this.threeMatrix4s.pop() : new Matrix4();\n  }\n  freeThreeMatrix4(m) {\n    this.threeMatrix4s.push(m);\n  }\n  allocThreeQuaternion() {\n    return this.threeQuaternions.length > 0 ? this.threeQuaternions.pop() : new Quaternion();\n  }\n  freeThreeQuaternion(q) {\n    this.threeQuaternions.push(q);\n  }\n  allocThreeEuler() {\n    return this.threeEulers.length > 0 ? this.threeEulers.pop() : new Euler();\n  }\n  freeThreeEuler(e) {\n    this.threeEulers.push(e);\n  }\n  allocTransform() {\n    return this.transforms.length > 0 ? this.transforms.pop() : new Ammo.btTransform();\n  }\n  freeTransform(t) {\n    this.transforms.push(t);\n  }\n  allocQuaternion() {\n    return this.quaternions.length > 0 ? this.quaternions.pop() : new Ammo.btQuaternion();\n  }\n  freeQuaternion(q) {\n    this.quaternions.push(q);\n  }\n  allocVector3() {\n    return this.vector3s.length > 0 ? this.vector3s.pop() : new Ammo.btVector3();\n  }\n  freeVector3(v) {\n    this.vector3s.push(v);\n  }\n  setIdentity(t) {\n    t.setIdentity();\n  }\n  getBasis(t) {\n    var q = this.allocQuaternion();\n    t.getBasis().getRotation(q);\n    return q;\n  }\n  getBasisAsMatrix3(t) {\n    var q = this.getBasis(t);\n    var m = this.quaternionToMatrix3(q);\n    this.freeQuaternion(q);\n    return m;\n  }\n  getOrigin(t) {\n    return t.getOrigin();\n  }\n  setOrigin(t, v) {\n    t.getOrigin().setValue(v.x(), v.y(), v.z());\n  }\n  copyOrigin(t1, t2) {\n    var o = t2.getOrigin();\n    this.setOrigin(t1, o);\n  }\n  setBasis(t, q) {\n    t.setRotation(q);\n  }\n  setBasisFromMatrix3(t, m) {\n    var q = this.matrix3ToQuaternion(m);\n    this.setBasis(t, q);\n    this.freeQuaternion(q);\n  }\n  setOriginFromArray3(t, a) {\n    t.getOrigin().setValue(a[0], a[1], a[2]);\n  }\n  setOriginFromThreeVector3(t, v) {\n    t.getOrigin().setValue(v.x, v.y, v.z);\n  }\n  setBasisFromArray3(t, a) {\n    var thQ = this.allocThreeQuaternion();\n    var thE = this.allocThreeEuler();\n    thE.set(a[0], a[1], a[2]);\n    this.setBasisFromThreeQuaternion(t, thQ.setFromEuler(thE));\n    this.freeThreeEuler(thE);\n    this.freeThreeQuaternion(thQ);\n  }\n  setBasisFromThreeQuaternion(t, a) {\n    var q = this.allocQuaternion();\n    q.setX(a.x);\n    q.setY(a.y);\n    q.setZ(a.z);\n    q.setW(a.w);\n    this.setBasis(t, q);\n    this.freeQuaternion(q);\n  }\n  multiplyTransforms(t1, t2) {\n    var t = this.allocTransform();\n    this.setIdentity(t);\n    var m1 = this.getBasisAsMatrix3(t1);\n    var m2 = this.getBasisAsMatrix3(t2);\n    var o1 = this.getOrigin(t1);\n    var o2 = this.getOrigin(t2);\n    var v1 = this.multiplyMatrix3ByVector3(m1, o2);\n    var v2 = this.addVector3(v1, o1);\n    this.setOrigin(t, v2);\n    var m3 = this.multiplyMatrices3(m1, m2);\n    this.setBasisFromMatrix3(t, m3);\n    this.freeVector3(v1);\n    this.freeVector3(v2);\n    return t;\n  }\n  inverseTransform(t) {\n    var t2 = this.allocTransform();\n    var m1 = this.getBasisAsMatrix3(t);\n    var o = this.getOrigin(t);\n    var m2 = this.transposeMatrix3(m1);\n    var v1 = this.negativeVector3(o);\n    var v2 = this.multiplyMatrix3ByVector3(m2, v1);\n    this.setOrigin(t2, v2);\n    this.setBasisFromMatrix3(t2, m2);\n    this.freeVector3(v1);\n    this.freeVector3(v2);\n    return t2;\n  }\n  multiplyMatrices3(m1, m2) {\n    var m3 = [];\n    var v10 = this.rowOfMatrix3(m1, 0);\n    var v11 = this.rowOfMatrix3(m1, 1);\n    var v12 = this.rowOfMatrix3(m1, 2);\n    var v20 = this.columnOfMatrix3(m2, 0);\n    var v21 = this.columnOfMatrix3(m2, 1);\n    var v22 = this.columnOfMatrix3(m2, 2);\n    m3[0] = this.dotVectors3(v10, v20);\n    m3[1] = this.dotVectors3(v10, v21);\n    m3[2] = this.dotVectors3(v10, v22);\n    m3[3] = this.dotVectors3(v11, v20);\n    m3[4] = this.dotVectors3(v11, v21);\n    m3[5] = this.dotVectors3(v11, v22);\n    m3[6] = this.dotVectors3(v12, v20);\n    m3[7] = this.dotVectors3(v12, v21);\n    m3[8] = this.dotVectors3(v12, v22);\n    this.freeVector3(v10);\n    this.freeVector3(v11);\n    this.freeVector3(v12);\n    this.freeVector3(v20);\n    this.freeVector3(v21);\n    this.freeVector3(v22);\n    return m3;\n  }\n  addVector3(v1, v2) {\n    var v = this.allocVector3();\n    v.setValue(v1.x() + v2.x(), v1.y() + v2.y(), v1.z() + v2.z());\n    return v;\n  }\n  dotVectors3(v1, v2) {\n    return v1.x() * v2.x() + v1.y() * v2.y() + v1.z() * v2.z();\n  }\n  rowOfMatrix3(m, i) {\n    var v = this.allocVector3();\n    v.setValue(m[i * 3 + 0], m[i * 3 + 1], m[i * 3 + 2]);\n    return v;\n  }\n  columnOfMatrix3(m, i) {\n    var v = this.allocVector3();\n    v.setValue(m[i + 0], m[i + 3], m[i + 6]);\n    return v;\n  }\n  negativeVector3(v) {\n    var v2 = this.allocVector3();\n    v2.setValue(-v.x(), -v.y(), -v.z());\n    return v2;\n  }\n  multiplyMatrix3ByVector3(m, v) {\n    var v4 = this.allocVector3();\n    var v0 = this.rowOfMatrix3(m, 0);\n    var v1 = this.rowOfMatrix3(m, 1);\n    var v2 = this.rowOfMatrix3(m, 2);\n    var x = this.dotVectors3(v0, v);\n    var y = this.dotVectors3(v1, v);\n    var z = this.dotVectors3(v2, v);\n    v4.setValue(x, y, z);\n    this.freeVector3(v0);\n    this.freeVector3(v1);\n    this.freeVector3(v2);\n    return v4;\n  }\n  transposeMatrix3(m) {\n    var m2 = [];\n    m2[0] = m[0];\n    m2[1] = m[3];\n    m2[2] = m[6];\n    m2[3] = m[1];\n    m2[4] = m[4];\n    m2[5] = m[7];\n    m2[6] = m[2];\n    m2[7] = m[5];\n    m2[8] = m[8];\n    return m2;\n  }\n  quaternionToMatrix3(q) {\n    var m = [];\n    var x = q.x();\n    var y = q.y();\n    var z = q.z();\n    var w = q.w();\n    var xx = x * x;\n    var yy = y * y;\n    var zz = z * z;\n    var xy = x * y;\n    var yz = y * z;\n    var zx = z * x;\n    var xw = x * w;\n    var yw = y * w;\n    var zw = z * w;\n    m[0] = 1 - 2 * (yy + zz);\n    m[1] = 2 * (xy - zw);\n    m[2] = 2 * (zx + yw);\n    m[3] = 2 * (xy + zw);\n    m[4] = 1 - 2 * (zz + xx);\n    m[5] = 2 * (yz - xw);\n    m[6] = 2 * (zx - yw);\n    m[7] = 2 * (yz + xw);\n    m[8] = 1 - 2 * (xx + yy);\n    return m;\n  }\n  matrix3ToQuaternion(m) {\n    var t = m[0] + m[4] + m[8];\n    var s, x, y, z, w;\n    if (t > 0) {\n      s = Math.sqrt(t + 1) * 2;\n      w = 0.25 * s;\n      x = (m[7] - m[5]) / s;\n      y = (m[2] - m[6]) / s;\n      z = (m[3] - m[1]) / s;\n    } else if (m[0] > m[4] && m[0] > m[8]) {\n      s = Math.sqrt(1 + m[0] - m[4] - m[8]) * 2;\n      w = (m[7] - m[5]) / s;\n      x = 0.25 * s;\n      y = (m[1] + m[3]) / s;\n      z = (m[2] + m[6]) / s;\n    } else if (m[4] > m[8]) {\n      s = Math.sqrt(1 + m[4] - m[0] - m[8]) * 2;\n      w = (m[2] - m[6]) / s;\n      x = (m[1] + m[3]) / s;\n      y = 0.25 * s;\n      z = (m[5] + m[7]) / s;\n    } else {\n      s = Math.sqrt(1 + m[8] - m[0] - m[4]) * 2;\n      w = (m[3] - m[1]) / s;\n      x = (m[2] + m[6]) / s;\n      y = (m[5] + m[7]) / s;\n      z = 0.25 * s;\n    }\n    var q = this.allocQuaternion();\n    q.setX(x);\n    q.setY(y);\n    q.setZ(z);\n    q.setW(w);\n    return q;\n  }\n}\nclass RigidBody {\n  constructor(mesh, world, params, manager) {\n    this.mesh = mesh;\n    this.world = world;\n    this.params = params;\n    this.manager = manager;\n    this.body = null;\n    this.bone = null;\n    this.boneOffsetForm = null;\n    this.boneOffsetFormInverse = null;\n    this._init();\n  }\n  /**\n   * Resets rigid body transform to the current bone's.\n   *\n   * @return {RigidBody}\n   */\n  reset() {\n    this._setTransformFromBone();\n    return this;\n  }\n  /**\n   * Updates rigid body's transform from the current bone.\n   *\n   * @return {RidigBody}\n   */\n  updateFromBone() {\n    if (this.params.boneIndex !== -1 && this.params.type === 0) {\n      this._setTransformFromBone();\n    }\n    return this;\n  }\n  /**\n   * Updates bone from the current ridid body's transform.\n   *\n   * @return {RidigBody}\n   */\n  updateBone() {\n    if (this.params.type === 0 || this.params.boneIndex === -1) {\n      return this;\n    }\n    this._updateBoneRotation();\n    if (this.params.type === 1) {\n      this._updateBonePosition();\n    }\n    this.bone.updateMatrixWorld(true);\n    if (this.params.type === 2) {\n      this._setPositionFromBone();\n    }\n    return this;\n  }\n  // private methods\n  _init() {\n    function generateShape(p) {\n      switch (p.shapeType) {\n        case 0:\n          return new Ammo.btSphereShape(p.width);\n        case 1:\n          return new Ammo.btBoxShape(new Ammo.btVector3(p.width, p.height, p.depth));\n        case 2:\n          return new Ammo.btCapsuleShape(p.width, p.height);\n        default:\n          throw new Error(\"unknown shape type \" + p.shapeType);\n      }\n    }\n    const manager = this.manager;\n    const params = this.params;\n    const bones = this.mesh.skeleton.bones;\n    const bone = params.boneIndex === -1 ? new Bone() : bones[params.boneIndex];\n    const shape = generateShape(params);\n    const weight = params.type === 0 ? 0 : params.weight;\n    const localInertia = manager.allocVector3();\n    localInertia.setValue(0, 0, 0);\n    if (weight !== 0) {\n      shape.calculateLocalInertia(weight, localInertia);\n    }\n    const boneOffsetForm = manager.allocTransform();\n    manager.setIdentity(boneOffsetForm);\n    manager.setOriginFromArray3(boneOffsetForm, params.position);\n    manager.setBasisFromArray3(boneOffsetForm, params.rotation);\n    const vector = manager.allocThreeVector3();\n    const boneForm = manager.allocTransform();\n    manager.setIdentity(boneForm);\n    manager.setOriginFromThreeVector3(boneForm, bone.getWorldPosition(vector));\n    const form = manager.multiplyTransforms(boneForm, boneOffsetForm);\n    const state = new Ammo.btDefaultMotionState(form);\n    const info = new Ammo.btRigidBodyConstructionInfo(weight, state, shape, localInertia);\n    info.set_m_friction(params.friction);\n    info.set_m_restitution(params.restitution);\n    const body = new Ammo.btRigidBody(info);\n    if (params.type === 0) {\n      body.setCollisionFlags(body.getCollisionFlags() | 2);\n      body.setActivationState(4);\n    }\n    body.setDamping(params.positionDamping, params.rotationDamping);\n    body.setSleepingThresholds(0, 0);\n    this.world.addRigidBody(body, 1 << params.groupIndex, params.groupTarget);\n    this.body = body;\n    this.bone = bone;\n    this.boneOffsetForm = boneOffsetForm;\n    this.boneOffsetFormInverse = manager.inverseTransform(boneOffsetForm);\n    manager.freeVector3(localInertia);\n    manager.freeTransform(form);\n    manager.freeTransform(boneForm);\n    manager.freeThreeVector3(vector);\n  }\n  _getBoneTransform() {\n    const manager = this.manager;\n    const p = manager.allocThreeVector3();\n    const q = manager.allocThreeQuaternion();\n    const s = manager.allocThreeVector3();\n    this.bone.matrixWorld.decompose(p, q, s);\n    const tr = manager.allocTransform();\n    manager.setOriginFromThreeVector3(tr, p);\n    manager.setBasisFromThreeQuaternion(tr, q);\n    const form = manager.multiplyTransforms(tr, this.boneOffsetForm);\n    manager.freeTransform(tr);\n    manager.freeThreeVector3(s);\n    manager.freeThreeQuaternion(q);\n    manager.freeThreeVector3(p);\n    return form;\n  }\n  _getWorldTransformForBone() {\n    const manager = this.manager;\n    const tr = this.body.getCenterOfMassTransform();\n    return manager.multiplyTransforms(tr, this.boneOffsetFormInverse);\n  }\n  _setTransformFromBone() {\n    const manager = this.manager;\n    const form = this._getBoneTransform();\n    this.body.setCenterOfMassTransform(form);\n    this.body.getMotionState().setWorldTransform(form);\n    manager.freeTransform(form);\n  }\n  _setPositionFromBone() {\n    const manager = this.manager;\n    const form = this._getBoneTransform();\n    const tr = manager.allocTransform();\n    this.body.getMotionState().getWorldTransform(tr);\n    manager.copyOrigin(tr, form);\n    this.body.setCenterOfMassTransform(tr);\n    this.body.getMotionState().setWorldTransform(tr);\n    manager.freeTransform(tr);\n    manager.freeTransform(form);\n  }\n  _updateBoneRotation() {\n    const manager = this.manager;\n    const tr = this._getWorldTransformForBone();\n    const q = manager.getBasis(tr);\n    const thQ = manager.allocThreeQuaternion();\n    const thQ2 = manager.allocThreeQuaternion();\n    const thQ3 = manager.allocThreeQuaternion();\n    thQ.set(q.x(), q.y(), q.z(), q.w());\n    thQ2.setFromRotationMatrix(this.bone.matrixWorld);\n    thQ2.conjugate();\n    thQ2.multiply(thQ);\n    thQ3.setFromRotationMatrix(this.bone.matrix);\n    this.bone.quaternion.copy(thQ2.multiply(thQ3).normalize());\n    manager.freeThreeQuaternion(thQ);\n    manager.freeThreeQuaternion(thQ2);\n    manager.freeThreeQuaternion(thQ3);\n    manager.freeQuaternion(q);\n    manager.freeTransform(tr);\n  }\n  _updateBonePosition() {\n    const manager = this.manager;\n    const tr = this._getWorldTransformForBone();\n    const thV = manager.allocThreeVector3();\n    const o = manager.getOrigin(tr);\n    thV.set(o.x(), o.y(), o.z());\n    if (this.bone.parent) {\n      this.bone.parent.worldToLocal(thV);\n    }\n    this.bone.position.copy(thV);\n    manager.freeThreeVector3(thV);\n    manager.freeTransform(tr);\n  }\n}\nclass Constraint {\n  /**\n   * @param {THREE.SkinnedMesh} mesh\n   * @param {Ammo.btDiscreteDynamicsWorld} world\n   * @param {RigidBody} bodyA\n   * @param {RigidBody} bodyB\n   * @param {Object} params\n   * @param {ResourceManager} manager\n   */\n  constructor(mesh, world, bodyA, bodyB, params, manager) {\n    this.mesh = mesh;\n    this.world = world;\n    this.bodyA = bodyA;\n    this.bodyB = bodyB;\n    this.params = params;\n    this.manager = manager;\n    this.constraint = null;\n    this._init();\n  }\n  // private method\n  _init() {\n    const manager = this.manager;\n    const params = this.params;\n    const bodyA = this.bodyA;\n    const bodyB = this.bodyB;\n    const form = manager.allocTransform();\n    manager.setIdentity(form);\n    manager.setOriginFromArray3(form, params.position);\n    manager.setBasisFromArray3(form, params.rotation);\n    const formA = manager.allocTransform();\n    const formB = manager.allocTransform();\n    bodyA.body.getMotionState().getWorldTransform(formA);\n    bodyB.body.getMotionState().getWorldTransform(formB);\n    const formInverseA = manager.inverseTransform(formA);\n    const formInverseB = manager.inverseTransform(formB);\n    const formA2 = manager.multiplyTransforms(formInverseA, form);\n    const formB2 = manager.multiplyTransforms(formInverseB, form);\n    const constraint = new Ammo.btGeneric6DofSpringConstraint(bodyA.body, bodyB.body, formA2, formB2, true);\n    const lll = manager.allocVector3();\n    const lul = manager.allocVector3();\n    const all = manager.allocVector3();\n    const aul = manager.allocVector3();\n    lll.setValue(params.translationLimitation1[0], params.translationLimitation1[1], params.translationLimitation1[2]);\n    lul.setValue(params.translationLimitation2[0], params.translationLimitation2[1], params.translationLimitation2[2]);\n    all.setValue(params.rotationLimitation1[0], params.rotationLimitation1[1], params.rotationLimitation1[2]);\n    aul.setValue(params.rotationLimitation2[0], params.rotationLimitation2[1], params.rotationLimitation2[2]);\n    constraint.setLinearLowerLimit(lll);\n    constraint.setLinearUpperLimit(lul);\n    constraint.setAngularLowerLimit(all);\n    constraint.setAngularUpperLimit(aul);\n    for (let i = 0; i < 3; i++) {\n      if (params.springPosition[i] !== 0) {\n        constraint.enableSpring(i, true);\n        constraint.setStiffness(i, params.springPosition[i]);\n      }\n    }\n    for (let i = 0; i < 3; i++) {\n      if (params.springRotation[i] !== 0) {\n        constraint.enableSpring(i + 3, true);\n        constraint.setStiffness(i + 3, params.springRotation[i]);\n      }\n    }\n    if (constraint.setParam !== void 0) {\n      for (let i = 0; i < 6; i++) {\n        constraint.setParam(2, 0.475, i);\n      }\n    }\n    this.world.addConstraint(constraint, true);\n    this.constraint = constraint;\n    manager.freeTransform(form);\n    manager.freeTransform(formA);\n    manager.freeTransform(formB);\n    manager.freeTransform(formInverseA);\n    manager.freeTransform(formInverseB);\n    manager.freeTransform(formA2);\n    manager.freeTransform(formB2);\n    manager.freeVector3(lll);\n    manager.freeVector3(lul);\n    manager.freeVector3(all);\n    manager.freeVector3(aul);\n  }\n}\nconst _position = /* @__PURE__ */ new Vector3();\nconst _quaternion = /* @__PURE__ */ new Quaternion();\nconst _scale = /* @__PURE__ */ new Vector3();\nconst _matrixWorldInv = /* @__PURE__ */ new Matrix4();\nclass MMDPhysicsHelper extends Object3D {\n  /**\n   * Visualize Rigid bodies\n   *\n   * @param {THREE.SkinnedMesh} mesh\n   * @param {Physics} physics\n   */\n  constructor(mesh, physics) {\n    super();\n    this.root = mesh;\n    this.physics = physics;\n    this.matrix.copy(mesh.matrixWorld);\n    this.matrixAutoUpdate = false;\n    this.materials = [];\n    this.materials.push(\n      new MeshBasicMaterial({\n        color: new Color(16746632),\n        wireframe: true,\n        depthTest: false,\n        depthWrite: false,\n        opacity: 0.25,\n        transparent: true\n      })\n    );\n    this.materials.push(\n      new MeshBasicMaterial({\n        color: new Color(8978312),\n        wireframe: true,\n        depthTest: false,\n        depthWrite: false,\n        opacity: 0.25,\n        transparent: true\n      })\n    );\n    this.materials.push(\n      new MeshBasicMaterial({\n        color: new Color(8947967),\n        wireframe: true,\n        depthTest: false,\n        depthWrite: false,\n        opacity: 0.25,\n        transparent: true\n      })\n    );\n    this._init();\n  }\n  /**\n   * Frees the GPU-related resources allocated by this instance. Call this method whenever this instance is no longer used in your app.\n   */\n  dispose() {\n    const materials = this.materials;\n    const children = this.children;\n    for (let i = 0; i < materials.length; i++) {\n      materials[i].dispose();\n    }\n    for (let i = 0; i < children.length; i++) {\n      const child = children[i];\n      if (child.isMesh)\n        child.geometry.dispose();\n    }\n  }\n  /**\n   * Updates Rigid Bodies visualization.\n   */\n  updateMatrixWorld(force) {\n    var mesh = this.root;\n    if (this.visible) {\n      var bodies = this.physics.bodies;\n      _matrixWorldInv.copy(mesh.matrixWorld).decompose(_position, _quaternion, _scale).compose(_position, _quaternion, _scale.set(1, 1, 1)).invert();\n      for (var i = 0, il = bodies.length; i < il; i++) {\n        var body = bodies[i].body;\n        var child = this.children[i];\n        var tr = body.getCenterOfMassTransform();\n        var origin = tr.getOrigin();\n        var rotation = tr.getRotation();\n        child.position.set(origin.x(), origin.y(), origin.z()).applyMatrix4(_matrixWorldInv);\n        child.quaternion.setFromRotationMatrix(_matrixWorldInv).multiply(_quaternion.set(rotation.x(), rotation.y(), rotation.z(), rotation.w()));\n      }\n    }\n    this.matrix.copy(mesh.matrixWorld).decompose(_position, _quaternion, _scale).compose(_position, _quaternion, _scale.set(1, 1, 1));\n    super.updateMatrixWorld(force);\n  }\n  // private method\n  _init() {\n    var bodies = this.physics.bodies;\n    function createGeometry(param2) {\n      switch (param2.shapeType) {\n        case 0:\n          return new SphereGeometry(param2.width, 16, 8);\n        case 1:\n          return new BoxGeometry(param2.width * 2, param2.height * 2, param2.depth * 2, 8, 8, 8);\n        case 2:\n          return new CapsuleGeometry(param2.width, param2.height, 8, 16);\n        default:\n          return null;\n      }\n    }\n    for (var i = 0, il = bodies.length; i < il; i++) {\n      var param = bodies[i].params;\n      this.add(new Mesh(createGeometry(param), this.materials[param.type]));\n    }\n  }\n}\nexport {\n  MMDPhysics\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}