{"ast":null,"code":"import _classCallCheck from \"/home/krug/Coding/JavaScript/Websites/Personal/personal/node_modules/.pnpm/@babel+runtime@7.22.3/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/home/krug/Coding/JavaScript/Websites/Personal/personal/node_modules/.pnpm/@babel+runtime@7.22.3/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _assertThisInitialized from \"/home/krug/Coding/JavaScript/Websites/Personal/personal/node_modules/.pnpm/@babel+runtime@7.22.3/node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js\";\nimport _inherits from \"/home/krug/Coding/JavaScript/Websites/Personal/personal/node_modules/.pnpm/@babel+runtime@7.22.3/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/home/krug/Coding/JavaScript/Websites/Personal/personal/node_modules/.pnpm/@babel+runtime@7.22.3/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nvar __defProp = Object.defineProperty;\nvar __defNormalProp = function __defNormalProp(obj, key, value) {\n  return key in obj ? __defProp(obj, key, {\n    enumerable: true,\n    configurable: true,\n    writable: true,\n    value: value\n  }) : obj[key] = value;\n};\nvar __publicField = function __publicField(obj, key, value) {\n  __defNormalProp(obj, typeof key !== \"symbol\" ? key + \"\" : key, value);\n  return value;\n};\nimport { Color, DepthTexture, UnsignedShortType, NearestFilter, WebGLRenderTarget, HalfFloatType, ShaderMaterial, UniformsUtils, NoBlending, MeshNormalMaterial, MeshBasicMaterial, SrcAlphaFactor, OneMinusSrcAlphaFactor, AddEquation, NormalBlending } from \"three\";\nimport { Pass, FullScreenQuad } from \"./Pass.js\";\nimport { SSRShader, SSRBlurShader, SSRDepthShader } from \"../shaders/SSRShader.js\";\nimport { CopyShader } from \"../shaders/CopyShader.js\";\nvar _SSRPass = /*#__PURE__*/function (_Pass) {\n  _inherits(_SSRPass, _Pass);\n  var _super = _createSuper(_SSRPass);\n  function _SSRPass(_ref) {\n    var _this;\n    var renderer = _ref.renderer,\n      scene = _ref.scene,\n      camera = _ref.camera,\n      width = _ref.width,\n      height = _ref.height,\n      selects = _ref.selects,\n      _ref$bouncing = _ref.bouncing,\n      bouncing = _ref$bouncing === void 0 ? false : _ref$bouncing,\n      groundReflector = _ref.groundReflector;\n    _classCallCheck(this, _SSRPass);\n    _this = _super.call(this);\n    _this.width = width !== void 0 ? width : 512;\n    _this.height = height !== void 0 ? height : 512;\n    _this.clear = true;\n    _this.renderer = renderer;\n    _this.scene = scene;\n    _this.camera = camera;\n    _this.groundReflector = groundReflector;\n    _this.opacity = SSRShader.uniforms.opacity.value;\n    _this.output = 0;\n    _this.maxDistance = SSRShader.uniforms.maxDistance.value;\n    _this.thickness = SSRShader.uniforms.thickness.value;\n    _this.tempColor = new Color();\n    _this._selects = selects;\n    _this.selective = Array.isArray(_this._selects);\n    Object.defineProperty(_assertThisInitialized(_this), \"selects\", {\n      get: function get() {\n        return this._selects;\n      },\n      set: function set(val) {\n        if (this._selects === val) return;\n        this._selects = val;\n        if (Array.isArray(val)) {\n          this.selective = true;\n          this.ssrMaterial.defines.SELECTIVE = true;\n          this.ssrMaterial.needsUpdate = true;\n        } else {\n          this.selective = false;\n          this.ssrMaterial.defines.SELECTIVE = false;\n          this.ssrMaterial.needsUpdate = true;\n        }\n      }\n    });\n    _this._bouncing = bouncing;\n    Object.defineProperty(_assertThisInitialized(_this), \"bouncing\", {\n      get: function get() {\n        return this._bouncing;\n      },\n      set: function set(val) {\n        if (this._bouncing === val) return;\n        this._bouncing = val;\n        if (val) {\n          this.ssrMaterial.uniforms[\"tDiffuse\"].value = this.prevRenderTarget.texture;\n        } else {\n          this.ssrMaterial.uniforms[\"tDiffuse\"].value = this.beautyRenderTarget.texture;\n        }\n      }\n    });\n    _this.blur = true;\n    _this._distanceAttenuation = SSRShader.defines.DISTANCE_ATTENUATION;\n    Object.defineProperty(_assertThisInitialized(_this), \"distanceAttenuation\", {\n      get: function get() {\n        return this._distanceAttenuation;\n      },\n      set: function set(val) {\n        if (this._distanceAttenuation === val) return;\n        this._distanceAttenuation = val;\n        this.ssrMaterial.defines.DISTANCE_ATTENUATION = val;\n        this.ssrMaterial.needsUpdate = true;\n      }\n    });\n    _this._fresnel = SSRShader.defines.FRESNEL;\n    Object.defineProperty(_assertThisInitialized(_this), \"fresnel\", {\n      get: function get() {\n        return this._fresnel;\n      },\n      set: function set(val) {\n        if (this._fresnel === val) return;\n        this._fresnel = val;\n        this.ssrMaterial.defines.FRESNEL = val;\n        this.ssrMaterial.needsUpdate = true;\n      }\n    });\n    _this._infiniteThick = SSRShader.defines.INFINITE_THICK;\n    Object.defineProperty(_assertThisInitialized(_this), \"infiniteThick\", {\n      get: function get() {\n        return this._infiniteThick;\n      },\n      set: function set(val) {\n        if (this._infiniteThick === val) return;\n        this._infiniteThick = val;\n        this.ssrMaterial.defines.INFINITE_THICK = val;\n        this.ssrMaterial.needsUpdate = true;\n      }\n    });\n    var depthTexture = new DepthTexture();\n    depthTexture.type = UnsignedShortType;\n    depthTexture.minFilter = NearestFilter;\n    depthTexture.magFilter = NearestFilter;\n    _this.beautyRenderTarget = new WebGLRenderTarget(_this.width, _this.height, {\n      minFilter: NearestFilter,\n      magFilter: NearestFilter,\n      type: HalfFloatType,\n      depthTexture: depthTexture,\n      depthBuffer: true\n    });\n    _this.prevRenderTarget = new WebGLRenderTarget(_this.width, _this.height, {\n      minFilter: NearestFilter,\n      magFilter: NearestFilter\n    });\n    _this.normalRenderTarget = new WebGLRenderTarget(_this.width, _this.height, {\n      minFilter: NearestFilter,\n      magFilter: NearestFilter,\n      type: HalfFloatType\n    });\n    _this.metalnessRenderTarget = new WebGLRenderTarget(_this.width, _this.height, {\n      minFilter: NearestFilter,\n      magFilter: NearestFilter,\n      type: HalfFloatType\n    });\n    _this.ssrRenderTarget = new WebGLRenderTarget(_this.width, _this.height, {\n      minFilter: NearestFilter,\n      magFilter: NearestFilter\n    });\n    _this.blurRenderTarget = _this.ssrRenderTarget.clone();\n    _this.blurRenderTarget2 = _this.ssrRenderTarget.clone();\n    _this.ssrMaterial = new ShaderMaterial({\n      defines: Object.assign({}, SSRShader.defines, {\n        MAX_STEP: Math.sqrt(_this.width * _this.width + _this.height * _this.height)\n      }),\n      uniforms: UniformsUtils.clone(SSRShader.uniforms),\n      vertexShader: SSRShader.vertexShader,\n      fragmentShader: SSRShader.fragmentShader,\n      blending: NoBlending\n    });\n    _this.ssrMaterial.uniforms[\"tDiffuse\"].value = _this.beautyRenderTarget.texture;\n    _this.ssrMaterial.uniforms[\"tNormal\"].value = _this.normalRenderTarget.texture;\n    _this.ssrMaterial.defines.SELECTIVE = _this.selective;\n    _this.ssrMaterial.needsUpdate = true;\n    _this.ssrMaterial.uniforms[\"tMetalness\"].value = _this.metalnessRenderTarget.texture;\n    _this.ssrMaterial.uniforms[\"tDepth\"].value = _this.beautyRenderTarget.depthTexture;\n    _this.ssrMaterial.uniforms[\"cameraNear\"].value = _this.camera.near;\n    _this.ssrMaterial.uniforms[\"cameraFar\"].value = _this.camera.far;\n    _this.ssrMaterial.uniforms[\"thickness\"].value = _this.thickness;\n    _this.ssrMaterial.uniforms[\"resolution\"].value.set(_this.width, _this.height);\n    _this.ssrMaterial.uniforms[\"cameraProjectionMatrix\"].value.copy(_this.camera.projectionMatrix);\n    _this.ssrMaterial.uniforms[\"cameraInverseProjectionMatrix\"].value.copy(_this.camera.projectionMatrixInverse);\n    _this.normalMaterial = new MeshNormalMaterial();\n    _this.normalMaterial.blending = NoBlending;\n    _this.metalnessOnMaterial = new MeshBasicMaterial({\n      color: \"white\"\n    });\n    _this.metalnessOffMaterial = new MeshBasicMaterial({\n      color: \"black\"\n    });\n    _this.blurMaterial = new ShaderMaterial({\n      defines: Object.assign({}, SSRBlurShader.defines),\n      uniforms: UniformsUtils.clone(SSRBlurShader.uniforms),\n      vertexShader: SSRBlurShader.vertexShader,\n      fragmentShader: SSRBlurShader.fragmentShader\n    });\n    _this.blurMaterial.uniforms[\"tDiffuse\"].value = _this.ssrRenderTarget.texture;\n    _this.blurMaterial.uniforms[\"resolution\"].value.set(_this.width, _this.height);\n    _this.blurMaterial2 = new ShaderMaterial({\n      defines: Object.assign({}, SSRBlurShader.defines),\n      uniforms: UniformsUtils.clone(SSRBlurShader.uniforms),\n      vertexShader: SSRBlurShader.vertexShader,\n      fragmentShader: SSRBlurShader.fragmentShader\n    });\n    _this.blurMaterial2.uniforms[\"tDiffuse\"].value = _this.blurRenderTarget.texture;\n    _this.blurMaterial2.uniforms[\"resolution\"].value.set(_this.width, _this.height);\n    _this.depthRenderMaterial = new ShaderMaterial({\n      defines: Object.assign({}, SSRDepthShader.defines),\n      uniforms: UniformsUtils.clone(SSRDepthShader.uniforms),\n      vertexShader: SSRDepthShader.vertexShader,\n      fragmentShader: SSRDepthShader.fragmentShader,\n      blending: NoBlending\n    });\n    _this.depthRenderMaterial.uniforms[\"tDepth\"].value = _this.beautyRenderTarget.depthTexture;\n    _this.depthRenderMaterial.uniforms[\"cameraNear\"].value = _this.camera.near;\n    _this.depthRenderMaterial.uniforms[\"cameraFar\"].value = _this.camera.far;\n    _this.copyMaterial = new ShaderMaterial({\n      uniforms: UniformsUtils.clone(CopyShader.uniforms),\n      vertexShader: CopyShader.vertexShader,\n      fragmentShader: CopyShader.fragmentShader,\n      transparent: true,\n      depthTest: false,\n      depthWrite: false,\n      blendSrc: SrcAlphaFactor,\n      blendDst: OneMinusSrcAlphaFactor,\n      blendEquation: AddEquation,\n      blendSrcAlpha: SrcAlphaFactor,\n      blendDstAlpha: OneMinusSrcAlphaFactor,\n      blendEquationAlpha: AddEquation\n      // premultipliedAlpha:true,\n    });\n\n    _this.fsQuad = new FullScreenQuad(null);\n    _this.originalClearColor = new Color();\n    return _this;\n  }\n  _createClass(_SSRPass, [{\n    key: \"dispose\",\n    value: function dispose() {\n      this.beautyRenderTarget.dispose();\n      this.prevRenderTarget.dispose();\n      this.normalRenderTarget.dispose();\n      this.metalnessRenderTarget.dispose();\n      this.ssrRenderTarget.dispose();\n      this.blurRenderTarget.dispose();\n      this.blurRenderTarget2.dispose();\n      this.normalMaterial.dispose();\n      this.metalnessOnMaterial.dispose();\n      this.metalnessOffMaterial.dispose();\n      this.blurMaterial.dispose();\n      this.blurMaterial2.dispose();\n      this.copyMaterial.dispose();\n      this.depthRenderMaterial.dispose();\n      this.fsQuad.dispose();\n    }\n  }, {\n    key: \"render\",\n    value: function render(renderer, writeBuffer) {\n      renderer.setRenderTarget(this.beautyRenderTarget);\n      renderer.clear();\n      if (this.groundReflector) {\n        this.groundReflector.visible = false;\n        this.groundReflector.doRender(this.renderer, this.scene, this.camera);\n        this.groundReflector.visible = true;\n      }\n      renderer.render(this.scene, this.camera);\n      if (this.groundReflector) this.groundReflector.visible = false;\n      this.renderOverride(renderer, this.normalMaterial, this.normalRenderTarget, 0, 0);\n      if (this.selective) {\n        this.renderMetalness(renderer, this.metalnessOnMaterial, this.metalnessRenderTarget, 0, 0);\n      }\n      this.ssrMaterial.uniforms[\"opacity\"].value = this.opacity;\n      this.ssrMaterial.uniforms[\"maxDistance\"].value = this.maxDistance;\n      this.ssrMaterial.uniforms[\"thickness\"].value = this.thickness;\n      this.renderPass(renderer, this.ssrMaterial, this.ssrRenderTarget);\n      if (this.blur) {\n        this.renderPass(renderer, this.blurMaterial, this.blurRenderTarget);\n        this.renderPass(renderer, this.blurMaterial2, this.blurRenderTarget2);\n      }\n      switch (this.output) {\n        case _SSRPass.OUTPUT.Default:\n          if (this.bouncing) {\n            this.copyMaterial.uniforms[\"tDiffuse\"].value = this.beautyRenderTarget.texture;\n            this.copyMaterial.blending = NoBlending;\n            this.renderPass(renderer, this.copyMaterial, this.prevRenderTarget);\n            if (this.blur) this.copyMaterial.uniforms[\"tDiffuse\"].value = this.blurRenderTarget2.texture;else this.copyMaterial.uniforms[\"tDiffuse\"].value = this.ssrRenderTarget.texture;\n            this.copyMaterial.blending = NormalBlending;\n            this.renderPass(renderer, this.copyMaterial, this.prevRenderTarget);\n            this.copyMaterial.uniforms[\"tDiffuse\"].value = this.prevRenderTarget.texture;\n            this.copyMaterial.blending = NoBlending;\n            this.renderPass(renderer, this.copyMaterial, this.renderToScreen ? null : writeBuffer);\n          } else {\n            this.copyMaterial.uniforms[\"tDiffuse\"].value = this.beautyRenderTarget.texture;\n            this.copyMaterial.blending = NoBlending;\n            this.renderPass(renderer, this.copyMaterial, this.renderToScreen ? null : writeBuffer);\n            if (this.blur) this.copyMaterial.uniforms[\"tDiffuse\"].value = this.blurRenderTarget2.texture;else this.copyMaterial.uniforms[\"tDiffuse\"].value = this.ssrRenderTarget.texture;\n            this.copyMaterial.blending = NormalBlending;\n            this.renderPass(renderer, this.copyMaterial, this.renderToScreen ? null : writeBuffer);\n          }\n          break;\n        case _SSRPass.OUTPUT.SSR:\n          if (this.blur) this.copyMaterial.uniforms[\"tDiffuse\"].value = this.blurRenderTarget2.texture;else this.copyMaterial.uniforms[\"tDiffuse\"].value = this.ssrRenderTarget.texture;\n          this.copyMaterial.blending = NoBlending;\n          this.renderPass(renderer, this.copyMaterial, this.renderToScreen ? null : writeBuffer);\n          if (this.bouncing) {\n            if (this.blur) this.copyMaterial.uniforms[\"tDiffuse\"].value = this.blurRenderTarget2.texture;else this.copyMaterial.uniforms[\"tDiffuse\"].value = this.beautyRenderTarget.texture;\n            this.copyMaterial.blending = NoBlending;\n            this.renderPass(renderer, this.copyMaterial, this.prevRenderTarget);\n            this.copyMaterial.uniforms[\"tDiffuse\"].value = this.ssrRenderTarget.texture;\n            this.copyMaterial.blending = NormalBlending;\n            this.renderPass(renderer, this.copyMaterial, this.prevRenderTarget);\n          }\n          break;\n        case _SSRPass.OUTPUT.Beauty:\n          this.copyMaterial.uniforms[\"tDiffuse\"].value = this.beautyRenderTarget.texture;\n          this.copyMaterial.blending = NoBlending;\n          this.renderPass(renderer, this.copyMaterial, this.renderToScreen ? null : writeBuffer);\n          break;\n        case _SSRPass.OUTPUT.Depth:\n          this.renderPass(renderer, this.depthRenderMaterial, this.renderToScreen ? null : writeBuffer);\n          break;\n        case _SSRPass.OUTPUT.Normal:\n          this.copyMaterial.uniforms[\"tDiffuse\"].value = this.normalRenderTarget.texture;\n          this.copyMaterial.blending = NoBlending;\n          this.renderPass(renderer, this.copyMaterial, this.renderToScreen ? null : writeBuffer);\n          break;\n        case _SSRPass.OUTPUT.Metalness:\n          this.copyMaterial.uniforms[\"tDiffuse\"].value = this.metalnessRenderTarget.texture;\n          this.copyMaterial.blending = NoBlending;\n          this.renderPass(renderer, this.copyMaterial, this.renderToScreen ? null : writeBuffer);\n          break;\n        default:\n          console.warn(\"THREE.SSRPass: Unknown output type.\");\n      }\n    }\n  }, {\n    key: \"renderPass\",\n    value: function renderPass(renderer, passMaterial, renderTarget, clearColor, clearAlpha) {\n      this.originalClearColor.copy(renderer.getClearColor(this.tempColor));\n      var originalClearAlpha = renderer.getClearAlpha(this.tempColor);\n      var originalAutoClear = renderer.autoClear;\n      renderer.setRenderTarget(renderTarget);\n      renderer.autoClear = false;\n      if (clearColor !== void 0 && clearColor !== null) {\n        renderer.setClearColor(clearColor);\n        renderer.setClearAlpha(clearAlpha || 0);\n        renderer.clear();\n      }\n      this.fsQuad.material = passMaterial;\n      this.fsQuad.render(renderer);\n      renderer.autoClear = originalAutoClear;\n      renderer.setClearColor(this.originalClearColor);\n      renderer.setClearAlpha(originalClearAlpha);\n    }\n  }, {\n    key: \"renderOverride\",\n    value: function renderOverride(renderer, overrideMaterial, renderTarget, clearColor, clearAlpha) {\n      this.originalClearColor.copy(renderer.getClearColor(this.tempColor));\n      var originalClearAlpha = renderer.getClearAlpha(this.tempColor);\n      var originalAutoClear = renderer.autoClear;\n      renderer.setRenderTarget(renderTarget);\n      renderer.autoClear = false;\n      clearColor = overrideMaterial.clearColor || clearColor;\n      clearAlpha = overrideMaterial.clearAlpha || clearAlpha;\n      if (clearColor !== void 0 && clearColor !== null) {\n        renderer.setClearColor(clearColor);\n        renderer.setClearAlpha(clearAlpha || 0);\n        renderer.clear();\n      }\n      this.scene.overrideMaterial = overrideMaterial;\n      renderer.render(this.scene, this.camera);\n      this.scene.overrideMaterial = null;\n      renderer.autoClear = originalAutoClear;\n      renderer.setClearColor(this.originalClearColor);\n      renderer.setClearAlpha(originalClearAlpha);\n    }\n  }, {\n    key: \"renderMetalness\",\n    value: function renderMetalness(renderer, overrideMaterial, renderTarget, clearColor, clearAlpha) {\n      var _this2 = this;\n      this.originalClearColor.copy(renderer.getClearColor(this.tempColor));\n      var originalClearAlpha = renderer.getClearAlpha(this.tempColor);\n      var originalAutoClear = renderer.autoClear;\n      renderer.setRenderTarget(renderTarget);\n      renderer.autoClear = false;\n      clearColor = overrideMaterial.clearColor || clearColor;\n      clearAlpha = overrideMaterial.clearAlpha || clearAlpha;\n      if (clearColor !== void 0 && clearColor !== null) {\n        renderer.setClearColor(clearColor);\n        renderer.setClearAlpha(clearAlpha || 0);\n        renderer.clear();\n      }\n      this.scene.traverseVisible(function (child) {\n        child._SSRPassBackupMaterial = child.material;\n        if (_this2._selects.includes(child)) {\n          child.material = _this2.metalnessOnMaterial;\n        } else {\n          child.material = _this2.metalnessOffMaterial;\n        }\n      });\n      renderer.render(this.scene, this.camera);\n      this.scene.traverseVisible(function (child) {\n        child.material = child._SSRPassBackupMaterial;\n      });\n      renderer.autoClear = originalAutoClear;\n      renderer.setClearColor(this.originalClearColor);\n      renderer.setClearAlpha(originalClearAlpha);\n    }\n  }, {\n    key: \"setSize\",\n    value: function setSize(width, height) {\n      this.width = width;\n      this.height = height;\n      this.ssrMaterial.defines.MAX_STEP = Math.sqrt(width * width + height * height);\n      this.ssrMaterial.needsUpdate = true;\n      this.beautyRenderTarget.setSize(width, height);\n      this.prevRenderTarget.setSize(width, height);\n      this.ssrRenderTarget.setSize(width, height);\n      this.normalRenderTarget.setSize(width, height);\n      this.metalnessRenderTarget.setSize(width, height);\n      this.blurRenderTarget.setSize(width, height);\n      this.blurRenderTarget2.setSize(width, height);\n      this.ssrMaterial.uniforms[\"resolution\"].value.set(width, height);\n      this.ssrMaterial.uniforms[\"cameraProjectionMatrix\"].value.copy(this.camera.projectionMatrix);\n      this.ssrMaterial.uniforms[\"cameraInverseProjectionMatrix\"].value.copy(this.camera.projectionMatrixInverse);\n      this.blurMaterial.uniforms[\"resolution\"].value.set(width, height);\n      this.blurMaterial2.uniforms[\"resolution\"].value.set(width, height);\n    }\n  }]);\n  return _SSRPass;\n}(Pass);\nvar SSRPass = _SSRPass;\n__publicField(SSRPass, \"OUTPUT\", {\n  Default: 0,\n  SSR: 1,\n  Beauty: 3,\n  Depth: 4,\n  Normal: 5,\n  Metalness: 7\n});\nexport { SSRPass };","map":{"version":3,"names":["__defProp","Object","defineProperty","__defNormalProp","obj","key","value","enumerable","configurable","writable","__publicField","Color","DepthTexture","UnsignedShortType","NearestFilter","WebGLRenderTarget","HalfFloatType","ShaderMaterial","UniformsUtils","NoBlending","MeshNormalMaterial","MeshBasicMaterial","SrcAlphaFactor","OneMinusSrcAlphaFactor","AddEquation","NormalBlending","Pass","FullScreenQuad","SSRShader","SSRBlurShader","SSRDepthShader","CopyShader","_SSRPass","_Pass","_inherits","_super","_createSuper","_ref","_this","renderer","scene","camera","width","height","selects","_ref$bouncing","bouncing","groundReflector","_classCallCheck","call","clear","opacity","uniforms","output","maxDistance","thickness","tempColor","_selects","selective","Array","isArray","_assertThisInitialized","get","set","val","ssrMaterial","defines","SELECTIVE","needsUpdate","_bouncing","prevRenderTarget","texture","beautyRenderTarget","blur","_distanceAttenuation","DISTANCE_ATTENUATION","_fresnel","FRESNEL","_infiniteThick","INFINITE_THICK","depthTexture","type","minFilter","magFilter","depthBuffer","normalRenderTarget","metalnessRenderTarget","ssrRenderTarget","blurRenderTarget","clone","blurRenderTarget2","assign","MAX_STEP","Math","sqrt","vertexShader","fragmentShader","blending","near","far","copy","projectionMatrix","projectionMatrixInverse","normalMaterial","metalnessOnMaterial","color","metalnessOffMaterial","blurMaterial","blurMaterial2","depthRenderMaterial","copyMaterial","transparent","depthTest","depthWrite","blendSrc","blendDst","blendEquation","blendSrcAlpha","blendDstAlpha","blendEquationAlpha","fsQuad","originalClearColor","_createClass","dispose","render","writeBuffer","setRenderTarget","visible","doRender","renderOverride","renderMetalness","renderPass","OUTPUT","Default","renderToScreen","SSR","Beauty","Depth","Normal","Metalness","console","warn","passMaterial","renderTarget","clearColor","clearAlpha","getClearColor","originalClearAlpha","getClearAlpha","originalAutoClear","autoClear","setClearColor","setClearAlpha","material","overrideMaterial","_this2","traverseVisible","child","_SSRPassBackupMaterial","includes","setSize","SSRPass"],"sources":["/home/krug/Coding/JavaScript/Websites/Personal/personal/node_modules/.pnpm/three-stdlib@2.23.7_three@0.151.3/node_modules/three-stdlib/postprocessing/SSRPass.js"],"sourcesContent":["var __defProp = Object.defineProperty;\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;\nvar __publicField = (obj, key, value) => {\n  __defNormalProp(obj, typeof key !== \"symbol\" ? key + \"\" : key, value);\n  return value;\n};\nimport { Color, DepthTexture, UnsignedShortType, NearestFilter, WebGLRenderTarget, HalfFloatType, ShaderMaterial, UniformsUtils, NoBlending, MeshNormalMaterial, MeshBasicMaterial, SrcAlphaFactor, OneMinusSrcAlphaFactor, AddEquation, NormalBlending } from \"three\";\nimport { Pass, FullScreenQuad } from \"./Pass.js\";\nimport { SSRShader, SSRBlurShader, SSRDepthShader } from \"../shaders/SSRShader.js\";\nimport { CopyShader } from \"../shaders/CopyShader.js\";\nconst _SSRPass = class extends Pass {\n  constructor({ renderer, scene, camera, width, height, selects, bouncing = false, groundReflector }) {\n    super();\n    this.width = width !== void 0 ? width : 512;\n    this.height = height !== void 0 ? height : 512;\n    this.clear = true;\n    this.renderer = renderer;\n    this.scene = scene;\n    this.camera = camera;\n    this.groundReflector = groundReflector;\n    this.opacity = SSRShader.uniforms.opacity.value;\n    this.output = 0;\n    this.maxDistance = SSRShader.uniforms.maxDistance.value;\n    this.thickness = SSRShader.uniforms.thickness.value;\n    this.tempColor = new Color();\n    this._selects = selects;\n    this.selective = Array.isArray(this._selects);\n    Object.defineProperty(this, \"selects\", {\n      get() {\n        return this._selects;\n      },\n      set(val) {\n        if (this._selects === val)\n          return;\n        this._selects = val;\n        if (Array.isArray(val)) {\n          this.selective = true;\n          this.ssrMaterial.defines.SELECTIVE = true;\n          this.ssrMaterial.needsUpdate = true;\n        } else {\n          this.selective = false;\n          this.ssrMaterial.defines.SELECTIVE = false;\n          this.ssrMaterial.needsUpdate = true;\n        }\n      }\n    });\n    this._bouncing = bouncing;\n    Object.defineProperty(this, \"bouncing\", {\n      get() {\n        return this._bouncing;\n      },\n      set(val) {\n        if (this._bouncing === val)\n          return;\n        this._bouncing = val;\n        if (val) {\n          this.ssrMaterial.uniforms[\"tDiffuse\"].value = this.prevRenderTarget.texture;\n        } else {\n          this.ssrMaterial.uniforms[\"tDiffuse\"].value = this.beautyRenderTarget.texture;\n        }\n      }\n    });\n    this.blur = true;\n    this._distanceAttenuation = SSRShader.defines.DISTANCE_ATTENUATION;\n    Object.defineProperty(this, \"distanceAttenuation\", {\n      get() {\n        return this._distanceAttenuation;\n      },\n      set(val) {\n        if (this._distanceAttenuation === val)\n          return;\n        this._distanceAttenuation = val;\n        this.ssrMaterial.defines.DISTANCE_ATTENUATION = val;\n        this.ssrMaterial.needsUpdate = true;\n      }\n    });\n    this._fresnel = SSRShader.defines.FRESNEL;\n    Object.defineProperty(this, \"fresnel\", {\n      get() {\n        return this._fresnel;\n      },\n      set(val) {\n        if (this._fresnel === val)\n          return;\n        this._fresnel = val;\n        this.ssrMaterial.defines.FRESNEL = val;\n        this.ssrMaterial.needsUpdate = true;\n      }\n    });\n    this._infiniteThick = SSRShader.defines.INFINITE_THICK;\n    Object.defineProperty(this, \"infiniteThick\", {\n      get() {\n        return this._infiniteThick;\n      },\n      set(val) {\n        if (this._infiniteThick === val)\n          return;\n        this._infiniteThick = val;\n        this.ssrMaterial.defines.INFINITE_THICK = val;\n        this.ssrMaterial.needsUpdate = true;\n      }\n    });\n    const depthTexture = new DepthTexture();\n    depthTexture.type = UnsignedShortType;\n    depthTexture.minFilter = NearestFilter;\n    depthTexture.magFilter = NearestFilter;\n    this.beautyRenderTarget = new WebGLRenderTarget(this.width, this.height, {\n      minFilter: NearestFilter,\n      magFilter: NearestFilter,\n      type: HalfFloatType,\n      depthTexture,\n      depthBuffer: true\n    });\n    this.prevRenderTarget = new WebGLRenderTarget(this.width, this.height, {\n      minFilter: NearestFilter,\n      magFilter: NearestFilter\n    });\n    this.normalRenderTarget = new WebGLRenderTarget(this.width, this.height, {\n      minFilter: NearestFilter,\n      magFilter: NearestFilter,\n      type: HalfFloatType\n    });\n    this.metalnessRenderTarget = new WebGLRenderTarget(this.width, this.height, {\n      minFilter: NearestFilter,\n      magFilter: NearestFilter,\n      type: HalfFloatType\n    });\n    this.ssrRenderTarget = new WebGLRenderTarget(this.width, this.height, {\n      minFilter: NearestFilter,\n      magFilter: NearestFilter\n    });\n    this.blurRenderTarget = this.ssrRenderTarget.clone();\n    this.blurRenderTarget2 = this.ssrRenderTarget.clone();\n    this.ssrMaterial = new ShaderMaterial({\n      defines: Object.assign({}, SSRShader.defines, {\n        MAX_STEP: Math.sqrt(this.width * this.width + this.height * this.height)\n      }),\n      uniforms: UniformsUtils.clone(SSRShader.uniforms),\n      vertexShader: SSRShader.vertexShader,\n      fragmentShader: SSRShader.fragmentShader,\n      blending: NoBlending\n    });\n    this.ssrMaterial.uniforms[\"tDiffuse\"].value = this.beautyRenderTarget.texture;\n    this.ssrMaterial.uniforms[\"tNormal\"].value = this.normalRenderTarget.texture;\n    this.ssrMaterial.defines.SELECTIVE = this.selective;\n    this.ssrMaterial.needsUpdate = true;\n    this.ssrMaterial.uniforms[\"tMetalness\"].value = this.metalnessRenderTarget.texture;\n    this.ssrMaterial.uniforms[\"tDepth\"].value = this.beautyRenderTarget.depthTexture;\n    this.ssrMaterial.uniforms[\"cameraNear\"].value = this.camera.near;\n    this.ssrMaterial.uniforms[\"cameraFar\"].value = this.camera.far;\n    this.ssrMaterial.uniforms[\"thickness\"].value = this.thickness;\n    this.ssrMaterial.uniforms[\"resolution\"].value.set(this.width, this.height);\n    this.ssrMaterial.uniforms[\"cameraProjectionMatrix\"].value.copy(this.camera.projectionMatrix);\n    this.ssrMaterial.uniforms[\"cameraInverseProjectionMatrix\"].value.copy(this.camera.projectionMatrixInverse);\n    this.normalMaterial = new MeshNormalMaterial();\n    this.normalMaterial.blending = NoBlending;\n    this.metalnessOnMaterial = new MeshBasicMaterial({\n      color: \"white\"\n    });\n    this.metalnessOffMaterial = new MeshBasicMaterial({\n      color: \"black\"\n    });\n    this.blurMaterial = new ShaderMaterial({\n      defines: Object.assign({}, SSRBlurShader.defines),\n      uniforms: UniformsUtils.clone(SSRBlurShader.uniforms),\n      vertexShader: SSRBlurShader.vertexShader,\n      fragmentShader: SSRBlurShader.fragmentShader\n    });\n    this.blurMaterial.uniforms[\"tDiffuse\"].value = this.ssrRenderTarget.texture;\n    this.blurMaterial.uniforms[\"resolution\"].value.set(this.width, this.height);\n    this.blurMaterial2 = new ShaderMaterial({\n      defines: Object.assign({}, SSRBlurShader.defines),\n      uniforms: UniformsUtils.clone(SSRBlurShader.uniforms),\n      vertexShader: SSRBlurShader.vertexShader,\n      fragmentShader: SSRBlurShader.fragmentShader\n    });\n    this.blurMaterial2.uniforms[\"tDiffuse\"].value = this.blurRenderTarget.texture;\n    this.blurMaterial2.uniforms[\"resolution\"].value.set(this.width, this.height);\n    this.depthRenderMaterial = new ShaderMaterial({\n      defines: Object.assign({}, SSRDepthShader.defines),\n      uniforms: UniformsUtils.clone(SSRDepthShader.uniforms),\n      vertexShader: SSRDepthShader.vertexShader,\n      fragmentShader: SSRDepthShader.fragmentShader,\n      blending: NoBlending\n    });\n    this.depthRenderMaterial.uniforms[\"tDepth\"].value = this.beautyRenderTarget.depthTexture;\n    this.depthRenderMaterial.uniforms[\"cameraNear\"].value = this.camera.near;\n    this.depthRenderMaterial.uniforms[\"cameraFar\"].value = this.camera.far;\n    this.copyMaterial = new ShaderMaterial({\n      uniforms: UniformsUtils.clone(CopyShader.uniforms),\n      vertexShader: CopyShader.vertexShader,\n      fragmentShader: CopyShader.fragmentShader,\n      transparent: true,\n      depthTest: false,\n      depthWrite: false,\n      blendSrc: SrcAlphaFactor,\n      blendDst: OneMinusSrcAlphaFactor,\n      blendEquation: AddEquation,\n      blendSrcAlpha: SrcAlphaFactor,\n      blendDstAlpha: OneMinusSrcAlphaFactor,\n      blendEquationAlpha: AddEquation\n      // premultipliedAlpha:true,\n    });\n    this.fsQuad = new FullScreenQuad(null);\n    this.originalClearColor = new Color();\n  }\n  dispose() {\n    this.beautyRenderTarget.dispose();\n    this.prevRenderTarget.dispose();\n    this.normalRenderTarget.dispose();\n    this.metalnessRenderTarget.dispose();\n    this.ssrRenderTarget.dispose();\n    this.blurRenderTarget.dispose();\n    this.blurRenderTarget2.dispose();\n    this.normalMaterial.dispose();\n    this.metalnessOnMaterial.dispose();\n    this.metalnessOffMaterial.dispose();\n    this.blurMaterial.dispose();\n    this.blurMaterial2.dispose();\n    this.copyMaterial.dispose();\n    this.depthRenderMaterial.dispose();\n    this.fsQuad.dispose();\n  }\n  render(renderer, writeBuffer) {\n    renderer.setRenderTarget(this.beautyRenderTarget);\n    renderer.clear();\n    if (this.groundReflector) {\n      this.groundReflector.visible = false;\n      this.groundReflector.doRender(this.renderer, this.scene, this.camera);\n      this.groundReflector.visible = true;\n    }\n    renderer.render(this.scene, this.camera);\n    if (this.groundReflector)\n      this.groundReflector.visible = false;\n    this.renderOverride(renderer, this.normalMaterial, this.normalRenderTarget, 0, 0);\n    if (this.selective) {\n      this.renderMetalness(renderer, this.metalnessOnMaterial, this.metalnessRenderTarget, 0, 0);\n    }\n    this.ssrMaterial.uniforms[\"opacity\"].value = this.opacity;\n    this.ssrMaterial.uniforms[\"maxDistance\"].value = this.maxDistance;\n    this.ssrMaterial.uniforms[\"thickness\"].value = this.thickness;\n    this.renderPass(renderer, this.ssrMaterial, this.ssrRenderTarget);\n    if (this.blur) {\n      this.renderPass(renderer, this.blurMaterial, this.blurRenderTarget);\n      this.renderPass(renderer, this.blurMaterial2, this.blurRenderTarget2);\n    }\n    switch (this.output) {\n      case _SSRPass.OUTPUT.Default:\n        if (this.bouncing) {\n          this.copyMaterial.uniforms[\"tDiffuse\"].value = this.beautyRenderTarget.texture;\n          this.copyMaterial.blending = NoBlending;\n          this.renderPass(renderer, this.copyMaterial, this.prevRenderTarget);\n          if (this.blur)\n            this.copyMaterial.uniforms[\"tDiffuse\"].value = this.blurRenderTarget2.texture;\n          else\n            this.copyMaterial.uniforms[\"tDiffuse\"].value = this.ssrRenderTarget.texture;\n          this.copyMaterial.blending = NormalBlending;\n          this.renderPass(renderer, this.copyMaterial, this.prevRenderTarget);\n          this.copyMaterial.uniforms[\"tDiffuse\"].value = this.prevRenderTarget.texture;\n          this.copyMaterial.blending = NoBlending;\n          this.renderPass(renderer, this.copyMaterial, this.renderToScreen ? null : writeBuffer);\n        } else {\n          this.copyMaterial.uniforms[\"tDiffuse\"].value = this.beautyRenderTarget.texture;\n          this.copyMaterial.blending = NoBlending;\n          this.renderPass(renderer, this.copyMaterial, this.renderToScreen ? null : writeBuffer);\n          if (this.blur)\n            this.copyMaterial.uniforms[\"tDiffuse\"].value = this.blurRenderTarget2.texture;\n          else\n            this.copyMaterial.uniforms[\"tDiffuse\"].value = this.ssrRenderTarget.texture;\n          this.copyMaterial.blending = NormalBlending;\n          this.renderPass(renderer, this.copyMaterial, this.renderToScreen ? null : writeBuffer);\n        }\n        break;\n      case _SSRPass.OUTPUT.SSR:\n        if (this.blur)\n          this.copyMaterial.uniforms[\"tDiffuse\"].value = this.blurRenderTarget2.texture;\n        else\n          this.copyMaterial.uniforms[\"tDiffuse\"].value = this.ssrRenderTarget.texture;\n        this.copyMaterial.blending = NoBlending;\n        this.renderPass(renderer, this.copyMaterial, this.renderToScreen ? null : writeBuffer);\n        if (this.bouncing) {\n          if (this.blur)\n            this.copyMaterial.uniforms[\"tDiffuse\"].value = this.blurRenderTarget2.texture;\n          else\n            this.copyMaterial.uniforms[\"tDiffuse\"].value = this.beautyRenderTarget.texture;\n          this.copyMaterial.blending = NoBlending;\n          this.renderPass(renderer, this.copyMaterial, this.prevRenderTarget);\n          this.copyMaterial.uniforms[\"tDiffuse\"].value = this.ssrRenderTarget.texture;\n          this.copyMaterial.blending = NormalBlending;\n          this.renderPass(renderer, this.copyMaterial, this.prevRenderTarget);\n        }\n        break;\n      case _SSRPass.OUTPUT.Beauty:\n        this.copyMaterial.uniforms[\"tDiffuse\"].value = this.beautyRenderTarget.texture;\n        this.copyMaterial.blending = NoBlending;\n        this.renderPass(renderer, this.copyMaterial, this.renderToScreen ? null : writeBuffer);\n        break;\n      case _SSRPass.OUTPUT.Depth:\n        this.renderPass(renderer, this.depthRenderMaterial, this.renderToScreen ? null : writeBuffer);\n        break;\n      case _SSRPass.OUTPUT.Normal:\n        this.copyMaterial.uniforms[\"tDiffuse\"].value = this.normalRenderTarget.texture;\n        this.copyMaterial.blending = NoBlending;\n        this.renderPass(renderer, this.copyMaterial, this.renderToScreen ? null : writeBuffer);\n        break;\n      case _SSRPass.OUTPUT.Metalness:\n        this.copyMaterial.uniforms[\"tDiffuse\"].value = this.metalnessRenderTarget.texture;\n        this.copyMaterial.blending = NoBlending;\n        this.renderPass(renderer, this.copyMaterial, this.renderToScreen ? null : writeBuffer);\n        break;\n      default:\n        console.warn(\"THREE.SSRPass: Unknown output type.\");\n    }\n  }\n  renderPass(renderer, passMaterial, renderTarget, clearColor, clearAlpha) {\n    this.originalClearColor.copy(renderer.getClearColor(this.tempColor));\n    const originalClearAlpha = renderer.getClearAlpha(this.tempColor);\n    const originalAutoClear = renderer.autoClear;\n    renderer.setRenderTarget(renderTarget);\n    renderer.autoClear = false;\n    if (clearColor !== void 0 && clearColor !== null) {\n      renderer.setClearColor(clearColor);\n      renderer.setClearAlpha(clearAlpha || 0);\n      renderer.clear();\n    }\n    this.fsQuad.material = passMaterial;\n    this.fsQuad.render(renderer);\n    renderer.autoClear = originalAutoClear;\n    renderer.setClearColor(this.originalClearColor);\n    renderer.setClearAlpha(originalClearAlpha);\n  }\n  renderOverride(renderer, overrideMaterial, renderTarget, clearColor, clearAlpha) {\n    this.originalClearColor.copy(renderer.getClearColor(this.tempColor));\n    const originalClearAlpha = renderer.getClearAlpha(this.tempColor);\n    const originalAutoClear = renderer.autoClear;\n    renderer.setRenderTarget(renderTarget);\n    renderer.autoClear = false;\n    clearColor = overrideMaterial.clearColor || clearColor;\n    clearAlpha = overrideMaterial.clearAlpha || clearAlpha;\n    if (clearColor !== void 0 && clearColor !== null) {\n      renderer.setClearColor(clearColor);\n      renderer.setClearAlpha(clearAlpha || 0);\n      renderer.clear();\n    }\n    this.scene.overrideMaterial = overrideMaterial;\n    renderer.render(this.scene, this.camera);\n    this.scene.overrideMaterial = null;\n    renderer.autoClear = originalAutoClear;\n    renderer.setClearColor(this.originalClearColor);\n    renderer.setClearAlpha(originalClearAlpha);\n  }\n  renderMetalness(renderer, overrideMaterial, renderTarget, clearColor, clearAlpha) {\n    this.originalClearColor.copy(renderer.getClearColor(this.tempColor));\n    const originalClearAlpha = renderer.getClearAlpha(this.tempColor);\n    const originalAutoClear = renderer.autoClear;\n    renderer.setRenderTarget(renderTarget);\n    renderer.autoClear = false;\n    clearColor = overrideMaterial.clearColor || clearColor;\n    clearAlpha = overrideMaterial.clearAlpha || clearAlpha;\n    if (clearColor !== void 0 && clearColor !== null) {\n      renderer.setClearColor(clearColor);\n      renderer.setClearAlpha(clearAlpha || 0);\n      renderer.clear();\n    }\n    this.scene.traverseVisible((child) => {\n      child._SSRPassBackupMaterial = child.material;\n      if (this._selects.includes(child)) {\n        child.material = this.metalnessOnMaterial;\n      } else {\n        child.material = this.metalnessOffMaterial;\n      }\n    });\n    renderer.render(this.scene, this.camera);\n    this.scene.traverseVisible((child) => {\n      child.material = child._SSRPassBackupMaterial;\n    });\n    renderer.autoClear = originalAutoClear;\n    renderer.setClearColor(this.originalClearColor);\n    renderer.setClearAlpha(originalClearAlpha);\n  }\n  setSize(width, height) {\n    this.width = width;\n    this.height = height;\n    this.ssrMaterial.defines.MAX_STEP = Math.sqrt(width * width + height * height);\n    this.ssrMaterial.needsUpdate = true;\n    this.beautyRenderTarget.setSize(width, height);\n    this.prevRenderTarget.setSize(width, height);\n    this.ssrRenderTarget.setSize(width, height);\n    this.normalRenderTarget.setSize(width, height);\n    this.metalnessRenderTarget.setSize(width, height);\n    this.blurRenderTarget.setSize(width, height);\n    this.blurRenderTarget2.setSize(width, height);\n    this.ssrMaterial.uniforms[\"resolution\"].value.set(width, height);\n    this.ssrMaterial.uniforms[\"cameraProjectionMatrix\"].value.copy(this.camera.projectionMatrix);\n    this.ssrMaterial.uniforms[\"cameraInverseProjectionMatrix\"].value.copy(this.camera.projectionMatrixInverse);\n    this.blurMaterial.uniforms[\"resolution\"].value.set(width, height);\n    this.blurMaterial2.uniforms[\"resolution\"].value.set(width, height);\n  }\n};\nlet SSRPass = _SSRPass;\n__publicField(SSRPass, \"OUTPUT\", {\n  Default: 0,\n  SSR: 1,\n  Beauty: 3,\n  Depth: 4,\n  Normal: 5,\n  Metalness: 7\n});\nexport {\n  SSRPass\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}