{"ast":null,"code":"import _get from \"/home/krug/Coding/JavaScript/Websites/Personal/personal/node_modules/.pnpm/@babel+runtime@7.22.3/node_modules/@babel/runtime/helpers/esm/get.js\";\nimport _getPrototypeOf from \"/home/krug/Coding/JavaScript/Websites/Personal/personal/node_modules/.pnpm/@babel+runtime@7.22.3/node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js\";\nimport _inherits from \"/home/krug/Coding/JavaScript/Websites/Personal/personal/node_modules/.pnpm/@babel+runtime@7.22.3/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/home/krug/Coding/JavaScript/Websites/Personal/personal/node_modules/.pnpm/@babel+runtime@7.22.3/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport _classCallCheck from \"/home/krug/Coding/JavaScript/Websites/Personal/personal/node_modules/.pnpm/@babel+runtime@7.22.3/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/home/krug/Coding/JavaScript/Websites/Personal/personal/node_modules/.pnpm/@babel+runtime@7.22.3/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport { Quaternion, Vector3, Matrix4, Object3D, SphereGeometry, MeshBasicMaterial, Color, LineBasicMaterial, BufferGeometry, BufferAttribute, Mesh, Line } from \"three\";\nvar _q = /* @__PURE__ */new Quaternion();\nvar _targetPos = /* @__PURE__ */new Vector3();\nvar _targetVec = /* @__PURE__ */new Vector3();\nvar _effectorPos = /* @__PURE__ */new Vector3();\nvar _effectorVec = /* @__PURE__ */new Vector3();\nvar _linkPos = /* @__PURE__ */new Vector3();\nvar _invLinkQ = /* @__PURE__ */new Quaternion();\nvar _linkScale = /* @__PURE__ */new Vector3();\nvar _axis = /* @__PURE__ */new Vector3();\nvar _vector = /* @__PURE__ */new Vector3();\nvar _matrix = /* @__PURE__ */new Matrix4();\nvar CCDIKSolver = /*#__PURE__*/function () {\n  /**\n   * @param {THREE.SkinnedMesh} mesh\n   * @param {Array<Object>} iks\n   */\n  function CCDIKSolver(mesh) {\n    var iks = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n    _classCallCheck(this, CCDIKSolver);\n    this.mesh = mesh;\n    this.iks = iks;\n    this._valid();\n  }\n  /**\n   * Update all IK bones.\n   *\n   * @return {CCDIKSolver}\n   */\n  _createClass(CCDIKSolver, [{\n    key: \"update\",\n    value: function update() {\n      var iks = this.iks;\n      for (var i = 0, il = iks.length; i < il; i++) {\n        this.updateOne(iks[i]);\n      }\n      return this;\n    }\n    /**\n     * Update one IK bone\n     *\n     * @param {Object} ik parameter\n     * @return {CCDIKSolver}\n     */\n  }, {\n    key: \"updateOne\",\n    value: function updateOne(ik) {\n      var bones = this.mesh.skeleton.bones;\n      var math = Math;\n      var effector = bones[ik.effector];\n      var target = bones[ik.target];\n      _targetPos.setFromMatrixPosition(target.matrixWorld);\n      var links = ik.links;\n      var iteration = ik.iteration !== void 0 ? ik.iteration : 1;\n      for (var i = 0; i < iteration; i++) {\n        var rotated = false;\n        for (var j = 0, jl = links.length; j < jl; j++) {\n          var link = bones[links[j].index];\n          if (links[j].enabled === false) break;\n          var limitation = links[j].limitation;\n          var rotationMin = links[j].rotationMin;\n          var rotationMax = links[j].rotationMax;\n          link.matrixWorld.decompose(_linkPos, _invLinkQ, _linkScale);\n          _invLinkQ.invert();\n          _effectorPos.setFromMatrixPosition(effector.matrixWorld);\n          _effectorVec.subVectors(_effectorPos, _linkPos);\n          _effectorVec.applyQuaternion(_invLinkQ);\n          _effectorVec.normalize();\n          _targetVec.subVectors(_targetPos, _linkPos);\n          _targetVec.applyQuaternion(_invLinkQ);\n          _targetVec.normalize();\n          var angle = _targetVec.dot(_effectorVec);\n          if (angle > 1) {\n            angle = 1;\n          } else if (angle < -1) {\n            angle = -1;\n          }\n          angle = math.acos(angle);\n          if (angle < 1e-5) continue;\n          if (ik.minAngle !== void 0 && angle < ik.minAngle) {\n            angle = ik.minAngle;\n          }\n          if (ik.maxAngle !== void 0 && angle > ik.maxAngle) {\n            angle = ik.maxAngle;\n          }\n          _axis.crossVectors(_effectorVec, _targetVec);\n          _axis.normalize();\n          _q.setFromAxisAngle(_axis, angle);\n          link.quaternion.multiply(_q);\n          if (limitation !== void 0) {\n            var c = link.quaternion.w;\n            if (c > 1) c = 1;\n            var c2 = math.sqrt(1 - c * c);\n            link.quaternion.set(limitation.x * c2, limitation.y * c2, limitation.z * c2, c);\n          }\n          if (rotationMin !== void 0) {\n            link.rotation.setFromVector3(_vector.setFromEuler(link.rotation).max(rotationMin));\n          }\n          if (rotationMax !== void 0) {\n            link.rotation.setFromVector3(_vector.setFromEuler(link.rotation).min(rotationMax));\n          }\n          link.updateMatrixWorld(true);\n          rotated = true;\n        }\n        if (!rotated) break;\n      }\n      return this;\n    }\n    /**\n     * Creates Helper\n     *\n     * @return {CCDIKHelper}\n     */\n  }, {\n    key: \"createHelper\",\n    value: function createHelper() {\n      return new CCDIKHelper(this.mesh, this.iks);\n    }\n    // private methods\n  }, {\n    key: \"_valid\",\n    value: function _valid() {\n      var iks = this.iks;\n      var bones = this.mesh.skeleton.bones;\n      for (var i = 0, il = iks.length; i < il; i++) {\n        var ik = iks[i];\n        var effector = bones[ik.effector];\n        var links = ik.links;\n        var link0 = void 0,\n          link1 = void 0;\n        link0 = effector;\n        for (var j = 0, jl = links.length; j < jl; j++) {\n          link1 = bones[links[j].index];\n          if (link0.parent !== link1) {\n            console.warn(\"THREE.CCDIKSolver: bone \" + link0.name + \" is not the child of bone \" + link1.name);\n          }\n          link0 = link1;\n        }\n      }\n    }\n  }]);\n  return CCDIKSolver;\n}();\nfunction getPosition(bone, matrixWorldInv) {\n  return _vector.setFromMatrixPosition(bone.matrixWorld).applyMatrix4(matrixWorldInv);\n}\nfunction setPositionOfBoneToAttributeArray(array, index, bone, matrixWorldInv) {\n  var v = getPosition(bone, matrixWorldInv);\n  array[index * 3 + 0] = v.x;\n  array[index * 3 + 1] = v.y;\n  array[index * 3 + 2] = v.z;\n}\nvar CCDIKHelper = /*#__PURE__*/function (_Object3D) {\n  _inherits(CCDIKHelper, _Object3D);\n  var _super = _createSuper(CCDIKHelper);\n  function CCDIKHelper(mesh) {\n    var _this;\n    var iks = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n    var sphereSize = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0.25;\n    _classCallCheck(this, CCDIKHelper);\n    _this = _super.call(this);\n    _this.root = mesh;\n    _this.iks = iks;\n    _this.matrix.copy(mesh.matrixWorld);\n    _this.matrixAutoUpdate = false;\n    _this.sphereGeometry = new SphereGeometry(sphereSize, 16, 8);\n    _this.targetSphereMaterial = new MeshBasicMaterial({\n      color: new Color(16746632),\n      depthTest: false,\n      depthWrite: false,\n      transparent: true\n    });\n    _this.effectorSphereMaterial = new MeshBasicMaterial({\n      color: new Color(8978312),\n      depthTest: false,\n      depthWrite: false,\n      transparent: true\n    });\n    _this.linkSphereMaterial = new MeshBasicMaterial({\n      color: new Color(8947967),\n      depthTest: false,\n      depthWrite: false,\n      transparent: true\n    });\n    _this.lineMaterial = new LineBasicMaterial({\n      color: new Color(16711680),\n      depthTest: false,\n      depthWrite: false,\n      transparent: true\n    });\n    _this._init();\n    return _this;\n  }\n  /**\n   * Updates IK bones visualization.\n   */\n  _createClass(CCDIKHelper, [{\n    key: \"updateMatrixWorld\",\n    value: function updateMatrixWorld(force) {\n      var mesh = this.root;\n      if (this.visible) {\n        var offset = 0;\n        var iks = this.iks;\n        var bones = mesh.skeleton.bones;\n        _matrix.copy(mesh.matrixWorld).invert();\n        for (var i = 0, il = iks.length; i < il; i++) {\n          var ik = iks[i];\n          var targetBone = bones[ik.target];\n          var effectorBone = bones[ik.effector];\n          var targetMesh = this.children[offset++];\n          var effectorMesh = this.children[offset++];\n          targetMesh.position.copy(getPosition(targetBone, _matrix));\n          effectorMesh.position.copy(getPosition(effectorBone, _matrix));\n          for (var j = 0, jl = ik.links.length; j < jl; j++) {\n            var link = ik.links[j];\n            var linkBone = bones[link.index];\n            var linkMesh = this.children[offset++];\n            linkMesh.position.copy(getPosition(linkBone, _matrix));\n          }\n          var line = this.children[offset++];\n          var array = line.geometry.attributes.position.array;\n          setPositionOfBoneToAttributeArray(array, 0, targetBone, _matrix);\n          setPositionOfBoneToAttributeArray(array, 1, effectorBone, _matrix);\n          for (var _j = 0, _jl = ik.links.length; _j < _jl; _j++) {\n            var _link = ik.links[_j];\n            var _linkBone = bones[_link.index];\n            setPositionOfBoneToAttributeArray(array, _j + 2, _linkBone, _matrix);\n          }\n          line.geometry.attributes.position.needsUpdate = true;\n        }\n      }\n      this.matrix.copy(mesh.matrixWorld);\n      _get(_getPrototypeOf(CCDIKHelper.prototype), \"updateMatrixWorld\", this).call(this, force);\n    }\n    /**\n     * Frees the GPU-related resources allocated by this instance. Call this method whenever this instance is no longer used in your app.\n     */\n  }, {\n    key: \"dispose\",\n    value: function dispose() {\n      this.sphereGeometry.dispose();\n      this.targetSphereMaterial.dispose();\n      this.effectorSphereMaterial.dispose();\n      this.linkSphereMaterial.dispose();\n      this.lineMaterial.dispose();\n      var children = this.children;\n      for (var i = 0; i < children.length; i++) {\n        var child = children[i];\n        if (child.isLine) child.geometry.dispose();\n      }\n    }\n    // private method\n  }, {\n    key: \"_init\",\n    value: function _init() {\n      var scope = this;\n      var iks = this.iks;\n      function createLineGeometry(ik) {\n        var geometry = new BufferGeometry();\n        var vertices = new Float32Array((2 + ik.links.length) * 3);\n        geometry.setAttribute(\"position\", new BufferAttribute(vertices, 3));\n        return geometry;\n      }\n      function createTargetMesh() {\n        return new Mesh(scope.sphereGeometry, scope.targetSphereMaterial);\n      }\n      function createEffectorMesh() {\n        return new Mesh(scope.sphereGeometry, scope.effectorSphereMaterial);\n      }\n      function createLinkMesh() {\n        return new Mesh(scope.sphereGeometry, scope.linkSphereMaterial);\n      }\n      function createLine(ik) {\n        return new Line(createLineGeometry(ik), scope.lineMaterial);\n      }\n      for (var i = 0, il = iks.length; i < il; i++) {\n        var ik = iks[i];\n        this.add(createTargetMesh());\n        this.add(createEffectorMesh());\n        for (var j = 0, jl = ik.links.length; j < jl; j++) {\n          this.add(createLinkMesh());\n        }\n        this.add(createLine(ik));\n      }\n    }\n  }]);\n  return CCDIKHelper;\n}(Object3D);\nexport { CCDIKHelper, CCDIKSolver };","map":{"version":3,"names":["Quaternion","Vector3","Matrix4","Object3D","SphereGeometry","MeshBasicMaterial","Color","LineBasicMaterial","BufferGeometry","BufferAttribute","Mesh","Line","_q","_targetPos","_targetVec","_effectorPos","_effectorVec","_linkPos","_invLinkQ","_linkScale","_axis","_vector","_matrix","CCDIKSolver","mesh","iks","arguments","length","undefined","_classCallCheck","_valid","_createClass","key","value","update","i","il","updateOne","ik","bones","skeleton","math","Math","effector","target","setFromMatrixPosition","matrixWorld","links","iteration","rotated","j","jl","link","index","enabled","limitation","rotationMin","rotationMax","decompose","invert","subVectors","applyQuaternion","normalize","angle","dot","acos","minAngle","maxAngle","crossVectors","setFromAxisAngle","quaternion","multiply","c","w","c2","sqrt","set","x","y","z","rotation","setFromVector3","setFromEuler","max","min","updateMatrixWorld","createHelper","CCDIKHelper","link0","link1","parent","console","warn","name","getPosition","bone","matrixWorldInv","applyMatrix4","setPositionOfBoneToAttributeArray","array","v","_Object3D","_inherits","_super","_createSuper","_this","sphereSize","call","root","matrix","copy","matrixAutoUpdate","sphereGeometry","targetSphereMaterial","color","depthTest","depthWrite","transparent","effectorSphereMaterial","linkSphereMaterial","lineMaterial","_init","force","visible","offset","targetBone","effectorBone","targetMesh","children","effectorMesh","position","linkBone","linkMesh","line","geometry","attributes","needsUpdate","_get","_getPrototypeOf","prototype","dispose","child","isLine","scope","createLineGeometry","vertices","Float32Array","setAttribute","createTargetMesh","createEffectorMesh","createLinkMesh","createLine","add"],"sources":["/home/krug/Coding/JavaScript/Websites/Personal/personal/node_modules/.pnpm/three-stdlib@2.23.7_three@0.151.3/node_modules/three-stdlib/animation/CCDIKSolver.js"],"sourcesContent":["import { Quaternion, Vector3, Matrix4, Object3D, SphereGeometry, MeshBasicMaterial, Color, LineBasicMaterial, BufferGeometry, BufferAttribute, Mesh, Line } from \"three\";\nconst _q = /* @__PURE__ */ new Quaternion();\nconst _targetPos = /* @__PURE__ */ new Vector3();\nconst _targetVec = /* @__PURE__ */ new Vector3();\nconst _effectorPos = /* @__PURE__ */ new Vector3();\nconst _effectorVec = /* @__PURE__ */ new Vector3();\nconst _linkPos = /* @__PURE__ */ new Vector3();\nconst _invLinkQ = /* @__PURE__ */ new Quaternion();\nconst _linkScale = /* @__PURE__ */ new Vector3();\nconst _axis = /* @__PURE__ */ new Vector3();\nconst _vector = /* @__PURE__ */ new Vector3();\nconst _matrix = /* @__PURE__ */ new Matrix4();\nclass CCDIKSolver {\n  /**\n   * @param {THREE.SkinnedMesh} mesh\n   * @param {Array<Object>} iks\n   */\n  constructor(mesh, iks = []) {\n    this.mesh = mesh;\n    this.iks = iks;\n    this._valid();\n  }\n  /**\n   * Update all IK bones.\n   *\n   * @return {CCDIKSolver}\n   */\n  update() {\n    const iks = this.iks;\n    for (let i = 0, il = iks.length; i < il; i++) {\n      this.updateOne(iks[i]);\n    }\n    return this;\n  }\n  /**\n   * Update one IK bone\n   *\n   * @param {Object} ik parameter\n   * @return {CCDIKSolver}\n   */\n  updateOne(ik) {\n    const bones = this.mesh.skeleton.bones;\n    const math = Math;\n    const effector = bones[ik.effector];\n    const target = bones[ik.target];\n    _targetPos.setFromMatrixPosition(target.matrixWorld);\n    const links = ik.links;\n    const iteration = ik.iteration !== void 0 ? ik.iteration : 1;\n    for (let i = 0; i < iteration; i++) {\n      let rotated = false;\n      for (let j = 0, jl = links.length; j < jl; j++) {\n        const link = bones[links[j].index];\n        if (links[j].enabled === false)\n          break;\n        const limitation = links[j].limitation;\n        const rotationMin = links[j].rotationMin;\n        const rotationMax = links[j].rotationMax;\n        link.matrixWorld.decompose(_linkPos, _invLinkQ, _linkScale);\n        _invLinkQ.invert();\n        _effectorPos.setFromMatrixPosition(effector.matrixWorld);\n        _effectorVec.subVectors(_effectorPos, _linkPos);\n        _effectorVec.applyQuaternion(_invLinkQ);\n        _effectorVec.normalize();\n        _targetVec.subVectors(_targetPos, _linkPos);\n        _targetVec.applyQuaternion(_invLinkQ);\n        _targetVec.normalize();\n        let angle = _targetVec.dot(_effectorVec);\n        if (angle > 1) {\n          angle = 1;\n        } else if (angle < -1) {\n          angle = -1;\n        }\n        angle = math.acos(angle);\n        if (angle < 1e-5)\n          continue;\n        if (ik.minAngle !== void 0 && angle < ik.minAngle) {\n          angle = ik.minAngle;\n        }\n        if (ik.maxAngle !== void 0 && angle > ik.maxAngle) {\n          angle = ik.maxAngle;\n        }\n        _axis.crossVectors(_effectorVec, _targetVec);\n        _axis.normalize();\n        _q.setFromAxisAngle(_axis, angle);\n        link.quaternion.multiply(_q);\n        if (limitation !== void 0) {\n          let c = link.quaternion.w;\n          if (c > 1)\n            c = 1;\n          const c2 = math.sqrt(1 - c * c);\n          link.quaternion.set(limitation.x * c2, limitation.y * c2, limitation.z * c2, c);\n        }\n        if (rotationMin !== void 0) {\n          link.rotation.setFromVector3(_vector.setFromEuler(link.rotation).max(rotationMin));\n        }\n        if (rotationMax !== void 0) {\n          link.rotation.setFromVector3(_vector.setFromEuler(link.rotation).min(rotationMax));\n        }\n        link.updateMatrixWorld(true);\n        rotated = true;\n      }\n      if (!rotated)\n        break;\n    }\n    return this;\n  }\n  /**\n   * Creates Helper\n   *\n   * @return {CCDIKHelper}\n   */\n  createHelper() {\n    return new CCDIKHelper(this.mesh, this.iks);\n  }\n  // private methods\n  _valid() {\n    const iks = this.iks;\n    const bones = this.mesh.skeleton.bones;\n    for (let i = 0, il = iks.length; i < il; i++) {\n      const ik = iks[i];\n      const effector = bones[ik.effector];\n      const links = ik.links;\n      let link0, link1;\n      link0 = effector;\n      for (let j = 0, jl = links.length; j < jl; j++) {\n        link1 = bones[links[j].index];\n        if (link0.parent !== link1) {\n          console.warn(\"THREE.CCDIKSolver: bone \" + link0.name + \" is not the child of bone \" + link1.name);\n        }\n        link0 = link1;\n      }\n    }\n  }\n}\nfunction getPosition(bone, matrixWorldInv) {\n  return _vector.setFromMatrixPosition(bone.matrixWorld).applyMatrix4(matrixWorldInv);\n}\nfunction setPositionOfBoneToAttributeArray(array, index, bone, matrixWorldInv) {\n  const v = getPosition(bone, matrixWorldInv);\n  array[index * 3 + 0] = v.x;\n  array[index * 3 + 1] = v.y;\n  array[index * 3 + 2] = v.z;\n}\nclass CCDIKHelper extends Object3D {\n  constructor(mesh, iks = [], sphereSize = 0.25) {\n    super();\n    this.root = mesh;\n    this.iks = iks;\n    this.matrix.copy(mesh.matrixWorld);\n    this.matrixAutoUpdate = false;\n    this.sphereGeometry = new SphereGeometry(sphereSize, 16, 8);\n    this.targetSphereMaterial = new MeshBasicMaterial({\n      color: new Color(16746632),\n      depthTest: false,\n      depthWrite: false,\n      transparent: true\n    });\n    this.effectorSphereMaterial = new MeshBasicMaterial({\n      color: new Color(8978312),\n      depthTest: false,\n      depthWrite: false,\n      transparent: true\n    });\n    this.linkSphereMaterial = new MeshBasicMaterial({\n      color: new Color(8947967),\n      depthTest: false,\n      depthWrite: false,\n      transparent: true\n    });\n    this.lineMaterial = new LineBasicMaterial({\n      color: new Color(16711680),\n      depthTest: false,\n      depthWrite: false,\n      transparent: true\n    });\n    this._init();\n  }\n  /**\n   * Updates IK bones visualization.\n   */\n  updateMatrixWorld(force) {\n    const mesh = this.root;\n    if (this.visible) {\n      let offset = 0;\n      const iks = this.iks;\n      const bones = mesh.skeleton.bones;\n      _matrix.copy(mesh.matrixWorld).invert();\n      for (let i = 0, il = iks.length; i < il; i++) {\n        const ik = iks[i];\n        const targetBone = bones[ik.target];\n        const effectorBone = bones[ik.effector];\n        const targetMesh = this.children[offset++];\n        const effectorMesh = this.children[offset++];\n        targetMesh.position.copy(getPosition(targetBone, _matrix));\n        effectorMesh.position.copy(getPosition(effectorBone, _matrix));\n        for (let j = 0, jl = ik.links.length; j < jl; j++) {\n          const link = ik.links[j];\n          const linkBone = bones[link.index];\n          const linkMesh = this.children[offset++];\n          linkMesh.position.copy(getPosition(linkBone, _matrix));\n        }\n        const line = this.children[offset++];\n        const array = line.geometry.attributes.position.array;\n        setPositionOfBoneToAttributeArray(array, 0, targetBone, _matrix);\n        setPositionOfBoneToAttributeArray(array, 1, effectorBone, _matrix);\n        for (let j = 0, jl = ik.links.length; j < jl; j++) {\n          const link = ik.links[j];\n          const linkBone = bones[link.index];\n          setPositionOfBoneToAttributeArray(array, j + 2, linkBone, _matrix);\n        }\n        line.geometry.attributes.position.needsUpdate = true;\n      }\n    }\n    this.matrix.copy(mesh.matrixWorld);\n    super.updateMatrixWorld(force);\n  }\n  /**\n   * Frees the GPU-related resources allocated by this instance. Call this method whenever this instance is no longer used in your app.\n   */\n  dispose() {\n    this.sphereGeometry.dispose();\n    this.targetSphereMaterial.dispose();\n    this.effectorSphereMaterial.dispose();\n    this.linkSphereMaterial.dispose();\n    this.lineMaterial.dispose();\n    const children = this.children;\n    for (let i = 0; i < children.length; i++) {\n      const child = children[i];\n      if (child.isLine)\n        child.geometry.dispose();\n    }\n  }\n  // private method\n  _init() {\n    const scope = this;\n    const iks = this.iks;\n    function createLineGeometry(ik) {\n      const geometry = new BufferGeometry();\n      const vertices = new Float32Array((2 + ik.links.length) * 3);\n      geometry.setAttribute(\"position\", new BufferAttribute(vertices, 3));\n      return geometry;\n    }\n    function createTargetMesh() {\n      return new Mesh(scope.sphereGeometry, scope.targetSphereMaterial);\n    }\n    function createEffectorMesh() {\n      return new Mesh(scope.sphereGeometry, scope.effectorSphereMaterial);\n    }\n    function createLinkMesh() {\n      return new Mesh(scope.sphereGeometry, scope.linkSphereMaterial);\n    }\n    function createLine(ik) {\n      return new Line(createLineGeometry(ik), scope.lineMaterial);\n    }\n    for (let i = 0, il = iks.length; i < il; i++) {\n      const ik = iks[i];\n      this.add(createTargetMesh());\n      this.add(createEffectorMesh());\n      for (let j = 0, jl = ik.links.length; j < jl; j++) {\n        this.add(createLinkMesh());\n      }\n      this.add(createLine(ik));\n    }\n  }\n}\nexport {\n  CCDIKHelper,\n  CCDIKSolver\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}