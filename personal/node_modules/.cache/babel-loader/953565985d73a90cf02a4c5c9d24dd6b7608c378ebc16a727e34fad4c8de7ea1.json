{"ast":null,"code":"import _classCallCheck from \"/home/krug/Coding/JavaScript/Websites/Personal/personal/node_modules/.pnpm/@babel+runtime@7.22.3/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/home/krug/Coding/JavaScript/Websites/Personal/personal/node_modules/.pnpm/@babel+runtime@7.22.3/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"/home/krug/Coding/JavaScript/Websites/Personal/personal/node_modules/.pnpm/@babel+runtime@7.22.3/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/home/krug/Coding/JavaScript/Websites/Personal/personal/node_modules/.pnpm/@babel+runtime@7.22.3/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { Loader, FileLoader, TextureLoader, LoaderUtils, Color, Matrix4, RepeatWrapping, ClampToEdgeWrapping, MirroredRepeatWrapping, LinearFilter, LinearMipmapLinearFilter, NearestFilter, BufferGeometry, Float32BufferAttribute, Mesh, MeshPhongMaterial, BufferAttribute, Group, MeshStandardMaterial } from \"three\";\nimport { unzipSync } from \"fflate\";\nvar ThreeMFLoader = /*#__PURE__*/function (_Loader) {\n  _inherits(ThreeMFLoader, _Loader);\n  var _super = _createSuper(ThreeMFLoader);\n  function ThreeMFLoader(manager) {\n    var _this;\n    _classCallCheck(this, ThreeMFLoader);\n    _this = _super.call(this, manager);\n    _this.availableExtensions = [];\n    return _this;\n  }\n  _createClass(ThreeMFLoader, [{\n    key: \"load\",\n    value: function load(url, onLoad, onProgress, onError) {\n      var scope = this;\n      var loader = new FileLoader(scope.manager);\n      loader.setPath(scope.path);\n      loader.setResponseType(\"arraybuffer\");\n      loader.setRequestHeader(scope.requestHeader);\n      loader.setWithCredentials(scope.withCredentials);\n      loader.load(url, function (buffer) {\n        try {\n          onLoad(scope.parse(buffer));\n        } catch (e) {\n          if (onError) {\n            onError(e);\n          } else {\n            console.error(e);\n          }\n          scope.manager.itemError(url);\n        }\n      }, onProgress, onError);\n    }\n  }, {\n    key: \"parse\",\n    value: function parse(data) {\n      var scope = this;\n      var textureLoader = new TextureLoader(this.manager);\n      function loadDocument(data2) {\n        var zip = null;\n        var file = null;\n        var relsName;\n        var modelRelsName;\n        var modelPartNames = [];\n        var printTicketPartNames = [];\n        var texturesPartNames = [];\n        var otherPartNames = [];\n        var modelRels;\n        var modelParts = {};\n        var printTicketParts = {};\n        var texturesParts = {};\n        var otherParts = {};\n        try {\n          zip = unzipSync(new Uint8Array(data2));\n        } catch (e) {\n          if (e instanceof ReferenceError) {\n            console.error(\"THREE.3MFLoader: fflate missing and file is compressed.\");\n            return null;\n          }\n        }\n        for (file in zip) {\n          if (file.match(/\\_rels\\/.rels$/)) {\n            relsName = file;\n          } else if (file.match(/3D\\/_rels\\/.*\\.model\\.rels$/)) {\n            modelRelsName = file;\n          } else if (file.match(/^3D\\/.*\\.model$/)) {\n            modelPartNames.push(file);\n          } else if (file.match(/^3D\\/Metadata\\/.*\\.xml$/)) {\n            printTicketPartNames.push(file);\n          } else if (file.match(/^3D\\/Textures?\\/.*/)) {\n            texturesPartNames.push(file);\n          } else if (file.match(/^3D\\/Other\\/.*/)) {\n            otherPartNames.push(file);\n          }\n        }\n        var relsView = zip[relsName];\n        var relsFileText = LoaderUtils.decodeText(relsView);\n        var rels = parseRelsXml(relsFileText);\n        if (modelRelsName) {\n          var relsView2 = zip[modelRelsName];\n          var relsFileText2 = LoaderUtils.decodeText(relsView2);\n          modelRels = parseRelsXml(relsFileText2);\n        }\n        for (var i = 0; i < modelPartNames.length; i++) {\n          var modelPart = modelPartNames[i];\n          var view = zip[modelPart];\n          var fileText = LoaderUtils.decodeText(view);\n          var xmlData = new DOMParser().parseFromString(fileText, \"application/xml\");\n          if (xmlData.documentElement.nodeName.toLowerCase() !== \"model\") {\n            console.error(\"THREE.3MFLoader: Error loading 3MF - no 3MF document found: \", modelPart);\n          }\n          var modelNode = xmlData.querySelector(\"model\");\n          var extensions = {};\n          for (var i2 = 0; i2 < modelNode.attributes.length; i2++) {\n            var attr = modelNode.attributes[i2];\n            if (attr.name.match(/^xmlns:(.+)$/)) {\n              extensions[attr.value] = RegExp.$1;\n            }\n          }\n          var modelData = parseModelNode(modelNode);\n          modelData[\"xml\"] = modelNode;\n          if (0 < Object.keys(extensions).length) {\n            modelData[\"extensions\"] = extensions;\n          }\n          modelParts[modelPart] = modelData;\n        }\n        for (var _i = 0; _i < texturesPartNames.length; _i++) {\n          var texturesPartName = texturesPartNames[_i];\n          texturesParts[texturesPartName] = zip[texturesPartName].buffer;\n        }\n        return {\n          rels: rels,\n          modelRels: modelRels,\n          model: modelParts,\n          printTicket: printTicketParts,\n          texture: texturesParts,\n          other: otherParts\n        };\n      }\n      function parseRelsXml(relsFileText) {\n        var relationships = [];\n        var relsXmlData = new DOMParser().parseFromString(relsFileText, \"application/xml\");\n        var relsNodes = relsXmlData.querySelectorAll(\"Relationship\");\n        for (var i = 0; i < relsNodes.length; i++) {\n          var relsNode = relsNodes[i];\n          var relationship = {\n            target: relsNode.getAttribute(\"Target\"),\n            //required\n            id: relsNode.getAttribute(\"Id\"),\n            //required\n            type: relsNode.getAttribute(\"Type\")\n            //required\n          };\n\n          relationships.push(relationship);\n        }\n        return relationships;\n      }\n      function parseMetadataNodes(metadataNodes) {\n        var metadataData = {};\n        for (var i = 0; i < metadataNodes.length; i++) {\n          var metadataNode = metadataNodes[i];\n          var name = metadataNode.getAttribute(\"name\");\n          var validNames = [\"Title\", \"Designer\", \"Description\", \"Copyright\", \"LicenseTerms\", \"Rating\", \"CreationDate\", \"ModificationDate\"];\n          if (0 <= validNames.indexOf(name)) {\n            metadataData[name] = metadataNode.textContent;\n          }\n        }\n        return metadataData;\n      }\n      function parseBasematerialsNode(basematerialsNode) {\n        var basematerialsData = {\n          id: basematerialsNode.getAttribute(\"id\"),\n          // required\n          basematerials: []\n        };\n        var basematerialNodes = basematerialsNode.querySelectorAll(\"base\");\n        for (var i = 0; i < basematerialNodes.length; i++) {\n          var basematerialNode = basematerialNodes[i];\n          var basematerialData = parseBasematerialNode(basematerialNode);\n          basematerialData.index = i;\n          basematerialsData.basematerials.push(basematerialData);\n        }\n        return basematerialsData;\n      }\n      function parseTexture2DNode(texture2DNode) {\n        var texture2dData = {\n          id: texture2DNode.getAttribute(\"id\"),\n          // required\n          path: texture2DNode.getAttribute(\"path\"),\n          // required\n          contenttype: texture2DNode.getAttribute(\"contenttype\"),\n          // required\n          tilestyleu: texture2DNode.getAttribute(\"tilestyleu\"),\n          tilestylev: texture2DNode.getAttribute(\"tilestylev\"),\n          filter: texture2DNode.getAttribute(\"filter\")\n        };\n        return texture2dData;\n      }\n      function parseTextures2DGroupNode(texture2DGroupNode) {\n        var texture2DGroupData = {\n          id: texture2DGroupNode.getAttribute(\"id\"),\n          // required\n          texid: texture2DGroupNode.getAttribute(\"texid\"),\n          // required\n          displaypropertiesid: texture2DGroupNode.getAttribute(\"displaypropertiesid\")\n        };\n        var tex2coordNodes = texture2DGroupNode.querySelectorAll(\"tex2coord\");\n        var uvs = [];\n        for (var i = 0; i < tex2coordNodes.length; i++) {\n          var tex2coordNode = tex2coordNodes[i];\n          var u = tex2coordNode.getAttribute(\"u\");\n          var v = tex2coordNode.getAttribute(\"v\");\n          uvs.push(parseFloat(u), parseFloat(v));\n        }\n        texture2DGroupData[\"uvs\"] = new Float32Array(uvs);\n        return texture2DGroupData;\n      }\n      function parseColorGroupNode(colorGroupNode) {\n        var colorGroupData = {\n          id: colorGroupNode.getAttribute(\"id\"),\n          // required\n          displaypropertiesid: colorGroupNode.getAttribute(\"displaypropertiesid\")\n        };\n        var colorNodes = colorGroupNode.querySelectorAll(\"color\");\n        var colors = [];\n        var colorObject = new Color();\n        for (var i = 0; i < colorNodes.length; i++) {\n          var colorNode = colorNodes[i];\n          var color = colorNode.getAttribute(\"color\");\n          colorObject.setStyle(color.substring(0, 7));\n          colorObject.convertSRGBToLinear();\n          colors.push(colorObject.r, colorObject.g, colorObject.b);\n        }\n        colorGroupData[\"colors\"] = new Float32Array(colors);\n        return colorGroupData;\n      }\n      function parseMetallicDisplaypropertiesNode(metallicDisplaypropetiesNode) {\n        var metallicDisplaypropertiesData = {\n          id: metallicDisplaypropetiesNode.getAttribute(\"id\")\n          // required\n        };\n\n        var metallicNodes = metallicDisplaypropetiesNode.querySelectorAll(\"pbmetallic\");\n        var metallicData = [];\n        for (var i = 0; i < metallicNodes.length; i++) {\n          var metallicNode = metallicNodes[i];\n          metallicData.push({\n            name: metallicNode.getAttribute(\"name\"),\n            // required\n            metallicness: parseFloat(metallicNode.getAttribute(\"metallicness\")),\n            // required\n            roughness: parseFloat(metallicNode.getAttribute(\"roughness\"))\n            // required\n          });\n        }\n\n        metallicDisplaypropertiesData.data = metallicData;\n        return metallicDisplaypropertiesData;\n      }\n      function parseBasematerialNode(basematerialNode) {\n        var basematerialData = {};\n        basematerialData[\"name\"] = basematerialNode.getAttribute(\"name\");\n        basematerialData[\"displaycolor\"] = basematerialNode.getAttribute(\"displaycolor\");\n        basematerialData[\"displaypropertiesid\"] = basematerialNode.getAttribute(\"displaypropertiesid\");\n        return basematerialData;\n      }\n      function parseMeshNode(meshNode) {\n        var meshData = {};\n        var vertices = [];\n        var vertexNodes = meshNode.querySelectorAll(\"vertices vertex\");\n        for (var i = 0; i < vertexNodes.length; i++) {\n          var vertexNode = vertexNodes[i];\n          var x = vertexNode.getAttribute(\"x\");\n          var y = vertexNode.getAttribute(\"y\");\n          var z = vertexNode.getAttribute(\"z\");\n          vertices.push(parseFloat(x), parseFloat(y), parseFloat(z));\n        }\n        meshData[\"vertices\"] = new Float32Array(vertices);\n        var triangleProperties = [];\n        var triangles = [];\n        var triangleNodes = meshNode.querySelectorAll(\"triangles triangle\");\n        for (var _i2 = 0; _i2 < triangleNodes.length; _i2++) {\n          var triangleNode = triangleNodes[_i2];\n          var v1 = triangleNode.getAttribute(\"v1\");\n          var v2 = triangleNode.getAttribute(\"v2\");\n          var v3 = triangleNode.getAttribute(\"v3\");\n          var p1 = triangleNode.getAttribute(\"p1\");\n          var p2 = triangleNode.getAttribute(\"p2\");\n          var p3 = triangleNode.getAttribute(\"p3\");\n          var pid = triangleNode.getAttribute(\"pid\");\n          var triangleProperty = {};\n          triangleProperty[\"v1\"] = parseInt(v1, 10);\n          triangleProperty[\"v2\"] = parseInt(v2, 10);\n          triangleProperty[\"v3\"] = parseInt(v3, 10);\n          triangles.push(triangleProperty[\"v1\"], triangleProperty[\"v2\"], triangleProperty[\"v3\"]);\n          if (p1) {\n            triangleProperty[\"p1\"] = parseInt(p1, 10);\n          }\n          if (p2) {\n            triangleProperty[\"p2\"] = parseInt(p2, 10);\n          }\n          if (p3) {\n            triangleProperty[\"p3\"] = parseInt(p3, 10);\n          }\n          if (pid) {\n            triangleProperty[\"pid\"] = pid;\n          }\n          if (0 < Object.keys(triangleProperty).length) {\n            triangleProperties.push(triangleProperty);\n          }\n        }\n        meshData[\"triangleProperties\"] = triangleProperties;\n        meshData[\"triangles\"] = new Uint32Array(triangles);\n        return meshData;\n      }\n      function parseComponentsNode(componentsNode) {\n        var components = [];\n        var componentNodes = componentsNode.querySelectorAll(\"component\");\n        for (var i = 0; i < componentNodes.length; i++) {\n          var componentNode = componentNodes[i];\n          var componentData = parseComponentNode(componentNode);\n          components.push(componentData);\n        }\n        return components;\n      }\n      function parseComponentNode(componentNode) {\n        var componentData = {};\n        componentData[\"objectId\"] = componentNode.getAttribute(\"objectid\");\n        var transform = componentNode.getAttribute(\"transform\");\n        if (transform) {\n          componentData[\"transform\"] = parseTransform(transform);\n        }\n        return componentData;\n      }\n      function parseTransform(transform) {\n        var t = [];\n        transform.split(\" \").forEach(function (s) {\n          t.push(parseFloat(s));\n        });\n        var matrix = new Matrix4();\n        matrix.set(t[0], t[3], t[6], t[9], t[1], t[4], t[7], t[10], t[2], t[5], t[8], t[11], 0, 0, 0, 1);\n        return matrix;\n      }\n      function parseObjectNode(objectNode) {\n        var objectData = {\n          type: objectNode.getAttribute(\"type\")\n        };\n        var id = objectNode.getAttribute(\"id\");\n        if (id) {\n          objectData[\"id\"] = id;\n        }\n        var pid = objectNode.getAttribute(\"pid\");\n        if (pid) {\n          objectData[\"pid\"] = pid;\n        }\n        var pindex = objectNode.getAttribute(\"pindex\");\n        if (pindex) {\n          objectData[\"pindex\"] = pindex;\n        }\n        var thumbnail = objectNode.getAttribute(\"thumbnail\");\n        if (thumbnail) {\n          objectData[\"thumbnail\"] = thumbnail;\n        }\n        var partnumber = objectNode.getAttribute(\"partnumber\");\n        if (partnumber) {\n          objectData[\"partnumber\"] = partnumber;\n        }\n        var name = objectNode.getAttribute(\"name\");\n        if (name) {\n          objectData[\"name\"] = name;\n        }\n        var meshNode = objectNode.querySelector(\"mesh\");\n        if (meshNode) {\n          objectData[\"mesh\"] = parseMeshNode(meshNode);\n        }\n        var componentsNode = objectNode.querySelector(\"components\");\n        if (componentsNode) {\n          objectData[\"components\"] = parseComponentsNode(componentsNode);\n        }\n        return objectData;\n      }\n      function parseResourcesNode(resourcesNode) {\n        var resourcesData = {};\n        resourcesData[\"basematerials\"] = {};\n        var basematerialsNodes = resourcesNode.querySelectorAll(\"basematerials\");\n        for (var i = 0; i < basematerialsNodes.length; i++) {\n          var basematerialsNode = basematerialsNodes[i];\n          var basematerialsData = parseBasematerialsNode(basematerialsNode);\n          resourcesData[\"basematerials\"][basematerialsData[\"id\"]] = basematerialsData;\n        }\n        resourcesData[\"texture2d\"] = {};\n        var textures2DNodes = resourcesNode.querySelectorAll(\"texture2d\");\n        for (var _i3 = 0; _i3 < textures2DNodes.length; _i3++) {\n          var textures2DNode = textures2DNodes[_i3];\n          var texture2DData = parseTexture2DNode(textures2DNode);\n          resourcesData[\"texture2d\"][texture2DData[\"id\"]] = texture2DData;\n        }\n        resourcesData[\"colorgroup\"] = {};\n        var colorGroupNodes = resourcesNode.querySelectorAll(\"colorgroup\");\n        for (var _i4 = 0; _i4 < colorGroupNodes.length; _i4++) {\n          var colorGroupNode = colorGroupNodes[_i4];\n          var colorGroupData = parseColorGroupNode(colorGroupNode);\n          resourcesData[\"colorgroup\"][colorGroupData[\"id\"]] = colorGroupData;\n        }\n        resourcesData[\"pbmetallicdisplayproperties\"] = {};\n        var pbmetallicdisplaypropertiesNodes = resourcesNode.querySelectorAll(\"pbmetallicdisplayproperties\");\n        for (var _i5 = 0; _i5 < pbmetallicdisplaypropertiesNodes.length; _i5++) {\n          var pbmetallicdisplaypropertiesNode = pbmetallicdisplaypropertiesNodes[_i5];\n          var pbmetallicdisplaypropertiesData = parseMetallicDisplaypropertiesNode(pbmetallicdisplaypropertiesNode);\n          resourcesData[\"pbmetallicdisplayproperties\"][pbmetallicdisplaypropertiesData[\"id\"]] = pbmetallicdisplaypropertiesData;\n        }\n        resourcesData[\"texture2dgroup\"] = {};\n        var textures2DGroupNodes = resourcesNode.querySelectorAll(\"texture2dgroup\");\n        for (var _i6 = 0; _i6 < textures2DGroupNodes.length; _i6++) {\n          var textures2DGroupNode = textures2DGroupNodes[_i6];\n          var textures2DGroupData = parseTextures2DGroupNode(textures2DGroupNode);\n          resourcesData[\"texture2dgroup\"][textures2DGroupData[\"id\"]] = textures2DGroupData;\n        }\n        resourcesData[\"object\"] = {};\n        var objectNodes = resourcesNode.querySelectorAll(\"object\");\n        for (var _i7 = 0; _i7 < objectNodes.length; _i7++) {\n          var objectNode = objectNodes[_i7];\n          var objectData = parseObjectNode(objectNode);\n          resourcesData[\"object\"][objectData[\"id\"]] = objectData;\n        }\n        return resourcesData;\n      }\n      function parseBuildNode(buildNode) {\n        var buildData = [];\n        var itemNodes = buildNode.querySelectorAll(\"item\");\n        for (var i = 0; i < itemNodes.length; i++) {\n          var itemNode = itemNodes[i];\n          var buildItem = {\n            objectId: itemNode.getAttribute(\"objectid\")\n          };\n          var transform = itemNode.getAttribute(\"transform\");\n          if (transform) {\n            buildItem[\"transform\"] = parseTransform(transform);\n          }\n          buildData.push(buildItem);\n        }\n        return buildData;\n      }\n      function parseModelNode(modelNode) {\n        var modelData = {\n          unit: modelNode.getAttribute(\"unit\") || \"millimeter\"\n        };\n        var metadataNodes = modelNode.querySelectorAll(\"metadata\");\n        if (metadataNodes) {\n          modelData[\"metadata\"] = parseMetadataNodes(metadataNodes);\n        }\n        var resourcesNode = modelNode.querySelector(\"resources\");\n        if (resourcesNode) {\n          modelData[\"resources\"] = parseResourcesNode(resourcesNode);\n        }\n        var buildNode = modelNode.querySelector(\"build\");\n        if (buildNode) {\n          modelData[\"build\"] = parseBuildNode(buildNode);\n        }\n        return modelData;\n      }\n      function buildTexture(texture2dgroup, objects2, modelData, textureData) {\n        var texid = texture2dgroup.texid;\n        var texture2ds = modelData.resources.texture2d;\n        var texture2d = texture2ds[texid];\n        if (texture2d) {\n          var data2 = textureData[texture2d.path];\n          var type = texture2d.contenttype;\n          var blob = new Blob([data2], {\n            type: type\n          });\n          var sourceURI = URL.createObjectURL(blob);\n          var texture = textureLoader.load(sourceURI, function () {\n            URL.revokeObjectURL(sourceURI);\n          });\n          if (\"colorSpace\" in texture) texture.colorSpace = \"srgb\";else texture.encoding = 3001;\n          switch (texture2d.tilestyleu) {\n            case \"wrap\":\n              texture.wrapS = RepeatWrapping;\n              break;\n            case \"mirror\":\n              texture.wrapS = MirroredRepeatWrapping;\n              break;\n            case \"none\":\n            case \"clamp\":\n              texture.wrapS = ClampToEdgeWrapping;\n              break;\n            default:\n              texture.wrapS = RepeatWrapping;\n          }\n          switch (texture2d.tilestylev) {\n            case \"wrap\":\n              texture.wrapT = RepeatWrapping;\n              break;\n            case \"mirror\":\n              texture.wrapT = MirroredRepeatWrapping;\n              break;\n            case \"none\":\n            case \"clamp\":\n              texture.wrapT = ClampToEdgeWrapping;\n              break;\n            default:\n              texture.wrapT = RepeatWrapping;\n          }\n          switch (texture2d.filter) {\n            case \"auto\":\n              texture.magFilter = LinearFilter;\n              texture.minFilter = LinearMipmapLinearFilter;\n              break;\n            case \"linear\":\n              texture.magFilter = LinearFilter;\n              texture.minFilter = LinearFilter;\n              break;\n            case \"nearest\":\n              texture.magFilter = NearestFilter;\n              texture.minFilter = NearestFilter;\n              break;\n            default:\n              texture.magFilter = LinearFilter;\n              texture.minFilter = LinearMipmapLinearFilter;\n          }\n          return texture;\n        } else {\n          return null;\n        }\n      }\n      function buildBasematerialsMeshes(basematerials, triangleProperties, meshData, objects2, modelData, textureData, objectData) {\n        var objectPindex = objectData.pindex;\n        var materialMap = {};\n        for (var i = 0, l = triangleProperties.length; i < l; i++) {\n          var triangleProperty = triangleProperties[i];\n          var pindex = triangleProperty.p1 !== void 0 ? triangleProperty.p1 : objectPindex;\n          if (materialMap[pindex] === void 0) materialMap[pindex] = [];\n          materialMap[pindex].push(triangleProperty);\n        }\n        var keys = Object.keys(materialMap);\n        var meshes = [];\n        for (var _i8 = 0, _l = keys.length; _i8 < _l; _i8++) {\n          var materialIndex = keys[_i8];\n          var trianglePropertiesProps = materialMap[materialIndex];\n          var basematerialData = basematerials.basematerials[materialIndex];\n          var material = getBuild(basematerialData, objects2, modelData, textureData, objectData, buildBasematerial);\n          var geometry = new BufferGeometry();\n          var positionData = [];\n          var vertices = meshData.vertices;\n          for (var j = 0, jl = trianglePropertiesProps.length; j < jl; j++) {\n            var _triangleProperty = trianglePropertiesProps[j];\n            positionData.push(vertices[_triangleProperty.v1 * 3 + 0]);\n            positionData.push(vertices[_triangleProperty.v1 * 3 + 1]);\n            positionData.push(vertices[_triangleProperty.v1 * 3 + 2]);\n            positionData.push(vertices[_triangleProperty.v2 * 3 + 0]);\n            positionData.push(vertices[_triangleProperty.v2 * 3 + 1]);\n            positionData.push(vertices[_triangleProperty.v2 * 3 + 2]);\n            positionData.push(vertices[_triangleProperty.v3 * 3 + 0]);\n            positionData.push(vertices[_triangleProperty.v3 * 3 + 1]);\n            positionData.push(vertices[_triangleProperty.v3 * 3 + 2]);\n          }\n          geometry.setAttribute(\"position\", new Float32BufferAttribute(positionData, 3));\n          var mesh = new Mesh(geometry, material);\n          meshes.push(mesh);\n        }\n        return meshes;\n      }\n      function buildTexturedMesh(texture2dgroup, triangleProperties, meshData, objects2, modelData, textureData, objectData) {\n        var geometry = new BufferGeometry();\n        var positionData = [];\n        var uvData = [];\n        var vertices = meshData.vertices;\n        var uvs = texture2dgroup.uvs;\n        for (var i = 0, l = triangleProperties.length; i < l; i++) {\n          var triangleProperty = triangleProperties[i];\n          positionData.push(vertices[triangleProperty.v1 * 3 + 0]);\n          positionData.push(vertices[triangleProperty.v1 * 3 + 1]);\n          positionData.push(vertices[triangleProperty.v1 * 3 + 2]);\n          positionData.push(vertices[triangleProperty.v2 * 3 + 0]);\n          positionData.push(vertices[triangleProperty.v2 * 3 + 1]);\n          positionData.push(vertices[triangleProperty.v2 * 3 + 2]);\n          positionData.push(vertices[triangleProperty.v3 * 3 + 0]);\n          positionData.push(vertices[triangleProperty.v3 * 3 + 1]);\n          positionData.push(vertices[triangleProperty.v3 * 3 + 2]);\n          uvData.push(uvs[triangleProperty.p1 * 2 + 0]);\n          uvData.push(uvs[triangleProperty.p1 * 2 + 1]);\n          uvData.push(uvs[triangleProperty.p2 * 2 + 0]);\n          uvData.push(uvs[triangleProperty.p2 * 2 + 1]);\n          uvData.push(uvs[triangleProperty.p3 * 2 + 0]);\n          uvData.push(uvs[triangleProperty.p3 * 2 + 1]);\n        }\n        geometry.setAttribute(\"position\", new Float32BufferAttribute(positionData, 3));\n        geometry.setAttribute(\"uv\", new Float32BufferAttribute(uvData, 2));\n        var texture = getBuild(texture2dgroup, objects2, modelData, textureData, objectData, buildTexture);\n        var material = new MeshPhongMaterial({\n          map: texture,\n          flatShading: true\n        });\n        var mesh = new Mesh(geometry, material);\n        return mesh;\n      }\n      function buildVertexColorMesh(colorgroup, triangleProperties, meshData, objects2, modelData, objectData) {\n        var geometry = new BufferGeometry();\n        var positionData = [];\n        var colorData = [];\n        var vertices = meshData.vertices;\n        var colors = colorgroup.colors;\n        for (var i = 0, l = triangleProperties.length; i < l; i++) {\n          var triangleProperty = triangleProperties[i];\n          var v1 = triangleProperty.v1;\n          var v2 = triangleProperty.v2;\n          var v3 = triangleProperty.v3;\n          positionData.push(vertices[v1 * 3 + 0]);\n          positionData.push(vertices[v1 * 3 + 1]);\n          positionData.push(vertices[v1 * 3 + 2]);\n          positionData.push(vertices[v2 * 3 + 0]);\n          positionData.push(vertices[v2 * 3 + 1]);\n          positionData.push(vertices[v2 * 3 + 2]);\n          positionData.push(vertices[v3 * 3 + 0]);\n          positionData.push(vertices[v3 * 3 + 1]);\n          positionData.push(vertices[v3 * 3 + 2]);\n          var p1 = triangleProperty.p1 !== void 0 ? triangleProperty.p1 : objectData.pindex;\n          var p2 = triangleProperty.p2 !== void 0 ? triangleProperty.p2 : p1;\n          var p3 = triangleProperty.p3 !== void 0 ? triangleProperty.p3 : p1;\n          colorData.push(colors[p1 * 3 + 0]);\n          colorData.push(colors[p1 * 3 + 1]);\n          colorData.push(colors[p1 * 3 + 2]);\n          colorData.push(colors[p2 * 3 + 0]);\n          colorData.push(colors[p2 * 3 + 1]);\n          colorData.push(colors[p2 * 3 + 2]);\n          colorData.push(colors[p3 * 3 + 0]);\n          colorData.push(colors[p3 * 3 + 1]);\n          colorData.push(colors[p3 * 3 + 2]);\n        }\n        geometry.setAttribute(\"position\", new Float32BufferAttribute(positionData, 3));\n        geometry.setAttribute(\"color\", new Float32BufferAttribute(colorData, 3));\n        var material = new MeshPhongMaterial({\n          vertexColors: true,\n          flatShading: true\n        });\n        var mesh = new Mesh(geometry, material);\n        return mesh;\n      }\n      function buildDefaultMesh(meshData) {\n        var geometry = new BufferGeometry();\n        geometry.setIndex(new BufferAttribute(meshData[\"triangles\"], 1));\n        geometry.setAttribute(\"position\", new BufferAttribute(meshData[\"vertices\"], 3));\n        var material = new MeshPhongMaterial({\n          color: 11184895,\n          flatShading: true\n        });\n        var mesh = new Mesh(geometry, material);\n        return mesh;\n      }\n      function buildMeshes(resourceMap, meshData, objects2, modelData, textureData, objectData) {\n        var keys = Object.keys(resourceMap);\n        var meshes = [];\n        for (var i = 0, il = keys.length; i < il; i++) {\n          var resourceId = keys[i];\n          var triangleProperties = resourceMap[resourceId];\n          var resourceType = getResourceType(resourceId, modelData);\n          switch (resourceType) {\n            case \"material\":\n              var basematerials = modelData.resources.basematerials[resourceId];\n              var newMeshes = buildBasematerialsMeshes(basematerials, triangleProperties, meshData, objects2, modelData, textureData, objectData);\n              for (var j = 0, jl = newMeshes.length; j < jl; j++) {\n                meshes.push(newMeshes[j]);\n              }\n              break;\n            case \"texture\":\n              var texture2dgroup = modelData.resources.texture2dgroup[resourceId];\n              meshes.push(buildTexturedMesh(texture2dgroup, triangleProperties, meshData, objects2, modelData, textureData, objectData));\n              break;\n            case \"vertexColors\":\n              var colorgroup = modelData.resources.colorgroup[resourceId];\n              meshes.push(buildVertexColorMesh(colorgroup, triangleProperties, meshData, objects2, modelData, objectData));\n              break;\n            case \"default\":\n              meshes.push(buildDefaultMesh(meshData));\n              break;\n            default:\n              console.error(\"THREE.3MFLoader: Unsupported resource type.\");\n          }\n        }\n        return meshes;\n      }\n      function getResourceType(pid, modelData) {\n        if (modelData.resources.texture2dgroup[pid] !== void 0) {\n          return \"texture\";\n        } else if (modelData.resources.basematerials[pid] !== void 0) {\n          return \"material\";\n        } else if (modelData.resources.colorgroup[pid] !== void 0) {\n          return \"vertexColors\";\n        } else if (pid === \"default\") {\n          return \"default\";\n        } else {\n          return void 0;\n        }\n      }\n      function analyzeObject(modelData, meshData, objectData) {\n        var resourceMap = {};\n        var triangleProperties = meshData[\"triangleProperties\"];\n        var objectPid = objectData.pid;\n        for (var i = 0, l = triangleProperties.length; i < l; i++) {\n          var triangleProperty = triangleProperties[i];\n          var pid = triangleProperty.pid !== void 0 ? triangleProperty.pid : objectPid;\n          if (pid === void 0) pid = \"default\";\n          if (resourceMap[pid] === void 0) resourceMap[pid] = [];\n          resourceMap[pid].push(triangleProperty);\n        }\n        return resourceMap;\n      }\n      function buildGroup(meshData, objects2, modelData, textureData, objectData) {\n        var group = new Group();\n        var resourceMap = analyzeObject(modelData, meshData, objectData);\n        var meshes = buildMeshes(resourceMap, meshData, objects2, modelData, textureData, objectData);\n        for (var i = 0, l = meshes.length; i < l; i++) {\n          group.add(meshes[i]);\n        }\n        return group;\n      }\n      function applyExtensions(extensions, meshData, modelXml) {\n        if (!extensions) {\n          return;\n        }\n        var availableExtensions = [];\n        var keys = Object.keys(extensions);\n        for (var i = 0; i < keys.length; i++) {\n          var ns = keys[i];\n          for (var j = 0; j < scope.availableExtensions.length; j++) {\n            var extension = scope.availableExtensions[j];\n            if (extension.ns === ns) {\n              availableExtensions.push(extension);\n            }\n          }\n        }\n        for (var _i9 = 0; _i9 < availableExtensions.length; _i9++) {\n          var _extension = availableExtensions[_i9];\n          _extension.apply(modelXml, extensions[_extension[\"ns\"]], meshData);\n        }\n      }\n      function getBuild(data2, objects2, modelData, textureData, objectData, builder) {\n        if (data2.build !== void 0) return data2.build;\n        data2.build = builder(data2, objects2, modelData, textureData, objectData);\n        return data2.build;\n      }\n      function buildBasematerial(materialData, objects2, modelData) {\n        var material;\n        var displaypropertiesid = materialData.displaypropertiesid;\n        var pbmetallicdisplayproperties = modelData.resources.pbmetallicdisplayproperties;\n        if (displaypropertiesid !== null && pbmetallicdisplayproperties[displaypropertiesid] !== void 0) {\n          var pbmetallicdisplayproperty = pbmetallicdisplayproperties[displaypropertiesid];\n          var metallicData = pbmetallicdisplayproperty.data[materialData.index];\n          material = new MeshStandardMaterial({\n            flatShading: true,\n            roughness: metallicData.roughness,\n            metalness: metallicData.metallicness\n          });\n        } else {\n          material = new MeshPhongMaterial({\n            flatShading: true\n          });\n        }\n        material.name = materialData.name;\n        var displaycolor = materialData.displaycolor;\n        var color = displaycolor.substring(0, 7);\n        material.color.setStyle(color);\n        material.color.convertSRGBToLinear();\n        if (displaycolor.length === 9) {\n          material.opacity = parseInt(displaycolor.charAt(7) + displaycolor.charAt(8), 16) / 255;\n        }\n        return material;\n      }\n      function buildComposite(compositeData, objects2, modelData, textureData) {\n        var composite = new Group();\n        for (var j = 0; j < compositeData.length; j++) {\n          var component = compositeData[j];\n          var build2 = objects2[component.objectId];\n          if (build2 === void 0) {\n            buildObject(component.objectId, objects2, modelData, textureData);\n            build2 = objects2[component.objectId];\n          }\n          var object3D = build2.clone();\n          var transform = component.transform;\n          if (transform) {\n            object3D.applyMatrix4(transform);\n          }\n          composite.add(object3D);\n        }\n        return composite;\n      }\n      function buildObject(objectId, objects2, modelData, textureData) {\n        var objectData = modelData[\"resources\"][\"object\"][objectId];\n        if (objectData[\"mesh\"]) {\n          var meshData = objectData[\"mesh\"];\n          var extensions = modelData[\"extensions\"];\n          var modelXml = modelData[\"xml\"];\n          applyExtensions(extensions, meshData, modelXml);\n          objects2[objectData.id] = getBuild(meshData, objects2, modelData, textureData, objectData, buildGroup);\n        } else {\n          var compositeData = objectData[\"components\"];\n          objects2[objectData.id] = getBuild(compositeData, objects2, modelData, textureData, objectData, buildComposite);\n        }\n      }\n      function buildObjects(data3mf2) {\n        var modelsData = data3mf2.model;\n        var modelRels = data3mf2.modelRels;\n        var objects2 = {};\n        var modelsKeys = Object.keys(modelsData);\n        var textureData = {};\n        if (modelRels) {\n          for (var i = 0, l = modelRels.length; i < l; i++) {\n            var modelRel = modelRels[i];\n            var textureKey = modelRel.target.substring(1);\n            if (data3mf2.texture[textureKey]) {\n              textureData[modelRel.target] = data3mf2.texture[textureKey];\n            }\n          }\n        }\n        for (var _i10 = 0; _i10 < modelsKeys.length; _i10++) {\n          var modelsKey = modelsKeys[_i10];\n          var modelData = modelsData[modelsKey];\n          var objectIds = Object.keys(modelData[\"resources\"][\"object\"]);\n          for (var j = 0; j < objectIds.length; j++) {\n            var objectId = objectIds[j];\n            buildObject(objectId, objects2, modelData, textureData);\n          }\n        }\n        return objects2;\n      }\n      function fetch3DModelPart(rels) {\n        for (var i = 0; i < rels.length; i++) {\n          var rel = rels[i];\n          var extension = rel.target.split(\".\").pop();\n          if (extension.toLowerCase() === \"model\") return rel;\n        }\n      }\n      function build(objects2, data3mf2) {\n        var group = new Group();\n        var relationship = fetch3DModelPart(data3mf2[\"rels\"]);\n        var buildData = data3mf2.model[relationship[\"target\"].substring(1)][\"build\"];\n        for (var i = 0; i < buildData.length; i++) {\n          var buildItem = buildData[i];\n          var object3D = objects2[buildItem[\"objectId\"]];\n          var transform = buildItem[\"transform\"];\n          if (transform) {\n            object3D.applyMatrix4(transform);\n          }\n          group.add(object3D);\n        }\n        return group;\n      }\n      var data3mf = loadDocument(data);\n      var objects = buildObjects(data3mf);\n      return build(objects, data3mf);\n    }\n  }, {\n    key: \"addExtension\",\n    value: function addExtension(extension) {\n      this.availableExtensions.push(extension);\n    }\n  }]);\n  return ThreeMFLoader;\n}(Loader);\nexport { ThreeMFLoader };","map":{"version":3,"names":["Loader","FileLoader","TextureLoader","LoaderUtils","Color","Matrix4","RepeatWrapping","ClampToEdgeWrapping","MirroredRepeatWrapping","LinearFilter","LinearMipmapLinearFilter","NearestFilter","BufferGeometry","Float32BufferAttribute","Mesh","MeshPhongMaterial","BufferAttribute","Group","MeshStandardMaterial","unzipSync","ThreeMFLoader","_Loader","_inherits","_super","_createSuper","manager","_this","_classCallCheck","call","availableExtensions","_createClass","key","value","load","url","onLoad","onProgress","onError","scope","loader","setPath","path","setResponseType","setRequestHeader","requestHeader","setWithCredentials","withCredentials","buffer","parse","e","console","error","itemError","data","textureLoader","loadDocument","data2","zip","file","relsName","modelRelsName","modelPartNames","printTicketPartNames","texturesPartNames","otherPartNames","modelRels","modelParts","printTicketParts","texturesParts","otherParts","Uint8Array","ReferenceError","match","push","relsView","relsFileText","decodeText","rels","parseRelsXml","relsView2","relsFileText2","i","length","modelPart","view","fileText","xmlData","DOMParser","parseFromString","documentElement","nodeName","toLowerCase","modelNode","querySelector","extensions","i2","attributes","attr","name","RegExp","$1","modelData","parseModelNode","Object","keys","texturesPartName","model","printTicket","texture","other","relationships","relsXmlData","relsNodes","querySelectorAll","relsNode","relationship","target","getAttribute","id","type","parseMetadataNodes","metadataNodes","metadataData","metadataNode","validNames","indexOf","textContent","parseBasematerialsNode","basematerialsNode","basematerialsData","basematerials","basematerialNodes","basematerialNode","basematerialData","parseBasematerialNode","index","parseTexture2DNode","texture2DNode","texture2dData","contenttype","tilestyleu","tilestylev","filter","parseTextures2DGroupNode","texture2DGroupNode","texture2DGroupData","texid","displaypropertiesid","tex2coordNodes","uvs","tex2coordNode","u","v","parseFloat","Float32Array","parseColorGroupNode","colorGroupNode","colorGroupData","colorNodes","colors","colorObject","colorNode","color","setStyle","substring","convertSRGBToLinear","r","g","b","parseMetallicDisplaypropertiesNode","metallicDisplaypropetiesNode","metallicDisplaypropertiesData","metallicNodes","metallicData","metallicNode","metallicness","roughness","parseMeshNode","meshNode","meshData","vertices","vertexNodes","vertexNode","x","y","z","triangleProperties","triangles","triangleNodes","triangleNode","v1","v2","v3","p1","p2","p3","pid","triangleProperty","parseInt","Uint32Array","parseComponentsNode","componentsNode","components","componentNodes","componentNode","componentData","parseComponentNode","transform","parseTransform","t","split","forEach","s","matrix","set","parseObjectNode","objectNode","objectData","pindex","thumbnail","partnumber","parseResourcesNode","resourcesNode","resourcesData","basematerialsNodes","textures2DNodes","textures2DNode","texture2DData","colorGroupNodes","pbmetallicdisplaypropertiesNodes","pbmetallicdisplaypropertiesNode","pbmetallicdisplaypropertiesData","textures2DGroupNodes","textures2DGroupNode","textures2DGroupData","objectNodes","parseBuildNode","buildNode","buildData","itemNodes","itemNode","buildItem","objectId","unit","buildTexture","texture2dgroup","objects2","textureData","texture2ds","resources","texture2d","blob","Blob","sourceURI","URL","createObjectURL","revokeObjectURL","colorSpace","encoding","wrapS","wrapT","magFilter","minFilter","buildBasematerialsMeshes","objectPindex","materialMap","l","meshes","materialIndex","trianglePropertiesProps","material","getBuild","buildBasematerial","geometry","positionData","j","jl","setAttribute","mesh","buildTexturedMesh","uvData","map","flatShading","buildVertexColorMesh","colorgroup","colorData","vertexColors","buildDefaultMesh","setIndex","buildMeshes","resourceMap","il","resourceId","resourceType","getResourceType","newMeshes","analyzeObject","objectPid","buildGroup","group","add","applyExtensions","modelXml","ns","extension","apply","builder","build","materialData","pbmetallicdisplayproperties","pbmetallicdisplayproperty","metalness","displaycolor","opacity","charAt","buildComposite","compositeData","composite","component","build2","buildObject","object3D","clone","applyMatrix4","buildObjects","data3mf2","modelsData","modelsKeys","modelRel","textureKey","modelsKey","objectIds","fetch3DModelPart","rel","pop","data3mf","objects","addExtension"],"sources":["/home/krug/Coding/JavaScript/Websites/Personal/personal/node_modules/.pnpm/three-stdlib@2.23.7_three@0.151.3/node_modules/three-stdlib/loaders/3MFLoader.js"],"sourcesContent":["import { Loader, FileLoader, TextureLoader, LoaderUtils, Color, Matrix4, RepeatWrapping, ClampToEdgeWrapping, MirroredRepeatWrapping, LinearFilter, LinearMipmapLinearFilter, NearestFilter, BufferGeometry, Float32BufferAttribute, Mesh, MeshPhongMaterial, BufferAttribute, Group, MeshStandardMaterial } from \"three\";\nimport { unzipSync } from \"fflate\";\nclass ThreeMFLoader extends Loader {\n  constructor(manager) {\n    super(manager);\n    this.availableExtensions = [];\n  }\n  load(url, onLoad, onProgress, onError) {\n    const scope = this;\n    const loader = new FileLoader(scope.manager);\n    loader.setPath(scope.path);\n    loader.setResponseType(\"arraybuffer\");\n    loader.setRequestHeader(scope.requestHeader);\n    loader.setWithCredentials(scope.withCredentials);\n    loader.load(\n      url,\n      function(buffer) {\n        try {\n          onLoad(scope.parse(buffer));\n        } catch (e) {\n          if (onError) {\n            onError(e);\n          } else {\n            console.error(e);\n          }\n          scope.manager.itemError(url);\n        }\n      },\n      onProgress,\n      onError\n    );\n  }\n  parse(data) {\n    const scope = this;\n    const textureLoader = new TextureLoader(this.manager);\n    function loadDocument(data2) {\n      let zip = null;\n      let file = null;\n      let relsName;\n      let modelRelsName;\n      const modelPartNames = [];\n      const printTicketPartNames = [];\n      const texturesPartNames = [];\n      const otherPartNames = [];\n      let modelRels;\n      const modelParts = {};\n      const printTicketParts = {};\n      const texturesParts = {};\n      const otherParts = {};\n      try {\n        zip = unzipSync(new Uint8Array(data2));\n      } catch (e) {\n        if (e instanceof ReferenceError) {\n          console.error(\"THREE.3MFLoader: fflate missing and file is compressed.\");\n          return null;\n        }\n      }\n      for (file in zip) {\n        if (file.match(/\\_rels\\/.rels$/)) {\n          relsName = file;\n        } else if (file.match(/3D\\/_rels\\/.*\\.model\\.rels$/)) {\n          modelRelsName = file;\n        } else if (file.match(/^3D\\/.*\\.model$/)) {\n          modelPartNames.push(file);\n        } else if (file.match(/^3D\\/Metadata\\/.*\\.xml$/)) {\n          printTicketPartNames.push(file);\n        } else if (file.match(/^3D\\/Textures?\\/.*/)) {\n          texturesPartNames.push(file);\n        } else if (file.match(/^3D\\/Other\\/.*/)) {\n          otherPartNames.push(file);\n        }\n      }\n      const relsView = zip[relsName];\n      const relsFileText = LoaderUtils.decodeText(relsView);\n      const rels = parseRelsXml(relsFileText);\n      if (modelRelsName) {\n        const relsView2 = zip[modelRelsName];\n        const relsFileText2 = LoaderUtils.decodeText(relsView2);\n        modelRels = parseRelsXml(relsFileText2);\n      }\n      for (let i = 0; i < modelPartNames.length; i++) {\n        const modelPart = modelPartNames[i];\n        const view = zip[modelPart];\n        const fileText = LoaderUtils.decodeText(view);\n        const xmlData = new DOMParser().parseFromString(fileText, \"application/xml\");\n        if (xmlData.documentElement.nodeName.toLowerCase() !== \"model\") {\n          console.error(\"THREE.3MFLoader: Error loading 3MF - no 3MF document found: \", modelPart);\n        }\n        const modelNode = xmlData.querySelector(\"model\");\n        const extensions = {};\n        for (let i2 = 0; i2 < modelNode.attributes.length; i2++) {\n          const attr = modelNode.attributes[i2];\n          if (attr.name.match(/^xmlns:(.+)$/)) {\n            extensions[attr.value] = RegExp.$1;\n          }\n        }\n        const modelData = parseModelNode(modelNode);\n        modelData[\"xml\"] = modelNode;\n        if (0 < Object.keys(extensions).length) {\n          modelData[\"extensions\"] = extensions;\n        }\n        modelParts[modelPart] = modelData;\n      }\n      for (let i = 0; i < texturesPartNames.length; i++) {\n        const texturesPartName = texturesPartNames[i];\n        texturesParts[texturesPartName] = zip[texturesPartName].buffer;\n      }\n      return {\n        rels,\n        modelRels,\n        model: modelParts,\n        printTicket: printTicketParts,\n        texture: texturesParts,\n        other: otherParts\n      };\n    }\n    function parseRelsXml(relsFileText) {\n      const relationships = [];\n      const relsXmlData = new DOMParser().parseFromString(relsFileText, \"application/xml\");\n      const relsNodes = relsXmlData.querySelectorAll(\"Relationship\");\n      for (let i = 0; i < relsNodes.length; i++) {\n        const relsNode = relsNodes[i];\n        const relationship = {\n          target: relsNode.getAttribute(\"Target\"),\n          //required\n          id: relsNode.getAttribute(\"Id\"),\n          //required\n          type: relsNode.getAttribute(\"Type\")\n          //required\n        };\n        relationships.push(relationship);\n      }\n      return relationships;\n    }\n    function parseMetadataNodes(metadataNodes) {\n      const metadataData = {};\n      for (let i = 0; i < metadataNodes.length; i++) {\n        const metadataNode = metadataNodes[i];\n        const name = metadataNode.getAttribute(\"name\");\n        const validNames = [\n          \"Title\",\n          \"Designer\",\n          \"Description\",\n          \"Copyright\",\n          \"LicenseTerms\",\n          \"Rating\",\n          \"CreationDate\",\n          \"ModificationDate\"\n        ];\n        if (0 <= validNames.indexOf(name)) {\n          metadataData[name] = metadataNode.textContent;\n        }\n      }\n      return metadataData;\n    }\n    function parseBasematerialsNode(basematerialsNode) {\n      const basematerialsData = {\n        id: basematerialsNode.getAttribute(\"id\"),\n        // required\n        basematerials: []\n      };\n      const basematerialNodes = basematerialsNode.querySelectorAll(\"base\");\n      for (let i = 0; i < basematerialNodes.length; i++) {\n        const basematerialNode = basematerialNodes[i];\n        const basematerialData = parseBasematerialNode(basematerialNode);\n        basematerialData.index = i;\n        basematerialsData.basematerials.push(basematerialData);\n      }\n      return basematerialsData;\n    }\n    function parseTexture2DNode(texture2DNode) {\n      const texture2dData = {\n        id: texture2DNode.getAttribute(\"id\"),\n        // required\n        path: texture2DNode.getAttribute(\"path\"),\n        // required\n        contenttype: texture2DNode.getAttribute(\"contenttype\"),\n        // required\n        tilestyleu: texture2DNode.getAttribute(\"tilestyleu\"),\n        tilestylev: texture2DNode.getAttribute(\"tilestylev\"),\n        filter: texture2DNode.getAttribute(\"filter\")\n      };\n      return texture2dData;\n    }\n    function parseTextures2DGroupNode(texture2DGroupNode) {\n      const texture2DGroupData = {\n        id: texture2DGroupNode.getAttribute(\"id\"),\n        // required\n        texid: texture2DGroupNode.getAttribute(\"texid\"),\n        // required\n        displaypropertiesid: texture2DGroupNode.getAttribute(\"displaypropertiesid\")\n      };\n      const tex2coordNodes = texture2DGroupNode.querySelectorAll(\"tex2coord\");\n      const uvs = [];\n      for (let i = 0; i < tex2coordNodes.length; i++) {\n        const tex2coordNode = tex2coordNodes[i];\n        const u = tex2coordNode.getAttribute(\"u\");\n        const v = tex2coordNode.getAttribute(\"v\");\n        uvs.push(parseFloat(u), parseFloat(v));\n      }\n      texture2DGroupData[\"uvs\"] = new Float32Array(uvs);\n      return texture2DGroupData;\n    }\n    function parseColorGroupNode(colorGroupNode) {\n      const colorGroupData = {\n        id: colorGroupNode.getAttribute(\"id\"),\n        // required\n        displaypropertiesid: colorGroupNode.getAttribute(\"displaypropertiesid\")\n      };\n      const colorNodes = colorGroupNode.querySelectorAll(\"color\");\n      const colors = [];\n      const colorObject = new Color();\n      for (let i = 0; i < colorNodes.length; i++) {\n        const colorNode = colorNodes[i];\n        const color = colorNode.getAttribute(\"color\");\n        colorObject.setStyle(color.substring(0, 7));\n        colorObject.convertSRGBToLinear();\n        colors.push(colorObject.r, colorObject.g, colorObject.b);\n      }\n      colorGroupData[\"colors\"] = new Float32Array(colors);\n      return colorGroupData;\n    }\n    function parseMetallicDisplaypropertiesNode(metallicDisplaypropetiesNode) {\n      const metallicDisplaypropertiesData = {\n        id: metallicDisplaypropetiesNode.getAttribute(\"id\")\n        // required\n      };\n      const metallicNodes = metallicDisplaypropetiesNode.querySelectorAll(\"pbmetallic\");\n      const metallicData = [];\n      for (let i = 0; i < metallicNodes.length; i++) {\n        const metallicNode = metallicNodes[i];\n        metallicData.push({\n          name: metallicNode.getAttribute(\"name\"),\n          // required\n          metallicness: parseFloat(metallicNode.getAttribute(\"metallicness\")),\n          // required\n          roughness: parseFloat(metallicNode.getAttribute(\"roughness\"))\n          // required\n        });\n      }\n      metallicDisplaypropertiesData.data = metallicData;\n      return metallicDisplaypropertiesData;\n    }\n    function parseBasematerialNode(basematerialNode) {\n      const basematerialData = {};\n      basematerialData[\"name\"] = basematerialNode.getAttribute(\"name\");\n      basematerialData[\"displaycolor\"] = basematerialNode.getAttribute(\"displaycolor\");\n      basematerialData[\"displaypropertiesid\"] = basematerialNode.getAttribute(\"displaypropertiesid\");\n      return basematerialData;\n    }\n    function parseMeshNode(meshNode) {\n      const meshData = {};\n      const vertices = [];\n      const vertexNodes = meshNode.querySelectorAll(\"vertices vertex\");\n      for (let i = 0; i < vertexNodes.length; i++) {\n        const vertexNode = vertexNodes[i];\n        const x = vertexNode.getAttribute(\"x\");\n        const y = vertexNode.getAttribute(\"y\");\n        const z = vertexNode.getAttribute(\"z\");\n        vertices.push(parseFloat(x), parseFloat(y), parseFloat(z));\n      }\n      meshData[\"vertices\"] = new Float32Array(vertices);\n      const triangleProperties = [];\n      const triangles = [];\n      const triangleNodes = meshNode.querySelectorAll(\"triangles triangle\");\n      for (let i = 0; i < triangleNodes.length; i++) {\n        const triangleNode = triangleNodes[i];\n        const v1 = triangleNode.getAttribute(\"v1\");\n        const v2 = triangleNode.getAttribute(\"v2\");\n        const v3 = triangleNode.getAttribute(\"v3\");\n        const p1 = triangleNode.getAttribute(\"p1\");\n        const p2 = triangleNode.getAttribute(\"p2\");\n        const p3 = triangleNode.getAttribute(\"p3\");\n        const pid = triangleNode.getAttribute(\"pid\");\n        const triangleProperty = {};\n        triangleProperty[\"v1\"] = parseInt(v1, 10);\n        triangleProperty[\"v2\"] = parseInt(v2, 10);\n        triangleProperty[\"v3\"] = parseInt(v3, 10);\n        triangles.push(triangleProperty[\"v1\"], triangleProperty[\"v2\"], triangleProperty[\"v3\"]);\n        if (p1) {\n          triangleProperty[\"p1\"] = parseInt(p1, 10);\n        }\n        if (p2) {\n          triangleProperty[\"p2\"] = parseInt(p2, 10);\n        }\n        if (p3) {\n          triangleProperty[\"p3\"] = parseInt(p3, 10);\n        }\n        if (pid) {\n          triangleProperty[\"pid\"] = pid;\n        }\n        if (0 < Object.keys(triangleProperty).length) {\n          triangleProperties.push(triangleProperty);\n        }\n      }\n      meshData[\"triangleProperties\"] = triangleProperties;\n      meshData[\"triangles\"] = new Uint32Array(triangles);\n      return meshData;\n    }\n    function parseComponentsNode(componentsNode) {\n      const components = [];\n      const componentNodes = componentsNode.querySelectorAll(\"component\");\n      for (let i = 0; i < componentNodes.length; i++) {\n        const componentNode = componentNodes[i];\n        const componentData = parseComponentNode(componentNode);\n        components.push(componentData);\n      }\n      return components;\n    }\n    function parseComponentNode(componentNode) {\n      const componentData = {};\n      componentData[\"objectId\"] = componentNode.getAttribute(\"objectid\");\n      const transform = componentNode.getAttribute(\"transform\");\n      if (transform) {\n        componentData[\"transform\"] = parseTransform(transform);\n      }\n      return componentData;\n    }\n    function parseTransform(transform) {\n      const t = [];\n      transform.split(\" \").forEach(function(s) {\n        t.push(parseFloat(s));\n      });\n      const matrix = new Matrix4();\n      matrix.set(t[0], t[3], t[6], t[9], t[1], t[4], t[7], t[10], t[2], t[5], t[8], t[11], 0, 0, 0, 1);\n      return matrix;\n    }\n    function parseObjectNode(objectNode) {\n      const objectData = {\n        type: objectNode.getAttribute(\"type\")\n      };\n      const id = objectNode.getAttribute(\"id\");\n      if (id) {\n        objectData[\"id\"] = id;\n      }\n      const pid = objectNode.getAttribute(\"pid\");\n      if (pid) {\n        objectData[\"pid\"] = pid;\n      }\n      const pindex = objectNode.getAttribute(\"pindex\");\n      if (pindex) {\n        objectData[\"pindex\"] = pindex;\n      }\n      const thumbnail = objectNode.getAttribute(\"thumbnail\");\n      if (thumbnail) {\n        objectData[\"thumbnail\"] = thumbnail;\n      }\n      const partnumber = objectNode.getAttribute(\"partnumber\");\n      if (partnumber) {\n        objectData[\"partnumber\"] = partnumber;\n      }\n      const name = objectNode.getAttribute(\"name\");\n      if (name) {\n        objectData[\"name\"] = name;\n      }\n      const meshNode = objectNode.querySelector(\"mesh\");\n      if (meshNode) {\n        objectData[\"mesh\"] = parseMeshNode(meshNode);\n      }\n      const componentsNode = objectNode.querySelector(\"components\");\n      if (componentsNode) {\n        objectData[\"components\"] = parseComponentsNode(componentsNode);\n      }\n      return objectData;\n    }\n    function parseResourcesNode(resourcesNode) {\n      const resourcesData = {};\n      resourcesData[\"basematerials\"] = {};\n      const basematerialsNodes = resourcesNode.querySelectorAll(\"basematerials\");\n      for (let i = 0; i < basematerialsNodes.length; i++) {\n        const basematerialsNode = basematerialsNodes[i];\n        const basematerialsData = parseBasematerialsNode(basematerialsNode);\n        resourcesData[\"basematerials\"][basematerialsData[\"id\"]] = basematerialsData;\n      }\n      resourcesData[\"texture2d\"] = {};\n      const textures2DNodes = resourcesNode.querySelectorAll(\"texture2d\");\n      for (let i = 0; i < textures2DNodes.length; i++) {\n        const textures2DNode = textures2DNodes[i];\n        const texture2DData = parseTexture2DNode(textures2DNode);\n        resourcesData[\"texture2d\"][texture2DData[\"id\"]] = texture2DData;\n      }\n      resourcesData[\"colorgroup\"] = {};\n      const colorGroupNodes = resourcesNode.querySelectorAll(\"colorgroup\");\n      for (let i = 0; i < colorGroupNodes.length; i++) {\n        const colorGroupNode = colorGroupNodes[i];\n        const colorGroupData = parseColorGroupNode(colorGroupNode);\n        resourcesData[\"colorgroup\"][colorGroupData[\"id\"]] = colorGroupData;\n      }\n      resourcesData[\"pbmetallicdisplayproperties\"] = {};\n      const pbmetallicdisplaypropertiesNodes = resourcesNode.querySelectorAll(\"pbmetallicdisplayproperties\");\n      for (let i = 0; i < pbmetallicdisplaypropertiesNodes.length; i++) {\n        const pbmetallicdisplaypropertiesNode = pbmetallicdisplaypropertiesNodes[i];\n        const pbmetallicdisplaypropertiesData = parseMetallicDisplaypropertiesNode(pbmetallicdisplaypropertiesNode);\n        resourcesData[\"pbmetallicdisplayproperties\"][pbmetallicdisplaypropertiesData[\"id\"]] = pbmetallicdisplaypropertiesData;\n      }\n      resourcesData[\"texture2dgroup\"] = {};\n      const textures2DGroupNodes = resourcesNode.querySelectorAll(\"texture2dgroup\");\n      for (let i = 0; i < textures2DGroupNodes.length; i++) {\n        const textures2DGroupNode = textures2DGroupNodes[i];\n        const textures2DGroupData = parseTextures2DGroupNode(textures2DGroupNode);\n        resourcesData[\"texture2dgroup\"][textures2DGroupData[\"id\"]] = textures2DGroupData;\n      }\n      resourcesData[\"object\"] = {};\n      const objectNodes = resourcesNode.querySelectorAll(\"object\");\n      for (let i = 0; i < objectNodes.length; i++) {\n        const objectNode = objectNodes[i];\n        const objectData = parseObjectNode(objectNode);\n        resourcesData[\"object\"][objectData[\"id\"]] = objectData;\n      }\n      return resourcesData;\n    }\n    function parseBuildNode(buildNode) {\n      const buildData = [];\n      const itemNodes = buildNode.querySelectorAll(\"item\");\n      for (let i = 0; i < itemNodes.length; i++) {\n        const itemNode = itemNodes[i];\n        const buildItem = {\n          objectId: itemNode.getAttribute(\"objectid\")\n        };\n        const transform = itemNode.getAttribute(\"transform\");\n        if (transform) {\n          buildItem[\"transform\"] = parseTransform(transform);\n        }\n        buildData.push(buildItem);\n      }\n      return buildData;\n    }\n    function parseModelNode(modelNode) {\n      const modelData = { unit: modelNode.getAttribute(\"unit\") || \"millimeter\" };\n      const metadataNodes = modelNode.querySelectorAll(\"metadata\");\n      if (metadataNodes) {\n        modelData[\"metadata\"] = parseMetadataNodes(metadataNodes);\n      }\n      const resourcesNode = modelNode.querySelector(\"resources\");\n      if (resourcesNode) {\n        modelData[\"resources\"] = parseResourcesNode(resourcesNode);\n      }\n      const buildNode = modelNode.querySelector(\"build\");\n      if (buildNode) {\n        modelData[\"build\"] = parseBuildNode(buildNode);\n      }\n      return modelData;\n    }\n    function buildTexture(texture2dgroup, objects2, modelData, textureData) {\n      const texid = texture2dgroup.texid;\n      const texture2ds = modelData.resources.texture2d;\n      const texture2d = texture2ds[texid];\n      if (texture2d) {\n        const data2 = textureData[texture2d.path];\n        const type = texture2d.contenttype;\n        const blob = new Blob([data2], { type });\n        const sourceURI = URL.createObjectURL(blob);\n        const texture = textureLoader.load(sourceURI, function() {\n          URL.revokeObjectURL(sourceURI);\n        });\n        if (\"colorSpace\" in texture)\n          texture.colorSpace = \"srgb\";\n        else\n          texture.encoding = 3001;\n        switch (texture2d.tilestyleu) {\n          case \"wrap\":\n            texture.wrapS = RepeatWrapping;\n            break;\n          case \"mirror\":\n            texture.wrapS = MirroredRepeatWrapping;\n            break;\n          case \"none\":\n          case \"clamp\":\n            texture.wrapS = ClampToEdgeWrapping;\n            break;\n          default:\n            texture.wrapS = RepeatWrapping;\n        }\n        switch (texture2d.tilestylev) {\n          case \"wrap\":\n            texture.wrapT = RepeatWrapping;\n            break;\n          case \"mirror\":\n            texture.wrapT = MirroredRepeatWrapping;\n            break;\n          case \"none\":\n          case \"clamp\":\n            texture.wrapT = ClampToEdgeWrapping;\n            break;\n          default:\n            texture.wrapT = RepeatWrapping;\n        }\n        switch (texture2d.filter) {\n          case \"auto\":\n            texture.magFilter = LinearFilter;\n            texture.minFilter = LinearMipmapLinearFilter;\n            break;\n          case \"linear\":\n            texture.magFilter = LinearFilter;\n            texture.minFilter = LinearFilter;\n            break;\n          case \"nearest\":\n            texture.magFilter = NearestFilter;\n            texture.minFilter = NearestFilter;\n            break;\n          default:\n            texture.magFilter = LinearFilter;\n            texture.minFilter = LinearMipmapLinearFilter;\n        }\n        return texture;\n      } else {\n        return null;\n      }\n    }\n    function buildBasematerialsMeshes(basematerials, triangleProperties, meshData, objects2, modelData, textureData, objectData) {\n      const objectPindex = objectData.pindex;\n      const materialMap = {};\n      for (let i = 0, l = triangleProperties.length; i < l; i++) {\n        const triangleProperty = triangleProperties[i];\n        const pindex = triangleProperty.p1 !== void 0 ? triangleProperty.p1 : objectPindex;\n        if (materialMap[pindex] === void 0)\n          materialMap[pindex] = [];\n        materialMap[pindex].push(triangleProperty);\n      }\n      const keys = Object.keys(materialMap);\n      const meshes = [];\n      for (let i = 0, l = keys.length; i < l; i++) {\n        const materialIndex = keys[i];\n        const trianglePropertiesProps = materialMap[materialIndex];\n        const basematerialData = basematerials.basematerials[materialIndex];\n        const material = getBuild(basematerialData, objects2, modelData, textureData, objectData, buildBasematerial);\n        const geometry = new BufferGeometry();\n        const positionData = [];\n        const vertices = meshData.vertices;\n        for (let j = 0, jl = trianglePropertiesProps.length; j < jl; j++) {\n          const triangleProperty = trianglePropertiesProps[j];\n          positionData.push(vertices[triangleProperty.v1 * 3 + 0]);\n          positionData.push(vertices[triangleProperty.v1 * 3 + 1]);\n          positionData.push(vertices[triangleProperty.v1 * 3 + 2]);\n          positionData.push(vertices[triangleProperty.v2 * 3 + 0]);\n          positionData.push(vertices[triangleProperty.v2 * 3 + 1]);\n          positionData.push(vertices[triangleProperty.v2 * 3 + 2]);\n          positionData.push(vertices[triangleProperty.v3 * 3 + 0]);\n          positionData.push(vertices[triangleProperty.v3 * 3 + 1]);\n          positionData.push(vertices[triangleProperty.v3 * 3 + 2]);\n        }\n        geometry.setAttribute(\"position\", new Float32BufferAttribute(positionData, 3));\n        const mesh = new Mesh(geometry, material);\n        meshes.push(mesh);\n      }\n      return meshes;\n    }\n    function buildTexturedMesh(texture2dgroup, triangleProperties, meshData, objects2, modelData, textureData, objectData) {\n      const geometry = new BufferGeometry();\n      const positionData = [];\n      const uvData = [];\n      const vertices = meshData.vertices;\n      const uvs = texture2dgroup.uvs;\n      for (let i = 0, l = triangleProperties.length; i < l; i++) {\n        const triangleProperty = triangleProperties[i];\n        positionData.push(vertices[triangleProperty.v1 * 3 + 0]);\n        positionData.push(vertices[triangleProperty.v1 * 3 + 1]);\n        positionData.push(vertices[triangleProperty.v1 * 3 + 2]);\n        positionData.push(vertices[triangleProperty.v2 * 3 + 0]);\n        positionData.push(vertices[triangleProperty.v2 * 3 + 1]);\n        positionData.push(vertices[triangleProperty.v2 * 3 + 2]);\n        positionData.push(vertices[triangleProperty.v3 * 3 + 0]);\n        positionData.push(vertices[triangleProperty.v3 * 3 + 1]);\n        positionData.push(vertices[triangleProperty.v3 * 3 + 2]);\n        uvData.push(uvs[triangleProperty.p1 * 2 + 0]);\n        uvData.push(uvs[triangleProperty.p1 * 2 + 1]);\n        uvData.push(uvs[triangleProperty.p2 * 2 + 0]);\n        uvData.push(uvs[triangleProperty.p2 * 2 + 1]);\n        uvData.push(uvs[triangleProperty.p3 * 2 + 0]);\n        uvData.push(uvs[triangleProperty.p3 * 2 + 1]);\n      }\n      geometry.setAttribute(\"position\", new Float32BufferAttribute(positionData, 3));\n      geometry.setAttribute(\"uv\", new Float32BufferAttribute(uvData, 2));\n      const texture = getBuild(texture2dgroup, objects2, modelData, textureData, objectData, buildTexture);\n      const material = new MeshPhongMaterial({ map: texture, flatShading: true });\n      const mesh = new Mesh(geometry, material);\n      return mesh;\n    }\n    function buildVertexColorMesh(colorgroup, triangleProperties, meshData, objects2, modelData, objectData) {\n      const geometry = new BufferGeometry();\n      const positionData = [];\n      const colorData = [];\n      const vertices = meshData.vertices;\n      const colors = colorgroup.colors;\n      for (let i = 0, l = triangleProperties.length; i < l; i++) {\n        const triangleProperty = triangleProperties[i];\n        const v1 = triangleProperty.v1;\n        const v2 = triangleProperty.v2;\n        const v3 = triangleProperty.v3;\n        positionData.push(vertices[v1 * 3 + 0]);\n        positionData.push(vertices[v1 * 3 + 1]);\n        positionData.push(vertices[v1 * 3 + 2]);\n        positionData.push(vertices[v2 * 3 + 0]);\n        positionData.push(vertices[v2 * 3 + 1]);\n        positionData.push(vertices[v2 * 3 + 2]);\n        positionData.push(vertices[v3 * 3 + 0]);\n        positionData.push(vertices[v3 * 3 + 1]);\n        positionData.push(vertices[v3 * 3 + 2]);\n        const p1 = triangleProperty.p1 !== void 0 ? triangleProperty.p1 : objectData.pindex;\n        const p2 = triangleProperty.p2 !== void 0 ? triangleProperty.p2 : p1;\n        const p3 = triangleProperty.p3 !== void 0 ? triangleProperty.p3 : p1;\n        colorData.push(colors[p1 * 3 + 0]);\n        colorData.push(colors[p1 * 3 + 1]);\n        colorData.push(colors[p1 * 3 + 2]);\n        colorData.push(colors[p2 * 3 + 0]);\n        colorData.push(colors[p2 * 3 + 1]);\n        colorData.push(colors[p2 * 3 + 2]);\n        colorData.push(colors[p3 * 3 + 0]);\n        colorData.push(colors[p3 * 3 + 1]);\n        colorData.push(colors[p3 * 3 + 2]);\n      }\n      geometry.setAttribute(\"position\", new Float32BufferAttribute(positionData, 3));\n      geometry.setAttribute(\"color\", new Float32BufferAttribute(colorData, 3));\n      const material = new MeshPhongMaterial({ vertexColors: true, flatShading: true });\n      const mesh = new Mesh(geometry, material);\n      return mesh;\n    }\n    function buildDefaultMesh(meshData) {\n      const geometry = new BufferGeometry();\n      geometry.setIndex(new BufferAttribute(meshData[\"triangles\"], 1));\n      geometry.setAttribute(\"position\", new BufferAttribute(meshData[\"vertices\"], 3));\n      const material = new MeshPhongMaterial({ color: 11184895, flatShading: true });\n      const mesh = new Mesh(geometry, material);\n      return mesh;\n    }\n    function buildMeshes(resourceMap, meshData, objects2, modelData, textureData, objectData) {\n      const keys = Object.keys(resourceMap);\n      const meshes = [];\n      for (let i = 0, il = keys.length; i < il; i++) {\n        const resourceId = keys[i];\n        const triangleProperties = resourceMap[resourceId];\n        const resourceType = getResourceType(resourceId, modelData);\n        switch (resourceType) {\n          case \"material\":\n            const basematerials = modelData.resources.basematerials[resourceId];\n            const newMeshes = buildBasematerialsMeshes(\n              basematerials,\n              triangleProperties,\n              meshData,\n              objects2,\n              modelData,\n              textureData,\n              objectData\n            );\n            for (let j = 0, jl = newMeshes.length; j < jl; j++) {\n              meshes.push(newMeshes[j]);\n            }\n            break;\n          case \"texture\":\n            const texture2dgroup = modelData.resources.texture2dgroup[resourceId];\n            meshes.push(\n              buildTexturedMesh(\n                texture2dgroup,\n                triangleProperties,\n                meshData,\n                objects2,\n                modelData,\n                textureData,\n                objectData\n              )\n            );\n            break;\n          case \"vertexColors\":\n            const colorgroup = modelData.resources.colorgroup[resourceId];\n            meshes.push(buildVertexColorMesh(colorgroup, triangleProperties, meshData, objects2, modelData, objectData));\n            break;\n          case \"default\":\n            meshes.push(buildDefaultMesh(meshData));\n            break;\n          default:\n            console.error(\"THREE.3MFLoader: Unsupported resource type.\");\n        }\n      }\n      return meshes;\n    }\n    function getResourceType(pid, modelData) {\n      if (modelData.resources.texture2dgroup[pid] !== void 0) {\n        return \"texture\";\n      } else if (modelData.resources.basematerials[pid] !== void 0) {\n        return \"material\";\n      } else if (modelData.resources.colorgroup[pid] !== void 0) {\n        return \"vertexColors\";\n      } else if (pid === \"default\") {\n        return \"default\";\n      } else {\n        return void 0;\n      }\n    }\n    function analyzeObject(modelData, meshData, objectData) {\n      const resourceMap = {};\n      const triangleProperties = meshData[\"triangleProperties\"];\n      const objectPid = objectData.pid;\n      for (let i = 0, l = triangleProperties.length; i < l; i++) {\n        const triangleProperty = triangleProperties[i];\n        let pid = triangleProperty.pid !== void 0 ? triangleProperty.pid : objectPid;\n        if (pid === void 0)\n          pid = \"default\";\n        if (resourceMap[pid] === void 0)\n          resourceMap[pid] = [];\n        resourceMap[pid].push(triangleProperty);\n      }\n      return resourceMap;\n    }\n    function buildGroup(meshData, objects2, modelData, textureData, objectData) {\n      const group = new Group();\n      const resourceMap = analyzeObject(modelData, meshData, objectData);\n      const meshes = buildMeshes(resourceMap, meshData, objects2, modelData, textureData, objectData);\n      for (let i = 0, l = meshes.length; i < l; i++) {\n        group.add(meshes[i]);\n      }\n      return group;\n    }\n    function applyExtensions(extensions, meshData, modelXml) {\n      if (!extensions) {\n        return;\n      }\n      const availableExtensions = [];\n      const keys = Object.keys(extensions);\n      for (let i = 0; i < keys.length; i++) {\n        const ns = keys[i];\n        for (let j = 0; j < scope.availableExtensions.length; j++) {\n          const extension = scope.availableExtensions[j];\n          if (extension.ns === ns) {\n            availableExtensions.push(extension);\n          }\n        }\n      }\n      for (let i = 0; i < availableExtensions.length; i++) {\n        const extension = availableExtensions[i];\n        extension.apply(modelXml, extensions[extension[\"ns\"]], meshData);\n      }\n    }\n    function getBuild(data2, objects2, modelData, textureData, objectData, builder) {\n      if (data2.build !== void 0)\n        return data2.build;\n      data2.build = builder(data2, objects2, modelData, textureData, objectData);\n      return data2.build;\n    }\n    function buildBasematerial(materialData, objects2, modelData) {\n      let material;\n      const displaypropertiesid = materialData.displaypropertiesid;\n      const pbmetallicdisplayproperties = modelData.resources.pbmetallicdisplayproperties;\n      if (displaypropertiesid !== null && pbmetallicdisplayproperties[displaypropertiesid] !== void 0) {\n        const pbmetallicdisplayproperty = pbmetallicdisplayproperties[displaypropertiesid];\n        const metallicData = pbmetallicdisplayproperty.data[materialData.index];\n        material = new MeshStandardMaterial({\n          flatShading: true,\n          roughness: metallicData.roughness,\n          metalness: metallicData.metallicness\n        });\n      } else {\n        material = new MeshPhongMaterial({ flatShading: true });\n      }\n      material.name = materialData.name;\n      const displaycolor = materialData.displaycolor;\n      const color = displaycolor.substring(0, 7);\n      material.color.setStyle(color);\n      material.color.convertSRGBToLinear();\n      if (displaycolor.length === 9) {\n        material.opacity = parseInt(displaycolor.charAt(7) + displaycolor.charAt(8), 16) / 255;\n      }\n      return material;\n    }\n    function buildComposite(compositeData, objects2, modelData, textureData) {\n      const composite = new Group();\n      for (let j = 0; j < compositeData.length; j++) {\n        const component = compositeData[j];\n        let build2 = objects2[component.objectId];\n        if (build2 === void 0) {\n          buildObject(component.objectId, objects2, modelData, textureData);\n          build2 = objects2[component.objectId];\n        }\n        const object3D = build2.clone();\n        const transform = component.transform;\n        if (transform) {\n          object3D.applyMatrix4(transform);\n        }\n        composite.add(object3D);\n      }\n      return composite;\n    }\n    function buildObject(objectId, objects2, modelData, textureData) {\n      const objectData = modelData[\"resources\"][\"object\"][objectId];\n      if (objectData[\"mesh\"]) {\n        const meshData = objectData[\"mesh\"];\n        const extensions = modelData[\"extensions\"];\n        const modelXml = modelData[\"xml\"];\n        applyExtensions(extensions, meshData, modelXml);\n        objects2[objectData.id] = getBuild(meshData, objects2, modelData, textureData, objectData, buildGroup);\n      } else {\n        const compositeData = objectData[\"components\"];\n        objects2[objectData.id] = getBuild(compositeData, objects2, modelData, textureData, objectData, buildComposite);\n      }\n    }\n    function buildObjects(data3mf2) {\n      const modelsData = data3mf2.model;\n      const modelRels = data3mf2.modelRels;\n      const objects2 = {};\n      const modelsKeys = Object.keys(modelsData);\n      const textureData = {};\n      if (modelRels) {\n        for (let i = 0, l = modelRels.length; i < l; i++) {\n          const modelRel = modelRels[i];\n          const textureKey = modelRel.target.substring(1);\n          if (data3mf2.texture[textureKey]) {\n            textureData[modelRel.target] = data3mf2.texture[textureKey];\n          }\n        }\n      }\n      for (let i = 0; i < modelsKeys.length; i++) {\n        const modelsKey = modelsKeys[i];\n        const modelData = modelsData[modelsKey];\n        const objectIds = Object.keys(modelData[\"resources\"][\"object\"]);\n        for (let j = 0; j < objectIds.length; j++) {\n          const objectId = objectIds[j];\n          buildObject(objectId, objects2, modelData, textureData);\n        }\n      }\n      return objects2;\n    }\n    function fetch3DModelPart(rels) {\n      for (let i = 0; i < rels.length; i++) {\n        const rel = rels[i];\n        const extension = rel.target.split(\".\").pop();\n        if (extension.toLowerCase() === \"model\")\n          return rel;\n      }\n    }\n    function build(objects2, data3mf2) {\n      const group = new Group();\n      const relationship = fetch3DModelPart(data3mf2[\"rels\"]);\n      const buildData = data3mf2.model[relationship[\"target\"].substring(1)][\"build\"];\n      for (let i = 0; i < buildData.length; i++) {\n        const buildItem = buildData[i];\n        const object3D = objects2[buildItem[\"objectId\"]];\n        const transform = buildItem[\"transform\"];\n        if (transform) {\n          object3D.applyMatrix4(transform);\n        }\n        group.add(object3D);\n      }\n      return group;\n    }\n    const data3mf = loadDocument(data);\n    const objects = buildObjects(data3mf);\n    return build(objects, data3mf);\n  }\n  addExtension(extension) {\n    this.availableExtensions.push(extension);\n  }\n}\nexport {\n  ThreeMFLoader\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}