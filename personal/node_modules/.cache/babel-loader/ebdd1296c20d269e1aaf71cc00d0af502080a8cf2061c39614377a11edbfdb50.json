{"ast":null,"code":"import { Object3D, Box2, Color, Vector3, Matrix3, Matrix4, Camera } from \"three\";\nimport { Projector, RenderableSprite, RenderableLine, RenderableFace } from \"./Projector.js\";\nclass SVGObject extends Object3D {\n  constructor(node) {\n    super();\n    this.isSVGObject = true;\n    this.node = node;\n  }\n}\nclass SVGRenderer {\n  constructor() {\n    let _renderData,\n      _elements,\n      _lights,\n      _svgWidth,\n      _svgHeight,\n      _svgWidthHalf,\n      _svgHeightHalf,\n      _v1,\n      _v2,\n      _v3,\n      _svgNode,\n      _pathCount = 0,\n      _precision = null,\n      _quality = 1,\n      _currentPath,\n      _currentStyle;\n    const _this = this,\n      _clipBox = new Box2(),\n      _elemBox = new Box2(),\n      _color = new Color(),\n      _diffuseColor = new Color(),\n      _ambientLight = new Color(),\n      _directionalLights = new Color(),\n      _pointLights = new Color(),\n      _clearColor = new Color(),\n      _vector3 = new Vector3(),\n      _centroid = new Vector3(),\n      _normal = new Vector3(),\n      _normalViewMatrix = new Matrix3(),\n      _viewMatrix = new Matrix4(),\n      _viewProjectionMatrix = new Matrix4(),\n      _svgPathPool = [],\n      _projector = new Projector(),\n      _svg = document.createElementNS(\"http://www.w3.org/2000/svg\", \"svg\");\n    this.domElement = _svg;\n    this.autoClear = true;\n    this.sortObjects = true;\n    this.sortElements = true;\n    this.overdraw = 0.5;\n    this.info = {\n      render: {\n        vertices: 0,\n        faces: 0\n      }\n    };\n    this.setQuality = function (quality) {\n      switch (quality) {\n        case \"high\":\n          _quality = 1;\n          break;\n        case \"low\":\n          _quality = 0;\n          break;\n      }\n    };\n    this.setClearColor = function (color) {\n      _clearColor.set(color);\n    };\n    this.setPixelRatio = function () {};\n    this.setSize = function (width, height) {\n      _svgWidth = width;\n      _svgHeight = height;\n      _svgWidthHalf = _svgWidth / 2;\n      _svgHeightHalf = _svgHeight / 2;\n      _svg.setAttribute(\"viewBox\", -_svgWidthHalf + \" \" + -_svgHeightHalf + \" \" + _svgWidth + \" \" + _svgHeight);\n      _svg.setAttribute(\"width\", _svgWidth);\n      _svg.setAttribute(\"height\", _svgHeight);\n      _clipBox.min.set(-_svgWidthHalf, -_svgHeightHalf);\n      _clipBox.max.set(_svgWidthHalf, _svgHeightHalf);\n    };\n    this.getSize = function () {\n      return {\n        width: _svgWidth,\n        height: _svgHeight\n      };\n    };\n    this.setPrecision = function (precision) {\n      _precision = precision;\n    };\n    function removeChildNodes() {\n      _pathCount = 0;\n      while (_svg.childNodes.length > 0) {\n        _svg.removeChild(_svg.childNodes[0]);\n      }\n    }\n    function convert(c) {\n      return _precision !== null ? c.toFixed(_precision) : c;\n    }\n    this.clear = function () {\n      removeChildNodes();\n      _svg.style.backgroundColor = _clearColor.getStyle();\n    };\n    this.render = function (scene, camera) {\n      if (camera instanceof Camera === false) {\n        console.error(\"THREE.SVGRenderer.render: camera is not an instance of Camera.\");\n        return;\n      }\n      const background = scene.background;\n      if (background && background.isColor) {\n        removeChildNodes();\n        _svg.style.backgroundColor = background.getStyle();\n      } else if (this.autoClear === true) {\n        this.clear();\n      }\n      _this.info.render.vertices = 0;\n      _this.info.render.faces = 0;\n      _viewMatrix.copy(camera.matrixWorldInverse);\n      _viewProjectionMatrix.multiplyMatrices(camera.projectionMatrix, _viewMatrix);\n      _renderData = _projector.projectScene(scene, camera, this.sortObjects, this.sortElements);\n      _elements = _renderData.elements;\n      _lights = _renderData.lights;\n      _normalViewMatrix.getNormalMatrix(camera.matrixWorldInverse);\n      calculateLights(_lights);\n      _currentPath = \"\";\n      _currentStyle = \"\";\n      for (let e = 0, el = _elements.length; e < el; e++) {\n        const element = _elements[e];\n        const material = element.material;\n        if (material === void 0 || material.opacity === 0) continue;\n        _elemBox.makeEmpty();\n        if (element instanceof RenderableSprite) {\n          _v1 = element;\n          _v1.x *= _svgWidthHalf;\n          _v1.y *= -_svgHeightHalf;\n          renderSprite(_v1, element, material);\n        } else if (element instanceof RenderableLine) {\n          _v1 = element.v1;\n          _v2 = element.v2;\n          _v1.positionScreen.x *= _svgWidthHalf;\n          _v1.positionScreen.y *= -_svgHeightHalf;\n          _v2.positionScreen.x *= _svgWidthHalf;\n          _v2.positionScreen.y *= -_svgHeightHalf;\n          _elemBox.setFromPoints([_v1.positionScreen, _v2.positionScreen]);\n          if (_clipBox.intersectsBox(_elemBox) === true) {\n            renderLine(_v1, _v2, material);\n          }\n        } else if (element instanceof RenderableFace) {\n          _v1 = element.v1;\n          _v2 = element.v2;\n          _v3 = element.v3;\n          if (_v1.positionScreen.z < -1 || _v1.positionScreen.z > 1) continue;\n          if (_v2.positionScreen.z < -1 || _v2.positionScreen.z > 1) continue;\n          if (_v3.positionScreen.z < -1 || _v3.positionScreen.z > 1) continue;\n          _v1.positionScreen.x *= _svgWidthHalf;\n          _v1.positionScreen.y *= -_svgHeightHalf;\n          _v2.positionScreen.x *= _svgWidthHalf;\n          _v2.positionScreen.y *= -_svgHeightHalf;\n          _v3.positionScreen.x *= _svgWidthHalf;\n          _v3.positionScreen.y *= -_svgHeightHalf;\n          if (this.overdraw > 0) {\n            expand(_v1.positionScreen, _v2.positionScreen, this.overdraw);\n            expand(_v2.positionScreen, _v3.positionScreen, this.overdraw);\n            expand(_v3.positionScreen, _v1.positionScreen, this.overdraw);\n          }\n          _elemBox.setFromPoints([_v1.positionScreen, _v2.positionScreen, _v3.positionScreen]);\n          if (_clipBox.intersectsBox(_elemBox) === true) {\n            renderFace3(_v1, _v2, _v3, element, material);\n          }\n        }\n      }\n      flushPath();\n      scene.traverseVisible(function (object) {\n        if (object.isSVGObject) {\n          _vector3.setFromMatrixPosition(object.matrixWorld);\n          _vector3.applyMatrix4(_viewProjectionMatrix);\n          if (_vector3.z < -1 || _vector3.z > 1) return;\n          const x = _vector3.x * _svgWidthHalf;\n          const y = -_vector3.y * _svgHeightHalf;\n          const node = object.node;\n          node.setAttribute(\"transform\", \"translate(\" + x + \",\" + y + \")\");\n          _svg.appendChild(node);\n        }\n      });\n    };\n    function calculateLights(lights) {\n      _ambientLight.setRGB(0, 0, 0);\n      _directionalLights.setRGB(0, 0, 0);\n      _pointLights.setRGB(0, 0, 0);\n      for (let l = 0, ll = lights.length; l < ll; l++) {\n        const light = lights[l];\n        const lightColor = light.color;\n        if (light.isAmbientLight) {\n          _ambientLight.r += lightColor.r;\n          _ambientLight.g += lightColor.g;\n          _ambientLight.b += lightColor.b;\n        } else if (light.isDirectionalLight) {\n          _directionalLights.r += lightColor.r;\n          _directionalLights.g += lightColor.g;\n          _directionalLights.b += lightColor.b;\n        } else if (light.isPointLight) {\n          _pointLights.r += lightColor.r;\n          _pointLights.g += lightColor.g;\n          _pointLights.b += lightColor.b;\n        }\n      }\n    }\n    function calculateLight(lights, position, normal, color) {\n      for (let l = 0, ll = lights.length; l < ll; l++) {\n        const light = lights[l];\n        const lightColor = light.color;\n        if (light.isDirectionalLight) {\n          const lightPosition = _vector3.setFromMatrixPosition(light.matrixWorld).normalize();\n          let amount = normal.dot(lightPosition);\n          if (amount <= 0) continue;\n          amount *= light.intensity;\n          color.r += lightColor.r * amount;\n          color.g += lightColor.g * amount;\n          color.b += lightColor.b * amount;\n        } else if (light.isPointLight) {\n          const lightPosition = _vector3.setFromMatrixPosition(light.matrixWorld);\n          let amount = normal.dot(_vector3.subVectors(lightPosition, position).normalize());\n          if (amount <= 0) continue;\n          amount *= light.distance == 0 ? 1 : 1 - Math.min(position.distanceTo(lightPosition) / light.distance, 1);\n          if (amount == 0) continue;\n          amount *= light.intensity;\n          color.r += lightColor.r * amount;\n          color.g += lightColor.g * amount;\n          color.b += lightColor.b * amount;\n        }\n      }\n    }\n    function renderSprite(v1, element, material) {\n      let scaleX = element.scale.x * _svgWidthHalf;\n      let scaleY = element.scale.y * _svgHeightHalf;\n      if (material.isPointsMaterial) {\n        scaleX *= material.size;\n        scaleY *= material.size;\n      }\n      const path = \"M\" + convert(v1.x - scaleX * 0.5) + \",\" + convert(v1.y - scaleY * 0.5) + \"h\" + convert(scaleX) + \"v\" + convert(scaleY) + \"h\" + convert(-scaleX) + \"z\";\n      let style = \"\";\n      if (material.isSpriteMaterial || material.isPointsMaterial) {\n        style = \"fill:\" + material.color.getStyle() + \";fill-opacity:\" + material.opacity;\n      }\n      addPath(style, path);\n    }\n    function renderLine(v1, v2, material) {\n      const path = \"M\" + convert(v1.positionScreen.x) + \",\" + convert(v1.positionScreen.y) + \"L\" + convert(v2.positionScreen.x) + \",\" + convert(v2.positionScreen.y);\n      if (material.isLineBasicMaterial) {\n        let style = \"fill:none;stroke:\" + material.color.getStyle() + \";stroke-opacity:\" + material.opacity + \";stroke-width:\" + material.linewidth + \";stroke-linecap:\" + material.linecap;\n        if (material.isLineDashedMaterial) {\n          style = style + \";stroke-dasharray:\" + material.dashSize + \",\" + material.gapSize;\n        }\n        addPath(style, path);\n      }\n    }\n    function renderFace3(v1, v2, v3, element, material) {\n      _this.info.render.vertices += 3;\n      _this.info.render.faces++;\n      const path = \"M\" + convert(v1.positionScreen.x) + \",\" + convert(v1.positionScreen.y) + \"L\" + convert(v2.positionScreen.x) + \",\" + convert(v2.positionScreen.y) + \"L\" + convert(v3.positionScreen.x) + \",\" + convert(v3.positionScreen.y) + \"z\";\n      let style = \"\";\n      if (material.isMeshBasicMaterial) {\n        _color.copy(material.color);\n        if (material.vertexColors) {\n          _color.multiply(element.color);\n        }\n      } else if (material.isMeshLambertMaterial || material.isMeshPhongMaterial || material.isMeshStandardMaterial) {\n        _diffuseColor.copy(material.color);\n        if (material.vertexColors) {\n          _diffuseColor.multiply(element.color);\n        }\n        _color.copy(_ambientLight);\n        _centroid.copy(v1.positionWorld).add(v2.positionWorld).add(v3.positionWorld).divideScalar(3);\n        calculateLight(_lights, _centroid, element.normalModel, _color);\n        _color.multiply(_diffuseColor).add(material.emissive);\n      } else if (material.isMeshNormalMaterial) {\n        _normal.copy(element.normalModel).applyMatrix3(_normalViewMatrix).normalize();\n        _color.setRGB(_normal.x, _normal.y, _normal.z).multiplyScalar(0.5).addScalar(0.5);\n      }\n      if (material.wireframe) {\n        style = \"fill:none;stroke:\" + _color.getStyle() + \";stroke-opacity:\" + material.opacity + \";stroke-width:\" + material.wireframeLinewidth + \";stroke-linecap:\" + material.wireframeLinecap + \";stroke-linejoin:\" + material.wireframeLinejoin;\n      } else {\n        style = \"fill:\" + _color.getStyle() + \";fill-opacity:\" + material.opacity;\n      }\n      addPath(style, path);\n    }\n    function expand(v1, v2, pixels) {\n      let x = v2.x - v1.x,\n        y = v2.y - v1.y;\n      const det = x * x + y * y;\n      if (det === 0) return;\n      const idet = pixels / Math.sqrt(det);\n      x *= idet;\n      y *= idet;\n      v2.x += x;\n      v2.y += y;\n      v1.x -= x;\n      v1.y -= y;\n    }\n    function addPath(style, path) {\n      if (_currentStyle === style) {\n        _currentPath += path;\n      } else {\n        flushPath();\n        _currentStyle = style;\n        _currentPath = path;\n      }\n    }\n    function flushPath() {\n      if (_currentPath) {\n        _svgNode = getPathNode(_pathCount++);\n        _svgNode.setAttribute(\"d\", _currentPath);\n        _svgNode.setAttribute(\"style\", _currentStyle);\n        _svg.appendChild(_svgNode);\n      }\n      _currentPath = \"\";\n      _currentStyle = \"\";\n    }\n    function getPathNode(id) {\n      if (_svgPathPool[id] == null) {\n        _svgPathPool[id] = document.createElementNS(\"http://www.w3.org/2000/svg\", \"path\");\n        if (_quality == 0) {\n          _svgPathPool[id].setAttribute(\"shape-rendering\", \"crispEdges\");\n        }\n        return _svgPathPool[id];\n      }\n      return _svgPathPool[id];\n    }\n  }\n}\nexport { SVGObject, SVGRenderer };","map":{"version":3,"names":["Object3D","Box2","Color","Vector3","Matrix3","Matrix4","Camera","Projector","RenderableSprite","RenderableLine","RenderableFace","SVGObject","constructor","node","isSVGObject","SVGRenderer","_renderData","_elements","_lights","_svgWidth","_svgHeight","_svgWidthHalf","_svgHeightHalf","_v1","_v2","_v3","_svgNode","_pathCount","_precision","_quality","_currentPath","_currentStyle","_this","_clipBox","_elemBox","_color","_diffuseColor","_ambientLight","_directionalLights","_pointLights","_clearColor","_vector3","_centroid","_normal","_normalViewMatrix","_viewMatrix","_viewProjectionMatrix","_svgPathPool","_projector","_svg","document","createElementNS","domElement","autoClear","sortObjects","sortElements","overdraw","info","render","vertices","faces","setQuality","quality","setClearColor","color","set","setPixelRatio","setSize","width","height","setAttribute","min","max","getSize","setPrecision","precision","removeChildNodes","childNodes","length","removeChild","convert","c","toFixed","clear","style","backgroundColor","getStyle","scene","camera","console","error","background","isColor","copy","matrixWorldInverse","multiplyMatrices","projectionMatrix","projectScene","elements","lights","getNormalMatrix","calculateLights","e","el","element","material","opacity","makeEmpty","x","y","renderSprite","v1","v2","positionScreen","setFromPoints","intersectsBox","renderLine","v3","z","expand","renderFace3","flushPath","traverseVisible","object","setFromMatrixPosition","matrixWorld","applyMatrix4","appendChild","setRGB","l","ll","light","lightColor","isAmbientLight","r","g","b","isDirectionalLight","isPointLight","calculateLight","position","normal","lightPosition","normalize","amount","dot","intensity","subVectors","distance","Math","distanceTo","scaleX","scale","scaleY","isPointsMaterial","size","path","isSpriteMaterial","addPath","isLineBasicMaterial","linewidth","linecap","isLineDashedMaterial","dashSize","gapSize","isMeshBasicMaterial","vertexColors","multiply","isMeshLambertMaterial","isMeshPhongMaterial","isMeshStandardMaterial","positionWorld","add","divideScalar","normalModel","emissive","isMeshNormalMaterial","applyMatrix3","multiplyScalar","addScalar","wireframe","wireframeLinewidth","wireframeLinecap","wireframeLinejoin","pixels","det","idet","sqrt","getPathNode","id"],"sources":["/home/krug/Coding/JavaScript/Websites/Personal/personal/node_modules/.pnpm/three-stdlib@2.23.7_three@0.151.3/node_modules/three-stdlib/renderers/SVGRenderer.js"],"sourcesContent":["import { Object3D, Box2, Color, Vector3, Matrix3, Matrix4, Camera } from \"three\";\nimport { Projector, RenderableSprite, RenderableLine, RenderableFace } from \"./Projector.js\";\nclass SVGObject extends Object3D {\n  constructor(node) {\n    super();\n    this.isSVGObject = true;\n    this.node = node;\n  }\n}\nclass SVGRenderer {\n  constructor() {\n    let _renderData, _elements, _lights, _svgWidth, _svgHeight, _svgWidthHalf, _svgHeightHalf, _v1, _v2, _v3, _svgNode, _pathCount = 0, _precision = null, _quality = 1, _currentPath, _currentStyle;\n    const _this = this, _clipBox = new Box2(), _elemBox = new Box2(), _color = new Color(), _diffuseColor = new Color(), _ambientLight = new Color(), _directionalLights = new Color(), _pointLights = new Color(), _clearColor = new Color(), _vector3 = new Vector3(), _centroid = new Vector3(), _normal = new Vector3(), _normalViewMatrix = new Matrix3(), _viewMatrix = new Matrix4(), _viewProjectionMatrix = new Matrix4(), _svgPathPool = [], _projector = new Projector(), _svg = document.createElementNS(\"http://www.w3.org/2000/svg\", \"svg\");\n    this.domElement = _svg;\n    this.autoClear = true;\n    this.sortObjects = true;\n    this.sortElements = true;\n    this.overdraw = 0.5;\n    this.info = {\n      render: {\n        vertices: 0,\n        faces: 0\n      }\n    };\n    this.setQuality = function(quality) {\n      switch (quality) {\n        case \"high\":\n          _quality = 1;\n          break;\n        case \"low\":\n          _quality = 0;\n          break;\n      }\n    };\n    this.setClearColor = function(color) {\n      _clearColor.set(color);\n    };\n    this.setPixelRatio = function() {\n    };\n    this.setSize = function(width, height) {\n      _svgWidth = width;\n      _svgHeight = height;\n      _svgWidthHalf = _svgWidth / 2;\n      _svgHeightHalf = _svgHeight / 2;\n      _svg.setAttribute(\"viewBox\", -_svgWidthHalf + \" \" + -_svgHeightHalf + \" \" + _svgWidth + \" \" + _svgHeight);\n      _svg.setAttribute(\"width\", _svgWidth);\n      _svg.setAttribute(\"height\", _svgHeight);\n      _clipBox.min.set(-_svgWidthHalf, -_svgHeightHalf);\n      _clipBox.max.set(_svgWidthHalf, _svgHeightHalf);\n    };\n    this.getSize = function() {\n      return {\n        width: _svgWidth,\n        height: _svgHeight\n      };\n    };\n    this.setPrecision = function(precision) {\n      _precision = precision;\n    };\n    function removeChildNodes() {\n      _pathCount = 0;\n      while (_svg.childNodes.length > 0) {\n        _svg.removeChild(_svg.childNodes[0]);\n      }\n    }\n    function convert(c) {\n      return _precision !== null ? c.toFixed(_precision) : c;\n    }\n    this.clear = function() {\n      removeChildNodes();\n      _svg.style.backgroundColor = _clearColor.getStyle();\n    };\n    this.render = function(scene, camera) {\n      if (camera instanceof Camera === false) {\n        console.error(\"THREE.SVGRenderer.render: camera is not an instance of Camera.\");\n        return;\n      }\n      const background = scene.background;\n      if (background && background.isColor) {\n        removeChildNodes();\n        _svg.style.backgroundColor = background.getStyle();\n      } else if (this.autoClear === true) {\n        this.clear();\n      }\n      _this.info.render.vertices = 0;\n      _this.info.render.faces = 0;\n      _viewMatrix.copy(camera.matrixWorldInverse);\n      _viewProjectionMatrix.multiplyMatrices(camera.projectionMatrix, _viewMatrix);\n      _renderData = _projector.projectScene(scene, camera, this.sortObjects, this.sortElements);\n      _elements = _renderData.elements;\n      _lights = _renderData.lights;\n      _normalViewMatrix.getNormalMatrix(camera.matrixWorldInverse);\n      calculateLights(_lights);\n      _currentPath = \"\";\n      _currentStyle = \"\";\n      for (let e = 0, el = _elements.length; e < el; e++) {\n        const element = _elements[e];\n        const material = element.material;\n        if (material === void 0 || material.opacity === 0)\n          continue;\n        _elemBox.makeEmpty();\n        if (element instanceof RenderableSprite) {\n          _v1 = element;\n          _v1.x *= _svgWidthHalf;\n          _v1.y *= -_svgHeightHalf;\n          renderSprite(_v1, element, material);\n        } else if (element instanceof RenderableLine) {\n          _v1 = element.v1;\n          _v2 = element.v2;\n          _v1.positionScreen.x *= _svgWidthHalf;\n          _v1.positionScreen.y *= -_svgHeightHalf;\n          _v2.positionScreen.x *= _svgWidthHalf;\n          _v2.positionScreen.y *= -_svgHeightHalf;\n          _elemBox.setFromPoints([_v1.positionScreen, _v2.positionScreen]);\n          if (_clipBox.intersectsBox(_elemBox) === true) {\n            renderLine(_v1, _v2, material);\n          }\n        } else if (element instanceof RenderableFace) {\n          _v1 = element.v1;\n          _v2 = element.v2;\n          _v3 = element.v3;\n          if (_v1.positionScreen.z < -1 || _v1.positionScreen.z > 1)\n            continue;\n          if (_v2.positionScreen.z < -1 || _v2.positionScreen.z > 1)\n            continue;\n          if (_v3.positionScreen.z < -1 || _v3.positionScreen.z > 1)\n            continue;\n          _v1.positionScreen.x *= _svgWidthHalf;\n          _v1.positionScreen.y *= -_svgHeightHalf;\n          _v2.positionScreen.x *= _svgWidthHalf;\n          _v2.positionScreen.y *= -_svgHeightHalf;\n          _v3.positionScreen.x *= _svgWidthHalf;\n          _v3.positionScreen.y *= -_svgHeightHalf;\n          if (this.overdraw > 0) {\n            expand(_v1.positionScreen, _v2.positionScreen, this.overdraw);\n            expand(_v2.positionScreen, _v3.positionScreen, this.overdraw);\n            expand(_v3.positionScreen, _v1.positionScreen, this.overdraw);\n          }\n          _elemBox.setFromPoints([_v1.positionScreen, _v2.positionScreen, _v3.positionScreen]);\n          if (_clipBox.intersectsBox(_elemBox) === true) {\n            renderFace3(_v1, _v2, _v3, element, material);\n          }\n        }\n      }\n      flushPath();\n      scene.traverseVisible(function(object) {\n        if (object.isSVGObject) {\n          _vector3.setFromMatrixPosition(object.matrixWorld);\n          _vector3.applyMatrix4(_viewProjectionMatrix);\n          if (_vector3.z < -1 || _vector3.z > 1)\n            return;\n          const x = _vector3.x * _svgWidthHalf;\n          const y = -_vector3.y * _svgHeightHalf;\n          const node = object.node;\n          node.setAttribute(\"transform\", \"translate(\" + x + \",\" + y + \")\");\n          _svg.appendChild(node);\n        }\n      });\n    };\n    function calculateLights(lights) {\n      _ambientLight.setRGB(0, 0, 0);\n      _directionalLights.setRGB(0, 0, 0);\n      _pointLights.setRGB(0, 0, 0);\n      for (let l = 0, ll = lights.length; l < ll; l++) {\n        const light = lights[l];\n        const lightColor = light.color;\n        if (light.isAmbientLight) {\n          _ambientLight.r += lightColor.r;\n          _ambientLight.g += lightColor.g;\n          _ambientLight.b += lightColor.b;\n        } else if (light.isDirectionalLight) {\n          _directionalLights.r += lightColor.r;\n          _directionalLights.g += lightColor.g;\n          _directionalLights.b += lightColor.b;\n        } else if (light.isPointLight) {\n          _pointLights.r += lightColor.r;\n          _pointLights.g += lightColor.g;\n          _pointLights.b += lightColor.b;\n        }\n      }\n    }\n    function calculateLight(lights, position, normal, color) {\n      for (let l = 0, ll = lights.length; l < ll; l++) {\n        const light = lights[l];\n        const lightColor = light.color;\n        if (light.isDirectionalLight) {\n          const lightPosition = _vector3.setFromMatrixPosition(light.matrixWorld).normalize();\n          let amount = normal.dot(lightPosition);\n          if (amount <= 0)\n            continue;\n          amount *= light.intensity;\n          color.r += lightColor.r * amount;\n          color.g += lightColor.g * amount;\n          color.b += lightColor.b * amount;\n        } else if (light.isPointLight) {\n          const lightPosition = _vector3.setFromMatrixPosition(light.matrixWorld);\n          let amount = normal.dot(_vector3.subVectors(lightPosition, position).normalize());\n          if (amount <= 0)\n            continue;\n          amount *= light.distance == 0 ? 1 : 1 - Math.min(position.distanceTo(lightPosition) / light.distance, 1);\n          if (amount == 0)\n            continue;\n          amount *= light.intensity;\n          color.r += lightColor.r * amount;\n          color.g += lightColor.g * amount;\n          color.b += lightColor.b * amount;\n        }\n      }\n    }\n    function renderSprite(v1, element, material) {\n      let scaleX = element.scale.x * _svgWidthHalf;\n      let scaleY = element.scale.y * _svgHeightHalf;\n      if (material.isPointsMaterial) {\n        scaleX *= material.size;\n        scaleY *= material.size;\n      }\n      const path = \"M\" + convert(v1.x - scaleX * 0.5) + \",\" + convert(v1.y - scaleY * 0.5) + \"h\" + convert(scaleX) + \"v\" + convert(scaleY) + \"h\" + convert(-scaleX) + \"z\";\n      let style = \"\";\n      if (material.isSpriteMaterial || material.isPointsMaterial) {\n        style = \"fill:\" + material.color.getStyle() + \";fill-opacity:\" + material.opacity;\n      }\n      addPath(style, path);\n    }\n    function renderLine(v1, v2, material) {\n      const path = \"M\" + convert(v1.positionScreen.x) + \",\" + convert(v1.positionScreen.y) + \"L\" + convert(v2.positionScreen.x) + \",\" + convert(v2.positionScreen.y);\n      if (material.isLineBasicMaterial) {\n        let style = \"fill:none;stroke:\" + material.color.getStyle() + \";stroke-opacity:\" + material.opacity + \";stroke-width:\" + material.linewidth + \";stroke-linecap:\" + material.linecap;\n        if (material.isLineDashedMaterial) {\n          style = style + \";stroke-dasharray:\" + material.dashSize + \",\" + material.gapSize;\n        }\n        addPath(style, path);\n      }\n    }\n    function renderFace3(v1, v2, v3, element, material) {\n      _this.info.render.vertices += 3;\n      _this.info.render.faces++;\n      const path = \"M\" + convert(v1.positionScreen.x) + \",\" + convert(v1.positionScreen.y) + \"L\" + convert(v2.positionScreen.x) + \",\" + convert(v2.positionScreen.y) + \"L\" + convert(v3.positionScreen.x) + \",\" + convert(v3.positionScreen.y) + \"z\";\n      let style = \"\";\n      if (material.isMeshBasicMaterial) {\n        _color.copy(material.color);\n        if (material.vertexColors) {\n          _color.multiply(element.color);\n        }\n      } else if (material.isMeshLambertMaterial || material.isMeshPhongMaterial || material.isMeshStandardMaterial) {\n        _diffuseColor.copy(material.color);\n        if (material.vertexColors) {\n          _diffuseColor.multiply(element.color);\n        }\n        _color.copy(_ambientLight);\n        _centroid.copy(v1.positionWorld).add(v2.positionWorld).add(v3.positionWorld).divideScalar(3);\n        calculateLight(_lights, _centroid, element.normalModel, _color);\n        _color.multiply(_diffuseColor).add(material.emissive);\n      } else if (material.isMeshNormalMaterial) {\n        _normal.copy(element.normalModel).applyMatrix3(_normalViewMatrix).normalize();\n        _color.setRGB(_normal.x, _normal.y, _normal.z).multiplyScalar(0.5).addScalar(0.5);\n      }\n      if (material.wireframe) {\n        style = \"fill:none;stroke:\" + _color.getStyle() + \";stroke-opacity:\" + material.opacity + \";stroke-width:\" + material.wireframeLinewidth + \";stroke-linecap:\" + material.wireframeLinecap + \";stroke-linejoin:\" + material.wireframeLinejoin;\n      } else {\n        style = \"fill:\" + _color.getStyle() + \";fill-opacity:\" + material.opacity;\n      }\n      addPath(style, path);\n    }\n    function expand(v1, v2, pixels) {\n      let x = v2.x - v1.x, y = v2.y - v1.y;\n      const det = x * x + y * y;\n      if (det === 0)\n        return;\n      const idet = pixels / Math.sqrt(det);\n      x *= idet;\n      y *= idet;\n      v2.x += x;\n      v2.y += y;\n      v1.x -= x;\n      v1.y -= y;\n    }\n    function addPath(style, path) {\n      if (_currentStyle === style) {\n        _currentPath += path;\n      } else {\n        flushPath();\n        _currentStyle = style;\n        _currentPath = path;\n      }\n    }\n    function flushPath() {\n      if (_currentPath) {\n        _svgNode = getPathNode(_pathCount++);\n        _svgNode.setAttribute(\"d\", _currentPath);\n        _svgNode.setAttribute(\"style\", _currentStyle);\n        _svg.appendChild(_svgNode);\n      }\n      _currentPath = \"\";\n      _currentStyle = \"\";\n    }\n    function getPathNode(id) {\n      if (_svgPathPool[id] == null) {\n        _svgPathPool[id] = document.createElementNS(\"http://www.w3.org/2000/svg\", \"path\");\n        if (_quality == 0) {\n          _svgPathPool[id].setAttribute(\"shape-rendering\", \"crispEdges\");\n        }\n        return _svgPathPool[id];\n      }\n      return _svgPathPool[id];\n    }\n  }\n}\nexport {\n  SVGObject,\n  SVGRenderer\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}