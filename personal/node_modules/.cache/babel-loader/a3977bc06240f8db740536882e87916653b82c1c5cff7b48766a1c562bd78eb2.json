{"ast":null,"code":"import { Vector3, Color } from \"three\";\nconst ToonShader1 = {\n  uniforms: {\n    uDirLightPos: {\n      value: /* @__PURE__ */new Vector3()\n    },\n    uDirLightColor: {\n      value: /* @__PURE__ */new Color(15658734)\n    },\n    uAmbientLightColor: {\n      value: /* @__PURE__ */new Color(328965)\n    },\n    uBaseColor: {\n      value: /* @__PURE__ */new Color(16777215)\n    }\n  },\n  vertexShader: [\"varying vec3 vNormal;\", \"varying vec3 vRefract;\", \"void main() {\", \"\tvec4 worldPosition = modelMatrix * vec4( position, 1.0 );\", \"\tvec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );\", \"\tvec3 worldNormal = normalize ( mat3( modelMatrix[0].xyz, modelMatrix[1].xyz, modelMatrix[2].xyz ) * normal );\", \"\tvNormal = normalize( normalMatrix * normal );\", \"\tvec3 I = worldPosition.xyz - cameraPosition;\", \"\tvRefract = refract( normalize( I ), worldNormal, 1.02 );\", \"\tgl_Position = projectionMatrix * mvPosition;\", \"}\"].join(\"\\n\"),\n  fragmentShader: [\"uniform vec3 uBaseColor;\", \"uniform vec3 uDirLightPos;\", \"uniform vec3 uDirLightColor;\", \"uniform vec3 uAmbientLightColor;\", \"varying vec3 vNormal;\", \"varying vec3 vRefract;\", \"void main() {\", \"\tfloat directionalLightWeighting = max( dot( normalize( vNormal ), uDirLightPos ), 0.0);\", \"\tvec3 lightWeighting = uAmbientLightColor + uDirLightColor * directionalLightWeighting;\", \"\tfloat intensity = smoothstep( - 0.5, 1.0, pow( length(lightWeighting), 20.0 ) );\", \"\tintensity += length(lightWeighting) * 0.2;\", \"\tfloat cameraWeighting = dot( normalize( vNormal ), vRefract );\", \"\tintensity += pow( 1.0 - length( cameraWeighting ), 6.0 );\", \"\tintensity = intensity * 0.2 + 0.3;\", \"\tif ( intensity < 0.50 ) {\", \"\t\tgl_FragColor = vec4( 2.0 * intensity * uBaseColor, 1.0 );\", \"\t} else {\", \"\t\tgl_FragColor = vec4( 1.0 - 2.0 * ( 1.0 - intensity ) * ( 1.0 - uBaseColor ), 1.0 );\", \"}\", \"}\"].join(\"\\n\")\n};\nconst ToonShader2 = {\n  uniforms: {\n    uDirLightPos: {\n      value: /* @__PURE__ */new Vector3()\n    },\n    uDirLightColor: {\n      value: /* @__PURE__ */new Color(15658734)\n    },\n    uAmbientLightColor: {\n      value: /* @__PURE__ */new Color(328965)\n    },\n    uBaseColor: {\n      value: /* @__PURE__ */new Color(15658734)\n    },\n    uLineColor1: {\n      value: /* @__PURE__ */new Color(8421504)\n    },\n    uLineColor2: {\n      value: /* @__PURE__ */new Color(0)\n    },\n    uLineColor3: {\n      value: /* @__PURE__ */new Color(0)\n    },\n    uLineColor4: {\n      value: /* @__PURE__ */new Color(0)\n    }\n  },\n  vertexShader: [\"varying vec3 vNormal;\", \"void main() {\", \"\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\", \"\tvNormal = normalize( normalMatrix * normal );\", \"}\"].join(\"\\n\"),\n  fragmentShader: [\"uniform vec3 uBaseColor;\", \"uniform vec3 uLineColor1;\", \"uniform vec3 uLineColor2;\", \"uniform vec3 uLineColor3;\", \"uniform vec3 uLineColor4;\", \"uniform vec3 uDirLightPos;\", \"uniform vec3 uDirLightColor;\", \"uniform vec3 uAmbientLightColor;\", \"varying vec3 vNormal;\", \"void main() {\", \"\tfloat camera = max( dot( normalize( vNormal ), vec3( 0.0, 0.0, 1.0 ) ), 0.4);\", \"\tfloat light = max( dot( normalize( vNormal ), uDirLightPos ), 0.0);\", \"\tgl_FragColor = vec4( uBaseColor, 1.0 );\", \"\tif ( length(uAmbientLightColor + uDirLightColor * light) < 1.00 ) {\", \"\t\tgl_FragColor *= vec4( uLineColor1, 1.0 );\", \"\t}\", \"\tif ( length(uAmbientLightColor + uDirLightColor * camera) < 0.50 ) {\", \"\t\tgl_FragColor *= vec4( uLineColor2, 1.0 );\", \"\t}\", \"}\"].join(\"\\n\")\n};\nconst ToonShaderHatching = {\n  uniforms: {\n    uDirLightPos: {\n      value: /* @__PURE__ */new Vector3()\n    },\n    uDirLightColor: {\n      value: /* @__PURE__ */new Color(15658734)\n    },\n    uAmbientLightColor: {\n      value: /* @__PURE__ */new Color(328965)\n    },\n    uBaseColor: {\n      value: /* @__PURE__ */new Color(16777215)\n    },\n    uLineColor1: {\n      value: /* @__PURE__ */new Color(0)\n    },\n    uLineColor2: {\n      value: /* @__PURE__ */new Color(0)\n    },\n    uLineColor3: {\n      value: /* @__PURE__ */new Color(0)\n    },\n    uLineColor4: {\n      value: /* @__PURE__ */new Color(0)\n    }\n  },\n  vertexShader: [\"varying vec3 vNormal;\", \"void main() {\", \"\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\", \"\tvNormal = normalize( normalMatrix * normal );\", \"}\"].join(\"\\n\"),\n  fragmentShader: [\"uniform vec3 uBaseColor;\", \"uniform vec3 uLineColor1;\", \"uniform vec3 uLineColor2;\", \"uniform vec3 uLineColor3;\", \"uniform vec3 uLineColor4;\", \"uniform vec3 uDirLightPos;\", \"uniform vec3 uDirLightColor;\", \"uniform vec3 uAmbientLightColor;\", \"varying vec3 vNormal;\", \"void main() {\", \"\tfloat directionalLightWeighting = max( dot( normalize(vNormal), uDirLightPos ), 0.0);\", \"\tvec3 lightWeighting = uAmbientLightColor + uDirLightColor * directionalLightWeighting;\", \"\tgl_FragColor = vec4( uBaseColor, 1.0 );\", \"\tif ( length(lightWeighting) < 1.00 ) {\", \"\t\tif ( mod(gl_FragCoord.x + gl_FragCoord.y, 10.0) == 0.0) {\", \"\t\t\tgl_FragColor = vec4( uLineColor1, 1.0 );\", \"\t\t}\", \"\t}\", \"\tif ( length(lightWeighting) < 0.75 ) {\", \"\t\tif (mod(gl_FragCoord.x - gl_FragCoord.y, 10.0) == 0.0) {\", \"\t\t\tgl_FragColor = vec4( uLineColor2, 1.0 );\", \"\t\t}\", \"\t}\", \"\tif ( length(lightWeighting) < 0.50 ) {\", \"\t\tif (mod(gl_FragCoord.x + gl_FragCoord.y - 5.0, 10.0) == 0.0) {\", \"\t\t\tgl_FragColor = vec4( uLineColor3, 1.0 );\", \"\t\t}\", \"\t}\", \"\tif ( length(lightWeighting) < 0.3465 ) {\", \"\t\tif (mod(gl_FragCoord.x - gl_FragCoord.y - 5.0, 10.0) == 0.0) {\", \"\t\t\tgl_FragColor = vec4( uLineColor4, 1.0 );\", \"\t}\", \"\t}\", \"}\"].join(\"\\n\")\n};\nconst ToonShaderDotted = {\n  uniforms: {\n    uDirLightPos: {\n      value: /* @__PURE__ */new Vector3()\n    },\n    uDirLightColor: {\n      value: /* @__PURE__ */new Color(15658734)\n    },\n    uAmbientLightColor: {\n      value: /* @__PURE__ */new Color(328965)\n    },\n    uBaseColor: {\n      value: /* @__PURE__ */new Color(16777215)\n    },\n    uLineColor1: {\n      value: /* @__PURE__ */new Color(0)\n    }\n  },\n  vertexShader: [\"varying vec3 vNormal;\", \"void main() {\", \"\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\", \"\tvNormal = normalize( normalMatrix * normal );\", \"}\"].join(\"\\n\"),\n  fragmentShader: [\"uniform vec3 uBaseColor;\", \"uniform vec3 uLineColor1;\", \"uniform vec3 uLineColor2;\", \"uniform vec3 uLineColor3;\", \"uniform vec3 uLineColor4;\", \"uniform vec3 uDirLightPos;\", \"uniform vec3 uDirLightColor;\", \"uniform vec3 uAmbientLightColor;\", \"varying vec3 vNormal;\", \"void main() {\", \"float directionalLightWeighting = max( dot( normalize(vNormal), uDirLightPos ), 0.0);\", \"vec3 lightWeighting = uAmbientLightColor + uDirLightColor * directionalLightWeighting;\", \"gl_FragColor = vec4( uBaseColor, 1.0 );\", \"if ( length(lightWeighting) < 1.00 ) {\", \"\t\tif ( ( mod(gl_FragCoord.x, 4.001) + mod(gl_FragCoord.y, 4.0) ) > 6.00 ) {\", \"\t\t\tgl_FragColor = vec4( uLineColor1, 1.0 );\", \"\t\t}\", \"\t}\", \"\tif ( length(lightWeighting) < 0.50 ) {\", \"\t\tif ( ( mod(gl_FragCoord.x + 2.0, 4.001) + mod(gl_FragCoord.y + 2.0, 4.0) ) > 6.00 ) {\", \"\t\t\tgl_FragColor = vec4( uLineColor1, 1.0 );\", \"\t\t}\", \"\t}\", \"}\"].join(\"\\n\")\n};\nexport { ToonShader1, ToonShader2, ToonShaderDotted, ToonShaderHatching };","map":{"version":3,"names":["Vector3","Color","ToonShader1","uniforms","uDirLightPos","value","uDirLightColor","uAmbientLightColor","uBaseColor","vertexShader","join","fragmentShader","ToonShader2","uLineColor1","uLineColor2","uLineColor3","uLineColor4","ToonShaderHatching","ToonShaderDotted"],"sources":["/home/krug/Coding/JavaScript/Websites/Personal/personal/node_modules/.pnpm/three-stdlib@2.23.7_three@0.151.3/node_modules/three-stdlib/shaders/ToonShader.js"],"sourcesContent":["import { Vector3, Color } from \"three\";\nconst ToonShader1 = {\n  uniforms: {\n    uDirLightPos: { value: /* @__PURE__ */ new Vector3() },\n    uDirLightColor: { value: /* @__PURE__ */ new Color(15658734) },\n    uAmbientLightColor: { value: /* @__PURE__ */ new Color(328965) },\n    uBaseColor: { value: /* @__PURE__ */ new Color(16777215) }\n  },\n  vertexShader: [\n    \"varying vec3 vNormal;\",\n    \"varying vec3 vRefract;\",\n    \"void main() {\",\n    \"\tvec4 worldPosition = modelMatrix * vec4( position, 1.0 );\",\n    \"\tvec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );\",\n    \"\tvec3 worldNormal = normalize ( mat3( modelMatrix[0].xyz, modelMatrix[1].xyz, modelMatrix[2].xyz ) * normal );\",\n    \"\tvNormal = normalize( normalMatrix * normal );\",\n    \"\tvec3 I = worldPosition.xyz - cameraPosition;\",\n    \"\tvRefract = refract( normalize( I ), worldNormal, 1.02 );\",\n    \"\tgl_Position = projectionMatrix * mvPosition;\",\n    \"}\"\n  ].join(\"\\n\"),\n  fragmentShader: [\n    \"uniform vec3 uBaseColor;\",\n    \"uniform vec3 uDirLightPos;\",\n    \"uniform vec3 uDirLightColor;\",\n    \"uniform vec3 uAmbientLightColor;\",\n    \"varying vec3 vNormal;\",\n    \"varying vec3 vRefract;\",\n    \"void main() {\",\n    \"\tfloat directionalLightWeighting = max( dot( normalize( vNormal ), uDirLightPos ), 0.0);\",\n    \"\tvec3 lightWeighting = uAmbientLightColor + uDirLightColor * directionalLightWeighting;\",\n    \"\tfloat intensity = smoothstep( - 0.5, 1.0, pow( length(lightWeighting), 20.0 ) );\",\n    \"\tintensity += length(lightWeighting) * 0.2;\",\n    \"\tfloat cameraWeighting = dot( normalize( vNormal ), vRefract );\",\n    \"\tintensity += pow( 1.0 - length( cameraWeighting ), 6.0 );\",\n    \"\tintensity = intensity * 0.2 + 0.3;\",\n    \"\tif ( intensity < 0.50 ) {\",\n    \"\t\tgl_FragColor = vec4( 2.0 * intensity * uBaseColor, 1.0 );\",\n    \"\t} else {\",\n    \"\t\tgl_FragColor = vec4( 1.0 - 2.0 * ( 1.0 - intensity ) * ( 1.0 - uBaseColor ), 1.0 );\",\n    \"}\",\n    \"}\"\n  ].join(\"\\n\")\n};\nconst ToonShader2 = {\n  uniforms: {\n    uDirLightPos: { value: /* @__PURE__ */ new Vector3() },\n    uDirLightColor: { value: /* @__PURE__ */ new Color(15658734) },\n    uAmbientLightColor: { value: /* @__PURE__ */ new Color(328965) },\n    uBaseColor: { value: /* @__PURE__ */ new Color(15658734) },\n    uLineColor1: { value: /* @__PURE__ */ new Color(8421504) },\n    uLineColor2: { value: /* @__PURE__ */ new Color(0) },\n    uLineColor3: { value: /* @__PURE__ */ new Color(0) },\n    uLineColor4: { value: /* @__PURE__ */ new Color(0) }\n  },\n  vertexShader: [\n    \"varying vec3 vNormal;\",\n    \"void main() {\",\n    \"\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\",\n    \"\tvNormal = normalize( normalMatrix * normal );\",\n    \"}\"\n  ].join(\"\\n\"),\n  fragmentShader: [\n    \"uniform vec3 uBaseColor;\",\n    \"uniform vec3 uLineColor1;\",\n    \"uniform vec3 uLineColor2;\",\n    \"uniform vec3 uLineColor3;\",\n    \"uniform vec3 uLineColor4;\",\n    \"uniform vec3 uDirLightPos;\",\n    \"uniform vec3 uDirLightColor;\",\n    \"uniform vec3 uAmbientLightColor;\",\n    \"varying vec3 vNormal;\",\n    \"void main() {\",\n    \"\tfloat camera = max( dot( normalize( vNormal ), vec3( 0.0, 0.0, 1.0 ) ), 0.4);\",\n    \"\tfloat light = max( dot( normalize( vNormal ), uDirLightPos ), 0.0);\",\n    \"\tgl_FragColor = vec4( uBaseColor, 1.0 );\",\n    \"\tif ( length(uAmbientLightColor + uDirLightColor * light) < 1.00 ) {\",\n    \"\t\tgl_FragColor *= vec4( uLineColor1, 1.0 );\",\n    \"\t}\",\n    \"\tif ( length(uAmbientLightColor + uDirLightColor * camera) < 0.50 ) {\",\n    \"\t\tgl_FragColor *= vec4( uLineColor2, 1.0 );\",\n    \"\t}\",\n    \"}\"\n  ].join(\"\\n\")\n};\nconst ToonShaderHatching = {\n  uniforms: {\n    uDirLightPos: { value: /* @__PURE__ */ new Vector3() },\n    uDirLightColor: { value: /* @__PURE__ */ new Color(15658734) },\n    uAmbientLightColor: { value: /* @__PURE__ */ new Color(328965) },\n    uBaseColor: { value: /* @__PURE__ */ new Color(16777215) },\n    uLineColor1: { value: /* @__PURE__ */ new Color(0) },\n    uLineColor2: { value: /* @__PURE__ */ new Color(0) },\n    uLineColor3: { value: /* @__PURE__ */ new Color(0) },\n    uLineColor4: { value: /* @__PURE__ */ new Color(0) }\n  },\n  vertexShader: [\n    \"varying vec3 vNormal;\",\n    \"void main() {\",\n    \"\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\",\n    \"\tvNormal = normalize( normalMatrix * normal );\",\n    \"}\"\n  ].join(\"\\n\"),\n  fragmentShader: [\n    \"uniform vec3 uBaseColor;\",\n    \"uniform vec3 uLineColor1;\",\n    \"uniform vec3 uLineColor2;\",\n    \"uniform vec3 uLineColor3;\",\n    \"uniform vec3 uLineColor4;\",\n    \"uniform vec3 uDirLightPos;\",\n    \"uniform vec3 uDirLightColor;\",\n    \"uniform vec3 uAmbientLightColor;\",\n    \"varying vec3 vNormal;\",\n    \"void main() {\",\n    \"\tfloat directionalLightWeighting = max( dot( normalize(vNormal), uDirLightPos ), 0.0);\",\n    \"\tvec3 lightWeighting = uAmbientLightColor + uDirLightColor * directionalLightWeighting;\",\n    \"\tgl_FragColor = vec4( uBaseColor, 1.0 );\",\n    \"\tif ( length(lightWeighting) < 1.00 ) {\",\n    \"\t\tif ( mod(gl_FragCoord.x + gl_FragCoord.y, 10.0) == 0.0) {\",\n    \"\t\t\tgl_FragColor = vec4( uLineColor1, 1.0 );\",\n    \"\t\t}\",\n    \"\t}\",\n    \"\tif ( length(lightWeighting) < 0.75 ) {\",\n    \"\t\tif (mod(gl_FragCoord.x - gl_FragCoord.y, 10.0) == 0.0) {\",\n    \"\t\t\tgl_FragColor = vec4( uLineColor2, 1.0 );\",\n    \"\t\t}\",\n    \"\t}\",\n    \"\tif ( length(lightWeighting) < 0.50 ) {\",\n    \"\t\tif (mod(gl_FragCoord.x + gl_FragCoord.y - 5.0, 10.0) == 0.0) {\",\n    \"\t\t\tgl_FragColor = vec4( uLineColor3, 1.0 );\",\n    \"\t\t}\",\n    \"\t}\",\n    \"\tif ( length(lightWeighting) < 0.3465 ) {\",\n    \"\t\tif (mod(gl_FragCoord.x - gl_FragCoord.y - 5.0, 10.0) == 0.0) {\",\n    \"\t\t\tgl_FragColor = vec4( uLineColor4, 1.0 );\",\n    \"\t}\",\n    \"\t}\",\n    \"}\"\n  ].join(\"\\n\")\n};\nconst ToonShaderDotted = {\n  uniforms: {\n    uDirLightPos: { value: /* @__PURE__ */ new Vector3() },\n    uDirLightColor: { value: /* @__PURE__ */ new Color(15658734) },\n    uAmbientLightColor: { value: /* @__PURE__ */ new Color(328965) },\n    uBaseColor: { value: /* @__PURE__ */ new Color(16777215) },\n    uLineColor1: { value: /* @__PURE__ */ new Color(0) }\n  },\n  vertexShader: [\n    \"varying vec3 vNormal;\",\n    \"void main() {\",\n    \"\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\",\n    \"\tvNormal = normalize( normalMatrix * normal );\",\n    \"}\"\n  ].join(\"\\n\"),\n  fragmentShader: [\n    \"uniform vec3 uBaseColor;\",\n    \"uniform vec3 uLineColor1;\",\n    \"uniform vec3 uLineColor2;\",\n    \"uniform vec3 uLineColor3;\",\n    \"uniform vec3 uLineColor4;\",\n    \"uniform vec3 uDirLightPos;\",\n    \"uniform vec3 uDirLightColor;\",\n    \"uniform vec3 uAmbientLightColor;\",\n    \"varying vec3 vNormal;\",\n    \"void main() {\",\n    \"float directionalLightWeighting = max( dot( normalize(vNormal), uDirLightPos ), 0.0);\",\n    \"vec3 lightWeighting = uAmbientLightColor + uDirLightColor * directionalLightWeighting;\",\n    \"gl_FragColor = vec4( uBaseColor, 1.0 );\",\n    \"if ( length(lightWeighting) < 1.00 ) {\",\n    \"\t\tif ( ( mod(gl_FragCoord.x, 4.001) + mod(gl_FragCoord.y, 4.0) ) > 6.00 ) {\",\n    \"\t\t\tgl_FragColor = vec4( uLineColor1, 1.0 );\",\n    \"\t\t}\",\n    \"\t}\",\n    \"\tif ( length(lightWeighting) < 0.50 ) {\",\n    \"\t\tif ( ( mod(gl_FragCoord.x + 2.0, 4.001) + mod(gl_FragCoord.y + 2.0, 4.0) ) > 6.00 ) {\",\n    \"\t\t\tgl_FragColor = vec4( uLineColor1, 1.0 );\",\n    \"\t\t}\",\n    \"\t}\",\n    \"}\"\n  ].join(\"\\n\")\n};\nexport {\n  ToonShader1,\n  ToonShader2,\n  ToonShaderDotted,\n  ToonShaderHatching\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}