{"ast":null,"code":"import _toConsumableArray from \"/home/krug/Coding/JavaScript/Websites/Personal/personal/node_modules/.pnpm/@babel+runtime@7.22.3/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport _slicedToArray from \"/home/krug/Coding/JavaScript/Websites/Personal/personal/node_modules/.pnpm/@babel+runtime@7.22.3/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport * as React from 'react';\nimport * as THREE from 'three';\nimport { useThree, useFrame } from '@react-three/fiber';\nvar isOrthographic = function isOrthographic(def) {\n  return def && def.isOrthographicCamera;\n};\nvar isBox3 = function isBox3(def) {\n  return def && def.isBox3;\n};\nvar context = /*#__PURE__*/React.createContext(null);\nfunction Bounds(_ref) {\n  var children = _ref.children,\n    _ref$damping = _ref.damping,\n    damping = _ref$damping === void 0 ? 6 : _ref$damping,\n    fit = _ref.fit,\n    clip = _ref.clip,\n    observe = _ref.observe,\n    _ref$margin = _ref.margin,\n    margin = _ref$margin === void 0 ? 1.2 : _ref$margin,\n    _ref$eps = _ref.eps,\n    eps = _ref$eps === void 0 ? 0.01 : _ref$eps,\n    onFit = _ref.onFit;\n  var ref = React.useRef(null);\n  var _useThree = useThree(),\n    camera = _useThree.camera,\n    invalidate = _useThree.invalidate,\n    size = _useThree.size,\n    controlsImpl = _useThree.controls;\n  var controls = controlsImpl;\n  var onFitRef = React.useRef(onFit);\n  onFitRef.current = onFit;\n  function equals(a, b) {\n    return Math.abs(a.x - b.x) < eps && Math.abs(a.y - b.y) < eps && Math.abs(a.z - b.z) < eps;\n  }\n  function damp(v, t, lambda, delta) {\n    v.x = THREE.MathUtils.damp(v.x, t.x, lambda, delta);\n    v.y = THREE.MathUtils.damp(v.y, t.y, lambda, delta);\n    v.z = THREE.MathUtils.damp(v.z, t.z, lambda, delta);\n  }\n  var _React$useState = React.useState(function () {\n      return {\n        animating: false,\n        focus: new THREE.Vector3(),\n        camera: new THREE.Vector3(),\n        zoom: 1\n      };\n    }),\n    _React$useState2 = _slicedToArray(_React$useState, 1),\n    current = _React$useState2[0];\n  var _React$useState3 = React.useState(function () {\n      return {\n        focus: new THREE.Vector3(),\n        camera: new THREE.Vector3(),\n        zoom: 1\n      };\n    }),\n    _React$useState4 = _slicedToArray(_React$useState3, 1),\n    goal = _React$useState4[0];\n  var _React$useState5 = React.useState(function () {\n      return new THREE.Box3();\n    }),\n    _React$useState6 = _slicedToArray(_React$useState5, 1),\n    box = _React$useState6[0];\n  var api = React.useMemo(function () {\n    function getSize() {\n      var size = box.getSize(new THREE.Vector3());\n      var center = box.getCenter(new THREE.Vector3());\n      var maxSize = Math.max(size.x, size.y, size.z);\n      var fitHeightDistance = isOrthographic(camera) ? maxSize * 4 : maxSize / (2 * Math.atan(Math.PI * camera.fov / 360));\n      var fitWidthDistance = isOrthographic(camera) ? maxSize * 4 : fitHeightDistance / camera.aspect;\n      var distance = margin * Math.max(fitHeightDistance, fitWidthDistance);\n      return {\n        box: box,\n        size: size,\n        center: center,\n        distance: distance\n      };\n    }\n    return {\n      getSize: getSize,\n      refresh: function refresh(object) {\n        if (isBox3(object)) box.copy(object);else {\n          var target = object || ref.current;\n          target.updateWorldMatrix(true, true);\n          box.setFromObject(target);\n        }\n        if (box.isEmpty()) {\n          var max = camera.position.length() || 10;\n          box.setFromCenterAndSize(new THREE.Vector3(), new THREE.Vector3(max, max, max));\n        }\n        if ((controls == null ? void 0 : controls.constructor.name) === 'OrthographicTrackballControls') {\n          // Put camera on a sphere along which it should move\n          var _getSize = getSize(),\n            distance = _getSize.distance;\n          var direction = camera.position.clone().sub(controls.target).normalize().multiplyScalar(distance);\n          var newPos = controls.target.clone().add(direction);\n          camera.position.copy(newPos);\n        }\n        return this;\n      },\n      clip: function clip() {\n        var _getSize2 = getSize(),\n          distance = _getSize2.distance;\n        if (controls) controls.maxDistance = distance * 10;\n        camera.near = distance / 100;\n        camera.far = distance * 100;\n        camera.updateProjectionMatrix();\n        if (controls) controls.update();\n        invalidate();\n        return this;\n      },\n      to: function to(_ref2) {\n        var _goal$camera;\n        var position = _ref2.position,\n          target = _ref2.target;\n        current.camera.copy(camera.position);\n        var _getSize3 = getSize(),\n          center = _getSize3.center;\n        (_goal$camera = goal.camera).set.apply(_goal$camera, _toConsumableArray(position));\n        if (target) {\n          var _goal$focus;\n          (_goal$focus = goal.focus).set.apply(_goal$focus, _toConsumableArray(target));\n        } else {\n          goal.focus.copy(center);\n        }\n        if (damping) {\n          current.animating = true;\n        } else {\n          var _camera$position;\n          (_camera$position = camera.position).set.apply(_camera$position, _toConsumableArray(position));\n        }\n        return this;\n      },\n      fit: function fit() {\n        current.camera.copy(camera.position);\n        if (controls) current.focus.copy(controls.target);\n        var _getSize4 = getSize(),\n          center = _getSize4.center,\n          distance = _getSize4.distance;\n        var direction = center.clone().sub(camera.position).normalize().multiplyScalar(distance);\n        goal.camera.copy(center).sub(direction);\n        goal.focus.copy(center);\n        if (isOrthographic(camera)) {\n          current.zoom = camera.zoom;\n          var maxHeight = 0,\n            maxWidth = 0;\n          var vertices = [new THREE.Vector3(box.min.x, box.min.y, box.min.z), new THREE.Vector3(box.min.x, box.max.y, box.min.z), new THREE.Vector3(box.min.x, box.min.y, box.max.z), new THREE.Vector3(box.min.x, box.max.y, box.max.z), new THREE.Vector3(box.max.x, box.max.y, box.max.z), new THREE.Vector3(box.max.x, box.max.y, box.min.z), new THREE.Vector3(box.max.x, box.min.y, box.max.z), new THREE.Vector3(box.max.x, box.min.y, box.min.z)]; // Transform the center and each corner to camera space\n\n          center.applyMatrix4(camera.matrixWorldInverse);\n          for (var _i = 0, _vertices = vertices; _i < _vertices.length; _i++) {\n            var v = _vertices[_i];\n            v.applyMatrix4(camera.matrixWorldInverse);\n            maxHeight = Math.max(maxHeight, Math.abs(v.y - center.y));\n            maxWidth = Math.max(maxWidth, Math.abs(v.x - center.x));\n          }\n          maxHeight *= 2;\n          maxWidth *= 2;\n          var zoomForHeight = (camera.top - camera.bottom) / maxHeight;\n          var zoomForWidth = (camera.right - camera.left) / maxWidth;\n          goal.zoom = Math.min(zoomForHeight, zoomForWidth) / margin;\n          if (!damping) {\n            camera.zoom = goal.zoom;\n            camera.updateProjectionMatrix();\n          }\n        }\n        if (damping) {\n          current.animating = true;\n        } else {\n          camera.position.copy(goal.camera);\n          camera.lookAt(goal.focus);\n          if (controls) {\n            controls.target.copy(goal.focus);\n            controls.update();\n          }\n        }\n        if (onFitRef.current) onFitRef.current(this.getSize());\n        invalidate();\n        return this;\n      }\n    };\n  }, [box, camera, controls, margin, damping, invalidate]);\n  React.useLayoutEffect(function () {\n    if (controls) {\n      // Try to prevent drag hijacking\n      var callback = function callback() {\n        return current.animating = false;\n      };\n      controls.addEventListener('start', callback);\n      return function () {\n        return controls.removeEventListener('start', callback);\n      };\n    }\n  }, [controls]); // Scale pointer on window resize\n\n  var count = React.useRef(0);\n  React.useLayoutEffect(function () {\n    if (observe || count.current++ === 0) {\n      api.refresh();\n      if (fit) api.fit();\n      if (clip) api.clip();\n    }\n  }, [size, clip, fit, observe, camera, controls]);\n  useFrame(function (state, delta) {\n    if (current.animating) {\n      damp(current.focus, goal.focus, damping, delta);\n      damp(current.camera, goal.camera, damping, delta);\n      current.zoom = THREE.MathUtils.damp(current.zoom, goal.zoom, damping, delta);\n      camera.position.copy(current.camera);\n      if (isOrthographic(camera)) {\n        camera.zoom = current.zoom;\n        camera.updateProjectionMatrix();\n      }\n      if (!controls) {\n        camera.lookAt(current.focus);\n      } else {\n        controls.target.copy(current.focus);\n        controls.update();\n      }\n      invalidate();\n      if (isOrthographic(camera) && !(Math.abs(current.zoom - goal.zoom) < eps)) return;\n      if (!isOrthographic(camera) && !equals(current.camera, goal.camera)) return;\n      if (controls && !equals(current.focus, goal.focus)) return;\n      current.animating = false;\n    }\n  });\n  return /*#__PURE__*/React.createElement(\"group\", {\n    ref: ref\n  }, /*#__PURE__*/React.createElement(context.Provider, {\n    value: api\n  }, children));\n}\nfunction useBounds() {\n  return React.useContext(context);\n}\nexport { Bounds, useBounds };","map":{"version":3,"names":["React","THREE","useThree","useFrame","isOrthographic","def","isOrthographicCamera","isBox3","context","createContext","Bounds","_ref","children","_ref$damping","damping","fit","clip","observe","_ref$margin","margin","_ref$eps","eps","onFit","ref","useRef","_useThree","camera","invalidate","size","controlsImpl","controls","onFitRef","current","equals","a","b","Math","abs","x","y","z","damp","v","t","lambda","delta","MathUtils","_React$useState","useState","animating","focus","Vector3","zoom","_React$useState2","_slicedToArray","_React$useState3","_React$useState4","goal","_React$useState5","Box3","_React$useState6","box","api","useMemo","getSize","center","getCenter","maxSize","max","fitHeightDistance","atan","PI","fov","fitWidthDistance","aspect","distance","refresh","object","copy","target","updateWorldMatrix","setFromObject","isEmpty","position","length","setFromCenterAndSize","constructor","name","_getSize","direction","clone","sub","normalize","multiplyScalar","newPos","add","_getSize2","maxDistance","near","far","updateProjectionMatrix","update","to","_ref2","_goal$camera","_getSize3","set","apply","_toConsumableArray","_goal$focus","_camera$position","_getSize4","maxHeight","maxWidth","vertices","min","applyMatrix4","matrixWorldInverse","_i","_vertices","zoomForHeight","top","bottom","zoomForWidth","right","left","lookAt","useLayoutEffect","callback","addEventListener","removeEventListener","count","state","createElement","Provider","value","useBounds","useContext"],"sources":["/home/krug/Coding/JavaScript/Websites/Personal/personal/node_modules/.pnpm/@react-three+drei@9.72.1_@react-three+fiber@8.13.0_@types+three@0.150.2_react-dom@18.2.0_react@18.2.0_three@0.151.3/node_modules/@react-three/drei/core/Bounds.js"],"sourcesContent":["import * as React from 'react';\nimport * as THREE from 'three';\nimport { useThree, useFrame } from '@react-three/fiber';\n\nconst isOrthographic = def => def && def.isOrthographicCamera;\n\nconst isBox3 = def => def && def.isBox3;\n\nconst context = /*#__PURE__*/React.createContext(null);\nfunction Bounds({\n  children,\n  damping = 6,\n  fit,\n  clip,\n  observe,\n  margin = 1.2,\n  eps = 0.01,\n  onFit\n}) {\n  const ref = React.useRef(null);\n  const {\n    camera,\n    invalidate,\n    size,\n    controls: controlsImpl\n  } = useThree();\n  const controls = controlsImpl;\n  const onFitRef = React.useRef(onFit);\n  onFitRef.current = onFit;\n\n  function equals(a, b) {\n    return Math.abs(a.x - b.x) < eps && Math.abs(a.y - b.y) < eps && Math.abs(a.z - b.z) < eps;\n  }\n\n  function damp(v, t, lambda, delta) {\n    v.x = THREE.MathUtils.damp(v.x, t.x, lambda, delta);\n    v.y = THREE.MathUtils.damp(v.y, t.y, lambda, delta);\n    v.z = THREE.MathUtils.damp(v.z, t.z, lambda, delta);\n  }\n\n  const [current] = React.useState(() => ({\n    animating: false,\n    focus: new THREE.Vector3(),\n    camera: new THREE.Vector3(),\n    zoom: 1\n  }));\n  const [goal] = React.useState(() => ({\n    focus: new THREE.Vector3(),\n    camera: new THREE.Vector3(),\n    zoom: 1\n  }));\n  const [box] = React.useState(() => new THREE.Box3());\n  const api = React.useMemo(() => {\n    function getSize() {\n      const size = box.getSize(new THREE.Vector3());\n      const center = box.getCenter(new THREE.Vector3());\n      const maxSize = Math.max(size.x, size.y, size.z);\n      const fitHeightDistance = isOrthographic(camera) ? maxSize * 4 : maxSize / (2 * Math.atan(Math.PI * camera.fov / 360));\n      const fitWidthDistance = isOrthographic(camera) ? maxSize * 4 : fitHeightDistance / camera.aspect;\n      const distance = margin * Math.max(fitHeightDistance, fitWidthDistance);\n      return {\n        box,\n        size,\n        center,\n        distance\n      };\n    }\n\n    return {\n      getSize,\n\n      refresh(object) {\n        if (isBox3(object)) box.copy(object);else {\n          const target = object || ref.current;\n          target.updateWorldMatrix(true, true);\n          box.setFromObject(target);\n        }\n\n        if (box.isEmpty()) {\n          const max = camera.position.length() || 10;\n          box.setFromCenterAndSize(new THREE.Vector3(), new THREE.Vector3(max, max, max));\n        }\n\n        if ((controls == null ? void 0 : controls.constructor.name) === 'OrthographicTrackballControls') {\n          // Put camera on a sphere along which it should move\n          const {\n            distance\n          } = getSize();\n          const direction = camera.position.clone().sub(controls.target).normalize().multiplyScalar(distance);\n          const newPos = controls.target.clone().add(direction);\n          camera.position.copy(newPos);\n        }\n\n        return this;\n      },\n\n      clip() {\n        const {\n          distance\n        } = getSize();\n        if (controls) controls.maxDistance = distance * 10;\n        camera.near = distance / 100;\n        camera.far = distance * 100;\n        camera.updateProjectionMatrix();\n        if (controls) controls.update();\n        invalidate();\n        return this;\n      },\n\n      to({\n        position,\n        target\n      }) {\n        current.camera.copy(camera.position);\n        const {\n          center\n        } = getSize();\n        goal.camera.set(...position);\n\n        if (target) {\n          goal.focus.set(...target);\n        } else {\n          goal.focus.copy(center);\n        }\n\n        if (damping) {\n          current.animating = true;\n        } else {\n          camera.position.set(...position);\n        }\n\n        return this;\n      },\n\n      fit() {\n        current.camera.copy(camera.position);\n        if (controls) current.focus.copy(controls.target);\n        const {\n          center,\n          distance\n        } = getSize();\n        const direction = center.clone().sub(camera.position).normalize().multiplyScalar(distance);\n        goal.camera.copy(center).sub(direction);\n        goal.focus.copy(center);\n\n        if (isOrthographic(camera)) {\n          current.zoom = camera.zoom;\n          let maxHeight = 0,\n              maxWidth = 0;\n          const vertices = [new THREE.Vector3(box.min.x, box.min.y, box.min.z), new THREE.Vector3(box.min.x, box.max.y, box.min.z), new THREE.Vector3(box.min.x, box.min.y, box.max.z), new THREE.Vector3(box.min.x, box.max.y, box.max.z), new THREE.Vector3(box.max.x, box.max.y, box.max.z), new THREE.Vector3(box.max.x, box.max.y, box.min.z), new THREE.Vector3(box.max.x, box.min.y, box.max.z), new THREE.Vector3(box.max.x, box.min.y, box.min.z)]; // Transform the center and each corner to camera space\n\n          center.applyMatrix4(camera.matrixWorldInverse);\n\n          for (const v of vertices) {\n            v.applyMatrix4(camera.matrixWorldInverse);\n            maxHeight = Math.max(maxHeight, Math.abs(v.y - center.y));\n            maxWidth = Math.max(maxWidth, Math.abs(v.x - center.x));\n          }\n\n          maxHeight *= 2;\n          maxWidth *= 2;\n          const zoomForHeight = (camera.top - camera.bottom) / maxHeight;\n          const zoomForWidth = (camera.right - camera.left) / maxWidth;\n          goal.zoom = Math.min(zoomForHeight, zoomForWidth) / margin;\n\n          if (!damping) {\n            camera.zoom = goal.zoom;\n            camera.updateProjectionMatrix();\n          }\n        }\n\n        if (damping) {\n          current.animating = true;\n        } else {\n          camera.position.copy(goal.camera);\n          camera.lookAt(goal.focus);\n\n          if (controls) {\n            controls.target.copy(goal.focus);\n            controls.update();\n          }\n        }\n\n        if (onFitRef.current) onFitRef.current(this.getSize());\n        invalidate();\n        return this;\n      }\n\n    };\n  }, [box, camera, controls, margin, damping, invalidate]);\n  React.useLayoutEffect(() => {\n    if (controls) {\n      // Try to prevent drag hijacking\n      const callback = () => current.animating = false;\n\n      controls.addEventListener('start', callback);\n      return () => controls.removeEventListener('start', callback);\n    }\n  }, [controls]); // Scale pointer on window resize\n\n  const count = React.useRef(0);\n  React.useLayoutEffect(() => {\n    if (observe || count.current++ === 0) {\n      api.refresh();\n      if (fit) api.fit();\n      if (clip) api.clip();\n    }\n  }, [size, clip, fit, observe, camera, controls]);\n  useFrame((state, delta) => {\n    if (current.animating) {\n      damp(current.focus, goal.focus, damping, delta);\n      damp(current.camera, goal.camera, damping, delta);\n      current.zoom = THREE.MathUtils.damp(current.zoom, goal.zoom, damping, delta);\n      camera.position.copy(current.camera);\n\n      if (isOrthographic(camera)) {\n        camera.zoom = current.zoom;\n        camera.updateProjectionMatrix();\n      }\n\n      if (!controls) {\n        camera.lookAt(current.focus);\n      } else {\n        controls.target.copy(current.focus);\n        controls.update();\n      }\n\n      invalidate();\n      if (isOrthographic(camera) && !(Math.abs(current.zoom - goal.zoom) < eps)) return;\n      if (!isOrthographic(camera) && !equals(current.camera, goal.camera)) return;\n      if (controls && !equals(current.focus, goal.focus)) return;\n      current.animating = false;\n    }\n  });\n  return /*#__PURE__*/React.createElement(\"group\", {\n    ref: ref\n  }, /*#__PURE__*/React.createElement(context.Provider, {\n    value: api\n  }, children));\n}\nfunction useBounds() {\n  return React.useContext(context);\n}\n\nexport { Bounds, useBounds };\n"],"mappings":";;AAAA,OAAO,KAAKA,KAAK,MAAM,OAAO;AAC9B,OAAO,KAAKC,KAAK,MAAM,OAAO;AAC9B,SAASC,QAAQ,EAAEC,QAAQ,QAAQ,oBAAoB;AAEvD,IAAMC,cAAc,GAAG,SAAjBA,cAAcA,CAAGC,GAAG;EAAA,OAAIA,GAAG,IAAIA,GAAG,CAACC,oBAAoB;AAAA;AAE7D,IAAMC,MAAM,GAAG,SAATA,MAAMA,CAAGF,GAAG;EAAA,OAAIA,GAAG,IAAIA,GAAG,CAACE,MAAM;AAAA;AAEvC,IAAMC,OAAO,GAAG,aAAaR,KAAK,CAACS,aAAa,CAAC,IAAI,CAAC;AACtD,SAASC,MAAMA,CAAAC,IAAA,EASZ;EAAA,IARDC,QAAQ,GAAAD,IAAA,CAARC,QAAQ;IAAAC,YAAA,GAAAF,IAAA,CACRG,OAAO;IAAPA,OAAO,GAAAD,YAAA,cAAG,CAAC,GAAAA,YAAA;IACXE,GAAG,GAAAJ,IAAA,CAAHI,GAAG;IACHC,IAAI,GAAAL,IAAA,CAAJK,IAAI;IACJC,OAAO,GAAAN,IAAA,CAAPM,OAAO;IAAAC,WAAA,GAAAP,IAAA,CACPQ,MAAM;IAANA,MAAM,GAAAD,WAAA,cAAG,GAAG,GAAAA,WAAA;IAAAE,QAAA,GAAAT,IAAA,CACZU,GAAG;IAAHA,GAAG,GAAAD,QAAA,cAAG,IAAI,GAAAA,QAAA;IACVE,KAAK,GAAAX,IAAA,CAALW,KAAK;EAEL,IAAMC,GAAG,GAAGvB,KAAK,CAACwB,MAAM,CAAC,IAAI,CAAC;EAC9B,IAAAC,SAAA,GAKIvB,QAAQ,CAAC,CAAC;IAJZwB,MAAM,GAAAD,SAAA,CAANC,MAAM;IACNC,UAAU,GAAAF,SAAA,CAAVE,UAAU;IACVC,IAAI,GAAAH,SAAA,CAAJG,IAAI;IACMC,YAAY,GAAAJ,SAAA,CAAtBK,QAAQ;EAEV,IAAMA,QAAQ,GAAGD,YAAY;EAC7B,IAAME,QAAQ,GAAG/B,KAAK,CAACwB,MAAM,CAACF,KAAK,CAAC;EACpCS,QAAQ,CAACC,OAAO,GAAGV,KAAK;EAExB,SAASW,MAAMA,CAACC,CAAC,EAAEC,CAAC,EAAE;IACpB,OAAOC,IAAI,CAACC,GAAG,CAACH,CAAC,CAACI,CAAC,GAAGH,CAAC,CAACG,CAAC,CAAC,GAAGjB,GAAG,IAAIe,IAAI,CAACC,GAAG,CAACH,CAAC,CAACK,CAAC,GAAGJ,CAAC,CAACI,CAAC,CAAC,GAAGlB,GAAG,IAAIe,IAAI,CAACC,GAAG,CAACH,CAAC,CAACM,CAAC,GAAGL,CAAC,CAACK,CAAC,CAAC,GAAGnB,GAAG;EAC5F;EAEA,SAASoB,IAAIA,CAACC,CAAC,EAAEC,CAAC,EAAEC,MAAM,EAAEC,KAAK,EAAE;IACjCH,CAAC,CAACJ,CAAC,GAAGrC,KAAK,CAAC6C,SAAS,CAACL,IAAI,CAACC,CAAC,CAACJ,CAAC,EAAEK,CAAC,CAACL,CAAC,EAAEM,MAAM,EAAEC,KAAK,CAAC;IACnDH,CAAC,CAACH,CAAC,GAAGtC,KAAK,CAAC6C,SAAS,CAACL,IAAI,CAACC,CAAC,CAACH,CAAC,EAAEI,CAAC,CAACJ,CAAC,EAAEK,MAAM,EAAEC,KAAK,CAAC;IACnDH,CAAC,CAACF,CAAC,GAAGvC,KAAK,CAAC6C,SAAS,CAACL,IAAI,CAACC,CAAC,CAACF,CAAC,EAAEG,CAAC,CAACH,CAAC,EAAEI,MAAM,EAAEC,KAAK,CAAC;EACrD;EAEA,IAAAE,eAAA,GAAkB/C,KAAK,CAACgD,QAAQ,CAAC;MAAA,OAAO;QACtCC,SAAS,EAAE,KAAK;QAChBC,KAAK,EAAE,IAAIjD,KAAK,CAACkD,OAAO,CAAC,CAAC;QAC1BzB,MAAM,EAAE,IAAIzB,KAAK,CAACkD,OAAO,CAAC,CAAC;QAC3BC,IAAI,EAAE;MACR,CAAC;IAAA,CAAC,CAAC;IAAAC,gBAAA,GAAAC,cAAA,CAAAP,eAAA;IALIf,OAAO,GAAAqB,gBAAA;EAMd,IAAAE,gBAAA,GAAevD,KAAK,CAACgD,QAAQ,CAAC;MAAA,OAAO;QACnCE,KAAK,EAAE,IAAIjD,KAAK,CAACkD,OAAO,CAAC,CAAC;QAC1BzB,MAAM,EAAE,IAAIzB,KAAK,CAACkD,OAAO,CAAC,CAAC;QAC3BC,IAAI,EAAE;MACR,CAAC;IAAA,CAAC,CAAC;IAAAI,gBAAA,GAAAF,cAAA,CAAAC,gBAAA;IAJIE,IAAI,GAAAD,gBAAA;EAKX,IAAAE,gBAAA,GAAc1D,KAAK,CAACgD,QAAQ,CAAC;MAAA,OAAM,IAAI/C,KAAK,CAAC0D,IAAI,CAAC,CAAC;IAAA,EAAC;IAAAC,gBAAA,GAAAN,cAAA,CAAAI,gBAAA;IAA7CG,GAAG,GAAAD,gBAAA;EACV,IAAME,GAAG,GAAG9D,KAAK,CAAC+D,OAAO,CAAC,YAAM;IAC9B,SAASC,OAAOA,CAAA,EAAG;MACjB,IAAMpC,IAAI,GAAGiC,GAAG,CAACG,OAAO,CAAC,IAAI/D,KAAK,CAACkD,OAAO,CAAC,CAAC,CAAC;MAC7C,IAAMc,MAAM,GAAGJ,GAAG,CAACK,SAAS,CAAC,IAAIjE,KAAK,CAACkD,OAAO,CAAC,CAAC,CAAC;MACjD,IAAMgB,OAAO,GAAG/B,IAAI,CAACgC,GAAG,CAACxC,IAAI,CAACU,CAAC,EAAEV,IAAI,CAACW,CAAC,EAAEX,IAAI,CAACY,CAAC,CAAC;MAChD,IAAM6B,iBAAiB,GAAGjE,cAAc,CAACsB,MAAM,CAAC,GAAGyC,OAAO,GAAG,CAAC,GAAGA,OAAO,IAAI,CAAC,GAAG/B,IAAI,CAACkC,IAAI,CAAClC,IAAI,CAACmC,EAAE,GAAG7C,MAAM,CAAC8C,GAAG,GAAG,GAAG,CAAC,CAAC;MACtH,IAAMC,gBAAgB,GAAGrE,cAAc,CAACsB,MAAM,CAAC,GAAGyC,OAAO,GAAG,CAAC,GAAGE,iBAAiB,GAAG3C,MAAM,CAACgD,MAAM;MACjG,IAAMC,QAAQ,GAAGxD,MAAM,GAAGiB,IAAI,CAACgC,GAAG,CAACC,iBAAiB,EAAEI,gBAAgB,CAAC;MACvE,OAAO;QACLZ,GAAG,EAAHA,GAAG;QACHjC,IAAI,EAAJA,IAAI;QACJqC,MAAM,EAANA,MAAM;QACNU,QAAQ,EAARA;MACF,CAAC;IACH;IAEA,OAAO;MACLX,OAAO,EAAPA,OAAO;MAEPY,OAAO,WAAAA,QAACC,MAAM,EAAE;QACd,IAAItE,MAAM,CAACsE,MAAM,CAAC,EAAEhB,GAAG,CAACiB,IAAI,CAACD,MAAM,CAAC,CAAC,KAAK;UACxC,IAAME,MAAM,GAAGF,MAAM,IAAItD,GAAG,CAACS,OAAO;UACpC+C,MAAM,CAACC,iBAAiB,CAAC,IAAI,EAAE,IAAI,CAAC;UACpCnB,GAAG,CAACoB,aAAa,CAACF,MAAM,CAAC;QAC3B;QAEA,IAAIlB,GAAG,CAACqB,OAAO,CAAC,CAAC,EAAE;UACjB,IAAMd,GAAG,GAAG1C,MAAM,CAACyD,QAAQ,CAACC,MAAM,CAAC,CAAC,IAAI,EAAE;UAC1CvB,GAAG,CAACwB,oBAAoB,CAAC,IAAIpF,KAAK,CAACkD,OAAO,CAAC,CAAC,EAAE,IAAIlD,KAAK,CAACkD,OAAO,CAACiB,GAAG,EAAEA,GAAG,EAAEA,GAAG,CAAC,CAAC;QACjF;QAEA,IAAI,CAACtC,QAAQ,IAAI,IAAI,GAAG,KAAK,CAAC,GAAGA,QAAQ,CAACwD,WAAW,CAACC,IAAI,MAAM,+BAA+B,EAAE;UAC/F;UACA,IAAAC,QAAA,GAEIxB,OAAO,CAAC,CAAC;YADXW,QAAQ,GAAAa,QAAA,CAARb,QAAQ;UAEV,IAAMc,SAAS,GAAG/D,MAAM,CAACyD,QAAQ,CAACO,KAAK,CAAC,CAAC,CAACC,GAAG,CAAC7D,QAAQ,CAACiD,MAAM,CAAC,CAACa,SAAS,CAAC,CAAC,CAACC,cAAc,CAAClB,QAAQ,CAAC;UACnG,IAAMmB,MAAM,GAAGhE,QAAQ,CAACiD,MAAM,CAACW,KAAK,CAAC,CAAC,CAACK,GAAG,CAACN,SAAS,CAAC;UACrD/D,MAAM,CAACyD,QAAQ,CAACL,IAAI,CAACgB,MAAM,CAAC;QAC9B;QAEA,OAAO,IAAI;MACb,CAAC;MAED9E,IAAI,WAAAA,KAAA,EAAG;QACL,IAAAgF,SAAA,GAEIhC,OAAO,CAAC,CAAC;UADXW,QAAQ,GAAAqB,SAAA,CAARrB,QAAQ;QAEV,IAAI7C,QAAQ,EAAEA,QAAQ,CAACmE,WAAW,GAAGtB,QAAQ,GAAG,EAAE;QAClDjD,MAAM,CAACwE,IAAI,GAAGvB,QAAQ,GAAG,GAAG;QAC5BjD,MAAM,CAACyE,GAAG,GAAGxB,QAAQ,GAAG,GAAG;QAC3BjD,MAAM,CAAC0E,sBAAsB,CAAC,CAAC;QAC/B,IAAItE,QAAQ,EAAEA,QAAQ,CAACuE,MAAM,CAAC,CAAC;QAC/B1E,UAAU,CAAC,CAAC;QACZ,OAAO,IAAI;MACb,CAAC;MAED2E,EAAE,WAAAA,GAAAC,KAAA,EAGC;QAAA,IAAAC,YAAA;QAAA,IAFDrB,QAAQ,GAAAoB,KAAA,CAARpB,QAAQ;UACRJ,MAAM,GAAAwB,KAAA,CAANxB,MAAM;QAEN/C,OAAO,CAACN,MAAM,CAACoD,IAAI,CAACpD,MAAM,CAACyD,QAAQ,CAAC;QACpC,IAAAsB,SAAA,GAEIzC,OAAO,CAAC,CAAC;UADXC,MAAM,GAAAwC,SAAA,CAANxC,MAAM;QAER,CAAAuC,YAAA,GAAA/C,IAAI,CAAC/B,MAAM,EAACgF,GAAG,CAAAC,KAAA,CAAAH,YAAA,EAAAI,kBAAA,CAAIzB,QAAQ,EAAC;QAE5B,IAAIJ,MAAM,EAAE;UAAA,IAAA8B,WAAA;UACV,CAAAA,WAAA,GAAApD,IAAI,CAACP,KAAK,EAACwD,GAAG,CAAAC,KAAA,CAAAE,WAAA,EAAAD,kBAAA,CAAI7B,MAAM,EAAC;QAC3B,CAAC,MAAM;UACLtB,IAAI,CAACP,KAAK,CAAC4B,IAAI,CAACb,MAAM,CAAC;QACzB;QAEA,IAAInD,OAAO,EAAE;UACXkB,OAAO,CAACiB,SAAS,GAAG,IAAI;QAC1B,CAAC,MAAM;UAAA,IAAA6D,gBAAA;UACL,CAAAA,gBAAA,GAAApF,MAAM,CAACyD,QAAQ,EAACuB,GAAG,CAAAC,KAAA,CAAAG,gBAAA,EAAAF,kBAAA,CAAIzB,QAAQ,EAAC;QAClC;QAEA,OAAO,IAAI;MACb,CAAC;MAEDpE,GAAG,WAAAA,IAAA,EAAG;QACJiB,OAAO,CAACN,MAAM,CAACoD,IAAI,CAACpD,MAAM,CAACyD,QAAQ,CAAC;QACpC,IAAIrD,QAAQ,EAAEE,OAAO,CAACkB,KAAK,CAAC4B,IAAI,CAAChD,QAAQ,CAACiD,MAAM,CAAC;QACjD,IAAAgC,SAAA,GAGI/C,OAAO,CAAC,CAAC;UAFXC,MAAM,GAAA8C,SAAA,CAAN9C,MAAM;UACNU,QAAQ,GAAAoC,SAAA,CAARpC,QAAQ;QAEV,IAAMc,SAAS,GAAGxB,MAAM,CAACyB,KAAK,CAAC,CAAC,CAACC,GAAG,CAACjE,MAAM,CAACyD,QAAQ,CAAC,CAACS,SAAS,CAAC,CAAC,CAACC,cAAc,CAAClB,QAAQ,CAAC;QAC1FlB,IAAI,CAAC/B,MAAM,CAACoD,IAAI,CAACb,MAAM,CAAC,CAAC0B,GAAG,CAACF,SAAS,CAAC;QACvChC,IAAI,CAACP,KAAK,CAAC4B,IAAI,CAACb,MAAM,CAAC;QAEvB,IAAI7D,cAAc,CAACsB,MAAM,CAAC,EAAE;UAC1BM,OAAO,CAACoB,IAAI,GAAG1B,MAAM,CAAC0B,IAAI;UAC1B,IAAI4D,SAAS,GAAG,CAAC;YACbC,QAAQ,GAAG,CAAC;UAChB,IAAMC,QAAQ,GAAG,CAAC,IAAIjH,KAAK,CAACkD,OAAO,CAACU,GAAG,CAACsD,GAAG,CAAC7E,CAAC,EAAEuB,GAAG,CAACsD,GAAG,CAAC5E,CAAC,EAAEsB,GAAG,CAACsD,GAAG,CAAC3E,CAAC,CAAC,EAAE,IAAIvC,KAAK,CAACkD,OAAO,CAACU,GAAG,CAACsD,GAAG,CAAC7E,CAAC,EAAEuB,GAAG,CAACO,GAAG,CAAC7B,CAAC,EAAEsB,GAAG,CAACsD,GAAG,CAAC3E,CAAC,CAAC,EAAE,IAAIvC,KAAK,CAACkD,OAAO,CAACU,GAAG,CAACsD,GAAG,CAAC7E,CAAC,EAAEuB,GAAG,CAACsD,GAAG,CAAC5E,CAAC,EAAEsB,GAAG,CAACO,GAAG,CAAC5B,CAAC,CAAC,EAAE,IAAIvC,KAAK,CAACkD,OAAO,CAACU,GAAG,CAACsD,GAAG,CAAC7E,CAAC,EAAEuB,GAAG,CAACO,GAAG,CAAC7B,CAAC,EAAEsB,GAAG,CAACO,GAAG,CAAC5B,CAAC,CAAC,EAAE,IAAIvC,KAAK,CAACkD,OAAO,CAACU,GAAG,CAACO,GAAG,CAAC9B,CAAC,EAAEuB,GAAG,CAACO,GAAG,CAAC7B,CAAC,EAAEsB,GAAG,CAACO,GAAG,CAAC5B,CAAC,CAAC,EAAE,IAAIvC,KAAK,CAACkD,OAAO,CAACU,GAAG,CAACO,GAAG,CAAC9B,CAAC,EAAEuB,GAAG,CAACO,GAAG,CAAC7B,CAAC,EAAEsB,GAAG,CAACsD,GAAG,CAAC3E,CAAC,CAAC,EAAE,IAAIvC,KAAK,CAACkD,OAAO,CAACU,GAAG,CAACO,GAAG,CAAC9B,CAAC,EAAEuB,GAAG,CAACsD,GAAG,CAAC5E,CAAC,EAAEsB,GAAG,CAACO,GAAG,CAAC5B,CAAC,CAAC,EAAE,IAAIvC,KAAK,CAACkD,OAAO,CAACU,GAAG,CAACO,GAAG,CAAC9B,CAAC,EAAEuB,GAAG,CAACsD,GAAG,CAAC5E,CAAC,EAAEsB,GAAG,CAACsD,GAAG,CAAC3E,CAAC,CAAC,CAAC,CAAC,CAAC;;UAEnbyB,MAAM,CAACmD,YAAY,CAAC1F,MAAM,CAAC2F,kBAAkB,CAAC;UAE9C,SAAAC,EAAA,MAAAC,SAAA,GAAgBL,QAAQ,EAAAI,EAAA,GAAAC,SAAA,CAAAnC,MAAA,EAAAkC,EAAA,IAAE;YAArB,IAAM5E,CAAC,GAAA6E,SAAA,CAAAD,EAAA;YACV5E,CAAC,CAAC0E,YAAY,CAAC1F,MAAM,CAAC2F,kBAAkB,CAAC;YACzCL,SAAS,GAAG5E,IAAI,CAACgC,GAAG,CAAC4C,SAAS,EAAE5E,IAAI,CAACC,GAAG,CAACK,CAAC,CAACH,CAAC,GAAG0B,MAAM,CAAC1B,CAAC,CAAC,CAAC;YACzD0E,QAAQ,GAAG7E,IAAI,CAACgC,GAAG,CAAC6C,QAAQ,EAAE7E,IAAI,CAACC,GAAG,CAACK,CAAC,CAACJ,CAAC,GAAG2B,MAAM,CAAC3B,CAAC,CAAC,CAAC;UACzD;UAEA0E,SAAS,IAAI,CAAC;UACdC,QAAQ,IAAI,CAAC;UACb,IAAMO,aAAa,GAAG,CAAC9F,MAAM,CAAC+F,GAAG,GAAG/F,MAAM,CAACgG,MAAM,IAAIV,SAAS;UAC9D,IAAMW,YAAY,GAAG,CAACjG,MAAM,CAACkG,KAAK,GAAGlG,MAAM,CAACmG,IAAI,IAAIZ,QAAQ;UAC5DxD,IAAI,CAACL,IAAI,GAAGhB,IAAI,CAAC+E,GAAG,CAACK,aAAa,EAAEG,YAAY,CAAC,GAAGxG,MAAM;UAE1D,IAAI,CAACL,OAAO,EAAE;YACZY,MAAM,CAAC0B,IAAI,GAAGK,IAAI,CAACL,IAAI;YACvB1B,MAAM,CAAC0E,sBAAsB,CAAC,CAAC;UACjC;QACF;QAEA,IAAItF,OAAO,EAAE;UACXkB,OAAO,CAACiB,SAAS,GAAG,IAAI;QAC1B,CAAC,MAAM;UACLvB,MAAM,CAACyD,QAAQ,CAACL,IAAI,CAACrB,IAAI,CAAC/B,MAAM,CAAC;UACjCA,MAAM,CAACoG,MAAM,CAACrE,IAAI,CAACP,KAAK,CAAC;UAEzB,IAAIpB,QAAQ,EAAE;YACZA,QAAQ,CAACiD,MAAM,CAACD,IAAI,CAACrB,IAAI,CAACP,KAAK,CAAC;YAChCpB,QAAQ,CAACuE,MAAM,CAAC,CAAC;UACnB;QACF;QAEA,IAAItE,QAAQ,CAACC,OAAO,EAAED,QAAQ,CAACC,OAAO,CAAC,IAAI,CAACgC,OAAO,CAAC,CAAC,CAAC;QACtDrC,UAAU,CAAC,CAAC;QACZ,OAAO,IAAI;MACb;IAEF,CAAC;EACH,CAAC,EAAE,CAACkC,GAAG,EAAEnC,MAAM,EAAEI,QAAQ,EAAEX,MAAM,EAAEL,OAAO,EAAEa,UAAU,CAAC,CAAC;EACxD3B,KAAK,CAAC+H,eAAe,CAAC,YAAM;IAC1B,IAAIjG,QAAQ,EAAE;MACZ;MACA,IAAMkG,QAAQ,GAAG,SAAXA,QAAQA,CAAA;QAAA,OAAShG,OAAO,CAACiB,SAAS,GAAG,KAAK;MAAA;MAEhDnB,QAAQ,CAACmG,gBAAgB,CAAC,OAAO,EAAED,QAAQ,CAAC;MAC5C,OAAO;QAAA,OAAMlG,QAAQ,CAACoG,mBAAmB,CAAC,OAAO,EAAEF,QAAQ,CAAC;MAAA;IAC9D;EACF,CAAC,EAAE,CAAClG,QAAQ,CAAC,CAAC,CAAC,CAAC;;EAEhB,IAAMqG,KAAK,GAAGnI,KAAK,CAACwB,MAAM,CAAC,CAAC,CAAC;EAC7BxB,KAAK,CAAC+H,eAAe,CAAC,YAAM;IAC1B,IAAI9G,OAAO,IAAIkH,KAAK,CAACnG,OAAO,EAAE,KAAK,CAAC,EAAE;MACpC8B,GAAG,CAACc,OAAO,CAAC,CAAC;MACb,IAAI7D,GAAG,EAAE+C,GAAG,CAAC/C,GAAG,CAAC,CAAC;MAClB,IAAIC,IAAI,EAAE8C,GAAG,CAAC9C,IAAI,CAAC,CAAC;IACtB;EACF,CAAC,EAAE,CAACY,IAAI,EAAEZ,IAAI,EAAED,GAAG,EAAEE,OAAO,EAAES,MAAM,EAAEI,QAAQ,CAAC,CAAC;EAChD3B,QAAQ,CAAC,UAACiI,KAAK,EAAEvF,KAAK,EAAK;IACzB,IAAIb,OAAO,CAACiB,SAAS,EAAE;MACrBR,IAAI,CAACT,OAAO,CAACkB,KAAK,EAAEO,IAAI,CAACP,KAAK,EAAEpC,OAAO,EAAE+B,KAAK,CAAC;MAC/CJ,IAAI,CAACT,OAAO,CAACN,MAAM,EAAE+B,IAAI,CAAC/B,MAAM,EAAEZ,OAAO,EAAE+B,KAAK,CAAC;MACjDb,OAAO,CAACoB,IAAI,GAAGnD,KAAK,CAAC6C,SAAS,CAACL,IAAI,CAACT,OAAO,CAACoB,IAAI,EAAEK,IAAI,CAACL,IAAI,EAAEtC,OAAO,EAAE+B,KAAK,CAAC;MAC5EnB,MAAM,CAACyD,QAAQ,CAACL,IAAI,CAAC9C,OAAO,CAACN,MAAM,CAAC;MAEpC,IAAItB,cAAc,CAACsB,MAAM,CAAC,EAAE;QAC1BA,MAAM,CAAC0B,IAAI,GAAGpB,OAAO,CAACoB,IAAI;QAC1B1B,MAAM,CAAC0E,sBAAsB,CAAC,CAAC;MACjC;MAEA,IAAI,CAACtE,QAAQ,EAAE;QACbJ,MAAM,CAACoG,MAAM,CAAC9F,OAAO,CAACkB,KAAK,CAAC;MAC9B,CAAC,MAAM;QACLpB,QAAQ,CAACiD,MAAM,CAACD,IAAI,CAAC9C,OAAO,CAACkB,KAAK,CAAC;QACnCpB,QAAQ,CAACuE,MAAM,CAAC,CAAC;MACnB;MAEA1E,UAAU,CAAC,CAAC;MACZ,IAAIvB,cAAc,CAACsB,MAAM,CAAC,IAAI,EAAEU,IAAI,CAACC,GAAG,CAACL,OAAO,CAACoB,IAAI,GAAGK,IAAI,CAACL,IAAI,CAAC,GAAG/B,GAAG,CAAC,EAAE;MAC3E,IAAI,CAACjB,cAAc,CAACsB,MAAM,CAAC,IAAI,CAACO,MAAM,CAACD,OAAO,CAACN,MAAM,EAAE+B,IAAI,CAAC/B,MAAM,CAAC,EAAE;MACrE,IAAII,QAAQ,IAAI,CAACG,MAAM,CAACD,OAAO,CAACkB,KAAK,EAAEO,IAAI,CAACP,KAAK,CAAC,EAAE;MACpDlB,OAAO,CAACiB,SAAS,GAAG,KAAK;IAC3B;EACF,CAAC,CAAC;EACF,OAAO,aAAajD,KAAK,CAACqI,aAAa,CAAC,OAAO,EAAE;IAC/C9G,GAAG,EAAEA;EACP,CAAC,EAAE,aAAavB,KAAK,CAACqI,aAAa,CAAC7H,OAAO,CAAC8H,QAAQ,EAAE;IACpDC,KAAK,EAAEzE;EACT,CAAC,EAAElD,QAAQ,CAAC,CAAC;AACf;AACA,SAAS4H,SAASA,CAAA,EAAG;EACnB,OAAOxI,KAAK,CAACyI,UAAU,CAACjI,OAAO,CAAC;AAClC;AAEA,SAASE,MAAM,EAAE8H,SAAS"},"metadata":{},"sourceType":"module","externalDependencies":[]}