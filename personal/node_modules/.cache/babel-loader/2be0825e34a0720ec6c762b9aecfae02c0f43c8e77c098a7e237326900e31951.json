{"ast":null,"code":"export function getMagnitude(vector, vectorLength) {\n  let magnitude = 0;\n  for (let i = 0; i < vectorLength; i++) {\n    magnitude += vector[i] * vector[i];\n  }\n  return Math.sqrt(magnitude);\n}\n// @todo: Write plugins for Node and Browsers to use parallel computation for this function\nexport function findSimilarVectors(targetVector, vectors, length) {\n  let threshold = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0.8;\n  const targetMagnitude = getMagnitude(targetVector, length);\n  const similarVectors = [];\n  for (const [vectorId, [magnitude, vector]] of Object.entries(vectors)) {\n    let dotProduct = 0;\n    for (let i = 0; i < length; i++) {\n      dotProduct += targetVector[i] * vector[i];\n    }\n    const similarity = dotProduct / (targetMagnitude * magnitude);\n    if (similarity >= threshold) {\n      similarVectors.push({\n        id: vectorId,\n        score: similarity\n      });\n    }\n  }\n  return similarVectors.sort((a, b) => b.score - a.score);\n}","map":{"version":3,"names":["getMagnitude","vector","vectorLength","magnitude","i","Math","sqrt","findSimilarVectors","targetVector","vectors","length","threshold","arguments","undefined","targetMagnitude","similarVectors","vectorId","Object","entries","dotProduct","similarity","push","id","score","sort","a","b"],"sources":["/home/krug/Coding/JavaScript/Websites/Personal/personal/node_modules/.pnpm/@orama+orama@1.2.11/node_modules/@orama/orama/src/components/cosine-similarity.ts"],"sourcesContent":["import type { Magnitude, VectorType } from '../types.js'\n\nexport type SimilarVector = {\n  id: string\n  score: number\n}\n\nexport function getMagnitude(vector: Float32Array, vectorLength: number): number {\n  let magnitude = 0\n  for (let i = 0; i < vectorLength; i++) {\n    magnitude += vector[i] * vector[i]\n  }\n  return Math.sqrt(magnitude)\n}\n\n// @todo: Write plugins for Node and Browsers to use parallel computation for this function\nexport function findSimilarVectors(\n  targetVector: Float32Array,\n  vectors: Record<string, [Magnitude, VectorType]>,\n  length: number,\n  threshold = 0.8\n) {\n  const targetMagnitude = getMagnitude(targetVector, length);\n\n  const similarVectors: SimilarVector[] = []\n\n  for (const [vectorId, [magnitude, vector]] of Object.entries(vectors)) {\n    let dotProduct = 0\n\n    for (let i = 0; i < length; i++) {\n      dotProduct += targetVector[i] * vector[i]\n    }\n\n    const similarity = dotProduct / (targetMagnitude * magnitude)\n\n    if (similarity >= threshold) {\n      similarVectors.push({ id: vectorId, score: similarity })\n    }\n  }\n\n  return similarVectors.sort((a, b) => b.score - a.score)\n}\n\n"],"mappings":"AAOA,OAAO,SAASA,aAAaC,MAAoB,EAAEC,YAAoB,EAAU;EAC/E,IAAIC,SAAA,GAAY;EAChB,KAAK,IAAIC,CAAA,GAAI,GAAGA,CAAA,GAAIF,YAAA,EAAcE,CAAA,IAAK;IACrCD,SAAA,IAAaF,MAAM,CAACG,CAAA,CAAE,GAAGH,MAAM,CAACG,CAAA,CAAE;EACpC;EACA,OAAOC,IAAA,CAAKC,IAAI,CAACH,SAAA;AACnB;AAEA;AACA,OAAO,SAASI,mBACdC,YAA0B,EAC1BC,OAAgD,EAChDC,MAAc,EAEd;EAAA,IADAC,SAAA,GAAAC,SAAA,CAAAF,MAAA,QAAAE,SAAA,QAAAC,SAAA,GAAAD,SAAA,MAAY,GAAG;EAEf,MAAME,eAAA,GAAkBd,YAAA,CAAaQ,YAAA,EAAcE,MAAA;EAEnD,MAAMK,cAAA,GAAkC,EAAE;EAE1C,KAAK,MAAM,CAACC,QAAA,EAAU,CAACb,SAAA,EAAWF,MAAA,CAAO,CAAC,IAAIgB,MAAA,CAAOC,OAAO,CAACT,OAAA,GAAU;IACrE,IAAIU,UAAA,GAAa;IAEjB,KAAK,IAAIf,CAAA,GAAI,GAAGA,CAAA,GAAIM,MAAA,EAAQN,CAAA,IAAK;MAC/Be,UAAA,IAAcX,YAAY,CAACJ,CAAA,CAAE,GAAGH,MAAM,CAACG,CAAA,CAAE;IAC3C;IAEA,MAAMgB,UAAA,GAAaD,UAAA,IAAcL,eAAA,GAAkBX,SAAQ;IAE3D,IAAIiB,UAAA,IAAcT,SAAA,EAAW;MAC3BI,cAAA,CAAeM,IAAI,CAAC;QAAEC,EAAA,EAAIN,QAAA;QAAUO,KAAA,EAAOH;MAAW;IACxD;EACF;EAEA,OAAOL,cAAA,CAAeS,IAAI,CAAC,CAACC,CAAA,EAAGC,CAAA,KAAMA,CAAA,CAAEH,KAAK,GAAGE,CAAA,CAAEF,KAAK;AACxD"},"metadata":{},"sourceType":"module","externalDependencies":[]}