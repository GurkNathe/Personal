{"ast":null,"code":"import { Box3, Vector3, InstancedBufferGeometry, Float32BufferAttribute, InstancedInterleavedBuffer, InterleavedBufferAttribute, WireframeGeometry, Sphere } from \"three\";\nconst _box = /* @__PURE__ */new Box3();\nconst _vector = /* @__PURE__ */new Vector3();\nclass LineSegmentsGeometry extends InstancedBufferGeometry {\n  constructor() {\n    super();\n    this.isLineSegmentsGeometry = true;\n    this.type = \"LineSegmentsGeometry\";\n    const positions = [-1, 2, 0, 1, 2, 0, -1, 1, 0, 1, 1, 0, -1, 0, 0, 1, 0, 0, -1, -1, 0, 1, -1, 0];\n    const uvs = [-1, 2, 1, 2, -1, 1, 1, 1, -1, -1, 1, -1, -1, -2, 1, -2];\n    const index = [0, 2, 1, 2, 3, 1, 2, 4, 3, 4, 5, 3, 4, 6, 5, 6, 7, 5];\n    this.setIndex(index);\n    this.setAttribute(\"position\", new Float32BufferAttribute(positions, 3));\n    this.setAttribute(\"uv\", new Float32BufferAttribute(uvs, 2));\n  }\n  applyMatrix4(matrix) {\n    const start = this.attributes.instanceStart;\n    const end = this.attributes.instanceEnd;\n    if (start !== void 0) {\n      start.applyMatrix4(matrix);\n      end.applyMatrix4(matrix);\n      start.needsUpdate = true;\n    }\n    if (this.boundingBox !== null) {\n      this.computeBoundingBox();\n    }\n    if (this.boundingSphere !== null) {\n      this.computeBoundingSphere();\n    }\n    return this;\n  }\n  setPositions(array) {\n    let lineSegments;\n    if (array instanceof Float32Array) {\n      lineSegments = array;\n    } else if (Array.isArray(array)) {\n      lineSegments = new Float32Array(array);\n    }\n    const instanceBuffer = new InstancedInterleavedBuffer(lineSegments, 6, 1);\n    this.setAttribute(\"instanceStart\", new InterleavedBufferAttribute(instanceBuffer, 3, 0));\n    this.setAttribute(\"instanceEnd\", new InterleavedBufferAttribute(instanceBuffer, 3, 3));\n    this.computeBoundingBox();\n    this.computeBoundingSphere();\n    return this;\n  }\n  setColors(array) {\n    let colors;\n    if (array instanceof Float32Array) {\n      colors = array;\n    } else if (Array.isArray(array)) {\n      colors = new Float32Array(array);\n    }\n    const instanceColorBuffer = new InstancedInterleavedBuffer(colors, 6, 1);\n    this.setAttribute(\"instanceColorStart\", new InterleavedBufferAttribute(instanceColorBuffer, 3, 0));\n    this.setAttribute(\"instanceColorEnd\", new InterleavedBufferAttribute(instanceColorBuffer, 3, 3));\n    return this;\n  }\n  fromWireframeGeometry(geometry) {\n    this.setPositions(geometry.attributes.position.array);\n    return this;\n  }\n  fromEdgesGeometry(geometry) {\n    this.setPositions(geometry.attributes.position.array);\n    return this;\n  }\n  fromMesh(mesh) {\n    this.fromWireframeGeometry(new WireframeGeometry(mesh.geometry));\n    return this;\n  }\n  fromLineSegments(lineSegments) {\n    const geometry = lineSegments.geometry;\n    this.setPositions(geometry.attributes.position.array);\n    return this;\n  }\n  computeBoundingBox() {\n    if (this.boundingBox === null) {\n      this.boundingBox = new Box3();\n    }\n    const start = this.attributes.instanceStart;\n    const end = this.attributes.instanceEnd;\n    if (start !== void 0 && end !== void 0) {\n      this.boundingBox.setFromBufferAttribute(start);\n      _box.setFromBufferAttribute(end);\n      this.boundingBox.union(_box);\n    }\n  }\n  computeBoundingSphere() {\n    if (this.boundingSphere === null) {\n      this.boundingSphere = new Sphere();\n    }\n    if (this.boundingBox === null) {\n      this.computeBoundingBox();\n    }\n    const start = this.attributes.instanceStart;\n    const end = this.attributes.instanceEnd;\n    if (start !== void 0 && end !== void 0) {\n      const center = this.boundingSphere.center;\n      this.boundingBox.getCenter(center);\n      let maxRadiusSq = 0;\n      for (let i = 0, il = start.count; i < il; i++) {\n        _vector.fromBufferAttribute(start, i);\n        maxRadiusSq = Math.max(maxRadiusSq, center.distanceToSquared(_vector));\n        _vector.fromBufferAttribute(end, i);\n        maxRadiusSq = Math.max(maxRadiusSq, center.distanceToSquared(_vector));\n      }\n      this.boundingSphere.radius = Math.sqrt(maxRadiusSq);\n      if (isNaN(this.boundingSphere.radius)) {\n        console.error(\"THREE.LineSegmentsGeometry.computeBoundingSphere(): Computed radius is NaN. The instanced position data is likely to have NaN values.\", this);\n      }\n    }\n  }\n  toJSON() {}\n  applyMatrix(matrix) {\n    console.warn(\"THREE.LineSegmentsGeometry: applyMatrix() has been renamed to applyMatrix4().\");\n    return this.applyMatrix4(matrix);\n  }\n}\nexport { LineSegmentsGeometry };","map":{"version":3,"names":["Box3","Vector3","InstancedBufferGeometry","Float32BufferAttribute","InstancedInterleavedBuffer","InterleavedBufferAttribute","WireframeGeometry","Sphere","_box","_vector","LineSegmentsGeometry","constructor","isLineSegmentsGeometry","type","positions","uvs","index","setIndex","setAttribute","applyMatrix4","matrix","start","attributes","instanceStart","end","instanceEnd","needsUpdate","boundingBox","computeBoundingBox","boundingSphere","computeBoundingSphere","setPositions","array","lineSegments","Float32Array","Array","isArray","instanceBuffer","setColors","colors","instanceColorBuffer","fromWireframeGeometry","geometry","position","fromEdgesGeometry","fromMesh","mesh","fromLineSegments","setFromBufferAttribute","union","center","getCenter","maxRadiusSq","i","il","count","fromBufferAttribute","Math","max","distanceToSquared","radius","sqrt","isNaN","console","error","toJSON","applyMatrix","warn"],"sources":["/home/krug/Coding/JavaScript/Websites/Personal/personal/node_modules/.pnpm/three-stdlib@2.23.7_three@0.151.3/node_modules/three-stdlib/lines/LineSegmentsGeometry.js"],"sourcesContent":["import { Box3, Vector3, InstancedBufferGeometry, Float32BufferAttribute, InstancedInterleavedBuffer, InterleavedBufferAttribute, WireframeGeometry, Sphere } from \"three\";\nconst _box = /* @__PURE__ */ new Box3();\nconst _vector = /* @__PURE__ */ new Vector3();\nclass LineSegmentsGeometry extends InstancedBufferGeometry {\n  constructor() {\n    super();\n    this.isLineSegmentsGeometry = true;\n    this.type = \"LineSegmentsGeometry\";\n    const positions = [-1, 2, 0, 1, 2, 0, -1, 1, 0, 1, 1, 0, -1, 0, 0, 1, 0, 0, -1, -1, 0, 1, -1, 0];\n    const uvs = [-1, 2, 1, 2, -1, 1, 1, 1, -1, -1, 1, -1, -1, -2, 1, -2];\n    const index = [0, 2, 1, 2, 3, 1, 2, 4, 3, 4, 5, 3, 4, 6, 5, 6, 7, 5];\n    this.setIndex(index);\n    this.setAttribute(\"position\", new Float32BufferAttribute(positions, 3));\n    this.setAttribute(\"uv\", new Float32BufferAttribute(uvs, 2));\n  }\n  applyMatrix4(matrix) {\n    const start = this.attributes.instanceStart;\n    const end = this.attributes.instanceEnd;\n    if (start !== void 0) {\n      start.applyMatrix4(matrix);\n      end.applyMatrix4(matrix);\n      start.needsUpdate = true;\n    }\n    if (this.boundingBox !== null) {\n      this.computeBoundingBox();\n    }\n    if (this.boundingSphere !== null) {\n      this.computeBoundingSphere();\n    }\n    return this;\n  }\n  setPositions(array) {\n    let lineSegments;\n    if (array instanceof Float32Array) {\n      lineSegments = array;\n    } else if (Array.isArray(array)) {\n      lineSegments = new Float32Array(array);\n    }\n    const instanceBuffer = new InstancedInterleavedBuffer(lineSegments, 6, 1);\n    this.setAttribute(\"instanceStart\", new InterleavedBufferAttribute(instanceBuffer, 3, 0));\n    this.setAttribute(\"instanceEnd\", new InterleavedBufferAttribute(instanceBuffer, 3, 3));\n    this.computeBoundingBox();\n    this.computeBoundingSphere();\n    return this;\n  }\n  setColors(array) {\n    let colors;\n    if (array instanceof Float32Array) {\n      colors = array;\n    } else if (Array.isArray(array)) {\n      colors = new Float32Array(array);\n    }\n    const instanceColorBuffer = new InstancedInterleavedBuffer(colors, 6, 1);\n    this.setAttribute(\"instanceColorStart\", new InterleavedBufferAttribute(instanceColorBuffer, 3, 0));\n    this.setAttribute(\"instanceColorEnd\", new InterleavedBufferAttribute(instanceColorBuffer, 3, 3));\n    return this;\n  }\n  fromWireframeGeometry(geometry) {\n    this.setPositions(geometry.attributes.position.array);\n    return this;\n  }\n  fromEdgesGeometry(geometry) {\n    this.setPositions(geometry.attributes.position.array);\n    return this;\n  }\n  fromMesh(mesh) {\n    this.fromWireframeGeometry(new WireframeGeometry(mesh.geometry));\n    return this;\n  }\n  fromLineSegments(lineSegments) {\n    const geometry = lineSegments.geometry;\n    this.setPositions(geometry.attributes.position.array);\n    return this;\n  }\n  computeBoundingBox() {\n    if (this.boundingBox === null) {\n      this.boundingBox = new Box3();\n    }\n    const start = this.attributes.instanceStart;\n    const end = this.attributes.instanceEnd;\n    if (start !== void 0 && end !== void 0) {\n      this.boundingBox.setFromBufferAttribute(start);\n      _box.setFromBufferAttribute(end);\n      this.boundingBox.union(_box);\n    }\n  }\n  computeBoundingSphere() {\n    if (this.boundingSphere === null) {\n      this.boundingSphere = new Sphere();\n    }\n    if (this.boundingBox === null) {\n      this.computeBoundingBox();\n    }\n    const start = this.attributes.instanceStart;\n    const end = this.attributes.instanceEnd;\n    if (start !== void 0 && end !== void 0) {\n      const center = this.boundingSphere.center;\n      this.boundingBox.getCenter(center);\n      let maxRadiusSq = 0;\n      for (let i = 0, il = start.count; i < il; i++) {\n        _vector.fromBufferAttribute(start, i);\n        maxRadiusSq = Math.max(maxRadiusSq, center.distanceToSquared(_vector));\n        _vector.fromBufferAttribute(end, i);\n        maxRadiusSq = Math.max(maxRadiusSq, center.distanceToSquared(_vector));\n      }\n      this.boundingSphere.radius = Math.sqrt(maxRadiusSq);\n      if (isNaN(this.boundingSphere.radius)) {\n        console.error(\n          \"THREE.LineSegmentsGeometry.computeBoundingSphere(): Computed radius is NaN. The instanced position data is likely to have NaN values.\",\n          this\n        );\n      }\n    }\n  }\n  toJSON() {\n  }\n  applyMatrix(matrix) {\n    console.warn(\"THREE.LineSegmentsGeometry: applyMatrix() has been renamed to applyMatrix4().\");\n    return this.applyMatrix4(matrix);\n  }\n}\nexport {\n  LineSegmentsGeometry\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}