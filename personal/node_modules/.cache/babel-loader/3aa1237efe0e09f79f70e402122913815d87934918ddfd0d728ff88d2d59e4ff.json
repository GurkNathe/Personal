{"ast":null,"code":"import _classCallCheck from \"/home/krug/Coding/JavaScript/Websites/Personal/personal/node_modules/.pnpm/@babel+runtime@7.22.3/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/home/krug/Coding/JavaScript/Websites/Personal/personal/node_modules/.pnpm/@babel+runtime@7.22.3/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _assertThisInitialized from \"/home/krug/Coding/JavaScript/Websites/Personal/personal/node_modules/.pnpm/@babel+runtime@7.22.3/node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js\";\nimport _inherits from \"/home/krug/Coding/JavaScript/Websites/Personal/personal/node_modules/.pnpm/@babel+runtime@7.22.3/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/home/krug/Coding/JavaScript/Websites/Personal/personal/node_modules/.pnpm/@babel+runtime@7.22.3/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nvar __defProp = Object.defineProperty;\nvar __defNormalProp = function __defNormalProp(obj, key, value) {\n  return key in obj ? __defProp(obj, key, {\n    enumerable: true,\n    configurable: true,\n    writable: true,\n    value: value\n  }) : obj[key] = value;\n};\nvar __publicField = function __publicField(obj, key, value) {\n  __defNormalProp(obj, typeof key !== \"symbol\" ? key + \"\" : key, value);\n  return value;\n};\nimport { Pass, FullScreenQuad } from \"./Pass.js\";\nimport { Vector2, WebGLRenderTarget, UniformsUtils, ShaderMaterial, AdditiveBlending } from \"three\";\nimport { ConvolutionShader } from \"../shaders/ConvolutionShader.js\";\nvar BloomPass = /*#__PURE__*/function (_Pass) {\n  _inherits(BloomPass, _Pass);\n  var _super = _createSuper(BloomPass);\n  function BloomPass() {\n    var _this;\n    var strength = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;\n    var kernelSize = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 25;\n    var sigma = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 4;\n    var resolution = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 256;\n    _classCallCheck(this, BloomPass);\n    _this = _super.call(this);\n    __publicField(_assertThisInitialized(_this), \"renderTargetX\");\n    __publicField(_assertThisInitialized(_this), \"renderTargetY\");\n    __publicField(_assertThisInitialized(_this), \"materialCombine\");\n    __publicField(_assertThisInitialized(_this), \"materialConvolution\");\n    __publicField(_assertThisInitialized(_this), \"fsQuad\");\n    __publicField(_assertThisInitialized(_this), \"combineUniforms\");\n    __publicField(_assertThisInitialized(_this), \"convolutionUniforms\");\n    __publicField(_assertThisInitialized(_this), \"blurX\", new Vector2(1953125e-9, 0));\n    __publicField(_assertThisInitialized(_this), \"blurY\", new Vector2(0, 1953125e-9));\n    _this.renderTargetX = new WebGLRenderTarget(resolution, resolution);\n    _this.renderTargetX.texture.name = \"BloomPass.x\";\n    _this.renderTargetY = new WebGLRenderTarget(resolution, resolution);\n    _this.renderTargetY.texture.name = \"BloomPass.y\";\n    _this.combineUniforms = UniformsUtils.clone(CombineShader.uniforms);\n    _this.combineUniforms[\"strength\"].value = strength;\n    _this.materialCombine = new ShaderMaterial({\n      uniforms: _this.combineUniforms,\n      vertexShader: CombineShader.vertexShader,\n      fragmentShader: CombineShader.fragmentShader,\n      blending: AdditiveBlending,\n      transparent: true\n    });\n    if (ConvolutionShader === void 0) console.error(\"BloomPass relies on ConvolutionShader\");\n    var convolutionShader = ConvolutionShader;\n    _this.convolutionUniforms = UniformsUtils.clone(convolutionShader.uniforms);\n    _this.convolutionUniforms[\"uImageIncrement\"].value = _this.blurX;\n    _this.convolutionUniforms[\"cKernel\"].value = ConvolutionShader.buildKernel(sigma);\n    _this.materialConvolution = new ShaderMaterial({\n      uniforms: _this.convolutionUniforms,\n      vertexShader: convolutionShader.vertexShader,\n      fragmentShader: convolutionShader.fragmentShader,\n      defines: {\n        KERNEL_SIZE_FLOAT: kernelSize.toFixed(1),\n        KERNEL_SIZE_INT: kernelSize.toFixed(0)\n      }\n    });\n    _this.needsSwap = false;\n    _this.fsQuad = new FullScreenQuad(_this.materialConvolution);\n    return _this;\n  }\n  _createClass(BloomPass, [{\n    key: \"render\",\n    value: function render(renderer, writeBuffer, readBuffer, deltaTime, maskActive) {\n      if (maskActive) renderer.state.buffers.stencil.setTest(false);\n      this.fsQuad.material = this.materialConvolution;\n      this.convolutionUniforms[\"tDiffuse\"].value = readBuffer.texture;\n      this.convolutionUniforms[\"uImageIncrement\"].value = this.blurX;\n      renderer.setRenderTarget(this.renderTargetX);\n      renderer.clear();\n      this.fsQuad.render(renderer);\n      this.convolutionUniforms[\"tDiffuse\"].value = this.renderTargetX.texture;\n      this.convolutionUniforms[\"uImageIncrement\"].value = this.blurY;\n      renderer.setRenderTarget(this.renderTargetY);\n      renderer.clear();\n      this.fsQuad.render(renderer);\n      this.fsQuad.material = this.materialCombine;\n      this.combineUniforms[\"tDiffuse\"].value = this.renderTargetY.texture;\n      if (maskActive) renderer.state.buffers.stencil.setTest(true);\n      renderer.setRenderTarget(readBuffer);\n      if (this.clear) renderer.clear();\n      this.fsQuad.render(renderer);\n    }\n  }]);\n  return BloomPass;\n}(Pass);\nvar CombineShader = {\n  uniforms: {\n    tDiffuse: {\n      value: null\n    },\n    strength: {\n      value: 1\n    }\n  },\n  vertexShader: /* glsl */\"\\n  varying vec2 vUv;\\n  void main() {\\n    vUv = uv;\\n    gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\\n  }\",\n  fragmentShader: /* glsl */\"\\n  uniform float strength;\\n  uniform sampler2D tDiffuse;\\n  varying vec2 vUv;\\n  void main() {\\n    vec4 texel = texture2D( tDiffuse, vUv );\\n    gl_FragColor = strength * texel;\\n  }\"\n};\nexport { BloomPass };","map":{"version":3,"names":["__defProp","Object","defineProperty","__defNormalProp","obj","key","value","enumerable","configurable","writable","__publicField","Pass","FullScreenQuad","Vector2","WebGLRenderTarget","UniformsUtils","ShaderMaterial","AdditiveBlending","ConvolutionShader","BloomPass","_Pass","_inherits","_super","_createSuper","_this","strength","arguments","length","undefined","kernelSize","sigma","resolution","_classCallCheck","call","_assertThisInitialized","renderTargetX","texture","name","renderTargetY","combineUniforms","clone","CombineShader","uniforms","materialCombine","vertexShader","fragmentShader","blending","transparent","console","error","convolutionShader","convolutionUniforms","blurX","buildKernel","materialConvolution","defines","KERNEL_SIZE_FLOAT","toFixed","KERNEL_SIZE_INT","needsSwap","fsQuad","_createClass","render","renderer","writeBuffer","readBuffer","deltaTime","maskActive","state","buffers","stencil","setTest","material","setRenderTarget","clear","blurY","tDiffuse"],"sources":["/home/krug/Coding/JavaScript/Websites/Personal/personal/node_modules/.pnpm/three-stdlib@2.23.7_three@0.151.3/node_modules/three-stdlib/postprocessing/BloomPass.js"],"sourcesContent":["var __defProp = Object.defineProperty;\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;\nvar __publicField = (obj, key, value) => {\n  __defNormalProp(obj, typeof key !== \"symbol\" ? key + \"\" : key, value);\n  return value;\n};\nimport { Pass, FullScreenQuad } from \"./Pass.js\";\nimport { Vector2, WebGLRenderTarget, UniformsUtils, ShaderMaterial, AdditiveBlending } from \"three\";\nimport { ConvolutionShader } from \"../shaders/ConvolutionShader.js\";\nclass BloomPass extends Pass {\n  constructor(strength = 1, kernelSize = 25, sigma = 4, resolution = 256) {\n    super();\n    __publicField(this, \"renderTargetX\");\n    __publicField(this, \"renderTargetY\");\n    __publicField(this, \"materialCombine\");\n    __publicField(this, \"materialConvolution\");\n    __publicField(this, \"fsQuad\");\n    __publicField(this, \"combineUniforms\");\n    __publicField(this, \"convolutionUniforms\");\n    __publicField(this, \"blurX\", new Vector2(1953125e-9, 0));\n    __publicField(this, \"blurY\", new Vector2(0, 1953125e-9));\n    this.renderTargetX = new WebGLRenderTarget(resolution, resolution);\n    this.renderTargetX.texture.name = \"BloomPass.x\";\n    this.renderTargetY = new WebGLRenderTarget(resolution, resolution);\n    this.renderTargetY.texture.name = \"BloomPass.y\";\n    this.combineUniforms = UniformsUtils.clone(CombineShader.uniforms);\n    this.combineUniforms[\"strength\"].value = strength;\n    this.materialCombine = new ShaderMaterial({\n      uniforms: this.combineUniforms,\n      vertexShader: CombineShader.vertexShader,\n      fragmentShader: CombineShader.fragmentShader,\n      blending: AdditiveBlending,\n      transparent: true\n    });\n    if (ConvolutionShader === void 0)\n      console.error(\"BloomPass relies on ConvolutionShader\");\n    const convolutionShader = ConvolutionShader;\n    this.convolutionUniforms = UniformsUtils.clone(convolutionShader.uniforms);\n    this.convolutionUniforms[\"uImageIncrement\"].value = this.blurX;\n    this.convolutionUniforms[\"cKernel\"].value = ConvolutionShader.buildKernel(sigma);\n    this.materialConvolution = new ShaderMaterial({\n      uniforms: this.convolutionUniforms,\n      vertexShader: convolutionShader.vertexShader,\n      fragmentShader: convolutionShader.fragmentShader,\n      defines: {\n        KERNEL_SIZE_FLOAT: kernelSize.toFixed(1),\n        KERNEL_SIZE_INT: kernelSize.toFixed(0)\n      }\n    });\n    this.needsSwap = false;\n    this.fsQuad = new FullScreenQuad(this.materialConvolution);\n  }\n  render(renderer, writeBuffer, readBuffer, deltaTime, maskActive) {\n    if (maskActive)\n      renderer.state.buffers.stencil.setTest(false);\n    this.fsQuad.material = this.materialConvolution;\n    this.convolutionUniforms[\"tDiffuse\"].value = readBuffer.texture;\n    this.convolutionUniforms[\"uImageIncrement\"].value = this.blurX;\n    renderer.setRenderTarget(this.renderTargetX);\n    renderer.clear();\n    this.fsQuad.render(renderer);\n    this.convolutionUniforms[\"tDiffuse\"].value = this.renderTargetX.texture;\n    this.convolutionUniforms[\"uImageIncrement\"].value = this.blurY;\n    renderer.setRenderTarget(this.renderTargetY);\n    renderer.clear();\n    this.fsQuad.render(renderer);\n    this.fsQuad.material = this.materialCombine;\n    this.combineUniforms[\"tDiffuse\"].value = this.renderTargetY.texture;\n    if (maskActive)\n      renderer.state.buffers.stencil.setTest(true);\n    renderer.setRenderTarget(readBuffer);\n    if (this.clear)\n      renderer.clear();\n    this.fsQuad.render(renderer);\n  }\n}\nconst CombineShader = {\n  uniforms: {\n    tDiffuse: {\n      value: null\n    },\n    strength: {\n      value: 1\n    }\n  },\n  vertexShader: (\n    /* glsl */\n    `\n  varying vec2 vUv;\n  void main() {\n    vUv = uv;\n    gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n  }`\n  ),\n  fragmentShader: (\n    /* glsl */\n    `\n  uniform float strength;\n  uniform sampler2D tDiffuse;\n  varying vec2 vUv;\n  void main() {\n    vec4 texel = texture2D( tDiffuse, vUv );\n    gl_FragColor = strength * texel;\n  }`\n  )\n};\nexport {\n  BloomPass\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}