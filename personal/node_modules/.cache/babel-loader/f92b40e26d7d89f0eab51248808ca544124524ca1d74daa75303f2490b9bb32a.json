{"ast":null,"code":"import { Vector3, Line3, Plane, Mesh } from \"three\";\nimport { ConvexGeometry } from \"../geometries/ConvexGeometry.js\";\nconst _v1 = /* @__PURE__ */new Vector3();\nclass ConvexObjectBreaker {\n  constructor() {\n    let minSizeForBreak = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1.4;\n    let smallDelta = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1e-4;\n    this.minSizeForBreak = minSizeForBreak;\n    this.smallDelta = smallDelta;\n    this.tempLine1 = new Line3();\n    this.tempPlane1 = new Plane();\n    this.tempPlane2 = new Plane();\n    this.tempPlane_Cut = new Plane();\n    this.tempCM1 = new Vector3();\n    this.tempCM2 = new Vector3();\n    this.tempVector3 = new Vector3();\n    this.tempVector3_2 = new Vector3();\n    this.tempVector3_3 = new Vector3();\n    this.tempVector3_P0 = new Vector3();\n    this.tempVector3_P1 = new Vector3();\n    this.tempVector3_P2 = new Vector3();\n    this.tempVector3_N0 = new Vector3();\n    this.tempVector3_N1 = new Vector3();\n    this.tempVector3_AB = new Vector3();\n    this.tempVector3_CB = new Vector3();\n    this.tempResultObjects = {\n      object1: null,\n      object2: null\n    };\n    this.segments = [];\n    const n = 30 * 30;\n    for (let i = 0; i < n; i++) this.segments[i] = false;\n  }\n  prepareBreakableObject(object, mass, velocity, angularVelocity, breakable) {\n    const userData = object.userData;\n    userData.mass = mass;\n    userData.velocity = velocity.clone();\n    userData.angularVelocity = angularVelocity.clone();\n    userData.breakable = breakable;\n  }\n  /*\n   * @param {int} maxRadialIterations Iterations for radial cuts.\n   * @param {int} maxRandomIterations Max random iterations for not-radial cuts\n   *\n   * Returns the array of pieces\n   */\n  subdivideByImpact(object, pointOfImpact, normal, maxRadialIterations, maxRandomIterations) {\n    const debris = [];\n    const tempPlane1 = this.tempPlane1;\n    const tempPlane2 = this.tempPlane2;\n    this.tempVector3.addVectors(pointOfImpact, normal);\n    tempPlane1.setFromCoplanarPoints(pointOfImpact, object.position, this.tempVector3);\n    const maxTotalIterations = maxRandomIterations + maxRadialIterations;\n    const scope = this;\n    function subdivideRadial(subObject, startAngle, endAngle, numIterations) {\n      if (Math.random() < numIterations * 0.05 || numIterations > maxTotalIterations) {\n        debris.push(subObject);\n        return;\n      }\n      let angle = Math.PI;\n      if (numIterations === 0) {\n        tempPlane2.normal.copy(tempPlane1.normal);\n        tempPlane2.constant = tempPlane1.constant;\n      } else {\n        if (numIterations <= maxRadialIterations) {\n          angle = (endAngle - startAngle) * (0.2 + 0.6 * Math.random()) + startAngle;\n          scope.tempVector3_2.copy(object.position).sub(pointOfImpact).applyAxisAngle(normal, angle).add(pointOfImpact);\n          tempPlane2.setFromCoplanarPoints(pointOfImpact, scope.tempVector3, scope.tempVector3_2);\n        } else {\n          angle = (0.5 * (numIterations & 1) + 0.2 * (2 - Math.random())) * Math.PI;\n          scope.tempVector3_2.copy(pointOfImpact).sub(subObject.position).applyAxisAngle(normal, angle).add(subObject.position);\n          scope.tempVector3_3.copy(normal).add(subObject.position);\n          tempPlane2.setFromCoplanarPoints(subObject.position, scope.tempVector3_3, scope.tempVector3_2);\n        }\n      }\n      scope.cutByPlane(subObject, tempPlane2, scope.tempResultObjects);\n      const obj1 = scope.tempResultObjects.object1;\n      const obj2 = scope.tempResultObjects.object2;\n      if (obj1) {\n        subdivideRadial(obj1, startAngle, angle, numIterations + 1);\n      }\n      if (obj2) {\n        subdivideRadial(obj2, angle, endAngle, numIterations + 1);\n      }\n    }\n    subdivideRadial(object, 0, 2 * Math.PI, 0);\n    return debris;\n  }\n  cutByPlane(object, plane, output) {\n    const geometry = object.geometry;\n    const coords = geometry.attributes.position.array;\n    const normals = geometry.attributes.normal.array;\n    const numPoints = coords.length / 3;\n    let numFaces = numPoints / 3;\n    let indices = geometry.getIndex();\n    if (indices) {\n      indices = indices.array;\n      numFaces = indices.length / 3;\n    }\n    function getVertexIndex(faceIdx, vert) {\n      const idx = faceIdx * 3 + vert;\n      return indices ? indices[idx] : idx;\n    }\n    const points1 = [];\n    const points2 = [];\n    const delta = this.smallDelta;\n    const numPointPairs = numPoints * numPoints;\n    for (let i = 0; i < numPointPairs; i++) this.segments[i] = false;\n    const p0 = this.tempVector3_P0;\n    const p1 = this.tempVector3_P1;\n    const n0 = this.tempVector3_N0;\n    const n1 = this.tempVector3_N1;\n    for (let i = 0; i < numFaces - 1; i++) {\n      const a1 = getVertexIndex(i, 0);\n      const b1 = getVertexIndex(i, 1);\n      const c1 = getVertexIndex(i, 2);\n      n0.set(normals[a1], normals[a1] + 1, normals[a1] + 2);\n      for (let j = i + 1; j < numFaces; j++) {\n        const a2 = getVertexIndex(j, 0);\n        const b2 = getVertexIndex(j, 1);\n        const c2 = getVertexIndex(j, 2);\n        n1.set(normals[a2], normals[a2] + 1, normals[a2] + 2);\n        const coplanar = 1 - n0.dot(n1) < delta;\n        if (coplanar) {\n          if (a1 === a2 || a1 === b2 || a1 === c2) {\n            if (b1 === a2 || b1 === b2 || b1 === c2) {\n              this.segments[a1 * numPoints + b1] = true;\n              this.segments[b1 * numPoints + a1] = true;\n            } else {\n              this.segments[c1 * numPoints + a1] = true;\n              this.segments[a1 * numPoints + c1] = true;\n            }\n          } else if (b1 === a2 || b1 === b2 || b1 === c2) {\n            this.segments[c1 * numPoints + b1] = true;\n            this.segments[b1 * numPoints + c1] = true;\n          }\n        }\n      }\n    }\n    const localPlane = this.tempPlane_Cut;\n    object.updateMatrix();\n    ConvexObjectBreaker.transformPlaneToLocalSpace(plane, object.matrix, localPlane);\n    for (let i = 0; i < numFaces; i++) {\n      const va = getVertexIndex(i, 0);\n      const vb = getVertexIndex(i, 1);\n      const vc = getVertexIndex(i, 2);\n      for (let segment = 0; segment < 3; segment++) {\n        const i0 = segment === 0 ? va : segment === 1 ? vb : vc;\n        const i1 = segment === 0 ? vb : segment === 1 ? vc : va;\n        const segmentState = this.segments[i0 * numPoints + i1];\n        if (segmentState) continue;\n        this.segments[i0 * numPoints + i1] = true;\n        this.segments[i1 * numPoints + i0] = true;\n        p0.set(coords[3 * i0], coords[3 * i0 + 1], coords[3 * i0 + 2]);\n        p1.set(coords[3 * i1], coords[3 * i1 + 1], coords[3 * i1 + 2]);\n        let mark0 = 0;\n        let d = localPlane.distanceToPoint(p0);\n        if (d > delta) {\n          mark0 = 2;\n          points2.push(p0.clone());\n        } else if (d < -delta) {\n          mark0 = 1;\n          points1.push(p0.clone());\n        } else {\n          mark0 = 3;\n          points1.push(p0.clone());\n          points2.push(p0.clone());\n        }\n        let mark1 = 0;\n        d = localPlane.distanceToPoint(p1);\n        if (d > delta) {\n          mark1 = 2;\n          points2.push(p1.clone());\n        } else if (d < -delta) {\n          mark1 = 1;\n          points1.push(p1.clone());\n        } else {\n          mark1 = 3;\n          points1.push(p1.clone());\n          points2.push(p1.clone());\n        }\n        if (mark0 === 1 && mark1 === 2 || mark0 === 2 && mark1 === 1) {\n          this.tempLine1.start.copy(p0);\n          this.tempLine1.end.copy(p1);\n          let intersection = new Vector3();\n          intersection = localPlane.intersectLine(this.tempLine1, intersection);\n          if (intersection === null) {\n            console.error(\"Internal error: segment does not intersect plane.\");\n            output.segmentedObject1 = null;\n            output.segmentedObject2 = null;\n            return 0;\n          }\n          points1.push(intersection);\n          points2.push(intersection.clone());\n        }\n      }\n    }\n    const newMass = object.userData.mass * 0.5;\n    this.tempCM1.set(0, 0, 0);\n    let radius1 = 0;\n    const numPoints1 = points1.length;\n    if (numPoints1 > 0) {\n      for (let i = 0; i < numPoints1; i++) this.tempCM1.add(points1[i]);\n      this.tempCM1.divideScalar(numPoints1);\n      for (let i = 0; i < numPoints1; i++) {\n        const p = points1[i];\n        p.sub(this.tempCM1);\n        radius1 = Math.max(radius1, p.x, p.y, p.z);\n      }\n      this.tempCM1.add(object.position);\n    }\n    this.tempCM2.set(0, 0, 0);\n    let radius2 = 0;\n    const numPoints2 = points2.length;\n    if (numPoints2 > 0) {\n      for (let i = 0; i < numPoints2; i++) this.tempCM2.add(points2[i]);\n      this.tempCM2.divideScalar(numPoints2);\n      for (let i = 0; i < numPoints2; i++) {\n        const p = points2[i];\n        p.sub(this.tempCM2);\n        radius2 = Math.max(radius2, p.x, p.y, p.z);\n      }\n      this.tempCM2.add(object.position);\n    }\n    let object1 = null;\n    let object2 = null;\n    let numObjects = 0;\n    if (numPoints1 > 4) {\n      object1 = new Mesh(new ConvexGeometry(points1), object.material);\n      object1.position.copy(this.tempCM1);\n      object1.quaternion.copy(object.quaternion);\n      this.prepareBreakableObject(object1, newMass, object.userData.velocity, object.userData.angularVelocity, 2 * radius1 > this.minSizeForBreak);\n      numObjects++;\n    }\n    if (numPoints2 > 4) {\n      object2 = new Mesh(new ConvexGeometry(points2), object.material);\n      object2.position.copy(this.tempCM2);\n      object2.quaternion.copy(object.quaternion);\n      this.prepareBreakableObject(object2, newMass, object.userData.velocity, object.userData.angularVelocity, 2 * radius2 > this.minSizeForBreak);\n      numObjects++;\n    }\n    output.object1 = object1;\n    output.object2 = object2;\n    return numObjects;\n  }\n  static transformFreeVector(v, m) {\n    const x = v.x,\n      y = v.y,\n      z = v.z;\n    const e = m.elements;\n    v.x = e[0] * x + e[4] * y + e[8] * z;\n    v.y = e[1] * x + e[5] * y + e[9] * z;\n    v.z = e[2] * x + e[6] * y + e[10] * z;\n    return v;\n  }\n  static transformFreeVectorInverse(v, m) {\n    const x = v.x,\n      y = v.y,\n      z = v.z;\n    const e = m.elements;\n    v.x = e[0] * x + e[1] * y + e[2] * z;\n    v.y = e[4] * x + e[5] * y + e[6] * z;\n    v.z = e[8] * x + e[9] * y + e[10] * z;\n    return v;\n  }\n  static transformTiedVectorInverse(v, m) {\n    const x = v.x,\n      y = v.y,\n      z = v.z;\n    const e = m.elements;\n    v.x = e[0] * x + e[1] * y + e[2] * z - e[12];\n    v.y = e[4] * x + e[5] * y + e[6] * z - e[13];\n    v.z = e[8] * x + e[9] * y + e[10] * z - e[14];\n    return v;\n  }\n  static transformPlaneToLocalSpace(plane, m, resultPlane) {\n    resultPlane.normal.copy(plane.normal);\n    resultPlane.constant = plane.constant;\n    const referencePoint = ConvexObjectBreaker.transformTiedVectorInverse(plane.coplanarPoint(_v1), m);\n    ConvexObjectBreaker.transformFreeVectorInverse(resultPlane.normal, m);\n    resultPlane.constant = -referencePoint.dot(resultPlane.normal);\n  }\n}\nexport { ConvexObjectBreaker };","map":{"version":3,"names":["Vector3","Line3","Plane","Mesh","ConvexGeometry","_v1","ConvexObjectBreaker","constructor","minSizeForBreak","arguments","length","undefined","smallDelta","tempLine1","tempPlane1","tempPlane2","tempPlane_Cut","tempCM1","tempCM2","tempVector3","tempVector3_2","tempVector3_3","tempVector3_P0","tempVector3_P1","tempVector3_P2","tempVector3_N0","tempVector3_N1","tempVector3_AB","tempVector3_CB","tempResultObjects","object1","object2","segments","n","i","prepareBreakableObject","object","mass","velocity","angularVelocity","breakable","userData","clone","subdivideByImpact","pointOfImpact","normal","maxRadialIterations","maxRandomIterations","debris","addVectors","setFromCoplanarPoints","position","maxTotalIterations","scope","subdivideRadial","subObject","startAngle","endAngle","numIterations","Math","random","push","angle","PI","copy","constant","sub","applyAxisAngle","add","cutByPlane","obj1","obj2","plane","output","geometry","coords","attributes","array","normals","numPoints","numFaces","indices","getIndex","getVertexIndex","faceIdx","vert","idx","points1","points2","delta","numPointPairs","p0","p1","n0","n1","a1","b1","c1","set","j","a2","b2","c2","coplanar","dot","localPlane","updateMatrix","transformPlaneToLocalSpace","matrix","va","vb","vc","segment","i0","i1","segmentState","mark0","d","distanceToPoint","mark1","start","end","intersection","intersectLine","console","error","segmentedObject1","segmentedObject2","newMass","radius1","numPoints1","divideScalar","p","max","x","y","z","radius2","numPoints2","numObjects","material","quaternion","transformFreeVector","v","m","e","elements","transformFreeVectorInverse","transformTiedVectorInverse","resultPlane","referencePoint","coplanarPoint"],"sources":["/home/krug/Coding/JavaScript/Websites/Personal/personal/node_modules/.pnpm/three-stdlib@2.23.7_three@0.151.3/node_modules/three-stdlib/misc/ConvexObjectBreaker.js"],"sourcesContent":["import { Vector3, Line3, Plane, Mesh } from \"three\";\nimport { ConvexGeometry } from \"../geometries/ConvexGeometry.js\";\nconst _v1 = /* @__PURE__ */ new Vector3();\nclass ConvexObjectBreaker {\n  constructor(minSizeForBreak = 1.4, smallDelta = 1e-4) {\n    this.minSizeForBreak = minSizeForBreak;\n    this.smallDelta = smallDelta;\n    this.tempLine1 = new Line3();\n    this.tempPlane1 = new Plane();\n    this.tempPlane2 = new Plane();\n    this.tempPlane_Cut = new Plane();\n    this.tempCM1 = new Vector3();\n    this.tempCM2 = new Vector3();\n    this.tempVector3 = new Vector3();\n    this.tempVector3_2 = new Vector3();\n    this.tempVector3_3 = new Vector3();\n    this.tempVector3_P0 = new Vector3();\n    this.tempVector3_P1 = new Vector3();\n    this.tempVector3_P2 = new Vector3();\n    this.tempVector3_N0 = new Vector3();\n    this.tempVector3_N1 = new Vector3();\n    this.tempVector3_AB = new Vector3();\n    this.tempVector3_CB = new Vector3();\n    this.tempResultObjects = { object1: null, object2: null };\n    this.segments = [];\n    const n = 30 * 30;\n    for (let i = 0; i < n; i++)\n      this.segments[i] = false;\n  }\n  prepareBreakableObject(object, mass, velocity, angularVelocity, breakable) {\n    const userData = object.userData;\n    userData.mass = mass;\n    userData.velocity = velocity.clone();\n    userData.angularVelocity = angularVelocity.clone();\n    userData.breakable = breakable;\n  }\n  /*\n   * @param {int} maxRadialIterations Iterations for radial cuts.\n   * @param {int} maxRandomIterations Max random iterations for not-radial cuts\n   *\n   * Returns the array of pieces\n   */\n  subdivideByImpact(object, pointOfImpact, normal, maxRadialIterations, maxRandomIterations) {\n    const debris = [];\n    const tempPlane1 = this.tempPlane1;\n    const tempPlane2 = this.tempPlane2;\n    this.tempVector3.addVectors(pointOfImpact, normal);\n    tempPlane1.setFromCoplanarPoints(pointOfImpact, object.position, this.tempVector3);\n    const maxTotalIterations = maxRandomIterations + maxRadialIterations;\n    const scope = this;\n    function subdivideRadial(subObject, startAngle, endAngle, numIterations) {\n      if (Math.random() < numIterations * 0.05 || numIterations > maxTotalIterations) {\n        debris.push(subObject);\n        return;\n      }\n      let angle = Math.PI;\n      if (numIterations === 0) {\n        tempPlane2.normal.copy(tempPlane1.normal);\n        tempPlane2.constant = tempPlane1.constant;\n      } else {\n        if (numIterations <= maxRadialIterations) {\n          angle = (endAngle - startAngle) * (0.2 + 0.6 * Math.random()) + startAngle;\n          scope.tempVector3_2.copy(object.position).sub(pointOfImpact).applyAxisAngle(normal, angle).add(pointOfImpact);\n          tempPlane2.setFromCoplanarPoints(pointOfImpact, scope.tempVector3, scope.tempVector3_2);\n        } else {\n          angle = (0.5 * (numIterations & 1) + 0.2 * (2 - Math.random())) * Math.PI;\n          scope.tempVector3_2.copy(pointOfImpact).sub(subObject.position).applyAxisAngle(normal, angle).add(subObject.position);\n          scope.tempVector3_3.copy(normal).add(subObject.position);\n          tempPlane2.setFromCoplanarPoints(subObject.position, scope.tempVector3_3, scope.tempVector3_2);\n        }\n      }\n      scope.cutByPlane(subObject, tempPlane2, scope.tempResultObjects);\n      const obj1 = scope.tempResultObjects.object1;\n      const obj2 = scope.tempResultObjects.object2;\n      if (obj1) {\n        subdivideRadial(obj1, startAngle, angle, numIterations + 1);\n      }\n      if (obj2) {\n        subdivideRadial(obj2, angle, endAngle, numIterations + 1);\n      }\n    }\n    subdivideRadial(object, 0, 2 * Math.PI, 0);\n    return debris;\n  }\n  cutByPlane(object, plane, output) {\n    const geometry = object.geometry;\n    const coords = geometry.attributes.position.array;\n    const normals = geometry.attributes.normal.array;\n    const numPoints = coords.length / 3;\n    let numFaces = numPoints / 3;\n    let indices = geometry.getIndex();\n    if (indices) {\n      indices = indices.array;\n      numFaces = indices.length / 3;\n    }\n    function getVertexIndex(faceIdx, vert) {\n      const idx = faceIdx * 3 + vert;\n      return indices ? indices[idx] : idx;\n    }\n    const points1 = [];\n    const points2 = [];\n    const delta = this.smallDelta;\n    const numPointPairs = numPoints * numPoints;\n    for (let i = 0; i < numPointPairs; i++)\n      this.segments[i] = false;\n    const p0 = this.tempVector3_P0;\n    const p1 = this.tempVector3_P1;\n    const n0 = this.tempVector3_N0;\n    const n1 = this.tempVector3_N1;\n    for (let i = 0; i < numFaces - 1; i++) {\n      const a1 = getVertexIndex(i, 0);\n      const b1 = getVertexIndex(i, 1);\n      const c1 = getVertexIndex(i, 2);\n      n0.set(normals[a1], normals[a1] + 1, normals[a1] + 2);\n      for (let j = i + 1; j < numFaces; j++) {\n        const a2 = getVertexIndex(j, 0);\n        const b2 = getVertexIndex(j, 1);\n        const c2 = getVertexIndex(j, 2);\n        n1.set(normals[a2], normals[a2] + 1, normals[a2] + 2);\n        const coplanar = 1 - n0.dot(n1) < delta;\n        if (coplanar) {\n          if (a1 === a2 || a1 === b2 || a1 === c2) {\n            if (b1 === a2 || b1 === b2 || b1 === c2) {\n              this.segments[a1 * numPoints + b1] = true;\n              this.segments[b1 * numPoints + a1] = true;\n            } else {\n              this.segments[c1 * numPoints + a1] = true;\n              this.segments[a1 * numPoints + c1] = true;\n            }\n          } else if (b1 === a2 || b1 === b2 || b1 === c2) {\n            this.segments[c1 * numPoints + b1] = true;\n            this.segments[b1 * numPoints + c1] = true;\n          }\n        }\n      }\n    }\n    const localPlane = this.tempPlane_Cut;\n    object.updateMatrix();\n    ConvexObjectBreaker.transformPlaneToLocalSpace(plane, object.matrix, localPlane);\n    for (let i = 0; i < numFaces; i++) {\n      const va = getVertexIndex(i, 0);\n      const vb = getVertexIndex(i, 1);\n      const vc = getVertexIndex(i, 2);\n      for (let segment = 0; segment < 3; segment++) {\n        const i0 = segment === 0 ? va : segment === 1 ? vb : vc;\n        const i1 = segment === 0 ? vb : segment === 1 ? vc : va;\n        const segmentState = this.segments[i0 * numPoints + i1];\n        if (segmentState)\n          continue;\n        this.segments[i0 * numPoints + i1] = true;\n        this.segments[i1 * numPoints + i0] = true;\n        p0.set(coords[3 * i0], coords[3 * i0 + 1], coords[3 * i0 + 2]);\n        p1.set(coords[3 * i1], coords[3 * i1 + 1], coords[3 * i1 + 2]);\n        let mark0 = 0;\n        let d = localPlane.distanceToPoint(p0);\n        if (d > delta) {\n          mark0 = 2;\n          points2.push(p0.clone());\n        } else if (d < -delta) {\n          mark0 = 1;\n          points1.push(p0.clone());\n        } else {\n          mark0 = 3;\n          points1.push(p0.clone());\n          points2.push(p0.clone());\n        }\n        let mark1 = 0;\n        d = localPlane.distanceToPoint(p1);\n        if (d > delta) {\n          mark1 = 2;\n          points2.push(p1.clone());\n        } else if (d < -delta) {\n          mark1 = 1;\n          points1.push(p1.clone());\n        } else {\n          mark1 = 3;\n          points1.push(p1.clone());\n          points2.push(p1.clone());\n        }\n        if (mark0 === 1 && mark1 === 2 || mark0 === 2 && mark1 === 1) {\n          this.tempLine1.start.copy(p0);\n          this.tempLine1.end.copy(p1);\n          let intersection = new Vector3();\n          intersection = localPlane.intersectLine(this.tempLine1, intersection);\n          if (intersection === null) {\n            console.error(\"Internal error: segment does not intersect plane.\");\n            output.segmentedObject1 = null;\n            output.segmentedObject2 = null;\n            return 0;\n          }\n          points1.push(intersection);\n          points2.push(intersection.clone());\n        }\n      }\n    }\n    const newMass = object.userData.mass * 0.5;\n    this.tempCM1.set(0, 0, 0);\n    let radius1 = 0;\n    const numPoints1 = points1.length;\n    if (numPoints1 > 0) {\n      for (let i = 0; i < numPoints1; i++)\n        this.tempCM1.add(points1[i]);\n      this.tempCM1.divideScalar(numPoints1);\n      for (let i = 0; i < numPoints1; i++) {\n        const p = points1[i];\n        p.sub(this.tempCM1);\n        radius1 = Math.max(radius1, p.x, p.y, p.z);\n      }\n      this.tempCM1.add(object.position);\n    }\n    this.tempCM2.set(0, 0, 0);\n    let radius2 = 0;\n    const numPoints2 = points2.length;\n    if (numPoints2 > 0) {\n      for (let i = 0; i < numPoints2; i++)\n        this.tempCM2.add(points2[i]);\n      this.tempCM2.divideScalar(numPoints2);\n      for (let i = 0; i < numPoints2; i++) {\n        const p = points2[i];\n        p.sub(this.tempCM2);\n        radius2 = Math.max(radius2, p.x, p.y, p.z);\n      }\n      this.tempCM2.add(object.position);\n    }\n    let object1 = null;\n    let object2 = null;\n    let numObjects = 0;\n    if (numPoints1 > 4) {\n      object1 = new Mesh(new ConvexGeometry(points1), object.material);\n      object1.position.copy(this.tempCM1);\n      object1.quaternion.copy(object.quaternion);\n      this.prepareBreakableObject(\n        object1,\n        newMass,\n        object.userData.velocity,\n        object.userData.angularVelocity,\n        2 * radius1 > this.minSizeForBreak\n      );\n      numObjects++;\n    }\n    if (numPoints2 > 4) {\n      object2 = new Mesh(new ConvexGeometry(points2), object.material);\n      object2.position.copy(this.tempCM2);\n      object2.quaternion.copy(object.quaternion);\n      this.prepareBreakableObject(\n        object2,\n        newMass,\n        object.userData.velocity,\n        object.userData.angularVelocity,\n        2 * radius2 > this.minSizeForBreak\n      );\n      numObjects++;\n    }\n    output.object1 = object1;\n    output.object2 = object2;\n    return numObjects;\n  }\n  static transformFreeVector(v, m) {\n    const x = v.x, y = v.y, z = v.z;\n    const e = m.elements;\n    v.x = e[0] * x + e[4] * y + e[8] * z;\n    v.y = e[1] * x + e[5] * y + e[9] * z;\n    v.z = e[2] * x + e[6] * y + e[10] * z;\n    return v;\n  }\n  static transformFreeVectorInverse(v, m) {\n    const x = v.x, y = v.y, z = v.z;\n    const e = m.elements;\n    v.x = e[0] * x + e[1] * y + e[2] * z;\n    v.y = e[4] * x + e[5] * y + e[6] * z;\n    v.z = e[8] * x + e[9] * y + e[10] * z;\n    return v;\n  }\n  static transformTiedVectorInverse(v, m) {\n    const x = v.x, y = v.y, z = v.z;\n    const e = m.elements;\n    v.x = e[0] * x + e[1] * y + e[2] * z - e[12];\n    v.y = e[4] * x + e[5] * y + e[6] * z - e[13];\n    v.z = e[8] * x + e[9] * y + e[10] * z - e[14];\n    return v;\n  }\n  static transformPlaneToLocalSpace(plane, m, resultPlane) {\n    resultPlane.normal.copy(plane.normal);\n    resultPlane.constant = plane.constant;\n    const referencePoint = ConvexObjectBreaker.transformTiedVectorInverse(plane.coplanarPoint(_v1), m);\n    ConvexObjectBreaker.transformFreeVectorInverse(resultPlane.normal, m);\n    resultPlane.constant = -referencePoint.dot(resultPlane.normal);\n  }\n}\nexport {\n  ConvexObjectBreaker\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}