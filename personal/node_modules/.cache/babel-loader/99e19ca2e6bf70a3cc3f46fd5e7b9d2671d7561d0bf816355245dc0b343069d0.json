{"ast":null,"code":"var HueSaturationShader = {\n  uniforms: {\n    tDiffuse: {\n      value: null\n    },\n    hue: {\n      value: 0\n    },\n    saturation: {\n      value: 0\n    }\n  },\n  vertexShader: [\"varying vec2 vUv;\", \"void main() {\", \"\tvUv = uv;\", \"\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\", \"}\"].join(\"\\n\"),\n  fragmentShader: [\"uniform sampler2D tDiffuse;\", \"uniform float hue;\", \"uniform float saturation;\", \"varying vec2 vUv;\", \"void main() {\", \"\tgl_FragColor = texture2D( tDiffuse, vUv );\",\n  // hue\n  \"\tfloat angle = hue * 3.14159265;\", \"\tfloat s = sin(angle), c = cos(angle);\", \"\tvec3 weights = (vec3(2.0 * c, -sqrt(3.0) * s - c, sqrt(3.0) * s - c) + 1.0) / 3.0;\", \"\tfloat len = length(gl_FragColor.rgb);\", \"\tgl_FragColor.rgb = vec3(\", \"\t\tdot(gl_FragColor.rgb, weights.xyz),\", \"\t\tdot(gl_FragColor.rgb, weights.zxy),\", \"\t\tdot(gl_FragColor.rgb, weights.yzx)\", \"\t);\",\n  // saturation\n  \"\tfloat average = (gl_FragColor.r + gl_FragColor.g + gl_FragColor.b) / 3.0;\", \"\tif (saturation > 0.0) {\", \"\t\tgl_FragColor.rgb += (average - gl_FragColor.rgb) * (1.0 - 1.0 / (1.001 - saturation));\", \"\t} else {\", \"\t\tgl_FragColor.rgb += (average - gl_FragColor.rgb) * (-saturation);\", \"\t}\", \"}\"].join(\"\\n\")\n};\nexport { HueSaturationShader };","map":{"version":3,"names":["HueSaturationShader","uniforms","tDiffuse","value","hue","saturation","vertexShader","join","fragmentShader"],"sources":["/home/krug/Coding/JavaScript/Websites/Personal/personal/node_modules/.pnpm/three-stdlib@2.23.7_three@0.151.3/node_modules/three-stdlib/shaders/HueSaturationShader.js"],"sourcesContent":["const HueSaturationShader = {\n  uniforms: {\n    tDiffuse: { value: null },\n    hue: { value: 0 },\n    saturation: { value: 0 }\n  },\n  vertexShader: [\n    \"varying vec2 vUv;\",\n    \"void main() {\",\n    \"\tvUv = uv;\",\n    \"\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\",\n    \"}\"\n  ].join(\"\\n\"),\n  fragmentShader: [\n    \"uniform sampler2D tDiffuse;\",\n    \"uniform float hue;\",\n    \"uniform float saturation;\",\n    \"varying vec2 vUv;\",\n    \"void main() {\",\n    \"\tgl_FragColor = texture2D( tDiffuse, vUv );\",\n    // hue\n    \"\tfloat angle = hue * 3.14159265;\",\n    \"\tfloat s = sin(angle), c = cos(angle);\",\n    \"\tvec3 weights = (vec3(2.0 * c, -sqrt(3.0) * s - c, sqrt(3.0) * s - c) + 1.0) / 3.0;\",\n    \"\tfloat len = length(gl_FragColor.rgb);\",\n    \"\tgl_FragColor.rgb = vec3(\",\n    \"\t\tdot(gl_FragColor.rgb, weights.xyz),\",\n    \"\t\tdot(gl_FragColor.rgb, weights.zxy),\",\n    \"\t\tdot(gl_FragColor.rgb, weights.yzx)\",\n    \"\t);\",\n    // saturation\n    \"\tfloat average = (gl_FragColor.r + gl_FragColor.g + gl_FragColor.b) / 3.0;\",\n    \"\tif (saturation > 0.0) {\",\n    \"\t\tgl_FragColor.rgb += (average - gl_FragColor.rgb) * (1.0 - 1.0 / (1.001 - saturation));\",\n    \"\t} else {\",\n    \"\t\tgl_FragColor.rgb += (average - gl_FragColor.rgb) * (-saturation);\",\n    \"\t}\",\n    \"}\"\n  ].join(\"\\n\")\n};\nexport {\n  HueSaturationShader\n};\n"],"mappings":"AAAA,IAAMA,mBAAmB,GAAG;EAC1BC,QAAQ,EAAE;IACRC,QAAQ,EAAE;MAAEC,KAAK,EAAE;IAAK,CAAC;IACzBC,GAAG,EAAE;MAAED,KAAK,EAAE;IAAE,CAAC;IACjBE,UAAU,EAAE;MAAEF,KAAK,EAAE;IAAE;EACzB,CAAC;EACDG,YAAY,EAAE,CACZ,mBAAmB,EACnB,eAAe,EACf,YAAY,EACZ,4EAA4E,EAC5E,GAAG,CACJ,CAACC,IAAI,CAAC,IAAI,CAAC;EACZC,cAAc,EAAE,CACd,6BAA6B,EAC7B,oBAAoB,EACpB,2BAA2B,EAC3B,mBAAmB,EACnB,eAAe,EACf,6CAA6C;EAC7C;EACA,kCAAkC,EAClC,wCAAwC,EACxC,qFAAqF,EACrF,wCAAwC,EACxC,2BAA2B,EAC3B,uCAAuC,EACvC,uCAAuC,EACvC,sCAAsC,EACtC,KAAK;EACL;EACA,4EAA4E,EAC5E,0BAA0B,EAC1B,0FAA0F,EAC1F,WAAW,EACX,qEAAqE,EACrE,IAAI,EACJ,GAAG,CACJ,CAACD,IAAI,CAAC,IAAI;AACb,CAAC;AACD,SACEP,mBAAmB"},"metadata":{},"sourceType":"module","externalDependencies":[]}