{"ast":null,"code":"import { createError } from '../errors.js';\nexport function prioritizeTokenScores(arrays, boost) {\n  let threshold = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;\n  if (boost === 0) {\n    throw createError('INVALID_BOOST_VALUE');\n  }\n  const tokenMap = {};\n  const mapsLength = arrays.length;\n  for (let i = 0; i < mapsLength; i++) {\n    const arr = arrays[i];\n    const entriesLength = arr.length;\n    for (let j = 0; j < entriesLength; j++) {\n      const [token, score] = arr[j];\n      const boostScore = score * boost;\n      if (token in tokenMap) {\n        tokenMap[token] *= 1.5 + boostScore;\n      } else {\n        tokenMap[token] = boostScore;\n      }\n    }\n  }\n  const results = Object.entries(tokenMap).sort((a, b) => b[1] - a[1]);\n  // If threshold is 1, it means we will return all the results with at least one search term,\n  // prioritizig the ones that contains more search terms (fuzzy match)\n  if (threshold === 1) {\n    return results;\n  }\n  // If threshold is 0, it means we will only return all the results that contains ALL the search terms (exact match)\n  if (threshold === 0) {\n    const shortestArrayLength = Math.min(...arrays.map(arr => arr.length));\n    return results.slice(0, shortestArrayLength);\n  }\n  // If the theshold is between 0 and 1, we will return all the results that contains at least the threshold of search terms\n  // For example, if threshold is 0.5, we will return all the results that contains at least 50% of the search terms\n  // (fuzzy match with a minimum threshold)\n  const thresholdLength = Math.ceil(threshold * 100 * results.length / 100);\n  return results.slice(0, results.length + thresholdLength);\n}\nexport function BM25(tf, matchingCount, docsCount, fieldLength, averageFieldLength, BM25Params) {\n  const {\n    k,\n    b,\n    d\n  } = BM25Params;\n  const idf = Math.log(1 + (docsCount - matchingCount + 0.5) / (matchingCount + 0.5));\n  return idf * (d + tf * (k + 1)) / (tf + k * (1 - b + b * fieldLength / averageFieldLength));\n}","map":{"version":3,"names":["createError","prioritizeTokenScores","arrays","boost","threshold","arguments","length","undefined","tokenMap","mapsLength","i","arr","entriesLength","j","token","score","boostScore","results","Object","entries","sort","a","b","shortestArrayLength","Math","min","map","slice","thresholdLength","ceil","BM25","tf","matchingCount","docsCount","fieldLength","averageFieldLength","BM25Params","k","d","idf","log"],"sources":["/home/krug/Coding/JavaScript/Websites/Personal/personal/node_modules/.pnpm/@orama+orama@1.0.3/node_modules/@orama/orama/src/components/algorithms.ts"],"sourcesContent":["import { createError } from '../errors.js'\nimport { TokenScore, BM25Params } from '../types.js'\n\nexport function prioritizeTokenScores(arrays: TokenScore[][], boost: number, threshold = 1): TokenScore[] {\n  if (boost === 0) {\n    throw createError('INVALID_BOOST_VALUE')\n  }\n\n  const tokenMap: Record<string, number> = {}\n\n  const mapsLength = arrays.length\n  for (let i = 0; i < mapsLength; i++) {\n    const arr = arrays[i]\n\n    const entriesLength = arr.length\n    for (let j = 0; j < entriesLength; j++) {\n      const [token, score] = arr[j]\n      const boostScore = score * boost\n\n      if (token in tokenMap) {\n        tokenMap[token] *= 1.5 + boostScore\n      } else {\n        tokenMap[token] = boostScore\n      }\n    }\n  }\n\n  const results = Object.entries(tokenMap).sort((a, b) => b[1] - a[1])\n\n  // If threshold is 1, it means we will return all the results with at least one search term,\n  // prioritizig the ones that contains more search terms (fuzzy match)\n  if (threshold === 1) {\n    return results\n  }\n\n  // If threshold is 0, it means we will only return all the results that contains ALL the search terms (exact match)\n  if (threshold === 0) {\n    const shortestArrayLength = Math.min(...arrays.map(arr => arr.length))\n    return results.slice(0, shortestArrayLength)\n  }\n\n  // If the theshold is between 0 and 1, we will return all the results that contains at least the threshold of search terms\n  // For example, if threshold is 0.5, we will return all the results that contains at least 50% of the search terms\n  // (fuzzy match with a minimum threshold)\n  const thresholdLength = Math.ceil((threshold * 100 * results.length) / 100)\n\n  return results.slice(0, results.length + thresholdLength)\n}\n\nexport function BM25(\n  tf: number,\n  matchingCount: number,\n  docsCount: number,\n  fieldLength: number,\n  averageFieldLength: number,\n  BM25Params: Required<BM25Params>,\n) {\n  const { k, b, d } = BM25Params\n  const idf = Math.log(1 + (docsCount - matchingCount + 0.5) / (matchingCount + 0.5))\n  return (idf * (d + tf * (k + 1))) / (tf + k * (1 - b + (b * fieldLength) / averageFieldLength))\n}\n"],"mappings":"AAAA,SAASA,WAAW,QAAQ;AAG5B,OAAO,SAASC,sBAAsBC,MAAsB,EAAEC,KAAa,EAA+B;EAAA,IAA7BC,SAAA,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAY,CAAC;EACxF,IAAIF,KAAA,KAAU,GAAG;IACf,MAAMH,WAAA,CAAY;EACpB;EAEA,MAAMQ,QAAA,GAAmC,CAAC;EAE1C,MAAMC,UAAA,GAAaP,MAAA,CAAOI,MAAM;EAChC,KAAK,IAAII,CAAA,GAAI,GAAGA,CAAA,GAAID,UAAA,EAAYC,CAAA,IAAK;IACnC,MAAMC,GAAA,GAAMT,MAAM,CAACQ,CAAA,CAAE;IAErB,MAAME,aAAA,GAAgBD,GAAA,CAAIL,MAAM;IAChC,KAAK,IAAIO,CAAA,GAAI,GAAGA,CAAA,GAAID,aAAA,EAAeC,CAAA,IAAK;MACtC,MAAM,CAACC,KAAA,EAAOC,KAAA,CAAM,GAAGJ,GAAG,CAACE,CAAA,CAAE;MAC7B,MAAMG,UAAA,GAAaD,KAAA,GAAQZ,KAAA;MAE3B,IAAIW,KAAA,IAASN,QAAA,EAAU;QACrBA,QAAQ,CAACM,KAAA,CAAM,IAAI,MAAME,UAAA;MAC3B,OAAO;QACLR,QAAQ,CAACM,KAAA,CAAM,GAAGE,UAAA;MACpB;IACF;EACF;EAEA,MAAMC,OAAA,GAAUC,MAAA,CAAOC,OAAO,CAACX,QAAA,EAAUY,IAAI,CAAC,CAACC,CAAA,EAAGC,CAAA,KAAMA,CAAC,CAAC,EAAE,GAAGD,CAAC,CAAC,EAAE;EAEnE;EACA;EACA,IAAIjB,SAAA,KAAc,GAAG;IACnB,OAAOa,OAAA;EACT;EAEA;EACA,IAAIb,SAAA,KAAc,GAAG;IACnB,MAAMmB,mBAAA,GAAsBC,IAAA,CAAKC,GAAG,IAAIvB,MAAA,CAAOwB,GAAG,CAACf,GAAA,IAAOA,GAAA,CAAIL,MAAM;IACpE,OAAOW,OAAA,CAAQU,KAAK,CAAC,GAAGJ,mBAAA;EAC1B;EAEA;EACA;EACA;EACA,MAAMK,eAAA,GAAkBJ,IAAA,CAAKK,IAAI,CAACzB,SAAC,GAAY,MAAMa,OAAA,CAAQX,MAAM,GAAI;EAEvE,OAAOW,OAAA,CAAQU,KAAK,CAAC,GAAGV,OAAA,CAAQX,MAAM,GAAGsB,eAAA;AAC3C;AAEA,OAAO,SAASE,KACdC,EAAU,EACVC,aAAqB,EACrBC,SAAiB,EACjBC,WAAmB,EACnBC,kBAA0B,EAC1BC,UAAgC,EAChC;EACA,MAAM;IAAEC,CAAA;IAAGf,CAAA;IAAGgB;EAAC,CAAE,GAAGF,UAAA;EACpB,MAAMG,GAAA,GAAMf,IAAA,CAAKgB,GAAG,CAAC,IAAI,CAACP,SAAA,GAAYD,aAAA,GAAgB,GAAE,KAAMA,aAAA,GAAgB,GAAE;EAChF,OAAOO,GAAC,IAAOD,CAAA,GAAIP,EAAA,IAAMM,CAAA,GAAI,EAAC,KAAON,EAAA,GAAKM,CAAA,IAAK,IAAIf,CAAA,GAAIA,CAAC,GAAIY,WAAA,GAAeC,kBAAiB,CAAC;AAC/F"},"metadata":{},"sourceType":"module","externalDependencies":[]}