{"ast":null,"code":"import _classCallCheck from \"/home/krug/Coding/JavaScript/Websites/Personal/personal/node_modules/.pnpm/@babel+runtime@7.22.3/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/home/krug/Coding/JavaScript/Websites/Personal/personal/node_modules/.pnpm/@babel+runtime@7.22.3/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"/home/krug/Coding/JavaScript/Websites/Personal/personal/node_modules/.pnpm/@babel+runtime@7.22.3/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/home/krug/Coding/JavaScript/Websites/Personal/personal/node_modules/.pnpm/@babel+runtime@7.22.3/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { Loader, LoaderUtils, FileLoader, Group, MeshPhongMaterial, DoubleSide, AdditiveBlending, BufferGeometry, Mesh, Float32BufferAttribute, Matrix4, TextureLoader, Color } from \"three\";\nvar TDSLoader = /*#__PURE__*/function (_Loader) {\n  _inherits(TDSLoader, _Loader);\n  var _super = _createSuper(TDSLoader);\n  function TDSLoader(manager) {\n    var _this;\n    _classCallCheck(this, TDSLoader);\n    _this = _super.call(this, manager);\n    _this.debug = false;\n    _this.group = null;\n    _this.position = 0;\n    _this.materials = [];\n    _this.meshes = [];\n    return _this;\n  }\n  /**\n   * Load 3ds file from url.\n   *\n   * @method load\n   * @param {[type]} url URL for the file.\n   * @param {Function} onLoad onLoad callback, receives group Object3D as argument.\n   * @param {Function} onProgress onProgress callback.\n   * @param {Function} onError onError callback.\n   */\n  _createClass(TDSLoader, [{\n    key: \"load\",\n    value: function load(url, onLoad, onProgress, onError) {\n      var scope = this;\n      var path = this.path === \"\" ? LoaderUtils.extractUrlBase(url) : this.path;\n      var loader = new FileLoader(this.manager);\n      loader.setPath(this.path);\n      loader.setResponseType(\"arraybuffer\");\n      loader.setRequestHeader(this.requestHeader);\n      loader.setWithCredentials(this.withCredentials);\n      loader.load(url, function (data) {\n        try {\n          onLoad(scope.parse(data, path));\n        } catch (e) {\n          if (onError) {\n            onError(e);\n          } else {\n            console.error(e);\n          }\n          scope.manager.itemError(url);\n        }\n      }, onProgress, onError);\n    }\n    /**\n     * Parse arraybuffer data and load 3ds file.\n     *\n     * @method parse\n     * @param {ArrayBuffer} arraybuffer Arraybuffer data to be loaded.\n     * @param {String} path Path for external resources.\n     * @return {Group} Group loaded from 3ds file.\n     */\n  }, {\n    key: \"parse\",\n    value: function parse(arraybuffer, path) {\n      this.group = new Group();\n      this.position = 0;\n      this.materials = [];\n      this.meshes = [];\n      this.readFile(arraybuffer, path);\n      for (var i = 0; i < this.meshes.length; i++) {\n        this.group.add(this.meshes[i]);\n      }\n      return this.group;\n    }\n    /**\n     * Decode file content to read 3ds data.\n     *\n     * @method readFile\n     * @param {ArrayBuffer} arraybuffer Arraybuffer data to be loaded.\n     * @param {String} path Path for external resources.\n     */\n  }, {\n    key: \"readFile\",\n    value: function readFile(arraybuffer, path) {\n      var data = new DataView(arraybuffer);\n      var chunk = this.readChunk(data);\n      if (chunk.id === MLIBMAGIC || chunk.id === CMAGIC || chunk.id === M3DMAGIC) {\n        var next = this.nextChunk(data, chunk);\n        while (next !== 0) {\n          if (next === M3D_VERSION) {\n            var version = this.readDWord(data);\n            this.debugMessage(\"3DS file version: \" + version);\n          } else if (next === MDATA) {\n            this.resetPosition(data);\n            this.readMeshData(data, path);\n          } else {\n            this.debugMessage(\"Unknown main chunk: \" + next.toString(16));\n          }\n          next = this.nextChunk(data, chunk);\n        }\n      }\n      this.debugMessage(\"Parsed \" + this.meshes.length + \" meshes\");\n    }\n    /**\n     * Read mesh data chunk.\n     *\n     * @method readMeshData\n     * @param {Dataview} data Dataview in use.\n     * @param {String} path Path for external resources.\n     */\n  }, {\n    key: \"readMeshData\",\n    value: function readMeshData(data, path) {\n      var chunk = this.readChunk(data);\n      var next = this.nextChunk(data, chunk);\n      while (next !== 0) {\n        if (next === MESH_VERSION) {\n          var version = +this.readDWord(data);\n          this.debugMessage(\"Mesh Version: \" + version);\n        } else if (next === MASTER_SCALE) {\n          var scale = this.readFloat(data);\n          this.debugMessage(\"Master scale: \" + scale);\n          this.group.scale.set(scale, scale, scale);\n        } else if (next === NAMED_OBJECT) {\n          this.debugMessage(\"Named Object\");\n          this.resetPosition(data);\n          this.readNamedObject(data);\n        } else if (next === MAT_ENTRY) {\n          this.debugMessage(\"Material\");\n          this.resetPosition(data);\n          this.readMaterialEntry(data, path);\n        } else {\n          this.debugMessage(\"Unknown MDATA chunk: \" + next.toString(16));\n        }\n        next = this.nextChunk(data, chunk);\n      }\n    }\n    /**\n     * Read named object chunk.\n     *\n     * @method readNamedObject\n     * @param {Dataview} data Dataview in use.\n     */\n  }, {\n    key: \"readNamedObject\",\n    value: function readNamedObject(data) {\n      var chunk = this.readChunk(data);\n      var name = this.readString(data, 64);\n      chunk.cur = this.position;\n      var next = this.nextChunk(data, chunk);\n      while (next !== 0) {\n        if (next === N_TRI_OBJECT) {\n          this.resetPosition(data);\n          var mesh = this.readMesh(data);\n          mesh.name = name;\n          this.meshes.push(mesh);\n        } else {\n          this.debugMessage(\"Unknown named object chunk: \" + next.toString(16));\n        }\n        next = this.nextChunk(data, chunk);\n      }\n      this.endChunk(chunk);\n    }\n    /**\n     * Read material data chunk and add it to the material list.\n     *\n     * @method readMaterialEntry\n     * @param {Dataview} data Dataview in use.\n     * @param {String} path Path for external resources.\n     */\n  }, {\n    key: \"readMaterialEntry\",\n    value: function readMaterialEntry(data, path) {\n      var chunk = this.readChunk(data);\n      var next = this.nextChunk(data, chunk);\n      var material = new MeshPhongMaterial();\n      while (next !== 0) {\n        if (next === MAT_NAME) {\n          material.name = this.readString(data, 64);\n          this.debugMessage(\"   Name: \" + material.name);\n        } else if (next === MAT_WIRE) {\n          this.debugMessage(\"   Wireframe\");\n          material.wireframe = true;\n        } else if (next === MAT_WIRE_SIZE) {\n          var value = this.readByte(data);\n          material.wireframeLinewidth = value;\n          this.debugMessage(\"   Wireframe Thickness: \" + value);\n        } else if (next === MAT_TWO_SIDE) {\n          material.side = DoubleSide;\n          this.debugMessage(\"   DoubleSided\");\n        } else if (next === MAT_ADDITIVE) {\n          this.debugMessage(\"   Additive Blending\");\n          material.blending = AdditiveBlending;\n        } else if (next === MAT_DIFFUSE) {\n          this.debugMessage(\"   Diffuse Color\");\n          material.color = this.readColor(data);\n        } else if (next === MAT_SPECULAR) {\n          this.debugMessage(\"   Specular Color\");\n          material.specular = this.readColor(data);\n        } else if (next === MAT_AMBIENT) {\n          this.debugMessage(\"   Ambient color\");\n          material.color = this.readColor(data);\n        } else if (next === MAT_SHININESS) {\n          var shininess = this.readPercentage(data);\n          material.shininess = shininess * 100;\n          this.debugMessage(\"   Shininess : \" + shininess);\n        } else if (next === MAT_TRANSPARENCY) {\n          var transparency = this.readPercentage(data);\n          material.opacity = 1 - transparency;\n          this.debugMessage(\"  Transparency : \" + transparency);\n          material.transparent = material.opacity < 1 ? true : false;\n        } else if (next === MAT_TEXMAP) {\n          this.debugMessage(\"   ColorMap\");\n          this.resetPosition(data);\n          material.map = this.readMap(data, path);\n        } else if (next === MAT_BUMPMAP) {\n          this.debugMessage(\"   BumpMap\");\n          this.resetPosition(data);\n          material.bumpMap = this.readMap(data, path);\n        } else if (next === MAT_OPACMAP) {\n          this.debugMessage(\"   OpacityMap\");\n          this.resetPosition(data);\n          material.alphaMap = this.readMap(data, path);\n        } else if (next === MAT_SPECMAP) {\n          this.debugMessage(\"   SpecularMap\");\n          this.resetPosition(data);\n          material.specularMap = this.readMap(data, path);\n        } else {\n          this.debugMessage(\"   Unknown material chunk: \" + next.toString(16));\n        }\n        next = this.nextChunk(data, chunk);\n      }\n      this.endChunk(chunk);\n      this.materials[material.name] = material;\n    }\n    /**\n     * Read mesh data chunk.\n     *\n     * @method readMesh\n     * @param {Dataview} data Dataview in use.\n     * @return {Mesh} The parsed mesh.\n     */\n  }, {\n    key: \"readMesh\",\n    value: function readMesh(data) {\n      var chunk = this.readChunk(data);\n      var next = this.nextChunk(data, chunk);\n      var geometry = new BufferGeometry();\n      var material = new MeshPhongMaterial();\n      var mesh = new Mesh(geometry, material);\n      mesh.name = \"mesh\";\n      while (next !== 0) {\n        if (next === POINT_ARRAY) {\n          var points = this.readWord(data);\n          this.debugMessage(\"   Vertex: \" + points);\n          var vertices = [];\n          for (var i = 0; i < points; i++) {\n            vertices.push(this.readFloat(data));\n            vertices.push(this.readFloat(data));\n            vertices.push(this.readFloat(data));\n          }\n          geometry.setAttribute(\"position\", new Float32BufferAttribute(vertices, 3));\n        } else if (next === FACE_ARRAY) {\n          this.resetPosition(data);\n          this.readFaceArray(data, mesh);\n        } else if (next === TEX_VERTS) {\n          var texels = this.readWord(data);\n          this.debugMessage(\"   UV: \" + texels);\n          var uvs = [];\n          for (var _i = 0; _i < texels; _i++) {\n            uvs.push(this.readFloat(data));\n            uvs.push(this.readFloat(data));\n          }\n          geometry.setAttribute(\"uv\", new Float32BufferAttribute(uvs, 2));\n        } else if (next === MESH_MATRIX) {\n          this.debugMessage(\"   Tranformation Matrix (TODO)\");\n          var values = [];\n          for (var _i2 = 0; _i2 < 12; _i2++) {\n            values[_i2] = this.readFloat(data);\n          }\n          var matrix = new Matrix4();\n          matrix.elements[0] = values[0];\n          matrix.elements[1] = values[6];\n          matrix.elements[2] = values[3];\n          matrix.elements[3] = values[9];\n          matrix.elements[4] = values[2];\n          matrix.elements[5] = values[8];\n          matrix.elements[6] = values[5];\n          matrix.elements[7] = values[11];\n          matrix.elements[8] = values[1];\n          matrix.elements[9] = values[7];\n          matrix.elements[10] = values[4];\n          matrix.elements[11] = values[10];\n          matrix.elements[12] = 0;\n          matrix.elements[13] = 0;\n          matrix.elements[14] = 0;\n          matrix.elements[15] = 1;\n          matrix.transpose();\n          var inverse = new Matrix4();\n          inverse.copy(matrix).invert();\n          geometry.applyMatrix4(inverse);\n          matrix.decompose(mesh.position, mesh.quaternion, mesh.scale);\n        } else {\n          this.debugMessage(\"   Unknown mesh chunk: \" + next.toString(16));\n        }\n        next = this.nextChunk(data, chunk);\n      }\n      this.endChunk(chunk);\n      geometry.computeVertexNormals();\n      return mesh;\n    }\n    /**\n     * Read face array data chunk.\n     *\n     * @method readFaceArray\n     * @param {Dataview} data Dataview in use.\n     * @param {Mesh} mesh Mesh to be filled with the data read.\n     */\n  }, {\n    key: \"readFaceArray\",\n    value: function readFaceArray(data, mesh) {\n      var chunk = this.readChunk(data);\n      var faces = this.readWord(data);\n      this.debugMessage(\"   Faces: \" + faces);\n      var index = [];\n      for (var i = 0; i < faces; ++i) {\n        index.push(this.readWord(data), this.readWord(data), this.readWord(data));\n        this.readWord(data);\n      }\n      mesh.geometry.setIndex(index);\n      var materialIndex = 0;\n      var start = 0;\n      while (this.position < chunk.end) {\n        var subchunk = this.readChunk(data);\n        if (subchunk.id === MSH_MAT_GROUP) {\n          this.debugMessage(\"      Material Group\");\n          this.resetPosition(data);\n          var group = this.readMaterialGroup(data);\n          var count = group.index.length * 3;\n          mesh.geometry.addGroup(start, count, materialIndex);\n          start += count;\n          materialIndex++;\n          var material = this.materials[group.name];\n          if (Array.isArray(mesh.material) === false) mesh.material = [];\n          if (material !== void 0) {\n            mesh.material.push(material);\n          }\n        } else {\n          this.debugMessage(\"      Unknown face array chunk: \" + subchunk.toString(16));\n        }\n        this.endChunk(subchunk);\n      }\n      if (mesh.material.length === 1) mesh.material = mesh.material[0];\n      this.endChunk(chunk);\n    }\n    /**\n     * Read texture map data chunk.\n     *\n     * @method readMap\n     * @param {Dataview} data Dataview in use.\n     * @param {String} path Path for external resources.\n     * @return {Texture} Texture read from this data chunk.\n     */\n  }, {\n    key: \"readMap\",\n    value: function readMap(data, path) {\n      var chunk = this.readChunk(data);\n      var next = this.nextChunk(data, chunk);\n      var texture = {};\n      var loader = new TextureLoader(this.manager);\n      loader.setPath(this.resourcePath || path).setCrossOrigin(this.crossOrigin);\n      while (next !== 0) {\n        if (next === MAT_MAPNAME) {\n          var name = this.readString(data, 128);\n          texture = loader.load(name);\n          this.debugMessage(\"      File: \" + path + name);\n        } else if (next === MAT_MAP_UOFFSET) {\n          texture.offset.x = this.readFloat(data);\n          this.debugMessage(\"      OffsetX: \" + texture.offset.x);\n        } else if (next === MAT_MAP_VOFFSET) {\n          texture.offset.y = this.readFloat(data);\n          this.debugMessage(\"      OffsetY: \" + texture.offset.y);\n        } else if (next === MAT_MAP_USCALE) {\n          texture.repeat.x = this.readFloat(data);\n          this.debugMessage(\"      RepeatX: \" + texture.repeat.x);\n        } else if (next === MAT_MAP_VSCALE) {\n          texture.repeat.y = this.readFloat(data);\n          this.debugMessage(\"      RepeatY: \" + texture.repeat.y);\n        } else {\n          this.debugMessage(\"      Unknown map chunk: \" + next.toString(16));\n        }\n        next = this.nextChunk(data, chunk);\n      }\n      this.endChunk(chunk);\n      return texture;\n    }\n    /**\n     * Read material group data chunk.\n     *\n     * @method readMaterialGroup\n     * @param {Dataview} data Dataview in use.\n     * @return {Object} Object with name and index of the object.\n     */\n  }, {\n    key: \"readMaterialGroup\",\n    value: function readMaterialGroup(data) {\n      this.readChunk(data);\n      var name = this.readString(data, 64);\n      var numFaces = this.readWord(data);\n      this.debugMessage(\"         Name: \" + name);\n      this.debugMessage(\"         Faces: \" + numFaces);\n      var index = [];\n      for (var i = 0; i < numFaces; ++i) {\n        index.push(this.readWord(data));\n      }\n      return {\n        name: name,\n        index: index\n      };\n    }\n    /**\n     * Read a color value.\n     *\n     * @method readColor\n     * @param {DataView} data Dataview.\n     * @return {Color} Color value read..\n     */\n  }, {\n    key: \"readColor\",\n    value: function readColor(data) {\n      var chunk = this.readChunk(data);\n      var color = new Color();\n      if (chunk.id === COLOR_24 || chunk.id === LIN_COLOR_24) {\n        var r = this.readByte(data);\n        var g = this.readByte(data);\n        var b = this.readByte(data);\n        color.setRGB(r / 255, g / 255, b / 255);\n        this.debugMessage(\"      Color: \" + color.r + \", \" + color.g + \", \" + color.b);\n      } else if (chunk.id === COLOR_F || chunk.id === LIN_COLOR_F) {\n        var _r = this.readFloat(data);\n        var _g = this.readFloat(data);\n        var _b = this.readFloat(data);\n        color.setRGB(_r, _g, _b);\n        this.debugMessage(\"      Color: \" + color.r + \", \" + color.g + \", \" + color.b);\n      } else {\n        this.debugMessage(\"      Unknown color chunk: \" + chunk.toString(16));\n      }\n      this.endChunk(chunk);\n      return color;\n    }\n    /**\n     * Read next chunk of data.\n     *\n     * @method readChunk\n     * @param {DataView} data Dataview.\n     * @return {Object} Chunk of data read.\n     */\n  }, {\n    key: \"readChunk\",\n    value: function readChunk(data) {\n      var chunk = {};\n      chunk.cur = this.position;\n      chunk.id = this.readWord(data);\n      chunk.size = this.readDWord(data);\n      chunk.end = chunk.cur + chunk.size;\n      chunk.cur += 6;\n      return chunk;\n    }\n    /**\n     * Set position to the end of the current chunk of data.\n     *\n     * @method endChunk\n     * @param {Object} chunk Data chunk.\n     */\n  }, {\n    key: \"endChunk\",\n    value: function endChunk(chunk) {\n      this.position = chunk.end;\n    }\n    /**\n     * Move to the next data chunk.\n     *\n     * @method nextChunk\n     * @param {DataView} data Dataview.\n     * @param {Object} chunk Data chunk.\n     */\n  }, {\n    key: \"nextChunk\",\n    value: function nextChunk(data, chunk) {\n      if (chunk.cur >= chunk.end) {\n        return 0;\n      }\n      this.position = chunk.cur;\n      try {\n        var next = this.readChunk(data);\n        chunk.cur += next.size;\n        return next.id;\n      } catch (e) {\n        this.debugMessage(\"Unable to read chunk at \" + this.position);\n        return 0;\n      }\n    }\n    /**\n     * Reset dataview position.\n     *\n     * @method resetPosition\n     */\n  }, {\n    key: \"resetPosition\",\n    value: function resetPosition() {\n      this.position -= 6;\n    }\n    /**\n     * Read byte value.\n     *\n     * @method readByte\n     * @param {DataView} data Dataview to read data from.\n     * @return {Number} Data read from the dataview.\n     */\n  }, {\n    key: \"readByte\",\n    value: function readByte(data) {\n      var v = data.getUint8(this.position, true);\n      this.position += 1;\n      return v;\n    }\n    /**\n     * Read 32 bit float value.\n     *\n     * @method readFloat\n     * @param {DataView} data Dataview to read data from.\n     * @return {Number} Data read from the dataview.\n     */\n  }, {\n    key: \"readFloat\",\n    value: function readFloat(data) {\n      try {\n        var v = data.getFloat32(this.position, true);\n        this.position += 4;\n        return v;\n      } catch (e) {\n        this.debugMessage(e + \" \" + this.position + \" \" + data.byteLength);\n      }\n    }\n    /**\n     * Read 32 bit signed integer value.\n     *\n     * @method readInt\n     * @param {DataView} data Dataview to read data from.\n     * @return {Number} Data read from the dataview.\n     */\n  }, {\n    key: \"readInt\",\n    value: function readInt(data) {\n      var v = data.getInt32(this.position, true);\n      this.position += 4;\n      return v;\n    }\n    /**\n     * Read 16 bit signed integer value.\n     *\n     * @method readShort\n     * @param {DataView} data Dataview to read data from.\n     * @return {Number} Data read from the dataview.\n     */\n  }, {\n    key: \"readShort\",\n    value: function readShort(data) {\n      var v = data.getInt16(this.position, true);\n      this.position += 2;\n      return v;\n    }\n    /**\n     * Read 64 bit unsigned integer value.\n     *\n     * @method readDWord\n     * @param {DataView} data Dataview to read data from.\n     * @return {Number} Data read from the dataview.\n     */\n  }, {\n    key: \"readDWord\",\n    value: function readDWord(data) {\n      var v = data.getUint32(this.position, true);\n      this.position += 4;\n      return v;\n    }\n    /**\n     * Read 32 bit unsigned integer value.\n     *\n     * @method readWord\n     * @param {DataView} data Dataview to read data from.\n     * @return {Number} Data read from the dataview.\n     */\n  }, {\n    key: \"readWord\",\n    value: function readWord(data) {\n      var v = data.getUint16(this.position, true);\n      this.position += 2;\n      return v;\n    }\n    /**\n     * Read string value.\n     *\n     * @method readString\n     * @param {DataView} data Dataview to read data from.\n     * @param {Number} maxLength Max size of the string to be read.\n     * @return {String} Data read from the dataview.\n     */\n  }, {\n    key: \"readString\",\n    value: function readString(data, maxLength) {\n      var s = \"\";\n      for (var i = 0; i < maxLength; i++) {\n        var c = this.readByte(data);\n        if (!c) {\n          break;\n        }\n        s += String.fromCharCode(c);\n      }\n      return s;\n    }\n    /**\n     * Read percentage value.\n     *\n     * @method readPercentage\n     * @param {DataView} data Dataview to read data from.\n     * @return {Number} Data read from the dataview.\n     */\n  }, {\n    key: \"readPercentage\",\n    value: function readPercentage(data) {\n      var chunk = this.readChunk(data);\n      var value;\n      switch (chunk.id) {\n        case INT_PERCENTAGE:\n          value = this.readShort(data) / 100;\n          break;\n        case FLOAT_PERCENTAGE:\n          value = this.readFloat(data);\n          break;\n        default:\n          this.debugMessage(\"      Unknown percentage chunk: \" + chunk.toString(16));\n      }\n      this.endChunk(chunk);\n      return value;\n    }\n    /**\n     * Print debug message to the console.\n     *\n     * Is controlled by a flag to show or hide debug messages.\n     *\n     * @method debugMessage\n     * @param {Object} message Debug message to print to the console.\n     */\n  }, {\n    key: \"debugMessage\",\n    value: function debugMessage(message) {\n      if (this.debug) {\n        console.log(message);\n      }\n    }\n  }]);\n  return TDSLoader;\n}(Loader);\nvar M3DMAGIC = 19789;\nvar MLIBMAGIC = 15786;\nvar CMAGIC = 49725;\nvar M3D_VERSION = 2;\nvar COLOR_F = 16;\nvar COLOR_24 = 17;\nvar LIN_COLOR_24 = 18;\nvar LIN_COLOR_F = 19;\nvar INT_PERCENTAGE = 48;\nvar FLOAT_PERCENTAGE = 49;\nvar MDATA = 15677;\nvar MESH_VERSION = 15678;\nvar MASTER_SCALE = 256;\nvar MAT_ENTRY = 45055;\nvar MAT_NAME = 40960;\nvar MAT_AMBIENT = 40976;\nvar MAT_DIFFUSE = 40992;\nvar MAT_SPECULAR = 41008;\nvar MAT_SHININESS = 41024;\nvar MAT_TRANSPARENCY = 41040;\nvar MAT_TWO_SIDE = 41089;\nvar MAT_ADDITIVE = 41091;\nvar MAT_WIRE = 41093;\nvar MAT_WIRE_SIZE = 41095;\nvar MAT_TEXMAP = 41472;\nvar MAT_OPACMAP = 41488;\nvar MAT_BUMPMAP = 41520;\nvar MAT_SPECMAP = 41476;\nvar MAT_MAPNAME = 41728;\nvar MAT_MAP_USCALE = 41812;\nvar MAT_MAP_VSCALE = 41814;\nvar MAT_MAP_UOFFSET = 41816;\nvar MAT_MAP_VOFFSET = 41818;\nvar NAMED_OBJECT = 16384;\nvar N_TRI_OBJECT = 16640;\nvar POINT_ARRAY = 16656;\nvar FACE_ARRAY = 16672;\nvar MSH_MAT_GROUP = 16688;\nvar TEX_VERTS = 16704;\nvar MESH_MATRIX = 16736;\nexport { TDSLoader };","map":{"version":3,"names":["Loader","LoaderUtils","FileLoader","Group","MeshPhongMaterial","DoubleSide","AdditiveBlending","BufferGeometry","Mesh","Float32BufferAttribute","Matrix4","TextureLoader","Color","TDSLoader","_Loader","_inherits","_super","_createSuper","manager","_this","_classCallCheck","call","debug","group","position","materials","meshes","_createClass","key","value","load","url","onLoad","onProgress","onError","scope","path","extractUrlBase","loader","setPath","setResponseType","setRequestHeader","requestHeader","setWithCredentials","withCredentials","data","parse","e","console","error","itemError","arraybuffer","readFile","i","length","add","DataView","chunk","readChunk","id","MLIBMAGIC","CMAGIC","M3DMAGIC","next","nextChunk","M3D_VERSION","version","readDWord","debugMessage","MDATA","resetPosition","readMeshData","toString","MESH_VERSION","MASTER_SCALE","scale","readFloat","set","NAMED_OBJECT","readNamedObject","MAT_ENTRY","readMaterialEntry","name","readString","cur","N_TRI_OBJECT","mesh","readMesh","push","endChunk","material","MAT_NAME","MAT_WIRE","wireframe","MAT_WIRE_SIZE","readByte","wireframeLinewidth","MAT_TWO_SIDE","side","MAT_ADDITIVE","blending","MAT_DIFFUSE","color","readColor","MAT_SPECULAR","specular","MAT_AMBIENT","MAT_SHININESS","shininess","readPercentage","MAT_TRANSPARENCY","transparency","opacity","transparent","MAT_TEXMAP","map","readMap","MAT_BUMPMAP","bumpMap","MAT_OPACMAP","alphaMap","MAT_SPECMAP","specularMap","geometry","POINT_ARRAY","points","readWord","vertices","setAttribute","FACE_ARRAY","readFaceArray","TEX_VERTS","texels","uvs","MESH_MATRIX","values","matrix","elements","transpose","inverse","copy","invert","applyMatrix4","decompose","quaternion","computeVertexNormals","faces","index","setIndex","materialIndex","start","end","subchunk","MSH_MAT_GROUP","readMaterialGroup","count","addGroup","Array","isArray","texture","resourcePath","setCrossOrigin","crossOrigin","MAT_MAPNAME","MAT_MAP_UOFFSET","offset","x","MAT_MAP_VOFFSET","y","MAT_MAP_USCALE","repeat","MAT_MAP_VSCALE","numFaces","COLOR_24","LIN_COLOR_24","r","g","b","setRGB","COLOR_F","LIN_COLOR_F","size","v","getUint8","getFloat32","byteLength","readInt","getInt32","readShort","getInt16","getUint32","getUint16","maxLength","s","c","String","fromCharCode","INT_PERCENTAGE","FLOAT_PERCENTAGE","message","log"],"sources":["/home/krug/Coding/JavaScript/Websites/Personal/personal/node_modules/.pnpm/three-stdlib@2.23.7_three@0.151.3/node_modules/three-stdlib/loaders/TDSLoader.js"],"sourcesContent":["import { Loader, LoaderUtils, FileLoader, Group, MeshPhongMaterial, DoubleSide, AdditiveBlending, BufferGeometry, Mesh, Float32BufferAttribute, Matrix4, TextureLoader, Color } from \"three\";\nclass TDSLoader extends Loader {\n  constructor(manager) {\n    super(manager);\n    this.debug = false;\n    this.group = null;\n    this.position = 0;\n    this.materials = [];\n    this.meshes = [];\n  }\n  /**\n   * Load 3ds file from url.\n   *\n   * @method load\n   * @param {[type]} url URL for the file.\n   * @param {Function} onLoad onLoad callback, receives group Object3D as argument.\n   * @param {Function} onProgress onProgress callback.\n   * @param {Function} onError onError callback.\n   */\n  load(url, onLoad, onProgress, onError) {\n    const scope = this;\n    const path = this.path === \"\" ? LoaderUtils.extractUrlBase(url) : this.path;\n    const loader = new FileLoader(this.manager);\n    loader.setPath(this.path);\n    loader.setResponseType(\"arraybuffer\");\n    loader.setRequestHeader(this.requestHeader);\n    loader.setWithCredentials(this.withCredentials);\n    loader.load(\n      url,\n      function(data) {\n        try {\n          onLoad(scope.parse(data, path));\n        } catch (e) {\n          if (onError) {\n            onError(e);\n          } else {\n            console.error(e);\n          }\n          scope.manager.itemError(url);\n        }\n      },\n      onProgress,\n      onError\n    );\n  }\n  /**\n   * Parse arraybuffer data and load 3ds file.\n   *\n   * @method parse\n   * @param {ArrayBuffer} arraybuffer Arraybuffer data to be loaded.\n   * @param {String} path Path for external resources.\n   * @return {Group} Group loaded from 3ds file.\n   */\n  parse(arraybuffer, path) {\n    this.group = new Group();\n    this.position = 0;\n    this.materials = [];\n    this.meshes = [];\n    this.readFile(arraybuffer, path);\n    for (let i = 0; i < this.meshes.length; i++) {\n      this.group.add(this.meshes[i]);\n    }\n    return this.group;\n  }\n  /**\n   * Decode file content to read 3ds data.\n   *\n   * @method readFile\n   * @param {ArrayBuffer} arraybuffer Arraybuffer data to be loaded.\n   * @param {String} path Path for external resources.\n   */\n  readFile(arraybuffer, path) {\n    const data = new DataView(arraybuffer);\n    const chunk = this.readChunk(data);\n    if (chunk.id === MLIBMAGIC || chunk.id === CMAGIC || chunk.id === M3DMAGIC) {\n      let next = this.nextChunk(data, chunk);\n      while (next !== 0) {\n        if (next === M3D_VERSION) {\n          const version = this.readDWord(data);\n          this.debugMessage(\"3DS file version: \" + version);\n        } else if (next === MDATA) {\n          this.resetPosition(data);\n          this.readMeshData(data, path);\n        } else {\n          this.debugMessage(\"Unknown main chunk: \" + next.toString(16));\n        }\n        next = this.nextChunk(data, chunk);\n      }\n    }\n    this.debugMessage(\"Parsed \" + this.meshes.length + \" meshes\");\n  }\n  /**\n   * Read mesh data chunk.\n   *\n   * @method readMeshData\n   * @param {Dataview} data Dataview in use.\n   * @param {String} path Path for external resources.\n   */\n  readMeshData(data, path) {\n    const chunk = this.readChunk(data);\n    let next = this.nextChunk(data, chunk);\n    while (next !== 0) {\n      if (next === MESH_VERSION) {\n        const version = +this.readDWord(data);\n        this.debugMessage(\"Mesh Version: \" + version);\n      } else if (next === MASTER_SCALE) {\n        const scale = this.readFloat(data);\n        this.debugMessage(\"Master scale: \" + scale);\n        this.group.scale.set(scale, scale, scale);\n      } else if (next === NAMED_OBJECT) {\n        this.debugMessage(\"Named Object\");\n        this.resetPosition(data);\n        this.readNamedObject(data);\n      } else if (next === MAT_ENTRY) {\n        this.debugMessage(\"Material\");\n        this.resetPosition(data);\n        this.readMaterialEntry(data, path);\n      } else {\n        this.debugMessage(\"Unknown MDATA chunk: \" + next.toString(16));\n      }\n      next = this.nextChunk(data, chunk);\n    }\n  }\n  /**\n   * Read named object chunk.\n   *\n   * @method readNamedObject\n   * @param {Dataview} data Dataview in use.\n   */\n  readNamedObject(data) {\n    const chunk = this.readChunk(data);\n    const name = this.readString(data, 64);\n    chunk.cur = this.position;\n    let next = this.nextChunk(data, chunk);\n    while (next !== 0) {\n      if (next === N_TRI_OBJECT) {\n        this.resetPosition(data);\n        const mesh = this.readMesh(data);\n        mesh.name = name;\n        this.meshes.push(mesh);\n      } else {\n        this.debugMessage(\"Unknown named object chunk: \" + next.toString(16));\n      }\n      next = this.nextChunk(data, chunk);\n    }\n    this.endChunk(chunk);\n  }\n  /**\n   * Read material data chunk and add it to the material list.\n   *\n   * @method readMaterialEntry\n   * @param {Dataview} data Dataview in use.\n   * @param {String} path Path for external resources.\n   */\n  readMaterialEntry(data, path) {\n    const chunk = this.readChunk(data);\n    let next = this.nextChunk(data, chunk);\n    const material = new MeshPhongMaterial();\n    while (next !== 0) {\n      if (next === MAT_NAME) {\n        material.name = this.readString(data, 64);\n        this.debugMessage(\"   Name: \" + material.name);\n      } else if (next === MAT_WIRE) {\n        this.debugMessage(\"   Wireframe\");\n        material.wireframe = true;\n      } else if (next === MAT_WIRE_SIZE) {\n        const value = this.readByte(data);\n        material.wireframeLinewidth = value;\n        this.debugMessage(\"   Wireframe Thickness: \" + value);\n      } else if (next === MAT_TWO_SIDE) {\n        material.side = DoubleSide;\n        this.debugMessage(\"   DoubleSided\");\n      } else if (next === MAT_ADDITIVE) {\n        this.debugMessage(\"   Additive Blending\");\n        material.blending = AdditiveBlending;\n      } else if (next === MAT_DIFFUSE) {\n        this.debugMessage(\"   Diffuse Color\");\n        material.color = this.readColor(data);\n      } else if (next === MAT_SPECULAR) {\n        this.debugMessage(\"   Specular Color\");\n        material.specular = this.readColor(data);\n      } else if (next === MAT_AMBIENT) {\n        this.debugMessage(\"   Ambient color\");\n        material.color = this.readColor(data);\n      } else if (next === MAT_SHININESS) {\n        const shininess = this.readPercentage(data);\n        material.shininess = shininess * 100;\n        this.debugMessage(\"   Shininess : \" + shininess);\n      } else if (next === MAT_TRANSPARENCY) {\n        const transparency = this.readPercentage(data);\n        material.opacity = 1 - transparency;\n        this.debugMessage(\"  Transparency : \" + transparency);\n        material.transparent = material.opacity < 1 ? true : false;\n      } else if (next === MAT_TEXMAP) {\n        this.debugMessage(\"   ColorMap\");\n        this.resetPosition(data);\n        material.map = this.readMap(data, path);\n      } else if (next === MAT_BUMPMAP) {\n        this.debugMessage(\"   BumpMap\");\n        this.resetPosition(data);\n        material.bumpMap = this.readMap(data, path);\n      } else if (next === MAT_OPACMAP) {\n        this.debugMessage(\"   OpacityMap\");\n        this.resetPosition(data);\n        material.alphaMap = this.readMap(data, path);\n      } else if (next === MAT_SPECMAP) {\n        this.debugMessage(\"   SpecularMap\");\n        this.resetPosition(data);\n        material.specularMap = this.readMap(data, path);\n      } else {\n        this.debugMessage(\"   Unknown material chunk: \" + next.toString(16));\n      }\n      next = this.nextChunk(data, chunk);\n    }\n    this.endChunk(chunk);\n    this.materials[material.name] = material;\n  }\n  /**\n   * Read mesh data chunk.\n   *\n   * @method readMesh\n   * @param {Dataview} data Dataview in use.\n   * @return {Mesh} The parsed mesh.\n   */\n  readMesh(data) {\n    const chunk = this.readChunk(data);\n    let next = this.nextChunk(data, chunk);\n    const geometry = new BufferGeometry();\n    const material = new MeshPhongMaterial();\n    const mesh = new Mesh(geometry, material);\n    mesh.name = \"mesh\";\n    while (next !== 0) {\n      if (next === POINT_ARRAY) {\n        const points = this.readWord(data);\n        this.debugMessage(\"   Vertex: \" + points);\n        const vertices = [];\n        for (let i = 0; i < points; i++) {\n          vertices.push(this.readFloat(data));\n          vertices.push(this.readFloat(data));\n          vertices.push(this.readFloat(data));\n        }\n        geometry.setAttribute(\"position\", new Float32BufferAttribute(vertices, 3));\n      } else if (next === FACE_ARRAY) {\n        this.resetPosition(data);\n        this.readFaceArray(data, mesh);\n      } else if (next === TEX_VERTS) {\n        const texels = this.readWord(data);\n        this.debugMessage(\"   UV: \" + texels);\n        const uvs = [];\n        for (let i = 0; i < texels; i++) {\n          uvs.push(this.readFloat(data));\n          uvs.push(this.readFloat(data));\n        }\n        geometry.setAttribute(\"uv\", new Float32BufferAttribute(uvs, 2));\n      } else if (next === MESH_MATRIX) {\n        this.debugMessage(\"   Tranformation Matrix (TODO)\");\n        const values = [];\n        for (let i = 0; i < 12; i++) {\n          values[i] = this.readFloat(data);\n        }\n        const matrix = new Matrix4();\n        matrix.elements[0] = values[0];\n        matrix.elements[1] = values[6];\n        matrix.elements[2] = values[3];\n        matrix.elements[3] = values[9];\n        matrix.elements[4] = values[2];\n        matrix.elements[5] = values[8];\n        matrix.elements[6] = values[5];\n        matrix.elements[7] = values[11];\n        matrix.elements[8] = values[1];\n        matrix.elements[9] = values[7];\n        matrix.elements[10] = values[4];\n        matrix.elements[11] = values[10];\n        matrix.elements[12] = 0;\n        matrix.elements[13] = 0;\n        matrix.elements[14] = 0;\n        matrix.elements[15] = 1;\n        matrix.transpose();\n        const inverse = new Matrix4();\n        inverse.copy(matrix).invert();\n        geometry.applyMatrix4(inverse);\n        matrix.decompose(mesh.position, mesh.quaternion, mesh.scale);\n      } else {\n        this.debugMessage(\"   Unknown mesh chunk: \" + next.toString(16));\n      }\n      next = this.nextChunk(data, chunk);\n    }\n    this.endChunk(chunk);\n    geometry.computeVertexNormals();\n    return mesh;\n  }\n  /**\n   * Read face array data chunk.\n   *\n   * @method readFaceArray\n   * @param {Dataview} data Dataview in use.\n   * @param {Mesh} mesh Mesh to be filled with the data read.\n   */\n  readFaceArray(data, mesh) {\n    const chunk = this.readChunk(data);\n    const faces = this.readWord(data);\n    this.debugMessage(\"   Faces: \" + faces);\n    const index = [];\n    for (let i = 0; i < faces; ++i) {\n      index.push(this.readWord(data), this.readWord(data), this.readWord(data));\n      this.readWord(data);\n    }\n    mesh.geometry.setIndex(index);\n    let materialIndex = 0;\n    let start = 0;\n    while (this.position < chunk.end) {\n      const subchunk = this.readChunk(data);\n      if (subchunk.id === MSH_MAT_GROUP) {\n        this.debugMessage(\"      Material Group\");\n        this.resetPosition(data);\n        const group = this.readMaterialGroup(data);\n        const count = group.index.length * 3;\n        mesh.geometry.addGroup(start, count, materialIndex);\n        start += count;\n        materialIndex++;\n        const material = this.materials[group.name];\n        if (Array.isArray(mesh.material) === false)\n          mesh.material = [];\n        if (material !== void 0) {\n          mesh.material.push(material);\n        }\n      } else {\n        this.debugMessage(\"      Unknown face array chunk: \" + subchunk.toString(16));\n      }\n      this.endChunk(subchunk);\n    }\n    if (mesh.material.length === 1)\n      mesh.material = mesh.material[0];\n    this.endChunk(chunk);\n  }\n  /**\n   * Read texture map data chunk.\n   *\n   * @method readMap\n   * @param {Dataview} data Dataview in use.\n   * @param {String} path Path for external resources.\n   * @return {Texture} Texture read from this data chunk.\n   */\n  readMap(data, path) {\n    const chunk = this.readChunk(data);\n    let next = this.nextChunk(data, chunk);\n    let texture = {};\n    const loader = new TextureLoader(this.manager);\n    loader.setPath(this.resourcePath || path).setCrossOrigin(this.crossOrigin);\n    while (next !== 0) {\n      if (next === MAT_MAPNAME) {\n        const name = this.readString(data, 128);\n        texture = loader.load(name);\n        this.debugMessage(\"      File: \" + path + name);\n      } else if (next === MAT_MAP_UOFFSET) {\n        texture.offset.x = this.readFloat(data);\n        this.debugMessage(\"      OffsetX: \" + texture.offset.x);\n      } else if (next === MAT_MAP_VOFFSET) {\n        texture.offset.y = this.readFloat(data);\n        this.debugMessage(\"      OffsetY: \" + texture.offset.y);\n      } else if (next === MAT_MAP_USCALE) {\n        texture.repeat.x = this.readFloat(data);\n        this.debugMessage(\"      RepeatX: \" + texture.repeat.x);\n      } else if (next === MAT_MAP_VSCALE) {\n        texture.repeat.y = this.readFloat(data);\n        this.debugMessage(\"      RepeatY: \" + texture.repeat.y);\n      } else {\n        this.debugMessage(\"      Unknown map chunk: \" + next.toString(16));\n      }\n      next = this.nextChunk(data, chunk);\n    }\n    this.endChunk(chunk);\n    return texture;\n  }\n  /**\n   * Read material group data chunk.\n   *\n   * @method readMaterialGroup\n   * @param {Dataview} data Dataview in use.\n   * @return {Object} Object with name and index of the object.\n   */\n  readMaterialGroup(data) {\n    this.readChunk(data);\n    const name = this.readString(data, 64);\n    const numFaces = this.readWord(data);\n    this.debugMessage(\"         Name: \" + name);\n    this.debugMessage(\"         Faces: \" + numFaces);\n    const index = [];\n    for (let i = 0; i < numFaces; ++i) {\n      index.push(this.readWord(data));\n    }\n    return { name, index };\n  }\n  /**\n   * Read a color value.\n   *\n   * @method readColor\n   * @param {DataView} data Dataview.\n   * @return {Color} Color value read..\n   */\n  readColor(data) {\n    const chunk = this.readChunk(data);\n    const color = new Color();\n    if (chunk.id === COLOR_24 || chunk.id === LIN_COLOR_24) {\n      const r = this.readByte(data);\n      const g = this.readByte(data);\n      const b = this.readByte(data);\n      color.setRGB(r / 255, g / 255, b / 255);\n      this.debugMessage(\"      Color: \" + color.r + \", \" + color.g + \", \" + color.b);\n    } else if (chunk.id === COLOR_F || chunk.id === LIN_COLOR_F) {\n      const r = this.readFloat(data);\n      const g = this.readFloat(data);\n      const b = this.readFloat(data);\n      color.setRGB(r, g, b);\n      this.debugMessage(\"      Color: \" + color.r + \", \" + color.g + \", \" + color.b);\n    } else {\n      this.debugMessage(\"      Unknown color chunk: \" + chunk.toString(16));\n    }\n    this.endChunk(chunk);\n    return color;\n  }\n  /**\n   * Read next chunk of data.\n   *\n   * @method readChunk\n   * @param {DataView} data Dataview.\n   * @return {Object} Chunk of data read.\n   */\n  readChunk(data) {\n    const chunk = {};\n    chunk.cur = this.position;\n    chunk.id = this.readWord(data);\n    chunk.size = this.readDWord(data);\n    chunk.end = chunk.cur + chunk.size;\n    chunk.cur += 6;\n    return chunk;\n  }\n  /**\n   * Set position to the end of the current chunk of data.\n   *\n   * @method endChunk\n   * @param {Object} chunk Data chunk.\n   */\n  endChunk(chunk) {\n    this.position = chunk.end;\n  }\n  /**\n   * Move to the next data chunk.\n   *\n   * @method nextChunk\n   * @param {DataView} data Dataview.\n   * @param {Object} chunk Data chunk.\n   */\n  nextChunk(data, chunk) {\n    if (chunk.cur >= chunk.end) {\n      return 0;\n    }\n    this.position = chunk.cur;\n    try {\n      const next = this.readChunk(data);\n      chunk.cur += next.size;\n      return next.id;\n    } catch (e) {\n      this.debugMessage(\"Unable to read chunk at \" + this.position);\n      return 0;\n    }\n  }\n  /**\n   * Reset dataview position.\n   *\n   * @method resetPosition\n   */\n  resetPosition() {\n    this.position -= 6;\n  }\n  /**\n   * Read byte value.\n   *\n   * @method readByte\n   * @param {DataView} data Dataview to read data from.\n   * @return {Number} Data read from the dataview.\n   */\n  readByte(data) {\n    const v = data.getUint8(this.position, true);\n    this.position += 1;\n    return v;\n  }\n  /**\n   * Read 32 bit float value.\n   *\n   * @method readFloat\n   * @param {DataView} data Dataview to read data from.\n   * @return {Number} Data read from the dataview.\n   */\n  readFloat(data) {\n    try {\n      const v = data.getFloat32(this.position, true);\n      this.position += 4;\n      return v;\n    } catch (e) {\n      this.debugMessage(e + \" \" + this.position + \" \" + data.byteLength);\n    }\n  }\n  /**\n   * Read 32 bit signed integer value.\n   *\n   * @method readInt\n   * @param {DataView} data Dataview to read data from.\n   * @return {Number} Data read from the dataview.\n   */\n  readInt(data) {\n    const v = data.getInt32(this.position, true);\n    this.position += 4;\n    return v;\n  }\n  /**\n   * Read 16 bit signed integer value.\n   *\n   * @method readShort\n   * @param {DataView} data Dataview to read data from.\n   * @return {Number} Data read from the dataview.\n   */\n  readShort(data) {\n    const v = data.getInt16(this.position, true);\n    this.position += 2;\n    return v;\n  }\n  /**\n   * Read 64 bit unsigned integer value.\n   *\n   * @method readDWord\n   * @param {DataView} data Dataview to read data from.\n   * @return {Number} Data read from the dataview.\n   */\n  readDWord(data) {\n    const v = data.getUint32(this.position, true);\n    this.position += 4;\n    return v;\n  }\n  /**\n   * Read 32 bit unsigned integer value.\n   *\n   * @method readWord\n   * @param {DataView} data Dataview to read data from.\n   * @return {Number} Data read from the dataview.\n   */\n  readWord(data) {\n    const v = data.getUint16(this.position, true);\n    this.position += 2;\n    return v;\n  }\n  /**\n   * Read string value.\n   *\n   * @method readString\n   * @param {DataView} data Dataview to read data from.\n   * @param {Number} maxLength Max size of the string to be read.\n   * @return {String} Data read from the dataview.\n   */\n  readString(data, maxLength) {\n    let s = \"\";\n    for (let i = 0; i < maxLength; i++) {\n      const c = this.readByte(data);\n      if (!c) {\n        break;\n      }\n      s += String.fromCharCode(c);\n    }\n    return s;\n  }\n  /**\n   * Read percentage value.\n   *\n   * @method readPercentage\n   * @param {DataView} data Dataview to read data from.\n   * @return {Number} Data read from the dataview.\n   */\n  readPercentage(data) {\n    const chunk = this.readChunk(data);\n    let value;\n    switch (chunk.id) {\n      case INT_PERCENTAGE:\n        value = this.readShort(data) / 100;\n        break;\n      case FLOAT_PERCENTAGE:\n        value = this.readFloat(data);\n        break;\n      default:\n        this.debugMessage(\"      Unknown percentage chunk: \" + chunk.toString(16));\n    }\n    this.endChunk(chunk);\n    return value;\n  }\n  /**\n   * Print debug message to the console.\n   *\n   * Is controlled by a flag to show or hide debug messages.\n   *\n   * @method debugMessage\n   * @param {Object} message Debug message to print to the console.\n   */\n  debugMessage(message) {\n    if (this.debug) {\n      console.log(message);\n    }\n  }\n}\nconst M3DMAGIC = 19789;\nconst MLIBMAGIC = 15786;\nconst CMAGIC = 49725;\nconst M3D_VERSION = 2;\nconst COLOR_F = 16;\nconst COLOR_24 = 17;\nconst LIN_COLOR_24 = 18;\nconst LIN_COLOR_F = 19;\nconst INT_PERCENTAGE = 48;\nconst FLOAT_PERCENTAGE = 49;\nconst MDATA = 15677;\nconst MESH_VERSION = 15678;\nconst MASTER_SCALE = 256;\nconst MAT_ENTRY = 45055;\nconst MAT_NAME = 40960;\nconst MAT_AMBIENT = 40976;\nconst MAT_DIFFUSE = 40992;\nconst MAT_SPECULAR = 41008;\nconst MAT_SHININESS = 41024;\nconst MAT_TRANSPARENCY = 41040;\nconst MAT_TWO_SIDE = 41089;\nconst MAT_ADDITIVE = 41091;\nconst MAT_WIRE = 41093;\nconst MAT_WIRE_SIZE = 41095;\nconst MAT_TEXMAP = 41472;\nconst MAT_OPACMAP = 41488;\nconst MAT_BUMPMAP = 41520;\nconst MAT_SPECMAP = 41476;\nconst MAT_MAPNAME = 41728;\nconst MAT_MAP_USCALE = 41812;\nconst MAT_MAP_VSCALE = 41814;\nconst MAT_MAP_UOFFSET = 41816;\nconst MAT_MAP_VOFFSET = 41818;\nconst NAMED_OBJECT = 16384;\nconst N_TRI_OBJECT = 16640;\nconst POINT_ARRAY = 16656;\nconst FACE_ARRAY = 16672;\nconst MSH_MAT_GROUP = 16688;\nconst TEX_VERTS = 16704;\nconst MESH_MATRIX = 16736;\nexport {\n  TDSLoader\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}