{"ast":null,"code":"import { Mesh, Vector3, Matrix3 } from \"three\";\nclass PLYExporter {\n  parse(object, onDone, options) {\n    if (onDone && typeof onDone === \"object\") {\n      console.warn('THREE.PLYExporter: The options parameter is now the third argument to the \"parse\" function. See the documentation for the new API.');\n      options = onDone;\n      onDone = void 0;\n    }\n    const defaultOptions = {\n      binary: false,\n      excludeAttributes: [],\n      // normal, uv, color, index\n      littleEndian: false\n    };\n    options = Object.assign(defaultOptions, options);\n    const excludeAttributes = options.excludeAttributes;\n    let includeNormals = false;\n    let includeColors = false;\n    let includeUVs = false;\n    let vertexCount = 0;\n    let faceCount = 0;\n    object.traverse(function (child) {\n      if (child instanceof Mesh && child.isMesh) {\n        const mesh = child;\n        const geometry = mesh.geometry;\n        if (!geometry.isBufferGeometry) {\n          throw new Error(\"THREE.PLYExporter: Geometry is not of type THREE.BufferGeometry.\");\n        }\n        const vertices = geometry.getAttribute(\"position\");\n        const normals = geometry.getAttribute(\"normal\");\n        const uvs = geometry.getAttribute(\"uv\");\n        const colors = geometry.getAttribute(\"color\");\n        const indices = geometry.getIndex();\n        if (vertices === void 0) {\n          return;\n        }\n        vertexCount += vertices.count;\n        faceCount += indices ? indices.count / 3 : vertices.count / 3;\n        if (normals !== void 0) includeNormals = true;\n        if (uvs !== void 0) includeUVs = true;\n        if (colors !== void 0) includeColors = true;\n      }\n    });\n    const includeIndices = (excludeAttributes == null ? void 0 : excludeAttributes.indexOf(\"index\")) === -1;\n    includeNormals = includeNormals && (excludeAttributes == null ? void 0 : excludeAttributes.indexOf(\"normal\")) === -1;\n    includeColors = includeColors && (excludeAttributes == null ? void 0 : excludeAttributes.indexOf(\"color\")) === -1;\n    includeUVs = includeUVs && (excludeAttributes == null ? void 0 : excludeAttributes.indexOf(\"uv\")) === -1;\n    if (includeIndices && faceCount !== Math.floor(faceCount)) {\n      console.error(\"PLYExporter: Failed to generate a valid PLY file with triangle indices because the number of indices is not divisible by 3.\");\n      return null;\n    }\n    const indexByteCount = 4;\n    let header = `ply\nformat ${options.binary ? options.littleEndian ? \"binary_little_endian\" : \"binary_big_endian\" : \"ascii\"} 1.0\nelement vertex ${vertexCount}\nproperty float x\nproperty float y\nproperty float z\n`;\n    if (includeNormals) {\n      header += \"property float nx\\nproperty float ny\\nproperty float nz\\n\";\n    }\n    if (includeUVs) {\n      header += \"property float s\\nproperty float t\\n\";\n    }\n    if (includeColors) {\n      header += \"property uchar red\\nproperty uchar green\\nproperty uchar blue\\n\";\n    }\n    if (includeIndices) {\n      header += `${`element face ${faceCount}\n`}property list uchar int vertex_index\n`;\n    }\n    header += \"end_header\\n\";\n    const vertex = new Vector3();\n    const normalMatrixWorld = new Matrix3();\n    let result = null;\n    if (options.binary) {\n      const headerBin = new TextEncoder().encode(header);\n      const vertexListLength = vertexCount * (4 * 3 + (includeNormals ? 4 * 3 : 0) + (includeColors ? 3 : 0) + (includeUVs ? 4 * 2 : 0));\n      const faceListLength = includeIndices ? faceCount * (indexByteCount * 3 + 1) : 0;\n      const output = new DataView(new ArrayBuffer(headerBin.length + vertexListLength + faceListLength));\n      new Uint8Array(output.buffer).set(headerBin, 0);\n      let vOffset = headerBin.length;\n      let fOffset = headerBin.length + vertexListLength;\n      let writtenVertices = 0;\n      this.traverseMeshes(object, function (mesh, geometry) {\n        const vertices = geometry.getAttribute(\"position\");\n        const normals = geometry.getAttribute(\"normal\");\n        const uvs = geometry.getAttribute(\"uv\");\n        const colors = geometry.getAttribute(\"color\");\n        const indices = geometry.getIndex();\n        normalMatrixWorld.getNormalMatrix(mesh.matrixWorld);\n        for (let i = 0, l = vertices.count; i < l; i++) {\n          vertex.x = vertices.getX(i);\n          vertex.y = vertices.getY(i);\n          vertex.z = vertices.getZ(i);\n          vertex.applyMatrix4(mesh.matrixWorld);\n          output.setFloat32(vOffset, vertex.x, options.littleEndian);\n          vOffset += 4;\n          output.setFloat32(vOffset, vertex.y, options.littleEndian);\n          vOffset += 4;\n          output.setFloat32(vOffset, vertex.z, options.littleEndian);\n          vOffset += 4;\n          if (includeNormals) {\n            if (normals != null) {\n              vertex.x = normals.getX(i);\n              vertex.y = normals.getY(i);\n              vertex.z = normals.getZ(i);\n              vertex.applyMatrix3(normalMatrixWorld).normalize();\n              output.setFloat32(vOffset, vertex.x, options.littleEndian);\n              vOffset += 4;\n              output.setFloat32(vOffset, vertex.y, options.littleEndian);\n              vOffset += 4;\n              output.setFloat32(vOffset, vertex.z, options.littleEndian);\n              vOffset += 4;\n            } else {\n              output.setFloat32(vOffset, 0, options.littleEndian);\n              vOffset += 4;\n              output.setFloat32(vOffset, 0, options.littleEndian);\n              vOffset += 4;\n              output.setFloat32(vOffset, 0, options.littleEndian);\n              vOffset += 4;\n            }\n          }\n          if (includeUVs) {\n            if (uvs != null) {\n              output.setFloat32(vOffset, uvs.getX(i), options.littleEndian);\n              vOffset += 4;\n              output.setFloat32(vOffset, uvs.getY(i), options.littleEndian);\n              vOffset += 4;\n            } else if (!includeUVs) {\n              output.setFloat32(vOffset, 0, options.littleEndian);\n              vOffset += 4;\n              output.setFloat32(vOffset, 0, options.littleEndian);\n              vOffset += 4;\n            }\n          }\n          if (includeColors) {\n            if (colors != null) {\n              output.setUint8(vOffset, Math.floor(colors.getX(i) * 255));\n              vOffset += 1;\n              output.setUint8(vOffset, Math.floor(colors.getY(i) * 255));\n              vOffset += 1;\n              output.setUint8(vOffset, Math.floor(colors.getZ(i) * 255));\n              vOffset += 1;\n            } else {\n              output.setUint8(vOffset, 255);\n              vOffset += 1;\n              output.setUint8(vOffset, 255);\n              vOffset += 1;\n              output.setUint8(vOffset, 255);\n              vOffset += 1;\n            }\n          }\n        }\n        if (includeIndices) {\n          if (indices !== null) {\n            for (let i = 0, l = indices.count; i < l; i += 3) {\n              output.setUint8(fOffset, 3);\n              fOffset += 1;\n              output.setUint32(fOffset, indices.getX(i + 0) + writtenVertices, options.littleEndian);\n              fOffset += indexByteCount;\n              output.setUint32(fOffset, indices.getX(i + 1) + writtenVertices, options.littleEndian);\n              fOffset += indexByteCount;\n              output.setUint32(fOffset, indices.getX(i + 2) + writtenVertices, options.littleEndian);\n              fOffset += indexByteCount;\n            }\n          } else {\n            for (let i = 0, l = vertices.count; i < l; i += 3) {\n              output.setUint8(fOffset, 3);\n              fOffset += 1;\n              output.setUint32(fOffset, writtenVertices + i, options.littleEndian);\n              fOffset += indexByteCount;\n              output.setUint32(fOffset, writtenVertices + i + 1, options.littleEndian);\n              fOffset += indexByteCount;\n              output.setUint32(fOffset, writtenVertices + i + 2, options.littleEndian);\n              fOffset += indexByteCount;\n            }\n          }\n        }\n        writtenVertices += vertices.count;\n      });\n      result = output.buffer;\n    } else {\n      let writtenVertices = 0;\n      let vertexList = \"\";\n      let faceList = \"\";\n      this.traverseMeshes(object, function (mesh, geometry) {\n        const vertices = geometry.getAttribute(\"position\");\n        const normals = geometry.getAttribute(\"normal\");\n        const uvs = geometry.getAttribute(\"uv\");\n        const colors = geometry.getAttribute(\"color\");\n        const indices = geometry.getIndex();\n        normalMatrixWorld.getNormalMatrix(mesh.matrixWorld);\n        for (let i = 0, l = vertices.count; i < l; i++) {\n          vertex.x = vertices.getX(i);\n          vertex.y = vertices.getY(i);\n          vertex.z = vertices.getZ(i);\n          vertex.applyMatrix4(mesh.matrixWorld);\n          let line = vertex.x + \" \" + vertex.y + \" \" + vertex.z;\n          if (includeNormals) {\n            if (normals != null) {\n              vertex.x = normals.getX(i);\n              vertex.y = normals.getY(i);\n              vertex.z = normals.getZ(i);\n              vertex.applyMatrix3(normalMatrixWorld).normalize();\n              line += \" \" + vertex.x + \" \" + vertex.y + \" \" + vertex.z;\n            } else {\n              line += \" 0 0 0\";\n            }\n          }\n          if (includeUVs) {\n            if (uvs != null) {\n              line += \" \" + uvs.getX(i) + \" \" + uvs.getY(i);\n            } else if (includeUVs) {\n              line += \" 0 0\";\n            }\n          }\n          if (includeColors) {\n            if (colors != null) {\n              line += \" \" + Math.floor(colors.getX(i) * 255) + \" \" + Math.floor(colors.getY(i) * 255) + \" \" + Math.floor(colors.getZ(i) * 255);\n            } else {\n              line += \" 255 255 255\";\n            }\n          }\n          vertexList += line + \"\\n\";\n        }\n        if (includeIndices) {\n          if (indices !== null) {\n            for (let i = 0, l = indices.count; i < l; i += 3) {\n              faceList += `3 ${indices.getX(i + 0) + writtenVertices}`;\n              faceList += ` ${indices.getX(i + 1) + writtenVertices}`;\n              faceList += ` ${indices.getX(i + 2) + writtenVertices}\n`;\n            }\n          } else {\n            for (let i = 0, l = vertices.count; i < l; i += 3) {\n              faceList += `3 ${writtenVertices + i} ${writtenVertices + i + 1} ${writtenVertices + i + 2}\n`;\n            }\n          }\n          faceCount += indices ? indices.count / 3 : vertices.count / 3;\n        }\n        writtenVertices += vertices.count;\n      });\n      result = `${header}${vertexList}${includeIndices ? `${faceList}\n` : \"\\n\"}`;\n    }\n    if (typeof onDone === \"function\") {\n      requestAnimationFrame(() => onDone && onDone(typeof result === \"string\" ? result : \"\"));\n    }\n    return result;\n  }\n  // Iterate over the valid meshes in the object\n  traverseMeshes(object, cb) {\n    object.traverse(function (child) {\n      if (child instanceof Mesh && child.isMesh) {\n        const mesh = child;\n        const geometry = mesh.geometry;\n        if (!geometry.isBufferGeometry) {\n          throw new Error(\"THREE.PLYExporter: Geometry is not of type THREE.BufferGeometry.\");\n        }\n        if (geometry.hasAttribute(\"position\")) {\n          cb(mesh, geometry);\n        }\n      }\n    });\n  }\n}\nexport { PLYExporter };","map":{"version":3,"names":["Mesh","Vector3","Matrix3","PLYExporter","parse","object","onDone","options","console","warn","defaultOptions","binary","excludeAttributes","littleEndian","Object","assign","includeNormals","includeColors","includeUVs","vertexCount","faceCount","traverse","child","isMesh","mesh","geometry","isBufferGeometry","Error","vertices","getAttribute","normals","uvs","colors","indices","getIndex","count","includeIndices","indexOf","Math","floor","error","indexByteCount","header","vertex","normalMatrixWorld","result","headerBin","TextEncoder","encode","vertexListLength","faceListLength","output","DataView","ArrayBuffer","length","Uint8Array","buffer","set","vOffset","fOffset","writtenVertices","traverseMeshes","getNormalMatrix","matrixWorld","i","l","x","getX","y","getY","z","getZ","applyMatrix4","setFloat32","applyMatrix3","normalize","setUint8","setUint32","vertexList","faceList","line","requestAnimationFrame","cb","hasAttribute"],"sources":["/home/krug/Coding/JavaScript/Websites/Personal/personal/node_modules/.pnpm/three-stdlib@2.23.7_three@0.151.3/node_modules/three-stdlib/exporters/PLYExporter.js"],"sourcesContent":["import { Mesh, Vector3, Matrix3 } from \"three\";\nclass PLYExporter {\n  parse(object, onDone, options) {\n    if (onDone && typeof onDone === \"object\") {\n      console.warn(\n        'THREE.PLYExporter: The options parameter is now the third argument to the \"parse\" function. See the documentation for the new API.'\n      );\n      options = onDone;\n      onDone = void 0;\n    }\n    const defaultOptions = {\n      binary: false,\n      excludeAttributes: [],\n      // normal, uv, color, index\n      littleEndian: false\n    };\n    options = Object.assign(defaultOptions, options);\n    const excludeAttributes = options.excludeAttributes;\n    let includeNormals = false;\n    let includeColors = false;\n    let includeUVs = false;\n    let vertexCount = 0;\n    let faceCount = 0;\n    object.traverse(function(child) {\n      if (child instanceof Mesh && child.isMesh) {\n        const mesh = child;\n        const geometry = mesh.geometry;\n        if (!geometry.isBufferGeometry) {\n          throw new Error(\"THREE.PLYExporter: Geometry is not of type THREE.BufferGeometry.\");\n        }\n        const vertices = geometry.getAttribute(\"position\");\n        const normals = geometry.getAttribute(\"normal\");\n        const uvs = geometry.getAttribute(\"uv\");\n        const colors = geometry.getAttribute(\"color\");\n        const indices = geometry.getIndex();\n        if (vertices === void 0) {\n          return;\n        }\n        vertexCount += vertices.count;\n        faceCount += indices ? indices.count / 3 : vertices.count / 3;\n        if (normals !== void 0)\n          includeNormals = true;\n        if (uvs !== void 0)\n          includeUVs = true;\n        if (colors !== void 0)\n          includeColors = true;\n      }\n    });\n    const includeIndices = (excludeAttributes == null ? void 0 : excludeAttributes.indexOf(\"index\")) === -1;\n    includeNormals = includeNormals && (excludeAttributes == null ? void 0 : excludeAttributes.indexOf(\"normal\")) === -1;\n    includeColors = includeColors && (excludeAttributes == null ? void 0 : excludeAttributes.indexOf(\"color\")) === -1;\n    includeUVs = includeUVs && (excludeAttributes == null ? void 0 : excludeAttributes.indexOf(\"uv\")) === -1;\n    if (includeIndices && faceCount !== Math.floor(faceCount)) {\n      console.error(\n        \"PLYExporter: Failed to generate a valid PLY file with triangle indices because the number of indices is not divisible by 3.\"\n      );\n      return null;\n    }\n    const indexByteCount = 4;\n    let header = `ply\nformat ${options.binary ? options.littleEndian ? \"binary_little_endian\" : \"binary_big_endian\" : \"ascii\"} 1.0\nelement vertex ${vertexCount}\nproperty float x\nproperty float y\nproperty float z\n`;\n    if (includeNormals) {\n      header += \"property float nx\\nproperty float ny\\nproperty float nz\\n\";\n    }\n    if (includeUVs) {\n      header += \"property float s\\nproperty float t\\n\";\n    }\n    if (includeColors) {\n      header += \"property uchar red\\nproperty uchar green\\nproperty uchar blue\\n\";\n    }\n    if (includeIndices) {\n      header += `${`element face ${faceCount}\n`}property list uchar int vertex_index\n`;\n    }\n    header += \"end_header\\n\";\n    const vertex = new Vector3();\n    const normalMatrixWorld = new Matrix3();\n    let result = null;\n    if (options.binary) {\n      const headerBin = new TextEncoder().encode(header);\n      const vertexListLength = vertexCount * (4 * 3 + (includeNormals ? 4 * 3 : 0) + (includeColors ? 3 : 0) + (includeUVs ? 4 * 2 : 0));\n      const faceListLength = includeIndices ? faceCount * (indexByteCount * 3 + 1) : 0;\n      const output = new DataView(new ArrayBuffer(headerBin.length + vertexListLength + faceListLength));\n      new Uint8Array(output.buffer).set(headerBin, 0);\n      let vOffset = headerBin.length;\n      let fOffset = headerBin.length + vertexListLength;\n      let writtenVertices = 0;\n      this.traverseMeshes(object, function(mesh, geometry) {\n        const vertices = geometry.getAttribute(\"position\");\n        const normals = geometry.getAttribute(\"normal\");\n        const uvs = geometry.getAttribute(\"uv\");\n        const colors = geometry.getAttribute(\"color\");\n        const indices = geometry.getIndex();\n        normalMatrixWorld.getNormalMatrix(mesh.matrixWorld);\n        for (let i = 0, l = vertices.count; i < l; i++) {\n          vertex.x = vertices.getX(i);\n          vertex.y = vertices.getY(i);\n          vertex.z = vertices.getZ(i);\n          vertex.applyMatrix4(mesh.matrixWorld);\n          output.setFloat32(vOffset, vertex.x, options.littleEndian);\n          vOffset += 4;\n          output.setFloat32(vOffset, vertex.y, options.littleEndian);\n          vOffset += 4;\n          output.setFloat32(vOffset, vertex.z, options.littleEndian);\n          vOffset += 4;\n          if (includeNormals) {\n            if (normals != null) {\n              vertex.x = normals.getX(i);\n              vertex.y = normals.getY(i);\n              vertex.z = normals.getZ(i);\n              vertex.applyMatrix3(normalMatrixWorld).normalize();\n              output.setFloat32(vOffset, vertex.x, options.littleEndian);\n              vOffset += 4;\n              output.setFloat32(vOffset, vertex.y, options.littleEndian);\n              vOffset += 4;\n              output.setFloat32(vOffset, vertex.z, options.littleEndian);\n              vOffset += 4;\n            } else {\n              output.setFloat32(vOffset, 0, options.littleEndian);\n              vOffset += 4;\n              output.setFloat32(vOffset, 0, options.littleEndian);\n              vOffset += 4;\n              output.setFloat32(vOffset, 0, options.littleEndian);\n              vOffset += 4;\n            }\n          }\n          if (includeUVs) {\n            if (uvs != null) {\n              output.setFloat32(vOffset, uvs.getX(i), options.littleEndian);\n              vOffset += 4;\n              output.setFloat32(vOffset, uvs.getY(i), options.littleEndian);\n              vOffset += 4;\n            } else if (!includeUVs) {\n              output.setFloat32(vOffset, 0, options.littleEndian);\n              vOffset += 4;\n              output.setFloat32(vOffset, 0, options.littleEndian);\n              vOffset += 4;\n            }\n          }\n          if (includeColors) {\n            if (colors != null) {\n              output.setUint8(vOffset, Math.floor(colors.getX(i) * 255));\n              vOffset += 1;\n              output.setUint8(vOffset, Math.floor(colors.getY(i) * 255));\n              vOffset += 1;\n              output.setUint8(vOffset, Math.floor(colors.getZ(i) * 255));\n              vOffset += 1;\n            } else {\n              output.setUint8(vOffset, 255);\n              vOffset += 1;\n              output.setUint8(vOffset, 255);\n              vOffset += 1;\n              output.setUint8(vOffset, 255);\n              vOffset += 1;\n            }\n          }\n        }\n        if (includeIndices) {\n          if (indices !== null) {\n            for (let i = 0, l = indices.count; i < l; i += 3) {\n              output.setUint8(fOffset, 3);\n              fOffset += 1;\n              output.setUint32(fOffset, indices.getX(i + 0) + writtenVertices, options.littleEndian);\n              fOffset += indexByteCount;\n              output.setUint32(fOffset, indices.getX(i + 1) + writtenVertices, options.littleEndian);\n              fOffset += indexByteCount;\n              output.setUint32(fOffset, indices.getX(i + 2) + writtenVertices, options.littleEndian);\n              fOffset += indexByteCount;\n            }\n          } else {\n            for (let i = 0, l = vertices.count; i < l; i += 3) {\n              output.setUint8(fOffset, 3);\n              fOffset += 1;\n              output.setUint32(fOffset, writtenVertices + i, options.littleEndian);\n              fOffset += indexByteCount;\n              output.setUint32(fOffset, writtenVertices + i + 1, options.littleEndian);\n              fOffset += indexByteCount;\n              output.setUint32(fOffset, writtenVertices + i + 2, options.littleEndian);\n              fOffset += indexByteCount;\n            }\n          }\n        }\n        writtenVertices += vertices.count;\n      });\n      result = output.buffer;\n    } else {\n      let writtenVertices = 0;\n      let vertexList = \"\";\n      let faceList = \"\";\n      this.traverseMeshes(object, function(mesh, geometry) {\n        const vertices = geometry.getAttribute(\"position\");\n        const normals = geometry.getAttribute(\"normal\");\n        const uvs = geometry.getAttribute(\"uv\");\n        const colors = geometry.getAttribute(\"color\");\n        const indices = geometry.getIndex();\n        normalMatrixWorld.getNormalMatrix(mesh.matrixWorld);\n        for (let i = 0, l = vertices.count; i < l; i++) {\n          vertex.x = vertices.getX(i);\n          vertex.y = vertices.getY(i);\n          vertex.z = vertices.getZ(i);\n          vertex.applyMatrix4(mesh.matrixWorld);\n          let line = vertex.x + \" \" + vertex.y + \" \" + vertex.z;\n          if (includeNormals) {\n            if (normals != null) {\n              vertex.x = normals.getX(i);\n              vertex.y = normals.getY(i);\n              vertex.z = normals.getZ(i);\n              vertex.applyMatrix3(normalMatrixWorld).normalize();\n              line += \" \" + vertex.x + \" \" + vertex.y + \" \" + vertex.z;\n            } else {\n              line += \" 0 0 0\";\n            }\n          }\n          if (includeUVs) {\n            if (uvs != null) {\n              line += \" \" + uvs.getX(i) + \" \" + uvs.getY(i);\n            } else if (includeUVs) {\n              line += \" 0 0\";\n            }\n          }\n          if (includeColors) {\n            if (colors != null) {\n              line += \" \" + Math.floor(colors.getX(i) * 255) + \" \" + Math.floor(colors.getY(i) * 255) + \" \" + Math.floor(colors.getZ(i) * 255);\n            } else {\n              line += \" 255 255 255\";\n            }\n          }\n          vertexList += line + \"\\n\";\n        }\n        if (includeIndices) {\n          if (indices !== null) {\n            for (let i = 0, l = indices.count; i < l; i += 3) {\n              faceList += `3 ${indices.getX(i + 0) + writtenVertices}`;\n              faceList += ` ${indices.getX(i + 1) + writtenVertices}`;\n              faceList += ` ${indices.getX(i + 2) + writtenVertices}\n`;\n            }\n          } else {\n            for (let i = 0, l = vertices.count; i < l; i += 3) {\n              faceList += `3 ${writtenVertices + i} ${writtenVertices + i + 1} ${writtenVertices + i + 2}\n`;\n            }\n          }\n          faceCount += indices ? indices.count / 3 : vertices.count / 3;\n        }\n        writtenVertices += vertices.count;\n      });\n      result = `${header}${vertexList}${includeIndices ? `${faceList}\n` : \"\\n\"}`;\n    }\n    if (typeof onDone === \"function\") {\n      requestAnimationFrame(() => onDone && onDone(typeof result === \"string\" ? result : \"\"));\n    }\n    return result;\n  }\n  // Iterate over the valid meshes in the object\n  traverseMeshes(object, cb) {\n    object.traverse(function(child) {\n      if (child instanceof Mesh && child.isMesh) {\n        const mesh = child;\n        const geometry = mesh.geometry;\n        if (!geometry.isBufferGeometry) {\n          throw new Error(\"THREE.PLYExporter: Geometry is not of type THREE.BufferGeometry.\");\n        }\n        if (geometry.hasAttribute(\"position\")) {\n          cb(mesh, geometry);\n        }\n      }\n    });\n  }\n}\nexport {\n  PLYExporter\n};\n"],"mappings":"AAAA,SAASA,IAAI,EAAEC,OAAO,EAAEC,OAAO,QAAQ,OAAO;AAC9C,MAAMC,WAAW,CAAC;EAChBC,KAAKA,CAACC,MAAM,EAAEC,MAAM,EAAEC,OAAO,EAAE;IAC7B,IAAID,MAAM,IAAI,OAAOA,MAAM,KAAK,QAAQ,EAAE;MACxCE,OAAO,CAACC,IAAI,CACV,oIACF,CAAC;MACDF,OAAO,GAAGD,MAAM;MAChBA,MAAM,GAAG,KAAK,CAAC;IACjB;IACA,MAAMI,cAAc,GAAG;MACrBC,MAAM,EAAE,KAAK;MACbC,iBAAiB,EAAE,EAAE;MACrB;MACAC,YAAY,EAAE;IAChB,CAAC;IACDN,OAAO,GAAGO,MAAM,CAACC,MAAM,CAACL,cAAc,EAAEH,OAAO,CAAC;IAChD,MAAMK,iBAAiB,GAAGL,OAAO,CAACK,iBAAiB;IACnD,IAAII,cAAc,GAAG,KAAK;IAC1B,IAAIC,aAAa,GAAG,KAAK;IACzB,IAAIC,UAAU,GAAG,KAAK;IACtB,IAAIC,WAAW,GAAG,CAAC;IACnB,IAAIC,SAAS,GAAG,CAAC;IACjBf,MAAM,CAACgB,QAAQ,CAAC,UAASC,KAAK,EAAE;MAC9B,IAAIA,KAAK,YAAYtB,IAAI,IAAIsB,KAAK,CAACC,MAAM,EAAE;QACzC,MAAMC,IAAI,GAAGF,KAAK;QAClB,MAAMG,QAAQ,GAAGD,IAAI,CAACC,QAAQ;QAC9B,IAAI,CAACA,QAAQ,CAACC,gBAAgB,EAAE;UAC9B,MAAM,IAAIC,KAAK,CAAC,kEAAkE,CAAC;QACrF;QACA,MAAMC,QAAQ,GAAGH,QAAQ,CAACI,YAAY,CAAC,UAAU,CAAC;QAClD,MAAMC,OAAO,GAAGL,QAAQ,CAACI,YAAY,CAAC,QAAQ,CAAC;QAC/C,MAAME,GAAG,GAAGN,QAAQ,CAACI,YAAY,CAAC,IAAI,CAAC;QACvC,MAAMG,MAAM,GAAGP,QAAQ,CAACI,YAAY,CAAC,OAAO,CAAC;QAC7C,MAAMI,OAAO,GAAGR,QAAQ,CAACS,QAAQ,CAAC,CAAC;QACnC,IAAIN,QAAQ,KAAK,KAAK,CAAC,EAAE;UACvB;QACF;QACAT,WAAW,IAAIS,QAAQ,CAACO,KAAK;QAC7Bf,SAAS,IAAIa,OAAO,GAAGA,OAAO,CAACE,KAAK,GAAG,CAAC,GAAGP,QAAQ,CAACO,KAAK,GAAG,CAAC;QAC7D,IAAIL,OAAO,KAAK,KAAK,CAAC,EACpBd,cAAc,GAAG,IAAI;QACvB,IAAIe,GAAG,KAAK,KAAK,CAAC,EAChBb,UAAU,GAAG,IAAI;QACnB,IAAIc,MAAM,KAAK,KAAK,CAAC,EACnBf,aAAa,GAAG,IAAI;MACxB;IACF,CAAC,CAAC;IACF,MAAMmB,cAAc,GAAG,CAACxB,iBAAiB,IAAI,IAAI,GAAG,KAAK,CAAC,GAAGA,iBAAiB,CAACyB,OAAO,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC;IACvGrB,cAAc,GAAGA,cAAc,IAAI,CAACJ,iBAAiB,IAAI,IAAI,GAAG,KAAK,CAAC,GAAGA,iBAAiB,CAACyB,OAAO,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC;IACpHpB,aAAa,GAAGA,aAAa,IAAI,CAACL,iBAAiB,IAAI,IAAI,GAAG,KAAK,CAAC,GAAGA,iBAAiB,CAACyB,OAAO,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC;IACjHnB,UAAU,GAAGA,UAAU,IAAI,CAACN,iBAAiB,IAAI,IAAI,GAAG,KAAK,CAAC,GAAGA,iBAAiB,CAACyB,OAAO,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;IACxG,IAAID,cAAc,IAAIhB,SAAS,KAAKkB,IAAI,CAACC,KAAK,CAACnB,SAAS,CAAC,EAAE;MACzDZ,OAAO,CAACgC,KAAK,CACX,6HACF,CAAC;MACD,OAAO,IAAI;IACb;IACA,MAAMC,cAAc,GAAG,CAAC;IACxB,IAAIC,MAAM,GAAI;AAClB,SAASnC,OAAO,CAACI,MAAM,GAAGJ,OAAO,CAACM,YAAY,GAAG,sBAAsB,GAAG,mBAAmB,GAAG,OAAQ;AACxG,iBAAiBM,WAAY;AAC7B;AACA;AACA;AACA,CAAC;IACG,IAAIH,cAAc,EAAE;MAClB0B,MAAM,IAAI,2DAA2D;IACvE;IACA,IAAIxB,UAAU,EAAE;MACdwB,MAAM,IAAI,sCAAsC;IAClD;IACA,IAAIzB,aAAa,EAAE;MACjByB,MAAM,IAAI,iEAAiE;IAC7E;IACA,IAAIN,cAAc,EAAE;MAClBM,MAAM,IAAK,GAAG,gBAAetB,SAAU;AAC7C,CAAE;AACF,CAAC;IACG;IACAsB,MAAM,IAAI,cAAc;IACxB,MAAMC,MAAM,GAAG,IAAI1C,OAAO,CAAC,CAAC;IAC5B,MAAM2C,iBAAiB,GAAG,IAAI1C,OAAO,CAAC,CAAC;IACvC,IAAI2C,MAAM,GAAG,IAAI;IACjB,IAAItC,OAAO,CAACI,MAAM,EAAE;MAClB,MAAMmC,SAAS,GAAG,IAAIC,WAAW,CAAC,CAAC,CAACC,MAAM,CAACN,MAAM,CAAC;MAClD,MAAMO,gBAAgB,GAAG9B,WAAW,IAAI,CAAC,GAAG,CAAC,IAAIH,cAAc,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,IAAIC,aAAa,GAAG,CAAC,GAAG,CAAC,CAAC,IAAIC,UAAU,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC;MAClI,MAAMgC,cAAc,GAAGd,cAAc,GAAGhB,SAAS,IAAIqB,cAAc,GAAG,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC;MAChF,MAAMU,MAAM,GAAG,IAAIC,QAAQ,CAAC,IAAIC,WAAW,CAACP,SAAS,CAACQ,MAAM,GAAGL,gBAAgB,GAAGC,cAAc,CAAC,CAAC;MAClG,IAAIK,UAAU,CAACJ,MAAM,CAACK,MAAM,CAAC,CAACC,GAAG,CAACX,SAAS,EAAE,CAAC,CAAC;MAC/C,IAAIY,OAAO,GAAGZ,SAAS,CAACQ,MAAM;MAC9B,IAAIK,OAAO,GAAGb,SAAS,CAACQ,MAAM,GAAGL,gBAAgB;MACjD,IAAIW,eAAe,GAAG,CAAC;MACvB,IAAI,CAACC,cAAc,CAACxD,MAAM,EAAE,UAASmB,IAAI,EAAEC,QAAQ,EAAE;QACnD,MAAMG,QAAQ,GAAGH,QAAQ,CAACI,YAAY,CAAC,UAAU,CAAC;QAClD,MAAMC,OAAO,GAAGL,QAAQ,CAACI,YAAY,CAAC,QAAQ,CAAC;QAC/C,MAAME,GAAG,GAAGN,QAAQ,CAACI,YAAY,CAAC,IAAI,CAAC;QACvC,MAAMG,MAAM,GAAGP,QAAQ,CAACI,YAAY,CAAC,OAAO,CAAC;QAC7C,MAAMI,OAAO,GAAGR,QAAQ,CAACS,QAAQ,CAAC,CAAC;QACnCU,iBAAiB,CAACkB,eAAe,CAACtC,IAAI,CAACuC,WAAW,CAAC;QACnD,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEC,CAAC,GAAGrC,QAAQ,CAACO,KAAK,EAAE6B,CAAC,GAAGC,CAAC,EAAED,CAAC,EAAE,EAAE;UAC9CrB,MAAM,CAACuB,CAAC,GAAGtC,QAAQ,CAACuC,IAAI,CAACH,CAAC,CAAC;UAC3BrB,MAAM,CAACyB,CAAC,GAAGxC,QAAQ,CAACyC,IAAI,CAACL,CAAC,CAAC;UAC3BrB,MAAM,CAAC2B,CAAC,GAAG1C,QAAQ,CAAC2C,IAAI,CAACP,CAAC,CAAC;UAC3BrB,MAAM,CAAC6B,YAAY,CAAChD,IAAI,CAACuC,WAAW,CAAC;UACrCZ,MAAM,CAACsB,UAAU,CAACf,OAAO,EAAEf,MAAM,CAACuB,CAAC,EAAE3D,OAAO,CAACM,YAAY,CAAC;UAC1D6C,OAAO,IAAI,CAAC;UACZP,MAAM,CAACsB,UAAU,CAACf,OAAO,EAAEf,MAAM,CAACyB,CAAC,EAAE7D,OAAO,CAACM,YAAY,CAAC;UAC1D6C,OAAO,IAAI,CAAC;UACZP,MAAM,CAACsB,UAAU,CAACf,OAAO,EAAEf,MAAM,CAAC2B,CAAC,EAAE/D,OAAO,CAACM,YAAY,CAAC;UAC1D6C,OAAO,IAAI,CAAC;UACZ,IAAI1C,cAAc,EAAE;YAClB,IAAIc,OAAO,IAAI,IAAI,EAAE;cACnBa,MAAM,CAACuB,CAAC,GAAGpC,OAAO,CAACqC,IAAI,CAACH,CAAC,CAAC;cAC1BrB,MAAM,CAACyB,CAAC,GAAGtC,OAAO,CAACuC,IAAI,CAACL,CAAC,CAAC;cAC1BrB,MAAM,CAAC2B,CAAC,GAAGxC,OAAO,CAACyC,IAAI,CAACP,CAAC,CAAC;cAC1BrB,MAAM,CAAC+B,YAAY,CAAC9B,iBAAiB,CAAC,CAAC+B,SAAS,CAAC,CAAC;cAClDxB,MAAM,CAACsB,UAAU,CAACf,OAAO,EAAEf,MAAM,CAACuB,CAAC,EAAE3D,OAAO,CAACM,YAAY,CAAC;cAC1D6C,OAAO,IAAI,CAAC;cACZP,MAAM,CAACsB,UAAU,CAACf,OAAO,EAAEf,MAAM,CAACyB,CAAC,EAAE7D,OAAO,CAACM,YAAY,CAAC;cAC1D6C,OAAO,IAAI,CAAC;cACZP,MAAM,CAACsB,UAAU,CAACf,OAAO,EAAEf,MAAM,CAAC2B,CAAC,EAAE/D,OAAO,CAACM,YAAY,CAAC;cAC1D6C,OAAO,IAAI,CAAC;YACd,CAAC,MAAM;cACLP,MAAM,CAACsB,UAAU,CAACf,OAAO,EAAE,CAAC,EAAEnD,OAAO,CAACM,YAAY,CAAC;cACnD6C,OAAO,IAAI,CAAC;cACZP,MAAM,CAACsB,UAAU,CAACf,OAAO,EAAE,CAAC,EAAEnD,OAAO,CAACM,YAAY,CAAC;cACnD6C,OAAO,IAAI,CAAC;cACZP,MAAM,CAACsB,UAAU,CAACf,OAAO,EAAE,CAAC,EAAEnD,OAAO,CAACM,YAAY,CAAC;cACnD6C,OAAO,IAAI,CAAC;YACd;UACF;UACA,IAAIxC,UAAU,EAAE;YACd,IAAIa,GAAG,IAAI,IAAI,EAAE;cACfoB,MAAM,CAACsB,UAAU,CAACf,OAAO,EAAE3B,GAAG,CAACoC,IAAI,CAACH,CAAC,CAAC,EAAEzD,OAAO,CAACM,YAAY,CAAC;cAC7D6C,OAAO,IAAI,CAAC;cACZP,MAAM,CAACsB,UAAU,CAACf,OAAO,EAAE3B,GAAG,CAACsC,IAAI,CAACL,CAAC,CAAC,EAAEzD,OAAO,CAACM,YAAY,CAAC;cAC7D6C,OAAO,IAAI,CAAC;YACd,CAAC,MAAM,IAAI,CAACxC,UAAU,EAAE;cACtBiC,MAAM,CAACsB,UAAU,CAACf,OAAO,EAAE,CAAC,EAAEnD,OAAO,CAACM,YAAY,CAAC;cACnD6C,OAAO,IAAI,CAAC;cACZP,MAAM,CAACsB,UAAU,CAACf,OAAO,EAAE,CAAC,EAAEnD,OAAO,CAACM,YAAY,CAAC;cACnD6C,OAAO,IAAI,CAAC;YACd;UACF;UACA,IAAIzC,aAAa,EAAE;YACjB,IAAIe,MAAM,IAAI,IAAI,EAAE;cAClBmB,MAAM,CAACyB,QAAQ,CAAClB,OAAO,EAAEpB,IAAI,CAACC,KAAK,CAACP,MAAM,CAACmC,IAAI,CAACH,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC;cAC1DN,OAAO,IAAI,CAAC;cACZP,MAAM,CAACyB,QAAQ,CAAClB,OAAO,EAAEpB,IAAI,CAACC,KAAK,CAACP,MAAM,CAACqC,IAAI,CAACL,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC;cAC1DN,OAAO,IAAI,CAAC;cACZP,MAAM,CAACyB,QAAQ,CAAClB,OAAO,EAAEpB,IAAI,CAACC,KAAK,CAACP,MAAM,CAACuC,IAAI,CAACP,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC;cAC1DN,OAAO,IAAI,CAAC;YACd,CAAC,MAAM;cACLP,MAAM,CAACyB,QAAQ,CAAClB,OAAO,EAAE,GAAG,CAAC;cAC7BA,OAAO,IAAI,CAAC;cACZP,MAAM,CAACyB,QAAQ,CAAClB,OAAO,EAAE,GAAG,CAAC;cAC7BA,OAAO,IAAI,CAAC;cACZP,MAAM,CAACyB,QAAQ,CAAClB,OAAO,EAAE,GAAG,CAAC;cAC7BA,OAAO,IAAI,CAAC;YACd;UACF;QACF;QACA,IAAItB,cAAc,EAAE;UAClB,IAAIH,OAAO,KAAK,IAAI,EAAE;YACpB,KAAK,IAAI+B,CAAC,GAAG,CAAC,EAAEC,CAAC,GAAGhC,OAAO,CAACE,KAAK,EAAE6B,CAAC,GAAGC,CAAC,EAAED,CAAC,IAAI,CAAC,EAAE;cAChDb,MAAM,CAACyB,QAAQ,CAACjB,OAAO,EAAE,CAAC,CAAC;cAC3BA,OAAO,IAAI,CAAC;cACZR,MAAM,CAAC0B,SAAS,CAAClB,OAAO,EAAE1B,OAAO,CAACkC,IAAI,CAACH,CAAC,GAAG,CAAC,CAAC,GAAGJ,eAAe,EAAErD,OAAO,CAACM,YAAY,CAAC;cACtF8C,OAAO,IAAIlB,cAAc;cACzBU,MAAM,CAAC0B,SAAS,CAAClB,OAAO,EAAE1B,OAAO,CAACkC,IAAI,CAACH,CAAC,GAAG,CAAC,CAAC,GAAGJ,eAAe,EAAErD,OAAO,CAACM,YAAY,CAAC;cACtF8C,OAAO,IAAIlB,cAAc;cACzBU,MAAM,CAAC0B,SAAS,CAAClB,OAAO,EAAE1B,OAAO,CAACkC,IAAI,CAACH,CAAC,GAAG,CAAC,CAAC,GAAGJ,eAAe,EAAErD,OAAO,CAACM,YAAY,CAAC;cACtF8C,OAAO,IAAIlB,cAAc;YAC3B;UACF,CAAC,MAAM;YACL,KAAK,IAAIuB,CAAC,GAAG,CAAC,EAAEC,CAAC,GAAGrC,QAAQ,CAACO,KAAK,EAAE6B,CAAC,GAAGC,CAAC,EAAED,CAAC,IAAI,CAAC,EAAE;cACjDb,MAAM,CAACyB,QAAQ,CAACjB,OAAO,EAAE,CAAC,CAAC;cAC3BA,OAAO,IAAI,CAAC;cACZR,MAAM,CAAC0B,SAAS,CAAClB,OAAO,EAAEC,eAAe,GAAGI,CAAC,EAAEzD,OAAO,CAACM,YAAY,CAAC;cACpE8C,OAAO,IAAIlB,cAAc;cACzBU,MAAM,CAAC0B,SAAS,CAAClB,OAAO,EAAEC,eAAe,GAAGI,CAAC,GAAG,CAAC,EAAEzD,OAAO,CAACM,YAAY,CAAC;cACxE8C,OAAO,IAAIlB,cAAc;cACzBU,MAAM,CAAC0B,SAAS,CAAClB,OAAO,EAAEC,eAAe,GAAGI,CAAC,GAAG,CAAC,EAAEzD,OAAO,CAACM,YAAY,CAAC;cACxE8C,OAAO,IAAIlB,cAAc;YAC3B;UACF;QACF;QACAmB,eAAe,IAAIhC,QAAQ,CAACO,KAAK;MACnC,CAAC,CAAC;MACFU,MAAM,GAAGM,MAAM,CAACK,MAAM;IACxB,CAAC,MAAM;MACL,IAAII,eAAe,GAAG,CAAC;MACvB,IAAIkB,UAAU,GAAG,EAAE;MACnB,IAAIC,QAAQ,GAAG,EAAE;MACjB,IAAI,CAAClB,cAAc,CAACxD,MAAM,EAAE,UAASmB,IAAI,EAAEC,QAAQ,EAAE;QACnD,MAAMG,QAAQ,GAAGH,QAAQ,CAACI,YAAY,CAAC,UAAU,CAAC;QAClD,MAAMC,OAAO,GAAGL,QAAQ,CAACI,YAAY,CAAC,QAAQ,CAAC;QAC/C,MAAME,GAAG,GAAGN,QAAQ,CAACI,YAAY,CAAC,IAAI,CAAC;QACvC,MAAMG,MAAM,GAAGP,QAAQ,CAACI,YAAY,CAAC,OAAO,CAAC;QAC7C,MAAMI,OAAO,GAAGR,QAAQ,CAACS,QAAQ,CAAC,CAAC;QACnCU,iBAAiB,CAACkB,eAAe,CAACtC,IAAI,CAACuC,WAAW,CAAC;QACnD,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEC,CAAC,GAAGrC,QAAQ,CAACO,KAAK,EAAE6B,CAAC,GAAGC,CAAC,EAAED,CAAC,EAAE,EAAE;UAC9CrB,MAAM,CAACuB,CAAC,GAAGtC,QAAQ,CAACuC,IAAI,CAACH,CAAC,CAAC;UAC3BrB,MAAM,CAACyB,CAAC,GAAGxC,QAAQ,CAACyC,IAAI,CAACL,CAAC,CAAC;UAC3BrB,MAAM,CAAC2B,CAAC,GAAG1C,QAAQ,CAAC2C,IAAI,CAACP,CAAC,CAAC;UAC3BrB,MAAM,CAAC6B,YAAY,CAAChD,IAAI,CAACuC,WAAW,CAAC;UACrC,IAAIiB,IAAI,GAAGrC,MAAM,CAACuB,CAAC,GAAG,GAAG,GAAGvB,MAAM,CAACyB,CAAC,GAAG,GAAG,GAAGzB,MAAM,CAAC2B,CAAC;UACrD,IAAItD,cAAc,EAAE;YAClB,IAAIc,OAAO,IAAI,IAAI,EAAE;cACnBa,MAAM,CAACuB,CAAC,GAAGpC,OAAO,CAACqC,IAAI,CAACH,CAAC,CAAC;cAC1BrB,MAAM,CAACyB,CAAC,GAAGtC,OAAO,CAACuC,IAAI,CAACL,CAAC,CAAC;cAC1BrB,MAAM,CAAC2B,CAAC,GAAGxC,OAAO,CAACyC,IAAI,CAACP,CAAC,CAAC;cAC1BrB,MAAM,CAAC+B,YAAY,CAAC9B,iBAAiB,CAAC,CAAC+B,SAAS,CAAC,CAAC;cAClDK,IAAI,IAAI,GAAG,GAAGrC,MAAM,CAACuB,CAAC,GAAG,GAAG,GAAGvB,MAAM,CAACyB,CAAC,GAAG,GAAG,GAAGzB,MAAM,CAAC2B,CAAC;YAC1D,CAAC,MAAM;cACLU,IAAI,IAAI,QAAQ;YAClB;UACF;UACA,IAAI9D,UAAU,EAAE;YACd,IAAIa,GAAG,IAAI,IAAI,EAAE;cACfiD,IAAI,IAAI,GAAG,GAAGjD,GAAG,CAACoC,IAAI,CAACH,CAAC,CAAC,GAAG,GAAG,GAAGjC,GAAG,CAACsC,IAAI,CAACL,CAAC,CAAC;YAC/C,CAAC,MAAM,IAAI9C,UAAU,EAAE;cACrB8D,IAAI,IAAI,MAAM;YAChB;UACF;UACA,IAAI/D,aAAa,EAAE;YACjB,IAAIe,MAAM,IAAI,IAAI,EAAE;cAClBgD,IAAI,IAAI,GAAG,GAAG1C,IAAI,CAACC,KAAK,CAACP,MAAM,CAACmC,IAAI,CAACH,CAAC,CAAC,GAAG,GAAG,CAAC,GAAG,GAAG,GAAG1B,IAAI,CAACC,KAAK,CAACP,MAAM,CAACqC,IAAI,CAACL,CAAC,CAAC,GAAG,GAAG,CAAC,GAAG,GAAG,GAAG1B,IAAI,CAACC,KAAK,CAACP,MAAM,CAACuC,IAAI,CAACP,CAAC,CAAC,GAAG,GAAG,CAAC;YAClI,CAAC,MAAM;cACLgB,IAAI,IAAI,cAAc;YACxB;UACF;UACAF,UAAU,IAAIE,IAAI,GAAG,IAAI;QAC3B;QACA,IAAI5C,cAAc,EAAE;UAClB,IAAIH,OAAO,KAAK,IAAI,EAAE;YACpB,KAAK,IAAI+B,CAAC,GAAG,CAAC,EAAEC,CAAC,GAAGhC,OAAO,CAACE,KAAK,EAAE6B,CAAC,GAAGC,CAAC,EAAED,CAAC,IAAI,CAAC,EAAE;cAChDe,QAAQ,IAAK,KAAI9C,OAAO,CAACkC,IAAI,CAACH,CAAC,GAAG,CAAC,CAAC,GAAGJ,eAAgB,EAAC;cACxDmB,QAAQ,IAAK,IAAG9C,OAAO,CAACkC,IAAI,CAACH,CAAC,GAAG,CAAC,CAAC,GAAGJ,eAAgB,EAAC;cACvDmB,QAAQ,IAAK,IAAG9C,OAAO,CAACkC,IAAI,CAACH,CAAC,GAAG,CAAC,CAAC,GAAGJ,eAAgB;AACpE,CAAC;YACW;UACF,CAAC,MAAM;YACL,KAAK,IAAII,CAAC,GAAG,CAAC,EAAEC,CAAC,GAAGrC,QAAQ,CAACO,KAAK,EAAE6B,CAAC,GAAGC,CAAC,EAAED,CAAC,IAAI,CAAC,EAAE;cACjDe,QAAQ,IAAK,KAAInB,eAAe,GAAGI,CAAE,IAAGJ,eAAe,GAAGI,CAAC,GAAG,CAAE,IAAGJ,eAAe,GAAGI,CAAC,GAAG,CAAE;AACzG,CAAC;YACW;UACF;UACA5C,SAAS,IAAIa,OAAO,GAAGA,OAAO,CAACE,KAAK,GAAG,CAAC,GAAGP,QAAQ,CAACO,KAAK,GAAG,CAAC;QAC/D;QACAyB,eAAe,IAAIhC,QAAQ,CAACO,KAAK;MACnC,CAAC,CAAC;MACFU,MAAM,GAAI,GAAEH,MAAO,GAAEoC,UAAW,GAAE1C,cAAc,GAAI,GAAE2C,QAAS;AACrE,CAAC,GAAG,IAAK,EAAC;IACN;IACA,IAAI,OAAOzE,MAAM,KAAK,UAAU,EAAE;MAChC2E,qBAAqB,CAAC,MAAM3E,MAAM,IAAIA,MAAM,CAAC,OAAOuC,MAAM,KAAK,QAAQ,GAAGA,MAAM,GAAG,EAAE,CAAC,CAAC;IACzF;IACA,OAAOA,MAAM;EACf;EACA;EACAgB,cAAcA,CAACxD,MAAM,EAAE6E,EAAE,EAAE;IACzB7E,MAAM,CAACgB,QAAQ,CAAC,UAASC,KAAK,EAAE;MAC9B,IAAIA,KAAK,YAAYtB,IAAI,IAAIsB,KAAK,CAACC,MAAM,EAAE;QACzC,MAAMC,IAAI,GAAGF,KAAK;QAClB,MAAMG,QAAQ,GAAGD,IAAI,CAACC,QAAQ;QAC9B,IAAI,CAACA,QAAQ,CAACC,gBAAgB,EAAE;UAC9B,MAAM,IAAIC,KAAK,CAAC,kEAAkE,CAAC;QACrF;QACA,IAAIF,QAAQ,CAAC0D,YAAY,CAAC,UAAU,CAAC,EAAE;UACrCD,EAAE,CAAC1D,IAAI,EAAEC,QAAQ,CAAC;QACpB;MACF;IACF,CAAC,CAAC;EACJ;AACF;AACA,SACEtB,WAAW"},"metadata":{},"sourceType":"module","externalDependencies":[]}