{"ast":null,"code":"import _createClass from \"/home/krug/Coding/JavaScript/Websites/Personal/personal/node_modules/.pnpm/@babel+runtime@7.22.3/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _classCallCheck from \"/home/krug/Coding/JavaScript/Websites/Personal/personal/node_modules/.pnpm/@babel+runtime@7.22.3/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _inherits from \"/home/krug/Coding/JavaScript/Websites/Personal/personal/node_modules/.pnpm/@babel+runtime@7.22.3/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/home/krug/Coding/JavaScript/Websites/Personal/personal/node_modules/.pnpm/@babel+runtime@7.22.3/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { Object3D, Box2, Color, Vector3, Matrix3, Matrix4, Camera } from \"three\";\nimport { Projector, RenderableSprite, RenderableLine, RenderableFace } from \"./Projector.js\";\nvar SVGObject = /*#__PURE__*/function (_Object3D) {\n  _inherits(SVGObject, _Object3D);\n  var _super = _createSuper(SVGObject);\n  function SVGObject(node) {\n    var _this2;\n    _classCallCheck(this, SVGObject);\n    _this2 = _super.call(this);\n    _this2.isSVGObject = true;\n    _this2.node = node;\n    return _this2;\n  }\n  return _createClass(SVGObject);\n}(Object3D);\nvar SVGRenderer = /*#__PURE__*/_createClass(function SVGRenderer() {\n  _classCallCheck(this, SVGRenderer);\n  var _renderData,\n    _elements,\n    _lights,\n    _svgWidth,\n    _svgHeight,\n    _svgWidthHalf,\n    _svgHeightHalf,\n    _v1,\n    _v2,\n    _v3,\n    _svgNode,\n    _pathCount = 0,\n    _precision = null,\n    _quality = 1,\n    _currentPath,\n    _currentStyle;\n  var _this = this,\n    _clipBox = new Box2(),\n    _elemBox = new Box2(),\n    _color = new Color(),\n    _diffuseColor = new Color(),\n    _ambientLight = new Color(),\n    _directionalLights = new Color(),\n    _pointLights = new Color(),\n    _clearColor = new Color(),\n    _vector3 = new Vector3(),\n    _centroid = new Vector3(),\n    _normal = new Vector3(),\n    _normalViewMatrix = new Matrix3(),\n    _viewMatrix = new Matrix4(),\n    _viewProjectionMatrix = new Matrix4(),\n    _svgPathPool = [],\n    _projector = new Projector(),\n    _svg = document.createElementNS(\"http://www.w3.org/2000/svg\", \"svg\");\n  this.domElement = _svg;\n  this.autoClear = true;\n  this.sortObjects = true;\n  this.sortElements = true;\n  this.overdraw = 0.5;\n  this.info = {\n    render: {\n      vertices: 0,\n      faces: 0\n    }\n  };\n  this.setQuality = function (quality) {\n    switch (quality) {\n      case \"high\":\n        _quality = 1;\n        break;\n      case \"low\":\n        _quality = 0;\n        break;\n    }\n  };\n  this.setClearColor = function (color) {\n    _clearColor.set(color);\n  };\n  this.setPixelRatio = function () {};\n  this.setSize = function (width, height) {\n    _svgWidth = width;\n    _svgHeight = height;\n    _svgWidthHalf = _svgWidth / 2;\n    _svgHeightHalf = _svgHeight / 2;\n    _svg.setAttribute(\"viewBox\", -_svgWidthHalf + \" \" + -_svgHeightHalf + \" \" + _svgWidth + \" \" + _svgHeight);\n    _svg.setAttribute(\"width\", _svgWidth);\n    _svg.setAttribute(\"height\", _svgHeight);\n    _clipBox.min.set(-_svgWidthHalf, -_svgHeightHalf);\n    _clipBox.max.set(_svgWidthHalf, _svgHeightHalf);\n  };\n  this.getSize = function () {\n    return {\n      width: _svgWidth,\n      height: _svgHeight\n    };\n  };\n  this.setPrecision = function (precision) {\n    _precision = precision;\n  };\n  function removeChildNodes() {\n    _pathCount = 0;\n    while (_svg.childNodes.length > 0) {\n      _svg.removeChild(_svg.childNodes[0]);\n    }\n  }\n  function convert(c) {\n    return _precision !== null ? c.toFixed(_precision) : c;\n  }\n  this.clear = function () {\n    removeChildNodes();\n    _svg.style.backgroundColor = _clearColor.getStyle();\n  };\n  this.render = function (scene, camera) {\n    if (camera instanceof Camera === false) {\n      console.error(\"THREE.SVGRenderer.render: camera is not an instance of Camera.\");\n      return;\n    }\n    var background = scene.background;\n    if (background && background.isColor) {\n      removeChildNodes();\n      _svg.style.backgroundColor = background.getStyle();\n    } else if (this.autoClear === true) {\n      this.clear();\n    }\n    _this.info.render.vertices = 0;\n    _this.info.render.faces = 0;\n    _viewMatrix.copy(camera.matrixWorldInverse);\n    _viewProjectionMatrix.multiplyMatrices(camera.projectionMatrix, _viewMatrix);\n    _renderData = _projector.projectScene(scene, camera, this.sortObjects, this.sortElements);\n    _elements = _renderData.elements;\n    _lights = _renderData.lights;\n    _normalViewMatrix.getNormalMatrix(camera.matrixWorldInverse);\n    calculateLights(_lights);\n    _currentPath = \"\";\n    _currentStyle = \"\";\n    for (var e = 0, el = _elements.length; e < el; e++) {\n      var element = _elements[e];\n      var material = element.material;\n      if (material === void 0 || material.opacity === 0) continue;\n      _elemBox.makeEmpty();\n      if (element instanceof RenderableSprite) {\n        _v1 = element;\n        _v1.x *= _svgWidthHalf;\n        _v1.y *= -_svgHeightHalf;\n        renderSprite(_v1, element, material);\n      } else if (element instanceof RenderableLine) {\n        _v1 = element.v1;\n        _v2 = element.v2;\n        _v1.positionScreen.x *= _svgWidthHalf;\n        _v1.positionScreen.y *= -_svgHeightHalf;\n        _v2.positionScreen.x *= _svgWidthHalf;\n        _v2.positionScreen.y *= -_svgHeightHalf;\n        _elemBox.setFromPoints([_v1.positionScreen, _v2.positionScreen]);\n        if (_clipBox.intersectsBox(_elemBox) === true) {\n          renderLine(_v1, _v2, material);\n        }\n      } else if (element instanceof RenderableFace) {\n        _v1 = element.v1;\n        _v2 = element.v2;\n        _v3 = element.v3;\n        if (_v1.positionScreen.z < -1 || _v1.positionScreen.z > 1) continue;\n        if (_v2.positionScreen.z < -1 || _v2.positionScreen.z > 1) continue;\n        if (_v3.positionScreen.z < -1 || _v3.positionScreen.z > 1) continue;\n        _v1.positionScreen.x *= _svgWidthHalf;\n        _v1.positionScreen.y *= -_svgHeightHalf;\n        _v2.positionScreen.x *= _svgWidthHalf;\n        _v2.positionScreen.y *= -_svgHeightHalf;\n        _v3.positionScreen.x *= _svgWidthHalf;\n        _v3.positionScreen.y *= -_svgHeightHalf;\n        if (this.overdraw > 0) {\n          expand(_v1.positionScreen, _v2.positionScreen, this.overdraw);\n          expand(_v2.positionScreen, _v3.positionScreen, this.overdraw);\n          expand(_v3.positionScreen, _v1.positionScreen, this.overdraw);\n        }\n        _elemBox.setFromPoints([_v1.positionScreen, _v2.positionScreen, _v3.positionScreen]);\n        if (_clipBox.intersectsBox(_elemBox) === true) {\n          renderFace3(_v1, _v2, _v3, element, material);\n        }\n      }\n    }\n    flushPath();\n    scene.traverseVisible(function (object) {\n      if (object.isSVGObject) {\n        _vector3.setFromMatrixPosition(object.matrixWorld);\n        _vector3.applyMatrix4(_viewProjectionMatrix);\n        if (_vector3.z < -1 || _vector3.z > 1) return;\n        var x = _vector3.x * _svgWidthHalf;\n        var y = -_vector3.y * _svgHeightHalf;\n        var node = object.node;\n        node.setAttribute(\"transform\", \"translate(\" + x + \",\" + y + \")\");\n        _svg.appendChild(node);\n      }\n    });\n  };\n  function calculateLights(lights) {\n    _ambientLight.setRGB(0, 0, 0);\n    _directionalLights.setRGB(0, 0, 0);\n    _pointLights.setRGB(0, 0, 0);\n    for (var l = 0, ll = lights.length; l < ll; l++) {\n      var light = lights[l];\n      var lightColor = light.color;\n      if (light.isAmbientLight) {\n        _ambientLight.r += lightColor.r;\n        _ambientLight.g += lightColor.g;\n        _ambientLight.b += lightColor.b;\n      } else if (light.isDirectionalLight) {\n        _directionalLights.r += lightColor.r;\n        _directionalLights.g += lightColor.g;\n        _directionalLights.b += lightColor.b;\n      } else if (light.isPointLight) {\n        _pointLights.r += lightColor.r;\n        _pointLights.g += lightColor.g;\n        _pointLights.b += lightColor.b;\n      }\n    }\n  }\n  function calculateLight(lights, position, normal, color) {\n    for (var l = 0, ll = lights.length; l < ll; l++) {\n      var light = lights[l];\n      var lightColor = light.color;\n      if (light.isDirectionalLight) {\n        var lightPosition = _vector3.setFromMatrixPosition(light.matrixWorld).normalize();\n        var amount = normal.dot(lightPosition);\n        if (amount <= 0) continue;\n        amount *= light.intensity;\n        color.r += lightColor.r * amount;\n        color.g += lightColor.g * amount;\n        color.b += lightColor.b * amount;\n      } else if (light.isPointLight) {\n        var _lightPosition = _vector3.setFromMatrixPosition(light.matrixWorld);\n        var _amount = normal.dot(_vector3.subVectors(_lightPosition, position).normalize());\n        if (_amount <= 0) continue;\n        _amount *= light.distance == 0 ? 1 : 1 - Math.min(position.distanceTo(_lightPosition) / light.distance, 1);\n        if (_amount == 0) continue;\n        _amount *= light.intensity;\n        color.r += lightColor.r * _amount;\n        color.g += lightColor.g * _amount;\n        color.b += lightColor.b * _amount;\n      }\n    }\n  }\n  function renderSprite(v1, element, material) {\n    var scaleX = element.scale.x * _svgWidthHalf;\n    var scaleY = element.scale.y * _svgHeightHalf;\n    if (material.isPointsMaterial) {\n      scaleX *= material.size;\n      scaleY *= material.size;\n    }\n    var path = \"M\" + convert(v1.x - scaleX * 0.5) + \",\" + convert(v1.y - scaleY * 0.5) + \"h\" + convert(scaleX) + \"v\" + convert(scaleY) + \"h\" + convert(-scaleX) + \"z\";\n    var style = \"\";\n    if (material.isSpriteMaterial || material.isPointsMaterial) {\n      style = \"fill:\" + material.color.getStyle() + \";fill-opacity:\" + material.opacity;\n    }\n    addPath(style, path);\n  }\n  function renderLine(v1, v2, material) {\n    var path = \"M\" + convert(v1.positionScreen.x) + \",\" + convert(v1.positionScreen.y) + \"L\" + convert(v2.positionScreen.x) + \",\" + convert(v2.positionScreen.y);\n    if (material.isLineBasicMaterial) {\n      var style = \"fill:none;stroke:\" + material.color.getStyle() + \";stroke-opacity:\" + material.opacity + \";stroke-width:\" + material.linewidth + \";stroke-linecap:\" + material.linecap;\n      if (material.isLineDashedMaterial) {\n        style = style + \";stroke-dasharray:\" + material.dashSize + \",\" + material.gapSize;\n      }\n      addPath(style, path);\n    }\n  }\n  function renderFace3(v1, v2, v3, element, material) {\n    _this.info.render.vertices += 3;\n    _this.info.render.faces++;\n    var path = \"M\" + convert(v1.positionScreen.x) + \",\" + convert(v1.positionScreen.y) + \"L\" + convert(v2.positionScreen.x) + \",\" + convert(v2.positionScreen.y) + \"L\" + convert(v3.positionScreen.x) + \",\" + convert(v3.positionScreen.y) + \"z\";\n    var style = \"\";\n    if (material.isMeshBasicMaterial) {\n      _color.copy(material.color);\n      if (material.vertexColors) {\n        _color.multiply(element.color);\n      }\n    } else if (material.isMeshLambertMaterial || material.isMeshPhongMaterial || material.isMeshStandardMaterial) {\n      _diffuseColor.copy(material.color);\n      if (material.vertexColors) {\n        _diffuseColor.multiply(element.color);\n      }\n      _color.copy(_ambientLight);\n      _centroid.copy(v1.positionWorld).add(v2.positionWorld).add(v3.positionWorld).divideScalar(3);\n      calculateLight(_lights, _centroid, element.normalModel, _color);\n      _color.multiply(_diffuseColor).add(material.emissive);\n    } else if (material.isMeshNormalMaterial) {\n      _normal.copy(element.normalModel).applyMatrix3(_normalViewMatrix).normalize();\n      _color.setRGB(_normal.x, _normal.y, _normal.z).multiplyScalar(0.5).addScalar(0.5);\n    }\n    if (material.wireframe) {\n      style = \"fill:none;stroke:\" + _color.getStyle() + \";stroke-opacity:\" + material.opacity + \";stroke-width:\" + material.wireframeLinewidth + \";stroke-linecap:\" + material.wireframeLinecap + \";stroke-linejoin:\" + material.wireframeLinejoin;\n    } else {\n      style = \"fill:\" + _color.getStyle() + \";fill-opacity:\" + material.opacity;\n    }\n    addPath(style, path);\n  }\n  function expand(v1, v2, pixels) {\n    var x = v2.x - v1.x,\n      y = v2.y - v1.y;\n    var det = x * x + y * y;\n    if (det === 0) return;\n    var idet = pixels / Math.sqrt(det);\n    x *= idet;\n    y *= idet;\n    v2.x += x;\n    v2.y += y;\n    v1.x -= x;\n    v1.y -= y;\n  }\n  function addPath(style, path) {\n    if (_currentStyle === style) {\n      _currentPath += path;\n    } else {\n      flushPath();\n      _currentStyle = style;\n      _currentPath = path;\n    }\n  }\n  function flushPath() {\n    if (_currentPath) {\n      _svgNode = getPathNode(_pathCount++);\n      _svgNode.setAttribute(\"d\", _currentPath);\n      _svgNode.setAttribute(\"style\", _currentStyle);\n      _svg.appendChild(_svgNode);\n    }\n    _currentPath = \"\";\n    _currentStyle = \"\";\n  }\n  function getPathNode(id) {\n    if (_svgPathPool[id] == null) {\n      _svgPathPool[id] = document.createElementNS(\"http://www.w3.org/2000/svg\", \"path\");\n      if (_quality == 0) {\n        _svgPathPool[id].setAttribute(\"shape-rendering\", \"crispEdges\");\n      }\n      return _svgPathPool[id];\n    }\n    return _svgPathPool[id];\n  }\n});\nexport { SVGObject, SVGRenderer };","map":{"version":3,"names":["Object3D","Box2","Color","Vector3","Matrix3","Matrix4","Camera","Projector","RenderableSprite","RenderableLine","RenderableFace","SVGObject","_Object3D","_inherits","_super","_createSuper","node","_this2","_classCallCheck","call","isSVGObject","_createClass","SVGRenderer","_renderData","_elements","_lights","_svgWidth","_svgHeight","_svgWidthHalf","_svgHeightHalf","_v1","_v2","_v3","_svgNode","_pathCount","_precision","_quality","_currentPath","_currentStyle","_this","_clipBox","_elemBox","_color","_diffuseColor","_ambientLight","_directionalLights","_pointLights","_clearColor","_vector3","_centroid","_normal","_normalViewMatrix","_viewMatrix","_viewProjectionMatrix","_svgPathPool","_projector","_svg","document","createElementNS","domElement","autoClear","sortObjects","sortElements","overdraw","info","render","vertices","faces","setQuality","quality","setClearColor","color","set","setPixelRatio","setSize","width","height","setAttribute","min","max","getSize","setPrecision","precision","removeChildNodes","childNodes","length","removeChild","convert","c","toFixed","clear","style","backgroundColor","getStyle","scene","camera","console","error","background","isColor","copy","matrixWorldInverse","multiplyMatrices","projectionMatrix","projectScene","elements","lights","getNormalMatrix","calculateLights","e","el","element","material","opacity","makeEmpty","x","y","renderSprite","v1","v2","positionScreen","setFromPoints","intersectsBox","renderLine","v3","z","expand","renderFace3","flushPath","traverseVisible","object","setFromMatrixPosition","matrixWorld","applyMatrix4","appendChild","setRGB","l","ll","light","lightColor","isAmbientLight","r","g","b","isDirectionalLight","isPointLight","calculateLight","position","normal","lightPosition","normalize","amount","dot","intensity","subVectors","distance","Math","distanceTo","scaleX","scale","scaleY","isPointsMaterial","size","path","isSpriteMaterial","addPath","isLineBasicMaterial","linewidth","linecap","isLineDashedMaterial","dashSize","gapSize","isMeshBasicMaterial","vertexColors","multiply","isMeshLambertMaterial","isMeshPhongMaterial","isMeshStandardMaterial","positionWorld","add","divideScalar","normalModel","emissive","isMeshNormalMaterial","applyMatrix3","multiplyScalar","addScalar","wireframe","wireframeLinewidth","wireframeLinecap","wireframeLinejoin","pixels","det","idet","sqrt","getPathNode","id"],"sources":["/home/krug/Coding/JavaScript/Websites/Personal/personal/node_modules/.pnpm/three-stdlib@2.23.7_three@0.151.3/node_modules/three-stdlib/renderers/SVGRenderer.js"],"sourcesContent":["import { Object3D, Box2, Color, Vector3, Matrix3, Matrix4, Camera } from \"three\";\nimport { Projector, RenderableSprite, RenderableLine, RenderableFace } from \"./Projector.js\";\nclass SVGObject extends Object3D {\n  constructor(node) {\n    super();\n    this.isSVGObject = true;\n    this.node = node;\n  }\n}\nclass SVGRenderer {\n  constructor() {\n    let _renderData, _elements, _lights, _svgWidth, _svgHeight, _svgWidthHalf, _svgHeightHalf, _v1, _v2, _v3, _svgNode, _pathCount = 0, _precision = null, _quality = 1, _currentPath, _currentStyle;\n    const _this = this, _clipBox = new Box2(), _elemBox = new Box2(), _color = new Color(), _diffuseColor = new Color(), _ambientLight = new Color(), _directionalLights = new Color(), _pointLights = new Color(), _clearColor = new Color(), _vector3 = new Vector3(), _centroid = new Vector3(), _normal = new Vector3(), _normalViewMatrix = new Matrix3(), _viewMatrix = new Matrix4(), _viewProjectionMatrix = new Matrix4(), _svgPathPool = [], _projector = new Projector(), _svg = document.createElementNS(\"http://www.w3.org/2000/svg\", \"svg\");\n    this.domElement = _svg;\n    this.autoClear = true;\n    this.sortObjects = true;\n    this.sortElements = true;\n    this.overdraw = 0.5;\n    this.info = {\n      render: {\n        vertices: 0,\n        faces: 0\n      }\n    };\n    this.setQuality = function(quality) {\n      switch (quality) {\n        case \"high\":\n          _quality = 1;\n          break;\n        case \"low\":\n          _quality = 0;\n          break;\n      }\n    };\n    this.setClearColor = function(color) {\n      _clearColor.set(color);\n    };\n    this.setPixelRatio = function() {\n    };\n    this.setSize = function(width, height) {\n      _svgWidth = width;\n      _svgHeight = height;\n      _svgWidthHalf = _svgWidth / 2;\n      _svgHeightHalf = _svgHeight / 2;\n      _svg.setAttribute(\"viewBox\", -_svgWidthHalf + \" \" + -_svgHeightHalf + \" \" + _svgWidth + \" \" + _svgHeight);\n      _svg.setAttribute(\"width\", _svgWidth);\n      _svg.setAttribute(\"height\", _svgHeight);\n      _clipBox.min.set(-_svgWidthHalf, -_svgHeightHalf);\n      _clipBox.max.set(_svgWidthHalf, _svgHeightHalf);\n    };\n    this.getSize = function() {\n      return {\n        width: _svgWidth,\n        height: _svgHeight\n      };\n    };\n    this.setPrecision = function(precision) {\n      _precision = precision;\n    };\n    function removeChildNodes() {\n      _pathCount = 0;\n      while (_svg.childNodes.length > 0) {\n        _svg.removeChild(_svg.childNodes[0]);\n      }\n    }\n    function convert(c) {\n      return _precision !== null ? c.toFixed(_precision) : c;\n    }\n    this.clear = function() {\n      removeChildNodes();\n      _svg.style.backgroundColor = _clearColor.getStyle();\n    };\n    this.render = function(scene, camera) {\n      if (camera instanceof Camera === false) {\n        console.error(\"THREE.SVGRenderer.render: camera is not an instance of Camera.\");\n        return;\n      }\n      const background = scene.background;\n      if (background && background.isColor) {\n        removeChildNodes();\n        _svg.style.backgroundColor = background.getStyle();\n      } else if (this.autoClear === true) {\n        this.clear();\n      }\n      _this.info.render.vertices = 0;\n      _this.info.render.faces = 0;\n      _viewMatrix.copy(camera.matrixWorldInverse);\n      _viewProjectionMatrix.multiplyMatrices(camera.projectionMatrix, _viewMatrix);\n      _renderData = _projector.projectScene(scene, camera, this.sortObjects, this.sortElements);\n      _elements = _renderData.elements;\n      _lights = _renderData.lights;\n      _normalViewMatrix.getNormalMatrix(camera.matrixWorldInverse);\n      calculateLights(_lights);\n      _currentPath = \"\";\n      _currentStyle = \"\";\n      for (let e = 0, el = _elements.length; e < el; e++) {\n        const element = _elements[e];\n        const material = element.material;\n        if (material === void 0 || material.opacity === 0)\n          continue;\n        _elemBox.makeEmpty();\n        if (element instanceof RenderableSprite) {\n          _v1 = element;\n          _v1.x *= _svgWidthHalf;\n          _v1.y *= -_svgHeightHalf;\n          renderSprite(_v1, element, material);\n        } else if (element instanceof RenderableLine) {\n          _v1 = element.v1;\n          _v2 = element.v2;\n          _v1.positionScreen.x *= _svgWidthHalf;\n          _v1.positionScreen.y *= -_svgHeightHalf;\n          _v2.positionScreen.x *= _svgWidthHalf;\n          _v2.positionScreen.y *= -_svgHeightHalf;\n          _elemBox.setFromPoints([_v1.positionScreen, _v2.positionScreen]);\n          if (_clipBox.intersectsBox(_elemBox) === true) {\n            renderLine(_v1, _v2, material);\n          }\n        } else if (element instanceof RenderableFace) {\n          _v1 = element.v1;\n          _v2 = element.v2;\n          _v3 = element.v3;\n          if (_v1.positionScreen.z < -1 || _v1.positionScreen.z > 1)\n            continue;\n          if (_v2.positionScreen.z < -1 || _v2.positionScreen.z > 1)\n            continue;\n          if (_v3.positionScreen.z < -1 || _v3.positionScreen.z > 1)\n            continue;\n          _v1.positionScreen.x *= _svgWidthHalf;\n          _v1.positionScreen.y *= -_svgHeightHalf;\n          _v2.positionScreen.x *= _svgWidthHalf;\n          _v2.positionScreen.y *= -_svgHeightHalf;\n          _v3.positionScreen.x *= _svgWidthHalf;\n          _v3.positionScreen.y *= -_svgHeightHalf;\n          if (this.overdraw > 0) {\n            expand(_v1.positionScreen, _v2.positionScreen, this.overdraw);\n            expand(_v2.positionScreen, _v3.positionScreen, this.overdraw);\n            expand(_v3.positionScreen, _v1.positionScreen, this.overdraw);\n          }\n          _elemBox.setFromPoints([_v1.positionScreen, _v2.positionScreen, _v3.positionScreen]);\n          if (_clipBox.intersectsBox(_elemBox) === true) {\n            renderFace3(_v1, _v2, _v3, element, material);\n          }\n        }\n      }\n      flushPath();\n      scene.traverseVisible(function(object) {\n        if (object.isSVGObject) {\n          _vector3.setFromMatrixPosition(object.matrixWorld);\n          _vector3.applyMatrix4(_viewProjectionMatrix);\n          if (_vector3.z < -1 || _vector3.z > 1)\n            return;\n          const x = _vector3.x * _svgWidthHalf;\n          const y = -_vector3.y * _svgHeightHalf;\n          const node = object.node;\n          node.setAttribute(\"transform\", \"translate(\" + x + \",\" + y + \")\");\n          _svg.appendChild(node);\n        }\n      });\n    };\n    function calculateLights(lights) {\n      _ambientLight.setRGB(0, 0, 0);\n      _directionalLights.setRGB(0, 0, 0);\n      _pointLights.setRGB(0, 0, 0);\n      for (let l = 0, ll = lights.length; l < ll; l++) {\n        const light = lights[l];\n        const lightColor = light.color;\n        if (light.isAmbientLight) {\n          _ambientLight.r += lightColor.r;\n          _ambientLight.g += lightColor.g;\n          _ambientLight.b += lightColor.b;\n        } else if (light.isDirectionalLight) {\n          _directionalLights.r += lightColor.r;\n          _directionalLights.g += lightColor.g;\n          _directionalLights.b += lightColor.b;\n        } else if (light.isPointLight) {\n          _pointLights.r += lightColor.r;\n          _pointLights.g += lightColor.g;\n          _pointLights.b += lightColor.b;\n        }\n      }\n    }\n    function calculateLight(lights, position, normal, color) {\n      for (let l = 0, ll = lights.length; l < ll; l++) {\n        const light = lights[l];\n        const lightColor = light.color;\n        if (light.isDirectionalLight) {\n          const lightPosition = _vector3.setFromMatrixPosition(light.matrixWorld).normalize();\n          let amount = normal.dot(lightPosition);\n          if (amount <= 0)\n            continue;\n          amount *= light.intensity;\n          color.r += lightColor.r * amount;\n          color.g += lightColor.g * amount;\n          color.b += lightColor.b * amount;\n        } else if (light.isPointLight) {\n          const lightPosition = _vector3.setFromMatrixPosition(light.matrixWorld);\n          let amount = normal.dot(_vector3.subVectors(lightPosition, position).normalize());\n          if (amount <= 0)\n            continue;\n          amount *= light.distance == 0 ? 1 : 1 - Math.min(position.distanceTo(lightPosition) / light.distance, 1);\n          if (amount == 0)\n            continue;\n          amount *= light.intensity;\n          color.r += lightColor.r * amount;\n          color.g += lightColor.g * amount;\n          color.b += lightColor.b * amount;\n        }\n      }\n    }\n    function renderSprite(v1, element, material) {\n      let scaleX = element.scale.x * _svgWidthHalf;\n      let scaleY = element.scale.y * _svgHeightHalf;\n      if (material.isPointsMaterial) {\n        scaleX *= material.size;\n        scaleY *= material.size;\n      }\n      const path = \"M\" + convert(v1.x - scaleX * 0.5) + \",\" + convert(v1.y - scaleY * 0.5) + \"h\" + convert(scaleX) + \"v\" + convert(scaleY) + \"h\" + convert(-scaleX) + \"z\";\n      let style = \"\";\n      if (material.isSpriteMaterial || material.isPointsMaterial) {\n        style = \"fill:\" + material.color.getStyle() + \";fill-opacity:\" + material.opacity;\n      }\n      addPath(style, path);\n    }\n    function renderLine(v1, v2, material) {\n      const path = \"M\" + convert(v1.positionScreen.x) + \",\" + convert(v1.positionScreen.y) + \"L\" + convert(v2.positionScreen.x) + \",\" + convert(v2.positionScreen.y);\n      if (material.isLineBasicMaterial) {\n        let style = \"fill:none;stroke:\" + material.color.getStyle() + \";stroke-opacity:\" + material.opacity + \";stroke-width:\" + material.linewidth + \";stroke-linecap:\" + material.linecap;\n        if (material.isLineDashedMaterial) {\n          style = style + \";stroke-dasharray:\" + material.dashSize + \",\" + material.gapSize;\n        }\n        addPath(style, path);\n      }\n    }\n    function renderFace3(v1, v2, v3, element, material) {\n      _this.info.render.vertices += 3;\n      _this.info.render.faces++;\n      const path = \"M\" + convert(v1.positionScreen.x) + \",\" + convert(v1.positionScreen.y) + \"L\" + convert(v2.positionScreen.x) + \",\" + convert(v2.positionScreen.y) + \"L\" + convert(v3.positionScreen.x) + \",\" + convert(v3.positionScreen.y) + \"z\";\n      let style = \"\";\n      if (material.isMeshBasicMaterial) {\n        _color.copy(material.color);\n        if (material.vertexColors) {\n          _color.multiply(element.color);\n        }\n      } else if (material.isMeshLambertMaterial || material.isMeshPhongMaterial || material.isMeshStandardMaterial) {\n        _diffuseColor.copy(material.color);\n        if (material.vertexColors) {\n          _diffuseColor.multiply(element.color);\n        }\n        _color.copy(_ambientLight);\n        _centroid.copy(v1.positionWorld).add(v2.positionWorld).add(v3.positionWorld).divideScalar(3);\n        calculateLight(_lights, _centroid, element.normalModel, _color);\n        _color.multiply(_diffuseColor).add(material.emissive);\n      } else if (material.isMeshNormalMaterial) {\n        _normal.copy(element.normalModel).applyMatrix3(_normalViewMatrix).normalize();\n        _color.setRGB(_normal.x, _normal.y, _normal.z).multiplyScalar(0.5).addScalar(0.5);\n      }\n      if (material.wireframe) {\n        style = \"fill:none;stroke:\" + _color.getStyle() + \";stroke-opacity:\" + material.opacity + \";stroke-width:\" + material.wireframeLinewidth + \";stroke-linecap:\" + material.wireframeLinecap + \";stroke-linejoin:\" + material.wireframeLinejoin;\n      } else {\n        style = \"fill:\" + _color.getStyle() + \";fill-opacity:\" + material.opacity;\n      }\n      addPath(style, path);\n    }\n    function expand(v1, v2, pixels) {\n      let x = v2.x - v1.x, y = v2.y - v1.y;\n      const det = x * x + y * y;\n      if (det === 0)\n        return;\n      const idet = pixels / Math.sqrt(det);\n      x *= idet;\n      y *= idet;\n      v2.x += x;\n      v2.y += y;\n      v1.x -= x;\n      v1.y -= y;\n    }\n    function addPath(style, path) {\n      if (_currentStyle === style) {\n        _currentPath += path;\n      } else {\n        flushPath();\n        _currentStyle = style;\n        _currentPath = path;\n      }\n    }\n    function flushPath() {\n      if (_currentPath) {\n        _svgNode = getPathNode(_pathCount++);\n        _svgNode.setAttribute(\"d\", _currentPath);\n        _svgNode.setAttribute(\"style\", _currentStyle);\n        _svg.appendChild(_svgNode);\n      }\n      _currentPath = \"\";\n      _currentStyle = \"\";\n    }\n    function getPathNode(id) {\n      if (_svgPathPool[id] == null) {\n        _svgPathPool[id] = document.createElementNS(\"http://www.w3.org/2000/svg\", \"path\");\n        if (_quality == 0) {\n          _svgPathPool[id].setAttribute(\"shape-rendering\", \"crispEdges\");\n        }\n        return _svgPathPool[id];\n      }\n      return _svgPathPool[id];\n    }\n  }\n}\nexport {\n  SVGObject,\n  SVGRenderer\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}