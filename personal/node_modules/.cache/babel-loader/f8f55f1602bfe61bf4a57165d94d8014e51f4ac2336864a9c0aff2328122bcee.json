{"ast":null,"code":"import _classCallCheck from \"/home/krug/Coding/JavaScript/Websites/Personal/personal/node_modules/.pnpm/@babel+runtime@7.22.3/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/home/krug/Coding/JavaScript/Websites/Personal/personal/node_modules/.pnpm/@babel+runtime@7.22.3/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _get from \"/home/krug/Coding/JavaScript/Websites/Personal/personal/node_modules/.pnpm/@babel+runtime@7.22.3/node_modules/@babel/runtime/helpers/esm/get.js\";\nimport _getPrototypeOf from \"/home/krug/Coding/JavaScript/Websites/Personal/personal/node_modules/.pnpm/@babel+runtime@7.22.3/node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js\";\nimport _inherits from \"/home/krug/Coding/JavaScript/Websites/Personal/personal/node_modules/.pnpm/@babel+runtime@7.22.3/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/home/krug/Coding/JavaScript/Websites/Personal/personal/node_modules/.pnpm/@babel+runtime@7.22.3/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nvar __defProp = Object.defineProperty;\nvar __defNormalProp = function __defNormalProp(obj, key, value) {\n  return key in obj ? __defProp(obj, key, {\n    enumerable: true,\n    configurable: true,\n    writable: true,\n    value: value\n  }) : obj[key] = value;\n};\nvar __publicField = function __publicField(obj, key, value) {\n  __defNormalProp(obj, typeof key !== \"symbol\" ? key + \"\" : key, value);\n  return value;\n};\nimport { BufferGeometry, Vector3, Uint32BufferAttribute, Float32BufferAttribute, DynamicDrawUsage, MathUtils } from \"three\";\nimport { SimplexNoise } from \"../math/SimplexNoise.js\";\nvar _LightningStrike = /*#__PURE__*/function (_BufferGeometry) {\n  _inherits(_LightningStrike, _BufferGeometry);\n  var _super = _createSuper(_LightningStrike);\n  function _LightningStrike() {\n    var _this;\n    var rayParameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    _classCallCheck(this, _LightningStrike);\n    _this = _super.call(this);\n    _this.isLightningStrike = true;\n    _this.type = \"LightningStrike\";\n    _this.init(_LightningStrike.copyParameters(rayParameters, rayParameters));\n    _this.createMesh();\n    return _this;\n  }\n  _createClass(_LightningStrike, [{\n    key: \"update\",\n    value: function update(time) {\n      if (this.isStatic) return;\n      if (this.rayParameters.isEternal || this.rayParameters.birthTime <= time && time <= this.rayParameters.deathTime) {\n        this.updateMesh(time);\n        if (time < this.subrays[0].endPropagationTime) {\n          this.state = _LightningStrike.RAY_PROPAGATING;\n        } else if (time > this.subrays[0].beginVanishingTime) {\n          this.state = _LightningStrike.RAY_VANISHING;\n        } else {\n          this.state = _LightningStrike.RAY_STEADY;\n        }\n        this.visible = true;\n      } else {\n        this.visible = false;\n        if (time < this.rayParameters.birthTime) {\n          this.state = _LightningStrike.RAY_UNBORN;\n        } else {\n          this.state = _LightningStrike.RAY_EXTINGUISHED;\n        }\n      }\n    }\n  }, {\n    key: \"init\",\n    value: function init(rayParameters) {\n      this.rayParameters = rayParameters;\n      this.maxIterations = rayParameters.maxIterations !== void 0 ? Math.floor(rayParameters.maxIterations) : 9;\n      rayParameters.maxIterations = this.maxIterations;\n      this.isStatic = rayParameters.isStatic !== void 0 ? rayParameters.isStatic : false;\n      rayParameters.isStatic = this.isStatic;\n      this.ramification = rayParameters.ramification !== void 0 ? Math.floor(rayParameters.ramification) : 5;\n      rayParameters.ramification = this.ramification;\n      this.maxSubrayRecursion = rayParameters.maxSubrayRecursion !== void 0 ? Math.floor(rayParameters.maxSubrayRecursion) : 3;\n      rayParameters.maxSubrayRecursion = this.maxSubrayRecursion;\n      this.recursionProbability = rayParameters.recursionProbability !== void 0 ? rayParameters.recursionProbability : 0.6;\n      rayParameters.recursionProbability = this.recursionProbability;\n      this.generateUVs = rayParameters.generateUVs !== void 0 ? rayParameters.generateUVs : false;\n      rayParameters.generateUVs = this.generateUVs;\n      if (rayParameters.randomGenerator !== void 0) {\n        this.randomGenerator = rayParameters.randomGenerator;\n        this.seedGenerator = rayParameters.randomGenerator;\n        if (rayParameters.noiseSeed !== void 0) {\n          this.seedGenerator.setSeed(rayParameters.noiseSeed);\n        }\n      } else {\n        this.randomGenerator = _LightningStrike.createRandomGenerator();\n        this.seedGenerator = Math;\n      }\n      if (rayParameters.onDecideSubrayCreation !== void 0) {\n        this.onDecideSubrayCreation = rayParameters.onDecideSubrayCreation;\n      } else {\n        this.createDefaultSubrayCreationCallbacks();\n        if (rayParameters.onSubrayCreation !== void 0) {\n          this.onSubrayCreation = rayParameters.onSubrayCreation;\n        }\n      }\n      this.state = _LightningStrike.RAY_INITIALIZED;\n      this.maxSubrays = Math.ceil(1 + Math.pow(this.ramification, Math.max(0, this.maxSubrayRecursion - 1)));\n      rayParameters.maxSubrays = this.maxSubrays;\n      this.maxRaySegments = 2 * (1 << this.maxIterations);\n      this.subrays = [];\n      for (var i = 0; i < this.maxSubrays; i++) {\n        this.subrays.push(this.createSubray());\n      }\n      this.raySegments = [];\n      for (var _i = 0; _i < this.maxRaySegments; _i++) {\n        this.raySegments.push(this.createSegment());\n      }\n      this.time = 0;\n      this.timeFraction = 0;\n      this.currentSegmentCallback = null;\n      this.currentCreateTriangleVertices = this.generateUVs ? this.createTriangleVerticesWithUVs : this.createTriangleVerticesWithoutUVs;\n      this.numSubrays = 0;\n      this.currentSubray = null;\n      this.currentSegmentIndex = 0;\n      this.isInitialSegment = false;\n      this.subrayProbability = 0;\n      this.currentVertex = 0;\n      this.currentIndex = 0;\n      this.currentCoordinate = 0;\n      this.currentUVCoordinate = 0;\n      this.vertices = null;\n      this.uvs = null;\n      this.indices = null;\n      this.positionAttribute = null;\n      this.uvsAttribute = null;\n      this.simplexX = new SimplexNoise(this.seedGenerator);\n      this.simplexY = new SimplexNoise(this.seedGenerator);\n      this.simplexZ = new SimplexNoise(this.seedGenerator);\n      this.forwards = new Vector3();\n      this.forwardsFill = new Vector3();\n      this.side = new Vector3();\n      this.down = new Vector3();\n      this.middlePos = new Vector3();\n      this.middleLinPos = new Vector3();\n      this.newPos = new Vector3();\n      this.vPos = new Vector3();\n      this.cross1 = new Vector3();\n    }\n  }, {\n    key: \"createMesh\",\n    value: function createMesh() {\n      var maxDrawableSegmentsPerSubRay = 1 << this.maxIterations;\n      var maxVerts = 3 * (maxDrawableSegmentsPerSubRay + 1) * this.maxSubrays;\n      var maxIndices = 18 * maxDrawableSegmentsPerSubRay * this.maxSubrays;\n      this.vertices = new Float32Array(maxVerts * 3);\n      this.indices = new Uint32Array(maxIndices);\n      if (this.generateUVs) {\n        this.uvs = new Float32Array(maxVerts * 2);\n      }\n      this.fillMesh(0);\n      this.setIndex(new Uint32BufferAttribute(this.indices, 1));\n      this.positionAttribute = new Float32BufferAttribute(this.vertices, 3);\n      this.setAttribute(\"position\", this.positionAttribute);\n      if (this.generateUVs) {\n        this.uvsAttribute = new Float32BufferAttribute(new Float32Array(this.uvs), 2);\n        this.setAttribute(\"uv\", this.uvsAttribute);\n      }\n      if (!this.isStatic) {\n        this.index.usage = DynamicDrawUsage;\n        this.positionAttribute.usage = DynamicDrawUsage;\n        if (this.generateUVs) {\n          this.uvsAttribute.usage = DynamicDrawUsage;\n        }\n      }\n      this.vertices = this.positionAttribute.array;\n      this.indices = this.index.array;\n      if (this.generateUVs) {\n        this.uvs = this.uvsAttribute.array;\n      }\n    }\n  }, {\n    key: \"updateMesh\",\n    value: function updateMesh(time) {\n      this.fillMesh(time);\n      this.drawRange.count = this.currentIndex;\n      this.index.needsUpdate = true;\n      this.positionAttribute.needsUpdate = true;\n      if (this.generateUVs) {\n        this.uvsAttribute.needsUpdate = true;\n      }\n    }\n  }, {\n    key: \"fillMesh\",\n    value: function fillMesh(time) {\n      var scope = this;\n      this.currentVertex = 0;\n      this.currentIndex = 0;\n      this.currentCoordinate = 0;\n      this.currentUVCoordinate = 0;\n      this.fractalRay(time, function fillVertices(segment) {\n        var subray = scope.currentSubray;\n        if (time < subray.birthTime) {\n          return;\n        } else if (this.rayParameters.isEternal && scope.currentSubray.recursion == 0) {\n          scope.createPrism(segment);\n          scope.onDecideSubrayCreation(segment, scope);\n        } else if (time < subray.endPropagationTime) {\n          if (scope.timeFraction >= segment.fraction0 * subray.propagationTimeFactor) {\n            scope.createPrism(segment);\n            scope.onDecideSubrayCreation(segment, scope);\n          }\n        } else if (time < subray.beginVanishingTime) {\n          scope.createPrism(segment);\n          scope.onDecideSubrayCreation(segment, scope);\n        } else {\n          if (scope.timeFraction <= subray.vanishingTimeFactor + segment.fraction1 * (1 - subray.vanishingTimeFactor)) {\n            scope.createPrism(segment);\n          }\n          scope.onDecideSubrayCreation(segment, scope);\n        }\n      });\n    }\n  }, {\n    key: \"addNewSubray\",\n    value: function addNewSubray() {\n      return this.subrays[this.numSubrays++];\n    }\n  }, {\n    key: \"initSubray\",\n    value: function initSubray(subray, rayParameters) {\n      subray.pos0.copy(rayParameters.sourceOffset);\n      subray.pos1.copy(rayParameters.destOffset);\n      subray.up0.copy(rayParameters.up0);\n      subray.up1.copy(rayParameters.up1);\n      subray.radius0 = rayParameters.radius0;\n      subray.radius1 = rayParameters.radius1;\n      subray.birthTime = rayParameters.birthTime;\n      subray.deathTime = rayParameters.deathTime;\n      subray.timeScale = rayParameters.timeScale;\n      subray.roughness = rayParameters.roughness;\n      subray.straightness = rayParameters.straightness;\n      subray.propagationTimeFactor = rayParameters.propagationTimeFactor;\n      subray.vanishingTimeFactor = rayParameters.vanishingTimeFactor;\n      subray.maxIterations = this.maxIterations;\n      subray.seed = rayParameters.noiseSeed !== void 0 ? rayParameters.noiseSeed : 0;\n      subray.recursion = 0;\n    }\n  }, {\n    key: \"fractalRay\",\n    value: function fractalRay(time, segmentCallback) {\n      this.time = time;\n      this.currentSegmentCallback = segmentCallback;\n      this.numSubrays = 0;\n      this.initSubray(this.addNewSubray(), this.rayParameters);\n      for (var subrayIndex = 0; subrayIndex < this.numSubrays; subrayIndex++) {\n        var subray = this.subrays[subrayIndex];\n        this.currentSubray = subray;\n        this.randomGenerator.setSeed(subray.seed);\n        subray.endPropagationTime = MathUtils.lerp(subray.birthTime, subray.deathTime, subray.propagationTimeFactor);\n        subray.beginVanishingTime = MathUtils.lerp(subray.deathTime, subray.birthTime, 1 - subray.vanishingTimeFactor);\n        var random1 = this.randomGenerator.random;\n        subray.linPos0.set(random1(), random1(), random1()).multiplyScalar(1e3);\n        subray.linPos1.set(random1(), random1(), random1()).multiplyScalar(1e3);\n        this.timeFraction = (time - subray.birthTime) / (subray.deathTime - subray.birthTime);\n        this.currentSegmentIndex = 0;\n        this.isInitialSegment = true;\n        var segment = this.getNewSegment();\n        segment.iteration = 0;\n        segment.pos0.copy(subray.pos0);\n        segment.pos1.copy(subray.pos1);\n        segment.linPos0.copy(subray.linPos0);\n        segment.linPos1.copy(subray.linPos1);\n        segment.up0.copy(subray.up0);\n        segment.up1.copy(subray.up1);\n        segment.radius0 = subray.radius0;\n        segment.radius1 = subray.radius1;\n        segment.fraction0 = 0;\n        segment.fraction1 = 1;\n        segment.positionVariationFactor = 1 - subray.straightness;\n        this.subrayProbability = this.ramification * Math.pow(this.recursionProbability, subray.recursion) / (1 << subray.maxIterations);\n        this.fractalRayRecursive(segment);\n      }\n      this.currentSegmentCallback = null;\n      this.currentSubray = null;\n    }\n  }, {\n    key: \"fractalRayRecursive\",\n    value: function fractalRayRecursive(segment) {\n      if (segment.iteration >= this.currentSubray.maxIterations) {\n        this.currentSegmentCallback(segment);\n        return;\n      }\n      this.forwards.subVectors(segment.pos1, segment.pos0);\n      var lForwards = this.forwards.length();\n      if (lForwards < 1e-6) {\n        this.forwards.set(0, 0, 0.01);\n        lForwards = this.forwards.length();\n      }\n      var middleRadius = (segment.radius0 + segment.radius1) * 0.5;\n      var middleFraction = (segment.fraction0 + segment.fraction1) * 0.5;\n      var timeDimension = this.time * this.currentSubray.timeScale * Math.pow(2, segment.iteration);\n      this.middlePos.lerpVectors(segment.pos0, segment.pos1, 0.5);\n      this.middleLinPos.lerpVectors(segment.linPos0, segment.linPos1, 0.5);\n      var p = this.middleLinPos;\n      this.newPos.set(this.simplexX.noise4d(p.x, p.y, p.z, timeDimension), this.simplexY.noise4d(p.x, p.y, p.z, timeDimension), this.simplexZ.noise4d(p.x, p.y, p.z, timeDimension));\n      this.newPos.multiplyScalar(segment.positionVariationFactor * lForwards);\n      this.newPos.add(this.middlePos);\n      var newSegment1 = this.getNewSegment();\n      newSegment1.pos0.copy(segment.pos0);\n      newSegment1.pos1.copy(this.newPos);\n      newSegment1.linPos0.copy(segment.linPos0);\n      newSegment1.linPos1.copy(this.middleLinPos);\n      newSegment1.up0.copy(segment.up0);\n      newSegment1.up1.copy(segment.up1);\n      newSegment1.radius0 = segment.radius0;\n      newSegment1.radius1 = middleRadius;\n      newSegment1.fraction0 = segment.fraction0;\n      newSegment1.fraction1 = middleFraction;\n      newSegment1.positionVariationFactor = segment.positionVariationFactor * this.currentSubray.roughness;\n      newSegment1.iteration = segment.iteration + 1;\n      var newSegment2 = this.getNewSegment();\n      newSegment2.pos0.copy(this.newPos);\n      newSegment2.pos1.copy(segment.pos1);\n      newSegment2.linPos0.copy(this.middleLinPos);\n      newSegment2.linPos1.copy(segment.linPos1);\n      this.cross1.crossVectors(segment.up0, this.forwards.normalize());\n      newSegment2.up0.crossVectors(this.forwards, this.cross1).normalize();\n      newSegment2.up1.copy(segment.up1);\n      newSegment2.radius0 = middleRadius;\n      newSegment2.radius1 = segment.radius1;\n      newSegment2.fraction0 = middleFraction;\n      newSegment2.fraction1 = segment.fraction1;\n      newSegment2.positionVariationFactor = segment.positionVariationFactor * this.currentSubray.roughness;\n      newSegment2.iteration = segment.iteration + 1;\n      this.fractalRayRecursive(newSegment1);\n      this.fractalRayRecursive(newSegment2);\n    }\n  }, {\n    key: \"createPrism\",\n    value: function createPrism(segment) {\n      this.forwardsFill.subVectors(segment.pos1, segment.pos0).normalize();\n      if (this.isInitialSegment) {\n        this.currentCreateTriangleVertices(segment.pos0, segment.up0, this.forwardsFill, segment.radius0, 0);\n        this.isInitialSegment = false;\n      }\n      this.currentCreateTriangleVertices(segment.pos1, segment.up0, this.forwardsFill, segment.radius1, segment.fraction1);\n      this.createPrismFaces();\n    }\n  }, {\n    key: \"createTriangleVerticesWithoutUVs\",\n    value: function createTriangleVerticesWithoutUVs(pos, up, forwards, radius) {\n      this.side.crossVectors(up, forwards).multiplyScalar(radius * _LightningStrike.COS30DEG);\n      this.down.copy(up).multiplyScalar(-radius * _LightningStrike.SIN30DEG);\n      var p = this.vPos;\n      var v = this.vertices;\n      p.copy(pos).sub(this.side).add(this.down);\n      v[this.currentCoordinate++] = p.x;\n      v[this.currentCoordinate++] = p.y;\n      v[this.currentCoordinate++] = p.z;\n      p.copy(pos).add(this.side).add(this.down);\n      v[this.currentCoordinate++] = p.x;\n      v[this.currentCoordinate++] = p.y;\n      v[this.currentCoordinate++] = p.z;\n      p.copy(up).multiplyScalar(radius).add(pos);\n      v[this.currentCoordinate++] = p.x;\n      v[this.currentCoordinate++] = p.y;\n      v[this.currentCoordinate++] = p.z;\n      this.currentVertex += 3;\n    }\n  }, {\n    key: \"createTriangleVerticesWithUVs\",\n    value: function createTriangleVerticesWithUVs(pos, up, forwards, radius, u) {\n      this.side.crossVectors(up, forwards).multiplyScalar(radius * _LightningStrike.COS30DEG);\n      this.down.copy(up).multiplyScalar(-radius * _LightningStrike.SIN30DEG);\n      var p = this.vPos;\n      var v = this.vertices;\n      var uv = this.uvs;\n      p.copy(pos).sub(this.side).add(this.down);\n      v[this.currentCoordinate++] = p.x;\n      v[this.currentCoordinate++] = p.y;\n      v[this.currentCoordinate++] = p.z;\n      uv[this.currentUVCoordinate++] = u;\n      uv[this.currentUVCoordinate++] = 0;\n      p.copy(pos).add(this.side).add(this.down);\n      v[this.currentCoordinate++] = p.x;\n      v[this.currentCoordinate++] = p.y;\n      v[this.currentCoordinate++] = p.z;\n      uv[this.currentUVCoordinate++] = u;\n      uv[this.currentUVCoordinate++] = 0.5;\n      p.copy(up).multiplyScalar(radius).add(pos);\n      v[this.currentCoordinate++] = p.x;\n      v[this.currentCoordinate++] = p.y;\n      v[this.currentCoordinate++] = p.z;\n      uv[this.currentUVCoordinate++] = u;\n      uv[this.currentUVCoordinate++] = 1;\n      this.currentVertex += 3;\n    }\n  }, {\n    key: \"createPrismFaces\",\n    value: function createPrismFaces(vertex) {\n      var indices = this.indices;\n      vertex = this.currentVertex - 6;\n      indices[this.currentIndex++] = vertex + 1;\n      indices[this.currentIndex++] = vertex + 2;\n      indices[this.currentIndex++] = vertex + 5;\n      indices[this.currentIndex++] = vertex + 1;\n      indices[this.currentIndex++] = vertex + 5;\n      indices[this.currentIndex++] = vertex + 4;\n      indices[this.currentIndex++] = vertex + 0;\n      indices[this.currentIndex++] = vertex + 1;\n      indices[this.currentIndex++] = vertex + 4;\n      indices[this.currentIndex++] = vertex + 0;\n      indices[this.currentIndex++] = vertex + 4;\n      indices[this.currentIndex++] = vertex + 3;\n      indices[this.currentIndex++] = vertex + 2;\n      indices[this.currentIndex++] = vertex + 0;\n      indices[this.currentIndex++] = vertex + 3;\n      indices[this.currentIndex++] = vertex + 2;\n      indices[this.currentIndex++] = vertex + 3;\n      indices[this.currentIndex++] = vertex + 5;\n    }\n  }, {\n    key: \"createDefaultSubrayCreationCallbacks\",\n    value: function createDefaultSubrayCreationCallbacks() {\n      var random1 = this.randomGenerator.random;\n      this.onDecideSubrayCreation = function (segment, lightningStrike) {\n        var subray = lightningStrike.currentSubray;\n        var period = lightningStrike.rayParameters.subrayPeriod;\n        var dutyCycle = lightningStrike.rayParameters.subrayDutyCycle;\n        var phase0 = lightningStrike.rayParameters.isEternal && subray.recursion == 0 ? -random1() * period : MathUtils.lerp(subray.birthTime, subray.endPropagationTime, segment.fraction0) - random1() * period;\n        var phase = lightningStrike.time - phase0;\n        var currentCycle = Math.floor(phase / period);\n        var childSubraySeed = random1() * (currentCycle + 1);\n        var isActive = phase % period <= dutyCycle * period;\n        var probability = 0;\n        if (isActive) {\n          probability = lightningStrike.subrayProbability;\n        }\n        if (subray.recursion < lightningStrike.maxSubrayRecursion && lightningStrike.numSubrays < lightningStrike.maxSubrays && random1() < probability) {\n          var childSubray = lightningStrike.addNewSubray();\n          var parentSeed = lightningStrike.randomGenerator.getSeed();\n          childSubray.seed = childSubraySeed;\n          lightningStrike.randomGenerator.setSeed(childSubraySeed);\n          childSubray.recursion = subray.recursion + 1;\n          childSubray.maxIterations = Math.max(1, subray.maxIterations - 1);\n          childSubray.linPos0.set(random1(), random1(), random1()).multiplyScalar(1e3);\n          childSubray.linPos1.set(random1(), random1(), random1()).multiplyScalar(1e3);\n          childSubray.up0.copy(subray.up0);\n          childSubray.up1.copy(subray.up1);\n          childSubray.radius0 = segment.radius0 * lightningStrike.rayParameters.radius0Factor;\n          childSubray.radius1 = Math.min(lightningStrike.rayParameters.minRadius, segment.radius1 * lightningStrike.rayParameters.radius1Factor);\n          childSubray.birthTime = phase0 + currentCycle * period;\n          childSubray.deathTime = childSubray.birthTime + period * dutyCycle;\n          if (!lightningStrike.rayParameters.isEternal && subray.recursion == 0) {\n            childSubray.birthTime = Math.max(childSubray.birthTime, subray.birthTime);\n            childSubray.deathTime = Math.min(childSubray.deathTime, subray.deathTime);\n          }\n          childSubray.timeScale = subray.timeScale * 2;\n          childSubray.roughness = subray.roughness;\n          childSubray.straightness = subray.straightness;\n          childSubray.propagationTimeFactor = subray.propagationTimeFactor;\n          childSubray.vanishingTimeFactor = subray.vanishingTimeFactor;\n          lightningStrike.onSubrayCreation(segment, subray, childSubray, lightningStrike);\n          lightningStrike.randomGenerator.setSeed(parentSeed);\n        }\n      };\n      var vec1Pos = new Vector3();\n      var vec2Forward = new Vector3();\n      var vec3Side = new Vector3();\n      var vec4Up = new Vector3();\n      this.onSubrayCreation = function (segment, parentSubray, childSubray, lightningStrike) {\n        lightningStrike.subrayCylinderPosition(segment, parentSubray, childSubray, 0.5, 0.6, 0.2);\n      };\n      this.subrayConePosition = function (segment, parentSubray, childSubray, heightFactor, sideWidthFactor, minSideWidthFactor) {\n        childSubray.pos0.copy(segment.pos0);\n        vec1Pos.subVectors(parentSubray.pos1, parentSubray.pos0);\n        vec2Forward.copy(vec1Pos).normalize();\n        vec1Pos.multiplyScalar(segment.fraction0 + (1 - segment.fraction0) * (random1() * heightFactor));\n        var length = vec1Pos.length();\n        vec3Side.crossVectors(parentSubray.up0, vec2Forward);\n        var angle = 2 * Math.PI * random1();\n        vec3Side.multiplyScalar(Math.cos(angle));\n        vec4Up.copy(parentSubray.up0).multiplyScalar(Math.sin(angle));\n        childSubray.pos1.copy(vec3Side).add(vec4Up).multiplyScalar(length * sideWidthFactor * (minSideWidthFactor + random1() * (1 - minSideWidthFactor))).add(vec1Pos).add(parentSubray.pos0);\n      };\n      this.subrayCylinderPosition = function (segment, parentSubray, childSubray, heightFactor, sideWidthFactor, minSideWidthFactor) {\n        childSubray.pos0.copy(segment.pos0);\n        vec1Pos.subVectors(parentSubray.pos1, parentSubray.pos0);\n        vec2Forward.copy(vec1Pos).normalize();\n        vec1Pos.multiplyScalar(segment.fraction0 + (1 - segment.fraction0) * ((2 * random1() - 1) * heightFactor));\n        var length = vec1Pos.length();\n        vec3Side.crossVectors(parentSubray.up0, vec2Forward);\n        var angle = 2 * Math.PI * random1();\n        vec3Side.multiplyScalar(Math.cos(angle));\n        vec4Up.copy(parentSubray.up0).multiplyScalar(Math.sin(angle));\n        childSubray.pos1.copy(vec3Side).add(vec4Up).multiplyScalar(length * sideWidthFactor * (minSideWidthFactor + random1() * (1 - minSideWidthFactor))).add(vec1Pos).add(parentSubray.pos0);\n      };\n    }\n  }, {\n    key: \"createSubray\",\n    value: function createSubray() {\n      return {\n        seed: 0,\n        maxIterations: 0,\n        recursion: 0,\n        pos0: new Vector3(),\n        pos1: new Vector3(),\n        linPos0: new Vector3(),\n        linPos1: new Vector3(),\n        up0: new Vector3(),\n        up1: new Vector3(),\n        radius0: 0,\n        radius1: 0,\n        birthTime: 0,\n        deathTime: 0,\n        timeScale: 0,\n        roughness: 0,\n        straightness: 0,\n        propagationTimeFactor: 0,\n        vanishingTimeFactor: 0,\n        endPropagationTime: 0,\n        beginVanishingTime: 0\n      };\n    }\n  }, {\n    key: \"createSegment\",\n    value: function createSegment() {\n      return {\n        iteration: 0,\n        pos0: new Vector3(),\n        pos1: new Vector3(),\n        linPos0: new Vector3(),\n        linPos1: new Vector3(),\n        up0: new Vector3(),\n        up1: new Vector3(),\n        radius0: 0,\n        radius1: 0,\n        fraction0: 0,\n        fraction1: 0,\n        positionVariationFactor: 0\n      };\n    }\n  }, {\n    key: \"getNewSegment\",\n    value: function getNewSegment() {\n      return this.raySegments[this.currentSegmentIndex++];\n    }\n  }, {\n    key: \"copy\",\n    value: function copy(source) {\n      _get(_getPrototypeOf(_LightningStrike.prototype), \"copy\", this).call(this, source);\n      this.init(_LightningStrike.copyParameters({}, source.rayParameters));\n      return this;\n    }\n  }, {\n    key: \"clone\",\n    value: function clone() {\n      return new this.constructor(_LightningStrike.copyParameters({}, this.rayParameters));\n    }\n  }], [{\n    key: \"createRandomGenerator\",\n    value: function createRandomGenerator() {\n      var numSeeds = 2053;\n      var seeds = [];\n      for (var i = 0; i < numSeeds; i++) {\n        seeds.push(Math.random());\n      }\n      var generator = {\n        currentSeed: 0,\n        random: function random() {\n          var value = seeds[generator.currentSeed];\n          generator.currentSeed = (generator.currentSeed + 1) % numSeeds;\n          return value;\n        },\n        getSeed: function getSeed() {\n          return generator.currentSeed / numSeeds;\n        },\n        setSeed: function setSeed(seed) {\n          generator.currentSeed = Math.floor(seed * numSeeds) % numSeeds;\n        }\n      };\n      return generator;\n    }\n  }, {\n    key: \"copyParameters\",\n    value: function copyParameters() {\n      var dest = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      var source = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      var vecCopy = function vecCopy(v) {\n        if (source === dest) {\n          return v;\n        } else {\n          return v.clone();\n        }\n      };\n      dest.sourceOffset = source.sourceOffset !== void 0 ? vecCopy(source.sourceOffset) : new Vector3(0, 100, 0), dest.destOffset = source.destOffset !== void 0 ? vecCopy(source.destOffset) : new Vector3(0, 0, 0), dest.timeScale = source.timeScale !== void 0 ? source.timeScale : 1, dest.roughness = source.roughness !== void 0 ? source.roughness : 0.9, dest.straightness = source.straightness !== void 0 ? source.straightness : 0.7, dest.up0 = source.up0 !== void 0 ? vecCopy(source.up0) : new Vector3(0, 0, 1);\n      dest.up1 = source.up1 !== void 0 ? vecCopy(source.up1) : new Vector3(0, 0, 1), dest.radius0 = source.radius0 !== void 0 ? source.radius0 : 1, dest.radius1 = source.radius1 !== void 0 ? source.radius1 : 1, dest.radius0Factor = source.radius0Factor !== void 0 ? source.radius0Factor : 0.5, dest.radius1Factor = source.radius1Factor !== void 0 ? source.radius1Factor : 0.2, dest.minRadius = source.minRadius !== void 0 ? source.minRadius : 0.2,\n      // These parameters should not be changed after lightning creation. They can be changed but the ray will change its form abruptly:\n      dest.isEternal = source.isEternal !== void 0 ? source.isEternal : source.birthTime === void 0 || source.deathTime === void 0, dest.birthTime = source.birthTime, dest.deathTime = source.deathTime, dest.propagationTimeFactor = source.propagationTimeFactor !== void 0 ? source.propagationTimeFactor : 0.1, dest.vanishingTimeFactor = source.vanishingTimeFactor !== void 0 ? source.vanishingTimeFactor : 0.9, dest.subrayPeriod = source.subrayPeriod !== void 0 ? source.subrayPeriod : 4, dest.subrayDutyCycle = source.subrayDutyCycle !== void 0 ? source.subrayDutyCycle : 0.6;\n      dest.maxIterations = source.maxIterations !== void 0 ? source.maxIterations : 9;\n      dest.isStatic = source.isStatic !== void 0 ? source.isStatic : false;\n      dest.ramification = source.ramification !== void 0 ? source.ramification : 5;\n      dest.maxSubrayRecursion = source.maxSubrayRecursion !== void 0 ? source.maxSubrayRecursion : 3;\n      dest.recursionProbability = source.recursionProbability !== void 0 ? source.recursionProbability : 0.6;\n      dest.generateUVs = source.generateUVs !== void 0 ? source.generateUVs : false;\n      dest.randomGenerator = source.randomGenerator, dest.noiseSeed = source.noiseSeed, dest.onDecideSubrayCreation = source.onDecideSubrayCreation, dest.onSubrayCreation = source.onSubrayCreation;\n      return dest;\n    }\n  }]);\n  return _LightningStrike;\n}(BufferGeometry);\nvar LightningStrike = _LightningStrike;\n// Ray states\n__publicField(LightningStrike, \"RAY_INITIALIZED\", 0);\n__publicField(LightningStrike, \"RAY_UNBORN\", 1);\n__publicField(LightningStrike, \"RAY_PROPAGATING\", 2);\n__publicField(LightningStrike, \"RAY_STEADY\", 3);\n__publicField(LightningStrike, \"RAY_VANISHING\", 4);\n__publicField(LightningStrike, \"RAY_EXTINGUISHED\", 5);\n__publicField(LightningStrike, \"COS30DEG\", Math.cos(30 * Math.PI / 180));\n__publicField(LightningStrike, \"SIN30DEG\", Math.sin(30 * Math.PI / 180));\nexport { LightningStrike };","map":{"version":3,"names":["__defProp","Object","defineProperty","__defNormalProp","obj","key","value","enumerable","configurable","writable","__publicField","BufferGeometry","Vector3","Uint32BufferAttribute","Float32BufferAttribute","DynamicDrawUsage","MathUtils","SimplexNoise","_LightningStrike","_BufferGeometry","_inherits","_super","_createSuper","_this","rayParameters","arguments","length","undefined","_classCallCheck","call","isLightningStrike","type","init","copyParameters","createMesh","_createClass","update","time","isStatic","isEternal","birthTime","deathTime","updateMesh","subrays","endPropagationTime","state","RAY_PROPAGATING","beginVanishingTime","RAY_VANISHING","RAY_STEADY","visible","RAY_UNBORN","RAY_EXTINGUISHED","maxIterations","Math","floor","ramification","maxSubrayRecursion","recursionProbability","generateUVs","randomGenerator","seedGenerator","noiseSeed","setSeed","createRandomGenerator","onDecideSubrayCreation","createDefaultSubrayCreationCallbacks","onSubrayCreation","RAY_INITIALIZED","maxSubrays","ceil","pow","max","maxRaySegments","i","push","createSubray","raySegments","createSegment","timeFraction","currentSegmentCallback","currentCreateTriangleVertices","createTriangleVerticesWithUVs","createTriangleVerticesWithoutUVs","numSubrays","currentSubray","currentSegmentIndex","isInitialSegment","subrayProbability","currentVertex","currentIndex","currentCoordinate","currentUVCoordinate","vertices","uvs","indices","positionAttribute","uvsAttribute","simplexX","simplexY","simplexZ","forwards","forwardsFill","side","down","middlePos","middleLinPos","newPos","vPos","cross1","maxDrawableSegmentsPerSubRay","maxVerts","maxIndices","Float32Array","Uint32Array","fillMesh","setIndex","setAttribute","index","usage","array","drawRange","count","needsUpdate","scope","fractalRay","fillVertices","segment","subray","recursion","createPrism","fraction0","propagationTimeFactor","vanishingTimeFactor","fraction1","addNewSubray","initSubray","pos0","copy","sourceOffset","pos1","destOffset","up0","up1","radius0","radius1","timeScale","roughness","straightness","seed","segmentCallback","subrayIndex","lerp","random1","random","linPos0","set","multiplyScalar","linPos1","getNewSegment","iteration","positionVariationFactor","fractalRayRecursive","subVectors","lForwards","middleRadius","middleFraction","timeDimension","lerpVectors","p","noise4d","x","y","z","add","newSegment1","newSegment2","crossVectors","normalize","createPrismFaces","pos","up","radius","COS30DEG","SIN30DEG","v","sub","u","uv","vertex","lightningStrike","period","subrayPeriod","dutyCycle","subrayDutyCycle","phase0","phase","currentCycle","childSubraySeed","isActive","probability","childSubray","parentSeed","getSeed","radius0Factor","min","minRadius","radius1Factor","vec1Pos","vec2Forward","vec3Side","vec4Up","parentSubray","subrayCylinderPosition","subrayConePosition","heightFactor","sideWidthFactor","minSideWidthFactor","angle","PI","cos","sin","source","_get","_getPrototypeOf","prototype","clone","constructor","numSeeds","seeds","generator","currentSeed","dest","vecCopy","LightningStrike"],"sources":["/home/krug/Coding/JavaScript/Websites/Personal/personal/node_modules/.pnpm/three-stdlib@2.23.7_three@0.151.3/node_modules/three-stdlib/geometries/LightningStrike.js"],"sourcesContent":["var __defProp = Object.defineProperty;\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;\nvar __publicField = (obj, key, value) => {\n  __defNormalProp(obj, typeof key !== \"symbol\" ? key + \"\" : key, value);\n  return value;\n};\nimport { BufferGeometry, Vector3, Uint32BufferAttribute, Float32BufferAttribute, DynamicDrawUsage, MathUtils } from \"three\";\nimport { SimplexNoise } from \"../math/SimplexNoise.js\";\nconst _LightningStrike = class extends BufferGeometry {\n  constructor(rayParameters = {}) {\n    super();\n    this.isLightningStrike = true;\n    this.type = \"LightningStrike\";\n    this.init(_LightningStrike.copyParameters(rayParameters, rayParameters));\n    this.createMesh();\n  }\n  static createRandomGenerator() {\n    const numSeeds = 2053;\n    const seeds = [];\n    for (let i = 0; i < numSeeds; i++) {\n      seeds.push(Math.random());\n    }\n    const generator = {\n      currentSeed: 0,\n      random: function() {\n        const value = seeds[generator.currentSeed];\n        generator.currentSeed = (generator.currentSeed + 1) % numSeeds;\n        return value;\n      },\n      getSeed: function() {\n        return generator.currentSeed / numSeeds;\n      },\n      setSeed: function(seed) {\n        generator.currentSeed = Math.floor(seed * numSeeds) % numSeeds;\n      }\n    };\n    return generator;\n  }\n  static copyParameters(dest = {}, source = {}) {\n    const vecCopy = function(v) {\n      if (source === dest) {\n        return v;\n      } else {\n        return v.clone();\n      }\n    };\n    dest.sourceOffset = source.sourceOffset !== void 0 ? vecCopy(source.sourceOffset) : new Vector3(0, 100, 0), dest.destOffset = source.destOffset !== void 0 ? vecCopy(source.destOffset) : new Vector3(0, 0, 0), dest.timeScale = source.timeScale !== void 0 ? source.timeScale : 1, dest.roughness = source.roughness !== void 0 ? source.roughness : 0.9, dest.straightness = source.straightness !== void 0 ? source.straightness : 0.7, dest.up0 = source.up0 !== void 0 ? vecCopy(source.up0) : new Vector3(0, 0, 1);\n    dest.up1 = source.up1 !== void 0 ? vecCopy(source.up1) : new Vector3(0, 0, 1), dest.radius0 = source.radius0 !== void 0 ? source.radius0 : 1, dest.radius1 = source.radius1 !== void 0 ? source.radius1 : 1, dest.radius0Factor = source.radius0Factor !== void 0 ? source.radius0Factor : 0.5, dest.radius1Factor = source.radius1Factor !== void 0 ? source.radius1Factor : 0.2, dest.minRadius = source.minRadius !== void 0 ? source.minRadius : 0.2, // These parameters should not be changed after lightning creation. They can be changed but the ray will change its form abruptly:\n    dest.isEternal = source.isEternal !== void 0 ? source.isEternal : source.birthTime === void 0 || source.deathTime === void 0, dest.birthTime = source.birthTime, dest.deathTime = source.deathTime, dest.propagationTimeFactor = source.propagationTimeFactor !== void 0 ? source.propagationTimeFactor : 0.1, dest.vanishingTimeFactor = source.vanishingTimeFactor !== void 0 ? source.vanishingTimeFactor : 0.9, dest.subrayPeriod = source.subrayPeriod !== void 0 ? source.subrayPeriod : 4, dest.subrayDutyCycle = source.subrayDutyCycle !== void 0 ? source.subrayDutyCycle : 0.6;\n    dest.maxIterations = source.maxIterations !== void 0 ? source.maxIterations : 9;\n    dest.isStatic = source.isStatic !== void 0 ? source.isStatic : false;\n    dest.ramification = source.ramification !== void 0 ? source.ramification : 5;\n    dest.maxSubrayRecursion = source.maxSubrayRecursion !== void 0 ? source.maxSubrayRecursion : 3;\n    dest.recursionProbability = source.recursionProbability !== void 0 ? source.recursionProbability : 0.6;\n    dest.generateUVs = source.generateUVs !== void 0 ? source.generateUVs : false;\n    dest.randomGenerator = source.randomGenerator, dest.noiseSeed = source.noiseSeed, dest.onDecideSubrayCreation = source.onDecideSubrayCreation, dest.onSubrayCreation = source.onSubrayCreation;\n    return dest;\n  }\n  update(time) {\n    if (this.isStatic)\n      return;\n    if (this.rayParameters.isEternal || this.rayParameters.birthTime <= time && time <= this.rayParameters.deathTime) {\n      this.updateMesh(time);\n      if (time < this.subrays[0].endPropagationTime) {\n        this.state = _LightningStrike.RAY_PROPAGATING;\n      } else if (time > this.subrays[0].beginVanishingTime) {\n        this.state = _LightningStrike.RAY_VANISHING;\n      } else {\n        this.state = _LightningStrike.RAY_STEADY;\n      }\n      this.visible = true;\n    } else {\n      this.visible = false;\n      if (time < this.rayParameters.birthTime) {\n        this.state = _LightningStrike.RAY_UNBORN;\n      } else {\n        this.state = _LightningStrike.RAY_EXTINGUISHED;\n      }\n    }\n  }\n  init(rayParameters) {\n    this.rayParameters = rayParameters;\n    this.maxIterations = rayParameters.maxIterations !== void 0 ? Math.floor(rayParameters.maxIterations) : 9;\n    rayParameters.maxIterations = this.maxIterations;\n    this.isStatic = rayParameters.isStatic !== void 0 ? rayParameters.isStatic : false;\n    rayParameters.isStatic = this.isStatic;\n    this.ramification = rayParameters.ramification !== void 0 ? Math.floor(rayParameters.ramification) : 5;\n    rayParameters.ramification = this.ramification;\n    this.maxSubrayRecursion = rayParameters.maxSubrayRecursion !== void 0 ? Math.floor(rayParameters.maxSubrayRecursion) : 3;\n    rayParameters.maxSubrayRecursion = this.maxSubrayRecursion;\n    this.recursionProbability = rayParameters.recursionProbability !== void 0 ? rayParameters.recursionProbability : 0.6;\n    rayParameters.recursionProbability = this.recursionProbability;\n    this.generateUVs = rayParameters.generateUVs !== void 0 ? rayParameters.generateUVs : false;\n    rayParameters.generateUVs = this.generateUVs;\n    if (rayParameters.randomGenerator !== void 0) {\n      this.randomGenerator = rayParameters.randomGenerator;\n      this.seedGenerator = rayParameters.randomGenerator;\n      if (rayParameters.noiseSeed !== void 0) {\n        this.seedGenerator.setSeed(rayParameters.noiseSeed);\n      }\n    } else {\n      this.randomGenerator = _LightningStrike.createRandomGenerator();\n      this.seedGenerator = Math;\n    }\n    if (rayParameters.onDecideSubrayCreation !== void 0) {\n      this.onDecideSubrayCreation = rayParameters.onDecideSubrayCreation;\n    } else {\n      this.createDefaultSubrayCreationCallbacks();\n      if (rayParameters.onSubrayCreation !== void 0) {\n        this.onSubrayCreation = rayParameters.onSubrayCreation;\n      }\n    }\n    this.state = _LightningStrike.RAY_INITIALIZED;\n    this.maxSubrays = Math.ceil(1 + Math.pow(this.ramification, Math.max(0, this.maxSubrayRecursion - 1)));\n    rayParameters.maxSubrays = this.maxSubrays;\n    this.maxRaySegments = 2 * (1 << this.maxIterations);\n    this.subrays = [];\n    for (let i = 0; i < this.maxSubrays; i++) {\n      this.subrays.push(this.createSubray());\n    }\n    this.raySegments = [];\n    for (let i = 0; i < this.maxRaySegments; i++) {\n      this.raySegments.push(this.createSegment());\n    }\n    this.time = 0;\n    this.timeFraction = 0;\n    this.currentSegmentCallback = null;\n    this.currentCreateTriangleVertices = this.generateUVs ? this.createTriangleVerticesWithUVs : this.createTriangleVerticesWithoutUVs;\n    this.numSubrays = 0;\n    this.currentSubray = null;\n    this.currentSegmentIndex = 0;\n    this.isInitialSegment = false;\n    this.subrayProbability = 0;\n    this.currentVertex = 0;\n    this.currentIndex = 0;\n    this.currentCoordinate = 0;\n    this.currentUVCoordinate = 0;\n    this.vertices = null;\n    this.uvs = null;\n    this.indices = null;\n    this.positionAttribute = null;\n    this.uvsAttribute = null;\n    this.simplexX = new SimplexNoise(this.seedGenerator);\n    this.simplexY = new SimplexNoise(this.seedGenerator);\n    this.simplexZ = new SimplexNoise(this.seedGenerator);\n    this.forwards = new Vector3();\n    this.forwardsFill = new Vector3();\n    this.side = new Vector3();\n    this.down = new Vector3();\n    this.middlePos = new Vector3();\n    this.middleLinPos = new Vector3();\n    this.newPos = new Vector3();\n    this.vPos = new Vector3();\n    this.cross1 = new Vector3();\n  }\n  createMesh() {\n    const maxDrawableSegmentsPerSubRay = 1 << this.maxIterations;\n    const maxVerts = 3 * (maxDrawableSegmentsPerSubRay + 1) * this.maxSubrays;\n    const maxIndices = 18 * maxDrawableSegmentsPerSubRay * this.maxSubrays;\n    this.vertices = new Float32Array(maxVerts * 3);\n    this.indices = new Uint32Array(maxIndices);\n    if (this.generateUVs) {\n      this.uvs = new Float32Array(maxVerts * 2);\n    }\n    this.fillMesh(0);\n    this.setIndex(new Uint32BufferAttribute(this.indices, 1));\n    this.positionAttribute = new Float32BufferAttribute(this.vertices, 3);\n    this.setAttribute(\"position\", this.positionAttribute);\n    if (this.generateUVs) {\n      this.uvsAttribute = new Float32BufferAttribute(new Float32Array(this.uvs), 2);\n      this.setAttribute(\"uv\", this.uvsAttribute);\n    }\n    if (!this.isStatic) {\n      this.index.usage = DynamicDrawUsage;\n      this.positionAttribute.usage = DynamicDrawUsage;\n      if (this.generateUVs) {\n        this.uvsAttribute.usage = DynamicDrawUsage;\n      }\n    }\n    this.vertices = this.positionAttribute.array;\n    this.indices = this.index.array;\n    if (this.generateUVs) {\n      this.uvs = this.uvsAttribute.array;\n    }\n  }\n  updateMesh(time) {\n    this.fillMesh(time);\n    this.drawRange.count = this.currentIndex;\n    this.index.needsUpdate = true;\n    this.positionAttribute.needsUpdate = true;\n    if (this.generateUVs) {\n      this.uvsAttribute.needsUpdate = true;\n    }\n  }\n  fillMesh(time) {\n    const scope = this;\n    this.currentVertex = 0;\n    this.currentIndex = 0;\n    this.currentCoordinate = 0;\n    this.currentUVCoordinate = 0;\n    this.fractalRay(time, function fillVertices(segment) {\n      const subray = scope.currentSubray;\n      if (time < subray.birthTime) {\n        return;\n      } else if (this.rayParameters.isEternal && scope.currentSubray.recursion == 0) {\n        scope.createPrism(segment);\n        scope.onDecideSubrayCreation(segment, scope);\n      } else if (time < subray.endPropagationTime) {\n        if (scope.timeFraction >= segment.fraction0 * subray.propagationTimeFactor) {\n          scope.createPrism(segment);\n          scope.onDecideSubrayCreation(segment, scope);\n        }\n      } else if (time < subray.beginVanishingTime) {\n        scope.createPrism(segment);\n        scope.onDecideSubrayCreation(segment, scope);\n      } else {\n        if (scope.timeFraction <= subray.vanishingTimeFactor + segment.fraction1 * (1 - subray.vanishingTimeFactor)) {\n          scope.createPrism(segment);\n        }\n        scope.onDecideSubrayCreation(segment, scope);\n      }\n    });\n  }\n  addNewSubray() {\n    return this.subrays[this.numSubrays++];\n  }\n  initSubray(subray, rayParameters) {\n    subray.pos0.copy(rayParameters.sourceOffset);\n    subray.pos1.copy(rayParameters.destOffset);\n    subray.up0.copy(rayParameters.up0);\n    subray.up1.copy(rayParameters.up1);\n    subray.radius0 = rayParameters.radius0;\n    subray.radius1 = rayParameters.radius1;\n    subray.birthTime = rayParameters.birthTime;\n    subray.deathTime = rayParameters.deathTime;\n    subray.timeScale = rayParameters.timeScale;\n    subray.roughness = rayParameters.roughness;\n    subray.straightness = rayParameters.straightness;\n    subray.propagationTimeFactor = rayParameters.propagationTimeFactor;\n    subray.vanishingTimeFactor = rayParameters.vanishingTimeFactor;\n    subray.maxIterations = this.maxIterations;\n    subray.seed = rayParameters.noiseSeed !== void 0 ? rayParameters.noiseSeed : 0;\n    subray.recursion = 0;\n  }\n  fractalRay(time, segmentCallback) {\n    this.time = time;\n    this.currentSegmentCallback = segmentCallback;\n    this.numSubrays = 0;\n    this.initSubray(this.addNewSubray(), this.rayParameters);\n    for (let subrayIndex = 0; subrayIndex < this.numSubrays; subrayIndex++) {\n      const subray = this.subrays[subrayIndex];\n      this.currentSubray = subray;\n      this.randomGenerator.setSeed(subray.seed);\n      subray.endPropagationTime = MathUtils.lerp(subray.birthTime, subray.deathTime, subray.propagationTimeFactor);\n      subray.beginVanishingTime = MathUtils.lerp(subray.deathTime, subray.birthTime, 1 - subray.vanishingTimeFactor);\n      const random1 = this.randomGenerator.random;\n      subray.linPos0.set(random1(), random1(), random1()).multiplyScalar(1e3);\n      subray.linPos1.set(random1(), random1(), random1()).multiplyScalar(1e3);\n      this.timeFraction = (time - subray.birthTime) / (subray.deathTime - subray.birthTime);\n      this.currentSegmentIndex = 0;\n      this.isInitialSegment = true;\n      const segment = this.getNewSegment();\n      segment.iteration = 0;\n      segment.pos0.copy(subray.pos0);\n      segment.pos1.copy(subray.pos1);\n      segment.linPos0.copy(subray.linPos0);\n      segment.linPos1.copy(subray.linPos1);\n      segment.up0.copy(subray.up0);\n      segment.up1.copy(subray.up1);\n      segment.radius0 = subray.radius0;\n      segment.radius1 = subray.radius1;\n      segment.fraction0 = 0;\n      segment.fraction1 = 1;\n      segment.positionVariationFactor = 1 - subray.straightness;\n      this.subrayProbability = this.ramification * Math.pow(this.recursionProbability, subray.recursion) / (1 << subray.maxIterations);\n      this.fractalRayRecursive(segment);\n    }\n    this.currentSegmentCallback = null;\n    this.currentSubray = null;\n  }\n  fractalRayRecursive(segment) {\n    if (segment.iteration >= this.currentSubray.maxIterations) {\n      this.currentSegmentCallback(segment);\n      return;\n    }\n    this.forwards.subVectors(segment.pos1, segment.pos0);\n    let lForwards = this.forwards.length();\n    if (lForwards < 1e-6) {\n      this.forwards.set(0, 0, 0.01);\n      lForwards = this.forwards.length();\n    }\n    const middleRadius = (segment.radius0 + segment.radius1) * 0.5;\n    const middleFraction = (segment.fraction0 + segment.fraction1) * 0.5;\n    const timeDimension = this.time * this.currentSubray.timeScale * Math.pow(2, segment.iteration);\n    this.middlePos.lerpVectors(segment.pos0, segment.pos1, 0.5);\n    this.middleLinPos.lerpVectors(segment.linPos0, segment.linPos1, 0.5);\n    const p = this.middleLinPos;\n    this.newPos.set(\n      this.simplexX.noise4d(p.x, p.y, p.z, timeDimension),\n      this.simplexY.noise4d(p.x, p.y, p.z, timeDimension),\n      this.simplexZ.noise4d(p.x, p.y, p.z, timeDimension)\n    );\n    this.newPos.multiplyScalar(segment.positionVariationFactor * lForwards);\n    this.newPos.add(this.middlePos);\n    const newSegment1 = this.getNewSegment();\n    newSegment1.pos0.copy(segment.pos0);\n    newSegment1.pos1.copy(this.newPos);\n    newSegment1.linPos0.copy(segment.linPos0);\n    newSegment1.linPos1.copy(this.middleLinPos);\n    newSegment1.up0.copy(segment.up0);\n    newSegment1.up1.copy(segment.up1);\n    newSegment1.radius0 = segment.radius0;\n    newSegment1.radius1 = middleRadius;\n    newSegment1.fraction0 = segment.fraction0;\n    newSegment1.fraction1 = middleFraction;\n    newSegment1.positionVariationFactor = segment.positionVariationFactor * this.currentSubray.roughness;\n    newSegment1.iteration = segment.iteration + 1;\n    const newSegment2 = this.getNewSegment();\n    newSegment2.pos0.copy(this.newPos);\n    newSegment2.pos1.copy(segment.pos1);\n    newSegment2.linPos0.copy(this.middleLinPos);\n    newSegment2.linPos1.copy(segment.linPos1);\n    this.cross1.crossVectors(segment.up0, this.forwards.normalize());\n    newSegment2.up0.crossVectors(this.forwards, this.cross1).normalize();\n    newSegment2.up1.copy(segment.up1);\n    newSegment2.radius0 = middleRadius;\n    newSegment2.radius1 = segment.radius1;\n    newSegment2.fraction0 = middleFraction;\n    newSegment2.fraction1 = segment.fraction1;\n    newSegment2.positionVariationFactor = segment.positionVariationFactor * this.currentSubray.roughness;\n    newSegment2.iteration = segment.iteration + 1;\n    this.fractalRayRecursive(newSegment1);\n    this.fractalRayRecursive(newSegment2);\n  }\n  createPrism(segment) {\n    this.forwardsFill.subVectors(segment.pos1, segment.pos0).normalize();\n    if (this.isInitialSegment) {\n      this.currentCreateTriangleVertices(segment.pos0, segment.up0, this.forwardsFill, segment.radius0, 0);\n      this.isInitialSegment = false;\n    }\n    this.currentCreateTriangleVertices(segment.pos1, segment.up0, this.forwardsFill, segment.radius1, segment.fraction1);\n    this.createPrismFaces();\n  }\n  createTriangleVerticesWithoutUVs(pos, up, forwards, radius) {\n    this.side.crossVectors(up, forwards).multiplyScalar(radius * _LightningStrike.COS30DEG);\n    this.down.copy(up).multiplyScalar(-radius * _LightningStrike.SIN30DEG);\n    const p = this.vPos;\n    const v = this.vertices;\n    p.copy(pos).sub(this.side).add(this.down);\n    v[this.currentCoordinate++] = p.x;\n    v[this.currentCoordinate++] = p.y;\n    v[this.currentCoordinate++] = p.z;\n    p.copy(pos).add(this.side).add(this.down);\n    v[this.currentCoordinate++] = p.x;\n    v[this.currentCoordinate++] = p.y;\n    v[this.currentCoordinate++] = p.z;\n    p.copy(up).multiplyScalar(radius).add(pos);\n    v[this.currentCoordinate++] = p.x;\n    v[this.currentCoordinate++] = p.y;\n    v[this.currentCoordinate++] = p.z;\n    this.currentVertex += 3;\n  }\n  createTriangleVerticesWithUVs(pos, up, forwards, radius, u) {\n    this.side.crossVectors(up, forwards).multiplyScalar(radius * _LightningStrike.COS30DEG);\n    this.down.copy(up).multiplyScalar(-radius * _LightningStrike.SIN30DEG);\n    const p = this.vPos;\n    const v = this.vertices;\n    const uv = this.uvs;\n    p.copy(pos).sub(this.side).add(this.down);\n    v[this.currentCoordinate++] = p.x;\n    v[this.currentCoordinate++] = p.y;\n    v[this.currentCoordinate++] = p.z;\n    uv[this.currentUVCoordinate++] = u;\n    uv[this.currentUVCoordinate++] = 0;\n    p.copy(pos).add(this.side).add(this.down);\n    v[this.currentCoordinate++] = p.x;\n    v[this.currentCoordinate++] = p.y;\n    v[this.currentCoordinate++] = p.z;\n    uv[this.currentUVCoordinate++] = u;\n    uv[this.currentUVCoordinate++] = 0.5;\n    p.copy(up).multiplyScalar(radius).add(pos);\n    v[this.currentCoordinate++] = p.x;\n    v[this.currentCoordinate++] = p.y;\n    v[this.currentCoordinate++] = p.z;\n    uv[this.currentUVCoordinate++] = u;\n    uv[this.currentUVCoordinate++] = 1;\n    this.currentVertex += 3;\n  }\n  createPrismFaces(vertex) {\n    const indices = this.indices;\n    vertex = this.currentVertex - 6;\n    indices[this.currentIndex++] = vertex + 1;\n    indices[this.currentIndex++] = vertex + 2;\n    indices[this.currentIndex++] = vertex + 5;\n    indices[this.currentIndex++] = vertex + 1;\n    indices[this.currentIndex++] = vertex + 5;\n    indices[this.currentIndex++] = vertex + 4;\n    indices[this.currentIndex++] = vertex + 0;\n    indices[this.currentIndex++] = vertex + 1;\n    indices[this.currentIndex++] = vertex + 4;\n    indices[this.currentIndex++] = vertex + 0;\n    indices[this.currentIndex++] = vertex + 4;\n    indices[this.currentIndex++] = vertex + 3;\n    indices[this.currentIndex++] = vertex + 2;\n    indices[this.currentIndex++] = vertex + 0;\n    indices[this.currentIndex++] = vertex + 3;\n    indices[this.currentIndex++] = vertex + 2;\n    indices[this.currentIndex++] = vertex + 3;\n    indices[this.currentIndex++] = vertex + 5;\n  }\n  createDefaultSubrayCreationCallbacks() {\n    const random1 = this.randomGenerator.random;\n    this.onDecideSubrayCreation = function(segment, lightningStrike) {\n      const subray = lightningStrike.currentSubray;\n      const period = lightningStrike.rayParameters.subrayPeriod;\n      const dutyCycle = lightningStrike.rayParameters.subrayDutyCycle;\n      const phase0 = lightningStrike.rayParameters.isEternal && subray.recursion == 0 ? -random1() * period : MathUtils.lerp(subray.birthTime, subray.endPropagationTime, segment.fraction0) - random1() * period;\n      const phase = lightningStrike.time - phase0;\n      const currentCycle = Math.floor(phase / period);\n      const childSubraySeed = random1() * (currentCycle + 1);\n      const isActive = phase % period <= dutyCycle * period;\n      let probability = 0;\n      if (isActive) {\n        probability = lightningStrike.subrayProbability;\n      }\n      if (subray.recursion < lightningStrike.maxSubrayRecursion && lightningStrike.numSubrays < lightningStrike.maxSubrays && random1() < probability) {\n        const childSubray = lightningStrike.addNewSubray();\n        const parentSeed = lightningStrike.randomGenerator.getSeed();\n        childSubray.seed = childSubraySeed;\n        lightningStrike.randomGenerator.setSeed(childSubraySeed);\n        childSubray.recursion = subray.recursion + 1;\n        childSubray.maxIterations = Math.max(1, subray.maxIterations - 1);\n        childSubray.linPos0.set(random1(), random1(), random1()).multiplyScalar(1e3);\n        childSubray.linPos1.set(random1(), random1(), random1()).multiplyScalar(1e3);\n        childSubray.up0.copy(subray.up0);\n        childSubray.up1.copy(subray.up1);\n        childSubray.radius0 = segment.radius0 * lightningStrike.rayParameters.radius0Factor;\n        childSubray.radius1 = Math.min(\n          lightningStrike.rayParameters.minRadius,\n          segment.radius1 * lightningStrike.rayParameters.radius1Factor\n        );\n        childSubray.birthTime = phase0 + currentCycle * period;\n        childSubray.deathTime = childSubray.birthTime + period * dutyCycle;\n        if (!lightningStrike.rayParameters.isEternal && subray.recursion == 0) {\n          childSubray.birthTime = Math.max(childSubray.birthTime, subray.birthTime);\n          childSubray.deathTime = Math.min(childSubray.deathTime, subray.deathTime);\n        }\n        childSubray.timeScale = subray.timeScale * 2;\n        childSubray.roughness = subray.roughness;\n        childSubray.straightness = subray.straightness;\n        childSubray.propagationTimeFactor = subray.propagationTimeFactor;\n        childSubray.vanishingTimeFactor = subray.vanishingTimeFactor;\n        lightningStrike.onSubrayCreation(segment, subray, childSubray, lightningStrike);\n        lightningStrike.randomGenerator.setSeed(parentSeed);\n      }\n    };\n    const vec1Pos = new Vector3();\n    const vec2Forward = new Vector3();\n    const vec3Side = new Vector3();\n    const vec4Up = new Vector3();\n    this.onSubrayCreation = function(segment, parentSubray, childSubray, lightningStrike) {\n      lightningStrike.subrayCylinderPosition(segment, parentSubray, childSubray, 0.5, 0.6, 0.2);\n    };\n    this.subrayConePosition = function(segment, parentSubray, childSubray, heightFactor, sideWidthFactor, minSideWidthFactor) {\n      childSubray.pos0.copy(segment.pos0);\n      vec1Pos.subVectors(parentSubray.pos1, parentSubray.pos0);\n      vec2Forward.copy(vec1Pos).normalize();\n      vec1Pos.multiplyScalar(segment.fraction0 + (1 - segment.fraction0) * (random1() * heightFactor));\n      const length = vec1Pos.length();\n      vec3Side.crossVectors(parentSubray.up0, vec2Forward);\n      const angle = 2 * Math.PI * random1();\n      vec3Side.multiplyScalar(Math.cos(angle));\n      vec4Up.copy(parentSubray.up0).multiplyScalar(Math.sin(angle));\n      childSubray.pos1.copy(vec3Side).add(vec4Up).multiplyScalar(length * sideWidthFactor * (minSideWidthFactor + random1() * (1 - minSideWidthFactor))).add(vec1Pos).add(parentSubray.pos0);\n    };\n    this.subrayCylinderPosition = function(segment, parentSubray, childSubray, heightFactor, sideWidthFactor, minSideWidthFactor) {\n      childSubray.pos0.copy(segment.pos0);\n      vec1Pos.subVectors(parentSubray.pos1, parentSubray.pos0);\n      vec2Forward.copy(vec1Pos).normalize();\n      vec1Pos.multiplyScalar(segment.fraction0 + (1 - segment.fraction0) * ((2 * random1() - 1) * heightFactor));\n      const length = vec1Pos.length();\n      vec3Side.crossVectors(parentSubray.up0, vec2Forward);\n      const angle = 2 * Math.PI * random1();\n      vec3Side.multiplyScalar(Math.cos(angle));\n      vec4Up.copy(parentSubray.up0).multiplyScalar(Math.sin(angle));\n      childSubray.pos1.copy(vec3Side).add(vec4Up).multiplyScalar(length * sideWidthFactor * (minSideWidthFactor + random1() * (1 - minSideWidthFactor))).add(vec1Pos).add(parentSubray.pos0);\n    };\n  }\n  createSubray() {\n    return {\n      seed: 0,\n      maxIterations: 0,\n      recursion: 0,\n      pos0: new Vector3(),\n      pos1: new Vector3(),\n      linPos0: new Vector3(),\n      linPos1: new Vector3(),\n      up0: new Vector3(),\n      up1: new Vector3(),\n      radius0: 0,\n      radius1: 0,\n      birthTime: 0,\n      deathTime: 0,\n      timeScale: 0,\n      roughness: 0,\n      straightness: 0,\n      propagationTimeFactor: 0,\n      vanishingTimeFactor: 0,\n      endPropagationTime: 0,\n      beginVanishingTime: 0\n    };\n  }\n  createSegment() {\n    return {\n      iteration: 0,\n      pos0: new Vector3(),\n      pos1: new Vector3(),\n      linPos0: new Vector3(),\n      linPos1: new Vector3(),\n      up0: new Vector3(),\n      up1: new Vector3(),\n      radius0: 0,\n      radius1: 0,\n      fraction0: 0,\n      fraction1: 0,\n      positionVariationFactor: 0\n    };\n  }\n  getNewSegment() {\n    return this.raySegments[this.currentSegmentIndex++];\n  }\n  copy(source) {\n    super.copy(source);\n    this.init(_LightningStrike.copyParameters({}, source.rayParameters));\n    return this;\n  }\n  clone() {\n    return new this.constructor(_LightningStrike.copyParameters({}, this.rayParameters));\n  }\n};\nlet LightningStrike = _LightningStrike;\n// Ray states\n__publicField(LightningStrike, \"RAY_INITIALIZED\", 0);\n__publicField(LightningStrike, \"RAY_UNBORN\", 1);\n__publicField(LightningStrike, \"RAY_PROPAGATING\", 2);\n__publicField(LightningStrike, \"RAY_STEADY\", 3);\n__publicField(LightningStrike, \"RAY_VANISHING\", 4);\n__publicField(LightningStrike, \"RAY_EXTINGUISHED\", 5);\n__publicField(LightningStrike, \"COS30DEG\", Math.cos(30 * Math.PI / 180));\n__publicField(LightningStrike, \"SIN30DEG\", Math.sin(30 * Math.PI / 180));\nexport {\n  LightningStrike\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}