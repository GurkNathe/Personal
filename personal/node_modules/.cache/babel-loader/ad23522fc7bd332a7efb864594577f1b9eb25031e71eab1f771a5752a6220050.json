{"ast":null,"code":"import { ShaderPass } from \"./ShaderPass.js\";\nconst LUTShader = {\n  defines: {\n    USE_3DTEXTURE: 1\n  },\n  uniforms: {\n    lut3d: {\n      value: null\n    },\n    lut: {\n      value: null\n    },\n    lutSize: {\n      value: 0\n    },\n    tDiffuse: {\n      value: null\n    },\n    intensity: {\n      value: 1\n    }\n  },\n  vertexShader: /* glsl */\n  `\n\n\t\tvarying vec2 vUv;\n\n\t\tvoid main() {\n\n\t\t\tvUv = uv;\n\t\t\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n\n\t\t}\n\n\t`,\n  fragmentShader: /* glsl */\n  `\n\n\t\tuniform float lutSize;\n\t\t#if USE_3DTEXTURE\n\t\tprecision highp sampler3D;\n\t\tuniform sampler3D lut3d;\n\t\t#else\n\t\tuniform sampler2D lut;\n\n\t\tvec3 lutLookup( sampler2D tex, float size, vec3 rgb ) {\n\n\t\t\tfloat sliceHeight = 1.0 / size;\n\t\t\tfloat yPixelHeight = 1.0 / ( size * size );\n\n\t\t\t// Get the slices on either side of the sample\n\t\t\tfloat slice = rgb.b * size;\n\t\t\tfloat interp = fract( slice );\n\t\t\tfloat slice0 = slice - interp;\n\t\t\tfloat centeredInterp = interp - 0.5;\n\n\t\t\tfloat slice1 = slice0 + sign( centeredInterp );\n\n\t\t\t// Pull y sample in by half a pixel in each direction to avoid color\n\t\t\t// bleeding from adjacent slices.\n\t\t\tfloat greenOffset = clamp( rgb.g * sliceHeight, yPixelHeight * 0.5, sliceHeight - yPixelHeight * 0.5 );\n\n\t\t\tvec2 uv0 = vec2(\n\t\t\t\trgb.r,\n\t\t\t\tslice0 * sliceHeight + greenOffset\n\t\t\t);\n\t\t\tvec2 uv1 = vec2(\n\t\t\t\trgb.r,\n\t\t\t\tslice1 * sliceHeight + greenOffset\n\t\t\t);\n\n\t\t\tvec3 sample0 = texture2D( tex, uv0 ).rgb;\n\t\t\tvec3 sample1 = texture2D( tex, uv1 ).rgb;\n\n\t\t\treturn mix( sample0, sample1, abs( centeredInterp ) );\n\n\t\t}\n\t\t#endif\n\n\t\tvarying vec2 vUv;\n\t\tuniform float intensity;\n\t\tuniform sampler2D tDiffuse;\n\t\tvoid main() {\n\n\t\t\tvec4 val = texture2D( tDiffuse, vUv );\n\t\t\tvec4 lutVal;\n\n\t\t\t// pull the sample in by half a pixel so the sample begins\n\t\t\t// at the center of the edge pixels.\n\t\t\tfloat pixelWidth = 1.0 / lutSize;\n\t\t\tfloat halfPixelWidth = 0.5 / lutSize;\n\t\t\tvec3 uvw = vec3( halfPixelWidth ) + val.rgb * ( 1.0 - pixelWidth );\n\n\t\t\t#if USE_3DTEXTURE\n\n\t\t\tlutVal = vec4( texture( lut3d, uvw ).rgb, val.a );\n\n\t\t\t#else\n\n\t\t\tlutVal = vec4( lutLookup( lut, lutSize, uvw ), val.a );\n\n\t\t\t#endif\n\n\t\t\tgl_FragColor = vec4( mix( val, lutVal, intensity ) );\n\n\t\t}\n\n\t`\n};\nclass LUTPass extends ShaderPass {\n  set lut(v) {\n    const material = this.material;\n    if (v !== this.lut) {\n      material.uniforms.lut3d.value = null;\n      material.uniforms.lut.value = null;\n      if (v) {\n        const is3dTextureDefine = v.isData3DTexture ? 1 : 0;\n        if (is3dTextureDefine !== material.defines.USE_3DTEXTURE) {\n          material.defines.USE_3DTEXTURE = is3dTextureDefine;\n          material.needsUpdate = true;\n        }\n        material.uniforms.lutSize.value = v.image.width;\n        if (v.isData3DTexture) {\n          material.uniforms.lut3d.value = v;\n        } else {\n          material.uniforms.lut.value = v;\n        }\n      }\n    }\n  }\n  get lut() {\n    return this.material.uniforms.lut.value || this.material.uniforms.lut3d.value;\n  }\n  set intensity(v) {\n    this.material.uniforms.intensity.value = v;\n  }\n  get intensity() {\n    return this.material.uniforms.intensity.value;\n  }\n  constructor() {\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    super(LUTShader);\n    this.lut = options.lut || null;\n    this.intensity = \"intensity\" in options ? options.intensity : 1;\n  }\n}\nexport { LUTPass };","map":{"version":3,"names":["ShaderPass","LUTShader","defines","USE_3DTEXTURE","uniforms","lut3d","value","lut","lutSize","tDiffuse","intensity","vertexShader","fragmentShader","LUTPass","v","material","is3dTextureDefine","isData3DTexture","needsUpdate","image","width","constructor","options","arguments","length","undefined"],"sources":["/home/krug/Coding/JavaScript/Websites/Personal/personal/node_modules/.pnpm/three-stdlib@2.23.7_three@0.151.3/node_modules/three-stdlib/postprocessing/LUTPass.js"],"sourcesContent":["import { ShaderPass } from \"./ShaderPass.js\";\nconst LUTShader = {\n  defines: {\n    USE_3DTEXTURE: 1\n  },\n  uniforms: {\n    lut3d: { value: null },\n    lut: { value: null },\n    lutSize: { value: 0 },\n    tDiffuse: { value: null },\n    intensity: { value: 1 }\n  },\n  vertexShader: (\n    /* glsl */\n    `\n\n\t\tvarying vec2 vUv;\n\n\t\tvoid main() {\n\n\t\t\tvUv = uv;\n\t\t\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n\n\t\t}\n\n\t`\n  ),\n  fragmentShader: (\n    /* glsl */\n    `\n\n\t\tuniform float lutSize;\n\t\t#if USE_3DTEXTURE\n\t\tprecision highp sampler3D;\n\t\tuniform sampler3D lut3d;\n\t\t#else\n\t\tuniform sampler2D lut;\n\n\t\tvec3 lutLookup( sampler2D tex, float size, vec3 rgb ) {\n\n\t\t\tfloat sliceHeight = 1.0 / size;\n\t\t\tfloat yPixelHeight = 1.0 / ( size * size );\n\n\t\t\t// Get the slices on either side of the sample\n\t\t\tfloat slice = rgb.b * size;\n\t\t\tfloat interp = fract( slice );\n\t\t\tfloat slice0 = slice - interp;\n\t\t\tfloat centeredInterp = interp - 0.5;\n\n\t\t\tfloat slice1 = slice0 + sign( centeredInterp );\n\n\t\t\t// Pull y sample in by half a pixel in each direction to avoid color\n\t\t\t// bleeding from adjacent slices.\n\t\t\tfloat greenOffset = clamp( rgb.g * sliceHeight, yPixelHeight * 0.5, sliceHeight - yPixelHeight * 0.5 );\n\n\t\t\tvec2 uv0 = vec2(\n\t\t\t\trgb.r,\n\t\t\t\tslice0 * sliceHeight + greenOffset\n\t\t\t);\n\t\t\tvec2 uv1 = vec2(\n\t\t\t\trgb.r,\n\t\t\t\tslice1 * sliceHeight + greenOffset\n\t\t\t);\n\n\t\t\tvec3 sample0 = texture2D( tex, uv0 ).rgb;\n\t\t\tvec3 sample1 = texture2D( tex, uv1 ).rgb;\n\n\t\t\treturn mix( sample0, sample1, abs( centeredInterp ) );\n\n\t\t}\n\t\t#endif\n\n\t\tvarying vec2 vUv;\n\t\tuniform float intensity;\n\t\tuniform sampler2D tDiffuse;\n\t\tvoid main() {\n\n\t\t\tvec4 val = texture2D( tDiffuse, vUv );\n\t\t\tvec4 lutVal;\n\n\t\t\t// pull the sample in by half a pixel so the sample begins\n\t\t\t// at the center of the edge pixels.\n\t\t\tfloat pixelWidth = 1.0 / lutSize;\n\t\t\tfloat halfPixelWidth = 0.5 / lutSize;\n\t\t\tvec3 uvw = vec3( halfPixelWidth ) + val.rgb * ( 1.0 - pixelWidth );\n\n\t\t\t#if USE_3DTEXTURE\n\n\t\t\tlutVal = vec4( texture( lut3d, uvw ).rgb, val.a );\n\n\t\t\t#else\n\n\t\t\tlutVal = vec4( lutLookup( lut, lutSize, uvw ), val.a );\n\n\t\t\t#endif\n\n\t\t\tgl_FragColor = vec4( mix( val, lutVal, intensity ) );\n\n\t\t}\n\n\t`\n  )\n};\nclass LUTPass extends ShaderPass {\n  set lut(v) {\n    const material = this.material;\n    if (v !== this.lut) {\n      material.uniforms.lut3d.value = null;\n      material.uniforms.lut.value = null;\n      if (v) {\n        const is3dTextureDefine = v.isData3DTexture ? 1 : 0;\n        if (is3dTextureDefine !== material.defines.USE_3DTEXTURE) {\n          material.defines.USE_3DTEXTURE = is3dTextureDefine;\n          material.needsUpdate = true;\n        }\n        material.uniforms.lutSize.value = v.image.width;\n        if (v.isData3DTexture) {\n          material.uniforms.lut3d.value = v;\n        } else {\n          material.uniforms.lut.value = v;\n        }\n      }\n    }\n  }\n  get lut() {\n    return this.material.uniforms.lut.value || this.material.uniforms.lut3d.value;\n  }\n  set intensity(v) {\n    this.material.uniforms.intensity.value = v;\n  }\n  get intensity() {\n    return this.material.uniforms.intensity.value;\n  }\n  constructor(options = {}) {\n    super(LUTShader);\n    this.lut = options.lut || null;\n    this.intensity = \"intensity\" in options ? options.intensity : 1;\n  }\n}\nexport {\n  LUTPass\n};\n"],"mappings":"AAAA,SAASA,UAAU,QAAQ,iBAAiB;AAC5C,MAAMC,SAAS,GAAG;EAChBC,OAAO,EAAE;IACPC,aAAa,EAAE;EACjB,CAAC;EACDC,QAAQ,EAAE;IACRC,KAAK,EAAE;MAAEC,KAAK,EAAE;IAAK,CAAC;IACtBC,GAAG,EAAE;MAAED,KAAK,EAAE;IAAK,CAAC;IACpBE,OAAO,EAAE;MAAEF,KAAK,EAAE;IAAE,CAAC;IACrBG,QAAQ,EAAE;MAAEH,KAAK,EAAE;IAAK,CAAC;IACzBI,SAAS,EAAE;MAAEJ,KAAK,EAAE;IAAE;EACxB,CAAC;EACDK,YAAY,EACV;EACC;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EACG;EACDC,cAAc,EACZ;EACC;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,CAAC;AACD,MAAMC,OAAO,SAASb,UAAU,CAAC;EAC/B,IAAIO,GAAGA,CAACO,CAAC,EAAE;IACT,MAAMC,QAAQ,GAAG,IAAI,CAACA,QAAQ;IAC9B,IAAID,CAAC,KAAK,IAAI,CAACP,GAAG,EAAE;MAClBQ,QAAQ,CAACX,QAAQ,CAACC,KAAK,CAACC,KAAK,GAAG,IAAI;MACpCS,QAAQ,CAACX,QAAQ,CAACG,GAAG,CAACD,KAAK,GAAG,IAAI;MAClC,IAAIQ,CAAC,EAAE;QACL,MAAME,iBAAiB,GAAGF,CAAC,CAACG,eAAe,GAAG,CAAC,GAAG,CAAC;QACnD,IAAID,iBAAiB,KAAKD,QAAQ,CAACb,OAAO,CAACC,aAAa,EAAE;UACxDY,QAAQ,CAACb,OAAO,CAACC,aAAa,GAAGa,iBAAiB;UAClDD,QAAQ,CAACG,WAAW,GAAG,IAAI;QAC7B;QACAH,QAAQ,CAACX,QAAQ,CAACI,OAAO,CAACF,KAAK,GAAGQ,CAAC,CAACK,KAAK,CAACC,KAAK;QAC/C,IAAIN,CAAC,CAACG,eAAe,EAAE;UACrBF,QAAQ,CAACX,QAAQ,CAACC,KAAK,CAACC,KAAK,GAAGQ,CAAC;QACnC,CAAC,MAAM;UACLC,QAAQ,CAACX,QAAQ,CAACG,GAAG,CAACD,KAAK,GAAGQ,CAAC;QACjC;MACF;IACF;EACF;EACA,IAAIP,GAAGA,CAAA,EAAG;IACR,OAAO,IAAI,CAACQ,QAAQ,CAACX,QAAQ,CAACG,GAAG,CAACD,KAAK,IAAI,IAAI,CAACS,QAAQ,CAACX,QAAQ,CAACC,KAAK,CAACC,KAAK;EAC/E;EACA,IAAII,SAASA,CAACI,CAAC,EAAE;IACf,IAAI,CAACC,QAAQ,CAACX,QAAQ,CAACM,SAAS,CAACJ,KAAK,GAAGQ,CAAC;EAC5C;EACA,IAAIJ,SAASA,CAAA,EAAG;IACd,OAAO,IAAI,CAACK,QAAQ,CAACX,QAAQ,CAACM,SAAS,CAACJ,KAAK;EAC/C;EACAe,WAAWA,CAAA,EAAe;IAAA,IAAdC,OAAO,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,CAAC,CAAC;IACtB,KAAK,CAACtB,SAAS,CAAC;IAChB,IAAI,CAACM,GAAG,GAAGe,OAAO,CAACf,GAAG,IAAI,IAAI;IAC9B,IAAI,CAACG,SAAS,GAAG,WAAW,IAAIY,OAAO,GAAGA,OAAO,CAACZ,SAAS,GAAG,CAAC;EACjE;AACF;AACA,SACEG,OAAO"},"metadata":{},"sourceType":"module","externalDependencies":[]}