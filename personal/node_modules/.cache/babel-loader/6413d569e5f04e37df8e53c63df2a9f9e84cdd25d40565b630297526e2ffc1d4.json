{"ast":null,"code":"var __defProp = Object.defineProperty;\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value\n}) : obj[key] = value;\nvar __publicField = (obj, key, value) => {\n  __defNormalProp(obj, typeof key !== \"symbol\" ? key + \"\" : key, value);\n  return value;\n};\nimport { GLTFLoader } from \"../loaders/GLTFLoader.js\";\nconst DEFAULT_HAND_PROFILE_PATH = \"https://cdn.jsdelivr.net/npm/@webxr-input-profiles/assets@1.0/dist/profiles/generic-hand/\";\nclass XRHandMeshModel {\n  constructor(handModel, controller) {\n    let path = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : DEFAULT_HAND_PROFILE_PATH;\n    let handedness = arguments.length > 3 ? arguments[3] : undefined;\n    let customModelPath = arguments.length > 4 ? arguments[4] : undefined;\n    __publicField(this, \"controller\");\n    __publicField(this, \"handModel\");\n    __publicField(this, \"bones\");\n    this.controller = controller;\n    this.handModel = handModel;\n    this.bones = [];\n    const loader = new GLTFLoader();\n    if (!customModelPath) loader.setPath(path);\n    loader.load(customModelPath != null ? customModelPath : `${handedness}.glb`, gltf => {\n      const object = gltf.scene.children[0];\n      this.handModel.add(object);\n      const mesh = object.getObjectByProperty(\"type\", \"SkinnedMesh\");\n      mesh.frustumCulled = false;\n      mesh.castShadow = true;\n      mesh.receiveShadow = true;\n      const joints = [\"wrist\", \"thumb-metacarpal\", \"thumb-phalanx-proximal\", \"thumb-phalanx-distal\", \"thumb-tip\", \"index-finger-metacarpal\", \"index-finger-phalanx-proximal\", \"index-finger-phalanx-intermediate\", \"index-finger-phalanx-distal\", \"index-finger-tip\", \"middle-finger-metacarpal\", \"middle-finger-phalanx-proximal\", \"middle-finger-phalanx-intermediate\", \"middle-finger-phalanx-distal\", \"middle-finger-tip\", \"ring-finger-metacarpal\", \"ring-finger-phalanx-proximal\", \"ring-finger-phalanx-intermediate\", \"ring-finger-phalanx-distal\", \"ring-finger-tip\", \"pinky-finger-metacarpal\", \"pinky-finger-phalanx-proximal\", \"pinky-finger-phalanx-intermediate\", \"pinky-finger-phalanx-distal\", \"pinky-finger-tip\"];\n      joints.forEach(jointName => {\n        const bone = object.getObjectByName(jointName);\n        if (bone !== void 0) {\n          bone.jointName = jointName;\n        } else {\n          console.warn(`Couldn't find ${jointName} in ${handedness} hand mesh`);\n        }\n        this.bones.push(bone);\n      });\n    });\n  }\n  updateMesh() {\n    const XRJoints = this.controller.joints;\n    for (let i = 0; i < this.bones.length; i++) {\n      const bone = this.bones[i];\n      if (bone) {\n        const XRJoint = XRJoints[bone.jointName];\n        if (XRJoint.visible) {\n          const position = XRJoint.position;\n          bone.position.copy(position);\n          bone.quaternion.copy(XRJoint.quaternion);\n        }\n      }\n    }\n  }\n}\nexport { XRHandMeshModel };","map":{"version":3,"names":["__defProp","Object","defineProperty","__defNormalProp","obj","key","value","enumerable","configurable","writable","__publicField","GLTFLoader","DEFAULT_HAND_PROFILE_PATH","XRHandMeshModel","constructor","handModel","controller","path","arguments","length","undefined","handedness","customModelPath","bones","loader","setPath","load","gltf","object","scene","children","add","mesh","getObjectByProperty","frustumCulled","castShadow","receiveShadow","joints","forEach","jointName","bone","getObjectByName","console","warn","push","updateMesh","XRJoints","i","XRJoint","visible","position","copy","quaternion"],"sources":["/home/krug/Coding/JavaScript/Websites/Personal/personal/node_modules/.pnpm/three-stdlib@2.23.7_three@0.151.3/node_modules/three-stdlib/webxr/XRHandMeshModel.js"],"sourcesContent":["var __defProp = Object.defineProperty;\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;\nvar __publicField = (obj, key, value) => {\n  __defNormalProp(obj, typeof key !== \"symbol\" ? key + \"\" : key, value);\n  return value;\n};\nimport { GLTFLoader } from \"../loaders/GLTFLoader.js\";\nconst DEFAULT_HAND_PROFILE_PATH = \"https://cdn.jsdelivr.net/npm/@webxr-input-profiles/assets@1.0/dist/profiles/generic-hand/\";\nclass XRHandMeshModel {\n  constructor(handModel, controller, path = DEFAULT_HAND_PROFILE_PATH, handedness, customModelPath) {\n    __publicField(this, \"controller\");\n    __publicField(this, \"handModel\");\n    __publicField(this, \"bones\");\n    this.controller = controller;\n    this.handModel = handModel;\n    this.bones = [];\n    const loader = new GLTFLoader();\n    if (!customModelPath)\n      loader.setPath(path);\n    loader.load(customModelPath != null ? customModelPath : `${handedness}.glb`, (gltf) => {\n      const object = gltf.scene.children[0];\n      this.handModel.add(object);\n      const mesh = object.getObjectByProperty(\"type\", \"SkinnedMesh\");\n      mesh.frustumCulled = false;\n      mesh.castShadow = true;\n      mesh.receiveShadow = true;\n      const joints = [\n        \"wrist\",\n        \"thumb-metacarpal\",\n        \"thumb-phalanx-proximal\",\n        \"thumb-phalanx-distal\",\n        \"thumb-tip\",\n        \"index-finger-metacarpal\",\n        \"index-finger-phalanx-proximal\",\n        \"index-finger-phalanx-intermediate\",\n        \"index-finger-phalanx-distal\",\n        \"index-finger-tip\",\n        \"middle-finger-metacarpal\",\n        \"middle-finger-phalanx-proximal\",\n        \"middle-finger-phalanx-intermediate\",\n        \"middle-finger-phalanx-distal\",\n        \"middle-finger-tip\",\n        \"ring-finger-metacarpal\",\n        \"ring-finger-phalanx-proximal\",\n        \"ring-finger-phalanx-intermediate\",\n        \"ring-finger-phalanx-distal\",\n        \"ring-finger-tip\",\n        \"pinky-finger-metacarpal\",\n        \"pinky-finger-phalanx-proximal\",\n        \"pinky-finger-phalanx-intermediate\",\n        \"pinky-finger-phalanx-distal\",\n        \"pinky-finger-tip\"\n      ];\n      joints.forEach((jointName) => {\n        const bone = object.getObjectByName(jointName);\n        if (bone !== void 0) {\n          bone.jointName = jointName;\n        } else {\n          console.warn(`Couldn't find ${jointName} in ${handedness} hand mesh`);\n        }\n        this.bones.push(bone);\n      });\n    });\n  }\n  updateMesh() {\n    const XRJoints = this.controller.joints;\n    for (let i = 0; i < this.bones.length; i++) {\n      const bone = this.bones[i];\n      if (bone) {\n        const XRJoint = XRJoints[bone.jointName];\n        if (XRJoint.visible) {\n          const position = XRJoint.position;\n          bone.position.copy(position);\n          bone.quaternion.copy(XRJoint.quaternion);\n        }\n      }\n    }\n  }\n}\nexport {\n  XRHandMeshModel\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}