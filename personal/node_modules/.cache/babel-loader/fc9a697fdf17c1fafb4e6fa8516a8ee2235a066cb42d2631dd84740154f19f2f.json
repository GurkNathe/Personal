{"ast":null,"code":"import _slicedToArray from \"/home/krug/Coding/JavaScript/Websites/Personal/personal/node_modules/.pnpm/@babel+runtime@7.22.3/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport * as React from 'react';\nimport { Raycaster, Camera } from 'three';\nimport { useThree, applyProps } from '@react-three/fiber';\nfunction useCamera(camera, props) {\n  var pointer = useThree(function (state) {\n    return state.pointer;\n  });\n  var _React$useState = React.useState(function () {\n      var raycaster = new Raycaster();\n      /**\n       * applyProps is an internal method of r3f and\n       * therefore requires its first arg to be an\n       * \"Instance\" a term used with the Reconciler\n       * so we have an expect error to mask this\n       */\n      // @ts-expect-error\n\n      if (props) applyProps(raycaster, props, {});\n      return function (_, intersects) {\n        raycaster.setFromCamera(pointer, camera instanceof Camera ? camera : camera.current);\n        var rc = this.constructor.prototype.raycast.bind(this);\n        if (rc) rc(raycaster, intersects);\n      };\n    }),\n    _React$useState2 = _slicedToArray(_React$useState, 1),\n    raycast = _React$useState2[0];\n  return raycast;\n}\nexport { useCamera };","map":{"version":3,"names":["React","Raycaster","Camera","useThree","applyProps","useCamera","camera","props","pointer","state","_React$useState","useState","raycaster","_","intersects","setFromCamera","current","rc","constructor","prototype","raycast","bind","_React$useState2","_slicedToArray"],"sources":["/home/krug/Coding/JavaScript/Websites/Personal/personal/node_modules/.pnpm/@react-three+drei@9.72.1_@react-three+fiber@8.13.0_@types+three@0.150.2_react-dom@18.2.0_react@18.2.0_three@0.151.3/node_modules/@react-three/drei/core/useCamera.js"],"sourcesContent":["import * as React from 'react';\nimport { Raycaster, Camera } from 'three';\nimport { useThree, applyProps } from '@react-three/fiber';\n\nfunction useCamera(camera, props) {\n  const pointer = useThree(state => state.pointer);\n  const [raycast] = React.useState(() => {\n    const raycaster = new Raycaster();\n    /**\n     * applyProps is an internal method of r3f and\n     * therefore requires its first arg to be an\n     * \"Instance\" a term used with the Reconciler\n     * so we have an expect error to mask this\n     */\n    // @ts-expect-error\n\n    if (props) applyProps(raycaster, props, {});\n    return function (_, intersects) {\n      raycaster.setFromCamera(pointer, camera instanceof Camera ? camera : camera.current);\n      const rc = this.constructor.prototype.raycast.bind(this);\n      if (rc) rc(raycaster, intersects);\n    };\n  });\n  return raycast;\n}\n\nexport { useCamera };\n"],"mappings":";AAAA,OAAO,KAAKA,KAAK,MAAM,OAAO;AAC9B,SAASC,SAAS,EAAEC,MAAM,QAAQ,OAAO;AACzC,SAASC,QAAQ,EAAEC,UAAU,QAAQ,oBAAoB;AAEzD,SAASC,SAASA,CAACC,MAAM,EAAEC,KAAK,EAAE;EAChC,IAAMC,OAAO,GAAGL,QAAQ,CAAC,UAAAM,KAAK;IAAA,OAAIA,KAAK,CAACD,OAAO;EAAA,EAAC;EAChD,IAAAE,eAAA,GAAkBV,KAAK,CAACW,QAAQ,CAAC,YAAM;MACrC,IAAMC,SAAS,GAAG,IAAIX,SAAS,CAAC,CAAC;MACjC;AACJ;AACA;AACA;AACA;AACA;MACI;;MAEA,IAAIM,KAAK,EAAEH,UAAU,CAACQ,SAAS,EAAEL,KAAK,EAAE,CAAC,CAAC,CAAC;MAC3C,OAAO,UAAUM,CAAC,EAAEC,UAAU,EAAE;QAC9BF,SAAS,CAACG,aAAa,CAACP,OAAO,EAAEF,MAAM,YAAYJ,MAAM,GAAGI,MAAM,GAAGA,MAAM,CAACU,OAAO,CAAC;QACpF,IAAMC,EAAE,GAAG,IAAI,CAACC,WAAW,CAACC,SAAS,CAACC,OAAO,CAACC,IAAI,CAAC,IAAI,CAAC;QACxD,IAAIJ,EAAE,EAAEA,EAAE,CAACL,SAAS,EAAEE,UAAU,CAAC;MACnC,CAAC;IACH,CAAC,CAAC;IAAAQ,gBAAA,GAAAC,cAAA,CAAAb,eAAA;IAhBKU,OAAO,GAAAE,gBAAA;EAiBd,OAAOF,OAAO;AAChB;AAEA,SAASf,SAAS"},"metadata":{},"sourceType":"module","externalDependencies":[]}