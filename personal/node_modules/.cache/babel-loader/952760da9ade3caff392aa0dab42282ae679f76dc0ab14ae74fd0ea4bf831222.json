{"ast":null,"code":"import _classCallCheck from \"/home/krug/Coding/JavaScript/Websites/Personal/personal/node_modules/.pnpm/@babel+runtime@7.22.3/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/home/krug/Coding/JavaScript/Websites/Personal/personal/node_modules/.pnpm/@babel+runtime@7.22.3/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"/home/krug/Coding/JavaScript/Websites/Personal/personal/node_modules/.pnpm/@babel+runtime@7.22.3/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/home/krug/Coding/JavaScript/Websites/Personal/personal/node_modules/.pnpm/@babel+runtime@7.22.3/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { Loader, HalfFloatType, CubeTexture, LinearFilter, FloatType, FileLoader, DataTexture } from \"three\";\nimport { RGBELoader } from \"./RGBELoader.js\";\nvar HDRCubeTextureLoader = /*#__PURE__*/function (_Loader) {\n  _inherits(HDRCubeTextureLoader, _Loader);\n  var _super = _createSuper(HDRCubeTextureLoader);\n  function HDRCubeTextureLoader(manager) {\n    var _this;\n    _classCallCheck(this, HDRCubeTextureLoader);\n    _this = _super.call(this, manager);\n    _this.hdrLoader = new RGBELoader();\n    _this.type = HalfFloatType;\n    return _this;\n  }\n  _createClass(HDRCubeTextureLoader, [{\n    key: \"load\",\n    value: function load(urls, onLoad, onProgress, onError) {\n      if (!Array.isArray(urls)) {\n        console.warn(\"THREE.HDRCubeTextureLoader signature has changed. Use .setDataType() instead.\");\n        this.setDataType(urls);\n        urls = onLoad;\n        onLoad = onProgress;\n        onProgress = onError;\n        onError = arguments[4];\n      }\n      var texture = new CubeTexture();\n      texture.type = this.type;\n      switch (texture.type) {\n        case FloatType:\n        case HalfFloatType:\n          if (\"colorSpace\" in texture) texture.colorSpace = \"srgb-linear\";else texture.encoding = 3e3;\n          texture.minFilter = LinearFilter;\n          texture.magFilter = LinearFilter;\n          texture.generateMipmaps = false;\n          break;\n      }\n      var scope = this;\n      var loaded = 0;\n      function loadHDRData(i, onLoad2, onProgress2, onError2) {\n        new FileLoader(scope.manager).setPath(scope.path).setResponseType(\"arraybuffer\").setWithCredentials(scope.withCredentials).load(urls[i], function (buffer) {\n          loaded++;\n          var texData = scope.hdrLoader.parse(buffer);\n          if (!texData) return;\n          if (texData.data !== void 0) {\n            var dataTexture = new DataTexture(texData.data, texData.width, texData.height);\n            dataTexture.type = texture.type;\n            dataTexture.encoding = texture.encoding;\n            dataTexture.format = texture.format;\n            dataTexture.minFilter = texture.minFilter;\n            dataTexture.magFilter = texture.magFilter;\n            dataTexture.generateMipmaps = texture.generateMipmaps;\n            texture.images[i] = dataTexture;\n          }\n          if (loaded === 6) {\n            texture.needsUpdate = true;\n            if (onLoad2) onLoad2(texture);\n          }\n        }, onProgress2, onError2);\n      }\n      for (var i = 0; i < urls.length; i++) {\n        loadHDRData(i, onLoad, onProgress, onError);\n      }\n      return texture;\n    }\n  }, {\n    key: \"setDataType\",\n    value: function setDataType(value) {\n      this.type = value;\n      this.hdrLoader.setDataType(value);\n      return this;\n    }\n  }]);\n  return HDRCubeTextureLoader;\n}(Loader);\nexport { HDRCubeTextureLoader };","map":{"version":3,"names":["Loader","HalfFloatType","CubeTexture","LinearFilter","FloatType","FileLoader","DataTexture","RGBELoader","HDRCubeTextureLoader","_Loader","_inherits","_super","_createSuper","manager","_this","_classCallCheck","call","hdrLoader","type","_createClass","key","value","load","urls","onLoad","onProgress","onError","Array","isArray","console","warn","setDataType","arguments","texture","colorSpace","encoding","minFilter","magFilter","generateMipmaps","scope","loaded","loadHDRData","i","onLoad2","onProgress2","onError2","setPath","path","setResponseType","setWithCredentials","withCredentials","buffer","texData","parse","data","dataTexture","width","height","format","images","needsUpdate","length"],"sources":["/home/krug/Coding/JavaScript/Websites/Personal/personal/node_modules/.pnpm/three-stdlib@2.23.7_three@0.151.3/node_modules/three-stdlib/loaders/HDRCubeTextureLoader.js"],"sourcesContent":["import { Loader, HalfFloatType, CubeTexture, LinearFilter, FloatType, FileLoader, DataTexture } from \"three\";\nimport { RGBELoader } from \"./RGBELoader.js\";\nclass HDRCubeTextureLoader extends Loader {\n  constructor(manager) {\n    super(manager);\n    this.hdrLoader = new RGBELoader();\n    this.type = HalfFloatType;\n  }\n  load(urls, onLoad, onProgress, onError) {\n    if (!Array.isArray(urls)) {\n      console.warn(\"THREE.HDRCubeTextureLoader signature has changed. Use .setDataType() instead.\");\n      this.setDataType(urls);\n      urls = onLoad;\n      onLoad = onProgress;\n      onProgress = onError;\n      onError = arguments[4];\n    }\n    const texture = new CubeTexture();\n    texture.type = this.type;\n    switch (texture.type) {\n      case FloatType:\n      case HalfFloatType:\n        if (\"colorSpace\" in texture)\n          texture.colorSpace = \"srgb-linear\";\n        else\n          texture.encoding = 3e3;\n        texture.minFilter = LinearFilter;\n        texture.magFilter = LinearFilter;\n        texture.generateMipmaps = false;\n        break;\n    }\n    const scope = this;\n    let loaded = 0;\n    function loadHDRData(i, onLoad2, onProgress2, onError2) {\n      new FileLoader(scope.manager).setPath(scope.path).setResponseType(\"arraybuffer\").setWithCredentials(scope.withCredentials).load(\n        urls[i],\n        function(buffer) {\n          loaded++;\n          const texData = scope.hdrLoader.parse(buffer);\n          if (!texData)\n            return;\n          if (texData.data !== void 0) {\n            const dataTexture = new DataTexture(texData.data, texData.width, texData.height);\n            dataTexture.type = texture.type;\n            dataTexture.encoding = texture.encoding;\n            dataTexture.format = texture.format;\n            dataTexture.minFilter = texture.minFilter;\n            dataTexture.magFilter = texture.magFilter;\n            dataTexture.generateMipmaps = texture.generateMipmaps;\n            texture.images[i] = dataTexture;\n          }\n          if (loaded === 6) {\n            texture.needsUpdate = true;\n            if (onLoad2)\n              onLoad2(texture);\n          }\n        },\n        onProgress2,\n        onError2\n      );\n    }\n    for (let i = 0; i < urls.length; i++) {\n      loadHDRData(i, onLoad, onProgress, onError);\n    }\n    return texture;\n  }\n  setDataType(value) {\n    this.type = value;\n    this.hdrLoader.setDataType(value);\n    return this;\n  }\n}\nexport {\n  HDRCubeTextureLoader\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}