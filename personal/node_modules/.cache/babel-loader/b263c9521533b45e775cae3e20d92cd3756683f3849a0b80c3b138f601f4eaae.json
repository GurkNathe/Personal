{"ast":null,"code":"import _classCallCheck from \"/home/krug/Coding/JavaScript/Websites/Personal/personal/node_modules/.pnpm/@babel+runtime@7.22.3/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/home/krug/Coding/JavaScript/Websites/Personal/personal/node_modules/.pnpm/@babel+runtime@7.22.3/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport { Vector3, Line3, Plane, Triangle } from \"three\";\nvar Visible = 0;\nvar Deleted = 1;\nvar _v1 = /* @__PURE__ */new Vector3();\nvar _line3 = /* @__PURE__ */new Line3();\nvar _plane = /* @__PURE__ */new Plane();\nvar _closestPoint = /* @__PURE__ */new Vector3();\nvar _triangle = /* @__PURE__ */new Triangle();\nvar ConvexHull = /*#__PURE__*/function () {\n  function ConvexHull() {\n    _classCallCheck(this, ConvexHull);\n    this.tolerance = -1;\n    this.faces = [];\n    this.newFaces = [];\n    this.assigned = new VertexList();\n    this.unassigned = new VertexList();\n    this.vertices = [];\n  }\n  _createClass(ConvexHull, [{\n    key: \"setFromPoints\",\n    value: function setFromPoints(points) {\n      if (points.length >= 4) {\n        this.makeEmpty();\n        for (var i = 0, l = points.length; i < l; i++) {\n          this.vertices.push(new VertexNode(points[i]));\n        }\n        this.compute();\n      }\n      return this;\n    }\n  }, {\n    key: \"setFromObject\",\n    value: function setFromObject(object) {\n      var points = [];\n      object.updateMatrixWorld(true);\n      object.traverse(function (node) {\n        var geometry = node.geometry;\n        if (geometry !== void 0) {\n          var attribute = geometry.attributes.position;\n          if (attribute !== void 0) {\n            for (var i = 0, l = attribute.count; i < l; i++) {\n              var point = new Vector3();\n              point.fromBufferAttribute(attribute, i).applyMatrix4(node.matrixWorld);\n              points.push(point);\n            }\n          }\n        }\n      });\n      return this.setFromPoints(points);\n    }\n  }, {\n    key: \"containsPoint\",\n    value: function containsPoint(point) {\n      var faces = this.faces;\n      for (var i = 0, l = faces.length; i < l; i++) {\n        var face = faces[i];\n        if (face.distanceToPoint(point) > this.tolerance) return false;\n      }\n      return true;\n    }\n  }, {\n    key: \"intersectRay\",\n    value: function intersectRay(ray, target) {\n      var faces = this.faces;\n      var tNear = -Infinity;\n      var tFar = Infinity;\n      for (var i = 0, l = faces.length; i < l; i++) {\n        var face = faces[i];\n        var vN = face.distanceToPoint(ray.origin);\n        var vD = face.normal.dot(ray.direction);\n        if (vN > 0 && vD >= 0) return null;\n        var t = vD !== 0 ? -vN / vD : 0;\n        if (t <= 0) continue;\n        if (vD > 0) {\n          tFar = Math.min(t, tFar);\n        } else {\n          tNear = Math.max(t, tNear);\n        }\n        if (tNear > tFar) {\n          return null;\n        }\n      }\n      if (tNear !== -Infinity) {\n        ray.at(tNear, target);\n      } else {\n        ray.at(tFar, target);\n      }\n      return target;\n    }\n  }, {\n    key: \"intersectsRay\",\n    value: function intersectsRay(ray) {\n      return this.intersectRay(ray, _v1) !== null;\n    }\n  }, {\n    key: \"makeEmpty\",\n    value: function makeEmpty() {\n      this.faces = [];\n      this.vertices = [];\n      return this;\n    }\n    // Adds a vertex to the 'assigned' list of vertices and assigns it to the given face\n  }, {\n    key: \"addVertexToFace\",\n    value: function addVertexToFace(vertex, face) {\n      vertex.face = face;\n      if (face.outside === null) {\n        this.assigned.append(vertex);\n      } else {\n        this.assigned.insertBefore(face.outside, vertex);\n      }\n      face.outside = vertex;\n      return this;\n    }\n    // Removes a vertex from the 'assigned' list of vertices and from the given face\n  }, {\n    key: \"removeVertexFromFace\",\n    value: function removeVertexFromFace(vertex, face) {\n      if (vertex === face.outside) {\n        if (vertex.next !== null && vertex.next.face === face) {\n          face.outside = vertex.next;\n        } else {\n          face.outside = null;\n        }\n      }\n      this.assigned.remove(vertex);\n      return this;\n    }\n    // Removes all the visible vertices that a given face is able to see which are stored in the 'assigned' vertex list\n  }, {\n    key: \"removeAllVerticesFromFace\",\n    value: function removeAllVerticesFromFace(face) {\n      if (face.outside !== null) {\n        var start = face.outside;\n        var end = face.outside;\n        while (end.next !== null && end.next.face === face) {\n          end = end.next;\n        }\n        this.assigned.removeSubList(start, end);\n        start.prev = end.next = null;\n        face.outside = null;\n        return start;\n      }\n    }\n    // Removes all the visible vertices that 'face' is able to see\n  }, {\n    key: \"deleteFaceVertices\",\n    value: function deleteFaceVertices(face, absorbingFace) {\n      var faceVertices = this.removeAllVerticesFromFace(face);\n      if (faceVertices !== void 0) {\n        if (absorbingFace === void 0) {\n          this.unassigned.appendChain(faceVertices);\n        } else {\n          var vertex = faceVertices;\n          do {\n            var nextVertex = vertex.next;\n            var distance = absorbingFace.distanceToPoint(vertex.point);\n            if (distance > this.tolerance) {\n              this.addVertexToFace(vertex, absorbingFace);\n            } else {\n              this.unassigned.append(vertex);\n            }\n            vertex = nextVertex;\n          } while (vertex !== null);\n        }\n      }\n      return this;\n    }\n    // Reassigns as many vertices as possible from the unassigned list to the new faces\n  }, {\n    key: \"resolveUnassignedPoints\",\n    value: function resolveUnassignedPoints(newFaces) {\n      if (this.unassigned.isEmpty() === false) {\n        var vertex = this.unassigned.first();\n        do {\n          var nextVertex = vertex.next;\n          var maxDistance = this.tolerance;\n          var maxFace = null;\n          for (var i = 0; i < newFaces.length; i++) {\n            var face = newFaces[i];\n            if (face.mark === Visible) {\n              var distance = face.distanceToPoint(vertex.point);\n              if (distance > maxDistance) {\n                maxDistance = distance;\n                maxFace = face;\n              }\n              if (maxDistance > 1e3 * this.tolerance) break;\n            }\n          }\n          if (maxFace !== null) {\n            this.addVertexToFace(vertex, maxFace);\n          }\n          vertex = nextVertex;\n        } while (vertex !== null);\n      }\n      return this;\n    }\n    // Computes the extremes of a simplex which will be the initial hull\n  }, {\n    key: \"computeExtremes\",\n    value: function computeExtremes() {\n      var min = new Vector3();\n      var max = new Vector3();\n      var minVertices = [];\n      var maxVertices = [];\n      for (var i = 0; i < 3; i++) {\n        minVertices[i] = maxVertices[i] = this.vertices[0];\n      }\n      min.copy(this.vertices[0].point);\n      max.copy(this.vertices[0].point);\n      for (var _i = 0, l = this.vertices.length; _i < l; _i++) {\n        var vertex = this.vertices[_i];\n        var point = vertex.point;\n        for (var j = 0; j < 3; j++) {\n          if (point.getComponent(j) < min.getComponent(j)) {\n            min.setComponent(j, point.getComponent(j));\n            minVertices[j] = vertex;\n          }\n        }\n        for (var _j = 0; _j < 3; _j++) {\n          if (point.getComponent(_j) > max.getComponent(_j)) {\n            max.setComponent(_j, point.getComponent(_j));\n            maxVertices[_j] = vertex;\n          }\n        }\n      }\n      this.tolerance = 3 * Number.EPSILON * (Math.max(Math.abs(min.x), Math.abs(max.x)) + Math.max(Math.abs(min.y), Math.abs(max.y)) + Math.max(Math.abs(min.z), Math.abs(max.z)));\n      return {\n        min: minVertices,\n        max: maxVertices\n      };\n    }\n    // Computes the initial simplex assigning to its faces all the points\n    // that are candidates to form part of the hull\n  }, {\n    key: \"computeInitialHull\",\n    value: function computeInitialHull() {\n      var vertices = this.vertices;\n      var extremes = this.computeExtremes();\n      var min = extremes.min;\n      var max = extremes.max;\n      var maxDistance = 0;\n      var index = 0;\n      for (var i = 0; i < 3; i++) {\n        var distance = max[i].point.getComponent(i) - min[i].point.getComponent(i);\n        if (distance > maxDistance) {\n          maxDistance = distance;\n          index = i;\n        }\n      }\n      var v0 = min[index];\n      var v1 = max[index];\n      var v2;\n      var v3;\n      maxDistance = 0;\n      _line3.set(v0.point, v1.point);\n      for (var _i2 = 0, l = this.vertices.length; _i2 < l; _i2++) {\n        var vertex = vertices[_i2];\n        if (vertex !== v0 && vertex !== v1) {\n          _line3.closestPointToPoint(vertex.point, true, _closestPoint);\n          var _distance = _closestPoint.distanceToSquared(vertex.point);\n          if (_distance > maxDistance) {\n            maxDistance = _distance;\n            v2 = vertex;\n          }\n        }\n      }\n      maxDistance = -1;\n      _plane.setFromCoplanarPoints(v0.point, v1.point, v2.point);\n      for (var _i3 = 0, _l = this.vertices.length; _i3 < _l; _i3++) {\n        var _vertex = vertices[_i3];\n        if (_vertex !== v0 && _vertex !== v1 && _vertex !== v2) {\n          var _distance2 = Math.abs(_plane.distanceToPoint(_vertex.point));\n          if (_distance2 > maxDistance) {\n            maxDistance = _distance2;\n            v3 = _vertex;\n          }\n        }\n      }\n      var faces = [];\n      if (_plane.distanceToPoint(v3.point) < 0) {\n        faces.push(Face.create(v0, v1, v2), Face.create(v3, v1, v0), Face.create(v3, v2, v1), Face.create(v3, v0, v2));\n        for (var _i4 = 0; _i4 < 3; _i4++) {\n          var j = (_i4 + 1) % 3;\n          faces[_i4 + 1].getEdge(2).setTwin(faces[0].getEdge(j));\n          faces[_i4 + 1].getEdge(1).setTwin(faces[j + 1].getEdge(0));\n        }\n      } else {\n        faces.push(Face.create(v0, v2, v1), Face.create(v3, v0, v1), Face.create(v3, v1, v2), Face.create(v3, v2, v0));\n        for (var _i5 = 0; _i5 < 3; _i5++) {\n          var _j2 = (_i5 + 1) % 3;\n          faces[_i5 + 1].getEdge(2).setTwin(faces[0].getEdge((3 - _i5) % 3));\n          faces[_i5 + 1].getEdge(0).setTwin(faces[_j2 + 1].getEdge(1));\n        }\n      }\n      for (var _i6 = 0; _i6 < 4; _i6++) {\n        this.faces.push(faces[_i6]);\n      }\n      for (var _i7 = 0, _l2 = vertices.length; _i7 < _l2; _i7++) {\n        var _vertex2 = vertices[_i7];\n        if (_vertex2 !== v0 && _vertex2 !== v1 && _vertex2 !== v2 && _vertex2 !== v3) {\n          maxDistance = this.tolerance;\n          var maxFace = null;\n          for (var _j3 = 0; _j3 < 4; _j3++) {\n            var _distance3 = this.faces[_j3].distanceToPoint(_vertex2.point);\n            if (_distance3 > maxDistance) {\n              maxDistance = _distance3;\n              maxFace = this.faces[_j3];\n            }\n          }\n          if (maxFace !== null) {\n            this.addVertexToFace(_vertex2, maxFace);\n          }\n        }\n      }\n      return this;\n    }\n    // Removes inactive faces\n  }, {\n    key: \"reindexFaces\",\n    value: function reindexFaces() {\n      var activeFaces = [];\n      for (var i = 0; i < this.faces.length; i++) {\n        var face = this.faces[i];\n        if (face.mark === Visible) {\n          activeFaces.push(face);\n        }\n      }\n      this.faces = activeFaces;\n      return this;\n    }\n    // Finds the next vertex to create faces with the current hull\n  }, {\n    key: \"nextVertexToAdd\",\n    value: function nextVertexToAdd() {\n      if (this.assigned.isEmpty() === false) {\n        var eyeVertex,\n          maxDistance = 0;\n        var eyeFace = this.assigned.first().face;\n        var vertex = eyeFace.outside;\n        do {\n          var distance = eyeFace.distanceToPoint(vertex.point);\n          if (distance > maxDistance) {\n            maxDistance = distance;\n            eyeVertex = vertex;\n          }\n          vertex = vertex.next;\n        } while (vertex !== null && vertex.face === eyeFace);\n        return eyeVertex;\n      }\n    }\n    // Computes a chain of half edges in CCW order called the 'horizon'.\n    // For an edge to be part of the horizon it must join a face that can see\n    // 'eyePoint' and a face that cannot see 'eyePoint'.\n  }, {\n    key: \"computeHorizon\",\n    value: function computeHorizon(eyePoint, crossEdge, face, horizon) {\n      this.deleteFaceVertices(face);\n      face.mark = Deleted;\n      var edge;\n      if (crossEdge === null) {\n        edge = crossEdge = face.getEdge(0);\n      } else {\n        edge = crossEdge.next;\n      }\n      do {\n        var twinEdge = edge.twin;\n        var oppositeFace = twinEdge.face;\n        if (oppositeFace.mark === Visible) {\n          if (oppositeFace.distanceToPoint(eyePoint) > this.tolerance) {\n            this.computeHorizon(eyePoint, twinEdge, oppositeFace, horizon);\n          } else {\n            horizon.push(edge);\n          }\n        }\n        edge = edge.next;\n      } while (edge !== crossEdge);\n      return this;\n    }\n    // Creates a face with the vertices 'eyeVertex.point', 'horizonEdge.tail' and 'horizonEdge.head' in CCW order\n  }, {\n    key: \"addAdjoiningFace\",\n    value: function addAdjoiningFace(eyeVertex, horizonEdge) {\n      var face = Face.create(eyeVertex, horizonEdge.tail(), horizonEdge.head());\n      this.faces.push(face);\n      face.getEdge(-1).setTwin(horizonEdge.twin);\n      return face.getEdge(0);\n    }\n    //  Adds 'horizon.length' faces to the hull, each face will be linked with the\n    //  horizon opposite face and the face on the left/right\n  }, {\n    key: \"addNewFaces\",\n    value: function addNewFaces(eyeVertex, horizon) {\n      this.newFaces = [];\n      var firstSideEdge = null;\n      var previousSideEdge = null;\n      for (var i = 0; i < horizon.length; i++) {\n        var horizonEdge = horizon[i];\n        var sideEdge = this.addAdjoiningFace(eyeVertex, horizonEdge);\n        if (firstSideEdge === null) {\n          firstSideEdge = sideEdge;\n        } else {\n          sideEdge.next.setTwin(previousSideEdge);\n        }\n        this.newFaces.push(sideEdge.face);\n        previousSideEdge = sideEdge;\n      }\n      firstSideEdge.next.setTwin(previousSideEdge);\n      return this;\n    }\n    // Adds a vertex to the hull\n  }, {\n    key: \"addVertexToHull\",\n    value: function addVertexToHull(eyeVertex) {\n      var horizon = [];\n      this.unassigned.clear();\n      this.removeVertexFromFace(eyeVertex, eyeVertex.face);\n      this.computeHorizon(eyeVertex.point, null, eyeVertex.face, horizon);\n      this.addNewFaces(eyeVertex, horizon);\n      this.resolveUnassignedPoints(this.newFaces);\n      return this;\n    }\n  }, {\n    key: \"cleanup\",\n    value: function cleanup() {\n      this.assigned.clear();\n      this.unassigned.clear();\n      this.newFaces = [];\n      return this;\n    }\n  }, {\n    key: \"compute\",\n    value: function compute() {\n      var vertex;\n      this.computeInitialHull();\n      while ((vertex = this.nextVertexToAdd()) !== void 0) {\n        this.addVertexToHull(vertex);\n      }\n      this.reindexFaces();\n      this.cleanup();\n      return this;\n    }\n  }]);\n  return ConvexHull;\n}();\nvar Face = /*#__PURE__*/function () {\n  function Face() {\n    _classCallCheck(this, Face);\n    this.normal = new Vector3();\n    this.midpoint = new Vector3();\n    this.area = 0;\n    this.constant = 0;\n    this.outside = null;\n    this.mark = Visible;\n    this.edge = null;\n  }\n  _createClass(Face, [{\n    key: \"getEdge\",\n    value: function getEdge(i) {\n      var edge = this.edge;\n      while (i > 0) {\n        edge = edge.next;\n        i--;\n      }\n      while (i < 0) {\n        edge = edge.prev;\n        i++;\n      }\n      return edge;\n    }\n  }, {\n    key: \"compute\",\n    value: function compute() {\n      var a = this.edge.tail();\n      var b = this.edge.head();\n      var c = this.edge.next.head();\n      _triangle.set(a.point, b.point, c.point);\n      _triangle.getNormal(this.normal);\n      _triangle.getMidpoint(this.midpoint);\n      this.area = _triangle.getArea();\n      this.constant = this.normal.dot(this.midpoint);\n      return this;\n    }\n  }, {\n    key: \"distanceToPoint\",\n    value: function distanceToPoint(point) {\n      return this.normal.dot(point) - this.constant;\n    }\n  }], [{\n    key: \"create\",\n    value: function create(a, b, c) {\n      var face = new Face();\n      var e0 = new HalfEdge(a, face);\n      var e1 = new HalfEdge(b, face);\n      var e2 = new HalfEdge(c, face);\n      e0.next = e2.prev = e1;\n      e1.next = e0.prev = e2;\n      e2.next = e1.prev = e0;\n      face.edge = e0;\n      return face.compute();\n    }\n  }]);\n  return Face;\n}();\nvar HalfEdge = /*#__PURE__*/function () {\n  function HalfEdge(vertex, face) {\n    _classCallCheck(this, HalfEdge);\n    this.vertex = vertex;\n    this.prev = null;\n    this.next = null;\n    this.twin = null;\n    this.face = face;\n  }\n  _createClass(HalfEdge, [{\n    key: \"head\",\n    value: function head() {\n      return this.vertex;\n    }\n  }, {\n    key: \"tail\",\n    value: function tail() {\n      return this.prev ? this.prev.vertex : null;\n    }\n  }, {\n    key: \"length\",\n    value: function length() {\n      var head = this.head();\n      var tail = this.tail();\n      if (tail !== null) {\n        return tail.point.distanceTo(head.point);\n      }\n      return -1;\n    }\n  }, {\n    key: \"lengthSquared\",\n    value: function lengthSquared() {\n      var head = this.head();\n      var tail = this.tail();\n      if (tail !== null) {\n        return tail.point.distanceToSquared(head.point);\n      }\n      return -1;\n    }\n  }, {\n    key: \"setTwin\",\n    value: function setTwin(edge) {\n      this.twin = edge;\n      edge.twin = this;\n      return this;\n    }\n  }]);\n  return HalfEdge;\n}();\nvar VertexNode = /*#__PURE__*/_createClass(function VertexNode(point) {\n  _classCallCheck(this, VertexNode);\n  this.point = point;\n  this.prev = null;\n  this.next = null;\n  this.face = null;\n});\nvar VertexList = /*#__PURE__*/function () {\n  function VertexList() {\n    _classCallCheck(this, VertexList);\n    this.head = null;\n    this.tail = null;\n  }\n  _createClass(VertexList, [{\n    key: \"first\",\n    value: function first() {\n      return this.head;\n    }\n  }, {\n    key: \"last\",\n    value: function last() {\n      return this.tail;\n    }\n  }, {\n    key: \"clear\",\n    value: function clear() {\n      this.head = this.tail = null;\n      return this;\n    }\n    // Inserts a vertex before the target vertex\n  }, {\n    key: \"insertBefore\",\n    value: function insertBefore(target, vertex) {\n      vertex.prev = target.prev;\n      vertex.next = target;\n      if (vertex.prev === null) {\n        this.head = vertex;\n      } else {\n        vertex.prev.next = vertex;\n      }\n      target.prev = vertex;\n      return this;\n    }\n    // Inserts a vertex after the target vertex\n  }, {\n    key: \"insertAfter\",\n    value: function insertAfter(target, vertex) {\n      vertex.prev = target;\n      vertex.next = target.next;\n      if (vertex.next === null) {\n        this.tail = vertex;\n      } else {\n        vertex.next.prev = vertex;\n      }\n      target.next = vertex;\n      return this;\n    }\n    // Appends a vertex to the end of the linked list\n  }, {\n    key: \"append\",\n    value: function append(vertex) {\n      if (this.head === null) {\n        this.head = vertex;\n      } else {\n        this.tail.next = vertex;\n      }\n      vertex.prev = this.tail;\n      vertex.next = null;\n      this.tail = vertex;\n      return this;\n    }\n    // Appends a chain of vertices where 'vertex' is the head.\n  }, {\n    key: \"appendChain\",\n    value: function appendChain(vertex) {\n      if (this.head === null) {\n        this.head = vertex;\n      } else {\n        this.tail.next = vertex;\n      }\n      vertex.prev = this.tail;\n      while (vertex.next !== null) {\n        vertex = vertex.next;\n      }\n      this.tail = vertex;\n      return this;\n    }\n    // Removes a vertex from the linked list\n  }, {\n    key: \"remove\",\n    value: function remove(vertex) {\n      if (vertex.prev === null) {\n        this.head = vertex.next;\n      } else {\n        vertex.prev.next = vertex.next;\n      }\n      if (vertex.next === null) {\n        this.tail = vertex.prev;\n      } else {\n        vertex.next.prev = vertex.prev;\n      }\n      return this;\n    }\n    // Removes a list of vertices whose 'head' is 'a' and whose 'tail' is b\n  }, {\n    key: \"removeSubList\",\n    value: function removeSubList(a, b) {\n      if (a.prev === null) {\n        this.head = b.next;\n      } else {\n        a.prev.next = b.next;\n      }\n      if (b.next === null) {\n        this.tail = a.prev;\n      } else {\n        b.next.prev = a.prev;\n      }\n      return this;\n    }\n  }, {\n    key: \"isEmpty\",\n    value: function isEmpty() {\n      return this.head === null;\n    }\n  }]);\n  return VertexList;\n}();\nexport { ConvexHull, Face, HalfEdge, VertexList, VertexNode };","map":{"version":3,"names":["Vector3","Line3","Plane","Triangle","Visible","Deleted","_v1","_line3","_plane","_closestPoint","_triangle","ConvexHull","_classCallCheck","tolerance","faces","newFaces","assigned","VertexList","unassigned","vertices","_createClass","key","value","setFromPoints","points","length","makeEmpty","i","l","push","VertexNode","compute","setFromObject","object","updateMatrixWorld","traverse","node","geometry","attribute","attributes","position","count","point","fromBufferAttribute","applyMatrix4","matrixWorld","containsPoint","face","distanceToPoint","intersectRay","ray","target","tNear","Infinity","tFar","vN","origin","vD","normal","dot","direction","t","Math","min","max","at","intersectsRay","addVertexToFace","vertex","outside","append","insertBefore","removeVertexFromFace","next","remove","removeAllVerticesFromFace","start","end","removeSubList","prev","deleteFaceVertices","absorbingFace","faceVertices","appendChain","nextVertex","distance","resolveUnassignedPoints","isEmpty","first","maxDistance","maxFace","mark","computeExtremes","minVertices","maxVertices","copy","j","getComponent","setComponent","Number","EPSILON","abs","x","y","z","computeInitialHull","extremes","index","v0","v1","v2","v3","set","closestPointToPoint","distanceToSquared","setFromCoplanarPoints","Face","create","getEdge","setTwin","reindexFaces","activeFaces","nextVertexToAdd","eyeVertex","eyeFace","computeHorizon","eyePoint","crossEdge","horizon","edge","twinEdge","twin","oppositeFace","addAdjoiningFace","horizonEdge","tail","head","addNewFaces","firstSideEdge","previousSideEdge","sideEdge","addVertexToHull","clear","cleanup","midpoint","area","constant","a","b","c","getNormal","getMidpoint","getArea","e0","HalfEdge","e1","e2","distanceTo","lengthSquared","last","insertAfter"],"sources":["/home/krug/Coding/JavaScript/Websites/Personal/personal/node_modules/.pnpm/three-stdlib@2.23.7_three@0.151.3/node_modules/three-stdlib/math/ConvexHull.js"],"sourcesContent":["import { Vector3, Line3, Plane, Triangle } from \"three\";\nconst Visible = 0;\nconst Deleted = 1;\nconst _v1 = /* @__PURE__ */ new Vector3();\nconst _line3 = /* @__PURE__ */ new Line3();\nconst _plane = /* @__PURE__ */ new Plane();\nconst _closestPoint = /* @__PURE__ */ new Vector3();\nconst _triangle = /* @__PURE__ */ new Triangle();\nclass ConvexHull {\n  constructor() {\n    this.tolerance = -1;\n    this.faces = [];\n    this.newFaces = [];\n    this.assigned = new VertexList();\n    this.unassigned = new VertexList();\n    this.vertices = [];\n  }\n  setFromPoints(points) {\n    if (points.length >= 4) {\n      this.makeEmpty();\n      for (let i = 0, l = points.length; i < l; i++) {\n        this.vertices.push(new VertexNode(points[i]));\n      }\n      this.compute();\n    }\n    return this;\n  }\n  setFromObject(object) {\n    const points = [];\n    object.updateMatrixWorld(true);\n    object.traverse(function(node) {\n      const geometry = node.geometry;\n      if (geometry !== void 0) {\n        const attribute = geometry.attributes.position;\n        if (attribute !== void 0) {\n          for (let i = 0, l = attribute.count; i < l; i++) {\n            const point = new Vector3();\n            point.fromBufferAttribute(attribute, i).applyMatrix4(node.matrixWorld);\n            points.push(point);\n          }\n        }\n      }\n    });\n    return this.setFromPoints(points);\n  }\n  containsPoint(point) {\n    const faces = this.faces;\n    for (let i = 0, l = faces.length; i < l; i++) {\n      const face = faces[i];\n      if (face.distanceToPoint(point) > this.tolerance)\n        return false;\n    }\n    return true;\n  }\n  intersectRay(ray, target) {\n    const faces = this.faces;\n    let tNear = -Infinity;\n    let tFar = Infinity;\n    for (let i = 0, l = faces.length; i < l; i++) {\n      const face = faces[i];\n      const vN = face.distanceToPoint(ray.origin);\n      const vD = face.normal.dot(ray.direction);\n      if (vN > 0 && vD >= 0)\n        return null;\n      const t = vD !== 0 ? -vN / vD : 0;\n      if (t <= 0)\n        continue;\n      if (vD > 0) {\n        tFar = Math.min(t, tFar);\n      } else {\n        tNear = Math.max(t, tNear);\n      }\n      if (tNear > tFar) {\n        return null;\n      }\n    }\n    if (tNear !== -Infinity) {\n      ray.at(tNear, target);\n    } else {\n      ray.at(tFar, target);\n    }\n    return target;\n  }\n  intersectsRay(ray) {\n    return this.intersectRay(ray, _v1) !== null;\n  }\n  makeEmpty() {\n    this.faces = [];\n    this.vertices = [];\n    return this;\n  }\n  // Adds a vertex to the 'assigned' list of vertices and assigns it to the given face\n  addVertexToFace(vertex, face) {\n    vertex.face = face;\n    if (face.outside === null) {\n      this.assigned.append(vertex);\n    } else {\n      this.assigned.insertBefore(face.outside, vertex);\n    }\n    face.outside = vertex;\n    return this;\n  }\n  // Removes a vertex from the 'assigned' list of vertices and from the given face\n  removeVertexFromFace(vertex, face) {\n    if (vertex === face.outside) {\n      if (vertex.next !== null && vertex.next.face === face) {\n        face.outside = vertex.next;\n      } else {\n        face.outside = null;\n      }\n    }\n    this.assigned.remove(vertex);\n    return this;\n  }\n  // Removes all the visible vertices that a given face is able to see which are stored in the 'assigned' vertex list\n  removeAllVerticesFromFace(face) {\n    if (face.outside !== null) {\n      const start = face.outside;\n      let end = face.outside;\n      while (end.next !== null && end.next.face === face) {\n        end = end.next;\n      }\n      this.assigned.removeSubList(start, end);\n      start.prev = end.next = null;\n      face.outside = null;\n      return start;\n    }\n  }\n  // Removes all the visible vertices that 'face' is able to see\n  deleteFaceVertices(face, absorbingFace) {\n    const faceVertices = this.removeAllVerticesFromFace(face);\n    if (faceVertices !== void 0) {\n      if (absorbingFace === void 0) {\n        this.unassigned.appendChain(faceVertices);\n      } else {\n        let vertex = faceVertices;\n        do {\n          const nextVertex = vertex.next;\n          const distance = absorbingFace.distanceToPoint(vertex.point);\n          if (distance > this.tolerance) {\n            this.addVertexToFace(vertex, absorbingFace);\n          } else {\n            this.unassigned.append(vertex);\n          }\n          vertex = nextVertex;\n        } while (vertex !== null);\n      }\n    }\n    return this;\n  }\n  // Reassigns as many vertices as possible from the unassigned list to the new faces\n  resolveUnassignedPoints(newFaces) {\n    if (this.unassigned.isEmpty() === false) {\n      let vertex = this.unassigned.first();\n      do {\n        const nextVertex = vertex.next;\n        let maxDistance = this.tolerance;\n        let maxFace = null;\n        for (let i = 0; i < newFaces.length; i++) {\n          const face = newFaces[i];\n          if (face.mark === Visible) {\n            const distance = face.distanceToPoint(vertex.point);\n            if (distance > maxDistance) {\n              maxDistance = distance;\n              maxFace = face;\n            }\n            if (maxDistance > 1e3 * this.tolerance)\n              break;\n          }\n        }\n        if (maxFace !== null) {\n          this.addVertexToFace(vertex, maxFace);\n        }\n        vertex = nextVertex;\n      } while (vertex !== null);\n    }\n    return this;\n  }\n  // Computes the extremes of a simplex which will be the initial hull\n  computeExtremes() {\n    const min = new Vector3();\n    const max = new Vector3();\n    const minVertices = [];\n    const maxVertices = [];\n    for (let i = 0; i < 3; i++) {\n      minVertices[i] = maxVertices[i] = this.vertices[0];\n    }\n    min.copy(this.vertices[0].point);\n    max.copy(this.vertices[0].point);\n    for (let i = 0, l = this.vertices.length; i < l; i++) {\n      const vertex = this.vertices[i];\n      const point = vertex.point;\n      for (let j = 0; j < 3; j++) {\n        if (point.getComponent(j) < min.getComponent(j)) {\n          min.setComponent(j, point.getComponent(j));\n          minVertices[j] = vertex;\n        }\n      }\n      for (let j = 0; j < 3; j++) {\n        if (point.getComponent(j) > max.getComponent(j)) {\n          max.setComponent(j, point.getComponent(j));\n          maxVertices[j] = vertex;\n        }\n      }\n    }\n    this.tolerance = 3 * Number.EPSILON * (Math.max(Math.abs(min.x), Math.abs(max.x)) + Math.max(Math.abs(min.y), Math.abs(max.y)) + Math.max(Math.abs(min.z), Math.abs(max.z)));\n    return { min: minVertices, max: maxVertices };\n  }\n  // Computes the initial simplex assigning to its faces all the points\n  // that are candidates to form part of the hull\n  computeInitialHull() {\n    const vertices = this.vertices;\n    const extremes = this.computeExtremes();\n    const min = extremes.min;\n    const max = extremes.max;\n    let maxDistance = 0;\n    let index = 0;\n    for (let i = 0; i < 3; i++) {\n      const distance = max[i].point.getComponent(i) - min[i].point.getComponent(i);\n      if (distance > maxDistance) {\n        maxDistance = distance;\n        index = i;\n      }\n    }\n    const v0 = min[index];\n    const v1 = max[index];\n    let v2;\n    let v3;\n    maxDistance = 0;\n    _line3.set(v0.point, v1.point);\n    for (let i = 0, l = this.vertices.length; i < l; i++) {\n      const vertex = vertices[i];\n      if (vertex !== v0 && vertex !== v1) {\n        _line3.closestPointToPoint(vertex.point, true, _closestPoint);\n        const distance = _closestPoint.distanceToSquared(vertex.point);\n        if (distance > maxDistance) {\n          maxDistance = distance;\n          v2 = vertex;\n        }\n      }\n    }\n    maxDistance = -1;\n    _plane.setFromCoplanarPoints(v0.point, v1.point, v2.point);\n    for (let i = 0, l = this.vertices.length; i < l; i++) {\n      const vertex = vertices[i];\n      if (vertex !== v0 && vertex !== v1 && vertex !== v2) {\n        const distance = Math.abs(_plane.distanceToPoint(vertex.point));\n        if (distance > maxDistance) {\n          maxDistance = distance;\n          v3 = vertex;\n        }\n      }\n    }\n    const faces = [];\n    if (_plane.distanceToPoint(v3.point) < 0) {\n      faces.push(Face.create(v0, v1, v2), Face.create(v3, v1, v0), Face.create(v3, v2, v1), Face.create(v3, v0, v2));\n      for (let i = 0; i < 3; i++) {\n        const j = (i + 1) % 3;\n        faces[i + 1].getEdge(2).setTwin(faces[0].getEdge(j));\n        faces[i + 1].getEdge(1).setTwin(faces[j + 1].getEdge(0));\n      }\n    } else {\n      faces.push(Face.create(v0, v2, v1), Face.create(v3, v0, v1), Face.create(v3, v1, v2), Face.create(v3, v2, v0));\n      for (let i = 0; i < 3; i++) {\n        const j = (i + 1) % 3;\n        faces[i + 1].getEdge(2).setTwin(faces[0].getEdge((3 - i) % 3));\n        faces[i + 1].getEdge(0).setTwin(faces[j + 1].getEdge(1));\n      }\n    }\n    for (let i = 0; i < 4; i++) {\n      this.faces.push(faces[i]);\n    }\n    for (let i = 0, l = vertices.length; i < l; i++) {\n      const vertex = vertices[i];\n      if (vertex !== v0 && vertex !== v1 && vertex !== v2 && vertex !== v3) {\n        maxDistance = this.tolerance;\n        let maxFace = null;\n        for (let j = 0; j < 4; j++) {\n          const distance = this.faces[j].distanceToPoint(vertex.point);\n          if (distance > maxDistance) {\n            maxDistance = distance;\n            maxFace = this.faces[j];\n          }\n        }\n        if (maxFace !== null) {\n          this.addVertexToFace(vertex, maxFace);\n        }\n      }\n    }\n    return this;\n  }\n  // Removes inactive faces\n  reindexFaces() {\n    const activeFaces = [];\n    for (let i = 0; i < this.faces.length; i++) {\n      const face = this.faces[i];\n      if (face.mark === Visible) {\n        activeFaces.push(face);\n      }\n    }\n    this.faces = activeFaces;\n    return this;\n  }\n  // Finds the next vertex to create faces with the current hull\n  nextVertexToAdd() {\n    if (this.assigned.isEmpty() === false) {\n      let eyeVertex, maxDistance = 0;\n      const eyeFace = this.assigned.first().face;\n      let vertex = eyeFace.outside;\n      do {\n        const distance = eyeFace.distanceToPoint(vertex.point);\n        if (distance > maxDistance) {\n          maxDistance = distance;\n          eyeVertex = vertex;\n        }\n        vertex = vertex.next;\n      } while (vertex !== null && vertex.face === eyeFace);\n      return eyeVertex;\n    }\n  }\n  // Computes a chain of half edges in CCW order called the 'horizon'.\n  // For an edge to be part of the horizon it must join a face that can see\n  // 'eyePoint' and a face that cannot see 'eyePoint'.\n  computeHorizon(eyePoint, crossEdge, face, horizon) {\n    this.deleteFaceVertices(face);\n    face.mark = Deleted;\n    let edge;\n    if (crossEdge === null) {\n      edge = crossEdge = face.getEdge(0);\n    } else {\n      edge = crossEdge.next;\n    }\n    do {\n      const twinEdge = edge.twin;\n      const oppositeFace = twinEdge.face;\n      if (oppositeFace.mark === Visible) {\n        if (oppositeFace.distanceToPoint(eyePoint) > this.tolerance) {\n          this.computeHorizon(eyePoint, twinEdge, oppositeFace, horizon);\n        } else {\n          horizon.push(edge);\n        }\n      }\n      edge = edge.next;\n    } while (edge !== crossEdge);\n    return this;\n  }\n  // Creates a face with the vertices 'eyeVertex.point', 'horizonEdge.tail' and 'horizonEdge.head' in CCW order\n  addAdjoiningFace(eyeVertex, horizonEdge) {\n    const face = Face.create(eyeVertex, horizonEdge.tail(), horizonEdge.head());\n    this.faces.push(face);\n    face.getEdge(-1).setTwin(horizonEdge.twin);\n    return face.getEdge(0);\n  }\n  //  Adds 'horizon.length' faces to the hull, each face will be linked with the\n  //  horizon opposite face and the face on the left/right\n  addNewFaces(eyeVertex, horizon) {\n    this.newFaces = [];\n    let firstSideEdge = null;\n    let previousSideEdge = null;\n    for (let i = 0; i < horizon.length; i++) {\n      const horizonEdge = horizon[i];\n      const sideEdge = this.addAdjoiningFace(eyeVertex, horizonEdge);\n      if (firstSideEdge === null) {\n        firstSideEdge = sideEdge;\n      } else {\n        sideEdge.next.setTwin(previousSideEdge);\n      }\n      this.newFaces.push(sideEdge.face);\n      previousSideEdge = sideEdge;\n    }\n    firstSideEdge.next.setTwin(previousSideEdge);\n    return this;\n  }\n  // Adds a vertex to the hull\n  addVertexToHull(eyeVertex) {\n    const horizon = [];\n    this.unassigned.clear();\n    this.removeVertexFromFace(eyeVertex, eyeVertex.face);\n    this.computeHorizon(eyeVertex.point, null, eyeVertex.face, horizon);\n    this.addNewFaces(eyeVertex, horizon);\n    this.resolveUnassignedPoints(this.newFaces);\n    return this;\n  }\n  cleanup() {\n    this.assigned.clear();\n    this.unassigned.clear();\n    this.newFaces = [];\n    return this;\n  }\n  compute() {\n    let vertex;\n    this.computeInitialHull();\n    while ((vertex = this.nextVertexToAdd()) !== void 0) {\n      this.addVertexToHull(vertex);\n    }\n    this.reindexFaces();\n    this.cleanup();\n    return this;\n  }\n}\nclass Face {\n  constructor() {\n    this.normal = new Vector3();\n    this.midpoint = new Vector3();\n    this.area = 0;\n    this.constant = 0;\n    this.outside = null;\n    this.mark = Visible;\n    this.edge = null;\n  }\n  static create(a, b, c) {\n    const face = new Face();\n    const e0 = new HalfEdge(a, face);\n    const e1 = new HalfEdge(b, face);\n    const e2 = new HalfEdge(c, face);\n    e0.next = e2.prev = e1;\n    e1.next = e0.prev = e2;\n    e2.next = e1.prev = e0;\n    face.edge = e0;\n    return face.compute();\n  }\n  getEdge(i) {\n    let edge = this.edge;\n    while (i > 0) {\n      edge = edge.next;\n      i--;\n    }\n    while (i < 0) {\n      edge = edge.prev;\n      i++;\n    }\n    return edge;\n  }\n  compute() {\n    const a = this.edge.tail();\n    const b = this.edge.head();\n    const c = this.edge.next.head();\n    _triangle.set(a.point, b.point, c.point);\n    _triangle.getNormal(this.normal);\n    _triangle.getMidpoint(this.midpoint);\n    this.area = _triangle.getArea();\n    this.constant = this.normal.dot(this.midpoint);\n    return this;\n  }\n  distanceToPoint(point) {\n    return this.normal.dot(point) - this.constant;\n  }\n}\nclass HalfEdge {\n  constructor(vertex, face) {\n    this.vertex = vertex;\n    this.prev = null;\n    this.next = null;\n    this.twin = null;\n    this.face = face;\n  }\n  head() {\n    return this.vertex;\n  }\n  tail() {\n    return this.prev ? this.prev.vertex : null;\n  }\n  length() {\n    const head = this.head();\n    const tail = this.tail();\n    if (tail !== null) {\n      return tail.point.distanceTo(head.point);\n    }\n    return -1;\n  }\n  lengthSquared() {\n    const head = this.head();\n    const tail = this.tail();\n    if (tail !== null) {\n      return tail.point.distanceToSquared(head.point);\n    }\n    return -1;\n  }\n  setTwin(edge) {\n    this.twin = edge;\n    edge.twin = this;\n    return this;\n  }\n}\nclass VertexNode {\n  constructor(point) {\n    this.point = point;\n    this.prev = null;\n    this.next = null;\n    this.face = null;\n  }\n}\nclass VertexList {\n  constructor() {\n    this.head = null;\n    this.tail = null;\n  }\n  first() {\n    return this.head;\n  }\n  last() {\n    return this.tail;\n  }\n  clear() {\n    this.head = this.tail = null;\n    return this;\n  }\n  // Inserts a vertex before the target vertex\n  insertBefore(target, vertex) {\n    vertex.prev = target.prev;\n    vertex.next = target;\n    if (vertex.prev === null) {\n      this.head = vertex;\n    } else {\n      vertex.prev.next = vertex;\n    }\n    target.prev = vertex;\n    return this;\n  }\n  // Inserts a vertex after the target vertex\n  insertAfter(target, vertex) {\n    vertex.prev = target;\n    vertex.next = target.next;\n    if (vertex.next === null) {\n      this.tail = vertex;\n    } else {\n      vertex.next.prev = vertex;\n    }\n    target.next = vertex;\n    return this;\n  }\n  // Appends a vertex to the end of the linked list\n  append(vertex) {\n    if (this.head === null) {\n      this.head = vertex;\n    } else {\n      this.tail.next = vertex;\n    }\n    vertex.prev = this.tail;\n    vertex.next = null;\n    this.tail = vertex;\n    return this;\n  }\n  // Appends a chain of vertices where 'vertex' is the head.\n  appendChain(vertex) {\n    if (this.head === null) {\n      this.head = vertex;\n    } else {\n      this.tail.next = vertex;\n    }\n    vertex.prev = this.tail;\n    while (vertex.next !== null) {\n      vertex = vertex.next;\n    }\n    this.tail = vertex;\n    return this;\n  }\n  // Removes a vertex from the linked list\n  remove(vertex) {\n    if (vertex.prev === null) {\n      this.head = vertex.next;\n    } else {\n      vertex.prev.next = vertex.next;\n    }\n    if (vertex.next === null) {\n      this.tail = vertex.prev;\n    } else {\n      vertex.next.prev = vertex.prev;\n    }\n    return this;\n  }\n  // Removes a list of vertices whose 'head' is 'a' and whose 'tail' is b\n  removeSubList(a, b) {\n    if (a.prev === null) {\n      this.head = b.next;\n    } else {\n      a.prev.next = b.next;\n    }\n    if (b.next === null) {\n      this.tail = a.prev;\n    } else {\n      b.next.prev = a.prev;\n    }\n    return this;\n  }\n  isEmpty() {\n    return this.head === null;\n  }\n}\nexport {\n  ConvexHull,\n  Face,\n  HalfEdge,\n  VertexList,\n  VertexNode\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}