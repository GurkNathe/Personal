{"ast":null,"code":"import _createForOfIteratorHelper from \"/home/krug/Coding/JavaScript/Websites/Personal/personal/node_modules/.pnpm/@babel+runtime@7.22.3/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport _classCallCheck from \"/home/krug/Coding/JavaScript/Websites/Personal/personal/node_modules/.pnpm/@babel+runtime@7.22.3/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/home/krug/Coding/JavaScript/Websites/Personal/personal/node_modules/.pnpm/@babel+runtime@7.22.3/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _assertThisInitialized from \"/home/krug/Coding/JavaScript/Websites/Personal/personal/node_modules/.pnpm/@babel+runtime@7.22.3/node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js\";\nimport _inherits from \"/home/krug/Coding/JavaScript/Websites/Personal/personal/node_modules/.pnpm/@babel+runtime@7.22.3/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/home/krug/Coding/JavaScript/Websites/Personal/personal/node_modules/.pnpm/@babel+runtime@7.22.3/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nvar __defProp = Object.defineProperty;\nvar __defNormalProp = function __defNormalProp(obj, key, value) {\n  return key in obj ? __defProp(obj, key, {\n    enumerable: true,\n    configurable: true,\n    writable: true,\n    value: value\n  }) : obj[key] = value;\n};\nvar __publicField = function __publicField(obj, key, value) {\n  __defNormalProp(obj, typeof key !== \"symbol\" ? key + \"\" : key, value);\n  return value;\n};\nimport { Matrix4, EventDispatcher, Vector2, Vector3, Quaternion, Group, EllipseCurve, BufferGeometry, PerspectiveCamera, MathUtils, OrthographicCamera, Box3, Sphere, GridHelper, LineBasicMaterial, Line, Raycaster } from \"three\";\nvar STATE = {\n  IDLE: Symbol(),\n  ROTATE: Symbol(),\n  PAN: Symbol(),\n  SCALE: Symbol(),\n  FOV: Symbol(),\n  FOCUS: Symbol(),\n  ZROTATE: Symbol(),\n  TOUCH_MULTI: Symbol(),\n  ANIMATION_FOCUS: Symbol(),\n  ANIMATION_ROTATE: Symbol()\n};\nvar INPUT = {\n  NONE: Symbol(),\n  ONE_FINGER: Symbol(),\n  ONE_FINGER_SWITCHED: Symbol(),\n  TWO_FINGER: Symbol(),\n  MULT_FINGER: Symbol(),\n  CURSOR: Symbol()\n};\nvar _center = {\n  x: 0,\n  y: 0\n};\nvar _transformation = {\n  camera: /* @__PURE__ */new Matrix4(),\n  gizmos: /* @__PURE__ */new Matrix4()\n};\nvar _changeEvent = {\n  type: \"change\"\n};\nvar _startEvent = {\n  type: \"start\"\n};\nvar _endEvent = {\n  type: \"end\"\n};\nvar ArcballControls = /*#__PURE__*/function (_EventDispatcher) {\n  _inherits(ArcballControls, _EventDispatcher);\n  var _super = _createSuper(ArcballControls);\n  function ArcballControls(camera) {\n    var _this;\n    var domElement = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n    var scene = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n    _classCallCheck(this, ArcballControls);\n    _this = _super.call(this);\n    __publicField(_assertThisInitialized(_this), \"camera\");\n    __publicField(_assertThisInitialized(_this), \"domElement\");\n    __publicField(_assertThisInitialized(_this), \"scene\");\n    __publicField(_assertThisInitialized(_this), \"mouseActions\");\n    __publicField(_assertThisInitialized(_this), \"_mouseOp\");\n    __publicField(_assertThisInitialized(_this), \"_v2_1\");\n    __publicField(_assertThisInitialized(_this), \"_v3_1\");\n    __publicField(_assertThisInitialized(_this), \"_v3_2\");\n    __publicField(_assertThisInitialized(_this), \"_m4_1\");\n    __publicField(_assertThisInitialized(_this), \"_m4_2\");\n    __publicField(_assertThisInitialized(_this), \"_quat\");\n    __publicField(_assertThisInitialized(_this), \"_translationMatrix\");\n    __publicField(_assertThisInitialized(_this), \"_rotationMatrix\");\n    __publicField(_assertThisInitialized(_this), \"_scaleMatrix\");\n    __publicField(_assertThisInitialized(_this), \"_rotationAxis\");\n    __publicField(_assertThisInitialized(_this), \"_cameraMatrixState\");\n    __publicField(_assertThisInitialized(_this), \"_cameraProjectionState\");\n    __publicField(_assertThisInitialized(_this), \"_fovState\");\n    __publicField(_assertThisInitialized(_this), \"_upState\");\n    __publicField(_assertThisInitialized(_this), \"_zoomState\");\n    __publicField(_assertThisInitialized(_this), \"_nearPos\");\n    __publicField(_assertThisInitialized(_this), \"_farPos\");\n    __publicField(_assertThisInitialized(_this), \"_gizmoMatrixState\");\n    __publicField(_assertThisInitialized(_this), \"_up0\");\n    __publicField(_assertThisInitialized(_this), \"_zoom0\");\n    __publicField(_assertThisInitialized(_this), \"_fov0\");\n    __publicField(_assertThisInitialized(_this), \"_initialNear\");\n    __publicField(_assertThisInitialized(_this), \"_nearPos0\");\n    __publicField(_assertThisInitialized(_this), \"_initialFar\");\n    __publicField(_assertThisInitialized(_this), \"_farPos0\");\n    __publicField(_assertThisInitialized(_this), \"_cameraMatrixState0\");\n    __publicField(_assertThisInitialized(_this), \"_gizmoMatrixState0\");\n    __publicField(_assertThisInitialized(_this), \"_button\");\n    __publicField(_assertThisInitialized(_this), \"_touchStart\");\n    __publicField(_assertThisInitialized(_this), \"_touchCurrent\");\n    __publicField(_assertThisInitialized(_this), \"_input\");\n    __publicField(_assertThisInitialized(_this), \"_switchSensibility\");\n    __publicField(_assertThisInitialized(_this), \"_startFingerDistance\");\n    __publicField(_assertThisInitialized(_this), \"_currentFingerDistance\");\n    __publicField(_assertThisInitialized(_this), \"_startFingerRotation\");\n    __publicField(_assertThisInitialized(_this), \"_currentFingerRotation\");\n    __publicField(_assertThisInitialized(_this), \"_devPxRatio\");\n    __publicField(_assertThisInitialized(_this), \"_downValid\");\n    __publicField(_assertThisInitialized(_this), \"_nclicks\");\n    __publicField(_assertThisInitialized(_this), \"_downEvents\");\n    __publicField(_assertThisInitialized(_this), \"_clickStart\");\n    __publicField(_assertThisInitialized(_this), \"_maxDownTime\");\n    __publicField(_assertThisInitialized(_this), \"_maxInterval\");\n    __publicField(_assertThisInitialized(_this), \"_posThreshold\");\n    __publicField(_assertThisInitialized(_this), \"_movementThreshold\");\n    __publicField(_assertThisInitialized(_this), \"_currentCursorPosition\");\n    __publicField(_assertThisInitialized(_this), \"_startCursorPosition\");\n    __publicField(_assertThisInitialized(_this), \"_grid\");\n    __publicField(_assertThisInitialized(_this), \"_gridPosition\");\n    __publicField(_assertThisInitialized(_this), \"_gizmos\");\n    __publicField(_assertThisInitialized(_this), \"_curvePts\");\n    __publicField(_assertThisInitialized(_this), \"_timeStart\");\n    __publicField(_assertThisInitialized(_this), \"_animationId\");\n    __publicField(_assertThisInitialized(_this), \"focusAnimationTime\");\n    __publicField(_assertThisInitialized(_this), \"_timePrev\");\n    __publicField(_assertThisInitialized(_this), \"_timeCurrent\");\n    __publicField(_assertThisInitialized(_this), \"_anglePrev\");\n    __publicField(_assertThisInitialized(_this), \"_angleCurrent\");\n    __publicField(_assertThisInitialized(_this), \"_cursorPosPrev\");\n    __publicField(_assertThisInitialized(_this), \"_cursorPosCurr\");\n    __publicField(_assertThisInitialized(_this), \"_wPrev\");\n    __publicField(_assertThisInitialized(_this), \"_wCurr\");\n    __publicField(_assertThisInitialized(_this), \"adjustNearFar\");\n    __publicField(_assertThisInitialized(_this), \"scaleFactor\");\n    __publicField(_assertThisInitialized(_this), \"dampingFactor\");\n    __publicField(_assertThisInitialized(_this), \"wMax\");\n    __publicField(_assertThisInitialized(_this), \"enableAnimations\");\n    __publicField(_assertThisInitialized(_this), \"enableGrid\");\n    __publicField(_assertThisInitialized(_this), \"cursorZoom\");\n    __publicField(_assertThisInitialized(_this), \"minFov\");\n    __publicField(_assertThisInitialized(_this), \"maxFov\");\n    __publicField(_assertThisInitialized(_this), \"enabled\");\n    __publicField(_assertThisInitialized(_this), \"enablePan\");\n    __publicField(_assertThisInitialized(_this), \"enableRotate\");\n    __publicField(_assertThisInitialized(_this), \"enableZoom\");\n    __publicField(_assertThisInitialized(_this), \"minDistance\");\n    __publicField(_assertThisInitialized(_this), \"maxDistance\");\n    __publicField(_assertThisInitialized(_this), \"minZoom\");\n    __publicField(_assertThisInitialized(_this), \"maxZoom\");\n    __publicField(_assertThisInitialized(_this), \"target\");\n    __publicField(_assertThisInitialized(_this), \"_currentTarget\");\n    __publicField(_assertThisInitialized(_this), \"_tbRadius\");\n    __publicField(_assertThisInitialized(_this), \"_state\");\n    //listeners\n    __publicField(_assertThisInitialized(_this), \"onWindowResize\", function () {\n      var scale = (_this._gizmos.scale.x + _this._gizmos.scale.y + _this._gizmos.scale.z) / 3;\n      if (_this.camera) {\n        var tbRadius = _this.calculateTbRadius(_this.camera);\n        if (tbRadius !== void 0) {\n          _this._tbRadius = tbRadius;\n        }\n      }\n      var newRadius = _this._tbRadius / scale;\n      var curve = new EllipseCurve(0, 0, newRadius, newRadius);\n      var points = curve.getPoints(_this._curvePts);\n      var curveGeometry = new BufferGeometry().setFromPoints(points);\n      for (var gizmo in _this._gizmos.children) {\n        var child = _this._gizmos.children[gizmo];\n        child.geometry = curveGeometry;\n      }\n      _this.dispatchEvent(_changeEvent);\n    });\n    __publicField(_assertThisInitialized(_this), \"onContextMenu\", function (event) {\n      if (!_this.enabled) {\n        return;\n      }\n      for (var i = 0; i < _this.mouseActions.length; i++) {\n        if (_this.mouseActions[i].mouse == 2) {\n          event.preventDefault();\n          break;\n        }\n      }\n    });\n    __publicField(_assertThisInitialized(_this), \"onPointerCancel\", function () {\n      _this._touchStart.splice(0, _this._touchStart.length);\n      _this._touchCurrent.splice(0, _this._touchCurrent.length);\n      _this._input = INPUT.NONE;\n    });\n    __publicField(_assertThisInitialized(_this), \"onPointerDown\", function (event) {\n      if (event.button == 0 && event.isPrimary) {\n        _this._downValid = true;\n        _this._downEvents.push(event);\n      } else {\n        _this._downValid = false;\n      }\n      if (event.pointerType == \"touch\" && _this._input != INPUT.CURSOR) {\n        _this._touchStart.push(event);\n        _this._touchCurrent.push(event);\n        switch (_this._input) {\n          case INPUT.NONE:\n            _this._input = INPUT.ONE_FINGER;\n            _this.onSinglePanStart(event, \"ROTATE\");\n            window.addEventListener(\"pointermove\", _this.onPointerMove);\n            window.addEventListener(\"pointerup\", _this.onPointerUp);\n            break;\n          case INPUT.ONE_FINGER:\n          case INPUT.ONE_FINGER_SWITCHED:\n            _this._input = INPUT.TWO_FINGER;\n            _this.onRotateStart();\n            _this.onPinchStart();\n            _this.onDoublePanStart();\n            break;\n          case INPUT.TWO_FINGER:\n            _this._input = INPUT.MULT_FINGER;\n            _this.onTriplePanStart();\n            break;\n        }\n      } else if (event.pointerType != \"touch\" && _this._input == INPUT.NONE) {\n        var modifier = null;\n        if (event.ctrlKey || event.metaKey) {\n          modifier = \"CTRL\";\n        } else if (event.shiftKey) {\n          modifier = \"SHIFT\";\n        }\n        _this._mouseOp = _this.getOpFromAction(event.button, modifier);\n        if (_this._mouseOp) {\n          window.addEventListener(\"pointermove\", _this.onPointerMove);\n          window.addEventListener(\"pointerup\", _this.onPointerUp);\n          _this._input = INPUT.CURSOR;\n          _this._button = event.button;\n          _this.onSinglePanStart(event, _this._mouseOp);\n        }\n      }\n    });\n    __publicField(_assertThisInitialized(_this), \"onPointerMove\", function (event) {\n      if (event.pointerType == \"touch\" && _this._input != INPUT.CURSOR) {\n        switch (_this._input) {\n          case INPUT.ONE_FINGER:\n            _this.updateTouchEvent(event);\n            _this.onSinglePanMove(event, STATE.ROTATE);\n            break;\n          case INPUT.ONE_FINGER_SWITCHED:\n            var movement = _this.calculatePointersDistance(_this._touchCurrent[0], event) * _this._devPxRatio;\n            if (movement >= _this._switchSensibility) {\n              _this._input = INPUT.ONE_FINGER;\n              _this.updateTouchEvent(event);\n              _this.onSinglePanStart(event, \"ROTATE\");\n              break;\n            }\n            break;\n          case INPUT.TWO_FINGER:\n            _this.updateTouchEvent(event);\n            _this.onRotateMove();\n            _this.onPinchMove();\n            _this.onDoublePanMove();\n            break;\n          case INPUT.MULT_FINGER:\n            _this.updateTouchEvent(event);\n            _this.onTriplePanMove();\n            break;\n        }\n      } else if (event.pointerType != \"touch\" && _this._input == INPUT.CURSOR) {\n        var modifier = null;\n        if (event.ctrlKey || event.metaKey) {\n          modifier = \"CTRL\";\n        } else if (event.shiftKey) {\n          modifier = \"SHIFT\";\n        }\n        var mouseOpState = _this.getOpStateFromAction(_this._button, modifier);\n        if (mouseOpState) {\n          _this.onSinglePanMove(event, mouseOpState);\n        }\n      }\n      if (_this._downValid) {\n        var _movement = _this.calculatePointersDistance(_this._downEvents[_this._downEvents.length - 1], event) * _this._devPxRatio;\n        if (_movement > _this._movementThreshold) {\n          _this._downValid = false;\n        }\n      }\n    });\n    __publicField(_assertThisInitialized(_this), \"onPointerUp\", function (event) {\n      if (event.pointerType == \"touch\" && _this._input != INPUT.CURSOR) {\n        var nTouch = _this._touchCurrent.length;\n        for (var i = 0; i < nTouch; i++) {\n          if (_this._touchCurrent[i].pointerId == event.pointerId) {\n            _this._touchCurrent.splice(i, 1);\n            _this._touchStart.splice(i, 1);\n            break;\n          }\n        }\n        switch (_this._input) {\n          case INPUT.ONE_FINGER:\n          case INPUT.ONE_FINGER_SWITCHED:\n            window.removeEventListener(\"pointermove\", _this.onPointerMove);\n            window.removeEventListener(\"pointerup\", _this.onPointerUp);\n            _this._input = INPUT.NONE;\n            _this.onSinglePanEnd();\n            break;\n          case INPUT.TWO_FINGER:\n            _this.onDoublePanEnd();\n            _this.onPinchEnd();\n            _this.onRotateEnd();\n            _this._input = INPUT.ONE_FINGER_SWITCHED;\n            break;\n          case INPUT.MULT_FINGER:\n            if (_this._touchCurrent.length == 0) {\n              window.removeEventListener(\"pointermove\", _this.onPointerMove);\n              window.removeEventListener(\"pointerup\", _this.onPointerUp);\n              _this._input = INPUT.NONE;\n              _this.onTriplePanEnd();\n            }\n            break;\n        }\n      } else if (event.pointerType != \"touch\" && _this._input == INPUT.CURSOR) {\n        window.removeEventListener(\"pointermove\", _this.onPointerMove);\n        window.removeEventListener(\"pointerup\", _this.onPointerUp);\n        _this._input = INPUT.NONE;\n        _this.onSinglePanEnd();\n        _this._button = -1;\n      }\n      if (event.isPrimary) {\n        if (_this._downValid) {\n          var downTime = event.timeStamp - _this._downEvents[_this._downEvents.length - 1].timeStamp;\n          if (downTime <= _this._maxDownTime) {\n            if (_this._nclicks == 0) {\n              _this._nclicks = 1;\n              _this._clickStart = performance.now();\n            } else {\n              var clickInterval = event.timeStamp - _this._clickStart;\n              var movement = _this.calculatePointersDistance(_this._downEvents[1], _this._downEvents[0]) * _this._devPxRatio;\n              if (clickInterval <= _this._maxInterval && movement <= _this._posThreshold) {\n                _this._nclicks = 0;\n                _this._downEvents.splice(0, _this._downEvents.length);\n                _this.onDoubleTap(event);\n              } else {\n                _this._nclicks = 1;\n                _this._downEvents.shift();\n                _this._clickStart = performance.now();\n              }\n            }\n          } else {\n            _this._downValid = false;\n            _this._nclicks = 0;\n            _this._downEvents.splice(0, _this._downEvents.length);\n          }\n        } else {\n          _this._nclicks = 0;\n          _this._downEvents.splice(0, _this._downEvents.length);\n        }\n      }\n    });\n    __publicField(_assertThisInitialized(_this), \"onWheel\", function (event) {\n      var _a, _b;\n      if (_this.enabled && _this.enableZoom && _this.domElement) {\n        var modifier = null;\n        if (event.ctrlKey || event.metaKey) {\n          modifier = \"CTRL\";\n        } else if (event.shiftKey) {\n          modifier = \"SHIFT\";\n        }\n        var mouseOp = _this.getOpFromAction(\"WHEEL\", modifier);\n        if (mouseOp) {\n          event.preventDefault();\n          _this.dispatchEvent(_startEvent);\n          var notchDeltaY = 125;\n          var sgn = event.deltaY / notchDeltaY;\n          var size = 1;\n          if (sgn > 0) {\n            size = 1 / _this.scaleFactor;\n          } else if (sgn < 0) {\n            size = _this.scaleFactor;\n          }\n          switch (mouseOp) {\n            case \"ZOOM\":\n              _this.updateTbState(STATE.SCALE, true);\n              if (sgn > 0) {\n                size = 1 / Math.pow(_this.scaleFactor, sgn);\n              } else if (sgn < 0) {\n                size = Math.pow(_this.scaleFactor, -sgn);\n              }\n              if (_this.cursorZoom && _this.enablePan) {\n                var scalePoint;\n                if (_this.camera instanceof OrthographicCamera) {\n                  scalePoint = (_a = _this.unprojectOnTbPlane(_this.camera, event.clientX, event.clientY, _this.domElement)) == null ? void 0 : _a.applyQuaternion(_this.camera.quaternion).multiplyScalar(1 / _this.camera.zoom).add(_this._gizmos.position);\n                }\n                if (_this.camera instanceof PerspectiveCamera) {\n                  scalePoint = (_b = _this.unprojectOnTbPlane(_this.camera, event.clientX, event.clientY, _this.domElement)) == null ? void 0 : _b.applyQuaternion(_this.camera.quaternion).add(_this._gizmos.position);\n                }\n                if (scalePoint !== void 0) _this.applyTransformMatrix(_this.applyScale(size, scalePoint));\n              } else {\n                _this.applyTransformMatrix(_this.applyScale(size, _this._gizmos.position));\n              }\n              if (_this._grid) {\n                _this.disposeGrid();\n                _this.drawGrid();\n              }\n              _this.updateTbState(STATE.IDLE, false);\n              _this.dispatchEvent(_changeEvent);\n              _this.dispatchEvent(_endEvent);\n              break;\n            case \"FOV\":\n              if (_this.camera instanceof PerspectiveCamera) {\n                _this.updateTbState(STATE.FOV, true);\n                if (event.deltaX != 0) {\n                  sgn = event.deltaX / notchDeltaY;\n                  size = 1;\n                  if (sgn > 0) {\n                    size = 1 / Math.pow(_this.scaleFactor, sgn);\n                  } else if (sgn < 0) {\n                    size = Math.pow(_this.scaleFactor, -sgn);\n                  }\n                }\n                _this._v3_1.setFromMatrixPosition(_this._cameraMatrixState);\n                var x = _this._v3_1.distanceTo(_this._gizmos.position);\n                var xNew = x / size;\n                xNew = MathUtils.clamp(xNew, _this.minDistance, _this.maxDistance);\n                var y = x * Math.tan(MathUtils.DEG2RAD * _this.camera.fov * 0.5);\n                var newFov = MathUtils.RAD2DEG * (Math.atan(y / xNew) * 2);\n                if (newFov > _this.maxFov) {\n                  newFov = _this.maxFov;\n                } else if (newFov < _this.minFov) {\n                  newFov = _this.minFov;\n                }\n                var newDistance = y / Math.tan(MathUtils.DEG2RAD * (newFov / 2));\n                size = x / newDistance;\n                _this.setFov(newFov);\n                _this.applyTransformMatrix(_this.applyScale(size, _this._gizmos.position, false));\n              }\n              if (_this._grid) {\n                _this.disposeGrid();\n                _this.drawGrid();\n              }\n              _this.updateTbState(STATE.IDLE, false);\n              _this.dispatchEvent(_changeEvent);\n              _this.dispatchEvent(_endEvent);\n              break;\n          }\n        }\n      }\n    });\n    __publicField(_assertThisInitialized(_this), \"onSinglePanStart\", function (event, operation) {\n      if (_this.enabled && _this.domElement) {\n        _this.dispatchEvent(_startEvent);\n        _this.setCenter(event.clientX, event.clientY);\n        switch (operation) {\n          case \"PAN\":\n            if (!_this.enablePan) return;\n            if (_this._animationId != -1) {\n              cancelAnimationFrame(_this._animationId);\n              _this._animationId = -1;\n              _this._timeStart = -1;\n              _this.activateGizmos(false);\n              _this.dispatchEvent(_changeEvent);\n            }\n            if (_this.camera) {\n              _this.updateTbState(STATE.PAN, true);\n              var rayDir = _this.unprojectOnTbPlane(_this.camera, _center.x, _center.y, _this.domElement);\n              if (rayDir !== void 0) {\n                _this._startCursorPosition.copy(rayDir);\n              }\n              if (_this.enableGrid) {\n                _this.drawGrid();\n                _this.dispatchEvent(_changeEvent);\n              }\n            }\n            break;\n          case \"ROTATE\":\n            if (!_this.enableRotate) return;\n            if (_this._animationId != -1) {\n              cancelAnimationFrame(_this._animationId);\n              _this._animationId = -1;\n              _this._timeStart = -1;\n            }\n            if (_this.camera) {\n              _this.updateTbState(STATE.ROTATE, true);\n              var _rayDir = _this.unprojectOnTbSurface(_this.camera, _center.x, _center.y, _this.domElement, _this._tbRadius);\n              if (_rayDir !== void 0) {\n                _this._startCursorPosition.copy(_rayDir);\n              }\n              _this.activateGizmos(true);\n              if (_this.enableAnimations) {\n                _this._timePrev = _this._timeCurrent = performance.now();\n                _this._angleCurrent = _this._anglePrev = 0;\n                _this._cursorPosPrev.copy(_this._startCursorPosition);\n                _this._cursorPosCurr.copy(_this._cursorPosPrev);\n                _this._wCurr = 0;\n                _this._wPrev = _this._wCurr;\n              }\n            }\n            _this.dispatchEvent(_changeEvent);\n            break;\n          case \"FOV\":\n            if (!_this.enableZoom) return;\n            if (_this.camera instanceof PerspectiveCamera) {\n              if (_this._animationId != -1) {\n                cancelAnimationFrame(_this._animationId);\n                _this._animationId = -1;\n                _this._timeStart = -1;\n                _this.activateGizmos(false);\n                _this.dispatchEvent(_changeEvent);\n              }\n              _this.updateTbState(STATE.FOV, true);\n              _this._startCursorPosition.setY(_this.getCursorNDC(_center.x, _center.y, _this.domElement).y * 0.5);\n              _this._currentCursorPosition.copy(_this._startCursorPosition);\n            }\n            break;\n          case \"ZOOM\":\n            if (!_this.enableZoom) return;\n            if (_this._animationId != -1) {\n              cancelAnimationFrame(_this._animationId);\n              _this._animationId = -1;\n              _this._timeStart = -1;\n              _this.activateGizmos(false);\n              _this.dispatchEvent(_changeEvent);\n            }\n            _this.updateTbState(STATE.SCALE, true);\n            _this._startCursorPosition.setY(_this.getCursorNDC(_center.x, _center.y, _this.domElement).y * 0.5);\n            _this._currentCursorPosition.copy(_this._startCursorPosition);\n            break;\n        }\n      }\n    });\n    __publicField(_assertThisInitialized(_this), \"onSinglePanMove\", function (event, opState) {\n      if (_this.enabled && _this.domElement) {\n        var restart = opState != _this._state;\n        _this.setCenter(event.clientX, event.clientY);\n        switch (opState) {\n          case STATE.PAN:\n            if (_this.enablePan && _this.camera) {\n              if (restart) {\n                _this.dispatchEvent(_endEvent);\n                _this.dispatchEvent(_startEvent);\n                _this.updateTbState(opState, true);\n                var rayDir = _this.unprojectOnTbPlane(_this.camera, _center.x, _center.y, _this.domElement);\n                if (rayDir !== void 0) {\n                  _this._startCursorPosition.copy(rayDir);\n                }\n                if (_this.enableGrid) {\n                  _this.drawGrid();\n                }\n                _this.activateGizmos(false);\n              } else {\n                var _rayDir2 = _this.unprojectOnTbPlane(_this.camera, _center.x, _center.y, _this.domElement);\n                if (_rayDir2 !== void 0) {\n                  _this._currentCursorPosition.copy(_rayDir2);\n                }\n                _this.applyTransformMatrix(_this.pan(_this._startCursorPosition, _this._currentCursorPosition));\n              }\n            }\n            break;\n          case STATE.ROTATE:\n            if (_this.enableRotate && _this.camera) {\n              if (restart) {\n                _this.dispatchEvent(_endEvent);\n                _this.dispatchEvent(_startEvent);\n                _this.updateTbState(opState, true);\n                var _rayDir3 = _this.unprojectOnTbSurface(_this.camera, _center.x, _center.y, _this.domElement, _this._tbRadius);\n                if (_rayDir3 !== void 0) {\n                  _this._startCursorPosition.copy(_rayDir3);\n                }\n                if (_this.enableGrid) {\n                  _this.disposeGrid();\n                }\n                _this.activateGizmos(true);\n              } else {\n                var _rayDir4 = _this.unprojectOnTbSurface(_this.camera, _center.x, _center.y, _this.domElement, _this._tbRadius);\n                if (_rayDir4 !== void 0) {\n                  _this._currentCursorPosition.copy(_rayDir4);\n                }\n                var distance = _this._startCursorPosition.distanceTo(_this._currentCursorPosition);\n                var angle = _this._startCursorPosition.angleTo(_this._currentCursorPosition);\n                var amount = Math.max(distance / _this._tbRadius, angle);\n                _this.applyTransformMatrix(_this.rotate(_this.calculateRotationAxis(_this._startCursorPosition, _this._currentCursorPosition), amount));\n                if (_this.enableAnimations) {\n                  _this._timePrev = _this._timeCurrent;\n                  _this._timeCurrent = performance.now();\n                  _this._anglePrev = _this._angleCurrent;\n                  _this._angleCurrent = amount;\n                  _this._cursorPosPrev.copy(_this._cursorPosCurr);\n                  _this._cursorPosCurr.copy(_this._currentCursorPosition);\n                  _this._wPrev = _this._wCurr;\n                  _this._wCurr = _this.calculateAngularSpeed(_this._anglePrev, _this._angleCurrent, _this._timePrev, _this._timeCurrent);\n                }\n              }\n            }\n            break;\n          case STATE.SCALE:\n            if (_this.enableZoom) {\n              if (restart) {\n                _this.dispatchEvent(_endEvent);\n                _this.dispatchEvent(_startEvent);\n                _this.updateTbState(opState, true);\n                _this._startCursorPosition.setY(_this.getCursorNDC(_center.x, _center.y, _this.domElement).y * 0.5);\n                _this._currentCursorPosition.copy(_this._startCursorPosition);\n                if (_this.enableGrid) {\n                  _this.disposeGrid();\n                }\n                _this.activateGizmos(false);\n              } else {\n                var screenNotches = 8;\n                _this._currentCursorPosition.setY(_this.getCursorNDC(_center.x, _center.y, _this.domElement).y * 0.5);\n                var movement = _this._currentCursorPosition.y - _this._startCursorPosition.y;\n                var size = 1;\n                if (movement < 0) {\n                  size = 1 / Math.pow(_this.scaleFactor, -movement * screenNotches);\n                } else if (movement > 0) {\n                  size = Math.pow(_this.scaleFactor, movement * screenNotches);\n                }\n                _this.applyTransformMatrix(_this.applyScale(size, _this._gizmos.position));\n              }\n            }\n            break;\n          case STATE.FOV:\n            if (_this.enableZoom && _this.camera instanceof PerspectiveCamera) {\n              if (restart) {\n                _this.dispatchEvent(_endEvent);\n                _this.dispatchEvent(_startEvent);\n                _this.updateTbState(opState, true);\n                _this._startCursorPosition.setY(_this.getCursorNDC(_center.x, _center.y, _this.domElement).y * 0.5);\n                _this._currentCursorPosition.copy(_this._startCursorPosition);\n                if (_this.enableGrid) {\n                  _this.disposeGrid();\n                }\n                _this.activateGizmos(false);\n              } else {\n                var _screenNotches = 8;\n                _this._currentCursorPosition.setY(_this.getCursorNDC(_center.x, _center.y, _this.domElement).y * 0.5);\n                var _movement2 = _this._currentCursorPosition.y - _this._startCursorPosition.y;\n                var _size = 1;\n                if (_movement2 < 0) {\n                  _size = 1 / Math.pow(_this.scaleFactor, -_movement2 * _screenNotches);\n                } else if (_movement2 > 0) {\n                  _size = Math.pow(_this.scaleFactor, _movement2 * _screenNotches);\n                }\n                _this._v3_1.setFromMatrixPosition(_this._cameraMatrixState);\n                var x = _this._v3_1.distanceTo(_this._gizmos.position);\n                var xNew = x / _size;\n                xNew = MathUtils.clamp(xNew, _this.minDistance, _this.maxDistance);\n                var y = x * Math.tan(MathUtils.DEG2RAD * _this._fovState * 0.5);\n                var newFov = MathUtils.RAD2DEG * (Math.atan(y / xNew) * 2);\n                newFov = MathUtils.clamp(newFov, _this.minFov, _this.maxFov);\n                var newDistance = y / Math.tan(MathUtils.DEG2RAD * (newFov / 2));\n                _size = x / newDistance;\n                _this._v3_2.setFromMatrixPosition(_this._gizmoMatrixState);\n                _this.setFov(newFov);\n                _this.applyTransformMatrix(_this.applyScale(_size, _this._v3_2, false));\n                var direction = _this._gizmos.position.clone().sub(_this.camera.position).normalize().multiplyScalar(newDistance / x);\n                _this._m4_1.makeTranslation(direction.x, direction.y, direction.z);\n              }\n            }\n            break;\n        }\n        _this.dispatchEvent(_changeEvent);\n      }\n    });\n    __publicField(_assertThisInitialized(_this), \"onSinglePanEnd\", function () {\n      if (_this._state == STATE.ROTATE) {\n        if (!_this.enableRotate) {\n          return;\n        }\n        if (_this.enableAnimations) {\n          var deltaTime = performance.now() - _this._timeCurrent;\n          if (deltaTime < 120) {\n            var w = Math.abs((_this._wPrev + _this._wCurr) / 2);\n            var self = _assertThisInitialized(_this);\n            _this._animationId = window.requestAnimationFrame(function (t) {\n              self.updateTbState(STATE.ANIMATION_ROTATE, true);\n              var rotationAxis = self.calculateRotationAxis(self._cursorPosPrev, self._cursorPosCurr);\n              self.onRotationAnim(t, rotationAxis, Math.min(w, self.wMax));\n            });\n          } else {\n            _this.updateTbState(STATE.IDLE, false);\n            _this.activateGizmos(false);\n            _this.dispatchEvent(_changeEvent);\n          }\n        } else {\n          _this.updateTbState(STATE.IDLE, false);\n          _this.activateGizmos(false);\n          _this.dispatchEvent(_changeEvent);\n        }\n      } else if (_this._state == STATE.PAN || _this._state == STATE.IDLE) {\n        _this.updateTbState(STATE.IDLE, false);\n        if (_this.enableGrid) {\n          _this.disposeGrid();\n        }\n        _this.activateGizmos(false);\n        _this.dispatchEvent(_changeEvent);\n      }\n      _this.dispatchEvent(_endEvent);\n    });\n    __publicField(_assertThisInitialized(_this), \"onDoubleTap\", function (event) {\n      if (_this.enabled && _this.enablePan && _this.scene && _this.camera && _this.domElement) {\n        _this.dispatchEvent(_startEvent);\n        _this.setCenter(event.clientX, event.clientY);\n        var hitP = _this.unprojectOnObj(_this.getCursorNDC(_center.x, _center.y, _this.domElement), _this.camera);\n        if (hitP && _this.enableAnimations) {\n          var self = _assertThisInitialized(_this);\n          if (_this._animationId != -1) {\n            window.cancelAnimationFrame(_this._animationId);\n          }\n          _this._timeStart = -1;\n          _this._animationId = window.requestAnimationFrame(function (t) {\n            self.updateTbState(STATE.ANIMATION_FOCUS, true);\n            self.onFocusAnim(t, hitP, self._cameraMatrixState, self._gizmoMatrixState);\n          });\n        } else if (hitP && !_this.enableAnimations) {\n          _this.updateTbState(STATE.FOCUS, true);\n          _this.focus(hitP, _this.scaleFactor);\n          _this.updateTbState(STATE.IDLE, false);\n          _this.dispatchEvent(_changeEvent);\n        }\n      }\n      _this.dispatchEvent(_endEvent);\n    });\n    __publicField(_assertThisInitialized(_this), \"onDoublePanStart\", function () {\n      if (_this.enabled && _this.enablePan && _this.camera && _this.domElement) {\n        _this.dispatchEvent(_startEvent);\n        _this.updateTbState(STATE.PAN, true);\n        _this.setCenter((_this._touchCurrent[0].clientX + _this._touchCurrent[1].clientX) / 2, (_this._touchCurrent[0].clientY + _this._touchCurrent[1].clientY) / 2);\n        var rayDir = _this.unprojectOnTbPlane(_this.camera, _center.x, _center.y, _this.domElement, true);\n        if (rayDir !== void 0) {\n          _this._startCursorPosition.copy(rayDir);\n        }\n        _this._currentCursorPosition.copy(_this._startCursorPosition);\n        _this.activateGizmos(false);\n      }\n    });\n    __publicField(_assertThisInitialized(_this), \"onDoublePanMove\", function () {\n      if (_this.enabled && _this.enablePan && _this.camera && _this.domElement) {\n        _this.setCenter((_this._touchCurrent[0].clientX + _this._touchCurrent[1].clientX) / 2, (_this._touchCurrent[0].clientY + _this._touchCurrent[1].clientY) / 2);\n        if (_this._state != STATE.PAN) {\n          _this.updateTbState(STATE.PAN, true);\n          _this._startCursorPosition.copy(_this._currentCursorPosition);\n        }\n        var rayDir = _this.unprojectOnTbPlane(_this.camera, _center.x, _center.y, _this.domElement, true);\n        if (rayDir !== void 0) _this._currentCursorPosition.copy(rayDir);\n        _this.applyTransformMatrix(_this.pan(_this._startCursorPosition, _this._currentCursorPosition, true));\n        _this.dispatchEvent(_changeEvent);\n      }\n    });\n    __publicField(_assertThisInitialized(_this), \"onDoublePanEnd\", function () {\n      _this.updateTbState(STATE.IDLE, false);\n      _this.dispatchEvent(_endEvent);\n    });\n    __publicField(_assertThisInitialized(_this), \"onRotateStart\", function () {\n      var _a;\n      if (_this.enabled && _this.enableRotate) {\n        _this.dispatchEvent(_startEvent);\n        _this.updateTbState(STATE.ZROTATE, true);\n        _this._startFingerRotation = _this.getAngle(_this._touchCurrent[1], _this._touchCurrent[0]) + _this.getAngle(_this._touchStart[1], _this._touchStart[0]);\n        _this._currentFingerRotation = _this._startFingerRotation;\n        (_a = _this.camera) == null ? void 0 : _a.getWorldDirection(_this._rotationAxis);\n        if (!_this.enablePan && !_this.enableZoom) {\n          _this.activateGizmos(true);\n        }\n      }\n    });\n    __publicField(_assertThisInitialized(_this), \"onRotateMove\", function () {\n      var _a;\n      if (_this.enabled && _this.enableRotate && _this.camera && _this.domElement) {\n        _this.setCenter((_this._touchCurrent[0].clientX + _this._touchCurrent[1].clientX) / 2, (_this._touchCurrent[0].clientY + _this._touchCurrent[1].clientY) / 2);\n        var rotationPoint;\n        if (_this._state != STATE.ZROTATE) {\n          _this.updateTbState(STATE.ZROTATE, true);\n          _this._startFingerRotation = _this._currentFingerRotation;\n        }\n        _this._currentFingerRotation = _this.getAngle(_this._touchCurrent[1], _this._touchCurrent[0]) + _this.getAngle(_this._touchStart[1], _this._touchStart[0]);\n        if (!_this.enablePan) {\n          rotationPoint = new Vector3().setFromMatrixPosition(_this._gizmoMatrixState);\n        } else if (_this.camera) {\n          _this._v3_2.setFromMatrixPosition(_this._gizmoMatrixState);\n          rotationPoint = (_a = _this.unprojectOnTbPlane(_this.camera, _center.x, _center.y, _this.domElement)) == null ? void 0 : _a.applyQuaternion(_this.camera.quaternion).multiplyScalar(1 / _this.camera.zoom).add(_this._v3_2);\n        }\n        var amount = MathUtils.DEG2RAD * (_this._startFingerRotation - _this._currentFingerRotation);\n        if (rotationPoint !== void 0) {\n          _this.applyTransformMatrix(_this.zRotate(rotationPoint, amount));\n        }\n        _this.dispatchEvent(_changeEvent);\n      }\n    });\n    __publicField(_assertThisInitialized(_this), \"onRotateEnd\", function () {\n      _this.updateTbState(STATE.IDLE, false);\n      _this.activateGizmos(false);\n      _this.dispatchEvent(_endEvent);\n    });\n    __publicField(_assertThisInitialized(_this), \"onPinchStart\", function () {\n      if (_this.enabled && _this.enableZoom) {\n        _this.dispatchEvent(_startEvent);\n        _this.updateTbState(STATE.SCALE, true);\n        _this._startFingerDistance = _this.calculatePointersDistance(_this._touchCurrent[0], _this._touchCurrent[1]);\n        _this._currentFingerDistance = _this._startFingerDistance;\n        _this.activateGizmos(false);\n      }\n    });\n    __publicField(_assertThisInitialized(_this), \"onPinchMove\", function () {\n      var _a, _b;\n      if (_this.enabled && _this.enableZoom && _this.domElement) {\n        _this.setCenter((_this._touchCurrent[0].clientX + _this._touchCurrent[1].clientX) / 2, (_this._touchCurrent[0].clientY + _this._touchCurrent[1].clientY) / 2);\n        var minDistance = 12;\n        if (_this._state != STATE.SCALE) {\n          _this._startFingerDistance = _this._currentFingerDistance;\n          _this.updateTbState(STATE.SCALE, true);\n        }\n        _this._currentFingerDistance = Math.max(_this.calculatePointersDistance(_this._touchCurrent[0], _this._touchCurrent[1]), minDistance * _this._devPxRatio);\n        var amount = _this._currentFingerDistance / _this._startFingerDistance;\n        var scalePoint;\n        if (!_this.enablePan) {\n          scalePoint = _this._gizmos.position;\n        } else {\n          if (_this.camera instanceof OrthographicCamera) {\n            scalePoint = (_a = _this.unprojectOnTbPlane(_this.camera, _center.x, _center.y, _this.domElement)) == null ? void 0 : _a.applyQuaternion(_this.camera.quaternion).multiplyScalar(1 / _this.camera.zoom).add(_this._gizmos.position);\n          } else if (_this.camera instanceof PerspectiveCamera) {\n            scalePoint = (_b = _this.unprojectOnTbPlane(_this.camera, _center.x, _center.y, _this.domElement)) == null ? void 0 : _b.applyQuaternion(_this.camera.quaternion).add(_this._gizmos.position);\n          }\n        }\n        if (scalePoint !== void 0) {\n          _this.applyTransformMatrix(_this.applyScale(amount, scalePoint));\n        }\n        _this.dispatchEvent(_changeEvent);\n      }\n    });\n    __publicField(_assertThisInitialized(_this), \"onPinchEnd\", function () {\n      _this.updateTbState(STATE.IDLE, false);\n      _this.dispatchEvent(_endEvent);\n    });\n    __publicField(_assertThisInitialized(_this), \"onTriplePanStart\", function () {\n      if (_this.enabled && _this.enableZoom && _this.domElement) {\n        _this.dispatchEvent(_startEvent);\n        _this.updateTbState(STATE.SCALE, true);\n        var clientX = 0;\n        var clientY = 0;\n        var nFingers = _this._touchCurrent.length;\n        for (var i = 0; i < nFingers; i++) {\n          clientX += _this._touchCurrent[i].clientX;\n          clientY += _this._touchCurrent[i].clientY;\n        }\n        _this.setCenter(clientX / nFingers, clientY / nFingers);\n        _this._startCursorPosition.setY(_this.getCursorNDC(_center.x, _center.y, _this.domElement).y * 0.5);\n        _this._currentCursorPosition.copy(_this._startCursorPosition);\n      }\n    });\n    __publicField(_assertThisInitialized(_this), \"onTriplePanMove\", function () {\n      if (_this.enabled && _this.enableZoom && _this.camera && _this.domElement) {\n        var clientX = 0;\n        var clientY = 0;\n        var nFingers = _this._touchCurrent.length;\n        for (var i = 0; i < nFingers; i++) {\n          clientX += _this._touchCurrent[i].clientX;\n          clientY += _this._touchCurrent[i].clientY;\n        }\n        _this.setCenter(clientX / nFingers, clientY / nFingers);\n        var screenNotches = 8;\n        _this._currentCursorPosition.setY(_this.getCursorNDC(_center.x, _center.y, _this.domElement).y * 0.5);\n        var movement = _this._currentCursorPosition.y - _this._startCursorPosition.y;\n        var size = 1;\n        if (movement < 0) {\n          size = 1 / Math.pow(_this.scaleFactor, -movement * screenNotches);\n        } else if (movement > 0) {\n          size = Math.pow(_this.scaleFactor, movement * screenNotches);\n        }\n        _this._v3_1.setFromMatrixPosition(_this._cameraMatrixState);\n        var x = _this._v3_1.distanceTo(_this._gizmos.position);\n        var xNew = x / size;\n        xNew = MathUtils.clamp(xNew, _this.minDistance, _this.maxDistance);\n        var y = x * Math.tan(MathUtils.DEG2RAD * _this._fovState * 0.5);\n        var newFov = MathUtils.RAD2DEG * (Math.atan(y / xNew) * 2);\n        newFov = MathUtils.clamp(newFov, _this.minFov, _this.maxFov);\n        var newDistance = y / Math.tan(MathUtils.DEG2RAD * (newFov / 2));\n        size = x / newDistance;\n        _this._v3_2.setFromMatrixPosition(_this._gizmoMatrixState);\n        _this.setFov(newFov);\n        _this.applyTransformMatrix(_this.applyScale(size, _this._v3_2, false));\n        var direction = _this._gizmos.position.clone().sub(_this.camera.position).normalize().multiplyScalar(newDistance / x);\n        _this._m4_1.makeTranslation(direction.x, direction.y, direction.z);\n        _this.dispatchEvent(_changeEvent);\n      }\n    });\n    __publicField(_assertThisInitialized(_this), \"onTriplePanEnd\", function () {\n      _this.updateTbState(STATE.IDLE, false);\n      _this.dispatchEvent(_endEvent);\n    });\n    /**\n     * Set _center's x/y coordinates\n     * @param {Number} clientX\n     * @param {Number} clientY\n     */\n    __publicField(_assertThisInitialized(_this), \"setCenter\", function (clientX, clientY) {\n      _center.x = clientX;\n      _center.y = clientY;\n    });\n    /**\n     * Set default mouse actions\n     */\n    __publicField(_assertThisInitialized(_this), \"initializeMouseActions\", function () {\n      _this.setMouseAction(\"PAN\", 0, \"CTRL\");\n      _this.setMouseAction(\"PAN\", 2);\n      _this.setMouseAction(\"ROTATE\", 0);\n      _this.setMouseAction(\"ZOOM\", \"WHEEL\");\n      _this.setMouseAction(\"ZOOM\", 1);\n      _this.setMouseAction(\"FOV\", \"WHEEL\", \"SHIFT\");\n      _this.setMouseAction(\"FOV\", 1, \"SHIFT\");\n    });\n    /**\n     * Set a new mouse action by specifying the operation to be performed and a mouse/key combination. In case of conflict, replaces the existing one\n     * @param {String} operation The operation to be performed ('PAN', 'ROTATE', 'ZOOM', 'FOV)\n     * @param {*} mouse A mouse button (0, 1, 2) or 'WHEEL' for wheel notches\n     * @param {*} key The keyboard modifier ('CTRL', 'SHIFT') or null if key is not needed\n     * @returns {Boolean} True if the mouse action has been successfully added, false otherwise\n     */\n    __publicField(_assertThisInitialized(_this), \"setMouseAction\", function (operation, mouse) {\n      var key = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n      var operationInput = [\"PAN\", \"ROTATE\", \"ZOOM\", \"FOV\"];\n      var mouseInput = [0, 1, 2, \"WHEEL\"];\n      var keyInput = [\"CTRL\", \"SHIFT\", null];\n      var state;\n      if (!operationInput.includes(operation) || !mouseInput.includes(mouse) || !keyInput.includes(key)) {\n        return false;\n      }\n      if (mouse == \"WHEEL\") {\n        if (operation != \"ZOOM\" && operation != \"FOV\") {\n          return false;\n        }\n      }\n      switch (operation) {\n        case \"PAN\":\n          state = STATE.PAN;\n          break;\n        case \"ROTATE\":\n          state = STATE.ROTATE;\n          break;\n        case \"ZOOM\":\n          state = STATE.SCALE;\n          break;\n        case \"FOV\":\n          state = STATE.FOV;\n          break;\n      }\n      var action = {\n        operation: operation,\n        mouse: mouse,\n        key: key,\n        state: state\n      };\n      for (var i = 0; i < _this.mouseActions.length; i++) {\n        if (_this.mouseActions[i].mouse == action.mouse && _this.mouseActions[i].key == action.key) {\n          _this.mouseActions.splice(i, 1, action);\n          return true;\n        }\n      }\n      _this.mouseActions.push(action);\n      return true;\n    });\n    /**\n     * Return the operation associated to a mouse/keyboard combination\n     * @param {*} mouse A mouse button (0, 1, 2) or 'WHEEL' for wheel notches\n     * @param {*} key The keyboard modifier ('CTRL', 'SHIFT') or null if key is not needed\n     * @returns The operation if it has been found, null otherwise\n     */\n    __publicField(_assertThisInitialized(_this), \"getOpFromAction\", function (mouse, key) {\n      var action;\n      for (var i = 0; i < _this.mouseActions.length; i++) {\n        action = _this.mouseActions[i];\n        if (action.mouse == mouse && action.key == key) {\n          return action.operation;\n        }\n      }\n      if (key) {\n        for (var _i = 0; _i < _this.mouseActions.length; _i++) {\n          action = _this.mouseActions[_i];\n          if (action.mouse == mouse && action.key == null) {\n            return action.operation;\n          }\n        }\n      }\n      return null;\n    });\n    /**\n     * Get the operation associated to mouse and key combination and returns the corresponding FSA state\n     * @param {Number} mouse Mouse button\n     * @param {String} key Keyboard modifier\n     * @returns The FSA state obtained from the operation associated to mouse/keyboard combination\n     */\n    __publicField(_assertThisInitialized(_this), \"getOpStateFromAction\", function (mouse, key) {\n      var action;\n      for (var i = 0; i < _this.mouseActions.length; i++) {\n        action = _this.mouseActions[i];\n        if (action.mouse == mouse && action.key == key) {\n          return action.state;\n        }\n      }\n      if (key) {\n        for (var _i2 = 0; _i2 < _this.mouseActions.length; _i2++) {\n          action = _this.mouseActions[_i2];\n          if (action.mouse == mouse && action.key == null) {\n            return action.state;\n          }\n        }\n      }\n      return null;\n    });\n    /**\n     * Calculate the angle between two pointers\n     * @param {PointerEvent} p1\n     * @param {PointerEvent} p2\n     * @returns {Number} The angle between two pointers in degrees\n     */\n    __publicField(_assertThisInitialized(_this), \"getAngle\", function (p1, p2) {\n      return Math.atan2(p2.clientY - p1.clientY, p2.clientX - p1.clientX) * 180 / Math.PI;\n    });\n    /**\n     * Update a PointerEvent inside current pointerevents array\n     * @param {PointerEvent} event\n     */\n    __publicField(_assertThisInitialized(_this), \"updateTouchEvent\", function (event) {\n      for (var i = 0; i < _this._touchCurrent.length; i++) {\n        if (_this._touchCurrent[i].pointerId == event.pointerId) {\n          _this._touchCurrent.splice(i, 1, event);\n          break;\n        }\n      }\n    });\n    /**\n     * Calculate the angular speed\n     * @param {Number} p0 Position at t0\n     * @param {Number} p1 Position at t1\n     * @param {Number} t0 Initial time in milliseconds\n     * @param {Number} t1 Ending time in milliseconds\n     */\n    __publicField(_assertThisInitialized(_this), \"calculateAngularSpeed\", function (p0, p1, t0, t1) {\n      var s = p1 - p0;\n      var t = (t1 - t0) / 1e3;\n      if (t == 0) {\n        return 0;\n      }\n      return s / t;\n    });\n    /**\n     * Calculate the distance between two pointers\n     * @param {PointerEvent} p0 The first pointer\n     * @param {PointerEvent} p1 The second pointer\n     * @returns {number} The distance between the two pointers\n     */\n    __publicField(_assertThisInitialized(_this), \"calculatePointersDistance\", function (p0, p1) {\n      return Math.sqrt(Math.pow(p1.clientX - p0.clientX, 2) + Math.pow(p1.clientY - p0.clientY, 2));\n    });\n    /**\n     * Calculate the rotation axis as the vector perpendicular between two vectors\n     * @param {Vector3} vec1 The first vector\n     * @param {Vector3} vec2 The second vector\n     * @returns {Vector3} The normalized rotation axis\n     */\n    __publicField(_assertThisInitialized(_this), \"calculateRotationAxis\", function (vec1, vec2) {\n      _this._rotationMatrix.extractRotation(_this._cameraMatrixState);\n      _this._quat.setFromRotationMatrix(_this._rotationMatrix);\n      _this._rotationAxis.crossVectors(vec1, vec2).applyQuaternion(_this._quat);\n      return _this._rotationAxis.normalize().clone();\n    });\n    /**\n     * Calculate the trackball radius so that gizmo's diamater will be 2/3 of the minimum side of the camera frustum\n     * @param {Camera} camera\n     * @returns {Number} The trackball radius\n     */\n    __publicField(_assertThisInitialized(_this), \"calculateTbRadius\", function (camera) {\n      var factor = 0.67;\n      var distance = camera.position.distanceTo(_this._gizmos.position);\n      if (camera instanceof PerspectiveCamera) {\n        var halfFovV = MathUtils.DEG2RAD * camera.fov * 0.5;\n        var halfFovH = Math.atan(camera.aspect * Math.tan(halfFovV));\n        return Math.tan(Math.min(halfFovV, halfFovH)) * distance * factor;\n      } else if (camera instanceof OrthographicCamera) {\n        return Math.min(camera.top, camera.right) * factor;\n      }\n    });\n    /**\n     * Focus operation consist of positioning the point of interest in front of the camera and a slightly zoom in\n     * @param {Vector3} point The point of interest\n     * @param {Number} size Scale factor\n     * @param {Number} amount Amount of operation to be completed (used for focus animations, default is complete full operation)\n     */\n    __publicField(_assertThisInitialized(_this), \"focus\", function (point, size) {\n      var amount = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;\n      if (_this.camera) {\n        var focusPoint = point.clone();\n        focusPoint.sub(_this._gizmos.position).multiplyScalar(amount);\n        _this._translationMatrix.makeTranslation(focusPoint.x, focusPoint.y, focusPoint.z);\n        var gizmoStateTemp = _this._gizmoMatrixState.clone();\n        _this._gizmoMatrixState.premultiply(_this._translationMatrix);\n        _this._gizmoMatrixState.decompose(_this._gizmos.position, _this._gizmos.quaternion, _this._gizmos.scale);\n        var cameraStateTemp = _this._cameraMatrixState.clone();\n        _this._cameraMatrixState.premultiply(_this._translationMatrix);\n        _this._cameraMatrixState.decompose(_this.camera.position, _this.camera.quaternion, _this.camera.scale);\n        if (_this.enableZoom) {\n          _this.applyTransformMatrix(_this.applyScale(size, _this._gizmos.position));\n        }\n        _this._gizmoMatrixState.copy(gizmoStateTemp);\n        _this._cameraMatrixState.copy(cameraStateTemp);\n      }\n    });\n    /**\n     * Draw a grid and add it to the scene\n     */\n    __publicField(_assertThisInitialized(_this), \"drawGrid\", function () {\n      if (_this.scene) {\n        var color = 8947848;\n        var multiplier = 3;\n        var size, divisions, maxLength, tick;\n        if (_this.camera instanceof OrthographicCamera) {\n          var width = _this.camera.right - _this.camera.left;\n          var height = _this.camera.bottom - _this.camera.top;\n          maxLength = Math.max(width, height);\n          tick = maxLength / 20;\n          size = maxLength / _this.camera.zoom * multiplier;\n          divisions = size / tick * _this.camera.zoom;\n        } else if (_this.camera instanceof PerspectiveCamera) {\n          var distance = _this.camera.position.distanceTo(_this._gizmos.position);\n          var halfFovV = MathUtils.DEG2RAD * _this.camera.fov * 0.5;\n          var halfFovH = Math.atan(_this.camera.aspect * Math.tan(halfFovV));\n          maxLength = Math.tan(Math.max(halfFovV, halfFovH)) * distance * 2;\n          tick = maxLength / 20;\n          size = maxLength * multiplier;\n          divisions = size / tick;\n        }\n        if (_this._grid == null && _this.camera) {\n          _this._grid = new GridHelper(size, divisions, color, color);\n          _this._grid.position.copy(_this._gizmos.position);\n          _this._gridPosition.copy(_this._grid.position);\n          _this._grid.quaternion.copy(_this.camera.quaternion);\n          _this._grid.rotateX(Math.PI * 0.5);\n          _this.scene.add(_this._grid);\n        }\n      }\n    });\n    __publicField(_assertThisInitialized(_this), \"connect\", function (domElement) {\n      if (domElement === document) {\n        console.error('THREE.ArcballControls: \"document\" should not be used as the target \"domElement\". Please use \"renderer.domElement\" instead.');\n      }\n      _this.domElement = domElement;\n      _this.domElement.style.touchAction = \"none\";\n      _this.domElement.addEventListener(\"contextmenu\", _this.onContextMenu);\n      _this.domElement.addEventListener(\"pointerdown\", _this.onPointerDown);\n      _this.domElement.addEventListener(\"pointercancel\", _this.onPointerCancel);\n      _this.domElement.addEventListener(\"wheel\", _this.onWheel);\n    });\n    /**\n     * Remove all listeners, stop animations and clean scene\n     */\n    __publicField(_assertThisInitialized(_this), \"dispose\", function () {\n      var _a, _b, _c, _d, _e;\n      if (_this._animationId != -1) {\n        window.cancelAnimationFrame(_this._animationId);\n      }\n      (_a = _this.domElement) == null ? void 0 : _a.removeEventListener(\"pointerdown\", _this.onPointerDown);\n      (_b = _this.domElement) == null ? void 0 : _b.removeEventListener(\"pointercancel\", _this.onPointerCancel);\n      (_c = _this.domElement) == null ? void 0 : _c.removeEventListener(\"wheel\", _this.onWheel);\n      (_d = _this.domElement) == null ? void 0 : _d.removeEventListener(\"contextmenu\", _this.onContextMenu);\n      window.removeEventListener(\"pointermove\", _this.onPointerMove);\n      window.removeEventListener(\"pointerup\", _this.onPointerUp);\n      window.removeEventListener(\"resize\", _this.onWindowResize);\n      (_e = _this.scene) == null ? void 0 : _e.remove(_this._gizmos);\n      _this.disposeGrid();\n    });\n    /**\n     * remove the grid from the scene\n     */\n    __publicField(_assertThisInitialized(_this), \"disposeGrid\", function () {\n      if (_this._grid && _this.scene) {\n        _this.scene.remove(_this._grid);\n        _this._grid = null;\n      }\n    });\n    /**\n     * Compute the easing out cubic function for ease out effect in animation\n     * @param {Number} t The absolute progress of the animation in the bound of 0 (beginning of the) and 1 (ending of animation)\n     * @returns {Number} Result of easing out cubic at time t\n     */\n    __publicField(_assertThisInitialized(_this), \"easeOutCubic\", function (t) {\n      return 1 - Math.pow(1 - t, 3);\n    });\n    /**\n     * Make rotation gizmos more or less visible\n     * @param {Boolean} isActive If true, make gizmos more visible\n     */\n    __publicField(_assertThisInitialized(_this), \"activateGizmos\", function (isActive) {\n      var _iterator = _createForOfIteratorHelper(_this._gizmos.children),\n        _step;\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var gizmo = _step.value;\n          ;\n          gizmo.material.setValues({\n            opacity: isActive ? 1 : 0.6\n          });\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n    });\n    /**\n     * Calculate the cursor position in NDC\n     * @param {number} x Cursor horizontal coordinate within the canvas\n     * @param {number} y Cursor vertical coordinate within the canvas\n     * @param {HTMLElement} canvas The canvas where the renderer draws its output\n     * @returns {Vector2} Cursor normalized position inside the canvas\n     */\n    __publicField(_assertThisInitialized(_this), \"getCursorNDC\", function (cursorX, cursorY, canvas) {\n      var canvasRect = canvas.getBoundingClientRect();\n      _this._v2_1.setX((cursorX - canvasRect.left) / canvasRect.width * 2 - 1);\n      _this._v2_1.setY((canvasRect.bottom - cursorY) / canvasRect.height * 2 - 1);\n      return _this._v2_1.clone();\n    });\n    /**\n     * Calculate the cursor position inside the canvas x/y coordinates with the origin being in the center of the canvas\n     * @param {Number} x Cursor horizontal coordinate within the canvas\n     * @param {Number} y Cursor vertical coordinate within the canvas\n     * @param {HTMLElement} canvas The canvas where the renderer draws its output\n     * @returns {Vector2} Cursor position inside the canvas\n     */\n    __publicField(_assertThisInitialized(_this), \"getCursorPosition\", function (cursorX, cursorY, canvas) {\n      _this._v2_1.copy(_this.getCursorNDC(cursorX, cursorY, canvas));\n      if (_this.camera instanceof OrthographicCamera) {\n        _this._v2_1.x *= (_this.camera.right - _this.camera.left) * 0.5;\n        _this._v2_1.y *= (_this.camera.top - _this.camera.bottom) * 0.5;\n      }\n      return _this._v2_1.clone();\n    });\n    /**\n     * Set the camera to be controlled\n     * @param {Camera} camera The virtual camera to be controlled\n     */\n    __publicField(_assertThisInitialized(_this), \"setCamera\", function (camera) {\n      if (camera) {\n        camera.lookAt(_this.target);\n        camera.updateMatrix();\n        if (camera instanceof PerspectiveCamera) {\n          _this._fov0 = camera.fov;\n          _this._fovState = camera.fov;\n        }\n        _this._cameraMatrixState0.copy(camera.matrix);\n        _this._cameraMatrixState.copy(_this._cameraMatrixState0);\n        _this._cameraProjectionState.copy(camera.projectionMatrix);\n        _this._zoom0 = camera.zoom;\n        _this._zoomState = _this._zoom0;\n        _this._initialNear = camera.near;\n        _this._nearPos0 = camera.position.distanceTo(_this.target) - camera.near;\n        _this._nearPos = _this._initialNear;\n        _this._initialFar = camera.far;\n        _this._farPos0 = camera.position.distanceTo(_this.target) - camera.far;\n        _this._farPos = _this._initialFar;\n        _this._up0.copy(camera.up);\n        _this._upState.copy(camera.up);\n        _this.camera = camera;\n        _this.camera.updateProjectionMatrix();\n        var tbRadius = _this.calculateTbRadius(camera);\n        if (tbRadius !== void 0) {\n          _this._tbRadius = tbRadius;\n        }\n        _this.makeGizmos(_this.target, _this._tbRadius);\n      }\n    });\n    /**\n     * Creates the rotation gizmos matching trackball center and radius\n     * @param {Vector3} tbCenter The trackball center\n     * @param {number} tbRadius The trackball radius\n     */\n    __publicField(_assertThisInitialized(_this), \"makeGizmos\", function (tbCenter, tbRadius) {\n      var curve = new EllipseCurve(0, 0, tbRadius, tbRadius);\n      var points = curve.getPoints(_this._curvePts);\n      var curveGeometry = new BufferGeometry().setFromPoints(points);\n      var curveMaterialX = new LineBasicMaterial({\n        color: 16744576,\n        fog: false,\n        transparent: true,\n        opacity: 0.6\n      });\n      var curveMaterialY = new LineBasicMaterial({\n        color: 8454016,\n        fog: false,\n        transparent: true,\n        opacity: 0.6\n      });\n      var curveMaterialZ = new LineBasicMaterial({\n        color: 8421631,\n        fog: false,\n        transparent: true,\n        opacity: 0.6\n      });\n      var gizmoX = new Line(curveGeometry, curveMaterialX);\n      var gizmoY = new Line(curveGeometry, curveMaterialY);\n      var gizmoZ = new Line(curveGeometry, curveMaterialZ);\n      var rotation = Math.PI * 0.5;\n      gizmoX.rotation.x = rotation;\n      gizmoY.rotation.y = rotation;\n      _this._gizmoMatrixState0.identity().setPosition(tbCenter);\n      _this._gizmoMatrixState.copy(_this._gizmoMatrixState0);\n      if (_this.camera && _this.camera.zoom != 1) {\n        var size = 1 / _this.camera.zoom;\n        _this._scaleMatrix.makeScale(size, size, size);\n        _this._translationMatrix.makeTranslation(-tbCenter.x, -tbCenter.y, -tbCenter.z);\n        _this._gizmoMatrixState.premultiply(_this._translationMatrix).premultiply(_this._scaleMatrix);\n        _this._translationMatrix.makeTranslation(tbCenter.x, tbCenter.y, tbCenter.z);\n        _this._gizmoMatrixState.premultiply(_this._translationMatrix);\n      }\n      _this._gizmoMatrixState.decompose(_this._gizmos.position, _this._gizmos.quaternion, _this._gizmos.scale);\n      _this._gizmos.clear();\n      _this._gizmos.add(gizmoX);\n      _this._gizmos.add(gizmoY);\n      _this._gizmos.add(gizmoZ);\n    });\n    /**\n     * Perform animation for focus operation\n     * @param {Number} time Instant in which this function is called as performance.now()\n     * @param {Vector3} point Point of interest for focus operation\n     * @param {Matrix4} cameraMatrix Camera matrix\n     * @param {Matrix4} gizmoMatrix Gizmos matrix\n     */\n    __publicField(_assertThisInitialized(_this), \"onFocusAnim\", function (time, point, cameraMatrix, gizmoMatrix) {\n      if (_this._timeStart == -1) {\n        _this._timeStart = time;\n      }\n      if (_this._state == STATE.ANIMATION_FOCUS) {\n        var deltaTime = time - _this._timeStart;\n        var animTime = deltaTime / _this.focusAnimationTime;\n        _this._gizmoMatrixState.copy(gizmoMatrix);\n        if (animTime >= 1) {\n          _this._gizmoMatrixState.decompose(_this._gizmos.position, _this._gizmos.quaternion, _this._gizmos.scale);\n          _this.focus(point, _this.scaleFactor);\n          _this._timeStart = -1;\n          _this.updateTbState(STATE.IDLE, false);\n          _this.activateGizmos(false);\n          _this.dispatchEvent(_changeEvent);\n        } else {\n          var amount = _this.easeOutCubic(animTime);\n          var size = 1 - amount + _this.scaleFactor * amount;\n          _this._gizmoMatrixState.decompose(_this._gizmos.position, _this._gizmos.quaternion, _this._gizmos.scale);\n          _this.focus(point, size, amount);\n          _this.dispatchEvent(_changeEvent);\n          var self = _assertThisInitialized(_this);\n          _this._animationId = window.requestAnimationFrame(function (t) {\n            self.onFocusAnim(t, point, cameraMatrix, gizmoMatrix.clone());\n          });\n        }\n      } else {\n        _this._animationId = -1;\n        _this._timeStart = -1;\n      }\n    });\n    /**\n     * Perform animation for rotation operation\n     * @param {Number} time Instant in which this function is called as performance.now()\n     * @param {Vector3} rotationAxis Rotation axis\n     * @param {number} w0 Initial angular velocity\n     */\n    __publicField(_assertThisInitialized(_this), \"onRotationAnim\", function (time, rotationAxis, w0) {\n      if (_this._timeStart == -1) {\n        _this._anglePrev = 0;\n        _this._angleCurrent = 0;\n        _this._timeStart = time;\n      }\n      if (_this._state == STATE.ANIMATION_ROTATE) {\n        var deltaTime = (time - _this._timeStart) / 1e3;\n        var w = w0 + -_this.dampingFactor * deltaTime;\n        if (w > 0) {\n          _this._angleCurrent = 0.5 * -_this.dampingFactor * Math.pow(deltaTime, 2) + w0 * deltaTime + 0;\n          _this.applyTransformMatrix(_this.rotate(rotationAxis, _this._angleCurrent));\n          _this.dispatchEvent(_changeEvent);\n          var self = _assertThisInitialized(_this);\n          _this._animationId = window.requestAnimationFrame(function (t) {\n            self.onRotationAnim(t, rotationAxis, w0);\n          });\n        } else {\n          _this._animationId = -1;\n          _this._timeStart = -1;\n          _this.updateTbState(STATE.IDLE, false);\n          _this.activateGizmos(false);\n          _this.dispatchEvent(_changeEvent);\n        }\n      } else {\n        _this._animationId = -1;\n        _this._timeStart = -1;\n        if (_this._state != STATE.ROTATE) {\n          _this.activateGizmos(false);\n          _this.dispatchEvent(_changeEvent);\n        }\n      }\n    });\n    /**\n     * Perform pan operation moving camera between two points\n     * @param {Vector3} p0 Initial point\n     * @param {Vector3} p1 Ending point\n     * @param {Boolean} adjust If movement should be adjusted considering camera distance (Perspective only)\n     */\n    __publicField(_assertThisInitialized(_this), \"pan\", function (p0, p1) {\n      var adjust = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n      if (_this.camera) {\n        var movement = p0.clone().sub(p1);\n        if (_this.camera instanceof OrthographicCamera) {\n          movement.multiplyScalar(1 / _this.camera.zoom);\n        }\n        if (_this.camera instanceof PerspectiveCamera && adjust) {\n          _this._v3_1.setFromMatrixPosition(_this._cameraMatrixState0);\n          _this._v3_2.setFromMatrixPosition(_this._gizmoMatrixState0);\n          var distanceFactor = _this._v3_1.distanceTo(_this._v3_2) / _this.camera.position.distanceTo(_this._gizmos.position);\n          movement.multiplyScalar(1 / distanceFactor);\n        }\n        _this._v3_1.set(movement.x, movement.y, 0).applyQuaternion(_this.camera.quaternion);\n        _this._m4_1.makeTranslation(_this._v3_1.x, _this._v3_1.y, _this._v3_1.z);\n        _this.setTransformationMatrices(_this._m4_1, _this._m4_1);\n      }\n      return _transformation;\n    });\n    /**\n     * Reset trackball\n     */\n    __publicField(_assertThisInitialized(_this), \"reset\", function () {\n      if (_this.camera) {\n        _this.camera.zoom = _this._zoom0;\n        if (_this.camera instanceof PerspectiveCamera) {\n          _this.camera.fov = _this._fov0;\n        }\n        _this.camera.near = _this._nearPos;\n        _this.camera.far = _this._farPos;\n        _this._cameraMatrixState.copy(_this._cameraMatrixState0);\n        _this._cameraMatrixState.decompose(_this.camera.position, _this.camera.quaternion, _this.camera.scale);\n        _this.camera.up.copy(_this._up0);\n        _this.camera.updateMatrix();\n        _this.camera.updateProjectionMatrix();\n        _this._gizmoMatrixState.copy(_this._gizmoMatrixState0);\n        _this._gizmoMatrixState0.decompose(_this._gizmos.position, _this._gizmos.quaternion, _this._gizmos.scale);\n        _this._gizmos.updateMatrix();\n        var tbRadius = _this.calculateTbRadius(_this.camera);\n        if (tbRadius !== void 0) {\n          _this._tbRadius = tbRadius;\n        }\n        _this.makeGizmos(_this._gizmos.position, _this._tbRadius);\n        _this.camera.lookAt(_this._gizmos.position);\n        _this.updateTbState(STATE.IDLE, false);\n        _this.dispatchEvent(_changeEvent);\n      }\n    });\n    /**\n     * Rotate the camera around an axis passing by trackball's center\n     * @param {Vector3} axis Rotation axis\n     * @param {number} angle Angle in radians\n     * @returns {Object} Object with 'camera' field containing transformation matrix resulting from the operation to be applied to the camera\n     */\n    __publicField(_assertThisInitialized(_this), \"rotate\", function (axis, angle) {\n      var point = _this._gizmos.position;\n      _this._translationMatrix.makeTranslation(-point.x, -point.y, -point.z);\n      _this._rotationMatrix.makeRotationAxis(axis, -angle);\n      _this._m4_1.makeTranslation(point.x, point.y, point.z);\n      _this._m4_1.multiply(_this._rotationMatrix);\n      _this._m4_1.multiply(_this._translationMatrix);\n      _this.setTransformationMatrices(_this._m4_1);\n      return _transformation;\n    });\n    __publicField(_assertThisInitialized(_this), \"copyState\", function () {\n      if (_this.camera) {\n        var state = JSON.stringify(_this.camera instanceof OrthographicCamera ? {\n          arcballState: {\n            cameraFar: _this.camera.far,\n            cameraMatrix: _this.camera.matrix,\n            cameraNear: _this.camera.near,\n            cameraUp: _this.camera.up,\n            cameraZoom: _this.camera.zoom,\n            gizmoMatrix: _this._gizmos.matrix\n          }\n        } : {\n          arcballState: {\n            cameraFar: _this.camera.far,\n            cameraFov: _this.camera.fov,\n            cameraMatrix: _this.camera.matrix,\n            cameraNear: _this.camera.near,\n            cameraUp: _this.camera.up,\n            cameraZoom: _this.camera.zoom,\n            gizmoMatrix: _this._gizmos.matrix\n          }\n        });\n        navigator.clipboard.writeText(state);\n      }\n    });\n    __publicField(_assertThisInitialized(_this), \"pasteState\", function () {\n      var self = _assertThisInitialized(_this);\n      navigator.clipboard.readText().then(function resolved(value) {\n        self.setStateFromJSON(value);\n      });\n    });\n    /**\n     * Save the current state of the control. This can later be recovered with .reset\n     */\n    __publicField(_assertThisInitialized(_this), \"saveState\", function () {\n      if (!_this.camera) return;\n      _this._cameraMatrixState0.copy(_this.camera.matrix);\n      _this._gizmoMatrixState0.copy(_this._gizmos.matrix);\n      _this._nearPos = _this.camera.near;\n      _this._farPos = _this.camera.far;\n      _this._zoom0 = _this.camera.zoom;\n      _this._up0.copy(_this.camera.up);\n      if (_this.camera instanceof PerspectiveCamera) {\n        _this._fov0 = _this.camera.fov;\n      }\n    });\n    /**\n     * Perform uniform scale operation around a given point\n     * @param {Number} size Scale factor\n     * @param {Vector3} point Point around which scale\n     * @param {Boolean} scaleGizmos If gizmos should be scaled (Perspective only)\n     * @returns {Object} Object with 'camera' and 'gizmo' fields containing transformation matrices resulting from the operation to be applied to the camera and gizmos\n     */\n    __publicField(_assertThisInitialized(_this), \"applyScale\", function (size, point) {\n      var scaleGizmos = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n      if (!_this.camera) return;\n      var scalePoint = point.clone();\n      var sizeInverse = 1 / size;\n      if (_this.camera instanceof OrthographicCamera) {\n        _this.camera.zoom = _this._zoomState;\n        _this.camera.zoom *= size;\n        if (_this.camera.zoom > _this.maxZoom) {\n          _this.camera.zoom = _this.maxZoom;\n          sizeInverse = _this._zoomState / _this.maxZoom;\n        } else if (_this.camera.zoom < _this.minZoom) {\n          _this.camera.zoom = _this.minZoom;\n          sizeInverse = _this._zoomState / _this.minZoom;\n        }\n        _this.camera.updateProjectionMatrix();\n        _this._v3_1.setFromMatrixPosition(_this._gizmoMatrixState);\n        _this._scaleMatrix.makeScale(sizeInverse, sizeInverse, sizeInverse);\n        _this._translationMatrix.makeTranslation(-_this._v3_1.x, -_this._v3_1.y, -_this._v3_1.z);\n        _this._m4_2.makeTranslation(_this._v3_1.x, _this._v3_1.y, _this._v3_1.z).multiply(_this._scaleMatrix);\n        _this._m4_2.multiply(_this._translationMatrix);\n        scalePoint.sub(_this._v3_1);\n        var amount = scalePoint.clone().multiplyScalar(sizeInverse);\n        scalePoint.sub(amount);\n        _this._m4_1.makeTranslation(scalePoint.x, scalePoint.y, scalePoint.z);\n        _this._m4_2.premultiply(_this._m4_1);\n        _this.setTransformationMatrices(_this._m4_1, _this._m4_2);\n        return _transformation;\n      }\n      if (_this.camera instanceof PerspectiveCamera) {\n        _this._v3_1.setFromMatrixPosition(_this._cameraMatrixState);\n        _this._v3_2.setFromMatrixPosition(_this._gizmoMatrixState);\n        var distance = _this._v3_1.distanceTo(scalePoint);\n        var _amount = distance - distance * sizeInverse;\n        var newDistance = distance - _amount;\n        if (newDistance < _this.minDistance) {\n          sizeInverse = _this.minDistance / distance;\n          _amount = distance - distance * sizeInverse;\n        } else if (newDistance > _this.maxDistance) {\n          sizeInverse = _this.maxDistance / distance;\n          _amount = distance - distance * sizeInverse;\n        }\n        var direction = scalePoint.clone().sub(_this._v3_1).normalize().multiplyScalar(_amount);\n        _this._m4_1.makeTranslation(direction.x, direction.y, direction.z);\n        if (scaleGizmos) {\n          var pos = _this._v3_2;\n          distance = pos.distanceTo(scalePoint);\n          _amount = distance - distance * sizeInverse;\n          direction = scalePoint.clone().sub(_this._v3_2).normalize().multiplyScalar(_amount);\n          _this._translationMatrix.makeTranslation(pos.x, pos.y, pos.z);\n          _this._scaleMatrix.makeScale(sizeInverse, sizeInverse, sizeInverse);\n          _this._m4_2.makeTranslation(direction.x, direction.y, direction.z).multiply(_this._translationMatrix);\n          _this._m4_2.multiply(_this._scaleMatrix);\n          _this._translationMatrix.makeTranslation(-pos.x, -pos.y, -pos.z);\n          _this._m4_2.multiply(_this._translationMatrix);\n          _this.setTransformationMatrices(_this._m4_1, _this._m4_2);\n        } else {\n          _this.setTransformationMatrices(_this._m4_1);\n        }\n        return _transformation;\n      }\n    });\n    /**\n     * Set camera fov\n     * @param {Number} value fov to be setted\n     */\n    __publicField(_assertThisInitialized(_this), \"setFov\", function (value) {\n      if (_this.camera instanceof PerspectiveCamera) {\n        _this.camera.fov = MathUtils.clamp(value, _this.minFov, _this.maxFov);\n        _this.camera.updateProjectionMatrix();\n      }\n    });\n    /**\n     * Set the trackball's center point\n     * @param {Number} x X coordinate\n     * @param {Number} y Y coordinate\n     * @param {Number} z Z coordinate\n     */\n    __publicField(_assertThisInitialized(_this), \"setTarget\", function (x, y, z) {\n      if (_this.camera) {\n        _this.target.set(x, y, z);\n        _this._gizmos.position.set(x, y, z);\n        var tbRadius = _this.calculateTbRadius(_this.camera);\n        if (tbRadius !== void 0) {\n          _this._tbRadius = tbRadius;\n        }\n        _this.makeGizmos(_this.target, _this._tbRadius);\n        _this.camera.lookAt(_this.target);\n      }\n    });\n    /**\n     * Rotate camera around its direction axis passing by a given point by a given angle\n     * @param {Vector3} point The point where the rotation axis is passing trough\n     * @param {Number} angle Angle in radians\n     * @returns The computed transormation matix\n     */\n    __publicField(_assertThisInitialized(_this), \"zRotate\", function (point, angle) {\n      _this._rotationMatrix.makeRotationAxis(_this._rotationAxis, angle);\n      _this._translationMatrix.makeTranslation(-point.x, -point.y, -point.z);\n      _this._m4_1.makeTranslation(point.x, point.y, point.z);\n      _this._m4_1.multiply(_this._rotationMatrix);\n      _this._m4_1.multiply(_this._translationMatrix);\n      _this._v3_1.setFromMatrixPosition(_this._gizmoMatrixState).sub(point);\n      _this._v3_2.copy(_this._v3_1).applyAxisAngle(_this._rotationAxis, angle);\n      _this._v3_2.sub(_this._v3_1);\n      _this._m4_2.makeTranslation(_this._v3_2.x, _this._v3_2.y, _this._v3_2.z);\n      _this.setTransformationMatrices(_this._m4_1, _this._m4_2);\n      return _transformation;\n    });\n    /**\n     * Unproject the cursor on the 3D object surface\n     * @param {Vector2} cursor Cursor coordinates in NDC\n     * @param {Camera} camera Virtual camera\n     * @returns {Vector3} The point of intersection with the model, if exist, null otherwise\n     */\n    __publicField(_assertThisInitialized(_this), \"unprojectOnObj\", function (cursor, camera) {\n      if (!_this.scene) return null;\n      var raycaster = new Raycaster();\n      raycaster.near = camera.near;\n      raycaster.far = camera.far;\n      raycaster.setFromCamera(cursor, camera);\n      var intersect = raycaster.intersectObjects(_this.scene.children, true);\n      for (var i = 0; i < intersect.length; i++) {\n        if (intersect[i].object.uuid != _this._gizmos.uuid && intersect[i].face) {\n          return intersect[i].point.clone();\n        }\n      }\n      return null;\n    });\n    /**\n     * Unproject the cursor on the trackball surface\n     * @param {Camera} camera The virtual camera\n     * @param {Number} cursorX Cursor horizontal coordinate on screen\n     * @param {Number} cursorY Cursor vertical coordinate on screen\n     * @param {HTMLElement} canvas The canvas where the renderer draws its output\n     * @param {number} tbRadius The trackball radius\n     * @returns {Vector3} The unprojected point on the trackball surface\n     */\n    __publicField(_assertThisInitialized(_this), \"unprojectOnTbSurface\", function (camera, cursorX, cursorY, canvas, tbRadius) {\n      if (camera instanceof OrthographicCamera) {\n        _this._v2_1.copy(_this.getCursorPosition(cursorX, cursorY, canvas));\n        _this._v3_1.set(_this._v2_1.x, _this._v2_1.y, 0);\n        var x2 = Math.pow(_this._v2_1.x, 2);\n        var y2 = Math.pow(_this._v2_1.y, 2);\n        var r2 = Math.pow(_this._tbRadius, 2);\n        if (x2 + y2 <= r2 * 0.5) {\n          _this._v3_1.setZ(Math.sqrt(r2 - (x2 + y2)));\n        } else {\n          _this._v3_1.setZ(r2 * 0.5 / Math.sqrt(x2 + y2));\n        }\n        return _this._v3_1;\n      }\n      if (camera instanceof PerspectiveCamera) {\n        _this._v2_1.copy(_this.getCursorNDC(cursorX, cursorY, canvas));\n        _this._v3_1.set(_this._v2_1.x, _this._v2_1.y, -1);\n        _this._v3_1.applyMatrix4(camera.projectionMatrixInverse);\n        var rayDir = _this._v3_1.clone().normalize();\n        var cameraGizmoDistance = camera.position.distanceTo(_this._gizmos.position);\n        var radius2 = Math.pow(tbRadius, 2);\n        var h = _this._v3_1.z;\n        var l = Math.sqrt(Math.pow(_this._v3_1.x, 2) + Math.pow(_this._v3_1.y, 2));\n        if (l == 0) {\n          rayDir.set(_this._v3_1.x, _this._v3_1.y, tbRadius);\n          return rayDir;\n        }\n        var m = h / l;\n        var q = cameraGizmoDistance;\n        var a = Math.pow(m, 2) + 1;\n        var b = 2 * m * q;\n        var c = Math.pow(q, 2) - radius2;\n        var delta = Math.pow(b, 2) - 4 * a * c;\n        if (delta >= 0) {\n          _this._v2_1.setX((-b - Math.sqrt(delta)) / (2 * a));\n          _this._v2_1.setY(m * _this._v2_1.x + q);\n          var angle = MathUtils.RAD2DEG * _this._v2_1.angle();\n          if (angle >= 45) {\n            var rayLength2 = Math.sqrt(Math.pow(_this._v2_1.x, 2) + Math.pow(cameraGizmoDistance - _this._v2_1.y, 2));\n            rayDir.multiplyScalar(rayLength2);\n            rayDir.z += cameraGizmoDistance;\n            return rayDir;\n          }\n        }\n        a = m;\n        b = q;\n        c = -radius2 * 0.5;\n        delta = Math.pow(b, 2) - 4 * a * c;\n        _this._v2_1.setX((-b - Math.sqrt(delta)) / (2 * a));\n        _this._v2_1.setY(m * _this._v2_1.x + q);\n        var rayLength = Math.sqrt(Math.pow(_this._v2_1.x, 2) + Math.pow(cameraGizmoDistance - _this._v2_1.y, 2));\n        rayDir.multiplyScalar(rayLength);\n        rayDir.z += cameraGizmoDistance;\n        return rayDir;\n      }\n    });\n    /**\n     * Unproject the cursor on the plane passing through the center of the trackball orthogonal to the camera\n     * @param {Camera} camera The virtual camera\n     * @param {Number} cursorX Cursor horizontal coordinate on screen\n     * @param {Number} cursorY Cursor vertical coordinate on screen\n     * @param {HTMLElement} canvas The canvas where the renderer draws its output\n     * @param {Boolean} initialDistance If initial distance between camera and gizmos should be used for calculations instead of current (Perspective only)\n     * @returns {Vector3} The unprojected point on the trackball plane\n     */\n    __publicField(_assertThisInitialized(_this), \"unprojectOnTbPlane\", function (camera, cursorX, cursorY, canvas) {\n      var initialDistance = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;\n      if (camera instanceof OrthographicCamera) {\n        _this._v2_1.copy(_this.getCursorPosition(cursorX, cursorY, canvas));\n        _this._v3_1.set(_this._v2_1.x, _this._v2_1.y, 0);\n        return _this._v3_1.clone();\n      }\n      if (camera instanceof PerspectiveCamera) {\n        _this._v2_1.copy(_this.getCursorNDC(cursorX, cursorY, canvas));\n        _this._v3_1.set(_this._v2_1.x, _this._v2_1.y, -1);\n        _this._v3_1.applyMatrix4(camera.projectionMatrixInverse);\n        var rayDir = _this._v3_1.clone().normalize();\n        var h = _this._v3_1.z;\n        var l = Math.sqrt(Math.pow(_this._v3_1.x, 2) + Math.pow(_this._v3_1.y, 2));\n        var cameraGizmoDistance;\n        if (initialDistance) {\n          cameraGizmoDistance = _this._v3_1.setFromMatrixPosition(_this._cameraMatrixState0).distanceTo(_this._v3_2.setFromMatrixPosition(_this._gizmoMatrixState0));\n        } else {\n          cameraGizmoDistance = camera.position.distanceTo(_this._gizmos.position);\n        }\n        if (l == 0) {\n          rayDir.set(0, 0, 0);\n          return rayDir;\n        }\n        var m = h / l;\n        var q = cameraGizmoDistance;\n        var x = -q / m;\n        var rayLength = Math.sqrt(Math.pow(q, 2) + Math.pow(x, 2));\n        rayDir.multiplyScalar(rayLength);\n        rayDir.z = 0;\n        return rayDir;\n      }\n    });\n    /**\n     * Update camera and gizmos state\n     */\n    __publicField(_assertThisInitialized(_this), \"updateMatrixState\", function () {\n      if (!_this.camera) return;\n      _this._cameraMatrixState.copy(_this.camera.matrix);\n      _this._gizmoMatrixState.copy(_this._gizmos.matrix);\n      if (_this.camera instanceof OrthographicCamera) {\n        _this._cameraProjectionState.copy(_this.camera.projectionMatrix);\n        _this.camera.updateProjectionMatrix();\n        _this._zoomState = _this.camera.zoom;\n      }\n      if (_this.camera instanceof PerspectiveCamera) {\n        _this._fovState = _this.camera.fov;\n      }\n    });\n    /**\n     * Update the trackball FSA\n     * @param {STATE} newState New state of the FSA\n     * @param {Boolean} updateMatrices If matriices state should be updated\n     */\n    __publicField(_assertThisInitialized(_this), \"updateTbState\", function (newState, updateMatrices) {\n      _this._state = newState;\n      if (updateMatrices) {\n        _this.updateMatrixState();\n      }\n    });\n    __publicField(_assertThisInitialized(_this), \"update\", function () {\n      var EPS = 1e-6;\n      if (!_this.target.equals(_this._currentTarget) && _this.camera) {\n        _this._gizmos.position.set(_this.target.x, _this.target.y, _this.target.z);\n        var tbRadius = _this.calculateTbRadius(_this.camera);\n        if (tbRadius !== void 0) {\n          _this._tbRadius = tbRadius;\n        }\n        _this.makeGizmos(_this.target, _this._tbRadius);\n        _this._currentTarget.copy(_this.target);\n      }\n      if (!_this.camera) return;\n      if (_this.camera instanceof OrthographicCamera) {\n        if (_this.camera.zoom > _this.maxZoom || _this.camera.zoom < _this.minZoom) {\n          var newZoom = MathUtils.clamp(_this.camera.zoom, _this.minZoom, _this.maxZoom);\n          _this.applyTransformMatrix(_this.applyScale(newZoom / _this.camera.zoom, _this._gizmos.position, true));\n        }\n      }\n      if (_this.camera instanceof PerspectiveCamera) {\n        var distance = _this.camera.position.distanceTo(_this._gizmos.position);\n        if (distance > _this.maxDistance + EPS || distance < _this.minDistance - EPS) {\n          var newDistance = MathUtils.clamp(distance, _this.minDistance, _this.maxDistance);\n          _this.applyTransformMatrix(_this.applyScale(newDistance / distance, _this._gizmos.position));\n          _this.updateMatrixState();\n        }\n        if (_this.camera.fov < _this.minFov || _this.camera.fov > _this.maxFov) {\n          _this.camera.fov = MathUtils.clamp(_this.camera.fov, _this.minFov, _this.maxFov);\n          _this.camera.updateProjectionMatrix();\n        }\n        var oldRadius = _this._tbRadius;\n        var _tbRadius = _this.calculateTbRadius(_this.camera);\n        if (_tbRadius !== void 0) {\n          _this._tbRadius = _tbRadius;\n        }\n        if (oldRadius < _this._tbRadius - EPS || oldRadius > _this._tbRadius + EPS) {\n          var scale = (_this._gizmos.scale.x + _this._gizmos.scale.y + _this._gizmos.scale.z) / 3;\n          var newRadius = _this._tbRadius / scale;\n          var curve = new EllipseCurve(0, 0, newRadius, newRadius);\n          var points = curve.getPoints(_this._curvePts);\n          var curveGeometry = new BufferGeometry().setFromPoints(points);\n          for (var gizmo in _this._gizmos.children) {\n            var child = _this._gizmos.children[gizmo];\n            child.geometry = curveGeometry;\n          }\n        }\n      }\n      _this.camera.lookAt(_this._gizmos.position);\n    });\n    __publicField(_assertThisInitialized(_this), \"setStateFromJSON\", function (json) {\n      var state = JSON.parse(json);\n      if (state.arcballState && _this.camera) {\n        _this._cameraMatrixState.fromArray(state.arcballState.cameraMatrix.elements);\n        _this._cameraMatrixState.decompose(_this.camera.position, _this.camera.quaternion, _this.camera.scale);\n        _this.camera.up.copy(state.arcballState.cameraUp);\n        _this.camera.near = state.arcballState.cameraNear;\n        _this.camera.far = state.arcballState.cameraFar;\n        _this.camera.zoom = state.arcballState.cameraZoom;\n        if (_this.camera instanceof PerspectiveCamera) {\n          _this.camera.fov = state.arcballState.cameraFov;\n        }\n        _this._gizmoMatrixState.fromArray(state.arcballState.gizmoMatrix.elements);\n        _this._gizmoMatrixState.decompose(_this._gizmos.position, _this._gizmos.quaternion, _this._gizmos.scale);\n        _this.camera.updateMatrix();\n        _this.camera.updateProjectionMatrix();\n        _this._gizmos.updateMatrix();\n        var tbRadius = _this.calculateTbRadius(_this.camera);\n        if (tbRadius !== void 0) {\n          _this._tbRadius = tbRadius;\n        }\n        var gizmoTmp = new Matrix4().copy(_this._gizmoMatrixState0);\n        _this.makeGizmos(_this._gizmos.position, _this._tbRadius);\n        _this._gizmoMatrixState0.copy(gizmoTmp);\n        _this.camera.lookAt(_this._gizmos.position);\n        _this.updateTbState(STATE.IDLE, false);\n        _this.dispatchEvent(_changeEvent);\n      }\n    });\n    _this.camera = null;\n    _this.domElement = domElement;\n    _this.scene = scene;\n    _this.mouseActions = [];\n    _this._mouseOp = null;\n    _this._v2_1 = new Vector2();\n    _this._v3_1 = new Vector3();\n    _this._v3_2 = new Vector3();\n    _this._m4_1 = new Matrix4();\n    _this._m4_2 = new Matrix4();\n    _this._quat = new Quaternion();\n    _this._translationMatrix = new Matrix4();\n    _this._rotationMatrix = new Matrix4();\n    _this._scaleMatrix = new Matrix4();\n    _this._rotationAxis = new Vector3();\n    _this._cameraMatrixState = new Matrix4();\n    _this._cameraProjectionState = new Matrix4();\n    _this._fovState = 1;\n    _this._upState = new Vector3();\n    _this._zoomState = 1;\n    _this._nearPos = 0;\n    _this._farPos = 0;\n    _this._gizmoMatrixState = new Matrix4();\n    _this._up0 = new Vector3();\n    _this._zoom0 = 1;\n    _this._fov0 = 0;\n    _this._initialNear = 0;\n    _this._nearPos0 = 0;\n    _this._initialFar = 0;\n    _this._farPos0 = 0;\n    _this._cameraMatrixState0 = new Matrix4();\n    _this._gizmoMatrixState0 = new Matrix4();\n    _this._button = -1;\n    _this._touchStart = [];\n    _this._touchCurrent = [];\n    _this._input = INPUT.NONE;\n    _this._switchSensibility = 32;\n    _this._startFingerDistance = 0;\n    _this._currentFingerDistance = 0;\n    _this._startFingerRotation = 0;\n    _this._currentFingerRotation = 0;\n    _this._devPxRatio = 0;\n    _this._downValid = true;\n    _this._nclicks = 0;\n    _this._downEvents = [];\n    _this._clickStart = 0;\n    _this._maxDownTime = 250;\n    _this._maxInterval = 300;\n    _this._posThreshold = 24;\n    _this._movementThreshold = 24;\n    _this._currentCursorPosition = new Vector3();\n    _this._startCursorPosition = new Vector3();\n    _this._grid = null;\n    _this._gridPosition = new Vector3();\n    _this._gizmos = new Group();\n    _this._curvePts = 128;\n    _this._timeStart = -1;\n    _this._animationId = -1;\n    _this.focusAnimationTime = 500;\n    _this._timePrev = 0;\n    _this._timeCurrent = 0;\n    _this._anglePrev = 0;\n    _this._angleCurrent = 0;\n    _this._cursorPosPrev = new Vector3();\n    _this._cursorPosCurr = new Vector3();\n    _this._wPrev = 0;\n    _this._wCurr = 0;\n    _this.adjustNearFar = false;\n    _this.scaleFactor = 1.1;\n    _this.dampingFactor = 25;\n    _this.wMax = 20;\n    _this.enableAnimations = true;\n    _this.enableGrid = false;\n    _this.cursorZoom = false;\n    _this.minFov = 5;\n    _this.maxFov = 90;\n    _this.enabled = true;\n    _this.enablePan = true;\n    _this.enableRotate = true;\n    _this.enableZoom = true;\n    _this.minDistance = 0;\n    _this.maxDistance = Infinity;\n    _this.minZoom = 0;\n    _this.maxZoom = Infinity;\n    _this.target = new Vector3(0, 0, 0);\n    _this._currentTarget = new Vector3(0, 0, 0);\n    _this._tbRadius = 1;\n    _this._state = STATE.IDLE;\n    _this.setCamera(camera);\n    if (_this.scene) {\n      _this.scene.add(_this._gizmos);\n    }\n    _this._devPxRatio = window.devicePixelRatio;\n    _this.initializeMouseActions();\n    if (_this.domElement) _this.connect(_this.domElement);\n    window.addEventListener(\"resize\", _this.onWindowResize);\n    return _this;\n  }\n  /**\n   * Apply a transformation matrix, to the camera and gizmos\n   * @param {Object} transformation Object containing matrices to apply to camera and gizmos\n   */\n  _createClass(ArcballControls, [{\n    key: \"applyTransformMatrix\",\n    value: function applyTransformMatrix(transformation) {\n      if ((transformation == null ? void 0 : transformation.camera) && this.camera) {\n        this._m4_1.copy(this._cameraMatrixState).premultiply(transformation.camera);\n        this._m4_1.decompose(this.camera.position, this.camera.quaternion, this.camera.scale);\n        this.camera.updateMatrix();\n        if (this._state == STATE.ROTATE || this._state == STATE.ZROTATE || this._state == STATE.ANIMATION_ROTATE) {\n          this.camera.up.copy(this._upState).applyQuaternion(this.camera.quaternion);\n        }\n      }\n      if (transformation == null ? void 0 : transformation.gizmos) {\n        this._m4_1.copy(this._gizmoMatrixState).premultiply(transformation.gizmos);\n        this._m4_1.decompose(this._gizmos.position, this._gizmos.quaternion, this._gizmos.scale);\n        this._gizmos.updateMatrix();\n      }\n      if ((this._state == STATE.SCALE || this._state == STATE.FOCUS || this._state == STATE.ANIMATION_FOCUS) && this.camera) {\n        var tbRadius = this.calculateTbRadius(this.camera);\n        if (tbRadius !== void 0) {\n          this._tbRadius = tbRadius;\n        }\n        if (this.adjustNearFar) {\n          var cameraDistance = this.camera.position.distanceTo(this._gizmos.position);\n          var bb = new Box3();\n          bb.setFromObject(this._gizmos);\n          var sphere = new Sphere();\n          bb.getBoundingSphere(sphere);\n          var adjustedNearPosition = Math.max(this._nearPos0, sphere.radius + sphere.center.length());\n          var regularNearPosition = cameraDistance - this._initialNear;\n          var minNearPos = Math.min(adjustedNearPosition, regularNearPosition);\n          this.camera.near = cameraDistance - minNearPos;\n          var adjustedFarPosition = Math.min(this._farPos0, -sphere.radius + sphere.center.length());\n          var regularFarPosition = cameraDistance - this._initialFar;\n          var minFarPos = Math.min(adjustedFarPosition, regularFarPosition);\n          this.camera.far = cameraDistance - minFarPos;\n          this.camera.updateProjectionMatrix();\n        } else {\n          var update = false;\n          if (this.camera.near != this._initialNear) {\n            this.camera.near = this._initialNear;\n            update = true;\n          }\n          if (this.camera.far != this._initialFar) {\n            this.camera.far = this._initialFar;\n            update = true;\n          }\n          if (update) {\n            this.camera.updateProjectionMatrix();\n          }\n        }\n      }\n    }\n    /**\n     * Set gizmos visibility\n     * @param {Boolean} value Value of gizmos visibility\n     */\n  }, {\n    key: \"setGizmosVisible\",\n    value: function setGizmosVisible(value) {\n      this._gizmos.visible = value;\n      this.dispatchEvent(_changeEvent);\n    }\n    /**\n     * Set values in transformation object\n     * @param {Matrix4} camera Transformation to be applied to the camera\n     * @param {Matrix4} gizmos Transformation to be applied to gizmos\n     */\n  }, {\n    key: \"setTransformationMatrices\",\n    value: function setTransformationMatrices() {\n      var camera = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n      var gizmos = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n      if (camera) {\n        if (_transformation.camera) {\n          _transformation.camera.copy(camera);\n        } else {\n          _transformation.camera = camera.clone();\n        }\n      } else {\n        _transformation.camera = null;\n      }\n      if (gizmos) {\n        if (_transformation.gizmos) {\n          _transformation.gizmos.copy(gizmos);\n        } else {\n          _transformation.gizmos = gizmos.clone();\n        }\n      } else {\n        _transformation.gizmos = null;\n      }\n    }\n  }]);\n  return ArcballControls;\n}(EventDispatcher);\nexport { ArcballControls };","map":{"version":3,"names":["__defProp","Object","defineProperty","__defNormalProp","obj","key","value","enumerable","configurable","writable","__publicField","Matrix4","EventDispatcher","Vector2","Vector3","Quaternion","Group","EllipseCurve","BufferGeometry","PerspectiveCamera","MathUtils","OrthographicCamera","Box3","Sphere","GridHelper","LineBasicMaterial","Line","Raycaster","STATE","IDLE","Symbol","ROTATE","PAN","SCALE","FOV","FOCUS","ZROTATE","TOUCH_MULTI","ANIMATION_FOCUS","ANIMATION_ROTATE","INPUT","NONE","ONE_FINGER","ONE_FINGER_SWITCHED","TWO_FINGER","MULT_FINGER","CURSOR","_center","x","y","_transformation","camera","gizmos","_changeEvent","type","_startEvent","_endEvent","ArcballControls","_EventDispatcher","_inherits","_super","_createSuper","_this","domElement","arguments","length","undefined","scene","_classCallCheck","call","_assertThisInitialized","scale","_gizmos","z","tbRadius","calculateTbRadius","_tbRadius","newRadius","curve","points","getPoints","_curvePts","curveGeometry","setFromPoints","gizmo","children","child","geometry","dispatchEvent","event","enabled","i","mouseActions","mouse","preventDefault","_touchStart","splice","_touchCurrent","_input","button","isPrimary","_downValid","_downEvents","push","pointerType","onSinglePanStart","window","addEventListener","onPointerMove","onPointerUp","onRotateStart","onPinchStart","onDoublePanStart","onTriplePanStart","modifier","ctrlKey","metaKey","shiftKey","_mouseOp","getOpFromAction","_button","updateTouchEvent","onSinglePanMove","movement","calculatePointersDistance","_devPxRatio","_switchSensibility","onRotateMove","onPinchMove","onDoublePanMove","onTriplePanMove","mouseOpState","getOpStateFromAction","_movementThreshold","nTouch","pointerId","removeEventListener","onSinglePanEnd","onDoublePanEnd","onPinchEnd","onRotateEnd","onTriplePanEnd","downTime","timeStamp","_maxDownTime","_nclicks","_clickStart","performance","now","clickInterval","_maxInterval","_posThreshold","onDoubleTap","shift","_a","_b","enableZoom","mouseOp","notchDeltaY","sgn","deltaY","size","scaleFactor","updateTbState","Math","pow","cursorZoom","enablePan","scalePoint","unprojectOnTbPlane","clientX","clientY","applyQuaternion","quaternion","multiplyScalar","zoom","add","position","applyTransformMatrix","applyScale","_grid","disposeGrid","drawGrid","deltaX","_v3_1","setFromMatrixPosition","_cameraMatrixState","distanceTo","xNew","clamp","minDistance","maxDistance","tan","DEG2RAD","fov","newFov","RAD2DEG","atan","maxFov","minFov","newDistance","setFov","operation","setCenter","_animationId","cancelAnimationFrame","_timeStart","activateGizmos","rayDir","_startCursorPosition","copy","enableGrid","enableRotate","unprojectOnTbSurface","enableAnimations","_timePrev","_timeCurrent","_angleCurrent","_anglePrev","_cursorPosPrev","_cursorPosCurr","_wCurr","_wPrev","setY","getCursorNDC","_currentCursorPosition","opState","restart","_state","pan","distance","angle","angleTo","amount","max","rotate","calculateRotationAxis","calculateAngularSpeed","screenNotches","_fovState","_v3_2","_gizmoMatrixState","direction","clone","sub","normalize","_m4_1","makeTranslation","deltaTime","w","abs","self","requestAnimationFrame","t","rotationAxis","onRotationAnim","min","wMax","hitP","unprojectOnObj","onFocusAnim","focus","_startFingerRotation","getAngle","_currentFingerRotation","getWorldDirection","_rotationAxis","rotationPoint","zRotate","_startFingerDistance","_currentFingerDistance","nFingers","setMouseAction","operationInput","mouseInput","keyInput","state","includes","action","p1","p2","atan2","PI","p0","t0","t1","s","sqrt","vec1","vec2","_rotationMatrix","extractRotation","_quat","setFromRotationMatrix","crossVectors","factor","halfFovV","halfFovH","aspect","top","right","point","focusPoint","_translationMatrix","gizmoStateTemp","premultiply","decompose","cameraStateTemp","color","multiplier","divisions","maxLength","tick","width","left","height","bottom","_gridPosition","rotateX","document","console","error","style","touchAction","onContextMenu","onPointerDown","onPointerCancel","onWheel","_c","_d","_e","onWindowResize","remove","isActive","_iterator","_createForOfIteratorHelper","_step","n","done","material","setValues","opacity","err","e","f","cursorX","cursorY","canvas","canvasRect","getBoundingClientRect","_v2_1","setX","lookAt","target","updateMatrix","_fov0","_cameraMatrixState0","matrix","_cameraProjectionState","projectionMatrix","_zoom0","_zoomState","_initialNear","near","_nearPos0","_nearPos","_initialFar","far","_farPos0","_farPos","_up0","up","_upState","updateProjectionMatrix","makeGizmos","tbCenter","curveMaterialX","fog","transparent","curveMaterialY","curveMaterialZ","gizmoX","gizmoY","gizmoZ","rotation","_gizmoMatrixState0","identity","setPosition","_scaleMatrix","makeScale","clear","time","cameraMatrix","gizmoMatrix","animTime","focusAnimationTime","easeOutCubic","w0","dampingFactor","adjust","distanceFactor","set","setTransformationMatrices","axis","makeRotationAxis","multiply","JSON","stringify","arcballState","cameraFar","cameraNear","cameraUp","cameraZoom","cameraFov","navigator","clipboard","writeText","readText","then","resolved","setStateFromJSON","scaleGizmos","sizeInverse","maxZoom","minZoom","_m4_2","pos","applyAxisAngle","cursor","raycaster","setFromCamera","intersect","intersectObjects","object","uuid","face","getCursorPosition","x2","y2","r2","setZ","applyMatrix4","projectionMatrixInverse","cameraGizmoDistance","radius2","h","l","m","q","a","b","c","delta","rayLength2","rayLength","initialDistance","newState","updateMatrices","updateMatrixState","EPS","equals","_currentTarget","newZoom","oldRadius","json","parse","fromArray","elements","gizmoTmp","adjustNearFar","Infinity","setCamera","devicePixelRatio","initializeMouseActions","connect","_createClass","transformation","cameraDistance","bb","setFromObject","sphere","getBoundingSphere","adjustedNearPosition","radius","center","regularNearPosition","minNearPos","adjustedFarPosition","regularFarPosition","minFarPos","update","setGizmosVisible","visible"],"sources":["/home/krug/Coding/JavaScript/Websites/Personal/personal/node_modules/.pnpm/three-stdlib@2.23.7_three@0.151.3/node_modules/three-stdlib/controls/ArcballControls.js"],"sourcesContent":["var __defProp = Object.defineProperty;\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;\nvar __publicField = (obj, key, value) => {\n  __defNormalProp(obj, typeof key !== \"symbol\" ? key + \"\" : key, value);\n  return value;\n};\nimport { Matrix4, EventDispatcher, Vector2, Vector3, Quaternion, Group, EllipseCurve, BufferGeometry, PerspectiveCamera, MathUtils, OrthographicCamera, Box3, Sphere, GridHelper, LineBasicMaterial, Line, Raycaster } from \"three\";\nconst STATE = {\n  IDLE: Symbol(),\n  ROTATE: Symbol(),\n  PAN: Symbol(),\n  SCALE: Symbol(),\n  FOV: Symbol(),\n  FOCUS: Symbol(),\n  ZROTATE: Symbol(),\n  TOUCH_MULTI: Symbol(),\n  ANIMATION_FOCUS: Symbol(),\n  ANIMATION_ROTATE: Symbol()\n};\nconst INPUT = {\n  NONE: Symbol(),\n  ONE_FINGER: Symbol(),\n  ONE_FINGER_SWITCHED: Symbol(),\n  TWO_FINGER: Symbol(),\n  MULT_FINGER: Symbol(),\n  CURSOR: Symbol()\n};\nconst _center = {\n  x: 0,\n  y: 0\n};\nconst _transformation = {\n  camera: /* @__PURE__ */ new Matrix4(),\n  gizmos: /* @__PURE__ */ new Matrix4()\n};\nconst _changeEvent = { type: \"change\" };\nconst _startEvent = { type: \"start\" };\nconst _endEvent = { type: \"end\" };\nclass ArcballControls extends EventDispatcher {\n  constructor(camera, domElement = null, scene = null) {\n    super();\n    __publicField(this, \"camera\");\n    __publicField(this, \"domElement\");\n    __publicField(this, \"scene\");\n    __publicField(this, \"mouseActions\");\n    __publicField(this, \"_mouseOp\");\n    __publicField(this, \"_v2_1\");\n    __publicField(this, \"_v3_1\");\n    __publicField(this, \"_v3_2\");\n    __publicField(this, \"_m4_1\");\n    __publicField(this, \"_m4_2\");\n    __publicField(this, \"_quat\");\n    __publicField(this, \"_translationMatrix\");\n    __publicField(this, \"_rotationMatrix\");\n    __publicField(this, \"_scaleMatrix\");\n    __publicField(this, \"_rotationAxis\");\n    __publicField(this, \"_cameraMatrixState\");\n    __publicField(this, \"_cameraProjectionState\");\n    __publicField(this, \"_fovState\");\n    __publicField(this, \"_upState\");\n    __publicField(this, \"_zoomState\");\n    __publicField(this, \"_nearPos\");\n    __publicField(this, \"_farPos\");\n    __publicField(this, \"_gizmoMatrixState\");\n    __publicField(this, \"_up0\");\n    __publicField(this, \"_zoom0\");\n    __publicField(this, \"_fov0\");\n    __publicField(this, \"_initialNear\");\n    __publicField(this, \"_nearPos0\");\n    __publicField(this, \"_initialFar\");\n    __publicField(this, \"_farPos0\");\n    __publicField(this, \"_cameraMatrixState0\");\n    __publicField(this, \"_gizmoMatrixState0\");\n    __publicField(this, \"_button\");\n    __publicField(this, \"_touchStart\");\n    __publicField(this, \"_touchCurrent\");\n    __publicField(this, \"_input\");\n    __publicField(this, \"_switchSensibility\");\n    __publicField(this, \"_startFingerDistance\");\n    __publicField(this, \"_currentFingerDistance\");\n    __publicField(this, \"_startFingerRotation\");\n    __publicField(this, \"_currentFingerRotation\");\n    __publicField(this, \"_devPxRatio\");\n    __publicField(this, \"_downValid\");\n    __publicField(this, \"_nclicks\");\n    __publicField(this, \"_downEvents\");\n    __publicField(this, \"_clickStart\");\n    __publicField(this, \"_maxDownTime\");\n    __publicField(this, \"_maxInterval\");\n    __publicField(this, \"_posThreshold\");\n    __publicField(this, \"_movementThreshold\");\n    __publicField(this, \"_currentCursorPosition\");\n    __publicField(this, \"_startCursorPosition\");\n    __publicField(this, \"_grid\");\n    __publicField(this, \"_gridPosition\");\n    __publicField(this, \"_gizmos\");\n    __publicField(this, \"_curvePts\");\n    __publicField(this, \"_timeStart\");\n    __publicField(this, \"_animationId\");\n    __publicField(this, \"focusAnimationTime\");\n    __publicField(this, \"_timePrev\");\n    __publicField(this, \"_timeCurrent\");\n    __publicField(this, \"_anglePrev\");\n    __publicField(this, \"_angleCurrent\");\n    __publicField(this, \"_cursorPosPrev\");\n    __publicField(this, \"_cursorPosCurr\");\n    __publicField(this, \"_wPrev\");\n    __publicField(this, \"_wCurr\");\n    __publicField(this, \"adjustNearFar\");\n    __publicField(this, \"scaleFactor\");\n    __publicField(this, \"dampingFactor\");\n    __publicField(this, \"wMax\");\n    __publicField(this, \"enableAnimations\");\n    __publicField(this, \"enableGrid\");\n    __publicField(this, \"cursorZoom\");\n    __publicField(this, \"minFov\");\n    __publicField(this, \"maxFov\");\n    __publicField(this, \"enabled\");\n    __publicField(this, \"enablePan\");\n    __publicField(this, \"enableRotate\");\n    __publicField(this, \"enableZoom\");\n    __publicField(this, \"minDistance\");\n    __publicField(this, \"maxDistance\");\n    __publicField(this, \"minZoom\");\n    __publicField(this, \"maxZoom\");\n    __publicField(this, \"target\");\n    __publicField(this, \"_currentTarget\");\n    __publicField(this, \"_tbRadius\");\n    __publicField(this, \"_state\");\n    //listeners\n    __publicField(this, \"onWindowResize\", () => {\n      const scale = (this._gizmos.scale.x + this._gizmos.scale.y + this._gizmos.scale.z) / 3;\n      if (this.camera) {\n        const tbRadius = this.calculateTbRadius(this.camera);\n        if (tbRadius !== void 0) {\n          this._tbRadius = tbRadius;\n        }\n      }\n      const newRadius = this._tbRadius / scale;\n      const curve = new EllipseCurve(0, 0, newRadius, newRadius);\n      const points = curve.getPoints(this._curvePts);\n      const curveGeometry = new BufferGeometry().setFromPoints(points);\n      for (const gizmo in this._gizmos.children) {\n        const child = this._gizmos.children[gizmo];\n        child.geometry = curveGeometry;\n      }\n      this.dispatchEvent(_changeEvent);\n    });\n    __publicField(this, \"onContextMenu\", (event) => {\n      if (!this.enabled) {\n        return;\n      }\n      for (let i = 0; i < this.mouseActions.length; i++) {\n        if (this.mouseActions[i].mouse == 2) {\n          event.preventDefault();\n          break;\n        }\n      }\n    });\n    __publicField(this, \"onPointerCancel\", () => {\n      this._touchStart.splice(0, this._touchStart.length);\n      this._touchCurrent.splice(0, this._touchCurrent.length);\n      this._input = INPUT.NONE;\n    });\n    __publicField(this, \"onPointerDown\", (event) => {\n      if (event.button == 0 && event.isPrimary) {\n        this._downValid = true;\n        this._downEvents.push(event);\n      } else {\n        this._downValid = false;\n      }\n      if (event.pointerType == \"touch\" && this._input != INPUT.CURSOR) {\n        this._touchStart.push(event);\n        this._touchCurrent.push(event);\n        switch (this._input) {\n          case INPUT.NONE:\n            this._input = INPUT.ONE_FINGER;\n            this.onSinglePanStart(event, \"ROTATE\");\n            window.addEventListener(\"pointermove\", this.onPointerMove);\n            window.addEventListener(\"pointerup\", this.onPointerUp);\n            break;\n          case INPUT.ONE_FINGER:\n          case INPUT.ONE_FINGER_SWITCHED:\n            this._input = INPUT.TWO_FINGER;\n            this.onRotateStart();\n            this.onPinchStart();\n            this.onDoublePanStart();\n            break;\n          case INPUT.TWO_FINGER:\n            this._input = INPUT.MULT_FINGER;\n            this.onTriplePanStart();\n            break;\n        }\n      } else if (event.pointerType != \"touch\" && this._input == INPUT.NONE) {\n        let modifier = null;\n        if (event.ctrlKey || event.metaKey) {\n          modifier = \"CTRL\";\n        } else if (event.shiftKey) {\n          modifier = \"SHIFT\";\n        }\n        this._mouseOp = this.getOpFromAction(event.button, modifier);\n        if (this._mouseOp) {\n          window.addEventListener(\"pointermove\", this.onPointerMove);\n          window.addEventListener(\"pointerup\", this.onPointerUp);\n          this._input = INPUT.CURSOR;\n          this._button = event.button;\n          this.onSinglePanStart(event, this._mouseOp);\n        }\n      }\n    });\n    __publicField(this, \"onPointerMove\", (event) => {\n      if (event.pointerType == \"touch\" && this._input != INPUT.CURSOR) {\n        switch (this._input) {\n          case INPUT.ONE_FINGER:\n            this.updateTouchEvent(event);\n            this.onSinglePanMove(event, STATE.ROTATE);\n            break;\n          case INPUT.ONE_FINGER_SWITCHED:\n            const movement = this.calculatePointersDistance(this._touchCurrent[0], event) * this._devPxRatio;\n            if (movement >= this._switchSensibility) {\n              this._input = INPUT.ONE_FINGER;\n              this.updateTouchEvent(event);\n              this.onSinglePanStart(event, \"ROTATE\");\n              break;\n            }\n            break;\n          case INPUT.TWO_FINGER:\n            this.updateTouchEvent(event);\n            this.onRotateMove();\n            this.onPinchMove();\n            this.onDoublePanMove();\n            break;\n          case INPUT.MULT_FINGER:\n            this.updateTouchEvent(event);\n            this.onTriplePanMove();\n            break;\n        }\n      } else if (event.pointerType != \"touch\" && this._input == INPUT.CURSOR) {\n        let modifier = null;\n        if (event.ctrlKey || event.metaKey) {\n          modifier = \"CTRL\";\n        } else if (event.shiftKey) {\n          modifier = \"SHIFT\";\n        }\n        const mouseOpState = this.getOpStateFromAction(this._button, modifier);\n        if (mouseOpState) {\n          this.onSinglePanMove(event, mouseOpState);\n        }\n      }\n      if (this._downValid) {\n        const movement = this.calculatePointersDistance(this._downEvents[this._downEvents.length - 1], event) * this._devPxRatio;\n        if (movement > this._movementThreshold) {\n          this._downValid = false;\n        }\n      }\n    });\n    __publicField(this, \"onPointerUp\", (event) => {\n      if (event.pointerType == \"touch\" && this._input != INPUT.CURSOR) {\n        const nTouch = this._touchCurrent.length;\n        for (let i = 0; i < nTouch; i++) {\n          if (this._touchCurrent[i].pointerId == event.pointerId) {\n            this._touchCurrent.splice(i, 1);\n            this._touchStart.splice(i, 1);\n            break;\n          }\n        }\n        switch (this._input) {\n          case INPUT.ONE_FINGER:\n          case INPUT.ONE_FINGER_SWITCHED:\n            window.removeEventListener(\"pointermove\", this.onPointerMove);\n            window.removeEventListener(\"pointerup\", this.onPointerUp);\n            this._input = INPUT.NONE;\n            this.onSinglePanEnd();\n            break;\n          case INPUT.TWO_FINGER:\n            this.onDoublePanEnd();\n            this.onPinchEnd();\n            this.onRotateEnd();\n            this._input = INPUT.ONE_FINGER_SWITCHED;\n            break;\n          case INPUT.MULT_FINGER:\n            if (this._touchCurrent.length == 0) {\n              window.removeEventListener(\"pointermove\", this.onPointerMove);\n              window.removeEventListener(\"pointerup\", this.onPointerUp);\n              this._input = INPUT.NONE;\n              this.onTriplePanEnd();\n            }\n            break;\n        }\n      } else if (event.pointerType != \"touch\" && this._input == INPUT.CURSOR) {\n        window.removeEventListener(\"pointermove\", this.onPointerMove);\n        window.removeEventListener(\"pointerup\", this.onPointerUp);\n        this._input = INPUT.NONE;\n        this.onSinglePanEnd();\n        this._button = -1;\n      }\n      if (event.isPrimary) {\n        if (this._downValid) {\n          const downTime = event.timeStamp - this._downEvents[this._downEvents.length - 1].timeStamp;\n          if (downTime <= this._maxDownTime) {\n            if (this._nclicks == 0) {\n              this._nclicks = 1;\n              this._clickStart = performance.now();\n            } else {\n              const clickInterval = event.timeStamp - this._clickStart;\n              const movement = this.calculatePointersDistance(this._downEvents[1], this._downEvents[0]) * this._devPxRatio;\n              if (clickInterval <= this._maxInterval && movement <= this._posThreshold) {\n                this._nclicks = 0;\n                this._downEvents.splice(0, this._downEvents.length);\n                this.onDoubleTap(event);\n              } else {\n                this._nclicks = 1;\n                this._downEvents.shift();\n                this._clickStart = performance.now();\n              }\n            }\n          } else {\n            this._downValid = false;\n            this._nclicks = 0;\n            this._downEvents.splice(0, this._downEvents.length);\n          }\n        } else {\n          this._nclicks = 0;\n          this._downEvents.splice(0, this._downEvents.length);\n        }\n      }\n    });\n    __publicField(this, \"onWheel\", (event) => {\n      var _a, _b;\n      if (this.enabled && this.enableZoom && this.domElement) {\n        let modifier = null;\n        if (event.ctrlKey || event.metaKey) {\n          modifier = \"CTRL\";\n        } else if (event.shiftKey) {\n          modifier = \"SHIFT\";\n        }\n        const mouseOp = this.getOpFromAction(\"WHEEL\", modifier);\n        if (mouseOp) {\n          event.preventDefault();\n          this.dispatchEvent(_startEvent);\n          const notchDeltaY = 125;\n          let sgn = event.deltaY / notchDeltaY;\n          let size = 1;\n          if (sgn > 0) {\n            size = 1 / this.scaleFactor;\n          } else if (sgn < 0) {\n            size = this.scaleFactor;\n          }\n          switch (mouseOp) {\n            case \"ZOOM\":\n              this.updateTbState(STATE.SCALE, true);\n              if (sgn > 0) {\n                size = 1 / Math.pow(this.scaleFactor, sgn);\n              } else if (sgn < 0) {\n                size = Math.pow(this.scaleFactor, -sgn);\n              }\n              if (this.cursorZoom && this.enablePan) {\n                let scalePoint;\n                if (this.camera instanceof OrthographicCamera) {\n                  scalePoint = (_a = this.unprojectOnTbPlane(this.camera, event.clientX, event.clientY, this.domElement)) == null ? void 0 : _a.applyQuaternion(this.camera.quaternion).multiplyScalar(1 / this.camera.zoom).add(this._gizmos.position);\n                }\n                if (this.camera instanceof PerspectiveCamera) {\n                  scalePoint = (_b = this.unprojectOnTbPlane(this.camera, event.clientX, event.clientY, this.domElement)) == null ? void 0 : _b.applyQuaternion(this.camera.quaternion).add(this._gizmos.position);\n                }\n                if (scalePoint !== void 0)\n                  this.applyTransformMatrix(this.applyScale(size, scalePoint));\n              } else {\n                this.applyTransformMatrix(this.applyScale(size, this._gizmos.position));\n              }\n              if (this._grid) {\n                this.disposeGrid();\n                this.drawGrid();\n              }\n              this.updateTbState(STATE.IDLE, false);\n              this.dispatchEvent(_changeEvent);\n              this.dispatchEvent(_endEvent);\n              break;\n            case \"FOV\":\n              if (this.camera instanceof PerspectiveCamera) {\n                this.updateTbState(STATE.FOV, true);\n                if (event.deltaX != 0) {\n                  sgn = event.deltaX / notchDeltaY;\n                  size = 1;\n                  if (sgn > 0) {\n                    size = 1 / Math.pow(this.scaleFactor, sgn);\n                  } else if (sgn < 0) {\n                    size = Math.pow(this.scaleFactor, -sgn);\n                  }\n                }\n                this._v3_1.setFromMatrixPosition(this._cameraMatrixState);\n                const x = this._v3_1.distanceTo(this._gizmos.position);\n                let xNew = x / size;\n                xNew = MathUtils.clamp(xNew, this.minDistance, this.maxDistance);\n                const y = x * Math.tan(MathUtils.DEG2RAD * this.camera.fov * 0.5);\n                let newFov = MathUtils.RAD2DEG * (Math.atan(y / xNew) * 2);\n                if (newFov > this.maxFov) {\n                  newFov = this.maxFov;\n                } else if (newFov < this.minFov) {\n                  newFov = this.minFov;\n                }\n                const newDistance = y / Math.tan(MathUtils.DEG2RAD * (newFov / 2));\n                size = x / newDistance;\n                this.setFov(newFov);\n                this.applyTransformMatrix(this.applyScale(size, this._gizmos.position, false));\n              }\n              if (this._grid) {\n                this.disposeGrid();\n                this.drawGrid();\n              }\n              this.updateTbState(STATE.IDLE, false);\n              this.dispatchEvent(_changeEvent);\n              this.dispatchEvent(_endEvent);\n              break;\n          }\n        }\n      }\n    });\n    __publicField(this, \"onSinglePanStart\", (event, operation) => {\n      if (this.enabled && this.domElement) {\n        this.dispatchEvent(_startEvent);\n        this.setCenter(event.clientX, event.clientY);\n        switch (operation) {\n          case \"PAN\":\n            if (!this.enablePan)\n              return;\n            if (this._animationId != -1) {\n              cancelAnimationFrame(this._animationId);\n              this._animationId = -1;\n              this._timeStart = -1;\n              this.activateGizmos(false);\n              this.dispatchEvent(_changeEvent);\n            }\n            if (this.camera) {\n              this.updateTbState(STATE.PAN, true);\n              const rayDir = this.unprojectOnTbPlane(this.camera, _center.x, _center.y, this.domElement);\n              if (rayDir !== void 0) {\n                this._startCursorPosition.copy(rayDir);\n              }\n              if (this.enableGrid) {\n                this.drawGrid();\n                this.dispatchEvent(_changeEvent);\n              }\n            }\n            break;\n          case \"ROTATE\":\n            if (!this.enableRotate)\n              return;\n            if (this._animationId != -1) {\n              cancelAnimationFrame(this._animationId);\n              this._animationId = -1;\n              this._timeStart = -1;\n            }\n            if (this.camera) {\n              this.updateTbState(STATE.ROTATE, true);\n              const rayDir = this.unprojectOnTbSurface(this.camera, _center.x, _center.y, this.domElement, this._tbRadius);\n              if (rayDir !== void 0) {\n                this._startCursorPosition.copy(rayDir);\n              }\n              this.activateGizmos(true);\n              if (this.enableAnimations) {\n                this._timePrev = this._timeCurrent = performance.now();\n                this._angleCurrent = this._anglePrev = 0;\n                this._cursorPosPrev.copy(this._startCursorPosition);\n                this._cursorPosCurr.copy(this._cursorPosPrev);\n                this._wCurr = 0;\n                this._wPrev = this._wCurr;\n              }\n            }\n            this.dispatchEvent(_changeEvent);\n            break;\n          case \"FOV\":\n            if (!this.enableZoom)\n              return;\n            if (this.camera instanceof PerspectiveCamera) {\n              if (this._animationId != -1) {\n                cancelAnimationFrame(this._animationId);\n                this._animationId = -1;\n                this._timeStart = -1;\n                this.activateGizmos(false);\n                this.dispatchEvent(_changeEvent);\n              }\n              this.updateTbState(STATE.FOV, true);\n              this._startCursorPosition.setY(this.getCursorNDC(_center.x, _center.y, this.domElement).y * 0.5);\n              this._currentCursorPosition.copy(this._startCursorPosition);\n            }\n            break;\n          case \"ZOOM\":\n            if (!this.enableZoom)\n              return;\n            if (this._animationId != -1) {\n              cancelAnimationFrame(this._animationId);\n              this._animationId = -1;\n              this._timeStart = -1;\n              this.activateGizmos(false);\n              this.dispatchEvent(_changeEvent);\n            }\n            this.updateTbState(STATE.SCALE, true);\n            this._startCursorPosition.setY(this.getCursorNDC(_center.x, _center.y, this.domElement).y * 0.5);\n            this._currentCursorPosition.copy(this._startCursorPosition);\n            break;\n        }\n      }\n    });\n    __publicField(this, \"onSinglePanMove\", (event, opState) => {\n      if (this.enabled && this.domElement) {\n        const restart = opState != this._state;\n        this.setCenter(event.clientX, event.clientY);\n        switch (opState) {\n          case STATE.PAN:\n            if (this.enablePan && this.camera) {\n              if (restart) {\n                this.dispatchEvent(_endEvent);\n                this.dispatchEvent(_startEvent);\n                this.updateTbState(opState, true);\n                const rayDir = this.unprojectOnTbPlane(this.camera, _center.x, _center.y, this.domElement);\n                if (rayDir !== void 0) {\n                  this._startCursorPosition.copy(rayDir);\n                }\n                if (this.enableGrid) {\n                  this.drawGrid();\n                }\n                this.activateGizmos(false);\n              } else {\n                const rayDir = this.unprojectOnTbPlane(this.camera, _center.x, _center.y, this.domElement);\n                if (rayDir !== void 0) {\n                  this._currentCursorPosition.copy(rayDir);\n                }\n                this.applyTransformMatrix(this.pan(this._startCursorPosition, this._currentCursorPosition));\n              }\n            }\n            break;\n          case STATE.ROTATE:\n            if (this.enableRotate && this.camera) {\n              if (restart) {\n                this.dispatchEvent(_endEvent);\n                this.dispatchEvent(_startEvent);\n                this.updateTbState(opState, true);\n                const rayDir = this.unprojectOnTbSurface(\n                  this.camera,\n                  _center.x,\n                  _center.y,\n                  this.domElement,\n                  this._tbRadius\n                );\n                if (rayDir !== void 0) {\n                  this._startCursorPosition.copy(rayDir);\n                }\n                if (this.enableGrid) {\n                  this.disposeGrid();\n                }\n                this.activateGizmos(true);\n              } else {\n                const rayDir = this.unprojectOnTbSurface(\n                  this.camera,\n                  _center.x,\n                  _center.y,\n                  this.domElement,\n                  this._tbRadius\n                );\n                if (rayDir !== void 0) {\n                  this._currentCursorPosition.copy(rayDir);\n                }\n                const distance = this._startCursorPosition.distanceTo(this._currentCursorPosition);\n                const angle = this._startCursorPosition.angleTo(this._currentCursorPosition);\n                const amount = Math.max(distance / this._tbRadius, angle);\n                this.applyTransformMatrix(\n                  this.rotate(this.calculateRotationAxis(this._startCursorPosition, this._currentCursorPosition), amount)\n                );\n                if (this.enableAnimations) {\n                  this._timePrev = this._timeCurrent;\n                  this._timeCurrent = performance.now();\n                  this._anglePrev = this._angleCurrent;\n                  this._angleCurrent = amount;\n                  this._cursorPosPrev.copy(this._cursorPosCurr);\n                  this._cursorPosCurr.copy(this._currentCursorPosition);\n                  this._wPrev = this._wCurr;\n                  this._wCurr = this.calculateAngularSpeed(\n                    this._anglePrev,\n                    this._angleCurrent,\n                    this._timePrev,\n                    this._timeCurrent\n                  );\n                }\n              }\n            }\n            break;\n          case STATE.SCALE:\n            if (this.enableZoom) {\n              if (restart) {\n                this.dispatchEvent(_endEvent);\n                this.dispatchEvent(_startEvent);\n                this.updateTbState(opState, true);\n                this._startCursorPosition.setY(this.getCursorNDC(_center.x, _center.y, this.domElement).y * 0.5);\n                this._currentCursorPosition.copy(this._startCursorPosition);\n                if (this.enableGrid) {\n                  this.disposeGrid();\n                }\n                this.activateGizmos(false);\n              } else {\n                const screenNotches = 8;\n                this._currentCursorPosition.setY(this.getCursorNDC(_center.x, _center.y, this.domElement).y * 0.5);\n                const movement = this._currentCursorPosition.y - this._startCursorPosition.y;\n                let size = 1;\n                if (movement < 0) {\n                  size = 1 / Math.pow(this.scaleFactor, -movement * screenNotches);\n                } else if (movement > 0) {\n                  size = Math.pow(this.scaleFactor, movement * screenNotches);\n                }\n                this.applyTransformMatrix(this.applyScale(size, this._gizmos.position));\n              }\n            }\n            break;\n          case STATE.FOV:\n            if (this.enableZoom && this.camera instanceof PerspectiveCamera) {\n              if (restart) {\n                this.dispatchEvent(_endEvent);\n                this.dispatchEvent(_startEvent);\n                this.updateTbState(opState, true);\n                this._startCursorPosition.setY(this.getCursorNDC(_center.x, _center.y, this.domElement).y * 0.5);\n                this._currentCursorPosition.copy(this._startCursorPosition);\n                if (this.enableGrid) {\n                  this.disposeGrid();\n                }\n                this.activateGizmos(false);\n              } else {\n                const screenNotches = 8;\n                this._currentCursorPosition.setY(this.getCursorNDC(_center.x, _center.y, this.domElement).y * 0.5);\n                const movement = this._currentCursorPosition.y - this._startCursorPosition.y;\n                let size = 1;\n                if (movement < 0) {\n                  size = 1 / Math.pow(this.scaleFactor, -movement * screenNotches);\n                } else if (movement > 0) {\n                  size = Math.pow(this.scaleFactor, movement * screenNotches);\n                }\n                this._v3_1.setFromMatrixPosition(this._cameraMatrixState);\n                const x = this._v3_1.distanceTo(this._gizmos.position);\n                let xNew = x / size;\n                xNew = MathUtils.clamp(xNew, this.minDistance, this.maxDistance);\n                const y = x * Math.tan(MathUtils.DEG2RAD * this._fovState * 0.5);\n                let newFov = MathUtils.RAD2DEG * (Math.atan(y / xNew) * 2);\n                newFov = MathUtils.clamp(newFov, this.minFov, this.maxFov);\n                const newDistance = y / Math.tan(MathUtils.DEG2RAD * (newFov / 2));\n                size = x / newDistance;\n                this._v3_2.setFromMatrixPosition(this._gizmoMatrixState);\n                this.setFov(newFov);\n                this.applyTransformMatrix(this.applyScale(size, this._v3_2, false));\n                const direction = this._gizmos.position.clone().sub(this.camera.position).normalize().multiplyScalar(newDistance / x);\n                this._m4_1.makeTranslation(direction.x, direction.y, direction.z);\n              }\n            }\n            break;\n        }\n        this.dispatchEvent(_changeEvent);\n      }\n    });\n    __publicField(this, \"onSinglePanEnd\", () => {\n      if (this._state == STATE.ROTATE) {\n        if (!this.enableRotate) {\n          return;\n        }\n        if (this.enableAnimations) {\n          const deltaTime = performance.now() - this._timeCurrent;\n          if (deltaTime < 120) {\n            const w = Math.abs((this._wPrev + this._wCurr) / 2);\n            const self = this;\n            this._animationId = window.requestAnimationFrame(function(t) {\n              self.updateTbState(STATE.ANIMATION_ROTATE, true);\n              const rotationAxis = self.calculateRotationAxis(self._cursorPosPrev, self._cursorPosCurr);\n              self.onRotationAnim(t, rotationAxis, Math.min(w, self.wMax));\n            });\n          } else {\n            this.updateTbState(STATE.IDLE, false);\n            this.activateGizmos(false);\n            this.dispatchEvent(_changeEvent);\n          }\n        } else {\n          this.updateTbState(STATE.IDLE, false);\n          this.activateGizmos(false);\n          this.dispatchEvent(_changeEvent);\n        }\n      } else if (this._state == STATE.PAN || this._state == STATE.IDLE) {\n        this.updateTbState(STATE.IDLE, false);\n        if (this.enableGrid) {\n          this.disposeGrid();\n        }\n        this.activateGizmos(false);\n        this.dispatchEvent(_changeEvent);\n      }\n      this.dispatchEvent(_endEvent);\n    });\n    __publicField(this, \"onDoubleTap\", (event) => {\n      if (this.enabled && this.enablePan && this.scene && this.camera && this.domElement) {\n        this.dispatchEvent(_startEvent);\n        this.setCenter(event.clientX, event.clientY);\n        const hitP = this.unprojectOnObj(this.getCursorNDC(_center.x, _center.y, this.domElement), this.camera);\n        if (hitP && this.enableAnimations) {\n          const self = this;\n          if (this._animationId != -1) {\n            window.cancelAnimationFrame(this._animationId);\n          }\n          this._timeStart = -1;\n          this._animationId = window.requestAnimationFrame(function(t) {\n            self.updateTbState(STATE.ANIMATION_FOCUS, true);\n            self.onFocusAnim(t, hitP, self._cameraMatrixState, self._gizmoMatrixState);\n          });\n        } else if (hitP && !this.enableAnimations) {\n          this.updateTbState(STATE.FOCUS, true);\n          this.focus(hitP, this.scaleFactor);\n          this.updateTbState(STATE.IDLE, false);\n          this.dispatchEvent(_changeEvent);\n        }\n      }\n      this.dispatchEvent(_endEvent);\n    });\n    __publicField(this, \"onDoublePanStart\", () => {\n      if (this.enabled && this.enablePan && this.camera && this.domElement) {\n        this.dispatchEvent(_startEvent);\n        this.updateTbState(STATE.PAN, true);\n        this.setCenter(\n          (this._touchCurrent[0].clientX + this._touchCurrent[1].clientX) / 2,\n          (this._touchCurrent[0].clientY + this._touchCurrent[1].clientY) / 2\n        );\n        const rayDir = this.unprojectOnTbPlane(this.camera, _center.x, _center.y, this.domElement, true);\n        if (rayDir !== void 0) {\n          this._startCursorPosition.copy(rayDir);\n        }\n        this._currentCursorPosition.copy(this._startCursorPosition);\n        this.activateGizmos(false);\n      }\n    });\n    __publicField(this, \"onDoublePanMove\", () => {\n      if (this.enabled && this.enablePan && this.camera && this.domElement) {\n        this.setCenter(\n          (this._touchCurrent[0].clientX + this._touchCurrent[1].clientX) / 2,\n          (this._touchCurrent[0].clientY + this._touchCurrent[1].clientY) / 2\n        );\n        if (this._state != STATE.PAN) {\n          this.updateTbState(STATE.PAN, true);\n          this._startCursorPosition.copy(this._currentCursorPosition);\n        }\n        const rayDir = this.unprojectOnTbPlane(this.camera, _center.x, _center.y, this.domElement, true);\n        if (rayDir !== void 0)\n          this._currentCursorPosition.copy(rayDir);\n        this.applyTransformMatrix(this.pan(this._startCursorPosition, this._currentCursorPosition, true));\n        this.dispatchEvent(_changeEvent);\n      }\n    });\n    __publicField(this, \"onDoublePanEnd\", () => {\n      this.updateTbState(STATE.IDLE, false);\n      this.dispatchEvent(_endEvent);\n    });\n    __publicField(this, \"onRotateStart\", () => {\n      var _a;\n      if (this.enabled && this.enableRotate) {\n        this.dispatchEvent(_startEvent);\n        this.updateTbState(STATE.ZROTATE, true);\n        this._startFingerRotation = this.getAngle(this._touchCurrent[1], this._touchCurrent[0]) + this.getAngle(this._touchStart[1], this._touchStart[0]);\n        this._currentFingerRotation = this._startFingerRotation;\n        (_a = this.camera) == null ? void 0 : _a.getWorldDirection(this._rotationAxis);\n        if (!this.enablePan && !this.enableZoom) {\n          this.activateGizmos(true);\n        }\n      }\n    });\n    __publicField(this, \"onRotateMove\", () => {\n      var _a;\n      if (this.enabled && this.enableRotate && this.camera && this.domElement) {\n        this.setCenter(\n          (this._touchCurrent[0].clientX + this._touchCurrent[1].clientX) / 2,\n          (this._touchCurrent[0].clientY + this._touchCurrent[1].clientY) / 2\n        );\n        let rotationPoint;\n        if (this._state != STATE.ZROTATE) {\n          this.updateTbState(STATE.ZROTATE, true);\n          this._startFingerRotation = this._currentFingerRotation;\n        }\n        this._currentFingerRotation = this.getAngle(this._touchCurrent[1], this._touchCurrent[0]) + this.getAngle(this._touchStart[1], this._touchStart[0]);\n        if (!this.enablePan) {\n          rotationPoint = new Vector3().setFromMatrixPosition(this._gizmoMatrixState);\n        } else if (this.camera) {\n          this._v3_2.setFromMatrixPosition(this._gizmoMatrixState);\n          rotationPoint = (_a = this.unprojectOnTbPlane(this.camera, _center.x, _center.y, this.domElement)) == null ? void 0 : _a.applyQuaternion(this.camera.quaternion).multiplyScalar(1 / this.camera.zoom).add(this._v3_2);\n        }\n        const amount = MathUtils.DEG2RAD * (this._startFingerRotation - this._currentFingerRotation);\n        if (rotationPoint !== void 0) {\n          this.applyTransformMatrix(this.zRotate(rotationPoint, amount));\n        }\n        this.dispatchEvent(_changeEvent);\n      }\n    });\n    __publicField(this, \"onRotateEnd\", () => {\n      this.updateTbState(STATE.IDLE, false);\n      this.activateGizmos(false);\n      this.dispatchEvent(_endEvent);\n    });\n    __publicField(this, \"onPinchStart\", () => {\n      if (this.enabled && this.enableZoom) {\n        this.dispatchEvent(_startEvent);\n        this.updateTbState(STATE.SCALE, true);\n        this._startFingerDistance = this.calculatePointersDistance(this._touchCurrent[0], this._touchCurrent[1]);\n        this._currentFingerDistance = this._startFingerDistance;\n        this.activateGizmos(false);\n      }\n    });\n    __publicField(this, \"onPinchMove\", () => {\n      var _a, _b;\n      if (this.enabled && this.enableZoom && this.domElement) {\n        this.setCenter(\n          (this._touchCurrent[0].clientX + this._touchCurrent[1].clientX) / 2,\n          (this._touchCurrent[0].clientY + this._touchCurrent[1].clientY) / 2\n        );\n        const minDistance = 12;\n        if (this._state != STATE.SCALE) {\n          this._startFingerDistance = this._currentFingerDistance;\n          this.updateTbState(STATE.SCALE, true);\n        }\n        this._currentFingerDistance = Math.max(\n          this.calculatePointersDistance(this._touchCurrent[0], this._touchCurrent[1]),\n          minDistance * this._devPxRatio\n        );\n        const amount = this._currentFingerDistance / this._startFingerDistance;\n        let scalePoint;\n        if (!this.enablePan) {\n          scalePoint = this._gizmos.position;\n        } else {\n          if (this.camera instanceof OrthographicCamera) {\n            scalePoint = (_a = this.unprojectOnTbPlane(this.camera, _center.x, _center.y, this.domElement)) == null ? void 0 : _a.applyQuaternion(this.camera.quaternion).multiplyScalar(1 / this.camera.zoom).add(this._gizmos.position);\n          } else if (this.camera instanceof PerspectiveCamera) {\n            scalePoint = (_b = this.unprojectOnTbPlane(this.camera, _center.x, _center.y, this.domElement)) == null ? void 0 : _b.applyQuaternion(this.camera.quaternion).add(this._gizmos.position);\n          }\n        }\n        if (scalePoint !== void 0) {\n          this.applyTransformMatrix(this.applyScale(amount, scalePoint));\n        }\n        this.dispatchEvent(_changeEvent);\n      }\n    });\n    __publicField(this, \"onPinchEnd\", () => {\n      this.updateTbState(STATE.IDLE, false);\n      this.dispatchEvent(_endEvent);\n    });\n    __publicField(this, \"onTriplePanStart\", () => {\n      if (this.enabled && this.enableZoom && this.domElement) {\n        this.dispatchEvent(_startEvent);\n        this.updateTbState(STATE.SCALE, true);\n        let clientX = 0;\n        let clientY = 0;\n        const nFingers = this._touchCurrent.length;\n        for (let i = 0; i < nFingers; i++) {\n          clientX += this._touchCurrent[i].clientX;\n          clientY += this._touchCurrent[i].clientY;\n        }\n        this.setCenter(clientX / nFingers, clientY / nFingers);\n        this._startCursorPosition.setY(this.getCursorNDC(_center.x, _center.y, this.domElement).y * 0.5);\n        this._currentCursorPosition.copy(this._startCursorPosition);\n      }\n    });\n    __publicField(this, \"onTriplePanMove\", () => {\n      if (this.enabled && this.enableZoom && this.camera && this.domElement) {\n        let clientX = 0;\n        let clientY = 0;\n        const nFingers = this._touchCurrent.length;\n        for (let i = 0; i < nFingers; i++) {\n          clientX += this._touchCurrent[i].clientX;\n          clientY += this._touchCurrent[i].clientY;\n        }\n        this.setCenter(clientX / nFingers, clientY / nFingers);\n        const screenNotches = 8;\n        this._currentCursorPosition.setY(this.getCursorNDC(_center.x, _center.y, this.domElement).y * 0.5);\n        const movement = this._currentCursorPosition.y - this._startCursorPosition.y;\n        let size = 1;\n        if (movement < 0) {\n          size = 1 / Math.pow(this.scaleFactor, -movement * screenNotches);\n        } else if (movement > 0) {\n          size = Math.pow(this.scaleFactor, movement * screenNotches);\n        }\n        this._v3_1.setFromMatrixPosition(this._cameraMatrixState);\n        const x = this._v3_1.distanceTo(this._gizmos.position);\n        let xNew = x / size;\n        xNew = MathUtils.clamp(xNew, this.minDistance, this.maxDistance);\n        const y = x * Math.tan(MathUtils.DEG2RAD * this._fovState * 0.5);\n        let newFov = MathUtils.RAD2DEG * (Math.atan(y / xNew) * 2);\n        newFov = MathUtils.clamp(newFov, this.minFov, this.maxFov);\n        const newDistance = y / Math.tan(MathUtils.DEG2RAD * (newFov / 2));\n        size = x / newDistance;\n        this._v3_2.setFromMatrixPosition(this._gizmoMatrixState);\n        this.setFov(newFov);\n        this.applyTransformMatrix(this.applyScale(size, this._v3_2, false));\n        const direction = this._gizmos.position.clone().sub(this.camera.position).normalize().multiplyScalar(newDistance / x);\n        this._m4_1.makeTranslation(direction.x, direction.y, direction.z);\n        this.dispatchEvent(_changeEvent);\n      }\n    });\n    __publicField(this, \"onTriplePanEnd\", () => {\n      this.updateTbState(STATE.IDLE, false);\n      this.dispatchEvent(_endEvent);\n    });\n    /**\n     * Set _center's x/y coordinates\n     * @param {Number} clientX\n     * @param {Number} clientY\n     */\n    __publicField(this, \"setCenter\", (clientX, clientY) => {\n      _center.x = clientX;\n      _center.y = clientY;\n    });\n    /**\n     * Set default mouse actions\n     */\n    __publicField(this, \"initializeMouseActions\", () => {\n      this.setMouseAction(\"PAN\", 0, \"CTRL\");\n      this.setMouseAction(\"PAN\", 2);\n      this.setMouseAction(\"ROTATE\", 0);\n      this.setMouseAction(\"ZOOM\", \"WHEEL\");\n      this.setMouseAction(\"ZOOM\", 1);\n      this.setMouseAction(\"FOV\", \"WHEEL\", \"SHIFT\");\n      this.setMouseAction(\"FOV\", 1, \"SHIFT\");\n    });\n    /**\n     * Set a new mouse action by specifying the operation to be performed and a mouse/key combination. In case of conflict, replaces the existing one\n     * @param {String} operation The operation to be performed ('PAN', 'ROTATE', 'ZOOM', 'FOV)\n     * @param {*} mouse A mouse button (0, 1, 2) or 'WHEEL' for wheel notches\n     * @param {*} key The keyboard modifier ('CTRL', 'SHIFT') or null if key is not needed\n     * @returns {Boolean} True if the mouse action has been successfully added, false otherwise\n     */\n    __publicField(this, \"setMouseAction\", (operation, mouse, key = null) => {\n      const operationInput = [\"PAN\", \"ROTATE\", \"ZOOM\", \"FOV\"];\n      const mouseInput = [0, 1, 2, \"WHEEL\"];\n      const keyInput = [\"CTRL\", \"SHIFT\", null];\n      let state;\n      if (!operationInput.includes(operation) || !mouseInput.includes(mouse) || !keyInput.includes(key)) {\n        return false;\n      }\n      if (mouse == \"WHEEL\") {\n        if (operation != \"ZOOM\" && operation != \"FOV\") {\n          return false;\n        }\n      }\n      switch (operation) {\n        case \"PAN\":\n          state = STATE.PAN;\n          break;\n        case \"ROTATE\":\n          state = STATE.ROTATE;\n          break;\n        case \"ZOOM\":\n          state = STATE.SCALE;\n          break;\n        case \"FOV\":\n          state = STATE.FOV;\n          break;\n      }\n      const action = {\n        operation,\n        mouse,\n        key,\n        state\n      };\n      for (let i = 0; i < this.mouseActions.length; i++) {\n        if (this.mouseActions[i].mouse == action.mouse && this.mouseActions[i].key == action.key) {\n          this.mouseActions.splice(i, 1, action);\n          return true;\n        }\n      }\n      this.mouseActions.push(action);\n      return true;\n    });\n    /**\n     * Return the operation associated to a mouse/keyboard combination\n     * @param {*} mouse A mouse button (0, 1, 2) or 'WHEEL' for wheel notches\n     * @param {*} key The keyboard modifier ('CTRL', 'SHIFT') or null if key is not needed\n     * @returns The operation if it has been found, null otherwise\n     */\n    __publicField(this, \"getOpFromAction\", (mouse, key) => {\n      let action;\n      for (let i = 0; i < this.mouseActions.length; i++) {\n        action = this.mouseActions[i];\n        if (action.mouse == mouse && action.key == key) {\n          return action.operation;\n        }\n      }\n      if (key) {\n        for (let i = 0; i < this.mouseActions.length; i++) {\n          action = this.mouseActions[i];\n          if (action.mouse == mouse && action.key == null) {\n            return action.operation;\n          }\n        }\n      }\n      return null;\n    });\n    /**\n     * Get the operation associated to mouse and key combination and returns the corresponding FSA state\n     * @param {Number} mouse Mouse button\n     * @param {String} key Keyboard modifier\n     * @returns The FSA state obtained from the operation associated to mouse/keyboard combination\n     */\n    __publicField(this, \"getOpStateFromAction\", (mouse, key) => {\n      let action;\n      for (let i = 0; i < this.mouseActions.length; i++) {\n        action = this.mouseActions[i];\n        if (action.mouse == mouse && action.key == key) {\n          return action.state;\n        }\n      }\n      if (key) {\n        for (let i = 0; i < this.mouseActions.length; i++) {\n          action = this.mouseActions[i];\n          if (action.mouse == mouse && action.key == null) {\n            return action.state;\n          }\n        }\n      }\n      return null;\n    });\n    /**\n     * Calculate the angle between two pointers\n     * @param {PointerEvent} p1\n     * @param {PointerEvent} p2\n     * @returns {Number} The angle between two pointers in degrees\n     */\n    __publicField(this, \"getAngle\", (p1, p2) => {\n      return Math.atan2(p2.clientY - p1.clientY, p2.clientX - p1.clientX) * 180 / Math.PI;\n    });\n    /**\n     * Update a PointerEvent inside current pointerevents array\n     * @param {PointerEvent} event\n     */\n    __publicField(this, \"updateTouchEvent\", (event) => {\n      for (let i = 0; i < this._touchCurrent.length; i++) {\n        if (this._touchCurrent[i].pointerId == event.pointerId) {\n          this._touchCurrent.splice(i, 1, event);\n          break;\n        }\n      }\n    });\n    /**\n     * Calculate the angular speed\n     * @param {Number} p0 Position at t0\n     * @param {Number} p1 Position at t1\n     * @param {Number} t0 Initial time in milliseconds\n     * @param {Number} t1 Ending time in milliseconds\n     */\n    __publicField(this, \"calculateAngularSpeed\", (p0, p1, t0, t1) => {\n      const s = p1 - p0;\n      const t = (t1 - t0) / 1e3;\n      if (t == 0) {\n        return 0;\n      }\n      return s / t;\n    });\n    /**\n     * Calculate the distance between two pointers\n     * @param {PointerEvent} p0 The first pointer\n     * @param {PointerEvent} p1 The second pointer\n     * @returns {number} The distance between the two pointers\n     */\n    __publicField(this, \"calculatePointersDistance\", (p0, p1) => {\n      return Math.sqrt(Math.pow(p1.clientX - p0.clientX, 2) + Math.pow(p1.clientY - p0.clientY, 2));\n    });\n    /**\n     * Calculate the rotation axis as the vector perpendicular between two vectors\n     * @param {Vector3} vec1 The first vector\n     * @param {Vector3} vec2 The second vector\n     * @returns {Vector3} The normalized rotation axis\n     */\n    __publicField(this, \"calculateRotationAxis\", (vec1, vec2) => {\n      this._rotationMatrix.extractRotation(this._cameraMatrixState);\n      this._quat.setFromRotationMatrix(this._rotationMatrix);\n      this._rotationAxis.crossVectors(vec1, vec2).applyQuaternion(this._quat);\n      return this._rotationAxis.normalize().clone();\n    });\n    /**\n     * Calculate the trackball radius so that gizmo's diamater will be 2/3 of the minimum side of the camera frustum\n     * @param {Camera} camera\n     * @returns {Number} The trackball radius\n     */\n    __publicField(this, \"calculateTbRadius\", (camera) => {\n      const factor = 0.67;\n      const distance = camera.position.distanceTo(this._gizmos.position);\n      if (camera instanceof PerspectiveCamera) {\n        const halfFovV = MathUtils.DEG2RAD * camera.fov * 0.5;\n        const halfFovH = Math.atan(camera.aspect * Math.tan(halfFovV));\n        return Math.tan(Math.min(halfFovV, halfFovH)) * distance * factor;\n      } else if (camera instanceof OrthographicCamera) {\n        return Math.min(camera.top, camera.right) * factor;\n      }\n    });\n    /**\n     * Focus operation consist of positioning the point of interest in front of the camera and a slightly zoom in\n     * @param {Vector3} point The point of interest\n     * @param {Number} size Scale factor\n     * @param {Number} amount Amount of operation to be completed (used for focus animations, default is complete full operation)\n     */\n    __publicField(this, \"focus\", (point, size, amount = 1) => {\n      if (this.camera) {\n        const focusPoint = point.clone();\n        focusPoint.sub(this._gizmos.position).multiplyScalar(amount);\n        this._translationMatrix.makeTranslation(focusPoint.x, focusPoint.y, focusPoint.z);\n        const gizmoStateTemp = this._gizmoMatrixState.clone();\n        this._gizmoMatrixState.premultiply(this._translationMatrix);\n        this._gizmoMatrixState.decompose(this._gizmos.position, this._gizmos.quaternion, this._gizmos.scale);\n        const cameraStateTemp = this._cameraMatrixState.clone();\n        this._cameraMatrixState.premultiply(this._translationMatrix);\n        this._cameraMatrixState.decompose(this.camera.position, this.camera.quaternion, this.camera.scale);\n        if (this.enableZoom) {\n          this.applyTransformMatrix(this.applyScale(size, this._gizmos.position));\n        }\n        this._gizmoMatrixState.copy(gizmoStateTemp);\n        this._cameraMatrixState.copy(cameraStateTemp);\n      }\n    });\n    /**\n     * Draw a grid and add it to the scene\n     */\n    __publicField(this, \"drawGrid\", () => {\n      if (this.scene) {\n        const color = 8947848;\n        const multiplier = 3;\n        let size, divisions, maxLength, tick;\n        if (this.camera instanceof OrthographicCamera) {\n          const width = this.camera.right - this.camera.left;\n          const height = this.camera.bottom - this.camera.top;\n          maxLength = Math.max(width, height);\n          tick = maxLength / 20;\n          size = maxLength / this.camera.zoom * multiplier;\n          divisions = size / tick * this.camera.zoom;\n        } else if (this.camera instanceof PerspectiveCamera) {\n          const distance = this.camera.position.distanceTo(this._gizmos.position);\n          const halfFovV = MathUtils.DEG2RAD * this.camera.fov * 0.5;\n          const halfFovH = Math.atan(this.camera.aspect * Math.tan(halfFovV));\n          maxLength = Math.tan(Math.max(halfFovV, halfFovH)) * distance * 2;\n          tick = maxLength / 20;\n          size = maxLength * multiplier;\n          divisions = size / tick;\n        }\n        if (this._grid == null && this.camera) {\n          this._grid = new GridHelper(size, divisions, color, color);\n          this._grid.position.copy(this._gizmos.position);\n          this._gridPosition.copy(this._grid.position);\n          this._grid.quaternion.copy(this.camera.quaternion);\n          this._grid.rotateX(Math.PI * 0.5);\n          this.scene.add(this._grid);\n        }\n      }\n    });\n    __publicField(this, \"connect\", (domElement) => {\n      if (domElement === document) {\n        console.error(\n          'THREE.ArcballControls: \"document\" should not be used as the target \"domElement\". Please use \"renderer.domElement\" instead.'\n        );\n      }\n      this.domElement = domElement;\n      this.domElement.style.touchAction = \"none\";\n      this.domElement.addEventListener(\"contextmenu\", this.onContextMenu);\n      this.domElement.addEventListener(\"pointerdown\", this.onPointerDown);\n      this.domElement.addEventListener(\"pointercancel\", this.onPointerCancel);\n      this.domElement.addEventListener(\"wheel\", this.onWheel);\n    });\n    /**\n     * Remove all listeners, stop animations and clean scene\n     */\n    __publicField(this, \"dispose\", () => {\n      var _a, _b, _c, _d, _e;\n      if (this._animationId != -1) {\n        window.cancelAnimationFrame(this._animationId);\n      }\n      (_a = this.domElement) == null ? void 0 : _a.removeEventListener(\"pointerdown\", this.onPointerDown);\n      (_b = this.domElement) == null ? void 0 : _b.removeEventListener(\"pointercancel\", this.onPointerCancel);\n      (_c = this.domElement) == null ? void 0 : _c.removeEventListener(\"wheel\", this.onWheel);\n      (_d = this.domElement) == null ? void 0 : _d.removeEventListener(\"contextmenu\", this.onContextMenu);\n      window.removeEventListener(\"pointermove\", this.onPointerMove);\n      window.removeEventListener(\"pointerup\", this.onPointerUp);\n      window.removeEventListener(\"resize\", this.onWindowResize);\n      (_e = this.scene) == null ? void 0 : _e.remove(this._gizmos);\n      this.disposeGrid();\n    });\n    /**\n     * remove the grid from the scene\n     */\n    __publicField(this, \"disposeGrid\", () => {\n      if (this._grid && this.scene) {\n        this.scene.remove(this._grid);\n        this._grid = null;\n      }\n    });\n    /**\n     * Compute the easing out cubic function for ease out effect in animation\n     * @param {Number} t The absolute progress of the animation in the bound of 0 (beginning of the) and 1 (ending of animation)\n     * @returns {Number} Result of easing out cubic at time t\n     */\n    __publicField(this, \"easeOutCubic\", (t) => {\n      return 1 - Math.pow(1 - t, 3);\n    });\n    /**\n     * Make rotation gizmos more or less visible\n     * @param {Boolean} isActive If true, make gizmos more visible\n     */\n    __publicField(this, \"activateGizmos\", (isActive) => {\n      for (const gizmo of this._gizmos.children) {\n        ;\n        gizmo.material.setValues({ opacity: isActive ? 1 : 0.6 });\n      }\n    });\n    /**\n     * Calculate the cursor position in NDC\n     * @param {number} x Cursor horizontal coordinate within the canvas\n     * @param {number} y Cursor vertical coordinate within the canvas\n     * @param {HTMLElement} canvas The canvas where the renderer draws its output\n     * @returns {Vector2} Cursor normalized position inside the canvas\n     */\n    __publicField(this, \"getCursorNDC\", (cursorX, cursorY, canvas) => {\n      const canvasRect = canvas.getBoundingClientRect();\n      this._v2_1.setX((cursorX - canvasRect.left) / canvasRect.width * 2 - 1);\n      this._v2_1.setY((canvasRect.bottom - cursorY) / canvasRect.height * 2 - 1);\n      return this._v2_1.clone();\n    });\n    /**\n     * Calculate the cursor position inside the canvas x/y coordinates with the origin being in the center of the canvas\n     * @param {Number} x Cursor horizontal coordinate within the canvas\n     * @param {Number} y Cursor vertical coordinate within the canvas\n     * @param {HTMLElement} canvas The canvas where the renderer draws its output\n     * @returns {Vector2} Cursor position inside the canvas\n     */\n    __publicField(this, \"getCursorPosition\", (cursorX, cursorY, canvas) => {\n      this._v2_1.copy(this.getCursorNDC(cursorX, cursorY, canvas));\n      if (this.camera instanceof OrthographicCamera) {\n        this._v2_1.x *= (this.camera.right - this.camera.left) * 0.5;\n        this._v2_1.y *= (this.camera.top - this.camera.bottom) * 0.5;\n      }\n      return this._v2_1.clone();\n    });\n    /**\n     * Set the camera to be controlled\n     * @param {Camera} camera The virtual camera to be controlled\n     */\n    __publicField(this, \"setCamera\", (camera) => {\n      if (camera) {\n        camera.lookAt(this.target);\n        camera.updateMatrix();\n        if (camera instanceof PerspectiveCamera) {\n          this._fov0 = camera.fov;\n          this._fovState = camera.fov;\n        }\n        this._cameraMatrixState0.copy(camera.matrix);\n        this._cameraMatrixState.copy(this._cameraMatrixState0);\n        this._cameraProjectionState.copy(camera.projectionMatrix);\n        this._zoom0 = camera.zoom;\n        this._zoomState = this._zoom0;\n        this._initialNear = camera.near;\n        this._nearPos0 = camera.position.distanceTo(this.target) - camera.near;\n        this._nearPos = this._initialNear;\n        this._initialFar = camera.far;\n        this._farPos0 = camera.position.distanceTo(this.target) - camera.far;\n        this._farPos = this._initialFar;\n        this._up0.copy(camera.up);\n        this._upState.copy(camera.up);\n        this.camera = camera;\n        this.camera.updateProjectionMatrix();\n        const tbRadius = this.calculateTbRadius(camera);\n        if (tbRadius !== void 0) {\n          this._tbRadius = tbRadius;\n        }\n        this.makeGizmos(this.target, this._tbRadius);\n      }\n    });\n    /**\n     * Creates the rotation gizmos matching trackball center and radius\n     * @param {Vector3} tbCenter The trackball center\n     * @param {number} tbRadius The trackball radius\n     */\n    __publicField(this, \"makeGizmos\", (tbCenter, tbRadius) => {\n      const curve = new EllipseCurve(0, 0, tbRadius, tbRadius);\n      const points = curve.getPoints(this._curvePts);\n      const curveGeometry = new BufferGeometry().setFromPoints(points);\n      const curveMaterialX = new LineBasicMaterial({ color: 16744576, fog: false, transparent: true, opacity: 0.6 });\n      const curveMaterialY = new LineBasicMaterial({ color: 8454016, fog: false, transparent: true, opacity: 0.6 });\n      const curveMaterialZ = new LineBasicMaterial({ color: 8421631, fog: false, transparent: true, opacity: 0.6 });\n      const gizmoX = new Line(curveGeometry, curveMaterialX);\n      const gizmoY = new Line(curveGeometry, curveMaterialY);\n      const gizmoZ = new Line(curveGeometry, curveMaterialZ);\n      const rotation = Math.PI * 0.5;\n      gizmoX.rotation.x = rotation;\n      gizmoY.rotation.y = rotation;\n      this._gizmoMatrixState0.identity().setPosition(tbCenter);\n      this._gizmoMatrixState.copy(this._gizmoMatrixState0);\n      if (this.camera && this.camera.zoom != 1) {\n        const size = 1 / this.camera.zoom;\n        this._scaleMatrix.makeScale(size, size, size);\n        this._translationMatrix.makeTranslation(-tbCenter.x, -tbCenter.y, -tbCenter.z);\n        this._gizmoMatrixState.premultiply(this._translationMatrix).premultiply(this._scaleMatrix);\n        this._translationMatrix.makeTranslation(tbCenter.x, tbCenter.y, tbCenter.z);\n        this._gizmoMatrixState.premultiply(this._translationMatrix);\n      }\n      this._gizmoMatrixState.decompose(this._gizmos.position, this._gizmos.quaternion, this._gizmos.scale);\n      this._gizmos.clear();\n      this._gizmos.add(gizmoX);\n      this._gizmos.add(gizmoY);\n      this._gizmos.add(gizmoZ);\n    });\n    /**\n     * Perform animation for focus operation\n     * @param {Number} time Instant in which this function is called as performance.now()\n     * @param {Vector3} point Point of interest for focus operation\n     * @param {Matrix4} cameraMatrix Camera matrix\n     * @param {Matrix4} gizmoMatrix Gizmos matrix\n     */\n    __publicField(this, \"onFocusAnim\", (time, point, cameraMatrix, gizmoMatrix) => {\n      if (this._timeStart == -1) {\n        this._timeStart = time;\n      }\n      if (this._state == STATE.ANIMATION_FOCUS) {\n        const deltaTime = time - this._timeStart;\n        const animTime = deltaTime / this.focusAnimationTime;\n        this._gizmoMatrixState.copy(gizmoMatrix);\n        if (animTime >= 1) {\n          this._gizmoMatrixState.decompose(this._gizmos.position, this._gizmos.quaternion, this._gizmos.scale);\n          this.focus(point, this.scaleFactor);\n          this._timeStart = -1;\n          this.updateTbState(STATE.IDLE, false);\n          this.activateGizmos(false);\n          this.dispatchEvent(_changeEvent);\n        } else {\n          const amount = this.easeOutCubic(animTime);\n          const size = 1 - amount + this.scaleFactor * amount;\n          this._gizmoMatrixState.decompose(this._gizmos.position, this._gizmos.quaternion, this._gizmos.scale);\n          this.focus(point, size, amount);\n          this.dispatchEvent(_changeEvent);\n          const self = this;\n          this._animationId = window.requestAnimationFrame(function(t) {\n            self.onFocusAnim(t, point, cameraMatrix, gizmoMatrix.clone());\n          });\n        }\n      } else {\n        this._animationId = -1;\n        this._timeStart = -1;\n      }\n    });\n    /**\n     * Perform animation for rotation operation\n     * @param {Number} time Instant in which this function is called as performance.now()\n     * @param {Vector3} rotationAxis Rotation axis\n     * @param {number} w0 Initial angular velocity\n     */\n    __publicField(this, \"onRotationAnim\", (time, rotationAxis, w0) => {\n      if (this._timeStart == -1) {\n        this._anglePrev = 0;\n        this._angleCurrent = 0;\n        this._timeStart = time;\n      }\n      if (this._state == STATE.ANIMATION_ROTATE) {\n        const deltaTime = (time - this._timeStart) / 1e3;\n        const w = w0 + -this.dampingFactor * deltaTime;\n        if (w > 0) {\n          this._angleCurrent = 0.5 * -this.dampingFactor * Math.pow(deltaTime, 2) + w0 * deltaTime + 0;\n          this.applyTransformMatrix(this.rotate(rotationAxis, this._angleCurrent));\n          this.dispatchEvent(_changeEvent);\n          const self = this;\n          this._animationId = window.requestAnimationFrame(function(t) {\n            self.onRotationAnim(t, rotationAxis, w0);\n          });\n        } else {\n          this._animationId = -1;\n          this._timeStart = -1;\n          this.updateTbState(STATE.IDLE, false);\n          this.activateGizmos(false);\n          this.dispatchEvent(_changeEvent);\n        }\n      } else {\n        this._animationId = -1;\n        this._timeStart = -1;\n        if (this._state != STATE.ROTATE) {\n          this.activateGizmos(false);\n          this.dispatchEvent(_changeEvent);\n        }\n      }\n    });\n    /**\n     * Perform pan operation moving camera between two points\n     * @param {Vector3} p0 Initial point\n     * @param {Vector3} p1 Ending point\n     * @param {Boolean} adjust If movement should be adjusted considering camera distance (Perspective only)\n     */\n    __publicField(this, \"pan\", (p0, p1, adjust = false) => {\n      if (this.camera) {\n        const movement = p0.clone().sub(p1);\n        if (this.camera instanceof OrthographicCamera) {\n          movement.multiplyScalar(1 / this.camera.zoom);\n        }\n        if (this.camera instanceof PerspectiveCamera && adjust) {\n          this._v3_1.setFromMatrixPosition(this._cameraMatrixState0);\n          this._v3_2.setFromMatrixPosition(this._gizmoMatrixState0);\n          const distanceFactor = this._v3_1.distanceTo(this._v3_2) / this.camera.position.distanceTo(this._gizmos.position);\n          movement.multiplyScalar(1 / distanceFactor);\n        }\n        this._v3_1.set(movement.x, movement.y, 0).applyQuaternion(this.camera.quaternion);\n        this._m4_1.makeTranslation(this._v3_1.x, this._v3_1.y, this._v3_1.z);\n        this.setTransformationMatrices(this._m4_1, this._m4_1);\n      }\n      return _transformation;\n    });\n    /**\n     * Reset trackball\n     */\n    __publicField(this, \"reset\", () => {\n      if (this.camera) {\n        this.camera.zoom = this._zoom0;\n        if (this.camera instanceof PerspectiveCamera) {\n          this.camera.fov = this._fov0;\n        }\n        this.camera.near = this._nearPos;\n        this.camera.far = this._farPos;\n        this._cameraMatrixState.copy(this._cameraMatrixState0);\n        this._cameraMatrixState.decompose(this.camera.position, this.camera.quaternion, this.camera.scale);\n        this.camera.up.copy(this._up0);\n        this.camera.updateMatrix();\n        this.camera.updateProjectionMatrix();\n        this._gizmoMatrixState.copy(this._gizmoMatrixState0);\n        this._gizmoMatrixState0.decompose(this._gizmos.position, this._gizmos.quaternion, this._gizmos.scale);\n        this._gizmos.updateMatrix();\n        const tbRadius = this.calculateTbRadius(this.camera);\n        if (tbRadius !== void 0) {\n          this._tbRadius = tbRadius;\n        }\n        this.makeGizmos(this._gizmos.position, this._tbRadius);\n        this.camera.lookAt(this._gizmos.position);\n        this.updateTbState(STATE.IDLE, false);\n        this.dispatchEvent(_changeEvent);\n      }\n    });\n    /**\n     * Rotate the camera around an axis passing by trackball's center\n     * @param {Vector3} axis Rotation axis\n     * @param {number} angle Angle in radians\n     * @returns {Object} Object with 'camera' field containing transformation matrix resulting from the operation to be applied to the camera\n     */\n    __publicField(this, \"rotate\", (axis, angle) => {\n      const point = this._gizmos.position;\n      this._translationMatrix.makeTranslation(-point.x, -point.y, -point.z);\n      this._rotationMatrix.makeRotationAxis(axis, -angle);\n      this._m4_1.makeTranslation(point.x, point.y, point.z);\n      this._m4_1.multiply(this._rotationMatrix);\n      this._m4_1.multiply(this._translationMatrix);\n      this.setTransformationMatrices(this._m4_1);\n      return _transformation;\n    });\n    __publicField(this, \"copyState\", () => {\n      if (this.camera) {\n        const state = JSON.stringify(\n          this.camera instanceof OrthographicCamera ? {\n            arcballState: {\n              cameraFar: this.camera.far,\n              cameraMatrix: this.camera.matrix,\n              cameraNear: this.camera.near,\n              cameraUp: this.camera.up,\n              cameraZoom: this.camera.zoom,\n              gizmoMatrix: this._gizmos.matrix\n            }\n          } : {\n            arcballState: {\n              cameraFar: this.camera.far,\n              cameraFov: this.camera.fov,\n              cameraMatrix: this.camera.matrix,\n              cameraNear: this.camera.near,\n              cameraUp: this.camera.up,\n              cameraZoom: this.camera.zoom,\n              gizmoMatrix: this._gizmos.matrix\n            }\n          }\n        );\n        navigator.clipboard.writeText(state);\n      }\n    });\n    __publicField(this, \"pasteState\", () => {\n      const self = this;\n      navigator.clipboard.readText().then(function resolved(value) {\n        self.setStateFromJSON(value);\n      });\n    });\n    /**\n     * Save the current state of the control. This can later be recovered with .reset\n     */\n    __publicField(this, \"saveState\", () => {\n      if (!this.camera)\n        return;\n      this._cameraMatrixState0.copy(this.camera.matrix);\n      this._gizmoMatrixState0.copy(this._gizmos.matrix);\n      this._nearPos = this.camera.near;\n      this._farPos = this.camera.far;\n      this._zoom0 = this.camera.zoom;\n      this._up0.copy(this.camera.up);\n      if (this.camera instanceof PerspectiveCamera) {\n        this._fov0 = this.camera.fov;\n      }\n    });\n    /**\n     * Perform uniform scale operation around a given point\n     * @param {Number} size Scale factor\n     * @param {Vector3} point Point around which scale\n     * @param {Boolean} scaleGizmos If gizmos should be scaled (Perspective only)\n     * @returns {Object} Object with 'camera' and 'gizmo' fields containing transformation matrices resulting from the operation to be applied to the camera and gizmos\n     */\n    __publicField(this, \"applyScale\", (size, point, scaleGizmos = true) => {\n      if (!this.camera)\n        return;\n      const scalePoint = point.clone();\n      let sizeInverse = 1 / size;\n      if (this.camera instanceof OrthographicCamera) {\n        this.camera.zoom = this._zoomState;\n        this.camera.zoom *= size;\n        if (this.camera.zoom > this.maxZoom) {\n          this.camera.zoom = this.maxZoom;\n          sizeInverse = this._zoomState / this.maxZoom;\n        } else if (this.camera.zoom < this.minZoom) {\n          this.camera.zoom = this.minZoom;\n          sizeInverse = this._zoomState / this.minZoom;\n        }\n        this.camera.updateProjectionMatrix();\n        this._v3_1.setFromMatrixPosition(this._gizmoMatrixState);\n        this._scaleMatrix.makeScale(sizeInverse, sizeInverse, sizeInverse);\n        this._translationMatrix.makeTranslation(-this._v3_1.x, -this._v3_1.y, -this._v3_1.z);\n        this._m4_2.makeTranslation(this._v3_1.x, this._v3_1.y, this._v3_1.z).multiply(this._scaleMatrix);\n        this._m4_2.multiply(this._translationMatrix);\n        scalePoint.sub(this._v3_1);\n        const amount = scalePoint.clone().multiplyScalar(sizeInverse);\n        scalePoint.sub(amount);\n        this._m4_1.makeTranslation(scalePoint.x, scalePoint.y, scalePoint.z);\n        this._m4_2.premultiply(this._m4_1);\n        this.setTransformationMatrices(this._m4_1, this._m4_2);\n        return _transformation;\n      }\n      if (this.camera instanceof PerspectiveCamera) {\n        this._v3_1.setFromMatrixPosition(this._cameraMatrixState);\n        this._v3_2.setFromMatrixPosition(this._gizmoMatrixState);\n        let distance = this._v3_1.distanceTo(scalePoint);\n        let amount = distance - distance * sizeInverse;\n        const newDistance = distance - amount;\n        if (newDistance < this.minDistance) {\n          sizeInverse = this.minDistance / distance;\n          amount = distance - distance * sizeInverse;\n        } else if (newDistance > this.maxDistance) {\n          sizeInverse = this.maxDistance / distance;\n          amount = distance - distance * sizeInverse;\n        }\n        let direction = scalePoint.clone().sub(this._v3_1).normalize().multiplyScalar(amount);\n        this._m4_1.makeTranslation(direction.x, direction.y, direction.z);\n        if (scaleGizmos) {\n          const pos = this._v3_2;\n          distance = pos.distanceTo(scalePoint);\n          amount = distance - distance * sizeInverse;\n          direction = scalePoint.clone().sub(this._v3_2).normalize().multiplyScalar(amount);\n          this._translationMatrix.makeTranslation(pos.x, pos.y, pos.z);\n          this._scaleMatrix.makeScale(sizeInverse, sizeInverse, sizeInverse);\n          this._m4_2.makeTranslation(direction.x, direction.y, direction.z).multiply(this._translationMatrix);\n          this._m4_2.multiply(this._scaleMatrix);\n          this._translationMatrix.makeTranslation(-pos.x, -pos.y, -pos.z);\n          this._m4_2.multiply(this._translationMatrix);\n          this.setTransformationMatrices(this._m4_1, this._m4_2);\n        } else {\n          this.setTransformationMatrices(this._m4_1);\n        }\n        return _transformation;\n      }\n    });\n    /**\n     * Set camera fov\n     * @param {Number} value fov to be setted\n     */\n    __publicField(this, \"setFov\", (value) => {\n      if (this.camera instanceof PerspectiveCamera) {\n        this.camera.fov = MathUtils.clamp(value, this.minFov, this.maxFov);\n        this.camera.updateProjectionMatrix();\n      }\n    });\n    /**\n     * Set the trackball's center point\n     * @param {Number} x X coordinate\n     * @param {Number} y Y coordinate\n     * @param {Number} z Z coordinate\n     */\n    __publicField(this, \"setTarget\", (x, y, z) => {\n      if (this.camera) {\n        this.target.set(x, y, z);\n        this._gizmos.position.set(x, y, z);\n        const tbRadius = this.calculateTbRadius(this.camera);\n        if (tbRadius !== void 0) {\n          this._tbRadius = tbRadius;\n        }\n        this.makeGizmos(this.target, this._tbRadius);\n        this.camera.lookAt(this.target);\n      }\n    });\n    /**\n     * Rotate camera around its direction axis passing by a given point by a given angle\n     * @param {Vector3} point The point where the rotation axis is passing trough\n     * @param {Number} angle Angle in radians\n     * @returns The computed transormation matix\n     */\n    __publicField(this, \"zRotate\", (point, angle) => {\n      this._rotationMatrix.makeRotationAxis(this._rotationAxis, angle);\n      this._translationMatrix.makeTranslation(-point.x, -point.y, -point.z);\n      this._m4_1.makeTranslation(point.x, point.y, point.z);\n      this._m4_1.multiply(this._rotationMatrix);\n      this._m4_1.multiply(this._translationMatrix);\n      this._v3_1.setFromMatrixPosition(this._gizmoMatrixState).sub(point);\n      this._v3_2.copy(this._v3_1).applyAxisAngle(this._rotationAxis, angle);\n      this._v3_2.sub(this._v3_1);\n      this._m4_2.makeTranslation(this._v3_2.x, this._v3_2.y, this._v3_2.z);\n      this.setTransformationMatrices(this._m4_1, this._m4_2);\n      return _transformation;\n    });\n    /**\n     * Unproject the cursor on the 3D object surface\n     * @param {Vector2} cursor Cursor coordinates in NDC\n     * @param {Camera} camera Virtual camera\n     * @returns {Vector3} The point of intersection with the model, if exist, null otherwise\n     */\n    __publicField(this, \"unprojectOnObj\", (cursor, camera) => {\n      if (!this.scene)\n        return null;\n      const raycaster = new Raycaster();\n      raycaster.near = camera.near;\n      raycaster.far = camera.far;\n      raycaster.setFromCamera(cursor, camera);\n      const intersect = raycaster.intersectObjects(this.scene.children, true);\n      for (let i = 0; i < intersect.length; i++) {\n        if (intersect[i].object.uuid != this._gizmos.uuid && intersect[i].face) {\n          return intersect[i].point.clone();\n        }\n      }\n      return null;\n    });\n    /**\n     * Unproject the cursor on the trackball surface\n     * @param {Camera} camera The virtual camera\n     * @param {Number} cursorX Cursor horizontal coordinate on screen\n     * @param {Number} cursorY Cursor vertical coordinate on screen\n     * @param {HTMLElement} canvas The canvas where the renderer draws its output\n     * @param {number} tbRadius The trackball radius\n     * @returns {Vector3} The unprojected point on the trackball surface\n     */\n    __publicField(this, \"unprojectOnTbSurface\", (camera, cursorX, cursorY, canvas, tbRadius) => {\n      if (camera instanceof OrthographicCamera) {\n        this._v2_1.copy(this.getCursorPosition(cursorX, cursorY, canvas));\n        this._v3_1.set(this._v2_1.x, this._v2_1.y, 0);\n        const x2 = Math.pow(this._v2_1.x, 2);\n        const y2 = Math.pow(this._v2_1.y, 2);\n        const r2 = Math.pow(this._tbRadius, 2);\n        if (x2 + y2 <= r2 * 0.5) {\n          this._v3_1.setZ(Math.sqrt(r2 - (x2 + y2)));\n        } else {\n          this._v3_1.setZ(r2 * 0.5 / Math.sqrt(x2 + y2));\n        }\n        return this._v3_1;\n      }\n      if (camera instanceof PerspectiveCamera) {\n        this._v2_1.copy(this.getCursorNDC(cursorX, cursorY, canvas));\n        this._v3_1.set(this._v2_1.x, this._v2_1.y, -1);\n        this._v3_1.applyMatrix4(camera.projectionMatrixInverse);\n        const rayDir = this._v3_1.clone().normalize();\n        const cameraGizmoDistance = camera.position.distanceTo(this._gizmos.position);\n        const radius2 = Math.pow(tbRadius, 2);\n        const h = this._v3_1.z;\n        const l = Math.sqrt(Math.pow(this._v3_1.x, 2) + Math.pow(this._v3_1.y, 2));\n        if (l == 0) {\n          rayDir.set(this._v3_1.x, this._v3_1.y, tbRadius);\n          return rayDir;\n        }\n        const m = h / l;\n        const q = cameraGizmoDistance;\n        let a = Math.pow(m, 2) + 1;\n        let b = 2 * m * q;\n        let c = Math.pow(q, 2) - radius2;\n        let delta = Math.pow(b, 2) - 4 * a * c;\n        if (delta >= 0) {\n          this._v2_1.setX((-b - Math.sqrt(delta)) / (2 * a));\n          this._v2_1.setY(m * this._v2_1.x + q);\n          const angle = MathUtils.RAD2DEG * this._v2_1.angle();\n          if (angle >= 45) {\n            const rayLength2 = Math.sqrt(Math.pow(this._v2_1.x, 2) + Math.pow(cameraGizmoDistance - this._v2_1.y, 2));\n            rayDir.multiplyScalar(rayLength2);\n            rayDir.z += cameraGizmoDistance;\n            return rayDir;\n          }\n        }\n        a = m;\n        b = q;\n        c = -radius2 * 0.5;\n        delta = Math.pow(b, 2) - 4 * a * c;\n        this._v2_1.setX((-b - Math.sqrt(delta)) / (2 * a));\n        this._v2_1.setY(m * this._v2_1.x + q);\n        const rayLength = Math.sqrt(Math.pow(this._v2_1.x, 2) + Math.pow(cameraGizmoDistance - this._v2_1.y, 2));\n        rayDir.multiplyScalar(rayLength);\n        rayDir.z += cameraGizmoDistance;\n        return rayDir;\n      }\n    });\n    /**\n     * Unproject the cursor on the plane passing through the center of the trackball orthogonal to the camera\n     * @param {Camera} camera The virtual camera\n     * @param {Number} cursorX Cursor horizontal coordinate on screen\n     * @param {Number} cursorY Cursor vertical coordinate on screen\n     * @param {HTMLElement} canvas The canvas where the renderer draws its output\n     * @param {Boolean} initialDistance If initial distance between camera and gizmos should be used for calculations instead of current (Perspective only)\n     * @returns {Vector3} The unprojected point on the trackball plane\n     */\n    __publicField(this, \"unprojectOnTbPlane\", (camera, cursorX, cursorY, canvas, initialDistance = false) => {\n      if (camera instanceof OrthographicCamera) {\n        this._v2_1.copy(this.getCursorPosition(cursorX, cursorY, canvas));\n        this._v3_1.set(this._v2_1.x, this._v2_1.y, 0);\n        return this._v3_1.clone();\n      }\n      if (camera instanceof PerspectiveCamera) {\n        this._v2_1.copy(this.getCursorNDC(cursorX, cursorY, canvas));\n        this._v3_1.set(this._v2_1.x, this._v2_1.y, -1);\n        this._v3_1.applyMatrix4(camera.projectionMatrixInverse);\n        const rayDir = this._v3_1.clone().normalize();\n        const h = this._v3_1.z;\n        const l = Math.sqrt(Math.pow(this._v3_1.x, 2) + Math.pow(this._v3_1.y, 2));\n        let cameraGizmoDistance;\n        if (initialDistance) {\n          cameraGizmoDistance = this._v3_1.setFromMatrixPosition(this._cameraMatrixState0).distanceTo(this._v3_2.setFromMatrixPosition(this._gizmoMatrixState0));\n        } else {\n          cameraGizmoDistance = camera.position.distanceTo(this._gizmos.position);\n        }\n        if (l == 0) {\n          rayDir.set(0, 0, 0);\n          return rayDir;\n        }\n        const m = h / l;\n        const q = cameraGizmoDistance;\n        const x = -q / m;\n        const rayLength = Math.sqrt(Math.pow(q, 2) + Math.pow(x, 2));\n        rayDir.multiplyScalar(rayLength);\n        rayDir.z = 0;\n        return rayDir;\n      }\n    });\n    /**\n     * Update camera and gizmos state\n     */\n    __publicField(this, \"updateMatrixState\", () => {\n      if (!this.camera)\n        return;\n      this._cameraMatrixState.copy(this.camera.matrix);\n      this._gizmoMatrixState.copy(this._gizmos.matrix);\n      if (this.camera instanceof OrthographicCamera) {\n        this._cameraProjectionState.copy(this.camera.projectionMatrix);\n        this.camera.updateProjectionMatrix();\n        this._zoomState = this.camera.zoom;\n      }\n      if (this.camera instanceof PerspectiveCamera) {\n        this._fovState = this.camera.fov;\n      }\n    });\n    /**\n     * Update the trackball FSA\n     * @param {STATE} newState New state of the FSA\n     * @param {Boolean} updateMatrices If matriices state should be updated\n     */\n    __publicField(this, \"updateTbState\", (newState, updateMatrices) => {\n      this._state = newState;\n      if (updateMatrices) {\n        this.updateMatrixState();\n      }\n    });\n    __publicField(this, \"update\", () => {\n      const EPS = 1e-6;\n      if (!this.target.equals(this._currentTarget) && this.camera) {\n        this._gizmos.position.set(this.target.x, this.target.y, this.target.z);\n        const tbRadius = this.calculateTbRadius(this.camera);\n        if (tbRadius !== void 0) {\n          this._tbRadius = tbRadius;\n        }\n        this.makeGizmos(this.target, this._tbRadius);\n        this._currentTarget.copy(this.target);\n      }\n      if (!this.camera)\n        return;\n      if (this.camera instanceof OrthographicCamera) {\n        if (this.camera.zoom > this.maxZoom || this.camera.zoom < this.minZoom) {\n          const newZoom = MathUtils.clamp(this.camera.zoom, this.minZoom, this.maxZoom);\n          this.applyTransformMatrix(this.applyScale(newZoom / this.camera.zoom, this._gizmos.position, true));\n        }\n      }\n      if (this.camera instanceof PerspectiveCamera) {\n        const distance = this.camera.position.distanceTo(this._gizmos.position);\n        if (distance > this.maxDistance + EPS || distance < this.minDistance - EPS) {\n          const newDistance = MathUtils.clamp(distance, this.minDistance, this.maxDistance);\n          this.applyTransformMatrix(this.applyScale(newDistance / distance, this._gizmos.position));\n          this.updateMatrixState();\n        }\n        if (this.camera.fov < this.minFov || this.camera.fov > this.maxFov) {\n          this.camera.fov = MathUtils.clamp(this.camera.fov, this.minFov, this.maxFov);\n          this.camera.updateProjectionMatrix();\n        }\n        const oldRadius = this._tbRadius;\n        const tbRadius = this.calculateTbRadius(this.camera);\n        if (tbRadius !== void 0) {\n          this._tbRadius = tbRadius;\n        }\n        if (oldRadius < this._tbRadius - EPS || oldRadius > this._tbRadius + EPS) {\n          const scale = (this._gizmos.scale.x + this._gizmos.scale.y + this._gizmos.scale.z) / 3;\n          const newRadius = this._tbRadius / scale;\n          const curve = new EllipseCurve(0, 0, newRadius, newRadius);\n          const points = curve.getPoints(this._curvePts);\n          const curveGeometry = new BufferGeometry().setFromPoints(points);\n          for (const gizmo in this._gizmos.children) {\n            const child = this._gizmos.children[gizmo];\n            child.geometry = curveGeometry;\n          }\n        }\n      }\n      this.camera.lookAt(this._gizmos.position);\n    });\n    __publicField(this, \"setStateFromJSON\", (json) => {\n      const state = JSON.parse(json);\n      if (state.arcballState && this.camera) {\n        this._cameraMatrixState.fromArray(state.arcballState.cameraMatrix.elements);\n        this._cameraMatrixState.decompose(this.camera.position, this.camera.quaternion, this.camera.scale);\n        this.camera.up.copy(state.arcballState.cameraUp);\n        this.camera.near = state.arcballState.cameraNear;\n        this.camera.far = state.arcballState.cameraFar;\n        this.camera.zoom = state.arcballState.cameraZoom;\n        if (this.camera instanceof PerspectiveCamera) {\n          this.camera.fov = state.arcballState.cameraFov;\n        }\n        this._gizmoMatrixState.fromArray(state.arcballState.gizmoMatrix.elements);\n        this._gizmoMatrixState.decompose(this._gizmos.position, this._gizmos.quaternion, this._gizmos.scale);\n        this.camera.updateMatrix();\n        this.camera.updateProjectionMatrix();\n        this._gizmos.updateMatrix();\n        const tbRadius = this.calculateTbRadius(this.camera);\n        if (tbRadius !== void 0) {\n          this._tbRadius = tbRadius;\n        }\n        const gizmoTmp = new Matrix4().copy(this._gizmoMatrixState0);\n        this.makeGizmos(this._gizmos.position, this._tbRadius);\n        this._gizmoMatrixState0.copy(gizmoTmp);\n        this.camera.lookAt(this._gizmos.position);\n        this.updateTbState(STATE.IDLE, false);\n        this.dispatchEvent(_changeEvent);\n      }\n    });\n    this.camera = null;\n    this.domElement = domElement;\n    this.scene = scene;\n    this.mouseActions = [];\n    this._mouseOp = null;\n    this._v2_1 = new Vector2();\n    this._v3_1 = new Vector3();\n    this._v3_2 = new Vector3();\n    this._m4_1 = new Matrix4();\n    this._m4_2 = new Matrix4();\n    this._quat = new Quaternion();\n    this._translationMatrix = new Matrix4();\n    this._rotationMatrix = new Matrix4();\n    this._scaleMatrix = new Matrix4();\n    this._rotationAxis = new Vector3();\n    this._cameraMatrixState = new Matrix4();\n    this._cameraProjectionState = new Matrix4();\n    this._fovState = 1;\n    this._upState = new Vector3();\n    this._zoomState = 1;\n    this._nearPos = 0;\n    this._farPos = 0;\n    this._gizmoMatrixState = new Matrix4();\n    this._up0 = new Vector3();\n    this._zoom0 = 1;\n    this._fov0 = 0;\n    this._initialNear = 0;\n    this._nearPos0 = 0;\n    this._initialFar = 0;\n    this._farPos0 = 0;\n    this._cameraMatrixState0 = new Matrix4();\n    this._gizmoMatrixState0 = new Matrix4();\n    this._button = -1;\n    this._touchStart = [];\n    this._touchCurrent = [];\n    this._input = INPUT.NONE;\n    this._switchSensibility = 32;\n    this._startFingerDistance = 0;\n    this._currentFingerDistance = 0;\n    this._startFingerRotation = 0;\n    this._currentFingerRotation = 0;\n    this._devPxRatio = 0;\n    this._downValid = true;\n    this._nclicks = 0;\n    this._downEvents = [];\n    this._clickStart = 0;\n    this._maxDownTime = 250;\n    this._maxInterval = 300;\n    this._posThreshold = 24;\n    this._movementThreshold = 24;\n    this._currentCursorPosition = new Vector3();\n    this._startCursorPosition = new Vector3();\n    this._grid = null;\n    this._gridPosition = new Vector3();\n    this._gizmos = new Group();\n    this._curvePts = 128;\n    this._timeStart = -1;\n    this._animationId = -1;\n    this.focusAnimationTime = 500;\n    this._timePrev = 0;\n    this._timeCurrent = 0;\n    this._anglePrev = 0;\n    this._angleCurrent = 0;\n    this._cursorPosPrev = new Vector3();\n    this._cursorPosCurr = new Vector3();\n    this._wPrev = 0;\n    this._wCurr = 0;\n    this.adjustNearFar = false;\n    this.scaleFactor = 1.1;\n    this.dampingFactor = 25;\n    this.wMax = 20;\n    this.enableAnimations = true;\n    this.enableGrid = false;\n    this.cursorZoom = false;\n    this.minFov = 5;\n    this.maxFov = 90;\n    this.enabled = true;\n    this.enablePan = true;\n    this.enableRotate = true;\n    this.enableZoom = true;\n    this.minDistance = 0;\n    this.maxDistance = Infinity;\n    this.minZoom = 0;\n    this.maxZoom = Infinity;\n    this.target = new Vector3(0, 0, 0);\n    this._currentTarget = new Vector3(0, 0, 0);\n    this._tbRadius = 1;\n    this._state = STATE.IDLE;\n    this.setCamera(camera);\n    if (this.scene) {\n      this.scene.add(this._gizmos);\n    }\n    this._devPxRatio = window.devicePixelRatio;\n    this.initializeMouseActions();\n    if (this.domElement)\n      this.connect(this.domElement);\n    window.addEventListener(\"resize\", this.onWindowResize);\n  }\n  /**\n   * Apply a transformation matrix, to the camera and gizmos\n   * @param {Object} transformation Object containing matrices to apply to camera and gizmos\n   */\n  applyTransformMatrix(transformation) {\n    if ((transformation == null ? void 0 : transformation.camera) && this.camera) {\n      this._m4_1.copy(this._cameraMatrixState).premultiply(transformation.camera);\n      this._m4_1.decompose(this.camera.position, this.camera.quaternion, this.camera.scale);\n      this.camera.updateMatrix();\n      if (this._state == STATE.ROTATE || this._state == STATE.ZROTATE || this._state == STATE.ANIMATION_ROTATE) {\n        this.camera.up.copy(this._upState).applyQuaternion(this.camera.quaternion);\n      }\n    }\n    if (transformation == null ? void 0 : transformation.gizmos) {\n      this._m4_1.copy(this._gizmoMatrixState).premultiply(transformation.gizmos);\n      this._m4_1.decompose(this._gizmos.position, this._gizmos.quaternion, this._gizmos.scale);\n      this._gizmos.updateMatrix();\n    }\n    if ((this._state == STATE.SCALE || this._state == STATE.FOCUS || this._state == STATE.ANIMATION_FOCUS) && this.camera) {\n      const tbRadius = this.calculateTbRadius(this.camera);\n      if (tbRadius !== void 0) {\n        this._tbRadius = tbRadius;\n      }\n      if (this.adjustNearFar) {\n        const cameraDistance = this.camera.position.distanceTo(this._gizmos.position);\n        const bb = new Box3();\n        bb.setFromObject(this._gizmos);\n        const sphere = new Sphere();\n        bb.getBoundingSphere(sphere);\n        const adjustedNearPosition = Math.max(this._nearPos0, sphere.radius + sphere.center.length());\n        const regularNearPosition = cameraDistance - this._initialNear;\n        const minNearPos = Math.min(adjustedNearPosition, regularNearPosition);\n        this.camera.near = cameraDistance - minNearPos;\n        const adjustedFarPosition = Math.min(this._farPos0, -sphere.radius + sphere.center.length());\n        const regularFarPosition = cameraDistance - this._initialFar;\n        const minFarPos = Math.min(adjustedFarPosition, regularFarPosition);\n        this.camera.far = cameraDistance - minFarPos;\n        this.camera.updateProjectionMatrix();\n      } else {\n        let update = false;\n        if (this.camera.near != this._initialNear) {\n          this.camera.near = this._initialNear;\n          update = true;\n        }\n        if (this.camera.far != this._initialFar) {\n          this.camera.far = this._initialFar;\n          update = true;\n        }\n        if (update) {\n          this.camera.updateProjectionMatrix();\n        }\n      }\n    }\n  }\n  /**\n   * Set gizmos visibility\n   * @param {Boolean} value Value of gizmos visibility\n   */\n  setGizmosVisible(value) {\n    this._gizmos.visible = value;\n    this.dispatchEvent(_changeEvent);\n  }\n  /**\n   * Set values in transformation object\n   * @param {Matrix4} camera Transformation to be applied to the camera\n   * @param {Matrix4} gizmos Transformation to be applied to gizmos\n   */\n  setTransformationMatrices(camera = null, gizmos = null) {\n    if (camera) {\n      if (_transformation.camera) {\n        _transformation.camera.copy(camera);\n      } else {\n        _transformation.camera = camera.clone();\n      }\n    } else {\n      _transformation.camera = null;\n    }\n    if (gizmos) {\n      if (_transformation.gizmos) {\n        _transformation.gizmos.copy(gizmos);\n      } else {\n        _transformation.gizmos = gizmos.clone();\n      }\n    } else {\n      _transformation.gizmos = null;\n    }\n  }\n}\nexport {\n  ArcballControls\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}