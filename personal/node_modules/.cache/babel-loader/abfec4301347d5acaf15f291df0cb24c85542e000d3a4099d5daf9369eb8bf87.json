{"ast":null,"code":"import { OrthographicCamera, Scene, StereoCamera, LinearFilter, NearestFilter, RGBAFormat, WebGLRenderTarget, ShaderMaterial, Mesh, PlaneGeometry } from \"three\";\nclass ParallaxBarrierEffect {\n  constructor(renderer) {\n    const _camera = new OrthographicCamera(-1, 1, 1, -1, 0, 1);\n    const _scene = new Scene();\n    const _stereo = new StereoCamera();\n    const _params = {\n      minFilter: LinearFilter,\n      magFilter: NearestFilter,\n      format: RGBAFormat\n    };\n    const _renderTargetL = new WebGLRenderTarget(512, 512, _params);\n    const _renderTargetR = new WebGLRenderTarget(512, 512, _params);\n    const _material = new ShaderMaterial({\n      uniforms: {\n        mapLeft: {\n          value: _renderTargetL.texture\n        },\n        mapRight: {\n          value: _renderTargetR.texture\n        }\n      },\n      vertexShader: [\"varying vec2 vUv;\", \"void main() {\", \"\tvUv = vec2( uv.x, uv.y );\", \"\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\", \"}\"].join(\"\\n\"),\n      fragmentShader: [\"uniform sampler2D mapLeft;\", \"uniform sampler2D mapRight;\", \"varying vec2 vUv;\", \"void main() {\", \"\tvec2 uv = vUv;\", \"\tif ( ( mod( gl_FragCoord.y, 2.0 ) ) > 1.00 ) {\", \"\t\tgl_FragColor = texture2D( mapLeft, uv );\", \"\t} else {\", \"\t\tgl_FragColor = texture2D( mapRight, uv );\", \"\t}\", \"\t#include <tonemapping_fragment>\", \"\t#include <encodings_fragment>\", \"}\"].join(\"\\n\")\n    });\n    const mesh = new Mesh(new PlaneGeometry(2, 2), _material);\n    _scene.add(mesh);\n    this.setSize = function (width, height) {\n      renderer.setSize(width, height);\n      const pixelRatio = renderer.getPixelRatio();\n      _renderTargetL.setSize(width * pixelRatio, height * pixelRatio);\n      _renderTargetR.setSize(width * pixelRatio, height * pixelRatio);\n    };\n    this.render = function (scene, camera) {\n      if (scene.matrixWorldAutoUpdate === true) scene.updateMatrixWorld();\n      if (camera.parent === null && camera.matrixWorldAutoUpdate === true) camera.updateMatrixWorld();\n      _stereo.update(camera);\n      renderer.setRenderTarget(_renderTargetL);\n      renderer.clear();\n      renderer.render(scene, _stereo.cameraL);\n      renderer.setRenderTarget(_renderTargetR);\n      renderer.clear();\n      renderer.render(scene, _stereo.cameraR);\n      renderer.setRenderTarget(null);\n      renderer.render(_scene, _camera);\n    };\n  }\n}\nexport { ParallaxBarrierEffect };","map":{"version":3,"names":["OrthographicCamera","Scene","StereoCamera","LinearFilter","NearestFilter","RGBAFormat","WebGLRenderTarget","ShaderMaterial","Mesh","PlaneGeometry","ParallaxBarrierEffect","constructor","renderer","_camera","_scene","_stereo","_params","minFilter","magFilter","format","_renderTargetL","_renderTargetR","_material","uniforms","mapLeft","value","texture","mapRight","vertexShader","join","fragmentShader","mesh","add","setSize","width","height","pixelRatio","getPixelRatio","render","scene","camera","matrixWorldAutoUpdate","updateMatrixWorld","parent","update","setRenderTarget","clear","cameraL","cameraR"],"sources":["/home/krug/Coding/JavaScript/Websites/Personal/personal/node_modules/.pnpm/three-stdlib@2.23.7_three@0.151.3/node_modules/three-stdlib/effects/ParallaxBarrierEffect.js"],"sourcesContent":["import { OrthographicCamera, Scene, StereoCamera, LinearFilter, NearestFilter, RGBAFormat, WebGLRenderTarget, ShaderMaterial, Mesh, PlaneGeometry } from \"three\";\nclass ParallaxBarrierEffect {\n  constructor(renderer) {\n    const _camera = new OrthographicCamera(-1, 1, 1, -1, 0, 1);\n    const _scene = new Scene();\n    const _stereo = new StereoCamera();\n    const _params = { minFilter: LinearFilter, magFilter: NearestFilter, format: RGBAFormat };\n    const _renderTargetL = new WebGLRenderTarget(512, 512, _params);\n    const _renderTargetR = new WebGLRenderTarget(512, 512, _params);\n    const _material = new ShaderMaterial({\n      uniforms: {\n        mapLeft: { value: _renderTargetL.texture },\n        mapRight: { value: _renderTargetR.texture }\n      },\n      vertexShader: [\n        \"varying vec2 vUv;\",\n        \"void main() {\",\n        \"\tvUv = vec2( uv.x, uv.y );\",\n        \"\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\",\n        \"}\"\n      ].join(\"\\n\"),\n      fragmentShader: [\n        \"uniform sampler2D mapLeft;\",\n        \"uniform sampler2D mapRight;\",\n        \"varying vec2 vUv;\",\n        \"void main() {\",\n        \"\tvec2 uv = vUv;\",\n        \"\tif ( ( mod( gl_FragCoord.y, 2.0 ) ) > 1.00 ) {\",\n        \"\t\tgl_FragColor = texture2D( mapLeft, uv );\",\n        \"\t} else {\",\n        \"\t\tgl_FragColor = texture2D( mapRight, uv );\",\n        \"\t}\",\n        \"\t#include <tonemapping_fragment>\",\n        \"\t#include <encodings_fragment>\",\n        \"}\"\n      ].join(\"\\n\")\n    });\n    const mesh = new Mesh(new PlaneGeometry(2, 2), _material);\n    _scene.add(mesh);\n    this.setSize = function(width, height) {\n      renderer.setSize(width, height);\n      const pixelRatio = renderer.getPixelRatio();\n      _renderTargetL.setSize(width * pixelRatio, height * pixelRatio);\n      _renderTargetR.setSize(width * pixelRatio, height * pixelRatio);\n    };\n    this.render = function(scene, camera) {\n      if (scene.matrixWorldAutoUpdate === true)\n        scene.updateMatrixWorld();\n      if (camera.parent === null && camera.matrixWorldAutoUpdate === true)\n        camera.updateMatrixWorld();\n      _stereo.update(camera);\n      renderer.setRenderTarget(_renderTargetL);\n      renderer.clear();\n      renderer.render(scene, _stereo.cameraL);\n      renderer.setRenderTarget(_renderTargetR);\n      renderer.clear();\n      renderer.render(scene, _stereo.cameraR);\n      renderer.setRenderTarget(null);\n      renderer.render(_scene, _camera);\n    };\n  }\n}\nexport {\n  ParallaxBarrierEffect\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}