{"ast":null,"code":"/**\r\n * Maze code from this: https://github.com/conorbailey90/Javascript-DFS-Maze/blob/master/maze.js\r\n */\n\nexport default class Maze {\n  constructor(size, rows, columns, setEnd) {\n    this.grid = void 0;\n    this.rows = void 0;\n    this.columns = void 0;\n    this.current = void 0;\n    this.canvas = void 0;\n    this.context = void 0;\n    this.size = void 0;\n    this.stack = void 0;\n    this.setEnd = void 0;\n    this.canvas = document.querySelector(\".maze\");\n    this.context = this.canvas.getContext(\"2d\");\n    this.rows = rows;\n    this.columns = columns;\n    this.grid = [];\n    this.stack = [];\n    this.size = size;\n    this.current = new Cell(-1, -1, this.context, this.size, this.grid);\n    this.setEnd = setEnd;\n  }\n  setup() {\n    for (let row = 0; row < this.rows; row++) {\n      let r = [];\n      for (let col = 0; col < this.columns; col++) {\n        let cell = new Cell(row, col, this.context, this.size, this.grid);\n        r.push(cell);\n      }\n      this.grid.push(r);\n    }\n    this.current = this.grid[0][0];\n    this.grid[this.rows - 1][this.columns - 1].goal = true;\n  }\n  draw() {\n    this.canvas.width = this.size;\n    this.canvas.height = this.size;\n    this.canvas.style.background = \"black\";\n    this.current.visited = true;\n    for (let row = 0; row < this.rows; row++) {\n      for (let col = 0; col < this.columns; col++) {\n        this.grid[row][col].show(this.size, this.rows, this.columns);\n      }\n    }\n    let next = this.current.checkNeighbours();\n    if (next) {\n      next.visited = true;\n      this.stack.push(this.current);\n      this.current.highlight(this.columns, \"#FF4D91\");\n      this.current.removeWalls(this.current, next);\n      this.current = next;\n    } else if (this.stack.length > 0) {\n      let cell = this.stack.pop();\n      this.current = cell;\n      this.current.highlight(this.columns, \"#FF4D91\");\n    }\n    if (this.stack.length === 0) {\n      this.setEnd(true);\n      this.current.highlight(this.columns, \"black\");\n      return;\n    }\n    window.requestAnimationFrame(() => {\n      this.draw();\n    });\n  }\n}\nclass Cell {\n  constructor(row, column, context, size, grid) {\n    this.row = void 0;\n    this.column = void 0;\n    this.walls = void 0;\n    this.goal = void 0;\n    this.context = void 0;\n    this.visited = void 0;\n    this.parentSize = void 0;\n    this.parentGrid = void 0;\n    this.row = row;\n    this.column = column;\n    this.walls = {\n      top: true,\n      bottom: true,\n      left: true,\n      right: true\n    };\n    this.goal = false;\n    this.context = context;\n    this.visited = false;\n    this.parentSize = size;\n    this.parentGrid = grid;\n  }\n  highlight(columns, color) {\n    // Additions and subtractions added so the highlighted cell does cover the walls\n    let x = this.column * this.parentSize / columns + 1;\n    let y = this.row * this.parentSize / columns + 1;\n    this.context.fillStyle = color;\n    this.context.fillRect(x, y, this.parentSize / columns - 3, this.parentSize / columns - 3);\n  }\n  removeWalls(cell1, cell2) {\n    // compares to two cells on x axis\n    let x = cell1.column - cell2.column;\n    // Removes the relevant walls if there is a different on x axis\n    if (x === 1) {\n      cell1.walls.left = false;\n      cell2.walls.right = false;\n    } else if (x === -1) {\n      cell1.walls.right = false;\n      cell2.walls.left = false;\n    }\n    // compares to two cells on x axis\n    let y = cell1.row - cell2.row;\n    // Removes the relevant walls if there is a different on x axis\n    if (y === 1) {\n      cell1.walls.top = false;\n      cell2.walls.bottom = false;\n    } else if (y === -1) {\n      cell1.walls.bottom = false;\n      cell2.walls.top = false;\n    }\n  }\n  checkNeighbours() {\n    let grid = this.parentGrid;\n    let row = this.row;\n    let col = this.column;\n    let neighbours = [];\n    let top = row !== 0 ? grid[row - 1][col] : undefined;\n    let right = col !== grid.length - 1 ? grid[row][col + 1] : undefined;\n    let bottom = row !== grid.length - 1 ? grid[row + 1][col] : undefined;\n    let left = col !== 0 ? grid[row][col - 1] : undefined;\n    if (top && !top.visited) neighbours.push(top);\n    if (right && !right.visited) neighbours.push(right);\n    if (bottom && !bottom.visited) neighbours.push(bottom);\n    if (left && !left.visited) neighbours.push(left);\n    if (neighbours.length !== 0) {\n      let random = Math.floor(Math.random() * neighbours.length);\n      return neighbours[random];\n    } else {\n      return undefined;\n    }\n  }\n  drawTopWall(x, y, size, columns) {\n    this.context.beginPath();\n    this.context.moveTo(x, y);\n    this.context.lineTo(x + size / columns, y);\n    this.context.stroke();\n  }\n  drawRightWall(x, y, size, columns, rows) {\n    this.context.beginPath();\n    this.context.moveTo(x + size / columns, y);\n    this.context.lineTo(x + size / columns, y + size / rows);\n    this.context.stroke();\n  }\n  drawBottomWall(x, y, size, columns, rows) {\n    this.context.beginPath();\n    this.context.moveTo(x, y + size / rows);\n    this.context.lineTo(x + size / columns, y + size / rows);\n    this.context.stroke();\n  }\n  drawLeftWall(x, y, size, rows) {\n    this.context.beginPath();\n    this.context.moveTo(x, y);\n    this.context.lineTo(x, y + size / rows);\n    this.context.stroke();\n  }\n  show(size, rows, columns) {\n    let x = this.column * size / columns;\n    let y = this.row * size / rows;\n    this.context.strokeStyle = \"#fff\";\n    this.context.fillStyle = \"black\";\n    this.context.lineWidth = 2;\n    if (this.walls.top) this.drawTopWall(x, y, size, columns);\n    if (this.walls.right) this.drawRightWall(x, y, size, columns, rows);\n    if (this.walls.bottom) this.drawBottomWall(x, y, size, columns, rows);\n    if (this.walls.left) this.drawLeftWall(x, y, size, columns);\n    if (this.visited) {\n      this.context.fillRect(x + 1, y + 1, size / columns - 2, size / rows - 2);\n    }\n  }\n}","map":{"version":3,"names":["Maze","constructor","size","rows","columns","setEnd","grid","current","canvas","context","stack","document","querySelector","getContext","Cell","setup","row","r","col","cell","push","goal","draw","width","height","style","background","visited","show","next","checkNeighbours","highlight","removeWalls","length","pop","window","requestAnimationFrame","column","walls","parentSize","parentGrid","top","bottom","left","right","color","x","y","fillStyle","fillRect","cell1","cell2","neighbours","undefined","random","Math","floor","drawTopWall","beginPath","moveTo","lineTo","stroke","drawRightWall","drawBottomWall","drawLeftWall","strokeStyle","lineWidth"],"sources":["/home/krug/Coding/JavaScript/Websites/Personal/personal/src/components/Maze.ts"],"sourcesContent":["/**\r\n * Maze code from this: https://github.com/conorbailey90/Javascript-DFS-Maze/blob/master/maze.js\r\n */\r\n\r\nexport default class Maze {\r\n    grid: Cell[][];\r\n    rows: number;\r\n    columns: number;\r\n    current: Cell;\r\n    canvas: HTMLCanvasElement;\r\n    context: CanvasRenderingContext2D;\r\n    size: number;\r\n    stack: Cell[];\r\n    setEnd: React.Dispatch<React.SetStateAction<boolean>>;\r\n\r\n    constructor(size: number, rows: number, columns: number, setEnd: React.Dispatch<React.SetStateAction<boolean>>) {\r\n        this.canvas = document.querySelector(\".maze\")!;\r\n        this.context = this.canvas.getContext(\"2d\")!;\r\n\r\n        this.rows = rows;\r\n        this.columns = columns;\r\n        this.grid = [];\r\n        this.stack = [];\r\n        this.size = size;\r\n        this.current = new Cell(-1, -1, this.context, this.size, this.grid);\r\n        this.setEnd = setEnd;\r\n    }\r\n\r\n    setup(): void {\r\n        for (let row = 0; row < this.rows; row++) {\r\n            let r: Cell[] = [];\r\n            for (let col = 0; col < this.columns; col++) {\r\n                let cell = new Cell(row, col, this.context, this.size, this.grid);\r\n                r.push(cell);\r\n            }\r\n            this.grid.push(r);\r\n        }\r\n\r\n        this.current = this.grid[0][0];\r\n        this.grid[this.rows - 1][this.columns - 1].goal = true;\r\n    }\r\n\r\n    draw(): void {\r\n        this.canvas.width = this.size;\r\n        this.canvas.height = this.size;\r\n        this.canvas.style.background = \"black\";\r\n        this.current.visited = true;\r\n        for (let row = 0; row < this.rows; row++) {\r\n            for (let col = 0; col < this.columns; col++) {\r\n                this.grid[row][col].show(this.size, this.rows, this.columns);\r\n            }\r\n        }\r\n\r\n        let next = this.current.checkNeighbours();\r\n        if (next) {\r\n            next.visited = true;\r\n            this.stack.push(this.current);\r\n            this.current.highlight(this.columns, \"#FF4D91\");\r\n            this.current.removeWalls(this.current, next);\r\n            this.current = next;\r\n        } else if (this.stack.length > 0) {\r\n            let cell = this.stack.pop();\r\n            this.current = cell!;\r\n            this.current.highlight(this.columns, \"#FF4D91\");\r\n        }\r\n        if (this.stack.length === 0) {\r\n            this.setEnd(true);\r\n            this.current.highlight(this.columns, \"black\");\r\n            return;\r\n        }\r\n\r\n        window.requestAnimationFrame(() => {\r\n            this.draw();\r\n        });\r\n    }\r\n}\r\n\r\ninterface Walls {\r\n    top: boolean;\r\n    bottom: boolean;\r\n    left: boolean;\r\n    right: boolean;\r\n}\r\n\r\nclass Cell {\r\n    row: number;\r\n    column: number;\r\n    walls: Walls;\r\n    goal: boolean;\r\n    context: CanvasRenderingContext2D;\r\n    visited: boolean;\r\n    parentSize: number;\r\n    parentGrid: Cell[][];\r\n\r\n    constructor(row: number, column: number, context: CanvasRenderingContext2D, size: number, grid: Cell[][]) {\r\n        this.row = row;\r\n        this.column = column;\r\n        this.walls = { top: true, bottom: true, left: true, right: true}\r\n        this.goal = false;\r\n        this.context = context;\r\n        this.visited = false;\r\n        this.parentSize = size;\r\n        this.parentGrid = grid;\r\n    }\r\n\r\n    highlight(columns: number, color: string): void {\r\n        // Additions and subtractions added so the highlighted cell does cover the walls\r\n        let x = (this.column * this.parentSize) / columns + 1;\r\n        let y = (this.row * this.parentSize) / columns + 1;\r\n        this.context.fillStyle = color;\r\n        this.context.fillRect(\r\n            x,\r\n            y,\r\n            this.parentSize / columns - 3,\r\n            this.parentSize / columns - 3\r\n        );\r\n    }\r\n\r\n    removeWalls(cell1: Cell, cell2: Cell): void {\r\n        // compares to two cells on x axis\r\n        let x = cell1.column - cell2.column;\r\n        // Removes the relevant walls if there is a different on x axis\r\n        if (x === 1) {\r\n            cell1.walls.left = false;\r\n            cell2.walls.right = false;\r\n        } else if (x === -1) {\r\n            cell1.walls.right = false;\r\n            cell2.walls.left = false;\r\n        }\r\n        // compares to two cells on x axis\r\n        let y = cell1.row - cell2.row;\r\n        // Removes the relevant walls if there is a different on x axis\r\n        if (y === 1) {\r\n            cell1.walls.top = false;\r\n            cell2.walls.bottom = false;\r\n        } else if (y === -1) {\r\n            cell1.walls.bottom = false;\r\n            cell2.walls.top = false;\r\n        }\r\n    }\r\n\r\n    checkNeighbours(): Cell | undefined {\r\n        let grid = this.parentGrid;\r\n        let row = this.row;\r\n        let col = this.column;\r\n        let neighbours = [];\r\n\r\n        let top = row !== 0 ? grid[row - 1][col] : undefined;\r\n        let right = col !== grid.length - 1 ? grid[row][col + 1] : undefined;\r\n        let bottom = row !== grid.length - 1 ? grid[row + 1][col] : undefined;\r\n        let left = col !== 0 ? grid[row][col - 1] : undefined;\r\n\r\n        if (top && !top.visited) neighbours.push(top);\r\n        if (right && !right.visited) neighbours.push(right);\r\n        if (bottom && !bottom.visited) neighbours.push(bottom);\r\n        if (left && !left.visited) neighbours.push(left);\r\n\r\n        if (neighbours.length !== 0) {\r\n            let random = Math.floor(Math.random() * neighbours.length);\r\n            return neighbours[random];\r\n        } else {\r\n            return undefined;\r\n        }\r\n    }\r\n\r\n    drawTopWall(x: number, y: number, size: number, columns: number): void {\r\n        this.context.beginPath();\r\n        this.context.moveTo(x, y);\r\n        this.context.lineTo(x + size / columns, y);\r\n        this.context.stroke();\r\n    }\r\n\r\n    drawRightWall(x: number, y: number, size: number, columns: number, rows: number): void {\r\n        this.context.beginPath();\r\n        this.context.moveTo(x + size / columns, y);\r\n        this.context.lineTo(x + size / columns, y + size / rows);\r\n        this.context.stroke();\r\n    }\r\n\r\n    drawBottomWall(x: number, y: number, size: number, columns: number, rows: number): void {\r\n        this.context.beginPath();\r\n        this.context.moveTo(x, y + size / rows);\r\n        this.context.lineTo(x + size / columns, y + size / rows);\r\n        this.context.stroke();\r\n    }\r\n\r\n    drawLeftWall(x: number, y: number, size: number, rows: number): void {\r\n        this.context.beginPath();\r\n        this.context.moveTo(x, y);\r\n        this.context.lineTo(x, y + size / rows);\r\n        this.context.stroke();\r\n    }\r\n\r\n    show(size: number, rows: number, columns: number): void {\r\n        let x = (this.column * size) / columns;\r\n        let y = (this.row * size) / rows;\r\n\r\n        this.context.strokeStyle = \"#fff\";\r\n        this.context.fillStyle = \"black\";\r\n        this.context.lineWidth = 2;\r\n\r\n        if (this.walls.top) this.drawTopWall(x, y, size, columns);\r\n        if (this.walls.right) this.drawRightWall(x, y, size, columns, rows);\r\n        if (this.walls.bottom) this.drawBottomWall(x, y, size, columns, rows);\r\n        if (this.walls.left) this.drawLeftWall(x, y, size, columns);\r\n        if (this.visited) {\r\n            this.context.fillRect(x + 1, y + 1, size / columns - 2, size / rows - 2);\r\n        }\r\n\r\n    }\r\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}