{"ast":null,"code":"import { Vector2 } from \"three\";\nvar SobelOperatorShader = {\n  uniforms: {\n    tDiffuse: {\n      value: null\n    },\n    resolution: {\n      value: /* @__PURE__ */new Vector2()\n    }\n  },\n  vertexShader: [\"varying vec2 vUv;\", \"void main() {\", \"\tvUv = uv;\", \"\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\", \"}\"].join(\"\\n\"),\n  fragmentShader: [\"uniform sampler2D tDiffuse;\", \"uniform vec2 resolution;\", \"varying vec2 vUv;\", \"void main() {\", \"\tvec2 texel = vec2( 1.0 / resolution.x, 1.0 / resolution.y );\",\n  // kernel definition (in glsl matrices are filled in column-major order)\n  \"\tconst mat3 Gx = mat3( -1, -2, -1, 0, 0, 0, 1, 2, 1 );\",\n  // x direction kernel\n  \"\tconst mat3 Gy = mat3( -1, 0, 1, -2, 0, 2, -1, 0, 1 );\",\n  // y direction kernel\n  // fetch the 3x3 neighbourhood of a fragment\n  // first column\n  \"\tfloat tx0y0 = texture2D( tDiffuse, vUv + texel * vec2( -1, -1 ) ).r;\", \"\tfloat tx0y1 = texture2D( tDiffuse, vUv + texel * vec2( -1,  0 ) ).r;\", \"\tfloat tx0y2 = texture2D( tDiffuse, vUv + texel * vec2( -1,  1 ) ).r;\",\n  // second column\n  \"\tfloat tx1y0 = texture2D( tDiffuse, vUv + texel * vec2(  0, -1 ) ).r;\", \"\tfloat tx1y1 = texture2D( tDiffuse, vUv + texel * vec2(  0,  0 ) ).r;\", \"\tfloat tx1y2 = texture2D( tDiffuse, vUv + texel * vec2(  0,  1 ) ).r;\",\n  // third column\n  \"\tfloat tx2y0 = texture2D( tDiffuse, vUv + texel * vec2(  1, -1 ) ).r;\", \"\tfloat tx2y1 = texture2D( tDiffuse, vUv + texel * vec2(  1,  0 ) ).r;\", \"\tfloat tx2y2 = texture2D( tDiffuse, vUv + texel * vec2(  1,  1 ) ).r;\",\n  // gradient value in x direction\n  \"\tfloat valueGx = Gx[0][0] * tx0y0 + Gx[1][0] * tx1y0 + Gx[2][0] * tx2y0 + \", \"\t\tGx[0][1] * tx0y1 + Gx[1][1] * tx1y1 + Gx[2][1] * tx2y1 + \", \"\t\tGx[0][2] * tx0y2 + Gx[1][2] * tx1y2 + Gx[2][2] * tx2y2; \",\n  // gradient value in y direction\n  \"\tfloat valueGy = Gy[0][0] * tx0y0 + Gy[1][0] * tx1y0 + Gy[2][0] * tx2y0 + \", \"\t\tGy[0][1] * tx0y1 + Gy[1][1] * tx1y1 + Gy[2][1] * tx2y1 + \", \"\t\tGy[0][2] * tx0y2 + Gy[1][2] * tx1y2 + Gy[2][2] * tx2y2; \",\n  // magnitute of the total gradient\n  \"\tfloat G = sqrt( ( valueGx * valueGx ) + ( valueGy * valueGy ) );\", \"\tgl_FragColor = vec4( vec3( G ), 1 );\", \"}\"].join(\"\\n\")\n};\nexport { SobelOperatorShader };","map":{"version":3,"names":["Vector2","SobelOperatorShader","uniforms","tDiffuse","value","resolution","vertexShader","join","fragmentShader"],"sources":["/home/krug/Coding/JavaScript/Websites/Personal/personal/node_modules/.pnpm/three-stdlib@2.23.7_three@0.151.3/node_modules/three-stdlib/shaders/SobelOperatorShader.js"],"sourcesContent":["import { Vector2 } from \"three\";\nconst SobelOperatorShader = {\n  uniforms: {\n    tDiffuse: { value: null },\n    resolution: { value: /* @__PURE__ */ new Vector2() }\n  },\n  vertexShader: [\n    \"varying vec2 vUv;\",\n    \"void main() {\",\n    \"\tvUv = uv;\",\n    \"\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\",\n    \"}\"\n  ].join(\"\\n\"),\n  fragmentShader: [\n    \"uniform sampler2D tDiffuse;\",\n    \"uniform vec2 resolution;\",\n    \"varying vec2 vUv;\",\n    \"void main() {\",\n    \"\tvec2 texel = vec2( 1.0 / resolution.x, 1.0 / resolution.y );\",\n    // kernel definition (in glsl matrices are filled in column-major order)\n    \"\tconst mat3 Gx = mat3( -1, -2, -1, 0, 0, 0, 1, 2, 1 );\",\n    // x direction kernel\n    \"\tconst mat3 Gy = mat3( -1, 0, 1, -2, 0, 2, -1, 0, 1 );\",\n    // y direction kernel\n    // fetch the 3x3 neighbourhood of a fragment\n    // first column\n    \"\tfloat tx0y0 = texture2D( tDiffuse, vUv + texel * vec2( -1, -1 ) ).r;\",\n    \"\tfloat tx0y1 = texture2D( tDiffuse, vUv + texel * vec2( -1,  0 ) ).r;\",\n    \"\tfloat tx0y2 = texture2D( tDiffuse, vUv + texel * vec2( -1,  1 ) ).r;\",\n    // second column\n    \"\tfloat tx1y0 = texture2D( tDiffuse, vUv + texel * vec2(  0, -1 ) ).r;\",\n    \"\tfloat tx1y1 = texture2D( tDiffuse, vUv + texel * vec2(  0,  0 ) ).r;\",\n    \"\tfloat tx1y2 = texture2D( tDiffuse, vUv + texel * vec2(  0,  1 ) ).r;\",\n    // third column\n    \"\tfloat tx2y0 = texture2D( tDiffuse, vUv + texel * vec2(  1, -1 ) ).r;\",\n    \"\tfloat tx2y1 = texture2D( tDiffuse, vUv + texel * vec2(  1,  0 ) ).r;\",\n    \"\tfloat tx2y2 = texture2D( tDiffuse, vUv + texel * vec2(  1,  1 ) ).r;\",\n    // gradient value in x direction\n    \"\tfloat valueGx = Gx[0][0] * tx0y0 + Gx[1][0] * tx1y0 + Gx[2][0] * tx2y0 + \",\n    \"\t\tGx[0][1] * tx0y1 + Gx[1][1] * tx1y1 + Gx[2][1] * tx2y1 + \",\n    \"\t\tGx[0][2] * tx0y2 + Gx[1][2] * tx1y2 + Gx[2][2] * tx2y2; \",\n    // gradient value in y direction\n    \"\tfloat valueGy = Gy[0][0] * tx0y0 + Gy[1][0] * tx1y0 + Gy[2][0] * tx2y0 + \",\n    \"\t\tGy[0][1] * tx0y1 + Gy[1][1] * tx1y1 + Gy[2][1] * tx2y1 + \",\n    \"\t\tGy[0][2] * tx0y2 + Gy[1][2] * tx1y2 + Gy[2][2] * tx2y2; \",\n    // magnitute of the total gradient\n    \"\tfloat G = sqrt( ( valueGx * valueGx ) + ( valueGy * valueGy ) );\",\n    \"\tgl_FragColor = vec4( vec3( G ), 1 );\",\n    \"}\"\n  ].join(\"\\n\")\n};\nexport {\n  SobelOperatorShader\n};\n"],"mappings":"AAAA,SAASA,OAAO,QAAQ,OAAO;AAC/B,IAAMC,mBAAmB,GAAG;EAC1BC,QAAQ,EAAE;IACRC,QAAQ,EAAE;MAAEC,KAAK,EAAE;IAAK,CAAC;IACzBC,UAAU,EAAE;MAAED,KAAK,EAAE,eAAgB,IAAIJ,OAAO,CAAC;IAAE;EACrD,CAAC;EACDM,YAAY,EAAE,CACZ,mBAAmB,EACnB,eAAe,EACf,YAAY,EACZ,4EAA4E,EAC5E,GAAG,CACJ,CAACC,IAAI,CAAC,IAAI,CAAC;EACZC,cAAc,EAAE,CACd,6BAA6B,EAC7B,0BAA0B,EAC1B,mBAAmB,EACnB,eAAe,EACf,+DAA+D;EAC/D;EACA,wDAAwD;EACxD;EACA,wDAAwD;EACxD;EACA;EACA;EACA,uEAAuE,EACvE,uEAAuE,EACvE,uEAAuE;EACvE;EACA,uEAAuE,EACvE,uEAAuE,EACvE,uEAAuE;EACvE;EACA,uEAAuE,EACvE,uEAAuE,EACvE,uEAAuE;EACvE;EACA,4EAA4E,EAC5E,6DAA6D,EAC7D,4DAA4D;EAC5D;EACA,4EAA4E,EAC5E,6DAA6D,EAC7D,4DAA4D;EAC5D;EACA,mEAAmE,EACnE,uCAAuC,EACvC,GAAG,CACJ,CAACD,IAAI,CAAC,IAAI;AACb,CAAC;AACD,SACEN,mBAAmB"},"metadata":{},"sourceType":"module","externalDependencies":[]}