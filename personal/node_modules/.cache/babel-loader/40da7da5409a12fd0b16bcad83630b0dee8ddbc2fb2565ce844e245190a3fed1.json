{"ast":null,"code":"import _classCallCheck from \"/home/krug/Coding/JavaScript/Websites/Personal/personal/node_modules/.pnpm/@babel+runtime@7.22.3/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/home/krug/Coding/JavaScript/Websites/Personal/personal/node_modules/.pnpm/@babel+runtime@7.22.3/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"/home/krug/Coding/JavaScript/Websites/Personal/personal/node_modules/.pnpm/@babel+runtime@7.22.3/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/home/krug/Coding/JavaScript/Websites/Personal/personal/node_modules/.pnpm/@babel+runtime@7.22.3/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { Box3, Vector3, InstancedBufferGeometry, Float32BufferAttribute, InstancedInterleavedBuffer, InterleavedBufferAttribute, WireframeGeometry, Sphere } from \"three\";\nvar _box = /* @__PURE__ */new Box3();\nvar _vector = /* @__PURE__ */new Vector3();\nvar LineSegmentsGeometry = /*#__PURE__*/function (_InstancedBufferGeome) {\n  _inherits(LineSegmentsGeometry, _InstancedBufferGeome);\n  var _super = _createSuper(LineSegmentsGeometry);\n  function LineSegmentsGeometry() {\n    var _this;\n    _classCallCheck(this, LineSegmentsGeometry);\n    _this = _super.call(this);\n    _this.isLineSegmentsGeometry = true;\n    _this.type = \"LineSegmentsGeometry\";\n    var positions = [-1, 2, 0, 1, 2, 0, -1, 1, 0, 1, 1, 0, -1, 0, 0, 1, 0, 0, -1, -1, 0, 1, -1, 0];\n    var uvs = [-1, 2, 1, 2, -1, 1, 1, 1, -1, -1, 1, -1, -1, -2, 1, -2];\n    var index = [0, 2, 1, 2, 3, 1, 2, 4, 3, 4, 5, 3, 4, 6, 5, 6, 7, 5];\n    _this.setIndex(index);\n    _this.setAttribute(\"position\", new Float32BufferAttribute(positions, 3));\n    _this.setAttribute(\"uv\", new Float32BufferAttribute(uvs, 2));\n    return _this;\n  }\n  _createClass(LineSegmentsGeometry, [{\n    key: \"applyMatrix4\",\n    value: function applyMatrix4(matrix) {\n      var start = this.attributes.instanceStart;\n      var end = this.attributes.instanceEnd;\n      if (start !== void 0) {\n        start.applyMatrix4(matrix);\n        end.applyMatrix4(matrix);\n        start.needsUpdate = true;\n      }\n      if (this.boundingBox !== null) {\n        this.computeBoundingBox();\n      }\n      if (this.boundingSphere !== null) {\n        this.computeBoundingSphere();\n      }\n      return this;\n    }\n  }, {\n    key: \"setPositions\",\n    value: function setPositions(array) {\n      var lineSegments;\n      if (array instanceof Float32Array) {\n        lineSegments = array;\n      } else if (Array.isArray(array)) {\n        lineSegments = new Float32Array(array);\n      }\n      var instanceBuffer = new InstancedInterleavedBuffer(lineSegments, 6, 1);\n      this.setAttribute(\"instanceStart\", new InterleavedBufferAttribute(instanceBuffer, 3, 0));\n      this.setAttribute(\"instanceEnd\", new InterleavedBufferAttribute(instanceBuffer, 3, 3));\n      this.computeBoundingBox();\n      this.computeBoundingSphere();\n      return this;\n    }\n  }, {\n    key: \"setColors\",\n    value: function setColors(array) {\n      var colors;\n      if (array instanceof Float32Array) {\n        colors = array;\n      } else if (Array.isArray(array)) {\n        colors = new Float32Array(array);\n      }\n      var instanceColorBuffer = new InstancedInterleavedBuffer(colors, 6, 1);\n      this.setAttribute(\"instanceColorStart\", new InterleavedBufferAttribute(instanceColorBuffer, 3, 0));\n      this.setAttribute(\"instanceColorEnd\", new InterleavedBufferAttribute(instanceColorBuffer, 3, 3));\n      return this;\n    }\n  }, {\n    key: \"fromWireframeGeometry\",\n    value: function fromWireframeGeometry(geometry) {\n      this.setPositions(geometry.attributes.position.array);\n      return this;\n    }\n  }, {\n    key: \"fromEdgesGeometry\",\n    value: function fromEdgesGeometry(geometry) {\n      this.setPositions(geometry.attributes.position.array);\n      return this;\n    }\n  }, {\n    key: \"fromMesh\",\n    value: function fromMesh(mesh) {\n      this.fromWireframeGeometry(new WireframeGeometry(mesh.geometry));\n      return this;\n    }\n  }, {\n    key: \"fromLineSegments\",\n    value: function fromLineSegments(lineSegments) {\n      var geometry = lineSegments.geometry;\n      this.setPositions(geometry.attributes.position.array);\n      return this;\n    }\n  }, {\n    key: \"computeBoundingBox\",\n    value: function computeBoundingBox() {\n      if (this.boundingBox === null) {\n        this.boundingBox = new Box3();\n      }\n      var start = this.attributes.instanceStart;\n      var end = this.attributes.instanceEnd;\n      if (start !== void 0 && end !== void 0) {\n        this.boundingBox.setFromBufferAttribute(start);\n        _box.setFromBufferAttribute(end);\n        this.boundingBox.union(_box);\n      }\n    }\n  }, {\n    key: \"computeBoundingSphere\",\n    value: function computeBoundingSphere() {\n      if (this.boundingSphere === null) {\n        this.boundingSphere = new Sphere();\n      }\n      if (this.boundingBox === null) {\n        this.computeBoundingBox();\n      }\n      var start = this.attributes.instanceStart;\n      var end = this.attributes.instanceEnd;\n      if (start !== void 0 && end !== void 0) {\n        var center = this.boundingSphere.center;\n        this.boundingBox.getCenter(center);\n        var maxRadiusSq = 0;\n        for (var i = 0, il = start.count; i < il; i++) {\n          _vector.fromBufferAttribute(start, i);\n          maxRadiusSq = Math.max(maxRadiusSq, center.distanceToSquared(_vector));\n          _vector.fromBufferAttribute(end, i);\n          maxRadiusSq = Math.max(maxRadiusSq, center.distanceToSquared(_vector));\n        }\n        this.boundingSphere.radius = Math.sqrt(maxRadiusSq);\n        if (isNaN(this.boundingSphere.radius)) {\n          console.error(\"THREE.LineSegmentsGeometry.computeBoundingSphere(): Computed radius is NaN. The instanced position data is likely to have NaN values.\", this);\n        }\n      }\n    }\n  }, {\n    key: \"toJSON\",\n    value: function toJSON() {}\n  }, {\n    key: \"applyMatrix\",\n    value: function applyMatrix(matrix) {\n      console.warn(\"THREE.LineSegmentsGeometry: applyMatrix() has been renamed to applyMatrix4().\");\n      return this.applyMatrix4(matrix);\n    }\n  }]);\n  return LineSegmentsGeometry;\n}(InstancedBufferGeometry);\nexport { LineSegmentsGeometry };","map":{"version":3,"names":["Box3","Vector3","InstancedBufferGeometry","Float32BufferAttribute","InstancedInterleavedBuffer","InterleavedBufferAttribute","WireframeGeometry","Sphere","_box","_vector","LineSegmentsGeometry","_InstancedBufferGeome","_inherits","_super","_createSuper","_this","_classCallCheck","call","isLineSegmentsGeometry","type","positions","uvs","index","setIndex","setAttribute","_createClass","key","value","applyMatrix4","matrix","start","attributes","instanceStart","end","instanceEnd","needsUpdate","boundingBox","computeBoundingBox","boundingSphere","computeBoundingSphere","setPositions","array","lineSegments","Float32Array","Array","isArray","instanceBuffer","setColors","colors","instanceColorBuffer","fromWireframeGeometry","geometry","position","fromEdgesGeometry","fromMesh","mesh","fromLineSegments","setFromBufferAttribute","union","center","getCenter","maxRadiusSq","i","il","count","fromBufferAttribute","Math","max","distanceToSquared","radius","sqrt","isNaN","console","error","toJSON","applyMatrix","warn"],"sources":["/home/krug/Coding/JavaScript/Websites/Personal/personal/node_modules/.pnpm/three-stdlib@2.23.7_three@0.151.3/node_modules/three-stdlib/lines/LineSegmentsGeometry.js"],"sourcesContent":["import { Box3, Vector3, InstancedBufferGeometry, Float32BufferAttribute, InstancedInterleavedBuffer, InterleavedBufferAttribute, WireframeGeometry, Sphere } from \"three\";\nconst _box = /* @__PURE__ */ new Box3();\nconst _vector = /* @__PURE__ */ new Vector3();\nclass LineSegmentsGeometry extends InstancedBufferGeometry {\n  constructor() {\n    super();\n    this.isLineSegmentsGeometry = true;\n    this.type = \"LineSegmentsGeometry\";\n    const positions = [-1, 2, 0, 1, 2, 0, -1, 1, 0, 1, 1, 0, -1, 0, 0, 1, 0, 0, -1, -1, 0, 1, -1, 0];\n    const uvs = [-1, 2, 1, 2, -1, 1, 1, 1, -1, -1, 1, -1, -1, -2, 1, -2];\n    const index = [0, 2, 1, 2, 3, 1, 2, 4, 3, 4, 5, 3, 4, 6, 5, 6, 7, 5];\n    this.setIndex(index);\n    this.setAttribute(\"position\", new Float32BufferAttribute(positions, 3));\n    this.setAttribute(\"uv\", new Float32BufferAttribute(uvs, 2));\n  }\n  applyMatrix4(matrix) {\n    const start = this.attributes.instanceStart;\n    const end = this.attributes.instanceEnd;\n    if (start !== void 0) {\n      start.applyMatrix4(matrix);\n      end.applyMatrix4(matrix);\n      start.needsUpdate = true;\n    }\n    if (this.boundingBox !== null) {\n      this.computeBoundingBox();\n    }\n    if (this.boundingSphere !== null) {\n      this.computeBoundingSphere();\n    }\n    return this;\n  }\n  setPositions(array) {\n    let lineSegments;\n    if (array instanceof Float32Array) {\n      lineSegments = array;\n    } else if (Array.isArray(array)) {\n      lineSegments = new Float32Array(array);\n    }\n    const instanceBuffer = new InstancedInterleavedBuffer(lineSegments, 6, 1);\n    this.setAttribute(\"instanceStart\", new InterleavedBufferAttribute(instanceBuffer, 3, 0));\n    this.setAttribute(\"instanceEnd\", new InterleavedBufferAttribute(instanceBuffer, 3, 3));\n    this.computeBoundingBox();\n    this.computeBoundingSphere();\n    return this;\n  }\n  setColors(array) {\n    let colors;\n    if (array instanceof Float32Array) {\n      colors = array;\n    } else if (Array.isArray(array)) {\n      colors = new Float32Array(array);\n    }\n    const instanceColorBuffer = new InstancedInterleavedBuffer(colors, 6, 1);\n    this.setAttribute(\"instanceColorStart\", new InterleavedBufferAttribute(instanceColorBuffer, 3, 0));\n    this.setAttribute(\"instanceColorEnd\", new InterleavedBufferAttribute(instanceColorBuffer, 3, 3));\n    return this;\n  }\n  fromWireframeGeometry(geometry) {\n    this.setPositions(geometry.attributes.position.array);\n    return this;\n  }\n  fromEdgesGeometry(geometry) {\n    this.setPositions(geometry.attributes.position.array);\n    return this;\n  }\n  fromMesh(mesh) {\n    this.fromWireframeGeometry(new WireframeGeometry(mesh.geometry));\n    return this;\n  }\n  fromLineSegments(lineSegments) {\n    const geometry = lineSegments.geometry;\n    this.setPositions(geometry.attributes.position.array);\n    return this;\n  }\n  computeBoundingBox() {\n    if (this.boundingBox === null) {\n      this.boundingBox = new Box3();\n    }\n    const start = this.attributes.instanceStart;\n    const end = this.attributes.instanceEnd;\n    if (start !== void 0 && end !== void 0) {\n      this.boundingBox.setFromBufferAttribute(start);\n      _box.setFromBufferAttribute(end);\n      this.boundingBox.union(_box);\n    }\n  }\n  computeBoundingSphere() {\n    if (this.boundingSphere === null) {\n      this.boundingSphere = new Sphere();\n    }\n    if (this.boundingBox === null) {\n      this.computeBoundingBox();\n    }\n    const start = this.attributes.instanceStart;\n    const end = this.attributes.instanceEnd;\n    if (start !== void 0 && end !== void 0) {\n      const center = this.boundingSphere.center;\n      this.boundingBox.getCenter(center);\n      let maxRadiusSq = 0;\n      for (let i = 0, il = start.count; i < il; i++) {\n        _vector.fromBufferAttribute(start, i);\n        maxRadiusSq = Math.max(maxRadiusSq, center.distanceToSquared(_vector));\n        _vector.fromBufferAttribute(end, i);\n        maxRadiusSq = Math.max(maxRadiusSq, center.distanceToSquared(_vector));\n      }\n      this.boundingSphere.radius = Math.sqrt(maxRadiusSq);\n      if (isNaN(this.boundingSphere.radius)) {\n        console.error(\n          \"THREE.LineSegmentsGeometry.computeBoundingSphere(): Computed radius is NaN. The instanced position data is likely to have NaN values.\",\n          this\n        );\n      }\n    }\n  }\n  toJSON() {\n  }\n  applyMatrix(matrix) {\n    console.warn(\"THREE.LineSegmentsGeometry: applyMatrix() has been renamed to applyMatrix4().\");\n    return this.applyMatrix4(matrix);\n  }\n}\nexport {\n  LineSegmentsGeometry\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}