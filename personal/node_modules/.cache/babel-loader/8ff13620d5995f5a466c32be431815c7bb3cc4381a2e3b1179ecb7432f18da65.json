{"ast":null,"code":"import _classCallCheck from \"/home/krug/Coding/JavaScript/Websites/Personal/personal/node_modules/.pnpm/@babel+runtime@7.22.3/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/home/krug/Coding/JavaScript/Websites/Personal/personal/node_modules/.pnpm/@babel+runtime@7.22.3/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport { Object3D, TextureLoader, UVMapping, Box3, MathUtils, MeshLambertMaterial } from \"three\";\nimport { MD2Loader } from \"../loaders/MD2Loader.js\";\nimport { MorphBlendMesh } from \"./MorphBlendMesh.js\";\nvar MD2CharacterComplex = /*#__PURE__*/function () {\n  function MD2CharacterComplex() {\n    _classCallCheck(this, MD2CharacterComplex);\n    this.scale = 1;\n    this.animationFPS = 6;\n    this.transitionFrames = 15;\n    this.maxSpeed = 275;\n    this.maxReverseSpeed = -275;\n    this.frontAcceleration = 600;\n    this.backAcceleration = 600;\n    this.frontDecceleration = 600;\n    this.angularSpeed = 2.5;\n    this.root = new Object3D();\n    this.meshBody = null;\n    this.meshWeapon = null;\n    this.controls = null;\n    this.skinsBody = [];\n    this.skinsWeapon = [];\n    this.weapons = [];\n    this.currentSkin = void 0;\n    this.onLoadComplete = function () {};\n    this.meshes = [];\n    this.animations = {};\n    this.loadCounter = 0;\n    this.speed = 0;\n    this.bodyOrientation = 0;\n    this.walkSpeed = this.maxSpeed;\n    this.crouchSpeed = this.maxSpeed * 0.5;\n    this.activeAnimation = null;\n    this.oldAnimation = null;\n  }\n  _createClass(MD2CharacterComplex, [{\n    key: \"enableShadows\",\n    value: function enableShadows(enable) {\n      for (var i = 0; i < this.meshes.length; i++) {\n        this.meshes[i].castShadow = enable;\n        this.meshes[i].receiveShadow = enable;\n      }\n    }\n  }, {\n    key: \"setVisible\",\n    value: function setVisible(enable) {\n      for (var i = 0; i < this.meshes.length; i++) {\n        this.meshes[i].visible = enable;\n        this.meshes[i].visible = enable;\n      }\n    }\n  }, {\n    key: \"shareParts\",\n    value: function shareParts(original) {\n      this.animations = original.animations;\n      this.walkSpeed = original.walkSpeed;\n      this.crouchSpeed = original.crouchSpeed;\n      this.skinsBody = original.skinsBody;\n      this.skinsWeapon = original.skinsWeapon;\n      var mesh = this._createPart(original.meshBody.geometry, this.skinsBody[0]);\n      mesh.scale.set(this.scale, this.scale, this.scale);\n      this.root.position.y = original.root.position.y;\n      this.root.add(mesh);\n      this.meshBody = mesh;\n      this.meshes.push(mesh);\n      for (var i = 0; i < original.weapons.length; i++) {\n        var meshWeapon = this._createPart(original.weapons[i].geometry, this.skinsWeapon[i]);\n        meshWeapon.scale.set(this.scale, this.scale, this.scale);\n        meshWeapon.visible = false;\n        meshWeapon.name = original.weapons[i].name;\n        this.root.add(meshWeapon);\n        this.weapons[i] = meshWeapon;\n        this.meshWeapon = meshWeapon;\n        this.meshes.push(meshWeapon);\n      }\n    }\n  }, {\n    key: \"loadParts\",\n    value: function loadParts(config) {\n      var scope = this;\n      function loadTextures(baseUrl, textureUrls) {\n        var textureLoader = new TextureLoader();\n        var textures = [];\n        for (var i = 0; i < textureUrls.length; i++) {\n          textures[i] = textureLoader.load(baseUrl + textureUrls[i], checkLoadingComplete);\n          textures[i].mapping = UVMapping;\n          textures[i].name = textureUrls[i];\n          if (\"colorSpace\" in textures[i]) textures[i].colorSpace = \"srgb\";else textures[i].encoding = 3001;\n        }\n        return textures;\n      }\n      function checkLoadingComplete() {\n        scope.loadCounter -= 1;\n        if (scope.loadCounter === 0) scope.onLoadComplete();\n      }\n      this.animations = config.animations;\n      this.walkSpeed = config.walkSpeed;\n      this.crouchSpeed = config.crouchSpeed;\n      this.loadCounter = config.weapons.length * 2 + config.skins.length + 1;\n      var weaponsTextures = [];\n      for (var i = 0; i < config.weapons.length; i++) weaponsTextures[i] = config.weapons[i][1];\n      this.skinsBody = loadTextures(config.baseUrl + \"skins/\", config.skins);\n      this.skinsWeapon = loadTextures(config.baseUrl + \"skins/\", weaponsTextures);\n      var loader = new MD2Loader();\n      loader.load(config.baseUrl + config.body, function (geo) {\n        var boundingBox = new Box3();\n        boundingBox.setFromBufferAttribute(geo.attributes.position);\n        scope.root.position.y = -scope.scale * boundingBox.min.y;\n        var mesh = scope._createPart(geo, scope.skinsBody[0]);\n        mesh.scale.set(scope.scale, scope.scale, scope.scale);\n        scope.root.add(mesh);\n        scope.meshBody = mesh;\n        scope.meshes.push(mesh);\n        checkLoadingComplete();\n      });\n      var generateCallback = function generateCallback(index, name) {\n        return function (geo) {\n          var mesh = scope._createPart(geo, scope.skinsWeapon[index]);\n          mesh.scale.set(scope.scale, scope.scale, scope.scale);\n          mesh.visible = false;\n          mesh.name = name;\n          scope.root.add(mesh);\n          scope.weapons[index] = mesh;\n          scope.meshWeapon = mesh;\n          scope.meshes.push(mesh);\n          checkLoadingComplete();\n        };\n      };\n      for (var _i = 0; _i < config.weapons.length; _i++) {\n        loader.load(config.baseUrl + config.weapons[_i][0], generateCallback(_i, config.weapons[_i][0]));\n      }\n    }\n  }, {\n    key: \"setPlaybackRate\",\n    value: function setPlaybackRate(rate) {\n      if (this.meshBody) this.meshBody.duration = this.meshBody.baseDuration / rate;\n      if (this.meshWeapon) this.meshWeapon.duration = this.meshWeapon.baseDuration / rate;\n    }\n  }, {\n    key: \"setWireframe\",\n    value: function setWireframe(wireframeEnabled) {\n      if (wireframeEnabled) {\n        if (this.meshBody) this.meshBody.material = this.meshBody.materialWireframe;\n        if (this.meshWeapon) this.meshWeapon.material = this.meshWeapon.materialWireframe;\n      } else {\n        if (this.meshBody) this.meshBody.material = this.meshBody.materialTexture;\n        if (this.meshWeapon) this.meshWeapon.material = this.meshWeapon.materialTexture;\n      }\n    }\n  }, {\n    key: \"setSkin\",\n    value: function setSkin(index) {\n      if (this.meshBody && this.meshBody.material.wireframe === false) {\n        this.meshBody.material.map = this.skinsBody[index];\n        this.currentSkin = index;\n      }\n    }\n  }, {\n    key: \"setWeapon\",\n    value: function setWeapon(index) {\n      for (var i = 0; i < this.weapons.length; i++) this.weapons[i].visible = false;\n      var activeWeapon = this.weapons[index];\n      if (activeWeapon) {\n        activeWeapon.visible = true;\n        this.meshWeapon = activeWeapon;\n        if (this.activeAnimation) {\n          activeWeapon.playAnimation(this.activeAnimation);\n          this.meshWeapon.setAnimationTime(this.activeAnimation, this.meshBody.getAnimationTime(this.activeAnimation));\n        }\n      }\n    }\n  }, {\n    key: \"setAnimation\",\n    value: function setAnimation(animationName) {\n      if (animationName === this.activeAnimation || !animationName) return;\n      if (this.meshBody) {\n        this.meshBody.setAnimationWeight(animationName, 0);\n        this.meshBody.playAnimation(animationName);\n        this.oldAnimation = this.activeAnimation;\n        this.activeAnimation = animationName;\n        this.blendCounter = this.transitionFrames;\n      }\n      if (this.meshWeapon) {\n        this.meshWeapon.setAnimationWeight(animationName, 0);\n        this.meshWeapon.playAnimation(animationName);\n      }\n    }\n  }, {\n    key: \"update\",\n    value: function update(delta) {\n      if (this.controls) this.updateMovementModel(delta);\n      if (this.animations) {\n        this.updateBehaviors();\n        this.updateAnimations(delta);\n      }\n    }\n  }, {\n    key: \"updateAnimations\",\n    value: function updateAnimations(delta) {\n      var mix = 1;\n      if (this.blendCounter > 0) {\n        mix = (this.transitionFrames - this.blendCounter) / this.transitionFrames;\n        this.blendCounter -= 1;\n      }\n      if (this.meshBody) {\n        this.meshBody.update(delta);\n        this.meshBody.setAnimationWeight(this.activeAnimation, mix);\n        this.meshBody.setAnimationWeight(this.oldAnimation, 1 - mix);\n      }\n      if (this.meshWeapon) {\n        this.meshWeapon.update(delta);\n        this.meshWeapon.setAnimationWeight(this.activeAnimation, mix);\n        this.meshWeapon.setAnimationWeight(this.oldAnimation, 1 - mix);\n      }\n    }\n  }, {\n    key: \"updateBehaviors\",\n    value: function updateBehaviors() {\n      var controls = this.controls;\n      var animations = this.animations;\n      var moveAnimation, idleAnimation;\n      if (controls.crouch) {\n        moveAnimation = animations[\"crouchMove\"];\n        idleAnimation = animations[\"crouchIdle\"];\n      } else {\n        moveAnimation = animations[\"move\"];\n        idleAnimation = animations[\"idle\"];\n      }\n      if (controls.jump) {\n        moveAnimation = animations[\"jump\"];\n        idleAnimation = animations[\"jump\"];\n      }\n      if (controls.attack) {\n        if (controls.crouch) {\n          moveAnimation = animations[\"crouchAttack\"];\n          idleAnimation = animations[\"crouchAttack\"];\n        } else {\n          moveAnimation = animations[\"attack\"];\n          idleAnimation = animations[\"attack\"];\n        }\n      }\n      if (controls.moveForward || controls.moveBackward || controls.moveLeft || controls.moveRight) {\n        if (this.activeAnimation !== moveAnimation) {\n          this.setAnimation(moveAnimation);\n        }\n      }\n      if (Math.abs(this.speed) < 0.2 * this.maxSpeed && !(controls.moveLeft || controls.moveRight || controls.moveForward || controls.moveBackward)) {\n        if (this.activeAnimation !== idleAnimation) {\n          this.setAnimation(idleAnimation);\n        }\n      }\n      if (controls.moveForward) {\n        if (this.meshBody) {\n          this.meshBody.setAnimationDirectionForward(this.activeAnimation);\n          this.meshBody.setAnimationDirectionForward(this.oldAnimation);\n        }\n        if (this.meshWeapon) {\n          this.meshWeapon.setAnimationDirectionForward(this.activeAnimation);\n          this.meshWeapon.setAnimationDirectionForward(this.oldAnimation);\n        }\n      }\n      if (controls.moveBackward) {\n        if (this.meshBody) {\n          this.meshBody.setAnimationDirectionBackward(this.activeAnimation);\n          this.meshBody.setAnimationDirectionBackward(this.oldAnimation);\n        }\n        if (this.meshWeapon) {\n          this.meshWeapon.setAnimationDirectionBackward(this.activeAnimation);\n          this.meshWeapon.setAnimationDirectionBackward(this.oldAnimation);\n        }\n      }\n    }\n  }, {\n    key: \"updateMovementModel\",\n    value: function updateMovementModel(delta) {\n      function exponentialEaseOut(k) {\n        return k === 1 ? 1 : -Math.pow(2, -10 * k) + 1;\n      }\n      var controls = this.controls;\n      if (controls.crouch) this.maxSpeed = this.crouchSpeed;else this.maxSpeed = this.walkSpeed;\n      this.maxReverseSpeed = -this.maxSpeed;\n      if (controls.moveForward) this.speed = MathUtils.clamp(this.speed + delta * this.frontAcceleration, this.maxReverseSpeed, this.maxSpeed);\n      if (controls.moveBackward) this.speed = MathUtils.clamp(this.speed - delta * this.backAcceleration, this.maxReverseSpeed, this.maxSpeed);\n      var dir = 1;\n      if (controls.moveLeft) {\n        this.bodyOrientation += delta * this.angularSpeed;\n        this.speed = MathUtils.clamp(this.speed + dir * delta * this.frontAcceleration, this.maxReverseSpeed, this.maxSpeed);\n      }\n      if (controls.moveRight) {\n        this.bodyOrientation -= delta * this.angularSpeed;\n        this.speed = MathUtils.clamp(this.speed + dir * delta * this.frontAcceleration, this.maxReverseSpeed, this.maxSpeed);\n      }\n      if (!(controls.moveForward || controls.moveBackward)) {\n        if (this.speed > 0) {\n          var k = exponentialEaseOut(this.speed / this.maxSpeed);\n          this.speed = MathUtils.clamp(this.speed - k * delta * this.frontDecceleration, 0, this.maxSpeed);\n        } else {\n          var _k = exponentialEaseOut(this.speed / this.maxReverseSpeed);\n          this.speed = MathUtils.clamp(this.speed + _k * delta * this.backAcceleration, this.maxReverseSpeed, 0);\n        }\n      }\n      var forwardDelta = this.speed * delta;\n      this.root.position.x += Math.sin(this.bodyOrientation) * forwardDelta;\n      this.root.position.z += Math.cos(this.bodyOrientation) * forwardDelta;\n      this.root.rotation.y = this.bodyOrientation;\n    }\n    // internal\n  }, {\n    key: \"_createPart\",\n    value: function _createPart(geometry, skinMap) {\n      var materialWireframe = new MeshLambertMaterial({\n        color: 16755200,\n        wireframe: true,\n        morphTargets: true,\n        morphNormals: true\n      });\n      var materialTexture = new MeshLambertMaterial({\n        color: 16777215,\n        wireframe: false,\n        map: skinMap,\n        morphTargets: true,\n        morphNormals: true\n      });\n      var mesh = new MorphBlendMesh(geometry, materialTexture);\n      mesh.rotation.y = -Math.PI / 2;\n      mesh.materialTexture = materialTexture;\n      mesh.materialWireframe = materialWireframe;\n      mesh.autoCreateAnimations(this.animationFPS);\n      return mesh;\n    }\n  }]);\n  return MD2CharacterComplex;\n}();\nexport { MD2CharacterComplex };","map":{"version":3,"names":["Object3D","TextureLoader","UVMapping","Box3","MathUtils","MeshLambertMaterial","MD2Loader","MorphBlendMesh","MD2CharacterComplex","_classCallCheck","scale","animationFPS","transitionFrames","maxSpeed","maxReverseSpeed","frontAcceleration","backAcceleration","frontDecceleration","angularSpeed","root","meshBody","meshWeapon","controls","skinsBody","skinsWeapon","weapons","currentSkin","onLoadComplete","meshes","animations","loadCounter","speed","bodyOrientation","walkSpeed","crouchSpeed","activeAnimation","oldAnimation","_createClass","key","value","enableShadows","enable","i","length","castShadow","receiveShadow","setVisible","visible","shareParts","original","mesh","_createPart","geometry","set","position","y","add","push","name","loadParts","config","scope","loadTextures","baseUrl","textureUrls","textureLoader","textures","load","checkLoadingComplete","mapping","colorSpace","encoding","skins","weaponsTextures","loader","body","geo","boundingBox","setFromBufferAttribute","attributes","min","generateCallback","index","setPlaybackRate","rate","duration","baseDuration","setWireframe","wireframeEnabled","material","materialWireframe","materialTexture","setSkin","wireframe","map","setWeapon","activeWeapon","playAnimation","setAnimationTime","getAnimationTime","setAnimation","animationName","setAnimationWeight","blendCounter","update","delta","updateMovementModel","updateBehaviors","updateAnimations","mix","moveAnimation","idleAnimation","crouch","jump","attack","moveForward","moveBackward","moveLeft","moveRight","Math","abs","setAnimationDirectionForward","setAnimationDirectionBackward","exponentialEaseOut","k","pow","clamp","dir","forwardDelta","x","sin","z","cos","rotation","skinMap","color","morphTargets","morphNormals","PI","autoCreateAnimations"],"sources":["/home/krug/Coding/JavaScript/Websites/Personal/personal/node_modules/.pnpm/three-stdlib@2.23.7_three@0.151.3/node_modules/three-stdlib/misc/MD2CharacterComplex.js"],"sourcesContent":["import { Object3D, TextureLoader, UVMapping, Box3, MathUtils, MeshLambertMaterial } from \"three\";\nimport { MD2Loader } from \"../loaders/MD2Loader.js\";\nimport { MorphBlendMesh } from \"./MorphBlendMesh.js\";\nclass MD2CharacterComplex {\n  constructor() {\n    this.scale = 1;\n    this.animationFPS = 6;\n    this.transitionFrames = 15;\n    this.maxSpeed = 275;\n    this.maxReverseSpeed = -275;\n    this.frontAcceleration = 600;\n    this.backAcceleration = 600;\n    this.frontDecceleration = 600;\n    this.angularSpeed = 2.5;\n    this.root = new Object3D();\n    this.meshBody = null;\n    this.meshWeapon = null;\n    this.controls = null;\n    this.skinsBody = [];\n    this.skinsWeapon = [];\n    this.weapons = [];\n    this.currentSkin = void 0;\n    this.onLoadComplete = function() {\n    };\n    this.meshes = [];\n    this.animations = {};\n    this.loadCounter = 0;\n    this.speed = 0;\n    this.bodyOrientation = 0;\n    this.walkSpeed = this.maxSpeed;\n    this.crouchSpeed = this.maxSpeed * 0.5;\n    this.activeAnimation = null;\n    this.oldAnimation = null;\n  }\n  enableShadows(enable) {\n    for (let i = 0; i < this.meshes.length; i++) {\n      this.meshes[i].castShadow = enable;\n      this.meshes[i].receiveShadow = enable;\n    }\n  }\n  setVisible(enable) {\n    for (let i = 0; i < this.meshes.length; i++) {\n      this.meshes[i].visible = enable;\n      this.meshes[i].visible = enable;\n    }\n  }\n  shareParts(original) {\n    this.animations = original.animations;\n    this.walkSpeed = original.walkSpeed;\n    this.crouchSpeed = original.crouchSpeed;\n    this.skinsBody = original.skinsBody;\n    this.skinsWeapon = original.skinsWeapon;\n    const mesh = this._createPart(original.meshBody.geometry, this.skinsBody[0]);\n    mesh.scale.set(this.scale, this.scale, this.scale);\n    this.root.position.y = original.root.position.y;\n    this.root.add(mesh);\n    this.meshBody = mesh;\n    this.meshes.push(mesh);\n    for (let i = 0; i < original.weapons.length; i++) {\n      const meshWeapon = this._createPart(original.weapons[i].geometry, this.skinsWeapon[i]);\n      meshWeapon.scale.set(this.scale, this.scale, this.scale);\n      meshWeapon.visible = false;\n      meshWeapon.name = original.weapons[i].name;\n      this.root.add(meshWeapon);\n      this.weapons[i] = meshWeapon;\n      this.meshWeapon = meshWeapon;\n      this.meshes.push(meshWeapon);\n    }\n  }\n  loadParts(config) {\n    const scope = this;\n    function loadTextures(baseUrl, textureUrls) {\n      const textureLoader = new TextureLoader();\n      const textures = [];\n      for (let i = 0; i < textureUrls.length; i++) {\n        textures[i] = textureLoader.load(baseUrl + textureUrls[i], checkLoadingComplete);\n        textures[i].mapping = UVMapping;\n        textures[i].name = textureUrls[i];\n        if (\"colorSpace\" in textures[i])\n          textures[i].colorSpace = \"srgb\";\n        else\n          textures[i].encoding = 3001;\n      }\n      return textures;\n    }\n    function checkLoadingComplete() {\n      scope.loadCounter -= 1;\n      if (scope.loadCounter === 0)\n        scope.onLoadComplete();\n    }\n    this.animations = config.animations;\n    this.walkSpeed = config.walkSpeed;\n    this.crouchSpeed = config.crouchSpeed;\n    this.loadCounter = config.weapons.length * 2 + config.skins.length + 1;\n    const weaponsTextures = [];\n    for (let i = 0; i < config.weapons.length; i++)\n      weaponsTextures[i] = config.weapons[i][1];\n    this.skinsBody = loadTextures(config.baseUrl + \"skins/\", config.skins);\n    this.skinsWeapon = loadTextures(config.baseUrl + \"skins/\", weaponsTextures);\n    const loader = new MD2Loader();\n    loader.load(config.baseUrl + config.body, function(geo) {\n      const boundingBox = new Box3();\n      boundingBox.setFromBufferAttribute(geo.attributes.position);\n      scope.root.position.y = -scope.scale * boundingBox.min.y;\n      const mesh = scope._createPart(geo, scope.skinsBody[0]);\n      mesh.scale.set(scope.scale, scope.scale, scope.scale);\n      scope.root.add(mesh);\n      scope.meshBody = mesh;\n      scope.meshes.push(mesh);\n      checkLoadingComplete();\n    });\n    const generateCallback = function(index, name) {\n      return function(geo) {\n        const mesh = scope._createPart(geo, scope.skinsWeapon[index]);\n        mesh.scale.set(scope.scale, scope.scale, scope.scale);\n        mesh.visible = false;\n        mesh.name = name;\n        scope.root.add(mesh);\n        scope.weapons[index] = mesh;\n        scope.meshWeapon = mesh;\n        scope.meshes.push(mesh);\n        checkLoadingComplete();\n      };\n    };\n    for (let i = 0; i < config.weapons.length; i++) {\n      loader.load(config.baseUrl + config.weapons[i][0], generateCallback(i, config.weapons[i][0]));\n    }\n  }\n  setPlaybackRate(rate) {\n    if (this.meshBody)\n      this.meshBody.duration = this.meshBody.baseDuration / rate;\n    if (this.meshWeapon)\n      this.meshWeapon.duration = this.meshWeapon.baseDuration / rate;\n  }\n  setWireframe(wireframeEnabled) {\n    if (wireframeEnabled) {\n      if (this.meshBody)\n        this.meshBody.material = this.meshBody.materialWireframe;\n      if (this.meshWeapon)\n        this.meshWeapon.material = this.meshWeapon.materialWireframe;\n    } else {\n      if (this.meshBody)\n        this.meshBody.material = this.meshBody.materialTexture;\n      if (this.meshWeapon)\n        this.meshWeapon.material = this.meshWeapon.materialTexture;\n    }\n  }\n  setSkin(index) {\n    if (this.meshBody && this.meshBody.material.wireframe === false) {\n      this.meshBody.material.map = this.skinsBody[index];\n      this.currentSkin = index;\n    }\n  }\n  setWeapon(index) {\n    for (let i = 0; i < this.weapons.length; i++)\n      this.weapons[i].visible = false;\n    const activeWeapon = this.weapons[index];\n    if (activeWeapon) {\n      activeWeapon.visible = true;\n      this.meshWeapon = activeWeapon;\n      if (this.activeAnimation) {\n        activeWeapon.playAnimation(this.activeAnimation);\n        this.meshWeapon.setAnimationTime(this.activeAnimation, this.meshBody.getAnimationTime(this.activeAnimation));\n      }\n    }\n  }\n  setAnimation(animationName) {\n    if (animationName === this.activeAnimation || !animationName)\n      return;\n    if (this.meshBody) {\n      this.meshBody.setAnimationWeight(animationName, 0);\n      this.meshBody.playAnimation(animationName);\n      this.oldAnimation = this.activeAnimation;\n      this.activeAnimation = animationName;\n      this.blendCounter = this.transitionFrames;\n    }\n    if (this.meshWeapon) {\n      this.meshWeapon.setAnimationWeight(animationName, 0);\n      this.meshWeapon.playAnimation(animationName);\n    }\n  }\n  update(delta) {\n    if (this.controls)\n      this.updateMovementModel(delta);\n    if (this.animations) {\n      this.updateBehaviors();\n      this.updateAnimations(delta);\n    }\n  }\n  updateAnimations(delta) {\n    let mix = 1;\n    if (this.blendCounter > 0) {\n      mix = (this.transitionFrames - this.blendCounter) / this.transitionFrames;\n      this.blendCounter -= 1;\n    }\n    if (this.meshBody) {\n      this.meshBody.update(delta);\n      this.meshBody.setAnimationWeight(this.activeAnimation, mix);\n      this.meshBody.setAnimationWeight(this.oldAnimation, 1 - mix);\n    }\n    if (this.meshWeapon) {\n      this.meshWeapon.update(delta);\n      this.meshWeapon.setAnimationWeight(this.activeAnimation, mix);\n      this.meshWeapon.setAnimationWeight(this.oldAnimation, 1 - mix);\n    }\n  }\n  updateBehaviors() {\n    const controls = this.controls;\n    const animations = this.animations;\n    let moveAnimation, idleAnimation;\n    if (controls.crouch) {\n      moveAnimation = animations[\"crouchMove\"];\n      idleAnimation = animations[\"crouchIdle\"];\n    } else {\n      moveAnimation = animations[\"move\"];\n      idleAnimation = animations[\"idle\"];\n    }\n    if (controls.jump) {\n      moveAnimation = animations[\"jump\"];\n      idleAnimation = animations[\"jump\"];\n    }\n    if (controls.attack) {\n      if (controls.crouch) {\n        moveAnimation = animations[\"crouchAttack\"];\n        idleAnimation = animations[\"crouchAttack\"];\n      } else {\n        moveAnimation = animations[\"attack\"];\n        idleAnimation = animations[\"attack\"];\n      }\n    }\n    if (controls.moveForward || controls.moveBackward || controls.moveLeft || controls.moveRight) {\n      if (this.activeAnimation !== moveAnimation) {\n        this.setAnimation(moveAnimation);\n      }\n    }\n    if (Math.abs(this.speed) < 0.2 * this.maxSpeed && !(controls.moveLeft || controls.moveRight || controls.moveForward || controls.moveBackward)) {\n      if (this.activeAnimation !== idleAnimation) {\n        this.setAnimation(idleAnimation);\n      }\n    }\n    if (controls.moveForward) {\n      if (this.meshBody) {\n        this.meshBody.setAnimationDirectionForward(this.activeAnimation);\n        this.meshBody.setAnimationDirectionForward(this.oldAnimation);\n      }\n      if (this.meshWeapon) {\n        this.meshWeapon.setAnimationDirectionForward(this.activeAnimation);\n        this.meshWeapon.setAnimationDirectionForward(this.oldAnimation);\n      }\n    }\n    if (controls.moveBackward) {\n      if (this.meshBody) {\n        this.meshBody.setAnimationDirectionBackward(this.activeAnimation);\n        this.meshBody.setAnimationDirectionBackward(this.oldAnimation);\n      }\n      if (this.meshWeapon) {\n        this.meshWeapon.setAnimationDirectionBackward(this.activeAnimation);\n        this.meshWeapon.setAnimationDirectionBackward(this.oldAnimation);\n      }\n    }\n  }\n  updateMovementModel(delta) {\n    function exponentialEaseOut(k) {\n      return k === 1 ? 1 : -Math.pow(2, -10 * k) + 1;\n    }\n    const controls = this.controls;\n    if (controls.crouch)\n      this.maxSpeed = this.crouchSpeed;\n    else\n      this.maxSpeed = this.walkSpeed;\n    this.maxReverseSpeed = -this.maxSpeed;\n    if (controls.moveForward)\n      this.speed = MathUtils.clamp(this.speed + delta * this.frontAcceleration, this.maxReverseSpeed, this.maxSpeed);\n    if (controls.moveBackward)\n      this.speed = MathUtils.clamp(this.speed - delta * this.backAcceleration, this.maxReverseSpeed, this.maxSpeed);\n    const dir = 1;\n    if (controls.moveLeft) {\n      this.bodyOrientation += delta * this.angularSpeed;\n      this.speed = MathUtils.clamp(\n        this.speed + dir * delta * this.frontAcceleration,\n        this.maxReverseSpeed,\n        this.maxSpeed\n      );\n    }\n    if (controls.moveRight) {\n      this.bodyOrientation -= delta * this.angularSpeed;\n      this.speed = MathUtils.clamp(\n        this.speed + dir * delta * this.frontAcceleration,\n        this.maxReverseSpeed,\n        this.maxSpeed\n      );\n    }\n    if (!(controls.moveForward || controls.moveBackward)) {\n      if (this.speed > 0) {\n        const k = exponentialEaseOut(this.speed / this.maxSpeed);\n        this.speed = MathUtils.clamp(this.speed - k * delta * this.frontDecceleration, 0, this.maxSpeed);\n      } else {\n        const k = exponentialEaseOut(this.speed / this.maxReverseSpeed);\n        this.speed = MathUtils.clamp(this.speed + k * delta * this.backAcceleration, this.maxReverseSpeed, 0);\n      }\n    }\n    const forwardDelta = this.speed * delta;\n    this.root.position.x += Math.sin(this.bodyOrientation) * forwardDelta;\n    this.root.position.z += Math.cos(this.bodyOrientation) * forwardDelta;\n    this.root.rotation.y = this.bodyOrientation;\n  }\n  // internal\n  _createPart(geometry, skinMap) {\n    const materialWireframe = new MeshLambertMaterial({\n      color: 16755200,\n      wireframe: true,\n      morphTargets: true,\n      morphNormals: true\n    });\n    const materialTexture = new MeshLambertMaterial({\n      color: 16777215,\n      wireframe: false,\n      map: skinMap,\n      morphTargets: true,\n      morphNormals: true\n    });\n    const mesh = new MorphBlendMesh(geometry, materialTexture);\n    mesh.rotation.y = -Math.PI / 2;\n    mesh.materialTexture = materialTexture;\n    mesh.materialWireframe = materialWireframe;\n    mesh.autoCreateAnimations(this.animationFPS);\n    return mesh;\n  }\n}\nexport {\n  MD2CharacterComplex\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}