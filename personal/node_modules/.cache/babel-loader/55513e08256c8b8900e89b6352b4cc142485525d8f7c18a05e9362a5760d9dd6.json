{"ast":null,"code":"import _classCallCheck from \"/home/krug/Coding/JavaScript/Websites/Personal/personal/node_modules/.pnpm/@babel+runtime@7.22.3/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/home/krug/Coding/JavaScript/Websites/Personal/personal/node_modules/.pnpm/@babel+runtime@7.22.3/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport { Vector3, Color, SphericalHarmonics3, LightProbe } from \"three\";\nvar LightProbeGenerator = /*#__PURE__*/function () {\n  function LightProbeGenerator() {\n    _classCallCheck(this, LightProbeGenerator);\n  }\n  _createClass(LightProbeGenerator, null, [{\n    key: \"fromCubeTexture\",\n    value:\n    // https://www.ppsloan.org/publications/StupidSH36.pdf\n    function fromCubeTexture(cubeTexture) {\n      var totalWeight = 0;\n      var coord = new Vector3();\n      var dir = new Vector3();\n      var color = new Color();\n      var shBasis = [0, 0, 0, 0, 0, 0, 0, 0, 0];\n      var sh = new SphericalHarmonics3();\n      var shCoefficients = sh.coefficients;\n      for (var faceIndex = 0; faceIndex < 6; faceIndex++) {\n        var image = cubeTexture.image[faceIndex];\n        var width = image.width;\n        var height = image.height;\n        var canvas = document.createElement(\"canvas\");\n        canvas.width = width;\n        canvas.height = height;\n        var context = canvas.getContext(\"2d\");\n        context.drawImage(image, 0, 0, width, height);\n        var imageData = context.getImageData(0, 0, width, height);\n        var data = imageData.data;\n        var imageWidth = imageData.width;\n        var pixelSize = 2 / imageWidth;\n        for (var i = 0, il = data.length; i < il; i += 4) {\n          color.setRGB(data[i] / 255, data[i + 1] / 255, data[i + 2] / 255);\n          if (\"colorSpace\" in cubeTexture) {\n            if (cubeTexture.colorSpace === \"srgb\") {\n              color.convertSRGBToLinear();\n            }\n          } else if (cubeTexture.encoding === 3001) {\n            color.convertSRGBToLinear();\n          }\n          var pixelIndex = i / 4;\n          var col = -1 + (pixelIndex % imageWidth + 0.5) * pixelSize;\n          var row = 1 - (Math.floor(pixelIndex / imageWidth) + 0.5) * pixelSize;\n          switch (faceIndex) {\n            case 0:\n              coord.set(-1, row, -col);\n              break;\n            case 1:\n              coord.set(1, row, col);\n              break;\n            case 2:\n              coord.set(-col, 1, -row);\n              break;\n            case 3:\n              coord.set(-col, -1, row);\n              break;\n            case 4:\n              coord.set(-col, row, 1);\n              break;\n            case 5:\n              coord.set(col, row, -1);\n              break;\n          }\n          var lengthSq = coord.lengthSq();\n          var weight = 4 / (Math.sqrt(lengthSq) * lengthSq);\n          totalWeight += weight;\n          dir.copy(coord).normalize();\n          SphericalHarmonics3.getBasisAt(dir, shBasis);\n          for (var j = 0; j < 9; j++) {\n            shCoefficients[j].x += shBasis[j] * color.r * weight;\n            shCoefficients[j].y += shBasis[j] * color.g * weight;\n            shCoefficients[j].z += shBasis[j] * color.b * weight;\n          }\n        }\n      }\n      var norm = 4 * Math.PI / totalWeight;\n      for (var _j = 0; _j < 9; _j++) {\n        shCoefficients[_j].x *= norm;\n        shCoefficients[_j].y *= norm;\n        shCoefficients[_j].z *= norm;\n      }\n      return new LightProbe(sh);\n    }\n  }, {\n    key: \"fromCubeRenderTarget\",\n    value: function fromCubeRenderTarget(renderer, cubeRenderTarget) {\n      var totalWeight = 0;\n      var coord = new Vector3();\n      var dir = new Vector3();\n      var color = new Color();\n      var shBasis = [0, 0, 0, 0, 0, 0, 0, 0, 0];\n      var sh = new SphericalHarmonics3();\n      var shCoefficients = sh.coefficients;\n      for (var faceIndex = 0; faceIndex < 6; faceIndex++) {\n        var imageWidth = cubeRenderTarget.width;\n        var data = new Uint8Array(imageWidth * imageWidth * 4);\n        renderer.readRenderTargetPixels(cubeRenderTarget, 0, 0, imageWidth, imageWidth, data, faceIndex);\n        var pixelSize = 2 / imageWidth;\n        for (var i = 0, il = data.length; i < il; i += 4) {\n          color.setRGB(data[i] / 255, data[i + 1] / 255, data[i + 2] / 255);\n          if (\"colorSpace\" in cubeRenderTarget.texture) {\n            if (cubeRenderTarget.texture.colorSpace === \"srgb\") {\n              color.convertSRGBToLinear();\n            }\n          } else if (cubeRenderTarget.texture.encoding === 3001) {\n            color.convertSRGBToLinear();\n          }\n          var pixelIndex = i / 4;\n          var col = -1 + (pixelIndex % imageWidth + 0.5) * pixelSize;\n          var row = 1 - (Math.floor(pixelIndex / imageWidth) + 0.5) * pixelSize;\n          switch (faceIndex) {\n            case 0:\n              coord.set(1, row, -col);\n              break;\n            case 1:\n              coord.set(-1, row, col);\n              break;\n            case 2:\n              coord.set(col, 1, -row);\n              break;\n            case 3:\n              coord.set(col, -1, row);\n              break;\n            case 4:\n              coord.set(col, row, 1);\n              break;\n            case 5:\n              coord.set(-col, row, -1);\n              break;\n          }\n          var lengthSq = coord.lengthSq();\n          var weight = 4 / (Math.sqrt(lengthSq) * lengthSq);\n          totalWeight += weight;\n          dir.copy(coord).normalize();\n          SphericalHarmonics3.getBasisAt(dir, shBasis);\n          for (var j = 0; j < 9; j++) {\n            shCoefficients[j].x += shBasis[j] * color.r * weight;\n            shCoefficients[j].y += shBasis[j] * color.g * weight;\n            shCoefficients[j].z += shBasis[j] * color.b * weight;\n          }\n        }\n      }\n      var norm = 4 * Math.PI / totalWeight;\n      for (var _j2 = 0; _j2 < 9; _j2++) {\n        shCoefficients[_j2].x *= norm;\n        shCoefficients[_j2].y *= norm;\n        shCoefficients[_j2].z *= norm;\n      }\n      return new LightProbe(sh);\n    }\n  }]);\n  return LightProbeGenerator;\n}();\nexport { LightProbeGenerator };","map":{"version":3,"names":["Vector3","Color","SphericalHarmonics3","LightProbe","LightProbeGenerator","_classCallCheck","_createClass","key","value","fromCubeTexture","cubeTexture","totalWeight","coord","dir","color","shBasis","sh","shCoefficients","coefficients","faceIndex","image","width","height","canvas","document","createElement","context","getContext","drawImage","imageData","getImageData","data","imageWidth","pixelSize","i","il","length","setRGB","colorSpace","convertSRGBToLinear","encoding","pixelIndex","col","row","Math","floor","set","lengthSq","weight","sqrt","copy","normalize","getBasisAt","j","x","r","y","g","z","b","norm","PI","fromCubeRenderTarget","renderer","cubeRenderTarget","Uint8Array","readRenderTargetPixels","texture"],"sources":["/home/krug/Coding/JavaScript/Websites/Personal/personal/node_modules/.pnpm/three-stdlib@2.23.7_three@0.151.3/node_modules/three-stdlib/lights/LightProbeGenerator.js"],"sourcesContent":["import { Vector3, Color, SphericalHarmonics3, LightProbe } from \"three\";\nclass LightProbeGenerator {\n  // https://www.ppsloan.org/publications/StupidSH36.pdf\n  static fromCubeTexture(cubeTexture) {\n    let totalWeight = 0;\n    const coord = new Vector3();\n    const dir = new Vector3();\n    const color = new Color();\n    const shBasis = [0, 0, 0, 0, 0, 0, 0, 0, 0];\n    const sh = new SphericalHarmonics3();\n    const shCoefficients = sh.coefficients;\n    for (let faceIndex = 0; faceIndex < 6; faceIndex++) {\n      const image = cubeTexture.image[faceIndex];\n      const width = image.width;\n      const height = image.height;\n      const canvas = document.createElement(\"canvas\");\n      canvas.width = width;\n      canvas.height = height;\n      const context = canvas.getContext(\"2d\");\n      context.drawImage(image, 0, 0, width, height);\n      const imageData = context.getImageData(0, 0, width, height);\n      const data = imageData.data;\n      const imageWidth = imageData.width;\n      const pixelSize = 2 / imageWidth;\n      for (let i = 0, il = data.length; i < il; i += 4) {\n        color.setRGB(data[i] / 255, data[i + 1] / 255, data[i + 2] / 255);\n        if (\"colorSpace\" in cubeTexture) {\n          if (cubeTexture.colorSpace === \"srgb\") {\n            color.convertSRGBToLinear();\n          }\n        } else if (cubeTexture.encoding === 3001) {\n          color.convertSRGBToLinear();\n        }\n        const pixelIndex = i / 4;\n        const col = -1 + (pixelIndex % imageWidth + 0.5) * pixelSize;\n        const row = 1 - (Math.floor(pixelIndex / imageWidth) + 0.5) * pixelSize;\n        switch (faceIndex) {\n          case 0:\n            coord.set(-1, row, -col);\n            break;\n          case 1:\n            coord.set(1, row, col);\n            break;\n          case 2:\n            coord.set(-col, 1, -row);\n            break;\n          case 3:\n            coord.set(-col, -1, row);\n            break;\n          case 4:\n            coord.set(-col, row, 1);\n            break;\n          case 5:\n            coord.set(col, row, -1);\n            break;\n        }\n        const lengthSq = coord.lengthSq();\n        const weight = 4 / (Math.sqrt(lengthSq) * lengthSq);\n        totalWeight += weight;\n        dir.copy(coord).normalize();\n        SphericalHarmonics3.getBasisAt(dir, shBasis);\n        for (let j = 0; j < 9; j++) {\n          shCoefficients[j].x += shBasis[j] * color.r * weight;\n          shCoefficients[j].y += shBasis[j] * color.g * weight;\n          shCoefficients[j].z += shBasis[j] * color.b * weight;\n        }\n      }\n    }\n    const norm = 4 * Math.PI / totalWeight;\n    for (let j = 0; j < 9; j++) {\n      shCoefficients[j].x *= norm;\n      shCoefficients[j].y *= norm;\n      shCoefficients[j].z *= norm;\n    }\n    return new LightProbe(sh);\n  }\n  static fromCubeRenderTarget(renderer, cubeRenderTarget) {\n    let totalWeight = 0;\n    const coord = new Vector3();\n    const dir = new Vector3();\n    const color = new Color();\n    const shBasis = [0, 0, 0, 0, 0, 0, 0, 0, 0];\n    const sh = new SphericalHarmonics3();\n    const shCoefficients = sh.coefficients;\n    for (let faceIndex = 0; faceIndex < 6; faceIndex++) {\n      const imageWidth = cubeRenderTarget.width;\n      const data = new Uint8Array(imageWidth * imageWidth * 4);\n      renderer.readRenderTargetPixels(cubeRenderTarget, 0, 0, imageWidth, imageWidth, data, faceIndex);\n      const pixelSize = 2 / imageWidth;\n      for (let i = 0, il = data.length; i < il; i += 4) {\n        color.setRGB(data[i] / 255, data[i + 1] / 255, data[i + 2] / 255);\n        if (\"colorSpace\" in cubeRenderTarget.texture) {\n          if (cubeRenderTarget.texture.colorSpace === \"srgb\") {\n            color.convertSRGBToLinear();\n          }\n        } else if (cubeRenderTarget.texture.encoding === 3001) {\n          color.convertSRGBToLinear();\n        }\n        const pixelIndex = i / 4;\n        const col = -1 + (pixelIndex % imageWidth + 0.5) * pixelSize;\n        const row = 1 - (Math.floor(pixelIndex / imageWidth) + 0.5) * pixelSize;\n        switch (faceIndex) {\n          case 0:\n            coord.set(1, row, -col);\n            break;\n          case 1:\n            coord.set(-1, row, col);\n            break;\n          case 2:\n            coord.set(col, 1, -row);\n            break;\n          case 3:\n            coord.set(col, -1, row);\n            break;\n          case 4:\n            coord.set(col, row, 1);\n            break;\n          case 5:\n            coord.set(-col, row, -1);\n            break;\n        }\n        const lengthSq = coord.lengthSq();\n        const weight = 4 / (Math.sqrt(lengthSq) * lengthSq);\n        totalWeight += weight;\n        dir.copy(coord).normalize();\n        SphericalHarmonics3.getBasisAt(dir, shBasis);\n        for (let j = 0; j < 9; j++) {\n          shCoefficients[j].x += shBasis[j] * color.r * weight;\n          shCoefficients[j].y += shBasis[j] * color.g * weight;\n          shCoefficients[j].z += shBasis[j] * color.b * weight;\n        }\n      }\n    }\n    const norm = 4 * Math.PI / totalWeight;\n    for (let j = 0; j < 9; j++) {\n      shCoefficients[j].x *= norm;\n      shCoefficients[j].y *= norm;\n      shCoefficients[j].z *= norm;\n    }\n    return new LightProbe(sh);\n  }\n}\nexport {\n  LightProbeGenerator\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}