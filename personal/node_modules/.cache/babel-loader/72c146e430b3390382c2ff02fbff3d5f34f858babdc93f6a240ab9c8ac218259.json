{"ast":null,"code":"// eslint-disable-next-line @typescript-eslint/ban-ts-comment\n// @ts-nocheck\nconst step2List = {\n  ational: 'ate',\n  tional: 'tion',\n  enci: 'ence',\n  anci: 'ance',\n  izer: 'ize',\n  bli: 'ble',\n  alli: 'al',\n  entli: 'ent',\n  eli: 'e',\n  ousli: 'ous',\n  ization: 'ize',\n  ation: 'ate',\n  ator: 'ate',\n  alism: 'al',\n  iveness: 'ive',\n  fulness: 'ful',\n  ousness: 'ous',\n  aliti: 'al',\n  iviti: 'ive',\n  biliti: 'ble',\n  logi: 'log'\n};\nconst step3List = {\n  icate: 'ic',\n  ative: '',\n  alize: 'al',\n  iciti: 'ic',\n  ical: 'ic',\n  ful: '',\n  ness: ''\n};\n// Consonant\nconst c = '[^aeiou]';\n// Vowel\nconst v = '[aeiouy]';\n// Consonant sequence\nconst C = c + '[^aeiouy]*';\n// Vowel sequence\nconst V = v + '[aeiou]*';\n// [C]VC... is m>0\nconst mgr0 = '^(' + C + ')?' + V + C;\n// [C]VC[V] is m=1\nconst meq1 = '^(' + C + ')?' + V + C + '(' + V + ')?$';\n// [C]VCVC... is m>1\nconst mgr1 = '^(' + C + ')?' + V + C + V + C;\n// vowel in stem\nconst s_v = '^(' + C + ')?' + v;\nexport function stemmer(w) {\n  let stem;\n  let suffix;\n  let re;\n  let re2;\n  let re3;\n  let re4;\n  if (w.length < 3) {\n    return w;\n  }\n  const firstch = w.substring(0, 1);\n  if (firstch == 'y') {\n    w = firstch.toUpperCase() + w.substring(1);\n  }\n  re = /^(.+?)(ss|i)es$/;\n  re2 = /^(.+?)([^s])s$/;\n  if (re.test(w)) {\n    w = w.replace(re, '$1$2');\n  } else if (re2.test(w)) {\n    w = w.replace(re2, '$1$2');\n  }\n  re = /^(.+?)eed$/;\n  re2 = /^(.+?)(ed|ing)$/;\n  if (re.test(w)) {\n    const fp = re.exec(w);\n    re = new RegExp(mgr0);\n    if (re.test(fp[1])) {\n      re = /.$/;\n      w = w.replace(re, '');\n    }\n  } else if (re2.test(w)) {\n    const fp = re2.exec(w);\n    stem = fp[1];\n    re2 = new RegExp(s_v);\n    if (re2.test(stem)) {\n      w = stem;\n      re2 = /(at|bl|iz)$/;\n      re3 = new RegExp('([^aeiouylsz])\\\\1$');\n      re4 = new RegExp('^' + C + v + '[^aeiouwxy]$');\n      if (re2.test(w)) {\n        w = w + 'e';\n      } else if (re3.test(w)) {\n        re = /.$/;\n        w = w.replace(re, '');\n      } else if (re4.test(w)) {\n        w = w + 'e';\n      }\n    }\n  }\n  re = /^(.+?)y$/;\n  if (re.test(w)) {\n    const fp = re.exec(w);\n    stem = fp === null || fp === void 0 ? void 0 : fp[1];\n    re = new RegExp(s_v);\n    if (stem && re.test(stem)) {\n      w = stem + 'i';\n    }\n  }\n  re = /^(.+?)(ational|tional|enci|anci|izer|bli|alli|entli|eli|ousli|ization|ation|ator|alism|iveness|fulness|ousness|aliti|iviti|biliti|logi)$/;\n  if (re.test(w)) {\n    const fp = re.exec(w);\n    stem = fp === null || fp === void 0 ? void 0 : fp[1];\n    suffix = fp === null || fp === void 0 ? void 0 : fp[2];\n    re = new RegExp(mgr0);\n    if (stem && re.test(stem)) {\n      // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n      // @ts-ignore\n      w = stem + step2List[suffix];\n    }\n  }\n  re = /^(.+?)(icate|ative|alize|iciti|ical|ful|ness)$/;\n  if (re.test(w)) {\n    const fp = re.exec(w);\n    stem = fp === null || fp === void 0 ? void 0 : fp[1];\n    suffix = fp === null || fp === void 0 ? void 0 : fp[2];\n    re = new RegExp(mgr0);\n    // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n    // @ts-ignore\n    if (stem && re.test(stem)) {\n      // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n      // @ts-ignore\n      w = stem + step3List[suffix];\n    }\n  }\n  re = /^(.+?)(al|ance|ence|er|ic|able|ible|ant|ement|ment|ent|ou|ism|ate|iti|ous|ive|ize)$/;\n  re2 = /^(.+?)(s|t)(ion)$/;\n  if (re.test(w)) {\n    const fp = re.exec(w);\n    stem = fp === null || fp === void 0 ? void 0 : fp[1];\n    re = new RegExp(mgr1);\n    if (stem && re.test(stem)) {\n      w = stem;\n    }\n  } else if (re2.test(w)) {\n    var _ref, _ref2;\n    const fp = re2.exec(w);\n    stem = (_ref = (_ref2 = fp === null || fp === void 0 ? void 0 : fp[1]) !== null && _ref2 !== void 0 ? _ref2 : '' + (fp === null || fp === void 0 ? void 0 : fp[2])) !== null && _ref !== void 0 ? _ref : '';\n    re2 = new RegExp(mgr1);\n    if (re2.test(stem)) {\n      w = stem;\n    }\n  }\n  re = /^(.+?)e$/;\n  if (re.test(w)) {\n    const fp = re.exec(w);\n    stem = fp === null || fp === void 0 ? void 0 : fp[1];\n    re = new RegExp(mgr1);\n    re2 = new RegExp(meq1);\n    re3 = new RegExp('^' + C + v + '[^aeiouwxy]$');\n    if (stem && (re.test(stem) || re2.test(stem) && !re3.test(stem))) {\n      w = stem;\n    }\n  }\n  re = /ll$/;\n  re2 = new RegExp(mgr1);\n  if (re.test(w) && re2.test(w)) {\n    re = /.$/;\n    w = w.replace(re, '');\n  }\n  if (firstch == 'y') {\n    w = firstch.toLowerCase() + w.substring(1);\n  }\n  return w;\n}","map":{"version":3,"names":["step2List","ational","tional","enci","anci","izer","bli","alli","entli","eli","ousli","ization","ation","ator","alism","iveness","fulness","ousness","aliti","iviti","biliti","logi","step3List","icate","ative","alize","iciti","ical","ful","ness","c","v","C","V","mgr0","meq1","mgr1","s_v","stemmer","w","stem","suffix","re","re2","re3","re4","length","firstch","substring","toUpperCase","test","replace","fp","exec","RegExp","_ref","_ref2","toLowerCase"],"sources":["/home/krug/Coding/JavaScript/Websites/Personal/personal/node_modules/.pnpm/@orama+orama@1.2.11/node_modules/@orama/orama/src/components/tokenizer/english-stemmer.ts"],"sourcesContent":["// eslint-disable-next-line @typescript-eslint/ban-ts-comment\n// @ts-nocheck\n\nconst step2List = {\n  ational: 'ate',\n  tional: 'tion',\n  enci: 'ence',\n  anci: 'ance',\n  izer: 'ize',\n  bli: 'ble',\n  alli: 'al',\n  entli: 'ent',\n  eli: 'e',\n  ousli: 'ous',\n  ization: 'ize',\n  ation: 'ate',\n  ator: 'ate',\n  alism: 'al',\n  iveness: 'ive',\n  fulness: 'ful',\n  ousness: 'ous',\n  aliti: 'al',\n  iviti: 'ive',\n  biliti: 'ble',\n  logi: 'log',\n}\n\nconst step3List = {\n  icate: 'ic',\n  ative: '',\n  alize: 'al',\n  iciti: 'ic',\n  ical: 'ic',\n  ful: '',\n  ness: '',\n}\n\n// Consonant\nconst c = '[^aeiou]'\n// Vowel\nconst v = '[aeiouy]'\n// Consonant sequence\nconst C = c + '[^aeiouy]*'\n// Vowel sequence\nconst V = v + '[aeiou]*'\n\n// [C]VC... is m>0\nconst mgr0 = '^(' + C + ')?' + V + C\n// [C]VC[V] is m=1\nconst meq1 = '^(' + C + ')?' + V + C + '(' + V + ')?$'\n// [C]VCVC... is m>1\nconst mgr1 = '^(' + C + ')?' + V + C + V + C\n// vowel in stem\nconst s_v = '^(' + C + ')?' + v\n\nexport function stemmer(w) {\n  let stem\n  let suffix\n  let re\n  let re2\n  let re3\n  let re4\n\n  if (w.length < 3) {\n    return w\n  }\n\n  const firstch = w.substring(0, 1)\n  if (firstch == 'y') {\n    w = firstch.toUpperCase() + w.substring(1)\n  }\n\n  re = /^(.+?)(ss|i)es$/\n  re2 = /^(.+?)([^s])s$/\n\n  if (re.test(w)) {\n    w = w.replace(re, '$1$2')\n  } else if (re2.test(w)) {\n    w = w.replace(re2, '$1$2')\n  }\n\n  re = /^(.+?)eed$/\n  re2 = /^(.+?)(ed|ing)$/\n  if (re.test(w)) {\n    const fp = re.exec(w)\n    re = new RegExp(mgr0)\n    if (re.test(fp[1])) {\n      re = /.$/\n      w = w.replace(re, '')\n    }\n  } else if (re2.test(w)) {\n    const fp = re2.exec(w)\n    stem = fp[1]\n    re2 = new RegExp(s_v)\n    if (re2.test(stem)) {\n      w = stem\n      re2 = /(at|bl|iz)$/\n      re3 = new RegExp('([^aeiouylsz])\\\\1$')\n      re4 = new RegExp('^' + C + v + '[^aeiouwxy]$')\n      if (re2.test(w)) {\n        w = w + 'e'\n      } else if (re3.test(w)) {\n        re = /.$/\n        w = w.replace(re, '')\n      } else if (re4.test(w)) {\n        w = w + 'e'\n      }\n    }\n  }\n\n  re = /^(.+?)y$/\n  if (re.test(w)) {\n    const fp = re.exec(w)\n    stem = fp?.[1]\n    re = new RegExp(s_v)\n    if (stem && re.test(stem)) {\n      w = stem + 'i'\n    }\n  }\n\n  re =\n    /^(.+?)(ational|tional|enci|anci|izer|bli|alli|entli|eli|ousli|ization|ation|ator|alism|iveness|fulness|ousness|aliti|iviti|biliti|logi)$/\n  if (re.test(w)) {\n    const fp = re.exec(w)\n    stem = fp?.[1]\n    suffix = fp?.[2]\n    re = new RegExp(mgr0)\n    if (stem && re.test(stem)) {\n      // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n      // @ts-ignore\n      w = stem + step2List[suffix]\n    }\n  }\n\n  re = /^(.+?)(icate|ative|alize|iciti|ical|ful|ness)$/\n  if (re.test(w)) {\n    const fp = re.exec(w)\n    stem = fp?.[1]\n    suffix = fp?.[2]\n    re = new RegExp(mgr0)\n    // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n    // @ts-ignore\n    if (stem && re.test(stem)) {\n      // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n      // @ts-ignore\n      w = stem + step3List[suffix]\n    }\n  }\n\n  re = /^(.+?)(al|ance|ence|er|ic|able|ible|ant|ement|ment|ent|ou|ism|ate|iti|ous|ive|ize)$/\n  re2 = /^(.+?)(s|t)(ion)$/\n  if (re.test(w)) {\n    const fp = re.exec(w)\n    stem = fp?.[1]\n    re = new RegExp(mgr1)\n    if (stem && re.test(stem)) {\n      w = stem\n    }\n  } else if (re2.test(w)) {\n    const fp = re2.exec(w)\n    stem = fp?.[1] ?? '' + fp?.[2] ?? ''\n    re2 = new RegExp(mgr1)\n    if (re2.test(stem)) {\n      w = stem\n    }\n  }\n\n  re = /^(.+?)e$/\n  if (re.test(w)) {\n    const fp = re.exec(w)\n    stem = fp?.[1]\n    re = new RegExp(mgr1)\n    re2 = new RegExp(meq1)\n    re3 = new RegExp('^' + C + v + '[^aeiouwxy]$')\n    if (stem && (re.test(stem) || (re2.test(stem) && !re3.test(stem)))) {\n      w = stem\n    }\n  }\n\n  re = /ll$/\n  re2 = new RegExp(mgr1)\n  if (re.test(w) && re2.test(w)) {\n    re = /.$/\n    w = w.replace(re, '')\n  }\n\n  if (firstch == 'y') {\n    w = firstch.toLowerCase() + w.substring(1)\n  }\n\n  return w\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}