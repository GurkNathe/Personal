{"ast":null,"code":"const FilmShader = {\n  uniforms: {\n    tDiffuse: {\n      value: null\n    },\n    time: {\n      value: 0\n    },\n    nIntensity: {\n      value: 0.5\n    },\n    sIntensity: {\n      value: 0.05\n    },\n    sCount: {\n      value: 4096\n    },\n    grayscale: {\n      value: 1\n    }\n  },\n  vertexShader: [\"varying vec2 vUv;\", \"void main() {\", \"\tvUv = uv;\", \"\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\", \"}\"].join(\"\\n\"),\n  fragmentShader: [\"#include <common>\",\n  // control parameter\n  \"uniform float time;\", \"uniform bool grayscale;\",\n  // noise effect intensity value (0 = no effect, 1 = full effect)\n  \"uniform float nIntensity;\",\n  // scanlines effect intensity value (0 = no effect, 1 = full effect)\n  \"uniform float sIntensity;\",\n  // scanlines effect count value (0 = no effect, 4096 = full effect)\n  \"uniform float sCount;\", \"uniform sampler2D tDiffuse;\", \"varying vec2 vUv;\", \"void main() {\",\n  // sample the source\n  \"\tvec4 cTextureScreen = texture2D( tDiffuse, vUv );\",\n  // make some noise\n  \"\tfloat dx = rand( vUv + time );\",\n  // add noise\n  \"\tvec3 cResult = cTextureScreen.rgb + cTextureScreen.rgb * clamp( 0.1 + dx, 0.0, 1.0 );\",\n  // get us a sine and cosine\n  \"\tvec2 sc = vec2( sin( vUv.y * sCount ), cos( vUv.y * sCount ) );\",\n  // add scanlines\n  \"\tcResult += cTextureScreen.rgb * vec3( sc.x, sc.y, sc.x ) * sIntensity;\",\n  // interpolate between source and result by intensity\n  \"\tcResult = cTextureScreen.rgb + clamp( nIntensity, 0.0,1.0 ) * ( cResult - cTextureScreen.rgb );\",\n  // convert to grayscale if desired\n  \"\tif( grayscale ) {\", \"\t\tcResult = vec3( cResult.r * 0.3 + cResult.g * 0.59 + cResult.b * 0.11 );\", \"\t}\", \"\tgl_FragColor =  vec4( cResult, cTextureScreen.a );\", \"}\"].join(\"\\n\")\n};\nexport { FilmShader };","map":{"version":3,"names":["FilmShader","uniforms","tDiffuse","value","time","nIntensity","sIntensity","sCount","grayscale","vertexShader","join","fragmentShader"],"sources":["/home/krug/Coding/JavaScript/Websites/Personal/personal/node_modules/.pnpm/three-stdlib@2.23.7_three@0.151.3/node_modules/three-stdlib/shaders/FilmShader.js"],"sourcesContent":["const FilmShader = {\n  uniforms: {\n    tDiffuse: { value: null },\n    time: { value: 0 },\n    nIntensity: { value: 0.5 },\n    sIntensity: { value: 0.05 },\n    sCount: { value: 4096 },\n    grayscale: { value: 1 }\n  },\n  vertexShader: [\n    \"varying vec2 vUv;\",\n    \"void main() {\",\n    \"\tvUv = uv;\",\n    \"\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\",\n    \"}\"\n  ].join(\"\\n\"),\n  fragmentShader: [\n    \"#include <common>\",\n    // control parameter\n    \"uniform float time;\",\n    \"uniform bool grayscale;\",\n    // noise effect intensity value (0 = no effect, 1 = full effect)\n    \"uniform float nIntensity;\",\n    // scanlines effect intensity value (0 = no effect, 1 = full effect)\n    \"uniform float sIntensity;\",\n    // scanlines effect count value (0 = no effect, 4096 = full effect)\n    \"uniform float sCount;\",\n    \"uniform sampler2D tDiffuse;\",\n    \"varying vec2 vUv;\",\n    \"void main() {\",\n    // sample the source\n    \"\tvec4 cTextureScreen = texture2D( tDiffuse, vUv );\",\n    // make some noise\n    \"\tfloat dx = rand( vUv + time );\",\n    // add noise\n    \"\tvec3 cResult = cTextureScreen.rgb + cTextureScreen.rgb * clamp( 0.1 + dx, 0.0, 1.0 );\",\n    // get us a sine and cosine\n    \"\tvec2 sc = vec2( sin( vUv.y * sCount ), cos( vUv.y * sCount ) );\",\n    // add scanlines\n    \"\tcResult += cTextureScreen.rgb * vec3( sc.x, sc.y, sc.x ) * sIntensity;\",\n    // interpolate between source and result by intensity\n    \"\tcResult = cTextureScreen.rgb + clamp( nIntensity, 0.0,1.0 ) * ( cResult - cTextureScreen.rgb );\",\n    // convert to grayscale if desired\n    \"\tif( grayscale ) {\",\n    \"\t\tcResult = vec3( cResult.r * 0.3 + cResult.g * 0.59 + cResult.b * 0.11 );\",\n    \"\t}\",\n    \"\tgl_FragColor =  vec4( cResult, cTextureScreen.a );\",\n    \"}\"\n  ].join(\"\\n\")\n};\nexport {\n  FilmShader\n};\n"],"mappings":"AAAA,MAAMA,UAAU,GAAG;EACjBC,QAAQ,EAAE;IACRC,QAAQ,EAAE;MAAEC,KAAK,EAAE;IAAK,CAAC;IACzBC,IAAI,EAAE;MAAED,KAAK,EAAE;IAAE,CAAC;IAClBE,UAAU,EAAE;MAAEF,KAAK,EAAE;IAAI,CAAC;IAC1BG,UAAU,EAAE;MAAEH,KAAK,EAAE;IAAK,CAAC;IAC3BI,MAAM,EAAE;MAAEJ,KAAK,EAAE;IAAK,CAAC;IACvBK,SAAS,EAAE;MAAEL,KAAK,EAAE;IAAE;EACxB,CAAC;EACDM,YAAY,EAAE,CACZ,mBAAmB,EACnB,eAAe,EACf,YAAY,EACZ,4EAA4E,EAC5E,GAAG,CACJ,CAACC,IAAI,CAAC,IAAI,CAAC;EACZC,cAAc,EAAE,CACd,mBAAmB;EACnB;EACA,qBAAqB,EACrB,yBAAyB;EACzB;EACA,2BAA2B;EAC3B;EACA,2BAA2B;EAC3B;EACA,uBAAuB,EACvB,6BAA6B,EAC7B,mBAAmB,EACnB,eAAe;EACf;EACA,oDAAoD;EACpD;EACA,iCAAiC;EACjC;EACA,wFAAwF;EACxF;EACA,kEAAkE;EAClE;EACA,yEAAyE;EACzE;EACA,kGAAkG;EAClG;EACA,oBAAoB,EACpB,4EAA4E,EAC5E,IAAI,EACJ,qDAAqD,EACrD,GAAG,CACJ,CAACD,IAAI,CAAC,IAAI;AACb,CAAC;AACD,SACEV,UAAU"},"metadata":{},"sourceType":"module","externalDependencies":[]}