{"ast":null,"code":"import _classCallCheck from \"/home/krug/Coding/JavaScript/Websites/Personal/personal/node_modules/.pnpm/@babel+runtime@7.22.3/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/home/krug/Coding/JavaScript/Websites/Personal/personal/node_modules/.pnpm/@babel+runtime@7.22.3/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"/home/krug/Coding/JavaScript/Websites/Personal/personal/node_modules/.pnpm/@babel+runtime@7.22.3/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/home/krug/Coding/JavaScript/Websites/Personal/personal/node_modules/.pnpm/@babel+runtime@7.22.3/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { Loader, LoaderUtils, FileLoader, TextureLoader, RepeatWrapping, ClampToEdgeWrapping, Texture, MeshPhongMaterial, MeshLambertMaterial, Color, EquirectangularReflectionMapping, Matrix4, Group, Bone, PropertyBinding, Object3D, OrthographicCamera, PerspectiveCamera, PointLight, MathUtils, SpotLight, DirectionalLight, SkinnedMesh, Mesh, LineBasicMaterial, Line, Vector3, Skeleton, AmbientLight, BufferGeometry, Float32BufferAttribute, Uint16BufferAttribute, Matrix3, Vector4, AnimationClip, Quaternion, Euler, VectorKeyframeTrack, QuaternionKeyframeTrack, NumberKeyframeTrack } from \"three\";\nimport { unzlibSync } from \"fflate\";\nimport { NURBSCurve } from \"../curves/NURBSCurve.js\";\nvar fbxTree;\nvar connections;\nvar sceneGraph;\nvar FBXLoader = /*#__PURE__*/function (_Loader) {\n  _inherits(FBXLoader, _Loader);\n  var _super = _createSuper(FBXLoader);\n  function FBXLoader(manager) {\n    _classCallCheck(this, FBXLoader);\n    return _super.call(this, manager);\n  }\n  _createClass(FBXLoader, [{\n    key: \"load\",\n    value: function load(url, onLoad, onProgress, onError) {\n      var scope = this;\n      var path = scope.path === \"\" ? LoaderUtils.extractUrlBase(url) : scope.path;\n      var loader = new FileLoader(this.manager);\n      loader.setPath(scope.path);\n      loader.setResponseType(\"arraybuffer\");\n      loader.setRequestHeader(scope.requestHeader);\n      loader.setWithCredentials(scope.withCredentials);\n      loader.load(url, function (buffer) {\n        try {\n          onLoad(scope.parse(buffer, path));\n        } catch (e) {\n          if (onError) {\n            onError(e);\n          } else {\n            console.error(e);\n          }\n          scope.manager.itemError(url);\n        }\n      }, onProgress, onError);\n    }\n  }, {\n    key: \"parse\",\n    value: function parse(FBXBuffer, path) {\n      if (isFbxFormatBinary(FBXBuffer)) {\n        fbxTree = new BinaryParser().parse(FBXBuffer);\n      } else {\n        var FBXText = convertArrayBufferToString(FBXBuffer);\n        if (!isFbxFormatASCII(FBXText)) {\n          throw new Error(\"THREE.FBXLoader: Unknown format.\");\n        }\n        if (getFbxVersion(FBXText) < 7e3) {\n          throw new Error(\"THREE.FBXLoader: FBX version not supported, FileVersion: \" + getFbxVersion(FBXText));\n        }\n        fbxTree = new TextParser().parse(FBXText);\n      }\n      var textureLoader = new TextureLoader(this.manager).setPath(this.resourcePath || path).setCrossOrigin(this.crossOrigin);\n      return new FBXTreeParser(textureLoader, this.manager).parse(fbxTree);\n    }\n  }]);\n  return FBXLoader;\n}(Loader);\nvar FBXTreeParser = /*#__PURE__*/function () {\n  function FBXTreeParser(textureLoader, manager) {\n    _classCallCheck(this, FBXTreeParser);\n    this.textureLoader = textureLoader;\n    this.manager = manager;\n  }\n  _createClass(FBXTreeParser, [{\n    key: \"parse\",\n    value: function parse() {\n      connections = this.parseConnections();\n      var images = this.parseImages();\n      var textures = this.parseTextures(images);\n      var materials = this.parseMaterials(textures);\n      var deformers = this.parseDeformers();\n      var geometryMap = new GeometryParser().parse(deformers);\n      this.parseScene(deformers, geometryMap, materials);\n      return sceneGraph;\n    }\n    // Parses FBXTree.Connections which holds parent-child connections between objects (e.g. material -> texture, model->geometry )\n    // and details the connection type\n  }, {\n    key: \"parseConnections\",\n    value: function parseConnections() {\n      var connectionMap = /* @__PURE__ */new Map();\n      if (\"Connections\" in fbxTree) {\n        var rawConnections = fbxTree.Connections.connections;\n        rawConnections.forEach(function (rawConnection) {\n          var fromID = rawConnection[0];\n          var toID = rawConnection[1];\n          var relationship = rawConnection[2];\n          if (!connectionMap.has(fromID)) {\n            connectionMap.set(fromID, {\n              parents: [],\n              children: []\n            });\n          }\n          var parentRelationship = {\n            ID: toID,\n            relationship: relationship\n          };\n          connectionMap.get(fromID).parents.push(parentRelationship);\n          if (!connectionMap.has(toID)) {\n            connectionMap.set(toID, {\n              parents: [],\n              children: []\n            });\n          }\n          var childRelationship = {\n            ID: fromID,\n            relationship: relationship\n          };\n          connectionMap.get(toID).children.push(childRelationship);\n        });\n      }\n      return connectionMap;\n    }\n    // Parse FBXTree.Objects.Video for embedded image data\n    // These images are connected to textures in FBXTree.Objects.Textures\n    // via FBXTree.Connections.\n  }, {\n    key: \"parseImages\",\n    value: function parseImages() {\n      var images = {};\n      var blobs = {};\n      if (\"Video\" in fbxTree.Objects) {\n        var videoNodes = fbxTree.Objects.Video;\n        for (var nodeID in videoNodes) {\n          var videoNode = videoNodes[nodeID];\n          var id = parseInt(nodeID);\n          images[id] = videoNode.RelativeFilename || videoNode.Filename;\n          if (\"Content\" in videoNode) {\n            var arrayBufferContent = videoNode.Content instanceof ArrayBuffer && videoNode.Content.byteLength > 0;\n            var base64Content = typeof videoNode.Content === \"string\" && videoNode.Content !== \"\";\n            if (arrayBufferContent || base64Content) {\n              var image = this.parseImage(videoNodes[nodeID]);\n              blobs[videoNode.RelativeFilename || videoNode.Filename] = image;\n            }\n          }\n        }\n      }\n      for (var _id in images) {\n        var filename = images[_id];\n        if (blobs[filename] !== void 0) images[_id] = blobs[filename];else images[_id] = images[_id].split(\"\\\\\").pop();\n      }\n      return images;\n    }\n    // Parse embedded image data in FBXTree.Video.Content\n  }, {\n    key: \"parseImage\",\n    value: function parseImage(videoNode) {\n      var content = videoNode.Content;\n      var fileName = videoNode.RelativeFilename || videoNode.Filename;\n      var extension = fileName.slice(fileName.lastIndexOf(\".\") + 1).toLowerCase();\n      var type;\n      switch (extension) {\n        case \"bmp\":\n          type = \"image/bmp\";\n          break;\n        case \"jpg\":\n        case \"jpeg\":\n          type = \"image/jpeg\";\n          break;\n        case \"png\":\n          type = \"image/png\";\n          break;\n        case \"tif\":\n          type = \"image/tiff\";\n          break;\n        case \"tga\":\n          if (this.manager.getHandler(\".tga\") === null) {\n            console.warn(\"FBXLoader: TGA loader not found, skipping \", fileName);\n          }\n          type = \"image/tga\";\n          break;\n        default:\n          console.warn('FBXLoader: Image type \"' + extension + '\" is not supported.');\n          return;\n      }\n      if (typeof content === \"string\") {\n        return \"data:\" + type + \";base64,\" + content;\n      } else {\n        var array = new Uint8Array(content);\n        return window.URL.createObjectURL(new Blob([array], {\n          type: type\n        }));\n      }\n    }\n    // Parse nodes in FBXTree.Objects.Texture\n    // These contain details such as UV scaling, cropping, rotation etc and are connected\n    // to images in FBXTree.Objects.Video\n  }, {\n    key: \"parseTextures\",\n    value: function parseTextures(images) {\n      var textureMap = /* @__PURE__ */new Map();\n      if (\"Texture\" in fbxTree.Objects) {\n        var textureNodes = fbxTree.Objects.Texture;\n        for (var nodeID in textureNodes) {\n          var texture = this.parseTexture(textureNodes[nodeID], images);\n          textureMap.set(parseInt(nodeID), texture);\n        }\n      }\n      return textureMap;\n    }\n    // Parse individual node in FBXTree.Objects.Texture\n  }, {\n    key: \"parseTexture\",\n    value: function parseTexture(textureNode, images) {\n      var texture = this.loadTexture(textureNode, images);\n      texture.ID = textureNode.id;\n      texture.name = textureNode.attrName;\n      var wrapModeU = textureNode.WrapModeU;\n      var wrapModeV = textureNode.WrapModeV;\n      var valueU = wrapModeU !== void 0 ? wrapModeU.value : 0;\n      var valueV = wrapModeV !== void 0 ? wrapModeV.value : 0;\n      texture.wrapS = valueU === 0 ? RepeatWrapping : ClampToEdgeWrapping;\n      texture.wrapT = valueV === 0 ? RepeatWrapping : ClampToEdgeWrapping;\n      if (\"Scaling\" in textureNode) {\n        var values = textureNode.Scaling.value;\n        texture.repeat.x = values[0];\n        texture.repeat.y = values[1];\n      }\n      return texture;\n    }\n    // load a texture specified as a blob or data URI, or via an external URL using TextureLoader\n  }, {\n    key: \"loadTexture\",\n    value: function loadTexture(textureNode, images) {\n      var fileName;\n      var currentPath = this.textureLoader.path;\n      var children = connections.get(textureNode.id).children;\n      if (children !== void 0 && children.length > 0 && images[children[0].ID] !== void 0) {\n        fileName = images[children[0].ID];\n        if (fileName.indexOf(\"blob:\") === 0 || fileName.indexOf(\"data:\") === 0) {\n          this.textureLoader.setPath(void 0);\n        }\n      }\n      var texture;\n      var extension = textureNode.FileName.slice(-3).toLowerCase();\n      if (extension === \"tga\") {\n        var loader = this.manager.getHandler(\".tga\");\n        if (loader === null) {\n          console.warn(\"FBXLoader: TGA loader not found, creating placeholder texture for\", textureNode.RelativeFilename);\n          texture = new Texture();\n        } else {\n          loader.setPath(this.textureLoader.path);\n          texture = loader.load(fileName);\n        }\n      } else if (extension === \"psd\") {\n        console.warn(\"FBXLoader: PSD textures are not supported, creating placeholder texture for\", textureNode.RelativeFilename);\n        texture = new Texture();\n      } else {\n        texture = this.textureLoader.load(fileName);\n      }\n      this.textureLoader.setPath(currentPath);\n      return texture;\n    }\n    // Parse nodes in FBXTree.Objects.Material\n  }, {\n    key: \"parseMaterials\",\n    value: function parseMaterials(textureMap) {\n      var materialMap = /* @__PURE__ */new Map();\n      if (\"Material\" in fbxTree.Objects) {\n        var materialNodes = fbxTree.Objects.Material;\n        for (var nodeID in materialNodes) {\n          var material = this.parseMaterial(materialNodes[nodeID], textureMap);\n          if (material !== null) materialMap.set(parseInt(nodeID), material);\n        }\n      }\n      return materialMap;\n    }\n    // Parse single node in FBXTree.Objects.Material\n    // Materials are connected to texture maps in FBXTree.Objects.Textures\n    // FBX format currently only supports Lambert and Phong shading models\n  }, {\n    key: \"parseMaterial\",\n    value: function parseMaterial(materialNode, textureMap) {\n      var ID = materialNode.id;\n      var name = materialNode.attrName;\n      var type = materialNode.ShadingModel;\n      if (typeof type === \"object\") {\n        type = type.value;\n      }\n      if (!connections.has(ID)) return null;\n      var parameters = this.parseParameters(materialNode, textureMap, ID);\n      var material;\n      switch (type.toLowerCase()) {\n        case \"phong\":\n          material = new MeshPhongMaterial();\n          break;\n        case \"lambert\":\n          material = new MeshLambertMaterial();\n          break;\n        default:\n          console.warn('THREE.FBXLoader: unknown material type \"%s\". Defaulting to MeshPhongMaterial.', type);\n          material = new MeshPhongMaterial();\n          break;\n      }\n      material.setValues(parameters);\n      material.name = name;\n      return material;\n    }\n    // Parse FBX material and return parameters suitable for a three.js material\n    // Also parse the texture map and return any textures associated with the material\n  }, {\n    key: \"parseParameters\",\n    value: function parseParameters(materialNode, textureMap, ID) {\n      var parameters = {};\n      if (materialNode.BumpFactor) {\n        parameters.bumpScale = materialNode.BumpFactor.value;\n      }\n      if (materialNode.Diffuse) {\n        parameters.color = new Color().fromArray(materialNode.Diffuse.value);\n      } else if (materialNode.DiffuseColor && (materialNode.DiffuseColor.type === \"Color\" || materialNode.DiffuseColor.type === \"ColorRGB\")) {\n        parameters.color = new Color().fromArray(materialNode.DiffuseColor.value);\n      }\n      if (materialNode.DisplacementFactor) {\n        parameters.displacementScale = materialNode.DisplacementFactor.value;\n      }\n      if (materialNode.Emissive) {\n        parameters.emissive = new Color().fromArray(materialNode.Emissive.value);\n      } else if (materialNode.EmissiveColor && (materialNode.EmissiveColor.type === \"Color\" || materialNode.EmissiveColor.type === \"ColorRGB\")) {\n        parameters.emissive = new Color().fromArray(materialNode.EmissiveColor.value);\n      }\n      if (materialNode.EmissiveFactor) {\n        parameters.emissiveIntensity = parseFloat(materialNode.EmissiveFactor.value);\n      }\n      if (materialNode.Opacity) {\n        parameters.opacity = parseFloat(materialNode.Opacity.value);\n      }\n      if (parameters.opacity < 1) {\n        parameters.transparent = true;\n      }\n      if (materialNode.ReflectionFactor) {\n        parameters.reflectivity = materialNode.ReflectionFactor.value;\n      }\n      if (materialNode.Shininess) {\n        parameters.shininess = materialNode.Shininess.value;\n      }\n      if (materialNode.Specular) {\n        parameters.specular = new Color().fromArray(materialNode.Specular.value);\n      } else if (materialNode.SpecularColor && materialNode.SpecularColor.type === \"Color\") {\n        parameters.specular = new Color().fromArray(materialNode.SpecularColor.value);\n      }\n      var scope = this;\n      connections.get(ID).children.forEach(function (child) {\n        var type = child.relationship;\n        switch (type) {\n          case \"Bump\":\n            parameters.bumpMap = scope.getTexture(textureMap, child.ID);\n            break;\n          case \"Maya|TEX_ao_map\":\n            parameters.aoMap = scope.getTexture(textureMap, child.ID);\n            break;\n          case \"DiffuseColor\":\n          case \"Maya|TEX_color_map\":\n            parameters.map = scope.getTexture(textureMap, child.ID);\n            if (parameters.map !== void 0) {\n              if (\"colorSpace\" in parameters.map) parameters.map.colorSpace = \"srgb\";else parameters.map.encoding = 3001;\n            }\n            break;\n          case \"DisplacementColor\":\n            parameters.displacementMap = scope.getTexture(textureMap, child.ID);\n            break;\n          case \"EmissiveColor\":\n            parameters.emissiveMap = scope.getTexture(textureMap, child.ID);\n            if (parameters.emissiveMap !== void 0) {\n              if (\"colorSpace\" in parameters.emissiveMap) parameters.emissiveMap.colorSpace = \"srgb\";else parameters.emissiveMap.encoding = 3001;\n            }\n            break;\n          case \"NormalMap\":\n          case \"Maya|TEX_normal_map\":\n            parameters.normalMap = scope.getTexture(textureMap, child.ID);\n            break;\n          case \"ReflectionColor\":\n            parameters.envMap = scope.getTexture(textureMap, child.ID);\n            if (parameters.envMap !== void 0) {\n              parameters.envMap.mapping = EquirectangularReflectionMapping;\n              if (\"colorSpace\" in parameters.envMap) parameters.envMap.colorSpace = \"srgb\";else parameters.envMap.encoding = 3001;\n            }\n            break;\n          case \"SpecularColor\":\n            parameters.specularMap = scope.getTexture(textureMap, child.ID);\n            if (parameters.specularMap !== void 0) {\n              if (\"colorSpace\" in parameters.specularMap) parameters.specularMap.colorSpace = \"srgb\";else parameters.specularMap.encoding = 3001;\n            }\n            break;\n          case \"TransparentColor\":\n          case \"TransparencyFactor\":\n            parameters.alphaMap = scope.getTexture(textureMap, child.ID);\n            parameters.transparent = true;\n            break;\n          case \"AmbientColor\":\n          case \"ShininessExponent\":\n          case \"SpecularFactor\":\n          case \"VectorDisplacementColor\":\n          default:\n            console.warn(\"THREE.FBXLoader: %s map is not supported in three.js, skipping texture.\", type);\n            break;\n        }\n      });\n      return parameters;\n    }\n    // get a texture from the textureMap for use by a material.\n  }, {\n    key: \"getTexture\",\n    value: function getTexture(textureMap, id) {\n      if (\"LayeredTexture\" in fbxTree.Objects && id in fbxTree.Objects.LayeredTexture) {\n        console.warn(\"THREE.FBXLoader: layered textures are not supported in three.js. Discarding all but first layer.\");\n        id = connections.get(id).children[0].ID;\n      }\n      return textureMap.get(id);\n    }\n    // Parse nodes in FBXTree.Objects.Deformer\n    // Deformer node can contain skinning or Vertex Cache animation data, however only skinning is supported here\n    // Generates map of Skeleton-like objects for use later when generating and binding skeletons.\n  }, {\n    key: \"parseDeformers\",\n    value: function parseDeformers() {\n      var skeletons = {};\n      var morphTargets = {};\n      if (\"Deformer\" in fbxTree.Objects) {\n        var DeformerNodes = fbxTree.Objects.Deformer;\n        for (var nodeID in DeformerNodes) {\n          var deformerNode = DeformerNodes[nodeID];\n          var relationships = connections.get(parseInt(nodeID));\n          if (deformerNode.attrType === \"Skin\") {\n            var skeleton = this.parseSkeleton(relationships, DeformerNodes);\n            skeleton.ID = nodeID;\n            if (relationships.parents.length > 1) {\n              console.warn(\"THREE.FBXLoader: skeleton attached to more than one geometry is not supported.\");\n            }\n            skeleton.geometryID = relationships.parents[0].ID;\n            skeletons[nodeID] = skeleton;\n          } else if (deformerNode.attrType === \"BlendShape\") {\n            var morphTarget = {\n              id: nodeID\n            };\n            morphTarget.rawTargets = this.parseMorphTargets(relationships, DeformerNodes);\n            morphTarget.id = nodeID;\n            if (relationships.parents.length > 1) {\n              console.warn(\"THREE.FBXLoader: morph target attached to more than one geometry is not supported.\");\n            }\n            morphTargets[nodeID] = morphTarget;\n          }\n        }\n      }\n      return {\n        skeletons: skeletons,\n        morphTargets: morphTargets\n      };\n    }\n    // Parse single nodes in FBXTree.Objects.Deformer\n    // The top level skeleton node has type 'Skin' and sub nodes have type 'Cluster'\n    // Each skin node represents a skeleton and each cluster node represents a bone\n  }, {\n    key: \"parseSkeleton\",\n    value: function parseSkeleton(relationships, deformerNodes) {\n      var rawBones = [];\n      relationships.children.forEach(function (child) {\n        var boneNode = deformerNodes[child.ID];\n        if (boneNode.attrType !== \"Cluster\") return;\n        var rawBone = {\n          ID: child.ID,\n          indices: [],\n          weights: [],\n          transformLink: new Matrix4().fromArray(boneNode.TransformLink.a)\n          // transform: new Matrix4().fromArray( boneNode.Transform.a ),\n          // linkMode: boneNode.Mode,\n        };\n\n        if (\"Indexes\" in boneNode) {\n          rawBone.indices = boneNode.Indexes.a;\n          rawBone.weights = boneNode.Weights.a;\n        }\n        rawBones.push(rawBone);\n      });\n      return {\n        rawBones: rawBones,\n        bones: []\n      };\n    }\n    // The top level morph deformer node has type \"BlendShape\" and sub nodes have type \"BlendShapeChannel\"\n  }, {\n    key: \"parseMorphTargets\",\n    value: function parseMorphTargets(relationships, deformerNodes) {\n      var rawMorphTargets = [];\n      for (var i = 0; i < relationships.children.length; i++) {\n        var child = relationships.children[i];\n        var morphTargetNode = deformerNodes[child.ID];\n        var rawMorphTarget = {\n          name: morphTargetNode.attrName,\n          initialWeight: morphTargetNode.DeformPercent,\n          id: morphTargetNode.id,\n          fullWeights: morphTargetNode.FullWeights.a\n        };\n        if (morphTargetNode.attrType !== \"BlendShapeChannel\") return;\n        rawMorphTarget.geoID = connections.get(parseInt(child.ID)).children.filter(function (child2) {\n          return child2.relationship === void 0;\n        })[0].ID;\n        rawMorphTargets.push(rawMorphTarget);\n      }\n      return rawMorphTargets;\n    }\n    // create the main Group() to be returned by the loader\n  }, {\n    key: \"parseScene\",\n    value: function parseScene(deformers, geometryMap, materialMap) {\n      sceneGraph = new Group();\n      var modelMap = this.parseModels(deformers.skeletons, geometryMap, materialMap);\n      var modelNodes = fbxTree.Objects.Model;\n      var scope = this;\n      modelMap.forEach(function (model) {\n        var modelNode = modelNodes[model.ID];\n        scope.setLookAtProperties(model, modelNode);\n        var parentConnections = connections.get(model.ID).parents;\n        parentConnections.forEach(function (connection) {\n          var parent = modelMap.get(connection.ID);\n          if (parent !== void 0) parent.add(model);\n        });\n        if (model.parent === null) {\n          sceneGraph.add(model);\n        }\n      });\n      this.bindSkeleton(deformers.skeletons, geometryMap, modelMap);\n      this.createAmbientLight();\n      sceneGraph.traverse(function (node) {\n        if (node.userData.transformData) {\n          if (node.parent) {\n            node.userData.transformData.parentMatrix = node.parent.matrix;\n            node.userData.transformData.parentMatrixWorld = node.parent.matrixWorld;\n          }\n          var transform = generateTransform(node.userData.transformData);\n          node.applyMatrix4(transform);\n          node.updateWorldMatrix();\n        }\n      });\n      var animations = new AnimationParser().parse();\n      if (sceneGraph.children.length === 1 && sceneGraph.children[0].isGroup) {\n        sceneGraph.children[0].animations = animations;\n        sceneGraph = sceneGraph.children[0];\n      }\n      sceneGraph.animations = animations;\n    }\n    // parse nodes in FBXTree.Objects.Model\n  }, {\n    key: \"parseModels\",\n    value: function parseModels(skeletons, geometryMap, materialMap) {\n      var modelMap = /* @__PURE__ */new Map();\n      var modelNodes = fbxTree.Objects.Model;\n      for (var nodeID in modelNodes) {\n        var id = parseInt(nodeID);\n        var node = modelNodes[nodeID];\n        var relationships = connections.get(id);\n        var model = this.buildSkeleton(relationships, skeletons, id, node.attrName);\n        if (!model) {\n          switch (node.attrType) {\n            case \"Camera\":\n              model = this.createCamera(relationships);\n              break;\n            case \"Light\":\n              model = this.createLight(relationships);\n              break;\n            case \"Mesh\":\n              model = this.createMesh(relationships, geometryMap, materialMap);\n              break;\n            case \"NurbsCurve\":\n              model = this.createCurve(relationships, geometryMap);\n              break;\n            case \"LimbNode\":\n            case \"Root\":\n              model = new Bone();\n              break;\n            case \"Null\":\n            default:\n              model = new Group();\n              break;\n          }\n          model.name = node.attrName ? PropertyBinding.sanitizeNodeName(node.attrName) : \"\";\n          model.ID = id;\n        }\n        this.getTransformData(model, node);\n        modelMap.set(id, model);\n      }\n      return modelMap;\n    }\n  }, {\n    key: \"buildSkeleton\",\n    value: function buildSkeleton(relationships, skeletons, id, name) {\n      var bone = null;\n      relationships.parents.forEach(function (parent) {\n        var _loop = function _loop() {\n          var skeleton = skeletons[ID];\n          skeleton.rawBones.forEach(function (rawBone, i) {\n            if (rawBone.ID === parent.ID) {\n              var subBone = bone;\n              bone = new Bone();\n              bone.matrixWorld.copy(rawBone.transformLink);\n              bone.name = name ? PropertyBinding.sanitizeNodeName(name) : \"\";\n              bone.ID = id;\n              skeleton.bones[i] = bone;\n              if (subBone !== null) {\n                bone.add(subBone);\n              }\n            }\n          });\n        };\n        for (var ID in skeletons) {\n          _loop();\n        }\n      });\n      return bone;\n    }\n    // create a PerspectiveCamera or OrthographicCamera\n  }, {\n    key: \"createCamera\",\n    value: function createCamera(relationships) {\n      var model;\n      var cameraAttribute;\n      relationships.children.forEach(function (child) {\n        var attr = fbxTree.Objects.NodeAttribute[child.ID];\n        if (attr !== void 0) {\n          cameraAttribute = attr;\n        }\n      });\n      if (cameraAttribute === void 0) {\n        model = new Object3D();\n      } else {\n        var type = 0;\n        if (cameraAttribute.CameraProjectionType !== void 0 && cameraAttribute.CameraProjectionType.value === 1) {\n          type = 1;\n        }\n        var nearClippingPlane = 1;\n        if (cameraAttribute.NearPlane !== void 0) {\n          nearClippingPlane = cameraAttribute.NearPlane.value / 1e3;\n        }\n        var farClippingPlane = 1e3;\n        if (cameraAttribute.FarPlane !== void 0) {\n          farClippingPlane = cameraAttribute.FarPlane.value / 1e3;\n        }\n        var width = window.innerWidth;\n        var height = window.innerHeight;\n        if (cameraAttribute.AspectWidth !== void 0 && cameraAttribute.AspectHeight !== void 0) {\n          width = cameraAttribute.AspectWidth.value;\n          height = cameraAttribute.AspectHeight.value;\n        }\n        var aspect = width / height;\n        var fov = 45;\n        if (cameraAttribute.FieldOfView !== void 0) {\n          fov = cameraAttribute.FieldOfView.value;\n        }\n        var focalLength = cameraAttribute.FocalLength ? cameraAttribute.FocalLength.value : null;\n        switch (type) {\n          case 0:\n            model = new PerspectiveCamera(fov, aspect, nearClippingPlane, farClippingPlane);\n            if (focalLength !== null) model.setFocalLength(focalLength);\n            break;\n          case 1:\n            model = new OrthographicCamera(-width / 2, width / 2, height / 2, -height / 2, nearClippingPlane, farClippingPlane);\n            break;\n          default:\n            console.warn(\"THREE.FBXLoader: Unknown camera type \" + type + \".\");\n            model = new Object3D();\n            break;\n        }\n      }\n      return model;\n    }\n    // Create a DirectionalLight, PointLight or SpotLight\n  }, {\n    key: \"createLight\",\n    value: function createLight(relationships) {\n      var model;\n      var lightAttribute;\n      relationships.children.forEach(function (child) {\n        var attr = fbxTree.Objects.NodeAttribute[child.ID];\n        if (attr !== void 0) {\n          lightAttribute = attr;\n        }\n      });\n      if (lightAttribute === void 0) {\n        model = new Object3D();\n      } else {\n        var type;\n        if (lightAttribute.LightType === void 0) {\n          type = 0;\n        } else {\n          type = lightAttribute.LightType.value;\n        }\n        var color = 16777215;\n        if (lightAttribute.Color !== void 0) {\n          color = new Color().fromArray(lightAttribute.Color.value);\n        }\n        var intensity = lightAttribute.Intensity === void 0 ? 1 : lightAttribute.Intensity.value / 100;\n        if (lightAttribute.CastLightOnObject !== void 0 && lightAttribute.CastLightOnObject.value === 0) {\n          intensity = 0;\n        }\n        var distance = 0;\n        if (lightAttribute.FarAttenuationEnd !== void 0) {\n          if (lightAttribute.EnableFarAttenuation !== void 0 && lightAttribute.EnableFarAttenuation.value === 0) {\n            distance = 0;\n          } else {\n            distance = lightAttribute.FarAttenuationEnd.value;\n          }\n        }\n        var decay = 1;\n        switch (type) {\n          case 0:\n            model = new PointLight(color, intensity, distance, decay);\n            break;\n          case 1:\n            model = new DirectionalLight(color, intensity);\n            break;\n          case 2:\n            var angle = Math.PI / 3;\n            if (lightAttribute.InnerAngle !== void 0) {\n              angle = MathUtils.degToRad(lightAttribute.InnerAngle.value);\n            }\n            var penumbra = 0;\n            if (lightAttribute.OuterAngle !== void 0) {\n              penumbra = MathUtils.degToRad(lightAttribute.OuterAngle.value);\n              penumbra = Math.max(penumbra, 1);\n            }\n            model = new SpotLight(color, intensity, distance, angle, penumbra, decay);\n            break;\n          default:\n            console.warn(\"THREE.FBXLoader: Unknown light type \" + lightAttribute.LightType.value + \", defaulting to a PointLight.\");\n            model = new PointLight(color, intensity);\n            break;\n        }\n        if (lightAttribute.CastShadows !== void 0 && lightAttribute.CastShadows.value === 1) {\n          model.castShadow = true;\n        }\n      }\n      return model;\n    }\n  }, {\n    key: \"createMesh\",\n    value: function createMesh(relationships, geometryMap, materialMap) {\n      var model;\n      var geometry = null;\n      var material = null;\n      var materials = [];\n      relationships.children.forEach(function (child) {\n        if (geometryMap.has(child.ID)) {\n          geometry = geometryMap.get(child.ID);\n        }\n        if (materialMap.has(child.ID)) {\n          materials.push(materialMap.get(child.ID));\n        }\n      });\n      if (materials.length > 1) {\n        material = materials;\n      } else if (materials.length > 0) {\n        material = materials[0];\n      } else {\n        material = new MeshPhongMaterial({\n          color: 13421772\n        });\n        materials.push(material);\n      }\n      if (\"color\" in geometry.attributes) {\n        materials.forEach(function (material2) {\n          material2.vertexColors = true;\n        });\n      }\n      if (geometry.FBX_Deformer) {\n        model = new SkinnedMesh(geometry, material);\n        model.normalizeSkinWeights();\n      } else {\n        model = new Mesh(geometry, material);\n      }\n      return model;\n    }\n  }, {\n    key: \"createCurve\",\n    value: function createCurve(relationships, geometryMap) {\n      var geometry = relationships.children.reduce(function (geo, child) {\n        if (geometryMap.has(child.ID)) geo = geometryMap.get(child.ID);\n        return geo;\n      }, null);\n      var material = new LineBasicMaterial({\n        color: 3342591,\n        linewidth: 1\n      });\n      return new Line(geometry, material);\n    }\n    // parse the model node for transform data\n  }, {\n    key: \"getTransformData\",\n    value: function getTransformData(model, modelNode) {\n      var transformData = {};\n      if (\"InheritType\" in modelNode) transformData.inheritType = parseInt(modelNode.InheritType.value);\n      if (\"RotationOrder\" in modelNode) transformData.eulerOrder = getEulerOrder(modelNode.RotationOrder.value);else transformData.eulerOrder = \"ZYX\";\n      if (\"Lcl_Translation\" in modelNode) transformData.translation = modelNode.Lcl_Translation.value;\n      if (\"PreRotation\" in modelNode) transformData.preRotation = modelNode.PreRotation.value;\n      if (\"Lcl_Rotation\" in modelNode) transformData.rotation = modelNode.Lcl_Rotation.value;\n      if (\"PostRotation\" in modelNode) transformData.postRotation = modelNode.PostRotation.value;\n      if (\"Lcl_Scaling\" in modelNode) transformData.scale = modelNode.Lcl_Scaling.value;\n      if (\"ScalingOffset\" in modelNode) transformData.scalingOffset = modelNode.ScalingOffset.value;\n      if (\"ScalingPivot\" in modelNode) transformData.scalingPivot = modelNode.ScalingPivot.value;\n      if (\"RotationOffset\" in modelNode) transformData.rotationOffset = modelNode.RotationOffset.value;\n      if (\"RotationPivot\" in modelNode) transformData.rotationPivot = modelNode.RotationPivot.value;\n      model.userData.transformData = transformData;\n    }\n  }, {\n    key: \"setLookAtProperties\",\n    value: function setLookAtProperties(model, modelNode) {\n      if (\"LookAtProperty\" in modelNode) {\n        var children = connections.get(model.ID).children;\n        children.forEach(function (child) {\n          if (child.relationship === \"LookAtProperty\") {\n            var lookAtTarget = fbxTree.Objects.Model[child.ID];\n            if (\"Lcl_Translation\" in lookAtTarget) {\n              var pos = lookAtTarget.Lcl_Translation.value;\n              if (model.target !== void 0) {\n                model.target.position.fromArray(pos);\n                sceneGraph.add(model.target);\n              } else {\n                model.lookAt(new Vector3().fromArray(pos));\n              }\n            }\n          }\n        });\n      }\n    }\n  }, {\n    key: \"bindSkeleton\",\n    value: function bindSkeleton(skeletons, geometryMap, modelMap) {\n      var bindMatrices = this.parsePoseNodes();\n      var _loop2 = function _loop2() {\n        var skeleton = skeletons[ID];\n        var parents = connections.get(parseInt(skeleton.ID)).parents;\n        parents.forEach(function (parent) {\n          if (geometryMap.has(parent.ID)) {\n            var geoID = parent.ID;\n            var geoRelationships = connections.get(geoID);\n            geoRelationships.parents.forEach(function (geoConnParent) {\n              if (modelMap.has(geoConnParent.ID)) {\n                var model = modelMap.get(geoConnParent.ID);\n                model.bind(new Skeleton(skeleton.bones), bindMatrices[geoConnParent.ID]);\n              }\n            });\n          }\n        });\n      };\n      for (var ID in skeletons) {\n        _loop2();\n      }\n    }\n  }, {\n    key: \"parsePoseNodes\",\n    value: function parsePoseNodes() {\n      var bindMatrices = {};\n      if (\"Pose\" in fbxTree.Objects) {\n        var BindPoseNode = fbxTree.Objects.Pose;\n        for (var nodeID in BindPoseNode) {\n          if (BindPoseNode[nodeID].attrType === \"BindPose\" && BindPoseNode[nodeID].NbPoseNodes > 0) {\n            var poseNodes = BindPoseNode[nodeID].PoseNode;\n            if (Array.isArray(poseNodes)) {\n              poseNodes.forEach(function (poseNode) {\n                bindMatrices[poseNode.Node] = new Matrix4().fromArray(poseNode.Matrix.a);\n              });\n            } else {\n              bindMatrices[poseNodes.Node] = new Matrix4().fromArray(poseNodes.Matrix.a);\n            }\n          }\n        }\n      }\n      return bindMatrices;\n    }\n    // Parse ambient color in FBXTree.GlobalSettings - if it's not set to black (default), create an ambient light\n  }, {\n    key: \"createAmbientLight\",\n    value: function createAmbientLight() {\n      if (\"GlobalSettings\" in fbxTree && \"AmbientColor\" in fbxTree.GlobalSettings) {\n        var ambientColor = fbxTree.GlobalSettings.AmbientColor.value;\n        var r = ambientColor[0];\n        var g = ambientColor[1];\n        var b = ambientColor[2];\n        if (r !== 0 || g !== 0 || b !== 0) {\n          var color = new Color(r, g, b);\n          sceneGraph.add(new AmbientLight(color, 1));\n        }\n      }\n    }\n  }]);\n  return FBXTreeParser;\n}();\nvar GeometryParser = /*#__PURE__*/function () {\n  function GeometryParser() {\n    _classCallCheck(this, GeometryParser);\n  }\n  _createClass(GeometryParser, [{\n    key: \"parse\",\n    value:\n    // Parse nodes in FBXTree.Objects.Geometry\n    function parse(deformers) {\n      var geometryMap = /* @__PURE__ */new Map();\n      if (\"Geometry\" in fbxTree.Objects) {\n        var geoNodes = fbxTree.Objects.Geometry;\n        for (var nodeID in geoNodes) {\n          var relationships = connections.get(parseInt(nodeID));\n          var geo = this.parseGeometry(relationships, geoNodes[nodeID], deformers);\n          geometryMap.set(parseInt(nodeID), geo);\n        }\n      }\n      return geometryMap;\n    }\n    // Parse single node in FBXTree.Objects.Geometry\n  }, {\n    key: \"parseGeometry\",\n    value: function parseGeometry(relationships, geoNode, deformers) {\n      switch (geoNode.attrType) {\n        case \"Mesh\":\n          return this.parseMeshGeometry(relationships, geoNode, deformers);\n          break;\n        case \"NurbsCurve\":\n          return this.parseNurbsGeometry(geoNode);\n          break;\n      }\n    }\n    // Parse single node mesh geometry in FBXTree.Objects.Geometry\n  }, {\n    key: \"parseMeshGeometry\",\n    value: function parseMeshGeometry(relationships, geoNode, deformers) {\n      var skeletons = deformers.skeletons;\n      var morphTargets = [];\n      var modelNodes = relationships.parents.map(function (parent) {\n        return fbxTree.Objects.Model[parent.ID];\n      });\n      if (modelNodes.length === 0) return;\n      var skeleton = relationships.children.reduce(function (skeleton2, child) {\n        if (skeletons[child.ID] !== void 0) skeleton2 = skeletons[child.ID];\n        return skeleton2;\n      }, null);\n      relationships.children.forEach(function (child) {\n        if (deformers.morphTargets[child.ID] !== void 0) {\n          morphTargets.push(deformers.morphTargets[child.ID]);\n        }\n      });\n      var modelNode = modelNodes[0];\n      var transformData = {};\n      if (\"RotationOrder\" in modelNode) transformData.eulerOrder = getEulerOrder(modelNode.RotationOrder.value);\n      if (\"InheritType\" in modelNode) transformData.inheritType = parseInt(modelNode.InheritType.value);\n      if (\"GeometricTranslation\" in modelNode) transformData.translation = modelNode.GeometricTranslation.value;\n      if (\"GeometricRotation\" in modelNode) transformData.rotation = modelNode.GeometricRotation.value;\n      if (\"GeometricScaling\" in modelNode) transformData.scale = modelNode.GeometricScaling.value;\n      var transform = generateTransform(transformData);\n      return this.genGeometry(geoNode, skeleton, morphTargets, transform);\n    }\n    // Generate a BufferGeometry from a node in FBXTree.Objects.Geometry\n  }, {\n    key: \"genGeometry\",\n    value: function genGeometry(geoNode, skeleton, morphTargets, preTransform) {\n      var geo = new BufferGeometry();\n      if (geoNode.attrName) geo.name = geoNode.attrName;\n      var geoInfo = this.parseGeoNode(geoNode, skeleton);\n      var buffers = this.genBuffers(geoInfo);\n      var positionAttribute = new Float32BufferAttribute(buffers.vertex, 3);\n      positionAttribute.applyMatrix4(preTransform);\n      geo.setAttribute(\"position\", positionAttribute);\n      if (buffers.colors.length > 0) {\n        geo.setAttribute(\"color\", new Float32BufferAttribute(buffers.colors, 3));\n      }\n      if (skeleton) {\n        geo.setAttribute(\"skinIndex\", new Uint16BufferAttribute(buffers.weightsIndices, 4));\n        geo.setAttribute(\"skinWeight\", new Float32BufferAttribute(buffers.vertexWeights, 4));\n        geo.FBX_Deformer = skeleton;\n      }\n      if (buffers.normal.length > 0) {\n        var normalMatrix = new Matrix3().getNormalMatrix(preTransform);\n        var normalAttribute = new Float32BufferAttribute(buffers.normal, 3);\n        normalAttribute.applyNormalMatrix(normalMatrix);\n        geo.setAttribute(\"normal\", normalAttribute);\n      }\n      buffers.uvs.forEach(function (uvBuffer, i) {\n        var name = \"uv\" + (i + 1).toString();\n        if (i === 0) {\n          name = \"uv\";\n        }\n        geo.setAttribute(name, new Float32BufferAttribute(buffers.uvs[i], 2));\n      });\n      if (geoInfo.material && geoInfo.material.mappingType !== \"AllSame\") {\n        var prevMaterialIndex = buffers.materialIndex[0];\n        var startIndex = 0;\n        buffers.materialIndex.forEach(function (currentIndex, i) {\n          if (currentIndex !== prevMaterialIndex) {\n            geo.addGroup(startIndex, i - startIndex, prevMaterialIndex);\n            prevMaterialIndex = currentIndex;\n            startIndex = i;\n          }\n        });\n        if (geo.groups.length > 0) {\n          var lastGroup = geo.groups[geo.groups.length - 1];\n          var lastIndex = lastGroup.start + lastGroup.count;\n          if (lastIndex !== buffers.materialIndex.length) {\n            geo.addGroup(lastIndex, buffers.materialIndex.length - lastIndex, prevMaterialIndex);\n          }\n        }\n        if (geo.groups.length === 0) {\n          geo.addGroup(0, buffers.materialIndex.length, buffers.materialIndex[0]);\n        }\n      }\n      this.addMorphTargets(geo, geoNode, morphTargets, preTransform);\n      return geo;\n    }\n  }, {\n    key: \"parseGeoNode\",\n    value: function parseGeoNode(geoNode, skeleton) {\n      var geoInfo = {};\n      geoInfo.vertexPositions = geoNode.Vertices !== void 0 ? geoNode.Vertices.a : [];\n      geoInfo.vertexIndices = geoNode.PolygonVertexIndex !== void 0 ? geoNode.PolygonVertexIndex.a : [];\n      if (geoNode.LayerElementColor) {\n        geoInfo.color = this.parseVertexColors(geoNode.LayerElementColor[0]);\n      }\n      if (geoNode.LayerElementMaterial) {\n        geoInfo.material = this.parseMaterialIndices(geoNode.LayerElementMaterial[0]);\n      }\n      if (geoNode.LayerElementNormal) {\n        geoInfo.normal = this.parseNormals(geoNode.LayerElementNormal[0]);\n      }\n      if (geoNode.LayerElementUV) {\n        geoInfo.uv = [];\n        var i = 0;\n        while (geoNode.LayerElementUV[i]) {\n          if (geoNode.LayerElementUV[i].UV) {\n            geoInfo.uv.push(this.parseUVs(geoNode.LayerElementUV[i]));\n          }\n          i++;\n        }\n      }\n      geoInfo.weightTable = {};\n      if (skeleton !== null) {\n        geoInfo.skeleton = skeleton;\n        skeleton.rawBones.forEach(function (rawBone, i) {\n          rawBone.indices.forEach(function (index, j) {\n            if (geoInfo.weightTable[index] === void 0) geoInfo.weightTable[index] = [];\n            geoInfo.weightTable[index].push({\n              id: i,\n              weight: rawBone.weights[j]\n            });\n          });\n        });\n      }\n      return geoInfo;\n    }\n  }, {\n    key: \"genBuffers\",\n    value: function genBuffers(geoInfo) {\n      var buffers = {\n        vertex: [],\n        normal: [],\n        colors: [],\n        uvs: [],\n        materialIndex: [],\n        vertexWeights: [],\n        weightsIndices: []\n      };\n      var polygonIndex = 0;\n      var faceLength = 0;\n      var displayedWeightsWarning = false;\n      var facePositionIndexes = [];\n      var faceNormals = [];\n      var faceColors = [];\n      var faceUVs = [];\n      var faceWeights = [];\n      var faceWeightIndices = [];\n      var scope = this;\n      geoInfo.vertexIndices.forEach(function (vertexIndex, polygonVertexIndex) {\n        var materialIndex;\n        var endOfFace = false;\n        if (vertexIndex < 0) {\n          vertexIndex = vertexIndex ^ -1;\n          endOfFace = true;\n        }\n        var weightIndices = [];\n        var weights = [];\n        facePositionIndexes.push(vertexIndex * 3, vertexIndex * 3 + 1, vertexIndex * 3 + 2);\n        if (geoInfo.color) {\n          var data = getData(polygonVertexIndex, polygonIndex, vertexIndex, geoInfo.color);\n          faceColors.push(data[0], data[1], data[2]);\n        }\n        if (geoInfo.skeleton) {\n          if (geoInfo.weightTable[vertexIndex] !== void 0) {\n            geoInfo.weightTable[vertexIndex].forEach(function (wt) {\n              weights.push(wt.weight);\n              weightIndices.push(wt.id);\n            });\n          }\n          if (weights.length > 4) {\n            if (!displayedWeightsWarning) {\n              console.warn(\"THREE.FBXLoader: Vertex has more than 4 skinning weights assigned to vertex. Deleting additional weights.\");\n              displayedWeightsWarning = true;\n            }\n            var wIndex = [0, 0, 0, 0];\n            var Weight = [0, 0, 0, 0];\n            weights.forEach(function (weight, weightIndex) {\n              var currentWeight = weight;\n              var currentIndex = weightIndices[weightIndex];\n              Weight.forEach(function (comparedWeight, comparedWeightIndex, comparedWeightArray) {\n                if (currentWeight > comparedWeight) {\n                  comparedWeightArray[comparedWeightIndex] = currentWeight;\n                  currentWeight = comparedWeight;\n                  var tmp = wIndex[comparedWeightIndex];\n                  wIndex[comparedWeightIndex] = currentIndex;\n                  currentIndex = tmp;\n                }\n              });\n            });\n            weightIndices = wIndex;\n            weights = Weight;\n          }\n          while (weights.length < 4) {\n            weights.push(0);\n            weightIndices.push(0);\n          }\n          for (var i = 0; i < 4; ++i) {\n            faceWeights.push(weights[i]);\n            faceWeightIndices.push(weightIndices[i]);\n          }\n        }\n        if (geoInfo.normal) {\n          var _data = getData(polygonVertexIndex, polygonIndex, vertexIndex, geoInfo.normal);\n          faceNormals.push(_data[0], _data[1], _data[2]);\n        }\n        if (geoInfo.material && geoInfo.material.mappingType !== \"AllSame\") {\n          materialIndex = getData(polygonVertexIndex, polygonIndex, vertexIndex, geoInfo.material)[0];\n        }\n        if (geoInfo.uv) {\n          geoInfo.uv.forEach(function (uv, i) {\n            var data = getData(polygonVertexIndex, polygonIndex, vertexIndex, uv);\n            if (faceUVs[i] === void 0) {\n              faceUVs[i] = [];\n            }\n            faceUVs[i].push(data[0]);\n            faceUVs[i].push(data[1]);\n          });\n        }\n        faceLength++;\n        if (endOfFace) {\n          scope.genFace(buffers, geoInfo, facePositionIndexes, materialIndex, faceNormals, faceColors, faceUVs, faceWeights, faceWeightIndices, faceLength);\n          polygonIndex++;\n          faceLength = 0;\n          facePositionIndexes = [];\n          faceNormals = [];\n          faceColors = [];\n          faceUVs = [];\n          faceWeights = [];\n          faceWeightIndices = [];\n        }\n      });\n      return buffers;\n    }\n    // Generate data for a single face in a geometry. If the face is a quad then split it into 2 tris\n  }, {\n    key: \"genFace\",\n    value: function genFace(buffers, geoInfo, facePositionIndexes, materialIndex, faceNormals, faceColors, faceUVs, faceWeights, faceWeightIndices, faceLength) {\n      var _loop3 = function _loop3(i) {\n        buffers.vertex.push(geoInfo.vertexPositions[facePositionIndexes[0]]);\n        buffers.vertex.push(geoInfo.vertexPositions[facePositionIndexes[1]]);\n        buffers.vertex.push(geoInfo.vertexPositions[facePositionIndexes[2]]);\n        buffers.vertex.push(geoInfo.vertexPositions[facePositionIndexes[(i - 1) * 3]]);\n        buffers.vertex.push(geoInfo.vertexPositions[facePositionIndexes[(i - 1) * 3 + 1]]);\n        buffers.vertex.push(geoInfo.vertexPositions[facePositionIndexes[(i - 1) * 3 + 2]]);\n        buffers.vertex.push(geoInfo.vertexPositions[facePositionIndexes[i * 3]]);\n        buffers.vertex.push(geoInfo.vertexPositions[facePositionIndexes[i * 3 + 1]]);\n        buffers.vertex.push(geoInfo.vertexPositions[facePositionIndexes[i * 3 + 2]]);\n        if (geoInfo.skeleton) {\n          buffers.vertexWeights.push(faceWeights[0]);\n          buffers.vertexWeights.push(faceWeights[1]);\n          buffers.vertexWeights.push(faceWeights[2]);\n          buffers.vertexWeights.push(faceWeights[3]);\n          buffers.vertexWeights.push(faceWeights[(i - 1) * 4]);\n          buffers.vertexWeights.push(faceWeights[(i - 1) * 4 + 1]);\n          buffers.vertexWeights.push(faceWeights[(i - 1) * 4 + 2]);\n          buffers.vertexWeights.push(faceWeights[(i - 1) * 4 + 3]);\n          buffers.vertexWeights.push(faceWeights[i * 4]);\n          buffers.vertexWeights.push(faceWeights[i * 4 + 1]);\n          buffers.vertexWeights.push(faceWeights[i * 4 + 2]);\n          buffers.vertexWeights.push(faceWeights[i * 4 + 3]);\n          buffers.weightsIndices.push(faceWeightIndices[0]);\n          buffers.weightsIndices.push(faceWeightIndices[1]);\n          buffers.weightsIndices.push(faceWeightIndices[2]);\n          buffers.weightsIndices.push(faceWeightIndices[3]);\n          buffers.weightsIndices.push(faceWeightIndices[(i - 1) * 4]);\n          buffers.weightsIndices.push(faceWeightIndices[(i - 1) * 4 + 1]);\n          buffers.weightsIndices.push(faceWeightIndices[(i - 1) * 4 + 2]);\n          buffers.weightsIndices.push(faceWeightIndices[(i - 1) * 4 + 3]);\n          buffers.weightsIndices.push(faceWeightIndices[i * 4]);\n          buffers.weightsIndices.push(faceWeightIndices[i * 4 + 1]);\n          buffers.weightsIndices.push(faceWeightIndices[i * 4 + 2]);\n          buffers.weightsIndices.push(faceWeightIndices[i * 4 + 3]);\n        }\n        if (geoInfo.color) {\n          buffers.colors.push(faceColors[0]);\n          buffers.colors.push(faceColors[1]);\n          buffers.colors.push(faceColors[2]);\n          buffers.colors.push(faceColors[(i - 1) * 3]);\n          buffers.colors.push(faceColors[(i - 1) * 3 + 1]);\n          buffers.colors.push(faceColors[(i - 1) * 3 + 2]);\n          buffers.colors.push(faceColors[i * 3]);\n          buffers.colors.push(faceColors[i * 3 + 1]);\n          buffers.colors.push(faceColors[i * 3 + 2]);\n        }\n        if (geoInfo.material && geoInfo.material.mappingType !== \"AllSame\") {\n          buffers.materialIndex.push(materialIndex);\n          buffers.materialIndex.push(materialIndex);\n          buffers.materialIndex.push(materialIndex);\n        }\n        if (geoInfo.normal) {\n          buffers.normal.push(faceNormals[0]);\n          buffers.normal.push(faceNormals[1]);\n          buffers.normal.push(faceNormals[2]);\n          buffers.normal.push(faceNormals[(i - 1) * 3]);\n          buffers.normal.push(faceNormals[(i - 1) * 3 + 1]);\n          buffers.normal.push(faceNormals[(i - 1) * 3 + 2]);\n          buffers.normal.push(faceNormals[i * 3]);\n          buffers.normal.push(faceNormals[i * 3 + 1]);\n          buffers.normal.push(faceNormals[i * 3 + 2]);\n        }\n        if (geoInfo.uv) {\n          geoInfo.uv.forEach(function (uv, j) {\n            if (buffers.uvs[j] === void 0) buffers.uvs[j] = [];\n            buffers.uvs[j].push(faceUVs[j][0]);\n            buffers.uvs[j].push(faceUVs[j][1]);\n            buffers.uvs[j].push(faceUVs[j][(i - 1) * 2]);\n            buffers.uvs[j].push(faceUVs[j][(i - 1) * 2 + 1]);\n            buffers.uvs[j].push(faceUVs[j][i * 2]);\n            buffers.uvs[j].push(faceUVs[j][i * 2 + 1]);\n          });\n        }\n      };\n      for (var i = 2; i < faceLength; i++) {\n        _loop3(i);\n      }\n    }\n  }, {\n    key: \"addMorphTargets\",\n    value: function addMorphTargets(parentGeo, parentGeoNode, morphTargets, preTransform) {\n      if (morphTargets.length === 0) return;\n      parentGeo.morphTargetsRelative = true;\n      parentGeo.morphAttributes.position = [];\n      var scope = this;\n      morphTargets.forEach(function (morphTarget) {\n        morphTarget.rawTargets.forEach(function (rawTarget) {\n          var morphGeoNode = fbxTree.Objects.Geometry[rawTarget.geoID];\n          if (morphGeoNode !== void 0) {\n            scope.genMorphGeometry(parentGeo, parentGeoNode, morphGeoNode, preTransform, rawTarget.name);\n          }\n        });\n      });\n    }\n    // a morph geometry node is similar to a standard  node, and the node is also contained\n    // in FBXTree.Objects.Geometry, however it can only have attributes for position, normal\n    // and a special attribute Index defining which vertices of the original geometry are affected\n    // Normal and position attributes only have data for the vertices that are affected by the morph\n  }, {\n    key: \"genMorphGeometry\",\n    value: function genMorphGeometry(parentGeo, parentGeoNode, morphGeoNode, preTransform, name) {\n      var vertexIndices = parentGeoNode.PolygonVertexIndex !== void 0 ? parentGeoNode.PolygonVertexIndex.a : [];\n      var morphPositionsSparse = morphGeoNode.Vertices !== void 0 ? morphGeoNode.Vertices.a : [];\n      var indices = morphGeoNode.Indexes !== void 0 ? morphGeoNode.Indexes.a : [];\n      var length = parentGeo.attributes.position.count * 3;\n      var morphPositions = new Float32Array(length);\n      for (var i = 0; i < indices.length; i++) {\n        var morphIndex = indices[i] * 3;\n        morphPositions[morphIndex] = morphPositionsSparse[i * 3];\n        morphPositions[morphIndex + 1] = morphPositionsSparse[i * 3 + 1];\n        morphPositions[morphIndex + 2] = morphPositionsSparse[i * 3 + 2];\n      }\n      var morphGeoInfo = {\n        vertexIndices: vertexIndices,\n        vertexPositions: morphPositions\n      };\n      var morphBuffers = this.genBuffers(morphGeoInfo);\n      var positionAttribute = new Float32BufferAttribute(morphBuffers.vertex, 3);\n      positionAttribute.name = name || morphGeoNode.attrName;\n      positionAttribute.applyMatrix4(preTransform);\n      parentGeo.morphAttributes.position.push(positionAttribute);\n    }\n    // Parse normal from FBXTree.Objects.Geometry.LayerElementNormal if it exists\n  }, {\n    key: \"parseNormals\",\n    value: function parseNormals(NormalNode) {\n      var mappingType = NormalNode.MappingInformationType;\n      var referenceType = NormalNode.ReferenceInformationType;\n      var buffer = NormalNode.Normals.a;\n      var indexBuffer = [];\n      if (referenceType === \"IndexToDirect\") {\n        if (\"NormalIndex\" in NormalNode) {\n          indexBuffer = NormalNode.NormalIndex.a;\n        } else if (\"NormalsIndex\" in NormalNode) {\n          indexBuffer = NormalNode.NormalsIndex.a;\n        }\n      }\n      return {\n        dataSize: 3,\n        buffer: buffer,\n        indices: indexBuffer,\n        mappingType: mappingType,\n        referenceType: referenceType\n      };\n    }\n    // Parse UVs from FBXTree.Objects.Geometry.LayerElementUV if it exists\n  }, {\n    key: \"parseUVs\",\n    value: function parseUVs(UVNode) {\n      var mappingType = UVNode.MappingInformationType;\n      var referenceType = UVNode.ReferenceInformationType;\n      var buffer = UVNode.UV.a;\n      var indexBuffer = [];\n      if (referenceType === \"IndexToDirect\") {\n        indexBuffer = UVNode.UVIndex.a;\n      }\n      return {\n        dataSize: 2,\n        buffer: buffer,\n        indices: indexBuffer,\n        mappingType: mappingType,\n        referenceType: referenceType\n      };\n    }\n    // Parse Vertex Colors from FBXTree.Objects.Geometry.LayerElementColor if it exists\n  }, {\n    key: \"parseVertexColors\",\n    value: function parseVertexColors(ColorNode) {\n      var mappingType = ColorNode.MappingInformationType;\n      var referenceType = ColorNode.ReferenceInformationType;\n      var buffer = ColorNode.Colors.a;\n      var indexBuffer = [];\n      if (referenceType === \"IndexToDirect\") {\n        indexBuffer = ColorNode.ColorIndex.a;\n      }\n      return {\n        dataSize: 4,\n        buffer: buffer,\n        indices: indexBuffer,\n        mappingType: mappingType,\n        referenceType: referenceType\n      };\n    }\n    // Parse mapping and material data in FBXTree.Objects.Geometry.LayerElementMaterial if it exists\n  }, {\n    key: \"parseMaterialIndices\",\n    value: function parseMaterialIndices(MaterialNode) {\n      var mappingType = MaterialNode.MappingInformationType;\n      var referenceType = MaterialNode.ReferenceInformationType;\n      if (mappingType === \"NoMappingInformation\") {\n        return {\n          dataSize: 1,\n          buffer: [0],\n          indices: [0],\n          mappingType: \"AllSame\",\n          referenceType: referenceType\n        };\n      }\n      var materialIndexBuffer = MaterialNode.Materials.a;\n      var materialIndices = [];\n      for (var i = 0; i < materialIndexBuffer.length; ++i) {\n        materialIndices.push(i);\n      }\n      return {\n        dataSize: 1,\n        buffer: materialIndexBuffer,\n        indices: materialIndices,\n        mappingType: mappingType,\n        referenceType: referenceType\n      };\n    }\n    // Generate a NurbGeometry from a node in FBXTree.Objects.Geometry\n  }, {\n    key: \"parseNurbsGeometry\",\n    value: function parseNurbsGeometry(geoNode) {\n      if (NURBSCurve === void 0) {\n        console.error(\"THREE.FBXLoader: The loader relies on NURBSCurve for any nurbs present in the model. Nurbs will show up as empty geometry.\");\n        return new BufferGeometry();\n      }\n      var order = parseInt(geoNode.Order);\n      if (isNaN(order)) {\n        console.error(\"THREE.FBXLoader: Invalid Order %s given for geometry ID: %s\", geoNode.Order, geoNode.id);\n        return new BufferGeometry();\n      }\n      var degree = order - 1;\n      var knots = geoNode.KnotVector.a;\n      var controlPoints = [];\n      var pointsValues = geoNode.Points.a;\n      for (var i = 0, l = pointsValues.length; i < l; i += 4) {\n        controlPoints.push(new Vector4().fromArray(pointsValues, i));\n      }\n      var startKnot, endKnot;\n      if (geoNode.Form === \"Closed\") {\n        controlPoints.push(controlPoints[0]);\n      } else if (geoNode.Form === \"Periodic\") {\n        startKnot = degree;\n        endKnot = knots.length - 1 - startKnot;\n        for (var _i = 0; _i < degree; ++_i) {\n          controlPoints.push(controlPoints[_i]);\n        }\n      }\n      var curve = new NURBSCurve(degree, knots, controlPoints, startKnot, endKnot);\n      var points = curve.getPoints(controlPoints.length * 12);\n      return new BufferGeometry().setFromPoints(points);\n    }\n  }]);\n  return GeometryParser;\n}();\nvar AnimationParser = /*#__PURE__*/function () {\n  function AnimationParser() {\n    _classCallCheck(this, AnimationParser);\n  }\n  _createClass(AnimationParser, [{\n    key: \"parse\",\n    value:\n    // take raw animation clips and turn them into three.js animation clips\n    function parse() {\n      var animationClips = [];\n      var rawClips = this.parseClips();\n      if (rawClips !== void 0) {\n        for (var key in rawClips) {\n          var rawClip = rawClips[key];\n          var clip = this.addClip(rawClip);\n          animationClips.push(clip);\n        }\n      }\n      return animationClips;\n    }\n  }, {\n    key: \"parseClips\",\n    value: function parseClips() {\n      if (fbxTree.Objects.AnimationCurve === void 0) return void 0;\n      var curveNodesMap = this.parseAnimationCurveNodes();\n      this.parseAnimationCurves(curveNodesMap);\n      var layersMap = this.parseAnimationLayers(curveNodesMap);\n      var rawClips = this.parseAnimStacks(layersMap);\n      return rawClips;\n    }\n    // parse nodes in FBXTree.Objects.AnimationCurveNode\n    // each AnimationCurveNode holds data for an animation transform for a model (e.g. left arm rotation )\n    // and is referenced by an AnimationLayer\n  }, {\n    key: \"parseAnimationCurveNodes\",\n    value: function parseAnimationCurveNodes() {\n      var rawCurveNodes = fbxTree.Objects.AnimationCurveNode;\n      var curveNodesMap = /* @__PURE__ */new Map();\n      for (var nodeID in rawCurveNodes) {\n        var rawCurveNode = rawCurveNodes[nodeID];\n        if (rawCurveNode.attrName.match(/S|R|T|DeformPercent/) !== null) {\n          var curveNode = {\n            id: rawCurveNode.id,\n            attr: rawCurveNode.attrName,\n            curves: {}\n          };\n          curveNodesMap.set(curveNode.id, curveNode);\n        }\n      }\n      return curveNodesMap;\n    }\n    // parse nodes in FBXTree.Objects.AnimationCurve and connect them up to\n    // previously parsed AnimationCurveNodes. Each AnimationCurve holds data for a single animated\n    // axis ( e.g. times and values of x rotation)\n  }, {\n    key: \"parseAnimationCurves\",\n    value: function parseAnimationCurves(curveNodesMap) {\n      var rawCurves = fbxTree.Objects.AnimationCurve;\n      for (var nodeID in rawCurves) {\n        var animationCurve = {\n          id: rawCurves[nodeID].id,\n          times: rawCurves[nodeID].KeyTime.a.map(convertFBXTimeToSeconds),\n          values: rawCurves[nodeID].KeyValueFloat.a\n        };\n        var relationships = connections.get(animationCurve.id);\n        if (relationships !== void 0) {\n          var animationCurveID = relationships.parents[0].ID;\n          var animationCurveRelationship = relationships.parents[0].relationship;\n          if (animationCurveRelationship.match(/X/)) {\n            curveNodesMap.get(animationCurveID).curves[\"x\"] = animationCurve;\n          } else if (animationCurveRelationship.match(/Y/)) {\n            curveNodesMap.get(animationCurveID).curves[\"y\"] = animationCurve;\n          } else if (animationCurveRelationship.match(/Z/)) {\n            curveNodesMap.get(animationCurveID).curves[\"z\"] = animationCurve;\n          } else if (animationCurveRelationship.match(/d|DeformPercent/) && curveNodesMap.has(animationCurveID)) {\n            curveNodesMap.get(animationCurveID).curves[\"morph\"] = animationCurve;\n          }\n        }\n      }\n    }\n    // parse nodes in FBXTree.Objects.AnimationLayer. Each layers holds references\n    // to various AnimationCurveNodes and is referenced by an AnimationStack node\n    // note: theoretically a stack can have multiple layers, however in practice there always seems to be one per stack\n  }, {\n    key: \"parseAnimationLayers\",\n    value: function parseAnimationLayers(curveNodesMap) {\n      var rawLayers = fbxTree.Objects.AnimationLayer;\n      var layersMap = /* @__PURE__ */new Map();\n      var _loop4 = function _loop4() {\n        var layerCurveNodes = [];\n        var connection = connections.get(parseInt(nodeID));\n        if (connection !== void 0) {\n          var children = connection.children;\n          children.forEach(function (child, i) {\n            if (curveNodesMap.has(child.ID)) {\n              var curveNode = curveNodesMap.get(child.ID);\n              if (curveNode.curves.x !== void 0 || curveNode.curves.y !== void 0 || curveNode.curves.z !== void 0) {\n                if (layerCurveNodes[i] === void 0) {\n                  var modelID = connections.get(child.ID).parents.filter(function (parent) {\n                    return parent.relationship !== void 0;\n                  })[0].ID;\n                  if (modelID !== void 0) {\n                    var rawModel = fbxTree.Objects.Model[modelID.toString()];\n                    if (rawModel === void 0) {\n                      console.warn(\"THREE.FBXLoader: Encountered a unused curve.\", child);\n                      return;\n                    }\n                    var node = {\n                      modelName: rawModel.attrName ? PropertyBinding.sanitizeNodeName(rawModel.attrName) : \"\",\n                      ID: rawModel.id,\n                      initialPosition: [0, 0, 0],\n                      initialRotation: [0, 0, 0],\n                      initialScale: [1, 1, 1]\n                    };\n                    sceneGraph.traverse(function (child2) {\n                      if (child2.ID === rawModel.id) {\n                        node.transform = child2.matrix;\n                        if (child2.userData.transformData) node.eulerOrder = child2.userData.transformData.eulerOrder;\n                      }\n                    });\n                    if (!node.transform) node.transform = new Matrix4();\n                    if (\"PreRotation\" in rawModel) node.preRotation = rawModel.PreRotation.value;\n                    if (\"PostRotation\" in rawModel) node.postRotation = rawModel.PostRotation.value;\n                    layerCurveNodes[i] = node;\n                  }\n                }\n                if (layerCurveNodes[i]) layerCurveNodes[i][curveNode.attr] = curveNode;\n              } else if (curveNode.curves.morph !== void 0) {\n                if (layerCurveNodes[i] === void 0) {\n                  var deformerID = connections.get(child.ID).parents.filter(function (parent) {\n                    return parent.relationship !== void 0;\n                  })[0].ID;\n                  var morpherID = connections.get(deformerID).parents[0].ID;\n                  var geoID = connections.get(morpherID).parents[0].ID;\n                  var _modelID = connections.get(geoID).parents[0].ID;\n                  var _rawModel = fbxTree.Objects.Model[_modelID];\n                  var _node = {\n                    modelName: _rawModel.attrName ? PropertyBinding.sanitizeNodeName(_rawModel.attrName) : \"\",\n                    morphName: fbxTree.Objects.Deformer[deformerID].attrName\n                  };\n                  layerCurveNodes[i] = _node;\n                }\n                layerCurveNodes[i][curveNode.attr] = curveNode;\n              }\n            }\n          });\n          layersMap.set(parseInt(nodeID), layerCurveNodes);\n        }\n      };\n      for (var nodeID in rawLayers) {\n        _loop4();\n      }\n      return layersMap;\n    }\n    // parse nodes in FBXTree.Objects.AnimationStack. These are the top level node in the animation\n    // hierarchy. Each Stack node will be used to create a AnimationClip\n  }, {\n    key: \"parseAnimStacks\",\n    value: function parseAnimStacks(layersMap) {\n      var rawStacks = fbxTree.Objects.AnimationStack;\n      var rawClips = {};\n      for (var nodeID in rawStacks) {\n        var children = connections.get(parseInt(nodeID)).children;\n        if (children.length > 1) {\n          console.warn(\"THREE.FBXLoader: Encountered an animation stack with multiple layers, this is currently not supported. Ignoring subsequent layers.\");\n        }\n        var layer = layersMap.get(children[0].ID);\n        rawClips[nodeID] = {\n          name: rawStacks[nodeID].attrName,\n          layer: layer\n        };\n      }\n      return rawClips;\n    }\n  }, {\n    key: \"addClip\",\n    value: function addClip(rawClip) {\n      var tracks = [];\n      var scope = this;\n      rawClip.layer.forEach(function (rawTracks) {\n        tracks = tracks.concat(scope.generateTracks(rawTracks));\n      });\n      return new AnimationClip(rawClip.name, -1, tracks);\n    }\n  }, {\n    key: \"generateTracks\",\n    value: function generateTracks(rawTracks) {\n      var tracks = [];\n      var initialPosition = new Vector3();\n      var initialRotation = new Quaternion();\n      var initialScale = new Vector3();\n      if (rawTracks.transform) rawTracks.transform.decompose(initialPosition, initialRotation, initialScale);\n      initialPosition = initialPosition.toArray();\n      initialRotation = new Euler().setFromQuaternion(initialRotation, rawTracks.eulerOrder).toArray();\n      initialScale = initialScale.toArray();\n      if (rawTracks.T !== void 0 && Object.keys(rawTracks.T.curves).length > 0) {\n        var positionTrack = this.generateVectorTrack(rawTracks.modelName, rawTracks.T.curves, initialPosition, \"position\");\n        if (positionTrack !== void 0) tracks.push(positionTrack);\n      }\n      if (rawTracks.R !== void 0 && Object.keys(rawTracks.R.curves).length > 0) {\n        var rotationTrack = this.generateRotationTrack(rawTracks.modelName, rawTracks.R.curves, initialRotation, rawTracks.preRotation, rawTracks.postRotation, rawTracks.eulerOrder);\n        if (rotationTrack !== void 0) tracks.push(rotationTrack);\n      }\n      if (rawTracks.S !== void 0 && Object.keys(rawTracks.S.curves).length > 0) {\n        var scaleTrack = this.generateVectorTrack(rawTracks.modelName, rawTracks.S.curves, initialScale, \"scale\");\n        if (scaleTrack !== void 0) tracks.push(scaleTrack);\n      }\n      if (rawTracks.DeformPercent !== void 0) {\n        var morphTrack = this.generateMorphTrack(rawTracks);\n        if (morphTrack !== void 0) tracks.push(morphTrack);\n      }\n      return tracks;\n    }\n  }, {\n    key: \"generateVectorTrack\",\n    value: function generateVectorTrack(modelName, curves, initialValue, type) {\n      var times = this.getTimesForAllAxes(curves);\n      var values = this.getKeyframeTrackValues(times, curves, initialValue);\n      return new VectorKeyframeTrack(modelName + \".\" + type, times, values);\n    }\n  }, {\n    key: \"generateRotationTrack\",\n    value: function generateRotationTrack(modelName, curves, initialValue, preRotation, postRotation, eulerOrder) {\n      if (curves.x !== void 0) {\n        this.interpolateRotations(curves.x);\n        curves.x.values = curves.x.values.map(MathUtils.degToRad);\n      }\n      if (curves.y !== void 0) {\n        this.interpolateRotations(curves.y);\n        curves.y.values = curves.y.values.map(MathUtils.degToRad);\n      }\n      if (curves.z !== void 0) {\n        this.interpolateRotations(curves.z);\n        curves.z.values = curves.z.values.map(MathUtils.degToRad);\n      }\n      var times = this.getTimesForAllAxes(curves);\n      var values = this.getKeyframeTrackValues(times, curves, initialValue);\n      if (preRotation !== void 0) {\n        preRotation = preRotation.map(MathUtils.degToRad);\n        preRotation.push(eulerOrder);\n        preRotation = new Euler().fromArray(preRotation);\n        preRotation = new Quaternion().setFromEuler(preRotation);\n      }\n      if (postRotation !== void 0) {\n        postRotation = postRotation.map(MathUtils.degToRad);\n        postRotation.push(eulerOrder);\n        postRotation = new Euler().fromArray(postRotation);\n        postRotation = new Quaternion().setFromEuler(postRotation).invert();\n      }\n      var quaternion = new Quaternion();\n      var euler = new Euler();\n      var quaternionValues = [];\n      for (var i = 0; i < values.length; i += 3) {\n        euler.set(values[i], values[i + 1], values[i + 2], eulerOrder);\n        quaternion.setFromEuler(euler);\n        if (preRotation !== void 0) quaternion.premultiply(preRotation);\n        if (postRotation !== void 0) quaternion.multiply(postRotation);\n        quaternion.toArray(quaternionValues, i / 3 * 4);\n      }\n      return new QuaternionKeyframeTrack(modelName + \".quaternion\", times, quaternionValues);\n    }\n  }, {\n    key: \"generateMorphTrack\",\n    value: function generateMorphTrack(rawTracks) {\n      var curves = rawTracks.DeformPercent.curves.morph;\n      var values = curves.values.map(function (val) {\n        return val / 100;\n      });\n      var morphNum = sceneGraph.getObjectByName(rawTracks.modelName).morphTargetDictionary[rawTracks.morphName];\n      return new NumberKeyframeTrack(rawTracks.modelName + \".morphTargetInfluences[\" + morphNum + \"]\", curves.times, values);\n    }\n    // For all animated objects, times are defined separately for each axis\n    // Here we'll combine the times into one sorted array without duplicates\n  }, {\n    key: \"getTimesForAllAxes\",\n    value: function getTimesForAllAxes(curves) {\n      var times = [];\n      if (curves.x !== void 0) times = times.concat(curves.x.times);\n      if (curves.y !== void 0) times = times.concat(curves.y.times);\n      if (curves.z !== void 0) times = times.concat(curves.z.times);\n      times = times.sort(function (a, b) {\n        return a - b;\n      });\n      if (times.length > 1) {\n        var targetIndex = 1;\n        var lastValue = times[0];\n        for (var i = 1; i < times.length; i++) {\n          var currentValue = times[i];\n          if (currentValue !== lastValue) {\n            times[targetIndex] = currentValue;\n            lastValue = currentValue;\n            targetIndex++;\n          }\n        }\n        times = times.slice(0, targetIndex);\n      }\n      return times;\n    }\n  }, {\n    key: \"getKeyframeTrackValues\",\n    value: function getKeyframeTrackValues(times, curves, initialValue) {\n      var prevValue = initialValue;\n      var values = [];\n      var xIndex = -1;\n      var yIndex = -1;\n      var zIndex = -1;\n      times.forEach(function (time) {\n        if (curves.x) xIndex = curves.x.times.indexOf(time);\n        if (curves.y) yIndex = curves.y.times.indexOf(time);\n        if (curves.z) zIndex = curves.z.times.indexOf(time);\n        if (xIndex !== -1) {\n          var xValue = curves.x.values[xIndex];\n          values.push(xValue);\n          prevValue[0] = xValue;\n        } else {\n          values.push(prevValue[0]);\n        }\n        if (yIndex !== -1) {\n          var yValue = curves.y.values[yIndex];\n          values.push(yValue);\n          prevValue[1] = yValue;\n        } else {\n          values.push(prevValue[1]);\n        }\n        if (zIndex !== -1) {\n          var zValue = curves.z.values[zIndex];\n          values.push(zValue);\n          prevValue[2] = zValue;\n        } else {\n          values.push(prevValue[2]);\n        }\n      });\n      return values;\n    }\n    // Rotations are defined as Euler angles which can have values  of any size\n    // These will be converted to quaternions which don't support values greater than\n    // PI, so we'll interpolate large rotations\n  }, {\n    key: \"interpolateRotations\",\n    value: function interpolateRotations(curve) {\n      for (var i = 1; i < curve.values.length; i++) {\n        var initialValue = curve.values[i - 1];\n        var valuesSpan = curve.values[i] - initialValue;\n        var absoluteSpan = Math.abs(valuesSpan);\n        if (absoluteSpan >= 180) {\n          var numSubIntervals = absoluteSpan / 180;\n          var step = valuesSpan / numSubIntervals;\n          var nextValue = initialValue + step;\n          var initialTime = curve.times[i - 1];\n          var timeSpan = curve.times[i] - initialTime;\n          var interval = timeSpan / numSubIntervals;\n          var nextTime = initialTime + interval;\n          var interpolatedTimes = [];\n          var interpolatedValues = [];\n          while (nextTime < curve.times[i]) {\n            interpolatedTimes.push(nextTime);\n            nextTime += interval;\n            interpolatedValues.push(nextValue);\n            nextValue += step;\n          }\n          curve.times = inject(curve.times, i, interpolatedTimes);\n          curve.values = inject(curve.values, i, interpolatedValues);\n        }\n      }\n    }\n  }]);\n  return AnimationParser;\n}();\nvar TextParser = /*#__PURE__*/function () {\n  function TextParser() {\n    _classCallCheck(this, TextParser);\n  }\n  _createClass(TextParser, [{\n    key: \"getPrevNode\",\n    value: function getPrevNode() {\n      return this.nodeStack[this.currentIndent - 2];\n    }\n  }, {\n    key: \"getCurrentNode\",\n    value: function getCurrentNode() {\n      return this.nodeStack[this.currentIndent - 1];\n    }\n  }, {\n    key: \"getCurrentProp\",\n    value: function getCurrentProp() {\n      return this.currentProp;\n    }\n  }, {\n    key: \"pushStack\",\n    value: function pushStack(node) {\n      this.nodeStack.push(node);\n      this.currentIndent += 1;\n    }\n  }, {\n    key: \"popStack\",\n    value: function popStack() {\n      this.nodeStack.pop();\n      this.currentIndent -= 1;\n    }\n  }, {\n    key: \"setCurrentProp\",\n    value: function setCurrentProp(val, name) {\n      this.currentProp = val;\n      this.currentPropName = name;\n    }\n  }, {\n    key: \"parse\",\n    value: function parse(text) {\n      this.currentIndent = 0;\n      this.allNodes = new FBXTree();\n      this.nodeStack = [];\n      this.currentProp = [];\n      this.currentPropName = \"\";\n      var scope = this;\n      var split = text.split(/[\\r\\n]+/);\n      split.forEach(function (line, i) {\n        var matchComment = line.match(/^[\\s\\t]*;/);\n        var matchEmpty = line.match(/^[\\s\\t]*$/);\n        if (matchComment || matchEmpty) return;\n        var matchBeginning = line.match(\"^\\\\t{\" + scope.currentIndent + \"}(\\\\w+):(.*){\", \"\");\n        var matchProperty = line.match(\"^\\\\t{\" + scope.currentIndent + \"}(\\\\w+):[\\\\s\\\\t\\\\r\\\\n](.*)\");\n        var matchEnd = line.match(\"^\\\\t{\" + (scope.currentIndent - 1) + \"}}\");\n        if (matchBeginning) {\n          scope.parseNodeBegin(line, matchBeginning);\n        } else if (matchProperty) {\n          scope.parseNodeProperty(line, matchProperty, split[++i]);\n        } else if (matchEnd) {\n          scope.popStack();\n        } else if (line.match(/^[^\\s\\t}]/)) {\n          scope.parseNodePropertyContinued(line);\n        }\n      });\n      return this.allNodes;\n    }\n  }, {\n    key: \"parseNodeBegin\",\n    value: function parseNodeBegin(line, property) {\n      var nodeName = property[1].trim().replace(/^\"/, \"\").replace(/\"$/, \"\");\n      var nodeAttrs = property[2].split(\",\").map(function (attr) {\n        return attr.trim().replace(/^\"/, \"\").replace(/\"$/, \"\");\n      });\n      var node = {\n        name: nodeName\n      };\n      var attrs = this.parseNodeAttr(nodeAttrs);\n      var currentNode = this.getCurrentNode();\n      if (this.currentIndent === 0) {\n        this.allNodes.add(nodeName, node);\n      } else {\n        if (nodeName in currentNode) {\n          if (nodeName === \"PoseNode\") {\n            currentNode.PoseNode.push(node);\n          } else if (currentNode[nodeName].id !== void 0) {\n            currentNode[nodeName] = {};\n            currentNode[nodeName][currentNode[nodeName].id] = currentNode[nodeName];\n          }\n          if (attrs.id !== \"\") currentNode[nodeName][attrs.id] = node;\n        } else if (typeof attrs.id === \"number\") {\n          currentNode[nodeName] = {};\n          currentNode[nodeName][attrs.id] = node;\n        } else if (nodeName !== \"Properties70\") {\n          if (nodeName === \"PoseNode\") currentNode[nodeName] = [node];else currentNode[nodeName] = node;\n        }\n      }\n      if (typeof attrs.id === \"number\") node.id = attrs.id;\n      if (attrs.name !== \"\") node.attrName = attrs.name;\n      if (attrs.type !== \"\") node.attrType = attrs.type;\n      this.pushStack(node);\n    }\n  }, {\n    key: \"parseNodeAttr\",\n    value: function parseNodeAttr(attrs) {\n      var id = attrs[0];\n      if (attrs[0] !== \"\") {\n        id = parseInt(attrs[0]);\n        if (isNaN(id)) {\n          id = attrs[0];\n        }\n      }\n      var name = \"\",\n        type = \"\";\n      if (attrs.length > 1) {\n        name = attrs[1].replace(/^(\\w+)::/, \"\");\n        type = attrs[2];\n      }\n      return {\n        id: id,\n        name: name,\n        type: type\n      };\n    }\n  }, {\n    key: \"parseNodeProperty\",\n    value: function parseNodeProperty(line, property, contentLine) {\n      var propName = property[1].replace(/^\"/, \"\").replace(/\"$/, \"\").trim();\n      var propValue = property[2].replace(/^\"/, \"\").replace(/\"$/, \"\").trim();\n      if (propName === \"Content\" && propValue === \",\") {\n        propValue = contentLine.replace(/\"/g, \"\").replace(/,$/, \"\").trim();\n      }\n      var currentNode = this.getCurrentNode();\n      var parentName = currentNode.name;\n      if (parentName === \"Properties70\") {\n        this.parseNodeSpecialProperty(line, propName, propValue);\n        return;\n      }\n      if (propName === \"C\") {\n        var connProps = propValue.split(\",\").slice(1);\n        var from = parseInt(connProps[0]);\n        var to = parseInt(connProps[1]);\n        var rest = propValue.split(\",\").slice(3);\n        rest = rest.map(function (elem) {\n          return elem.trim().replace(/^\"/, \"\");\n        });\n        propName = \"connections\";\n        propValue = [from, to];\n        append(propValue, rest);\n        if (currentNode[propName] === void 0) {\n          currentNode[propName] = [];\n        }\n      }\n      if (propName === \"Node\") currentNode.id = propValue;\n      if (propName in currentNode && Array.isArray(currentNode[propName])) {\n        currentNode[propName].push(propValue);\n      } else {\n        if (propName !== \"a\") currentNode[propName] = propValue;else currentNode.a = propValue;\n      }\n      this.setCurrentProp(currentNode, propName);\n      if (propName === \"a\" && propValue.slice(-1) !== \",\") {\n        currentNode.a = parseNumberArray(propValue);\n      }\n    }\n  }, {\n    key: \"parseNodePropertyContinued\",\n    value: function parseNodePropertyContinued(line) {\n      var currentNode = this.getCurrentNode();\n      currentNode.a += line;\n      if (line.slice(-1) !== \",\") {\n        currentNode.a = parseNumberArray(currentNode.a);\n      }\n    }\n    // parse \"Property70\"\n  }, {\n    key: \"parseNodeSpecialProperty\",\n    value: function parseNodeSpecialProperty(line, propName, propValue) {\n      var props = propValue.split('\",').map(function (prop) {\n        return prop.trim().replace(/^\\\"/, \"\").replace(/\\s/, \"_\");\n      });\n      var innerPropName = props[0];\n      var innerPropType1 = props[1];\n      var innerPropType2 = props[2];\n      var innerPropFlag = props[3];\n      var innerPropValue = props[4];\n      switch (innerPropType1) {\n        case \"int\":\n        case \"enum\":\n        case \"bool\":\n        case \"ULongLong\":\n        case \"double\":\n        case \"Number\":\n        case \"FieldOfView\":\n          innerPropValue = parseFloat(innerPropValue);\n          break;\n        case \"Color\":\n        case \"ColorRGB\":\n        case \"Vector3D\":\n        case \"Lcl_Translation\":\n        case \"Lcl_Rotation\":\n        case \"Lcl_Scaling\":\n          innerPropValue = parseNumberArray(innerPropValue);\n          break;\n      }\n      this.getPrevNode()[innerPropName] = {\n        type: innerPropType1,\n        type2: innerPropType2,\n        flag: innerPropFlag,\n        value: innerPropValue\n      };\n      this.setCurrentProp(this.getPrevNode(), innerPropName);\n    }\n  }]);\n  return TextParser;\n}();\nvar BinaryParser = /*#__PURE__*/function () {\n  function BinaryParser() {\n    _classCallCheck(this, BinaryParser);\n  }\n  _createClass(BinaryParser, [{\n    key: \"parse\",\n    value: function parse(buffer) {\n      var reader = new BinaryReader(buffer);\n      reader.skip(23);\n      var version = reader.getUint32();\n      if (version < 6400) {\n        throw new Error(\"THREE.FBXLoader: FBX version not supported, FileVersion: \" + version);\n      }\n      var allNodes = new FBXTree();\n      while (!this.endOfContent(reader)) {\n        var node = this.parseNode(reader, version);\n        if (node !== null) allNodes.add(node.name, node);\n      }\n      return allNodes;\n    }\n    // Check if reader has reached the end of content.\n  }, {\n    key: \"endOfContent\",\n    value: function endOfContent(reader) {\n      if (reader.size() % 16 === 0) {\n        return (reader.getOffset() + 160 + 16 & ~15) >= reader.size();\n      } else {\n        return reader.getOffset() + 160 + 16 >= reader.size();\n      }\n    }\n    // recursively parse nodes until the end of the file is reached\n  }, {\n    key: \"parseNode\",\n    value: function parseNode(reader, version) {\n      var node = {};\n      var endOffset = version >= 7500 ? reader.getUint64() : reader.getUint32();\n      var numProperties = version >= 7500 ? reader.getUint64() : reader.getUint32();\n      version >= 7500 ? reader.getUint64() : reader.getUint32();\n      var nameLen = reader.getUint8();\n      var name = reader.getString(nameLen);\n      if (endOffset === 0) return null;\n      var propertyList = [];\n      for (var i = 0; i < numProperties; i++) {\n        propertyList.push(this.parseProperty(reader));\n      }\n      var id = propertyList.length > 0 ? propertyList[0] : \"\";\n      var attrName = propertyList.length > 1 ? propertyList[1] : \"\";\n      var attrType = propertyList.length > 2 ? propertyList[2] : \"\";\n      node.singleProperty = numProperties === 1 && reader.getOffset() === endOffset ? true : false;\n      while (endOffset > reader.getOffset()) {\n        var subNode = this.parseNode(reader, version);\n        if (subNode !== null) this.parseSubNode(name, node, subNode);\n      }\n      node.propertyList = propertyList;\n      if (typeof id === \"number\") node.id = id;\n      if (attrName !== \"\") node.attrName = attrName;\n      if (attrType !== \"\") node.attrType = attrType;\n      if (name !== \"\") node.name = name;\n      return node;\n    }\n  }, {\n    key: \"parseSubNode\",\n    value: function parseSubNode(name, node, subNode) {\n      if (subNode.singleProperty === true) {\n        var value = subNode.propertyList[0];\n        if (Array.isArray(value)) {\n          node[subNode.name] = subNode;\n          subNode.a = value;\n        } else {\n          node[subNode.name] = value;\n        }\n      } else if (name === \"Connections\" && subNode.name === \"C\") {\n        var array = [];\n        subNode.propertyList.forEach(function (property, i) {\n          if (i !== 0) array.push(property);\n        });\n        if (node.connections === void 0) {\n          node.connections = [];\n        }\n        node.connections.push(array);\n      } else if (subNode.name === \"Properties70\") {\n        var keys = Object.keys(subNode);\n        keys.forEach(function (key) {\n          node[key] = subNode[key];\n        });\n      } else if (name === \"Properties70\" && subNode.name === \"P\") {\n        var innerPropName = subNode.propertyList[0];\n        var innerPropType1 = subNode.propertyList[1];\n        var innerPropType2 = subNode.propertyList[2];\n        var innerPropFlag = subNode.propertyList[3];\n        var innerPropValue;\n        if (innerPropName.indexOf(\"Lcl \") === 0) innerPropName = innerPropName.replace(\"Lcl \", \"Lcl_\");\n        if (innerPropType1.indexOf(\"Lcl \") === 0) innerPropType1 = innerPropType1.replace(\"Lcl \", \"Lcl_\");\n        if (innerPropType1 === \"Color\" || innerPropType1 === \"ColorRGB\" || innerPropType1 === \"Vector\" || innerPropType1 === \"Vector3D\" || innerPropType1.indexOf(\"Lcl_\") === 0) {\n          innerPropValue = [subNode.propertyList[4], subNode.propertyList[5], subNode.propertyList[6]];\n        } else {\n          innerPropValue = subNode.propertyList[4];\n        }\n        node[innerPropName] = {\n          type: innerPropType1,\n          type2: innerPropType2,\n          flag: innerPropFlag,\n          value: innerPropValue\n        };\n      } else if (node[subNode.name] === void 0) {\n        if (typeof subNode.id === \"number\") {\n          node[subNode.name] = {};\n          node[subNode.name][subNode.id] = subNode;\n        } else {\n          node[subNode.name] = subNode;\n        }\n      } else {\n        if (subNode.name === \"PoseNode\") {\n          if (!Array.isArray(node[subNode.name])) {\n            node[subNode.name] = [node[subNode.name]];\n          }\n          node[subNode.name].push(subNode);\n        } else if (node[subNode.name][subNode.id] === void 0) {\n          node[subNode.name][subNode.id] = subNode;\n        }\n      }\n    }\n  }, {\n    key: \"parseProperty\",\n    value: function parseProperty(reader) {\n      var type = reader.getString(1);\n      var length;\n      switch (type) {\n        case \"C\":\n          return reader.getBoolean();\n        case \"D\":\n          return reader.getFloat64();\n        case \"F\":\n          return reader.getFloat32();\n        case \"I\":\n          return reader.getInt32();\n        case \"L\":\n          return reader.getInt64();\n        case \"R\":\n          length = reader.getUint32();\n          return reader.getArrayBuffer(length);\n        case \"S\":\n          length = reader.getUint32();\n          return reader.getString(length);\n        case \"Y\":\n          return reader.getInt16();\n        case \"b\":\n        case \"c\":\n        case \"d\":\n        case \"f\":\n        case \"i\":\n        case \"l\":\n          var arrayLength = reader.getUint32();\n          var encoding = reader.getUint32();\n          var compressedLength = reader.getUint32();\n          if (encoding === 0) {\n            switch (type) {\n              case \"b\":\n              case \"c\":\n                return reader.getBooleanArray(arrayLength);\n              case \"d\":\n                return reader.getFloat64Array(arrayLength);\n              case \"f\":\n                return reader.getFloat32Array(arrayLength);\n              case \"i\":\n                return reader.getInt32Array(arrayLength);\n              case \"l\":\n                return reader.getInt64Array(arrayLength);\n            }\n          }\n          var data = unzlibSync(new Uint8Array(reader.getArrayBuffer(compressedLength)));\n          var reader2 = new BinaryReader(data.buffer);\n          switch (type) {\n            case \"b\":\n            case \"c\":\n              return reader2.getBooleanArray(arrayLength);\n            case \"d\":\n              return reader2.getFloat64Array(arrayLength);\n            case \"f\":\n              return reader2.getFloat32Array(arrayLength);\n            case \"i\":\n              return reader2.getInt32Array(arrayLength);\n            case \"l\":\n              return reader2.getInt64Array(arrayLength);\n          }\n        default:\n          throw new Error(\"THREE.FBXLoader: Unknown property type \" + type);\n      }\n    }\n  }]);\n  return BinaryParser;\n}();\nvar BinaryReader = /*#__PURE__*/function () {\n  function BinaryReader(buffer, littleEndian) {\n    _classCallCheck(this, BinaryReader);\n    this.dv = new DataView(buffer);\n    this.offset = 0;\n    this.littleEndian = littleEndian !== void 0 ? littleEndian : true;\n  }\n  _createClass(BinaryReader, [{\n    key: \"getOffset\",\n    value: function getOffset() {\n      return this.offset;\n    }\n  }, {\n    key: \"size\",\n    value: function size() {\n      return this.dv.buffer.byteLength;\n    }\n  }, {\n    key: \"skip\",\n    value: function skip(length) {\n      this.offset += length;\n    }\n    // seems like true/false representation depends on exporter.\n    // true: 1 or 'Y'(=0x59), false: 0 or 'T'(=0x54)\n    // then sees LSB.\n  }, {\n    key: \"getBoolean\",\n    value: function getBoolean() {\n      return (this.getUint8() & 1) === 1;\n    }\n  }, {\n    key: \"getBooleanArray\",\n    value: function getBooleanArray(size) {\n      var a = [];\n      for (var i = 0; i < size; i++) {\n        a.push(this.getBoolean());\n      }\n      return a;\n    }\n  }, {\n    key: \"getUint8\",\n    value: function getUint8() {\n      var value = this.dv.getUint8(this.offset);\n      this.offset += 1;\n      return value;\n    }\n  }, {\n    key: \"getInt16\",\n    value: function getInt16() {\n      var value = this.dv.getInt16(this.offset, this.littleEndian);\n      this.offset += 2;\n      return value;\n    }\n  }, {\n    key: \"getInt32\",\n    value: function getInt32() {\n      var value = this.dv.getInt32(this.offset, this.littleEndian);\n      this.offset += 4;\n      return value;\n    }\n  }, {\n    key: \"getInt32Array\",\n    value: function getInt32Array(size) {\n      var a = [];\n      for (var i = 0; i < size; i++) {\n        a.push(this.getInt32());\n      }\n      return a;\n    }\n  }, {\n    key: \"getUint32\",\n    value: function getUint32() {\n      var value = this.dv.getUint32(this.offset, this.littleEndian);\n      this.offset += 4;\n      return value;\n    }\n    // JavaScript doesn't support 64-bit integer so calculate this here\n    // 1 << 32 will return 1 so using multiply operation instead here.\n    // There's a possibility that this method returns wrong value if the value\n    // is out of the range between Number.MAX_SAFE_INTEGER and Number.MIN_SAFE_INTEGER.\n    // TODO: safely handle 64-bit integer\n  }, {\n    key: \"getInt64\",\n    value: function getInt64() {\n      var low, high;\n      if (this.littleEndian) {\n        low = this.getUint32();\n        high = this.getUint32();\n      } else {\n        high = this.getUint32();\n        low = this.getUint32();\n      }\n      if (high & 2147483648) {\n        high = ~high & 4294967295;\n        low = ~low & 4294967295;\n        if (low === 4294967295) high = high + 1 & 4294967295;\n        low = low + 1 & 4294967295;\n        return -(high * 4294967296 + low);\n      }\n      return high * 4294967296 + low;\n    }\n  }, {\n    key: \"getInt64Array\",\n    value: function getInt64Array(size) {\n      var a = [];\n      for (var i = 0; i < size; i++) {\n        a.push(this.getInt64());\n      }\n      return a;\n    }\n    // Note: see getInt64() comment\n  }, {\n    key: \"getUint64\",\n    value: function getUint64() {\n      var low, high;\n      if (this.littleEndian) {\n        low = this.getUint32();\n        high = this.getUint32();\n      } else {\n        high = this.getUint32();\n        low = this.getUint32();\n      }\n      return high * 4294967296 + low;\n    }\n  }, {\n    key: \"getFloat32\",\n    value: function getFloat32() {\n      var value = this.dv.getFloat32(this.offset, this.littleEndian);\n      this.offset += 4;\n      return value;\n    }\n  }, {\n    key: \"getFloat32Array\",\n    value: function getFloat32Array(size) {\n      var a = [];\n      for (var i = 0; i < size; i++) {\n        a.push(this.getFloat32());\n      }\n      return a;\n    }\n  }, {\n    key: \"getFloat64\",\n    value: function getFloat64() {\n      var value = this.dv.getFloat64(this.offset, this.littleEndian);\n      this.offset += 8;\n      return value;\n    }\n  }, {\n    key: \"getFloat64Array\",\n    value: function getFloat64Array(size) {\n      var a = [];\n      for (var i = 0; i < size; i++) {\n        a.push(this.getFloat64());\n      }\n      return a;\n    }\n  }, {\n    key: \"getArrayBuffer\",\n    value: function getArrayBuffer(size) {\n      var value = this.dv.buffer.slice(this.offset, this.offset + size);\n      this.offset += size;\n      return value;\n    }\n  }, {\n    key: \"getString\",\n    value: function getString(size) {\n      var a = [];\n      for (var i = 0; i < size; i++) {\n        a[i] = this.getUint8();\n      }\n      var nullByte = a.indexOf(0);\n      if (nullByte >= 0) a = a.slice(0, nullByte);\n      return LoaderUtils.decodeText(new Uint8Array(a));\n    }\n  }]);\n  return BinaryReader;\n}();\nvar FBXTree = /*#__PURE__*/function () {\n  function FBXTree() {\n    _classCallCheck(this, FBXTree);\n  }\n  _createClass(FBXTree, [{\n    key: \"add\",\n    value: function add(key, val) {\n      this[key] = val;\n    }\n  }]);\n  return FBXTree;\n}();\nfunction isFbxFormatBinary(buffer) {\n  var CORRECT = \"Kaydara FBX Binary  \\0\";\n  return buffer.byteLength >= CORRECT.length && CORRECT === convertArrayBufferToString(buffer, 0, CORRECT.length);\n}\nfunction isFbxFormatASCII(text) {\n  var CORRECT = [\"K\", \"a\", \"y\", \"d\", \"a\", \"r\", \"a\", \"\\\\\", \"F\", \"B\", \"X\", \"\\\\\", \"B\", \"i\", \"n\", \"a\", \"r\", \"y\", \"\\\\\", \"\\\\\"];\n  var cursor = 0;\n  function read(offset) {\n    var result = text[offset - 1];\n    text = text.slice(cursor + offset);\n    cursor++;\n    return result;\n  }\n  for (var i = 0; i < CORRECT.length; ++i) {\n    var num = read(1);\n    if (num === CORRECT[i]) {\n      return false;\n    }\n  }\n  return true;\n}\nfunction getFbxVersion(text) {\n  var versionRegExp = /FBXVersion: (\\d+)/;\n  var match = text.match(versionRegExp);\n  if (match) {\n    var version = parseInt(match[1]);\n    return version;\n  }\n  throw new Error(\"THREE.FBXLoader: Cannot find the version number for the file given.\");\n}\nfunction convertFBXTimeToSeconds(time) {\n  return time / 46186158e3;\n}\nvar dataArray = [];\nfunction getData(polygonVertexIndex, polygonIndex, vertexIndex, infoObject) {\n  var index;\n  switch (infoObject.mappingType) {\n    case \"ByPolygonVertex\":\n      index = polygonVertexIndex;\n      break;\n    case \"ByPolygon\":\n      index = polygonIndex;\n      break;\n    case \"ByVertice\":\n      index = vertexIndex;\n      break;\n    case \"AllSame\":\n      index = infoObject.indices[0];\n      break;\n    default:\n      console.warn(\"THREE.FBXLoader: unknown attribute mapping type \" + infoObject.mappingType);\n  }\n  if (infoObject.referenceType === \"IndexToDirect\") index = infoObject.indices[index];\n  var from = index * infoObject.dataSize;\n  var to = from + infoObject.dataSize;\n  return slice(dataArray, infoObject.buffer, from, to);\n}\nvar tempEuler = /* @__PURE__ */new Euler();\nvar tempVec = /* @__PURE__ */new Vector3();\nfunction generateTransform(transformData) {\n  var lTranslationM = new Matrix4();\n  var lPreRotationM = new Matrix4();\n  var lRotationM = new Matrix4();\n  var lPostRotationM = new Matrix4();\n  var lScalingM = new Matrix4();\n  var lScalingPivotM = new Matrix4();\n  var lScalingOffsetM = new Matrix4();\n  var lRotationOffsetM = new Matrix4();\n  var lRotationPivotM = new Matrix4();\n  var lParentGX = new Matrix4();\n  var lParentLX = new Matrix4();\n  var lGlobalT = new Matrix4();\n  var inheritType = transformData.inheritType ? transformData.inheritType : 0;\n  if (transformData.translation) lTranslationM.setPosition(tempVec.fromArray(transformData.translation));\n  if (transformData.preRotation) {\n    var array = transformData.preRotation.map(MathUtils.degToRad);\n    array.push(transformData.eulerOrder);\n    lPreRotationM.makeRotationFromEuler(tempEuler.fromArray(array));\n  }\n  if (transformData.rotation) {\n    var _array = transformData.rotation.map(MathUtils.degToRad);\n    _array.push(transformData.eulerOrder);\n    lRotationM.makeRotationFromEuler(tempEuler.fromArray(_array));\n  }\n  if (transformData.postRotation) {\n    var _array2 = transformData.postRotation.map(MathUtils.degToRad);\n    _array2.push(transformData.eulerOrder);\n    lPostRotationM.makeRotationFromEuler(tempEuler.fromArray(_array2));\n    lPostRotationM.invert();\n  }\n  if (transformData.scale) lScalingM.scale(tempVec.fromArray(transformData.scale));\n  if (transformData.scalingOffset) lScalingOffsetM.setPosition(tempVec.fromArray(transformData.scalingOffset));\n  if (transformData.scalingPivot) lScalingPivotM.setPosition(tempVec.fromArray(transformData.scalingPivot));\n  if (transformData.rotationOffset) lRotationOffsetM.setPosition(tempVec.fromArray(transformData.rotationOffset));\n  if (transformData.rotationPivot) lRotationPivotM.setPosition(tempVec.fromArray(transformData.rotationPivot));\n  if (transformData.parentMatrixWorld) {\n    lParentLX.copy(transformData.parentMatrix);\n    lParentGX.copy(transformData.parentMatrixWorld);\n  }\n  var lLRM = lPreRotationM.clone().multiply(lRotationM).multiply(lPostRotationM);\n  var lParentGRM = new Matrix4();\n  lParentGRM.extractRotation(lParentGX);\n  var lParentTM = new Matrix4();\n  lParentTM.copyPosition(lParentGX);\n  var lParentGRSM = lParentTM.clone().invert().multiply(lParentGX);\n  var lParentGSM = lParentGRM.clone().invert().multiply(lParentGRSM);\n  var lLSM = lScalingM;\n  var lGlobalRS = new Matrix4();\n  if (inheritType === 0) {\n    lGlobalRS.copy(lParentGRM).multiply(lLRM).multiply(lParentGSM).multiply(lLSM);\n  } else if (inheritType === 1) {\n    lGlobalRS.copy(lParentGRM).multiply(lParentGSM).multiply(lLRM).multiply(lLSM);\n  } else {\n    var lParentLSM = new Matrix4().scale(new Vector3().setFromMatrixScale(lParentLX));\n    var lParentLSM_inv = lParentLSM.clone().invert();\n    var lParentGSM_noLocal = lParentGSM.clone().multiply(lParentLSM_inv);\n    lGlobalRS.copy(lParentGRM).multiply(lLRM).multiply(lParentGSM_noLocal).multiply(lLSM);\n  }\n  var lRotationPivotM_inv = lRotationPivotM.clone().invert();\n  var lScalingPivotM_inv = lScalingPivotM.clone().invert();\n  var lTransform = lTranslationM.clone().multiply(lRotationOffsetM).multiply(lRotationPivotM).multiply(lPreRotationM).multiply(lRotationM).multiply(lPostRotationM).multiply(lRotationPivotM_inv).multiply(lScalingOffsetM).multiply(lScalingPivotM).multiply(lScalingM).multiply(lScalingPivotM_inv);\n  var lLocalTWithAllPivotAndOffsetInfo = new Matrix4().copyPosition(lTransform);\n  var lGlobalTranslation = lParentGX.clone().multiply(lLocalTWithAllPivotAndOffsetInfo);\n  lGlobalT.copyPosition(lGlobalTranslation);\n  lTransform = lGlobalT.clone().multiply(lGlobalRS);\n  lTransform.premultiply(lParentGX.invert());\n  return lTransform;\n}\nfunction getEulerOrder(order) {\n  order = order || 0;\n  var enums = [\"ZYX\",\n  // -> XYZ extrinsic\n  \"YZX\",\n  // -> XZY extrinsic\n  \"XZY\",\n  // -> YZX extrinsic\n  \"ZXY\",\n  // -> YXZ extrinsic\n  \"YXZ\",\n  // -> ZXY extrinsic\n  \"XYZ\"\n  // -> ZYX extrinsic\n  //'SphericXYZ', // not possible to support\n  ];\n\n  if (order === 6) {\n    console.warn(\"THREE.FBXLoader: unsupported Euler Order: Spherical XYZ. Animations and rotations may be incorrect.\");\n    return enums[0];\n  }\n  return enums[order];\n}\nfunction parseNumberArray(value) {\n  var array = value.split(\",\").map(function (val) {\n    return parseFloat(val);\n  });\n  return array;\n}\nfunction convertArrayBufferToString(buffer, from, to) {\n  if (from === void 0) from = 0;\n  if (to === void 0) to = buffer.byteLength;\n  return LoaderUtils.decodeText(new Uint8Array(buffer, from, to));\n}\nfunction append(a, b) {\n  for (var i = 0, j = a.length, l = b.length; i < l; i++, j++) {\n    a[j] = b[i];\n  }\n}\nfunction slice(a, b, from, to) {\n  for (var i = from, j = 0; i < to; i++, j++) {\n    a[j] = b[i];\n  }\n  return a;\n}\nfunction inject(a1, index, a2) {\n  return a1.slice(0, index).concat(a2).concat(a1.slice(index));\n}\nexport { FBXLoader };","map":{"version":3,"names":["Loader","LoaderUtils","FileLoader","TextureLoader","RepeatWrapping","ClampToEdgeWrapping","Texture","MeshPhongMaterial","MeshLambertMaterial","Color","EquirectangularReflectionMapping","Matrix4","Group","Bone","PropertyBinding","Object3D","OrthographicCamera","PerspectiveCamera","PointLight","MathUtils","SpotLight","DirectionalLight","SkinnedMesh","Mesh","LineBasicMaterial","Line","Vector3","Skeleton","AmbientLight","BufferGeometry","Float32BufferAttribute","Uint16BufferAttribute","Matrix3","Vector4","AnimationClip","Quaternion","Euler","VectorKeyframeTrack","QuaternionKeyframeTrack","NumberKeyframeTrack","unzlibSync","NURBSCurve","fbxTree","connections","sceneGraph","FBXLoader","_Loader","_inherits","_super","_createSuper","manager","_classCallCheck","call","_createClass","key","value","load","url","onLoad","onProgress","onError","scope","path","extractUrlBase","loader","setPath","setResponseType","setRequestHeader","requestHeader","setWithCredentials","withCredentials","buffer","parse","e","console","error","itemError","FBXBuffer","isFbxFormatBinary","BinaryParser","FBXText","convertArrayBufferToString","isFbxFormatASCII","Error","getFbxVersion","TextParser","textureLoader","resourcePath","setCrossOrigin","crossOrigin","FBXTreeParser","parseConnections","images","parseImages","textures","parseTextures","materials","parseMaterials","deformers","parseDeformers","geometryMap","GeometryParser","parseScene","connectionMap","Map","rawConnections","Connections","forEach","rawConnection","fromID","toID","relationship","has","set","parents","children","parentRelationship","ID","get","push","childRelationship","blobs","Objects","videoNodes","Video","nodeID","videoNode","id","parseInt","RelativeFilename","Filename","arrayBufferContent","Content","ArrayBuffer","byteLength","base64Content","image","parseImage","filename","split","pop","content","fileName","extension","slice","lastIndexOf","toLowerCase","type","getHandler","warn","array","Uint8Array","window","URL","createObjectURL","Blob","textureMap","textureNodes","texture","parseTexture","textureNode","loadTexture","name","attrName","wrapModeU","WrapModeU","wrapModeV","WrapModeV","valueU","valueV","wrapS","wrapT","values","Scaling","repeat","x","y","currentPath","length","indexOf","FileName","materialMap","materialNodes","Material","material","parseMaterial","materialNode","ShadingModel","parameters","parseParameters","setValues","BumpFactor","bumpScale","Diffuse","color","fromArray","DiffuseColor","DisplacementFactor","displacementScale","Emissive","emissive","EmissiveColor","EmissiveFactor","emissiveIntensity","parseFloat","Opacity","opacity","transparent","ReflectionFactor","reflectivity","Shininess","shininess","Specular","specular","SpecularColor","child","bumpMap","getTexture","aoMap","map","colorSpace","encoding","displacementMap","emissiveMap","normalMap","envMap","mapping","specularMap","alphaMap","LayeredTexture","skeletons","morphTargets","DeformerNodes","Deformer","deformerNode","relationships","attrType","skeleton","parseSkeleton","geometryID","morphTarget","rawTargets","parseMorphTargets","deformerNodes","rawBones","boneNode","rawBone","indices","weights","transformLink","TransformLink","a","Indexes","Weights","bones","rawMorphTargets","i","morphTargetNode","rawMorphTarget","initialWeight","DeformPercent","fullWeights","FullWeights","geoID","filter","child2","modelMap","parseModels","modelNodes","Model","model","modelNode","setLookAtProperties","parentConnections","connection","parent","add","bindSkeleton","createAmbientLight","traverse","node","userData","transformData","parentMatrix","matrix","parentMatrixWorld","matrixWorld","transform","generateTransform","applyMatrix4","updateWorldMatrix","animations","AnimationParser","isGroup","buildSkeleton","createCamera","createLight","createMesh","createCurve","sanitizeNodeName","getTransformData","bone","_loop","subBone","copy","cameraAttribute","attr","NodeAttribute","CameraProjectionType","nearClippingPlane","NearPlane","farClippingPlane","FarPlane","width","innerWidth","height","innerHeight","AspectWidth","AspectHeight","aspect","fov","FieldOfView","focalLength","FocalLength","setFocalLength","lightAttribute","LightType","intensity","Intensity","CastLightOnObject","distance","FarAttenuationEnd","EnableFarAttenuation","decay","angle","Math","PI","InnerAngle","degToRad","penumbra","OuterAngle","max","CastShadows","castShadow","geometry","attributes","material2","vertexColors","FBX_Deformer","normalizeSkinWeights","reduce","geo","linewidth","inheritType","InheritType","eulerOrder","getEulerOrder","RotationOrder","translation","Lcl_Translation","preRotation","PreRotation","rotation","Lcl_Rotation","postRotation","PostRotation","scale","Lcl_Scaling","scalingOffset","ScalingOffset","scalingPivot","ScalingPivot","rotationOffset","RotationOffset","rotationPivot","RotationPivot","lookAtTarget","pos","target","position","lookAt","bindMatrices","parsePoseNodes","_loop2","geoRelationships","geoConnParent","bind","BindPoseNode","Pose","NbPoseNodes","poseNodes","PoseNode","Array","isArray","poseNode","Node","Matrix","GlobalSettings","ambientColor","AmbientColor","r","g","b","geoNodes","Geometry","parseGeometry","geoNode","parseMeshGeometry","parseNurbsGeometry","skeleton2","GeometricTranslation","GeometricRotation","GeometricScaling","genGeometry","preTransform","geoInfo","parseGeoNode","buffers","genBuffers","positionAttribute","vertex","setAttribute","colors","weightsIndices","vertexWeights","normal","normalMatrix","getNormalMatrix","normalAttribute","applyNormalMatrix","uvs","uvBuffer","toString","mappingType","prevMaterialIndex","materialIndex","startIndex","currentIndex","addGroup","groups","lastGroup","lastIndex","start","count","addMorphTargets","vertexPositions","Vertices","vertexIndices","PolygonVertexIndex","LayerElementColor","parseVertexColors","LayerElementMaterial","parseMaterialIndices","LayerElementNormal","parseNormals","LayerElementUV","uv","UV","parseUVs","weightTable","index","j","weight","polygonIndex","faceLength","displayedWeightsWarning","facePositionIndexes","faceNormals","faceColors","faceUVs","faceWeights","faceWeightIndices","vertexIndex","polygonVertexIndex","endOfFace","weightIndices","data","getData","wt","wIndex","Weight","weightIndex","currentWeight","comparedWeight","comparedWeightIndex","comparedWeightArray","tmp","genFace","_loop3","parentGeo","parentGeoNode","morphTargetsRelative","morphAttributes","rawTarget","morphGeoNode","genMorphGeometry","morphPositionsSparse","morphPositions","Float32Array","morphIndex","morphGeoInfo","morphBuffers","NormalNode","MappingInformationType","referenceType","ReferenceInformationType","Normals","indexBuffer","NormalIndex","NormalsIndex","dataSize","UVNode","UVIndex","ColorNode","Colors","ColorIndex","MaterialNode","materialIndexBuffer","Materials","materialIndices","order","Order","isNaN","degree","knots","KnotVector","controlPoints","pointsValues","Points","l","startKnot","endKnot","Form","curve","points","getPoints","setFromPoints","animationClips","rawClips","parseClips","rawClip","clip","addClip","AnimationCurve","curveNodesMap","parseAnimationCurveNodes","parseAnimationCurves","layersMap","parseAnimationLayers","parseAnimStacks","rawCurveNodes","AnimationCurveNode","rawCurveNode","match","curveNode","curves","rawCurves","animationCurve","times","KeyTime","convertFBXTimeToSeconds","KeyValueFloat","animationCurveID","animationCurveRelationship","rawLayers","AnimationLayer","_loop4","layerCurveNodes","z","modelID","rawModel","modelName","initialPosition","initialRotation","initialScale","morph","deformerID","morpherID","morphName","rawStacks","AnimationStack","layer","tracks","rawTracks","concat","generateTracks","decompose","toArray","setFromQuaternion","T","Object","keys","positionTrack","generateVectorTrack","R","rotationTrack","generateRotationTrack","S","scaleTrack","morphTrack","generateMorphTrack","initialValue","getTimesForAllAxes","getKeyframeTrackValues","interpolateRotations","setFromEuler","invert","quaternion","euler","quaternionValues","premultiply","multiply","val","morphNum","getObjectByName","morphTargetDictionary","sort","targetIndex","lastValue","currentValue","prevValue","xIndex","yIndex","zIndex","time","xValue","yValue","zValue","valuesSpan","absoluteSpan","abs","numSubIntervals","step","nextValue","initialTime","timeSpan","interval","nextTime","interpolatedTimes","interpolatedValues","inject","getPrevNode","nodeStack","currentIndent","getCurrentNode","getCurrentProp","currentProp","pushStack","popStack","setCurrentProp","currentPropName","text","allNodes","FBXTree","line","matchComment","matchEmpty","matchBeginning","matchProperty","matchEnd","parseNodeBegin","parseNodeProperty","parseNodePropertyContinued","property","nodeName","trim","replace","nodeAttrs","attrs","parseNodeAttr","currentNode","contentLine","propName","propValue","parentName","parseNodeSpecialProperty","connProps","from","to","rest","elem","append","parseNumberArray","props","prop","innerPropName","innerPropType1","innerPropType2","innerPropFlag","innerPropValue","type2","flag","reader","BinaryReader","skip","version","getUint32","endOfContent","parseNode","size","getOffset","endOffset","getUint64","numProperties","nameLen","getUint8","getString","propertyList","parseProperty","singleProperty","subNode","parseSubNode","getBoolean","getFloat64","getFloat32","getInt32","getInt64","getArrayBuffer","getInt16","arrayLength","compressedLength","getBooleanArray","getFloat64Array","getFloat32Array","getInt32Array","getInt64Array","reader2","littleEndian","dv","DataView","offset","low","high","nullByte","decodeText","CORRECT","cursor","read","result","num","versionRegExp","dataArray","infoObject","tempEuler","tempVec","lTranslationM","lPreRotationM","lRotationM","lPostRotationM","lScalingM","lScalingPivotM","lScalingOffsetM","lRotationOffsetM","lRotationPivotM","lParentGX","lParentLX","lGlobalT","setPosition","makeRotationFromEuler","lLRM","clone","lParentGRM","extractRotation","lParentTM","copyPosition","lParentGRSM","lParentGSM","lLSM","lGlobalRS","lParentLSM","setFromMatrixScale","lParentLSM_inv","lParentGSM_noLocal","lRotationPivotM_inv","lScalingPivotM_inv","lTransform","lLocalTWithAllPivotAndOffsetInfo","lGlobalTranslation","enums","a1","a2"],"sources":["/home/krug/Coding/JavaScript/Websites/Personal/personal/node_modules/.pnpm/three-stdlib@2.23.7_three@0.151.3/node_modules/three-stdlib/loaders/FBXLoader.js"],"sourcesContent":["import { Loader, LoaderUtils, FileLoader, TextureLoader, RepeatWrapping, ClampToEdgeWrapping, Texture, MeshPhongMaterial, MeshLambertMaterial, Color, EquirectangularReflectionMapping, Matrix4, Group, Bone, PropertyBinding, Object3D, OrthographicCamera, PerspectiveCamera, PointLight, MathUtils, SpotLight, DirectionalLight, SkinnedMesh, Mesh, LineBasicMaterial, Line, Vector3, Skeleton, AmbientLight, BufferGeometry, Float32BufferAttribute, Uint16BufferAttribute, Matrix3, Vector4, AnimationClip, Quaternion, Euler, VectorKeyframeTrack, QuaternionKeyframeTrack, NumberKeyframeTrack } from \"three\";\nimport { unzlibSync } from \"fflate\";\nimport { NURBSCurve } from \"../curves/NURBSCurve.js\";\nlet fbxTree;\nlet connections;\nlet sceneGraph;\nclass FBXLoader extends Loader {\n  constructor(manager) {\n    super(manager);\n  }\n  load(url, onLoad, onProgress, onError) {\n    const scope = this;\n    const path = scope.path === \"\" ? LoaderUtils.extractUrlBase(url) : scope.path;\n    const loader = new FileLoader(this.manager);\n    loader.setPath(scope.path);\n    loader.setResponseType(\"arraybuffer\");\n    loader.setRequestHeader(scope.requestHeader);\n    loader.setWithCredentials(scope.withCredentials);\n    loader.load(\n      url,\n      function(buffer) {\n        try {\n          onLoad(scope.parse(buffer, path));\n        } catch (e) {\n          if (onError) {\n            onError(e);\n          } else {\n            console.error(e);\n          }\n          scope.manager.itemError(url);\n        }\n      },\n      onProgress,\n      onError\n    );\n  }\n  parse(FBXBuffer, path) {\n    if (isFbxFormatBinary(FBXBuffer)) {\n      fbxTree = new BinaryParser().parse(FBXBuffer);\n    } else {\n      const FBXText = convertArrayBufferToString(FBXBuffer);\n      if (!isFbxFormatASCII(FBXText)) {\n        throw new Error(\"THREE.FBXLoader: Unknown format.\");\n      }\n      if (getFbxVersion(FBXText) < 7e3) {\n        throw new Error(\"THREE.FBXLoader: FBX version not supported, FileVersion: \" + getFbxVersion(FBXText));\n      }\n      fbxTree = new TextParser().parse(FBXText);\n    }\n    const textureLoader = new TextureLoader(this.manager).setPath(this.resourcePath || path).setCrossOrigin(this.crossOrigin);\n    return new FBXTreeParser(textureLoader, this.manager).parse(fbxTree);\n  }\n}\nclass FBXTreeParser {\n  constructor(textureLoader, manager) {\n    this.textureLoader = textureLoader;\n    this.manager = manager;\n  }\n  parse() {\n    connections = this.parseConnections();\n    const images = this.parseImages();\n    const textures = this.parseTextures(images);\n    const materials = this.parseMaterials(textures);\n    const deformers = this.parseDeformers();\n    const geometryMap = new GeometryParser().parse(deformers);\n    this.parseScene(deformers, geometryMap, materials);\n    return sceneGraph;\n  }\n  // Parses FBXTree.Connections which holds parent-child connections between objects (e.g. material -> texture, model->geometry )\n  // and details the connection type\n  parseConnections() {\n    const connectionMap = /* @__PURE__ */ new Map();\n    if (\"Connections\" in fbxTree) {\n      const rawConnections = fbxTree.Connections.connections;\n      rawConnections.forEach(function(rawConnection) {\n        const fromID = rawConnection[0];\n        const toID = rawConnection[1];\n        const relationship = rawConnection[2];\n        if (!connectionMap.has(fromID)) {\n          connectionMap.set(fromID, {\n            parents: [],\n            children: []\n          });\n        }\n        const parentRelationship = { ID: toID, relationship };\n        connectionMap.get(fromID).parents.push(parentRelationship);\n        if (!connectionMap.has(toID)) {\n          connectionMap.set(toID, {\n            parents: [],\n            children: []\n          });\n        }\n        const childRelationship = { ID: fromID, relationship };\n        connectionMap.get(toID).children.push(childRelationship);\n      });\n    }\n    return connectionMap;\n  }\n  // Parse FBXTree.Objects.Video for embedded image data\n  // These images are connected to textures in FBXTree.Objects.Textures\n  // via FBXTree.Connections.\n  parseImages() {\n    const images = {};\n    const blobs = {};\n    if (\"Video\" in fbxTree.Objects) {\n      const videoNodes = fbxTree.Objects.Video;\n      for (const nodeID in videoNodes) {\n        const videoNode = videoNodes[nodeID];\n        const id = parseInt(nodeID);\n        images[id] = videoNode.RelativeFilename || videoNode.Filename;\n        if (\"Content\" in videoNode) {\n          const arrayBufferContent = videoNode.Content instanceof ArrayBuffer && videoNode.Content.byteLength > 0;\n          const base64Content = typeof videoNode.Content === \"string\" && videoNode.Content !== \"\";\n          if (arrayBufferContent || base64Content) {\n            const image = this.parseImage(videoNodes[nodeID]);\n            blobs[videoNode.RelativeFilename || videoNode.Filename] = image;\n          }\n        }\n      }\n    }\n    for (const id in images) {\n      const filename = images[id];\n      if (blobs[filename] !== void 0)\n        images[id] = blobs[filename];\n      else\n        images[id] = images[id].split(\"\\\\\").pop();\n    }\n    return images;\n  }\n  // Parse embedded image data in FBXTree.Video.Content\n  parseImage(videoNode) {\n    const content = videoNode.Content;\n    const fileName = videoNode.RelativeFilename || videoNode.Filename;\n    const extension = fileName.slice(fileName.lastIndexOf(\".\") + 1).toLowerCase();\n    let type;\n    switch (extension) {\n      case \"bmp\":\n        type = \"image/bmp\";\n        break;\n      case \"jpg\":\n      case \"jpeg\":\n        type = \"image/jpeg\";\n        break;\n      case \"png\":\n        type = \"image/png\";\n        break;\n      case \"tif\":\n        type = \"image/tiff\";\n        break;\n      case \"tga\":\n        if (this.manager.getHandler(\".tga\") === null) {\n          console.warn(\"FBXLoader: TGA loader not found, skipping \", fileName);\n        }\n        type = \"image/tga\";\n        break;\n      default:\n        console.warn('FBXLoader: Image type \"' + extension + '\" is not supported.');\n        return;\n    }\n    if (typeof content === \"string\") {\n      return \"data:\" + type + \";base64,\" + content;\n    } else {\n      const array = new Uint8Array(content);\n      return window.URL.createObjectURL(new Blob([array], { type }));\n    }\n  }\n  // Parse nodes in FBXTree.Objects.Texture\n  // These contain details such as UV scaling, cropping, rotation etc and are connected\n  // to images in FBXTree.Objects.Video\n  parseTextures(images) {\n    const textureMap = /* @__PURE__ */ new Map();\n    if (\"Texture\" in fbxTree.Objects) {\n      const textureNodes = fbxTree.Objects.Texture;\n      for (const nodeID in textureNodes) {\n        const texture = this.parseTexture(textureNodes[nodeID], images);\n        textureMap.set(parseInt(nodeID), texture);\n      }\n    }\n    return textureMap;\n  }\n  // Parse individual node in FBXTree.Objects.Texture\n  parseTexture(textureNode, images) {\n    const texture = this.loadTexture(textureNode, images);\n    texture.ID = textureNode.id;\n    texture.name = textureNode.attrName;\n    const wrapModeU = textureNode.WrapModeU;\n    const wrapModeV = textureNode.WrapModeV;\n    const valueU = wrapModeU !== void 0 ? wrapModeU.value : 0;\n    const valueV = wrapModeV !== void 0 ? wrapModeV.value : 0;\n    texture.wrapS = valueU === 0 ? RepeatWrapping : ClampToEdgeWrapping;\n    texture.wrapT = valueV === 0 ? RepeatWrapping : ClampToEdgeWrapping;\n    if (\"Scaling\" in textureNode) {\n      const values = textureNode.Scaling.value;\n      texture.repeat.x = values[0];\n      texture.repeat.y = values[1];\n    }\n    return texture;\n  }\n  // load a texture specified as a blob or data URI, or via an external URL using TextureLoader\n  loadTexture(textureNode, images) {\n    let fileName;\n    const currentPath = this.textureLoader.path;\n    const children = connections.get(textureNode.id).children;\n    if (children !== void 0 && children.length > 0 && images[children[0].ID] !== void 0) {\n      fileName = images[children[0].ID];\n      if (fileName.indexOf(\"blob:\") === 0 || fileName.indexOf(\"data:\") === 0) {\n        this.textureLoader.setPath(void 0);\n      }\n    }\n    let texture;\n    const extension = textureNode.FileName.slice(-3).toLowerCase();\n    if (extension === \"tga\") {\n      const loader = this.manager.getHandler(\".tga\");\n      if (loader === null) {\n        console.warn(\"FBXLoader: TGA loader not found, creating placeholder texture for\", textureNode.RelativeFilename);\n        texture = new Texture();\n      } else {\n        loader.setPath(this.textureLoader.path);\n        texture = loader.load(fileName);\n      }\n    } else if (extension === \"psd\") {\n      console.warn(\n        \"FBXLoader: PSD textures are not supported, creating placeholder texture for\",\n        textureNode.RelativeFilename\n      );\n      texture = new Texture();\n    } else {\n      texture = this.textureLoader.load(fileName);\n    }\n    this.textureLoader.setPath(currentPath);\n    return texture;\n  }\n  // Parse nodes in FBXTree.Objects.Material\n  parseMaterials(textureMap) {\n    const materialMap = /* @__PURE__ */ new Map();\n    if (\"Material\" in fbxTree.Objects) {\n      const materialNodes = fbxTree.Objects.Material;\n      for (const nodeID in materialNodes) {\n        const material = this.parseMaterial(materialNodes[nodeID], textureMap);\n        if (material !== null)\n          materialMap.set(parseInt(nodeID), material);\n      }\n    }\n    return materialMap;\n  }\n  // Parse single node in FBXTree.Objects.Material\n  // Materials are connected to texture maps in FBXTree.Objects.Textures\n  // FBX format currently only supports Lambert and Phong shading models\n  parseMaterial(materialNode, textureMap) {\n    const ID = materialNode.id;\n    const name = materialNode.attrName;\n    let type = materialNode.ShadingModel;\n    if (typeof type === \"object\") {\n      type = type.value;\n    }\n    if (!connections.has(ID))\n      return null;\n    const parameters = this.parseParameters(materialNode, textureMap, ID);\n    let material;\n    switch (type.toLowerCase()) {\n      case \"phong\":\n        material = new MeshPhongMaterial();\n        break;\n      case \"lambert\":\n        material = new MeshLambertMaterial();\n        break;\n      default:\n        console.warn('THREE.FBXLoader: unknown material type \"%s\". Defaulting to MeshPhongMaterial.', type);\n        material = new MeshPhongMaterial();\n        break;\n    }\n    material.setValues(parameters);\n    material.name = name;\n    return material;\n  }\n  // Parse FBX material and return parameters suitable for a three.js material\n  // Also parse the texture map and return any textures associated with the material\n  parseParameters(materialNode, textureMap, ID) {\n    const parameters = {};\n    if (materialNode.BumpFactor) {\n      parameters.bumpScale = materialNode.BumpFactor.value;\n    }\n    if (materialNode.Diffuse) {\n      parameters.color = new Color().fromArray(materialNode.Diffuse.value);\n    } else if (materialNode.DiffuseColor && (materialNode.DiffuseColor.type === \"Color\" || materialNode.DiffuseColor.type === \"ColorRGB\")) {\n      parameters.color = new Color().fromArray(materialNode.DiffuseColor.value);\n    }\n    if (materialNode.DisplacementFactor) {\n      parameters.displacementScale = materialNode.DisplacementFactor.value;\n    }\n    if (materialNode.Emissive) {\n      parameters.emissive = new Color().fromArray(materialNode.Emissive.value);\n    } else if (materialNode.EmissiveColor && (materialNode.EmissiveColor.type === \"Color\" || materialNode.EmissiveColor.type === \"ColorRGB\")) {\n      parameters.emissive = new Color().fromArray(materialNode.EmissiveColor.value);\n    }\n    if (materialNode.EmissiveFactor) {\n      parameters.emissiveIntensity = parseFloat(materialNode.EmissiveFactor.value);\n    }\n    if (materialNode.Opacity) {\n      parameters.opacity = parseFloat(materialNode.Opacity.value);\n    }\n    if (parameters.opacity < 1) {\n      parameters.transparent = true;\n    }\n    if (materialNode.ReflectionFactor) {\n      parameters.reflectivity = materialNode.ReflectionFactor.value;\n    }\n    if (materialNode.Shininess) {\n      parameters.shininess = materialNode.Shininess.value;\n    }\n    if (materialNode.Specular) {\n      parameters.specular = new Color().fromArray(materialNode.Specular.value);\n    } else if (materialNode.SpecularColor && materialNode.SpecularColor.type === \"Color\") {\n      parameters.specular = new Color().fromArray(materialNode.SpecularColor.value);\n    }\n    const scope = this;\n    connections.get(ID).children.forEach(function(child) {\n      const type = child.relationship;\n      switch (type) {\n        case \"Bump\":\n          parameters.bumpMap = scope.getTexture(textureMap, child.ID);\n          break;\n        case \"Maya|TEX_ao_map\":\n          parameters.aoMap = scope.getTexture(textureMap, child.ID);\n          break;\n        case \"DiffuseColor\":\n        case \"Maya|TEX_color_map\":\n          parameters.map = scope.getTexture(textureMap, child.ID);\n          if (parameters.map !== void 0) {\n            if (\"colorSpace\" in parameters.map)\n              parameters.map.colorSpace = \"srgb\";\n            else\n              parameters.map.encoding = 3001;\n          }\n          break;\n        case \"DisplacementColor\":\n          parameters.displacementMap = scope.getTexture(textureMap, child.ID);\n          break;\n        case \"EmissiveColor\":\n          parameters.emissiveMap = scope.getTexture(textureMap, child.ID);\n          if (parameters.emissiveMap !== void 0) {\n            if (\"colorSpace\" in parameters.emissiveMap)\n              parameters.emissiveMap.colorSpace = \"srgb\";\n            else\n              parameters.emissiveMap.encoding = 3001;\n          }\n          break;\n        case \"NormalMap\":\n        case \"Maya|TEX_normal_map\":\n          parameters.normalMap = scope.getTexture(textureMap, child.ID);\n          break;\n        case \"ReflectionColor\":\n          parameters.envMap = scope.getTexture(textureMap, child.ID);\n          if (parameters.envMap !== void 0) {\n            parameters.envMap.mapping = EquirectangularReflectionMapping;\n            if (\"colorSpace\" in parameters.envMap)\n              parameters.envMap.colorSpace = \"srgb\";\n            else\n              parameters.envMap.encoding = 3001;\n          }\n          break;\n        case \"SpecularColor\":\n          parameters.specularMap = scope.getTexture(textureMap, child.ID);\n          if (parameters.specularMap !== void 0) {\n            if (\"colorSpace\" in parameters.specularMap)\n              parameters.specularMap.colorSpace = \"srgb\";\n            else\n              parameters.specularMap.encoding = 3001;\n          }\n          break;\n        case \"TransparentColor\":\n        case \"TransparencyFactor\":\n          parameters.alphaMap = scope.getTexture(textureMap, child.ID);\n          parameters.transparent = true;\n          break;\n        case \"AmbientColor\":\n        case \"ShininessExponent\":\n        case \"SpecularFactor\":\n        case \"VectorDisplacementColor\":\n        default:\n          console.warn(\"THREE.FBXLoader: %s map is not supported in three.js, skipping texture.\", type);\n          break;\n      }\n    });\n    return parameters;\n  }\n  // get a texture from the textureMap for use by a material.\n  getTexture(textureMap, id) {\n    if (\"LayeredTexture\" in fbxTree.Objects && id in fbxTree.Objects.LayeredTexture) {\n      console.warn(\"THREE.FBXLoader: layered textures are not supported in three.js. Discarding all but first layer.\");\n      id = connections.get(id).children[0].ID;\n    }\n    return textureMap.get(id);\n  }\n  // Parse nodes in FBXTree.Objects.Deformer\n  // Deformer node can contain skinning or Vertex Cache animation data, however only skinning is supported here\n  // Generates map of Skeleton-like objects for use later when generating and binding skeletons.\n  parseDeformers() {\n    const skeletons = {};\n    const morphTargets = {};\n    if (\"Deformer\" in fbxTree.Objects) {\n      const DeformerNodes = fbxTree.Objects.Deformer;\n      for (const nodeID in DeformerNodes) {\n        const deformerNode = DeformerNodes[nodeID];\n        const relationships = connections.get(parseInt(nodeID));\n        if (deformerNode.attrType === \"Skin\") {\n          const skeleton = this.parseSkeleton(relationships, DeformerNodes);\n          skeleton.ID = nodeID;\n          if (relationships.parents.length > 1) {\n            console.warn(\"THREE.FBXLoader: skeleton attached to more than one geometry is not supported.\");\n          }\n          skeleton.geometryID = relationships.parents[0].ID;\n          skeletons[nodeID] = skeleton;\n        } else if (deformerNode.attrType === \"BlendShape\") {\n          const morphTarget = {\n            id: nodeID\n          };\n          morphTarget.rawTargets = this.parseMorphTargets(relationships, DeformerNodes);\n          morphTarget.id = nodeID;\n          if (relationships.parents.length > 1) {\n            console.warn(\"THREE.FBXLoader: morph target attached to more than one geometry is not supported.\");\n          }\n          morphTargets[nodeID] = morphTarget;\n        }\n      }\n    }\n    return {\n      skeletons,\n      morphTargets\n    };\n  }\n  // Parse single nodes in FBXTree.Objects.Deformer\n  // The top level skeleton node has type 'Skin' and sub nodes have type 'Cluster'\n  // Each skin node represents a skeleton and each cluster node represents a bone\n  parseSkeleton(relationships, deformerNodes) {\n    const rawBones = [];\n    relationships.children.forEach(function(child) {\n      const boneNode = deformerNodes[child.ID];\n      if (boneNode.attrType !== \"Cluster\")\n        return;\n      const rawBone = {\n        ID: child.ID,\n        indices: [],\n        weights: [],\n        transformLink: new Matrix4().fromArray(boneNode.TransformLink.a)\n        // transform: new Matrix4().fromArray( boneNode.Transform.a ),\n        // linkMode: boneNode.Mode,\n      };\n      if (\"Indexes\" in boneNode) {\n        rawBone.indices = boneNode.Indexes.a;\n        rawBone.weights = boneNode.Weights.a;\n      }\n      rawBones.push(rawBone);\n    });\n    return {\n      rawBones,\n      bones: []\n    };\n  }\n  // The top level morph deformer node has type \"BlendShape\" and sub nodes have type \"BlendShapeChannel\"\n  parseMorphTargets(relationships, deformerNodes) {\n    const rawMorphTargets = [];\n    for (let i = 0; i < relationships.children.length; i++) {\n      const child = relationships.children[i];\n      const morphTargetNode = deformerNodes[child.ID];\n      const rawMorphTarget = {\n        name: morphTargetNode.attrName,\n        initialWeight: morphTargetNode.DeformPercent,\n        id: morphTargetNode.id,\n        fullWeights: morphTargetNode.FullWeights.a\n      };\n      if (morphTargetNode.attrType !== \"BlendShapeChannel\")\n        return;\n      rawMorphTarget.geoID = connections.get(parseInt(child.ID)).children.filter(function(child2) {\n        return child2.relationship === void 0;\n      })[0].ID;\n      rawMorphTargets.push(rawMorphTarget);\n    }\n    return rawMorphTargets;\n  }\n  // create the main Group() to be returned by the loader\n  parseScene(deformers, geometryMap, materialMap) {\n    sceneGraph = new Group();\n    const modelMap = this.parseModels(deformers.skeletons, geometryMap, materialMap);\n    const modelNodes = fbxTree.Objects.Model;\n    const scope = this;\n    modelMap.forEach(function(model) {\n      const modelNode = modelNodes[model.ID];\n      scope.setLookAtProperties(model, modelNode);\n      const parentConnections = connections.get(model.ID).parents;\n      parentConnections.forEach(function(connection) {\n        const parent = modelMap.get(connection.ID);\n        if (parent !== void 0)\n          parent.add(model);\n      });\n      if (model.parent === null) {\n        sceneGraph.add(model);\n      }\n    });\n    this.bindSkeleton(deformers.skeletons, geometryMap, modelMap);\n    this.createAmbientLight();\n    sceneGraph.traverse(function(node) {\n      if (node.userData.transformData) {\n        if (node.parent) {\n          node.userData.transformData.parentMatrix = node.parent.matrix;\n          node.userData.transformData.parentMatrixWorld = node.parent.matrixWorld;\n        }\n        const transform = generateTransform(node.userData.transformData);\n        node.applyMatrix4(transform);\n        node.updateWorldMatrix();\n      }\n    });\n    const animations = new AnimationParser().parse();\n    if (sceneGraph.children.length === 1 && sceneGraph.children[0].isGroup) {\n      sceneGraph.children[0].animations = animations;\n      sceneGraph = sceneGraph.children[0];\n    }\n    sceneGraph.animations = animations;\n  }\n  // parse nodes in FBXTree.Objects.Model\n  parseModels(skeletons, geometryMap, materialMap) {\n    const modelMap = /* @__PURE__ */ new Map();\n    const modelNodes = fbxTree.Objects.Model;\n    for (const nodeID in modelNodes) {\n      const id = parseInt(nodeID);\n      const node = modelNodes[nodeID];\n      const relationships = connections.get(id);\n      let model = this.buildSkeleton(relationships, skeletons, id, node.attrName);\n      if (!model) {\n        switch (node.attrType) {\n          case \"Camera\":\n            model = this.createCamera(relationships);\n            break;\n          case \"Light\":\n            model = this.createLight(relationships);\n            break;\n          case \"Mesh\":\n            model = this.createMesh(relationships, geometryMap, materialMap);\n            break;\n          case \"NurbsCurve\":\n            model = this.createCurve(relationships, geometryMap);\n            break;\n          case \"LimbNode\":\n          case \"Root\":\n            model = new Bone();\n            break;\n          case \"Null\":\n          default:\n            model = new Group();\n            break;\n        }\n        model.name = node.attrName ? PropertyBinding.sanitizeNodeName(node.attrName) : \"\";\n        model.ID = id;\n      }\n      this.getTransformData(model, node);\n      modelMap.set(id, model);\n    }\n    return modelMap;\n  }\n  buildSkeleton(relationships, skeletons, id, name) {\n    let bone = null;\n    relationships.parents.forEach(function(parent) {\n      for (const ID in skeletons) {\n        const skeleton = skeletons[ID];\n        skeleton.rawBones.forEach(function(rawBone, i) {\n          if (rawBone.ID === parent.ID) {\n            const subBone = bone;\n            bone = new Bone();\n            bone.matrixWorld.copy(rawBone.transformLink);\n            bone.name = name ? PropertyBinding.sanitizeNodeName(name) : \"\";\n            bone.ID = id;\n            skeleton.bones[i] = bone;\n            if (subBone !== null) {\n              bone.add(subBone);\n            }\n          }\n        });\n      }\n    });\n    return bone;\n  }\n  // create a PerspectiveCamera or OrthographicCamera\n  createCamera(relationships) {\n    let model;\n    let cameraAttribute;\n    relationships.children.forEach(function(child) {\n      const attr = fbxTree.Objects.NodeAttribute[child.ID];\n      if (attr !== void 0) {\n        cameraAttribute = attr;\n      }\n    });\n    if (cameraAttribute === void 0) {\n      model = new Object3D();\n    } else {\n      let type = 0;\n      if (cameraAttribute.CameraProjectionType !== void 0 && cameraAttribute.CameraProjectionType.value === 1) {\n        type = 1;\n      }\n      let nearClippingPlane = 1;\n      if (cameraAttribute.NearPlane !== void 0) {\n        nearClippingPlane = cameraAttribute.NearPlane.value / 1e3;\n      }\n      let farClippingPlane = 1e3;\n      if (cameraAttribute.FarPlane !== void 0) {\n        farClippingPlane = cameraAttribute.FarPlane.value / 1e3;\n      }\n      let width = window.innerWidth;\n      let height = window.innerHeight;\n      if (cameraAttribute.AspectWidth !== void 0 && cameraAttribute.AspectHeight !== void 0) {\n        width = cameraAttribute.AspectWidth.value;\n        height = cameraAttribute.AspectHeight.value;\n      }\n      const aspect = width / height;\n      let fov = 45;\n      if (cameraAttribute.FieldOfView !== void 0) {\n        fov = cameraAttribute.FieldOfView.value;\n      }\n      const focalLength = cameraAttribute.FocalLength ? cameraAttribute.FocalLength.value : null;\n      switch (type) {\n        case 0:\n          model = new PerspectiveCamera(fov, aspect, nearClippingPlane, farClippingPlane);\n          if (focalLength !== null)\n            model.setFocalLength(focalLength);\n          break;\n        case 1:\n          model = new OrthographicCamera(\n            -width / 2,\n            width / 2,\n            height / 2,\n            -height / 2,\n            nearClippingPlane,\n            farClippingPlane\n          );\n          break;\n        default:\n          console.warn(\"THREE.FBXLoader: Unknown camera type \" + type + \".\");\n          model = new Object3D();\n          break;\n      }\n    }\n    return model;\n  }\n  // Create a DirectionalLight, PointLight or SpotLight\n  createLight(relationships) {\n    let model;\n    let lightAttribute;\n    relationships.children.forEach(function(child) {\n      const attr = fbxTree.Objects.NodeAttribute[child.ID];\n      if (attr !== void 0) {\n        lightAttribute = attr;\n      }\n    });\n    if (lightAttribute === void 0) {\n      model = new Object3D();\n    } else {\n      let type;\n      if (lightAttribute.LightType === void 0) {\n        type = 0;\n      } else {\n        type = lightAttribute.LightType.value;\n      }\n      let color = 16777215;\n      if (lightAttribute.Color !== void 0) {\n        color = new Color().fromArray(lightAttribute.Color.value);\n      }\n      let intensity = lightAttribute.Intensity === void 0 ? 1 : lightAttribute.Intensity.value / 100;\n      if (lightAttribute.CastLightOnObject !== void 0 && lightAttribute.CastLightOnObject.value === 0) {\n        intensity = 0;\n      }\n      let distance = 0;\n      if (lightAttribute.FarAttenuationEnd !== void 0) {\n        if (lightAttribute.EnableFarAttenuation !== void 0 && lightAttribute.EnableFarAttenuation.value === 0) {\n          distance = 0;\n        } else {\n          distance = lightAttribute.FarAttenuationEnd.value;\n        }\n      }\n      const decay = 1;\n      switch (type) {\n        case 0:\n          model = new PointLight(color, intensity, distance, decay);\n          break;\n        case 1:\n          model = new DirectionalLight(color, intensity);\n          break;\n        case 2:\n          let angle = Math.PI / 3;\n          if (lightAttribute.InnerAngle !== void 0) {\n            angle = MathUtils.degToRad(lightAttribute.InnerAngle.value);\n          }\n          let penumbra = 0;\n          if (lightAttribute.OuterAngle !== void 0) {\n            penumbra = MathUtils.degToRad(lightAttribute.OuterAngle.value);\n            penumbra = Math.max(penumbra, 1);\n          }\n          model = new SpotLight(color, intensity, distance, angle, penumbra, decay);\n          break;\n        default:\n          console.warn(\n            \"THREE.FBXLoader: Unknown light type \" + lightAttribute.LightType.value + \", defaulting to a PointLight.\"\n          );\n          model = new PointLight(color, intensity);\n          break;\n      }\n      if (lightAttribute.CastShadows !== void 0 && lightAttribute.CastShadows.value === 1) {\n        model.castShadow = true;\n      }\n    }\n    return model;\n  }\n  createMesh(relationships, geometryMap, materialMap) {\n    let model;\n    let geometry = null;\n    let material = null;\n    const materials = [];\n    relationships.children.forEach(function(child) {\n      if (geometryMap.has(child.ID)) {\n        geometry = geometryMap.get(child.ID);\n      }\n      if (materialMap.has(child.ID)) {\n        materials.push(materialMap.get(child.ID));\n      }\n    });\n    if (materials.length > 1) {\n      material = materials;\n    } else if (materials.length > 0) {\n      material = materials[0];\n    } else {\n      material = new MeshPhongMaterial({ color: 13421772 });\n      materials.push(material);\n    }\n    if (\"color\" in geometry.attributes) {\n      materials.forEach(function(material2) {\n        material2.vertexColors = true;\n      });\n    }\n    if (geometry.FBX_Deformer) {\n      model = new SkinnedMesh(geometry, material);\n      model.normalizeSkinWeights();\n    } else {\n      model = new Mesh(geometry, material);\n    }\n    return model;\n  }\n  createCurve(relationships, geometryMap) {\n    const geometry = relationships.children.reduce(function(geo, child) {\n      if (geometryMap.has(child.ID))\n        geo = geometryMap.get(child.ID);\n      return geo;\n    }, null);\n    const material = new LineBasicMaterial({ color: 3342591, linewidth: 1 });\n    return new Line(geometry, material);\n  }\n  // parse the model node for transform data\n  getTransformData(model, modelNode) {\n    const transformData = {};\n    if (\"InheritType\" in modelNode)\n      transformData.inheritType = parseInt(modelNode.InheritType.value);\n    if (\"RotationOrder\" in modelNode)\n      transformData.eulerOrder = getEulerOrder(modelNode.RotationOrder.value);\n    else\n      transformData.eulerOrder = \"ZYX\";\n    if (\"Lcl_Translation\" in modelNode)\n      transformData.translation = modelNode.Lcl_Translation.value;\n    if (\"PreRotation\" in modelNode)\n      transformData.preRotation = modelNode.PreRotation.value;\n    if (\"Lcl_Rotation\" in modelNode)\n      transformData.rotation = modelNode.Lcl_Rotation.value;\n    if (\"PostRotation\" in modelNode)\n      transformData.postRotation = modelNode.PostRotation.value;\n    if (\"Lcl_Scaling\" in modelNode)\n      transformData.scale = modelNode.Lcl_Scaling.value;\n    if (\"ScalingOffset\" in modelNode)\n      transformData.scalingOffset = modelNode.ScalingOffset.value;\n    if (\"ScalingPivot\" in modelNode)\n      transformData.scalingPivot = modelNode.ScalingPivot.value;\n    if (\"RotationOffset\" in modelNode)\n      transformData.rotationOffset = modelNode.RotationOffset.value;\n    if (\"RotationPivot\" in modelNode)\n      transformData.rotationPivot = modelNode.RotationPivot.value;\n    model.userData.transformData = transformData;\n  }\n  setLookAtProperties(model, modelNode) {\n    if (\"LookAtProperty\" in modelNode) {\n      const children = connections.get(model.ID).children;\n      children.forEach(function(child) {\n        if (child.relationship === \"LookAtProperty\") {\n          const lookAtTarget = fbxTree.Objects.Model[child.ID];\n          if (\"Lcl_Translation\" in lookAtTarget) {\n            const pos = lookAtTarget.Lcl_Translation.value;\n            if (model.target !== void 0) {\n              model.target.position.fromArray(pos);\n              sceneGraph.add(model.target);\n            } else {\n              model.lookAt(new Vector3().fromArray(pos));\n            }\n          }\n        }\n      });\n    }\n  }\n  bindSkeleton(skeletons, geometryMap, modelMap) {\n    const bindMatrices = this.parsePoseNodes();\n    for (const ID in skeletons) {\n      const skeleton = skeletons[ID];\n      const parents = connections.get(parseInt(skeleton.ID)).parents;\n      parents.forEach(function(parent) {\n        if (geometryMap.has(parent.ID)) {\n          const geoID = parent.ID;\n          const geoRelationships = connections.get(geoID);\n          geoRelationships.parents.forEach(function(geoConnParent) {\n            if (modelMap.has(geoConnParent.ID)) {\n              const model = modelMap.get(geoConnParent.ID);\n              model.bind(new Skeleton(skeleton.bones), bindMatrices[geoConnParent.ID]);\n            }\n          });\n        }\n      });\n    }\n  }\n  parsePoseNodes() {\n    const bindMatrices = {};\n    if (\"Pose\" in fbxTree.Objects) {\n      const BindPoseNode = fbxTree.Objects.Pose;\n      for (const nodeID in BindPoseNode) {\n        if (BindPoseNode[nodeID].attrType === \"BindPose\" && BindPoseNode[nodeID].NbPoseNodes > 0) {\n          const poseNodes = BindPoseNode[nodeID].PoseNode;\n          if (Array.isArray(poseNodes)) {\n            poseNodes.forEach(function(poseNode) {\n              bindMatrices[poseNode.Node] = new Matrix4().fromArray(poseNode.Matrix.a);\n            });\n          } else {\n            bindMatrices[poseNodes.Node] = new Matrix4().fromArray(poseNodes.Matrix.a);\n          }\n        }\n      }\n    }\n    return bindMatrices;\n  }\n  // Parse ambient color in FBXTree.GlobalSettings - if it's not set to black (default), create an ambient light\n  createAmbientLight() {\n    if (\"GlobalSettings\" in fbxTree && \"AmbientColor\" in fbxTree.GlobalSettings) {\n      const ambientColor = fbxTree.GlobalSettings.AmbientColor.value;\n      const r = ambientColor[0];\n      const g = ambientColor[1];\n      const b = ambientColor[2];\n      if (r !== 0 || g !== 0 || b !== 0) {\n        const color = new Color(r, g, b);\n        sceneGraph.add(new AmbientLight(color, 1));\n      }\n    }\n  }\n}\nclass GeometryParser {\n  // Parse nodes in FBXTree.Objects.Geometry\n  parse(deformers) {\n    const geometryMap = /* @__PURE__ */ new Map();\n    if (\"Geometry\" in fbxTree.Objects) {\n      const geoNodes = fbxTree.Objects.Geometry;\n      for (const nodeID in geoNodes) {\n        const relationships = connections.get(parseInt(nodeID));\n        const geo = this.parseGeometry(relationships, geoNodes[nodeID], deformers);\n        geometryMap.set(parseInt(nodeID), geo);\n      }\n    }\n    return geometryMap;\n  }\n  // Parse single node in FBXTree.Objects.Geometry\n  parseGeometry(relationships, geoNode, deformers) {\n    switch (geoNode.attrType) {\n      case \"Mesh\":\n        return this.parseMeshGeometry(relationships, geoNode, deformers);\n        break;\n      case \"NurbsCurve\":\n        return this.parseNurbsGeometry(geoNode);\n        break;\n    }\n  }\n  // Parse single node mesh geometry in FBXTree.Objects.Geometry\n  parseMeshGeometry(relationships, geoNode, deformers) {\n    const skeletons = deformers.skeletons;\n    const morphTargets = [];\n    const modelNodes = relationships.parents.map(function(parent) {\n      return fbxTree.Objects.Model[parent.ID];\n    });\n    if (modelNodes.length === 0)\n      return;\n    const skeleton = relationships.children.reduce(function(skeleton2, child) {\n      if (skeletons[child.ID] !== void 0)\n        skeleton2 = skeletons[child.ID];\n      return skeleton2;\n    }, null);\n    relationships.children.forEach(function(child) {\n      if (deformers.morphTargets[child.ID] !== void 0) {\n        morphTargets.push(deformers.morphTargets[child.ID]);\n      }\n    });\n    const modelNode = modelNodes[0];\n    const transformData = {};\n    if (\"RotationOrder\" in modelNode)\n      transformData.eulerOrder = getEulerOrder(modelNode.RotationOrder.value);\n    if (\"InheritType\" in modelNode)\n      transformData.inheritType = parseInt(modelNode.InheritType.value);\n    if (\"GeometricTranslation\" in modelNode)\n      transformData.translation = modelNode.GeometricTranslation.value;\n    if (\"GeometricRotation\" in modelNode)\n      transformData.rotation = modelNode.GeometricRotation.value;\n    if (\"GeometricScaling\" in modelNode)\n      transformData.scale = modelNode.GeometricScaling.value;\n    const transform = generateTransform(transformData);\n    return this.genGeometry(geoNode, skeleton, morphTargets, transform);\n  }\n  // Generate a BufferGeometry from a node in FBXTree.Objects.Geometry\n  genGeometry(geoNode, skeleton, morphTargets, preTransform) {\n    const geo = new BufferGeometry();\n    if (geoNode.attrName)\n      geo.name = geoNode.attrName;\n    const geoInfo = this.parseGeoNode(geoNode, skeleton);\n    const buffers = this.genBuffers(geoInfo);\n    const positionAttribute = new Float32BufferAttribute(buffers.vertex, 3);\n    positionAttribute.applyMatrix4(preTransform);\n    geo.setAttribute(\"position\", positionAttribute);\n    if (buffers.colors.length > 0) {\n      geo.setAttribute(\"color\", new Float32BufferAttribute(buffers.colors, 3));\n    }\n    if (skeleton) {\n      geo.setAttribute(\"skinIndex\", new Uint16BufferAttribute(buffers.weightsIndices, 4));\n      geo.setAttribute(\"skinWeight\", new Float32BufferAttribute(buffers.vertexWeights, 4));\n      geo.FBX_Deformer = skeleton;\n    }\n    if (buffers.normal.length > 0) {\n      const normalMatrix = new Matrix3().getNormalMatrix(preTransform);\n      const normalAttribute = new Float32BufferAttribute(buffers.normal, 3);\n      normalAttribute.applyNormalMatrix(normalMatrix);\n      geo.setAttribute(\"normal\", normalAttribute);\n    }\n    buffers.uvs.forEach(function(uvBuffer, i) {\n      let name = \"uv\" + (i + 1).toString();\n      if (i === 0) {\n        name = \"uv\";\n      }\n      geo.setAttribute(name, new Float32BufferAttribute(buffers.uvs[i], 2));\n    });\n    if (geoInfo.material && geoInfo.material.mappingType !== \"AllSame\") {\n      let prevMaterialIndex = buffers.materialIndex[0];\n      let startIndex = 0;\n      buffers.materialIndex.forEach(function(currentIndex, i) {\n        if (currentIndex !== prevMaterialIndex) {\n          geo.addGroup(startIndex, i - startIndex, prevMaterialIndex);\n          prevMaterialIndex = currentIndex;\n          startIndex = i;\n        }\n      });\n      if (geo.groups.length > 0) {\n        const lastGroup = geo.groups[geo.groups.length - 1];\n        const lastIndex = lastGroup.start + lastGroup.count;\n        if (lastIndex !== buffers.materialIndex.length) {\n          geo.addGroup(lastIndex, buffers.materialIndex.length - lastIndex, prevMaterialIndex);\n        }\n      }\n      if (geo.groups.length === 0) {\n        geo.addGroup(0, buffers.materialIndex.length, buffers.materialIndex[0]);\n      }\n    }\n    this.addMorphTargets(geo, geoNode, morphTargets, preTransform);\n    return geo;\n  }\n  parseGeoNode(geoNode, skeleton) {\n    const geoInfo = {};\n    geoInfo.vertexPositions = geoNode.Vertices !== void 0 ? geoNode.Vertices.a : [];\n    geoInfo.vertexIndices = geoNode.PolygonVertexIndex !== void 0 ? geoNode.PolygonVertexIndex.a : [];\n    if (geoNode.LayerElementColor) {\n      geoInfo.color = this.parseVertexColors(geoNode.LayerElementColor[0]);\n    }\n    if (geoNode.LayerElementMaterial) {\n      geoInfo.material = this.parseMaterialIndices(geoNode.LayerElementMaterial[0]);\n    }\n    if (geoNode.LayerElementNormal) {\n      geoInfo.normal = this.parseNormals(geoNode.LayerElementNormal[0]);\n    }\n    if (geoNode.LayerElementUV) {\n      geoInfo.uv = [];\n      let i = 0;\n      while (geoNode.LayerElementUV[i]) {\n        if (geoNode.LayerElementUV[i].UV) {\n          geoInfo.uv.push(this.parseUVs(geoNode.LayerElementUV[i]));\n        }\n        i++;\n      }\n    }\n    geoInfo.weightTable = {};\n    if (skeleton !== null) {\n      geoInfo.skeleton = skeleton;\n      skeleton.rawBones.forEach(function(rawBone, i) {\n        rawBone.indices.forEach(function(index, j) {\n          if (geoInfo.weightTable[index] === void 0)\n            geoInfo.weightTable[index] = [];\n          geoInfo.weightTable[index].push({\n            id: i,\n            weight: rawBone.weights[j]\n          });\n        });\n      });\n    }\n    return geoInfo;\n  }\n  genBuffers(geoInfo) {\n    const buffers = {\n      vertex: [],\n      normal: [],\n      colors: [],\n      uvs: [],\n      materialIndex: [],\n      vertexWeights: [],\n      weightsIndices: []\n    };\n    let polygonIndex = 0;\n    let faceLength = 0;\n    let displayedWeightsWarning = false;\n    let facePositionIndexes = [];\n    let faceNormals = [];\n    let faceColors = [];\n    let faceUVs = [];\n    let faceWeights = [];\n    let faceWeightIndices = [];\n    const scope = this;\n    geoInfo.vertexIndices.forEach(function(vertexIndex, polygonVertexIndex) {\n      let materialIndex;\n      let endOfFace = false;\n      if (vertexIndex < 0) {\n        vertexIndex = vertexIndex ^ -1;\n        endOfFace = true;\n      }\n      let weightIndices = [];\n      let weights = [];\n      facePositionIndexes.push(vertexIndex * 3, vertexIndex * 3 + 1, vertexIndex * 3 + 2);\n      if (geoInfo.color) {\n        const data = getData(polygonVertexIndex, polygonIndex, vertexIndex, geoInfo.color);\n        faceColors.push(data[0], data[1], data[2]);\n      }\n      if (geoInfo.skeleton) {\n        if (geoInfo.weightTable[vertexIndex] !== void 0) {\n          geoInfo.weightTable[vertexIndex].forEach(function(wt) {\n            weights.push(wt.weight);\n            weightIndices.push(wt.id);\n          });\n        }\n        if (weights.length > 4) {\n          if (!displayedWeightsWarning) {\n            console.warn(\n              \"THREE.FBXLoader: Vertex has more than 4 skinning weights assigned to vertex. Deleting additional weights.\"\n            );\n            displayedWeightsWarning = true;\n          }\n          const wIndex = [0, 0, 0, 0];\n          const Weight = [0, 0, 0, 0];\n          weights.forEach(function(weight, weightIndex) {\n            let currentWeight = weight;\n            let currentIndex = weightIndices[weightIndex];\n            Weight.forEach(function(comparedWeight, comparedWeightIndex, comparedWeightArray) {\n              if (currentWeight > comparedWeight) {\n                comparedWeightArray[comparedWeightIndex] = currentWeight;\n                currentWeight = comparedWeight;\n                const tmp = wIndex[comparedWeightIndex];\n                wIndex[comparedWeightIndex] = currentIndex;\n                currentIndex = tmp;\n              }\n            });\n          });\n          weightIndices = wIndex;\n          weights = Weight;\n        }\n        while (weights.length < 4) {\n          weights.push(0);\n          weightIndices.push(0);\n        }\n        for (let i = 0; i < 4; ++i) {\n          faceWeights.push(weights[i]);\n          faceWeightIndices.push(weightIndices[i]);\n        }\n      }\n      if (geoInfo.normal) {\n        const data = getData(polygonVertexIndex, polygonIndex, vertexIndex, geoInfo.normal);\n        faceNormals.push(data[0], data[1], data[2]);\n      }\n      if (geoInfo.material && geoInfo.material.mappingType !== \"AllSame\") {\n        materialIndex = getData(polygonVertexIndex, polygonIndex, vertexIndex, geoInfo.material)[0];\n      }\n      if (geoInfo.uv) {\n        geoInfo.uv.forEach(function(uv, i) {\n          const data = getData(polygonVertexIndex, polygonIndex, vertexIndex, uv);\n          if (faceUVs[i] === void 0) {\n            faceUVs[i] = [];\n          }\n          faceUVs[i].push(data[0]);\n          faceUVs[i].push(data[1]);\n        });\n      }\n      faceLength++;\n      if (endOfFace) {\n        scope.genFace(\n          buffers,\n          geoInfo,\n          facePositionIndexes,\n          materialIndex,\n          faceNormals,\n          faceColors,\n          faceUVs,\n          faceWeights,\n          faceWeightIndices,\n          faceLength\n        );\n        polygonIndex++;\n        faceLength = 0;\n        facePositionIndexes = [];\n        faceNormals = [];\n        faceColors = [];\n        faceUVs = [];\n        faceWeights = [];\n        faceWeightIndices = [];\n      }\n    });\n    return buffers;\n  }\n  // Generate data for a single face in a geometry. If the face is a quad then split it into 2 tris\n  genFace(buffers, geoInfo, facePositionIndexes, materialIndex, faceNormals, faceColors, faceUVs, faceWeights, faceWeightIndices, faceLength) {\n    for (let i = 2; i < faceLength; i++) {\n      buffers.vertex.push(geoInfo.vertexPositions[facePositionIndexes[0]]);\n      buffers.vertex.push(geoInfo.vertexPositions[facePositionIndexes[1]]);\n      buffers.vertex.push(geoInfo.vertexPositions[facePositionIndexes[2]]);\n      buffers.vertex.push(geoInfo.vertexPositions[facePositionIndexes[(i - 1) * 3]]);\n      buffers.vertex.push(geoInfo.vertexPositions[facePositionIndexes[(i - 1) * 3 + 1]]);\n      buffers.vertex.push(geoInfo.vertexPositions[facePositionIndexes[(i - 1) * 3 + 2]]);\n      buffers.vertex.push(geoInfo.vertexPositions[facePositionIndexes[i * 3]]);\n      buffers.vertex.push(geoInfo.vertexPositions[facePositionIndexes[i * 3 + 1]]);\n      buffers.vertex.push(geoInfo.vertexPositions[facePositionIndexes[i * 3 + 2]]);\n      if (geoInfo.skeleton) {\n        buffers.vertexWeights.push(faceWeights[0]);\n        buffers.vertexWeights.push(faceWeights[1]);\n        buffers.vertexWeights.push(faceWeights[2]);\n        buffers.vertexWeights.push(faceWeights[3]);\n        buffers.vertexWeights.push(faceWeights[(i - 1) * 4]);\n        buffers.vertexWeights.push(faceWeights[(i - 1) * 4 + 1]);\n        buffers.vertexWeights.push(faceWeights[(i - 1) * 4 + 2]);\n        buffers.vertexWeights.push(faceWeights[(i - 1) * 4 + 3]);\n        buffers.vertexWeights.push(faceWeights[i * 4]);\n        buffers.vertexWeights.push(faceWeights[i * 4 + 1]);\n        buffers.vertexWeights.push(faceWeights[i * 4 + 2]);\n        buffers.vertexWeights.push(faceWeights[i * 4 + 3]);\n        buffers.weightsIndices.push(faceWeightIndices[0]);\n        buffers.weightsIndices.push(faceWeightIndices[1]);\n        buffers.weightsIndices.push(faceWeightIndices[2]);\n        buffers.weightsIndices.push(faceWeightIndices[3]);\n        buffers.weightsIndices.push(faceWeightIndices[(i - 1) * 4]);\n        buffers.weightsIndices.push(faceWeightIndices[(i - 1) * 4 + 1]);\n        buffers.weightsIndices.push(faceWeightIndices[(i - 1) * 4 + 2]);\n        buffers.weightsIndices.push(faceWeightIndices[(i - 1) * 4 + 3]);\n        buffers.weightsIndices.push(faceWeightIndices[i * 4]);\n        buffers.weightsIndices.push(faceWeightIndices[i * 4 + 1]);\n        buffers.weightsIndices.push(faceWeightIndices[i * 4 + 2]);\n        buffers.weightsIndices.push(faceWeightIndices[i * 4 + 3]);\n      }\n      if (geoInfo.color) {\n        buffers.colors.push(faceColors[0]);\n        buffers.colors.push(faceColors[1]);\n        buffers.colors.push(faceColors[2]);\n        buffers.colors.push(faceColors[(i - 1) * 3]);\n        buffers.colors.push(faceColors[(i - 1) * 3 + 1]);\n        buffers.colors.push(faceColors[(i - 1) * 3 + 2]);\n        buffers.colors.push(faceColors[i * 3]);\n        buffers.colors.push(faceColors[i * 3 + 1]);\n        buffers.colors.push(faceColors[i * 3 + 2]);\n      }\n      if (geoInfo.material && geoInfo.material.mappingType !== \"AllSame\") {\n        buffers.materialIndex.push(materialIndex);\n        buffers.materialIndex.push(materialIndex);\n        buffers.materialIndex.push(materialIndex);\n      }\n      if (geoInfo.normal) {\n        buffers.normal.push(faceNormals[0]);\n        buffers.normal.push(faceNormals[1]);\n        buffers.normal.push(faceNormals[2]);\n        buffers.normal.push(faceNormals[(i - 1) * 3]);\n        buffers.normal.push(faceNormals[(i - 1) * 3 + 1]);\n        buffers.normal.push(faceNormals[(i - 1) * 3 + 2]);\n        buffers.normal.push(faceNormals[i * 3]);\n        buffers.normal.push(faceNormals[i * 3 + 1]);\n        buffers.normal.push(faceNormals[i * 3 + 2]);\n      }\n      if (geoInfo.uv) {\n        geoInfo.uv.forEach(function(uv, j) {\n          if (buffers.uvs[j] === void 0)\n            buffers.uvs[j] = [];\n          buffers.uvs[j].push(faceUVs[j][0]);\n          buffers.uvs[j].push(faceUVs[j][1]);\n          buffers.uvs[j].push(faceUVs[j][(i - 1) * 2]);\n          buffers.uvs[j].push(faceUVs[j][(i - 1) * 2 + 1]);\n          buffers.uvs[j].push(faceUVs[j][i * 2]);\n          buffers.uvs[j].push(faceUVs[j][i * 2 + 1]);\n        });\n      }\n    }\n  }\n  addMorphTargets(parentGeo, parentGeoNode, morphTargets, preTransform) {\n    if (morphTargets.length === 0)\n      return;\n    parentGeo.morphTargetsRelative = true;\n    parentGeo.morphAttributes.position = [];\n    const scope = this;\n    morphTargets.forEach(function(morphTarget) {\n      morphTarget.rawTargets.forEach(function(rawTarget) {\n        const morphGeoNode = fbxTree.Objects.Geometry[rawTarget.geoID];\n        if (morphGeoNode !== void 0) {\n          scope.genMorphGeometry(parentGeo, parentGeoNode, morphGeoNode, preTransform, rawTarget.name);\n        }\n      });\n    });\n  }\n  // a morph geometry node is similar to a standard  node, and the node is also contained\n  // in FBXTree.Objects.Geometry, however it can only have attributes for position, normal\n  // and a special attribute Index defining which vertices of the original geometry are affected\n  // Normal and position attributes only have data for the vertices that are affected by the morph\n  genMorphGeometry(parentGeo, parentGeoNode, morphGeoNode, preTransform, name) {\n    const vertexIndices = parentGeoNode.PolygonVertexIndex !== void 0 ? parentGeoNode.PolygonVertexIndex.a : [];\n    const morphPositionsSparse = morphGeoNode.Vertices !== void 0 ? morphGeoNode.Vertices.a : [];\n    const indices = morphGeoNode.Indexes !== void 0 ? morphGeoNode.Indexes.a : [];\n    const length = parentGeo.attributes.position.count * 3;\n    const morphPositions = new Float32Array(length);\n    for (let i = 0; i < indices.length; i++) {\n      const morphIndex = indices[i] * 3;\n      morphPositions[morphIndex] = morphPositionsSparse[i * 3];\n      morphPositions[morphIndex + 1] = morphPositionsSparse[i * 3 + 1];\n      morphPositions[morphIndex + 2] = morphPositionsSparse[i * 3 + 2];\n    }\n    const morphGeoInfo = {\n      vertexIndices,\n      vertexPositions: morphPositions\n    };\n    const morphBuffers = this.genBuffers(morphGeoInfo);\n    const positionAttribute = new Float32BufferAttribute(morphBuffers.vertex, 3);\n    positionAttribute.name = name || morphGeoNode.attrName;\n    positionAttribute.applyMatrix4(preTransform);\n    parentGeo.morphAttributes.position.push(positionAttribute);\n  }\n  // Parse normal from FBXTree.Objects.Geometry.LayerElementNormal if it exists\n  parseNormals(NormalNode) {\n    const mappingType = NormalNode.MappingInformationType;\n    const referenceType = NormalNode.ReferenceInformationType;\n    const buffer = NormalNode.Normals.a;\n    let indexBuffer = [];\n    if (referenceType === \"IndexToDirect\") {\n      if (\"NormalIndex\" in NormalNode) {\n        indexBuffer = NormalNode.NormalIndex.a;\n      } else if (\"NormalsIndex\" in NormalNode) {\n        indexBuffer = NormalNode.NormalsIndex.a;\n      }\n    }\n    return {\n      dataSize: 3,\n      buffer,\n      indices: indexBuffer,\n      mappingType,\n      referenceType\n    };\n  }\n  // Parse UVs from FBXTree.Objects.Geometry.LayerElementUV if it exists\n  parseUVs(UVNode) {\n    const mappingType = UVNode.MappingInformationType;\n    const referenceType = UVNode.ReferenceInformationType;\n    const buffer = UVNode.UV.a;\n    let indexBuffer = [];\n    if (referenceType === \"IndexToDirect\") {\n      indexBuffer = UVNode.UVIndex.a;\n    }\n    return {\n      dataSize: 2,\n      buffer,\n      indices: indexBuffer,\n      mappingType,\n      referenceType\n    };\n  }\n  // Parse Vertex Colors from FBXTree.Objects.Geometry.LayerElementColor if it exists\n  parseVertexColors(ColorNode) {\n    const mappingType = ColorNode.MappingInformationType;\n    const referenceType = ColorNode.ReferenceInformationType;\n    const buffer = ColorNode.Colors.a;\n    let indexBuffer = [];\n    if (referenceType === \"IndexToDirect\") {\n      indexBuffer = ColorNode.ColorIndex.a;\n    }\n    return {\n      dataSize: 4,\n      buffer,\n      indices: indexBuffer,\n      mappingType,\n      referenceType\n    };\n  }\n  // Parse mapping and material data in FBXTree.Objects.Geometry.LayerElementMaterial if it exists\n  parseMaterialIndices(MaterialNode) {\n    const mappingType = MaterialNode.MappingInformationType;\n    const referenceType = MaterialNode.ReferenceInformationType;\n    if (mappingType === \"NoMappingInformation\") {\n      return {\n        dataSize: 1,\n        buffer: [0],\n        indices: [0],\n        mappingType: \"AllSame\",\n        referenceType\n      };\n    }\n    const materialIndexBuffer = MaterialNode.Materials.a;\n    const materialIndices = [];\n    for (let i = 0; i < materialIndexBuffer.length; ++i) {\n      materialIndices.push(i);\n    }\n    return {\n      dataSize: 1,\n      buffer: materialIndexBuffer,\n      indices: materialIndices,\n      mappingType,\n      referenceType\n    };\n  }\n  // Generate a NurbGeometry from a node in FBXTree.Objects.Geometry\n  parseNurbsGeometry(geoNode) {\n    if (NURBSCurve === void 0) {\n      console.error(\n        \"THREE.FBXLoader: The loader relies on NURBSCurve for any nurbs present in the model. Nurbs will show up as empty geometry.\"\n      );\n      return new BufferGeometry();\n    }\n    const order = parseInt(geoNode.Order);\n    if (isNaN(order)) {\n      console.error(\"THREE.FBXLoader: Invalid Order %s given for geometry ID: %s\", geoNode.Order, geoNode.id);\n      return new BufferGeometry();\n    }\n    const degree = order - 1;\n    const knots = geoNode.KnotVector.a;\n    const controlPoints = [];\n    const pointsValues = geoNode.Points.a;\n    for (let i = 0, l = pointsValues.length; i < l; i += 4) {\n      controlPoints.push(new Vector4().fromArray(pointsValues, i));\n    }\n    let startKnot, endKnot;\n    if (geoNode.Form === \"Closed\") {\n      controlPoints.push(controlPoints[0]);\n    } else if (geoNode.Form === \"Periodic\") {\n      startKnot = degree;\n      endKnot = knots.length - 1 - startKnot;\n      for (let i = 0; i < degree; ++i) {\n        controlPoints.push(controlPoints[i]);\n      }\n    }\n    const curve = new NURBSCurve(degree, knots, controlPoints, startKnot, endKnot);\n    const points = curve.getPoints(controlPoints.length * 12);\n    return new BufferGeometry().setFromPoints(points);\n  }\n}\nclass AnimationParser {\n  // take raw animation clips and turn them into three.js animation clips\n  parse() {\n    const animationClips = [];\n    const rawClips = this.parseClips();\n    if (rawClips !== void 0) {\n      for (const key in rawClips) {\n        const rawClip = rawClips[key];\n        const clip = this.addClip(rawClip);\n        animationClips.push(clip);\n      }\n    }\n    return animationClips;\n  }\n  parseClips() {\n    if (fbxTree.Objects.AnimationCurve === void 0)\n      return void 0;\n    const curveNodesMap = this.parseAnimationCurveNodes();\n    this.parseAnimationCurves(curveNodesMap);\n    const layersMap = this.parseAnimationLayers(curveNodesMap);\n    const rawClips = this.parseAnimStacks(layersMap);\n    return rawClips;\n  }\n  // parse nodes in FBXTree.Objects.AnimationCurveNode\n  // each AnimationCurveNode holds data for an animation transform for a model (e.g. left arm rotation )\n  // and is referenced by an AnimationLayer\n  parseAnimationCurveNodes() {\n    const rawCurveNodes = fbxTree.Objects.AnimationCurveNode;\n    const curveNodesMap = /* @__PURE__ */ new Map();\n    for (const nodeID in rawCurveNodes) {\n      const rawCurveNode = rawCurveNodes[nodeID];\n      if (rawCurveNode.attrName.match(/S|R|T|DeformPercent/) !== null) {\n        const curveNode = {\n          id: rawCurveNode.id,\n          attr: rawCurveNode.attrName,\n          curves: {}\n        };\n        curveNodesMap.set(curveNode.id, curveNode);\n      }\n    }\n    return curveNodesMap;\n  }\n  // parse nodes in FBXTree.Objects.AnimationCurve and connect them up to\n  // previously parsed AnimationCurveNodes. Each AnimationCurve holds data for a single animated\n  // axis ( e.g. times and values of x rotation)\n  parseAnimationCurves(curveNodesMap) {\n    const rawCurves = fbxTree.Objects.AnimationCurve;\n    for (const nodeID in rawCurves) {\n      const animationCurve = {\n        id: rawCurves[nodeID].id,\n        times: rawCurves[nodeID].KeyTime.a.map(convertFBXTimeToSeconds),\n        values: rawCurves[nodeID].KeyValueFloat.a\n      };\n      const relationships = connections.get(animationCurve.id);\n      if (relationships !== void 0) {\n        const animationCurveID = relationships.parents[0].ID;\n        const animationCurveRelationship = relationships.parents[0].relationship;\n        if (animationCurveRelationship.match(/X/)) {\n          curveNodesMap.get(animationCurveID).curves[\"x\"] = animationCurve;\n        } else if (animationCurveRelationship.match(/Y/)) {\n          curveNodesMap.get(animationCurveID).curves[\"y\"] = animationCurve;\n        } else if (animationCurveRelationship.match(/Z/)) {\n          curveNodesMap.get(animationCurveID).curves[\"z\"] = animationCurve;\n        } else if (animationCurveRelationship.match(/d|DeformPercent/) && curveNodesMap.has(animationCurveID)) {\n          curveNodesMap.get(animationCurveID).curves[\"morph\"] = animationCurve;\n        }\n      }\n    }\n  }\n  // parse nodes in FBXTree.Objects.AnimationLayer. Each layers holds references\n  // to various AnimationCurveNodes and is referenced by an AnimationStack node\n  // note: theoretically a stack can have multiple layers, however in practice there always seems to be one per stack\n  parseAnimationLayers(curveNodesMap) {\n    const rawLayers = fbxTree.Objects.AnimationLayer;\n    const layersMap = /* @__PURE__ */ new Map();\n    for (const nodeID in rawLayers) {\n      const layerCurveNodes = [];\n      const connection = connections.get(parseInt(nodeID));\n      if (connection !== void 0) {\n        const children = connection.children;\n        children.forEach(function(child, i) {\n          if (curveNodesMap.has(child.ID)) {\n            const curveNode = curveNodesMap.get(child.ID);\n            if (curveNode.curves.x !== void 0 || curveNode.curves.y !== void 0 || curveNode.curves.z !== void 0) {\n              if (layerCurveNodes[i] === void 0) {\n                const modelID = connections.get(child.ID).parents.filter(function(parent) {\n                  return parent.relationship !== void 0;\n                })[0].ID;\n                if (modelID !== void 0) {\n                  const rawModel = fbxTree.Objects.Model[modelID.toString()];\n                  if (rawModel === void 0) {\n                    console.warn(\"THREE.FBXLoader: Encountered a unused curve.\", child);\n                    return;\n                  }\n                  const node = {\n                    modelName: rawModel.attrName ? PropertyBinding.sanitizeNodeName(rawModel.attrName) : \"\",\n                    ID: rawModel.id,\n                    initialPosition: [0, 0, 0],\n                    initialRotation: [0, 0, 0],\n                    initialScale: [1, 1, 1]\n                  };\n                  sceneGraph.traverse(function(child2) {\n                    if (child2.ID === rawModel.id) {\n                      node.transform = child2.matrix;\n                      if (child2.userData.transformData)\n                        node.eulerOrder = child2.userData.transformData.eulerOrder;\n                    }\n                  });\n                  if (!node.transform)\n                    node.transform = new Matrix4();\n                  if (\"PreRotation\" in rawModel)\n                    node.preRotation = rawModel.PreRotation.value;\n                  if (\"PostRotation\" in rawModel)\n                    node.postRotation = rawModel.PostRotation.value;\n                  layerCurveNodes[i] = node;\n                }\n              }\n              if (layerCurveNodes[i])\n                layerCurveNodes[i][curveNode.attr] = curveNode;\n            } else if (curveNode.curves.morph !== void 0) {\n              if (layerCurveNodes[i] === void 0) {\n                const deformerID = connections.get(child.ID).parents.filter(function(parent) {\n                  return parent.relationship !== void 0;\n                })[0].ID;\n                const morpherID = connections.get(deformerID).parents[0].ID;\n                const geoID = connections.get(morpherID).parents[0].ID;\n                const modelID = connections.get(geoID).parents[0].ID;\n                const rawModel = fbxTree.Objects.Model[modelID];\n                const node = {\n                  modelName: rawModel.attrName ? PropertyBinding.sanitizeNodeName(rawModel.attrName) : \"\",\n                  morphName: fbxTree.Objects.Deformer[deformerID].attrName\n                };\n                layerCurveNodes[i] = node;\n              }\n              layerCurveNodes[i][curveNode.attr] = curveNode;\n            }\n          }\n        });\n        layersMap.set(parseInt(nodeID), layerCurveNodes);\n      }\n    }\n    return layersMap;\n  }\n  // parse nodes in FBXTree.Objects.AnimationStack. These are the top level node in the animation\n  // hierarchy. Each Stack node will be used to create a AnimationClip\n  parseAnimStacks(layersMap) {\n    const rawStacks = fbxTree.Objects.AnimationStack;\n    const rawClips = {};\n    for (const nodeID in rawStacks) {\n      const children = connections.get(parseInt(nodeID)).children;\n      if (children.length > 1) {\n        console.warn(\n          \"THREE.FBXLoader: Encountered an animation stack with multiple layers, this is currently not supported. Ignoring subsequent layers.\"\n        );\n      }\n      const layer = layersMap.get(children[0].ID);\n      rawClips[nodeID] = {\n        name: rawStacks[nodeID].attrName,\n        layer\n      };\n    }\n    return rawClips;\n  }\n  addClip(rawClip) {\n    let tracks = [];\n    const scope = this;\n    rawClip.layer.forEach(function(rawTracks) {\n      tracks = tracks.concat(scope.generateTracks(rawTracks));\n    });\n    return new AnimationClip(rawClip.name, -1, tracks);\n  }\n  generateTracks(rawTracks) {\n    const tracks = [];\n    let initialPosition = new Vector3();\n    let initialRotation = new Quaternion();\n    let initialScale = new Vector3();\n    if (rawTracks.transform)\n      rawTracks.transform.decompose(initialPosition, initialRotation, initialScale);\n    initialPosition = initialPosition.toArray();\n    initialRotation = new Euler().setFromQuaternion(initialRotation, rawTracks.eulerOrder).toArray();\n    initialScale = initialScale.toArray();\n    if (rawTracks.T !== void 0 && Object.keys(rawTracks.T.curves).length > 0) {\n      const positionTrack = this.generateVectorTrack(\n        rawTracks.modelName,\n        rawTracks.T.curves,\n        initialPosition,\n        \"position\"\n      );\n      if (positionTrack !== void 0)\n        tracks.push(positionTrack);\n    }\n    if (rawTracks.R !== void 0 && Object.keys(rawTracks.R.curves).length > 0) {\n      const rotationTrack = this.generateRotationTrack(\n        rawTracks.modelName,\n        rawTracks.R.curves,\n        initialRotation,\n        rawTracks.preRotation,\n        rawTracks.postRotation,\n        rawTracks.eulerOrder\n      );\n      if (rotationTrack !== void 0)\n        tracks.push(rotationTrack);\n    }\n    if (rawTracks.S !== void 0 && Object.keys(rawTracks.S.curves).length > 0) {\n      const scaleTrack = this.generateVectorTrack(rawTracks.modelName, rawTracks.S.curves, initialScale, \"scale\");\n      if (scaleTrack !== void 0)\n        tracks.push(scaleTrack);\n    }\n    if (rawTracks.DeformPercent !== void 0) {\n      const morphTrack = this.generateMorphTrack(rawTracks);\n      if (morphTrack !== void 0)\n        tracks.push(morphTrack);\n    }\n    return tracks;\n  }\n  generateVectorTrack(modelName, curves, initialValue, type) {\n    const times = this.getTimesForAllAxes(curves);\n    const values = this.getKeyframeTrackValues(times, curves, initialValue);\n    return new VectorKeyframeTrack(modelName + \".\" + type, times, values);\n  }\n  generateRotationTrack(modelName, curves, initialValue, preRotation, postRotation, eulerOrder) {\n    if (curves.x !== void 0) {\n      this.interpolateRotations(curves.x);\n      curves.x.values = curves.x.values.map(MathUtils.degToRad);\n    }\n    if (curves.y !== void 0) {\n      this.interpolateRotations(curves.y);\n      curves.y.values = curves.y.values.map(MathUtils.degToRad);\n    }\n    if (curves.z !== void 0) {\n      this.interpolateRotations(curves.z);\n      curves.z.values = curves.z.values.map(MathUtils.degToRad);\n    }\n    const times = this.getTimesForAllAxes(curves);\n    const values = this.getKeyframeTrackValues(times, curves, initialValue);\n    if (preRotation !== void 0) {\n      preRotation = preRotation.map(MathUtils.degToRad);\n      preRotation.push(eulerOrder);\n      preRotation = new Euler().fromArray(preRotation);\n      preRotation = new Quaternion().setFromEuler(preRotation);\n    }\n    if (postRotation !== void 0) {\n      postRotation = postRotation.map(MathUtils.degToRad);\n      postRotation.push(eulerOrder);\n      postRotation = new Euler().fromArray(postRotation);\n      postRotation = new Quaternion().setFromEuler(postRotation).invert();\n    }\n    const quaternion = new Quaternion();\n    const euler = new Euler();\n    const quaternionValues = [];\n    for (let i = 0; i < values.length; i += 3) {\n      euler.set(values[i], values[i + 1], values[i + 2], eulerOrder);\n      quaternion.setFromEuler(euler);\n      if (preRotation !== void 0)\n        quaternion.premultiply(preRotation);\n      if (postRotation !== void 0)\n        quaternion.multiply(postRotation);\n      quaternion.toArray(quaternionValues, i / 3 * 4);\n    }\n    return new QuaternionKeyframeTrack(modelName + \".quaternion\", times, quaternionValues);\n  }\n  generateMorphTrack(rawTracks) {\n    const curves = rawTracks.DeformPercent.curves.morph;\n    const values = curves.values.map(function(val) {\n      return val / 100;\n    });\n    const morphNum = sceneGraph.getObjectByName(rawTracks.modelName).morphTargetDictionary[rawTracks.morphName];\n    return new NumberKeyframeTrack(\n      rawTracks.modelName + \".morphTargetInfluences[\" + morphNum + \"]\",\n      curves.times,\n      values\n    );\n  }\n  // For all animated objects, times are defined separately for each axis\n  // Here we'll combine the times into one sorted array without duplicates\n  getTimesForAllAxes(curves) {\n    let times = [];\n    if (curves.x !== void 0)\n      times = times.concat(curves.x.times);\n    if (curves.y !== void 0)\n      times = times.concat(curves.y.times);\n    if (curves.z !== void 0)\n      times = times.concat(curves.z.times);\n    times = times.sort(function(a, b) {\n      return a - b;\n    });\n    if (times.length > 1) {\n      let targetIndex = 1;\n      let lastValue = times[0];\n      for (let i = 1; i < times.length; i++) {\n        const currentValue = times[i];\n        if (currentValue !== lastValue) {\n          times[targetIndex] = currentValue;\n          lastValue = currentValue;\n          targetIndex++;\n        }\n      }\n      times = times.slice(0, targetIndex);\n    }\n    return times;\n  }\n  getKeyframeTrackValues(times, curves, initialValue) {\n    const prevValue = initialValue;\n    const values = [];\n    let xIndex = -1;\n    let yIndex = -1;\n    let zIndex = -1;\n    times.forEach(function(time) {\n      if (curves.x)\n        xIndex = curves.x.times.indexOf(time);\n      if (curves.y)\n        yIndex = curves.y.times.indexOf(time);\n      if (curves.z)\n        zIndex = curves.z.times.indexOf(time);\n      if (xIndex !== -1) {\n        const xValue = curves.x.values[xIndex];\n        values.push(xValue);\n        prevValue[0] = xValue;\n      } else {\n        values.push(prevValue[0]);\n      }\n      if (yIndex !== -1) {\n        const yValue = curves.y.values[yIndex];\n        values.push(yValue);\n        prevValue[1] = yValue;\n      } else {\n        values.push(prevValue[1]);\n      }\n      if (zIndex !== -1) {\n        const zValue = curves.z.values[zIndex];\n        values.push(zValue);\n        prevValue[2] = zValue;\n      } else {\n        values.push(prevValue[2]);\n      }\n    });\n    return values;\n  }\n  // Rotations are defined as Euler angles which can have values  of any size\n  // These will be converted to quaternions which don't support values greater than\n  // PI, so we'll interpolate large rotations\n  interpolateRotations(curve) {\n    for (let i = 1; i < curve.values.length; i++) {\n      const initialValue = curve.values[i - 1];\n      const valuesSpan = curve.values[i] - initialValue;\n      const absoluteSpan = Math.abs(valuesSpan);\n      if (absoluteSpan >= 180) {\n        const numSubIntervals = absoluteSpan / 180;\n        const step = valuesSpan / numSubIntervals;\n        let nextValue = initialValue + step;\n        const initialTime = curve.times[i - 1];\n        const timeSpan = curve.times[i] - initialTime;\n        const interval = timeSpan / numSubIntervals;\n        let nextTime = initialTime + interval;\n        const interpolatedTimes = [];\n        const interpolatedValues = [];\n        while (nextTime < curve.times[i]) {\n          interpolatedTimes.push(nextTime);\n          nextTime += interval;\n          interpolatedValues.push(nextValue);\n          nextValue += step;\n        }\n        curve.times = inject(curve.times, i, interpolatedTimes);\n        curve.values = inject(curve.values, i, interpolatedValues);\n      }\n    }\n  }\n}\nclass TextParser {\n  getPrevNode() {\n    return this.nodeStack[this.currentIndent - 2];\n  }\n  getCurrentNode() {\n    return this.nodeStack[this.currentIndent - 1];\n  }\n  getCurrentProp() {\n    return this.currentProp;\n  }\n  pushStack(node) {\n    this.nodeStack.push(node);\n    this.currentIndent += 1;\n  }\n  popStack() {\n    this.nodeStack.pop();\n    this.currentIndent -= 1;\n  }\n  setCurrentProp(val, name) {\n    this.currentProp = val;\n    this.currentPropName = name;\n  }\n  parse(text) {\n    this.currentIndent = 0;\n    this.allNodes = new FBXTree();\n    this.nodeStack = [];\n    this.currentProp = [];\n    this.currentPropName = \"\";\n    const scope = this;\n    const split = text.split(/[\\r\\n]+/);\n    split.forEach(function(line, i) {\n      const matchComment = line.match(/^[\\s\\t]*;/);\n      const matchEmpty = line.match(/^[\\s\\t]*$/);\n      if (matchComment || matchEmpty)\n        return;\n      const matchBeginning = line.match(\"^\\\\t{\" + scope.currentIndent + \"}(\\\\w+):(.*){\", \"\");\n      const matchProperty = line.match(\"^\\\\t{\" + scope.currentIndent + \"}(\\\\w+):[\\\\s\\\\t\\\\r\\\\n](.*)\");\n      const matchEnd = line.match(\"^\\\\t{\" + (scope.currentIndent - 1) + \"}}\");\n      if (matchBeginning) {\n        scope.parseNodeBegin(line, matchBeginning);\n      } else if (matchProperty) {\n        scope.parseNodeProperty(line, matchProperty, split[++i]);\n      } else if (matchEnd) {\n        scope.popStack();\n      } else if (line.match(/^[^\\s\\t}]/)) {\n        scope.parseNodePropertyContinued(line);\n      }\n    });\n    return this.allNodes;\n  }\n  parseNodeBegin(line, property) {\n    const nodeName = property[1].trim().replace(/^\"/, \"\").replace(/\"$/, \"\");\n    const nodeAttrs = property[2].split(\",\").map(function(attr) {\n      return attr.trim().replace(/^\"/, \"\").replace(/\"$/, \"\");\n    });\n    const node = { name: nodeName };\n    const attrs = this.parseNodeAttr(nodeAttrs);\n    const currentNode = this.getCurrentNode();\n    if (this.currentIndent === 0) {\n      this.allNodes.add(nodeName, node);\n    } else {\n      if (nodeName in currentNode) {\n        if (nodeName === \"PoseNode\") {\n          currentNode.PoseNode.push(node);\n        } else if (currentNode[nodeName].id !== void 0) {\n          currentNode[nodeName] = {};\n          currentNode[nodeName][currentNode[nodeName].id] = currentNode[nodeName];\n        }\n        if (attrs.id !== \"\")\n          currentNode[nodeName][attrs.id] = node;\n      } else if (typeof attrs.id === \"number\") {\n        currentNode[nodeName] = {};\n        currentNode[nodeName][attrs.id] = node;\n      } else if (nodeName !== \"Properties70\") {\n        if (nodeName === \"PoseNode\")\n          currentNode[nodeName] = [node];\n        else\n          currentNode[nodeName] = node;\n      }\n    }\n    if (typeof attrs.id === \"number\")\n      node.id = attrs.id;\n    if (attrs.name !== \"\")\n      node.attrName = attrs.name;\n    if (attrs.type !== \"\")\n      node.attrType = attrs.type;\n    this.pushStack(node);\n  }\n  parseNodeAttr(attrs) {\n    let id = attrs[0];\n    if (attrs[0] !== \"\") {\n      id = parseInt(attrs[0]);\n      if (isNaN(id)) {\n        id = attrs[0];\n      }\n    }\n    let name = \"\", type = \"\";\n    if (attrs.length > 1) {\n      name = attrs[1].replace(/^(\\w+)::/, \"\");\n      type = attrs[2];\n    }\n    return { id, name, type };\n  }\n  parseNodeProperty(line, property, contentLine) {\n    let propName = property[1].replace(/^\"/, \"\").replace(/\"$/, \"\").trim();\n    let propValue = property[2].replace(/^\"/, \"\").replace(/\"$/, \"\").trim();\n    if (propName === \"Content\" && propValue === \",\") {\n      propValue = contentLine.replace(/\"/g, \"\").replace(/,$/, \"\").trim();\n    }\n    const currentNode = this.getCurrentNode();\n    const parentName = currentNode.name;\n    if (parentName === \"Properties70\") {\n      this.parseNodeSpecialProperty(line, propName, propValue);\n      return;\n    }\n    if (propName === \"C\") {\n      const connProps = propValue.split(\",\").slice(1);\n      const from = parseInt(connProps[0]);\n      const to = parseInt(connProps[1]);\n      let rest = propValue.split(\",\").slice(3);\n      rest = rest.map(function(elem) {\n        return elem.trim().replace(/^\"/, \"\");\n      });\n      propName = \"connections\";\n      propValue = [from, to];\n      append(propValue, rest);\n      if (currentNode[propName] === void 0) {\n        currentNode[propName] = [];\n      }\n    }\n    if (propName === \"Node\")\n      currentNode.id = propValue;\n    if (propName in currentNode && Array.isArray(currentNode[propName])) {\n      currentNode[propName].push(propValue);\n    } else {\n      if (propName !== \"a\")\n        currentNode[propName] = propValue;\n      else\n        currentNode.a = propValue;\n    }\n    this.setCurrentProp(currentNode, propName);\n    if (propName === \"a\" && propValue.slice(-1) !== \",\") {\n      currentNode.a = parseNumberArray(propValue);\n    }\n  }\n  parseNodePropertyContinued(line) {\n    const currentNode = this.getCurrentNode();\n    currentNode.a += line;\n    if (line.slice(-1) !== \",\") {\n      currentNode.a = parseNumberArray(currentNode.a);\n    }\n  }\n  // parse \"Property70\"\n  parseNodeSpecialProperty(line, propName, propValue) {\n    const props = propValue.split('\",').map(function(prop) {\n      return prop.trim().replace(/^\\\"/, \"\").replace(/\\s/, \"_\");\n    });\n    const innerPropName = props[0];\n    const innerPropType1 = props[1];\n    const innerPropType2 = props[2];\n    const innerPropFlag = props[3];\n    let innerPropValue = props[4];\n    switch (innerPropType1) {\n      case \"int\":\n      case \"enum\":\n      case \"bool\":\n      case \"ULongLong\":\n      case \"double\":\n      case \"Number\":\n      case \"FieldOfView\":\n        innerPropValue = parseFloat(innerPropValue);\n        break;\n      case \"Color\":\n      case \"ColorRGB\":\n      case \"Vector3D\":\n      case \"Lcl_Translation\":\n      case \"Lcl_Rotation\":\n      case \"Lcl_Scaling\":\n        innerPropValue = parseNumberArray(innerPropValue);\n        break;\n    }\n    this.getPrevNode()[innerPropName] = {\n      type: innerPropType1,\n      type2: innerPropType2,\n      flag: innerPropFlag,\n      value: innerPropValue\n    };\n    this.setCurrentProp(this.getPrevNode(), innerPropName);\n  }\n}\nclass BinaryParser {\n  parse(buffer) {\n    const reader = new BinaryReader(buffer);\n    reader.skip(23);\n    const version = reader.getUint32();\n    if (version < 6400) {\n      throw new Error(\"THREE.FBXLoader: FBX version not supported, FileVersion: \" + version);\n    }\n    const allNodes = new FBXTree();\n    while (!this.endOfContent(reader)) {\n      const node = this.parseNode(reader, version);\n      if (node !== null)\n        allNodes.add(node.name, node);\n    }\n    return allNodes;\n  }\n  // Check if reader has reached the end of content.\n  endOfContent(reader) {\n    if (reader.size() % 16 === 0) {\n      return (reader.getOffset() + 160 + 16 & ~15) >= reader.size();\n    } else {\n      return reader.getOffset() + 160 + 16 >= reader.size();\n    }\n  }\n  // recursively parse nodes until the end of the file is reached\n  parseNode(reader, version) {\n    const node = {};\n    const endOffset = version >= 7500 ? reader.getUint64() : reader.getUint32();\n    const numProperties = version >= 7500 ? reader.getUint64() : reader.getUint32();\n    version >= 7500 ? reader.getUint64() : reader.getUint32();\n    const nameLen = reader.getUint8();\n    const name = reader.getString(nameLen);\n    if (endOffset === 0)\n      return null;\n    const propertyList = [];\n    for (let i = 0; i < numProperties; i++) {\n      propertyList.push(this.parseProperty(reader));\n    }\n    const id = propertyList.length > 0 ? propertyList[0] : \"\";\n    const attrName = propertyList.length > 1 ? propertyList[1] : \"\";\n    const attrType = propertyList.length > 2 ? propertyList[2] : \"\";\n    node.singleProperty = numProperties === 1 && reader.getOffset() === endOffset ? true : false;\n    while (endOffset > reader.getOffset()) {\n      const subNode = this.parseNode(reader, version);\n      if (subNode !== null)\n        this.parseSubNode(name, node, subNode);\n    }\n    node.propertyList = propertyList;\n    if (typeof id === \"number\")\n      node.id = id;\n    if (attrName !== \"\")\n      node.attrName = attrName;\n    if (attrType !== \"\")\n      node.attrType = attrType;\n    if (name !== \"\")\n      node.name = name;\n    return node;\n  }\n  parseSubNode(name, node, subNode) {\n    if (subNode.singleProperty === true) {\n      const value = subNode.propertyList[0];\n      if (Array.isArray(value)) {\n        node[subNode.name] = subNode;\n        subNode.a = value;\n      } else {\n        node[subNode.name] = value;\n      }\n    } else if (name === \"Connections\" && subNode.name === \"C\") {\n      const array = [];\n      subNode.propertyList.forEach(function(property, i) {\n        if (i !== 0)\n          array.push(property);\n      });\n      if (node.connections === void 0) {\n        node.connections = [];\n      }\n      node.connections.push(array);\n    } else if (subNode.name === \"Properties70\") {\n      const keys = Object.keys(subNode);\n      keys.forEach(function(key) {\n        node[key] = subNode[key];\n      });\n    } else if (name === \"Properties70\" && subNode.name === \"P\") {\n      let innerPropName = subNode.propertyList[0];\n      let innerPropType1 = subNode.propertyList[1];\n      const innerPropType2 = subNode.propertyList[2];\n      const innerPropFlag = subNode.propertyList[3];\n      let innerPropValue;\n      if (innerPropName.indexOf(\"Lcl \") === 0)\n        innerPropName = innerPropName.replace(\"Lcl \", \"Lcl_\");\n      if (innerPropType1.indexOf(\"Lcl \") === 0)\n        innerPropType1 = innerPropType1.replace(\"Lcl \", \"Lcl_\");\n      if (innerPropType1 === \"Color\" || innerPropType1 === \"ColorRGB\" || innerPropType1 === \"Vector\" || innerPropType1 === \"Vector3D\" || innerPropType1.indexOf(\"Lcl_\") === 0) {\n        innerPropValue = [subNode.propertyList[4], subNode.propertyList[5], subNode.propertyList[6]];\n      } else {\n        innerPropValue = subNode.propertyList[4];\n      }\n      node[innerPropName] = {\n        type: innerPropType1,\n        type2: innerPropType2,\n        flag: innerPropFlag,\n        value: innerPropValue\n      };\n    } else if (node[subNode.name] === void 0) {\n      if (typeof subNode.id === \"number\") {\n        node[subNode.name] = {};\n        node[subNode.name][subNode.id] = subNode;\n      } else {\n        node[subNode.name] = subNode;\n      }\n    } else {\n      if (subNode.name === \"PoseNode\") {\n        if (!Array.isArray(node[subNode.name])) {\n          node[subNode.name] = [node[subNode.name]];\n        }\n        node[subNode.name].push(subNode);\n      } else if (node[subNode.name][subNode.id] === void 0) {\n        node[subNode.name][subNode.id] = subNode;\n      }\n    }\n  }\n  parseProperty(reader) {\n    const type = reader.getString(1);\n    let length;\n    switch (type) {\n      case \"C\":\n        return reader.getBoolean();\n      case \"D\":\n        return reader.getFloat64();\n      case \"F\":\n        return reader.getFloat32();\n      case \"I\":\n        return reader.getInt32();\n      case \"L\":\n        return reader.getInt64();\n      case \"R\":\n        length = reader.getUint32();\n        return reader.getArrayBuffer(length);\n      case \"S\":\n        length = reader.getUint32();\n        return reader.getString(length);\n      case \"Y\":\n        return reader.getInt16();\n      case \"b\":\n      case \"c\":\n      case \"d\":\n      case \"f\":\n      case \"i\":\n      case \"l\":\n        const arrayLength = reader.getUint32();\n        const encoding = reader.getUint32();\n        const compressedLength = reader.getUint32();\n        if (encoding === 0) {\n          switch (type) {\n            case \"b\":\n            case \"c\":\n              return reader.getBooleanArray(arrayLength);\n            case \"d\":\n              return reader.getFloat64Array(arrayLength);\n            case \"f\":\n              return reader.getFloat32Array(arrayLength);\n            case \"i\":\n              return reader.getInt32Array(arrayLength);\n            case \"l\":\n              return reader.getInt64Array(arrayLength);\n          }\n        }\n        const data = unzlibSync(new Uint8Array(reader.getArrayBuffer(compressedLength)));\n        const reader2 = new BinaryReader(data.buffer);\n        switch (type) {\n          case \"b\":\n          case \"c\":\n            return reader2.getBooleanArray(arrayLength);\n          case \"d\":\n            return reader2.getFloat64Array(arrayLength);\n          case \"f\":\n            return reader2.getFloat32Array(arrayLength);\n          case \"i\":\n            return reader2.getInt32Array(arrayLength);\n          case \"l\":\n            return reader2.getInt64Array(arrayLength);\n        }\n      default:\n        throw new Error(\"THREE.FBXLoader: Unknown property type \" + type);\n    }\n  }\n}\nclass BinaryReader {\n  constructor(buffer, littleEndian) {\n    this.dv = new DataView(buffer);\n    this.offset = 0;\n    this.littleEndian = littleEndian !== void 0 ? littleEndian : true;\n  }\n  getOffset() {\n    return this.offset;\n  }\n  size() {\n    return this.dv.buffer.byteLength;\n  }\n  skip(length) {\n    this.offset += length;\n  }\n  // seems like true/false representation depends on exporter.\n  // true: 1 or 'Y'(=0x59), false: 0 or 'T'(=0x54)\n  // then sees LSB.\n  getBoolean() {\n    return (this.getUint8() & 1) === 1;\n  }\n  getBooleanArray(size) {\n    const a = [];\n    for (let i = 0; i < size; i++) {\n      a.push(this.getBoolean());\n    }\n    return a;\n  }\n  getUint8() {\n    const value = this.dv.getUint8(this.offset);\n    this.offset += 1;\n    return value;\n  }\n  getInt16() {\n    const value = this.dv.getInt16(this.offset, this.littleEndian);\n    this.offset += 2;\n    return value;\n  }\n  getInt32() {\n    const value = this.dv.getInt32(this.offset, this.littleEndian);\n    this.offset += 4;\n    return value;\n  }\n  getInt32Array(size) {\n    const a = [];\n    for (let i = 0; i < size; i++) {\n      a.push(this.getInt32());\n    }\n    return a;\n  }\n  getUint32() {\n    const value = this.dv.getUint32(this.offset, this.littleEndian);\n    this.offset += 4;\n    return value;\n  }\n  // JavaScript doesn't support 64-bit integer so calculate this here\n  // 1 << 32 will return 1 so using multiply operation instead here.\n  // There's a possibility that this method returns wrong value if the value\n  // is out of the range between Number.MAX_SAFE_INTEGER and Number.MIN_SAFE_INTEGER.\n  // TODO: safely handle 64-bit integer\n  getInt64() {\n    let low, high;\n    if (this.littleEndian) {\n      low = this.getUint32();\n      high = this.getUint32();\n    } else {\n      high = this.getUint32();\n      low = this.getUint32();\n    }\n    if (high & 2147483648) {\n      high = ~high & 4294967295;\n      low = ~low & 4294967295;\n      if (low === 4294967295)\n        high = high + 1 & 4294967295;\n      low = low + 1 & 4294967295;\n      return -(high * 4294967296 + low);\n    }\n    return high * 4294967296 + low;\n  }\n  getInt64Array(size) {\n    const a = [];\n    for (let i = 0; i < size; i++) {\n      a.push(this.getInt64());\n    }\n    return a;\n  }\n  // Note: see getInt64() comment\n  getUint64() {\n    let low, high;\n    if (this.littleEndian) {\n      low = this.getUint32();\n      high = this.getUint32();\n    } else {\n      high = this.getUint32();\n      low = this.getUint32();\n    }\n    return high * 4294967296 + low;\n  }\n  getFloat32() {\n    const value = this.dv.getFloat32(this.offset, this.littleEndian);\n    this.offset += 4;\n    return value;\n  }\n  getFloat32Array(size) {\n    const a = [];\n    for (let i = 0; i < size; i++) {\n      a.push(this.getFloat32());\n    }\n    return a;\n  }\n  getFloat64() {\n    const value = this.dv.getFloat64(this.offset, this.littleEndian);\n    this.offset += 8;\n    return value;\n  }\n  getFloat64Array(size) {\n    const a = [];\n    for (let i = 0; i < size; i++) {\n      a.push(this.getFloat64());\n    }\n    return a;\n  }\n  getArrayBuffer(size) {\n    const value = this.dv.buffer.slice(this.offset, this.offset + size);\n    this.offset += size;\n    return value;\n  }\n  getString(size) {\n    let a = [];\n    for (let i = 0; i < size; i++) {\n      a[i] = this.getUint8();\n    }\n    const nullByte = a.indexOf(0);\n    if (nullByte >= 0)\n      a = a.slice(0, nullByte);\n    return LoaderUtils.decodeText(new Uint8Array(a));\n  }\n}\nclass FBXTree {\n  add(key, val) {\n    this[key] = val;\n  }\n}\nfunction isFbxFormatBinary(buffer) {\n  const CORRECT = \"Kaydara FBX Binary  \\0\";\n  return buffer.byteLength >= CORRECT.length && CORRECT === convertArrayBufferToString(buffer, 0, CORRECT.length);\n}\nfunction isFbxFormatASCII(text) {\n  const CORRECT = [\n    \"K\",\n    \"a\",\n    \"y\",\n    \"d\",\n    \"a\",\n    \"r\",\n    \"a\",\n    \"\\\\\",\n    \"F\",\n    \"B\",\n    \"X\",\n    \"\\\\\",\n    \"B\",\n    \"i\",\n    \"n\",\n    \"a\",\n    \"r\",\n    \"y\",\n    \"\\\\\",\n    \"\\\\\"\n  ];\n  let cursor = 0;\n  function read(offset) {\n    const result = text[offset - 1];\n    text = text.slice(cursor + offset);\n    cursor++;\n    return result;\n  }\n  for (let i = 0; i < CORRECT.length; ++i) {\n    const num = read(1);\n    if (num === CORRECT[i]) {\n      return false;\n    }\n  }\n  return true;\n}\nfunction getFbxVersion(text) {\n  const versionRegExp = /FBXVersion: (\\d+)/;\n  const match = text.match(versionRegExp);\n  if (match) {\n    const version = parseInt(match[1]);\n    return version;\n  }\n  throw new Error(\"THREE.FBXLoader: Cannot find the version number for the file given.\");\n}\nfunction convertFBXTimeToSeconds(time) {\n  return time / 46186158e3;\n}\nconst dataArray = [];\nfunction getData(polygonVertexIndex, polygonIndex, vertexIndex, infoObject) {\n  let index;\n  switch (infoObject.mappingType) {\n    case \"ByPolygonVertex\":\n      index = polygonVertexIndex;\n      break;\n    case \"ByPolygon\":\n      index = polygonIndex;\n      break;\n    case \"ByVertice\":\n      index = vertexIndex;\n      break;\n    case \"AllSame\":\n      index = infoObject.indices[0];\n      break;\n    default:\n      console.warn(\"THREE.FBXLoader: unknown attribute mapping type \" + infoObject.mappingType);\n  }\n  if (infoObject.referenceType === \"IndexToDirect\")\n    index = infoObject.indices[index];\n  const from = index * infoObject.dataSize;\n  const to = from + infoObject.dataSize;\n  return slice(dataArray, infoObject.buffer, from, to);\n}\nconst tempEuler = /* @__PURE__ */ new Euler();\nconst tempVec = /* @__PURE__ */ new Vector3();\nfunction generateTransform(transformData) {\n  const lTranslationM = new Matrix4();\n  const lPreRotationM = new Matrix4();\n  const lRotationM = new Matrix4();\n  const lPostRotationM = new Matrix4();\n  const lScalingM = new Matrix4();\n  const lScalingPivotM = new Matrix4();\n  const lScalingOffsetM = new Matrix4();\n  const lRotationOffsetM = new Matrix4();\n  const lRotationPivotM = new Matrix4();\n  const lParentGX = new Matrix4();\n  const lParentLX = new Matrix4();\n  const lGlobalT = new Matrix4();\n  const inheritType = transformData.inheritType ? transformData.inheritType : 0;\n  if (transformData.translation)\n    lTranslationM.setPosition(tempVec.fromArray(transformData.translation));\n  if (transformData.preRotation) {\n    const array = transformData.preRotation.map(MathUtils.degToRad);\n    array.push(transformData.eulerOrder);\n    lPreRotationM.makeRotationFromEuler(tempEuler.fromArray(array));\n  }\n  if (transformData.rotation) {\n    const array = transformData.rotation.map(MathUtils.degToRad);\n    array.push(transformData.eulerOrder);\n    lRotationM.makeRotationFromEuler(tempEuler.fromArray(array));\n  }\n  if (transformData.postRotation) {\n    const array = transformData.postRotation.map(MathUtils.degToRad);\n    array.push(transformData.eulerOrder);\n    lPostRotationM.makeRotationFromEuler(tempEuler.fromArray(array));\n    lPostRotationM.invert();\n  }\n  if (transformData.scale)\n    lScalingM.scale(tempVec.fromArray(transformData.scale));\n  if (transformData.scalingOffset)\n    lScalingOffsetM.setPosition(tempVec.fromArray(transformData.scalingOffset));\n  if (transformData.scalingPivot)\n    lScalingPivotM.setPosition(tempVec.fromArray(transformData.scalingPivot));\n  if (transformData.rotationOffset)\n    lRotationOffsetM.setPosition(tempVec.fromArray(transformData.rotationOffset));\n  if (transformData.rotationPivot)\n    lRotationPivotM.setPosition(tempVec.fromArray(transformData.rotationPivot));\n  if (transformData.parentMatrixWorld) {\n    lParentLX.copy(transformData.parentMatrix);\n    lParentGX.copy(transformData.parentMatrixWorld);\n  }\n  const lLRM = lPreRotationM.clone().multiply(lRotationM).multiply(lPostRotationM);\n  const lParentGRM = new Matrix4();\n  lParentGRM.extractRotation(lParentGX);\n  const lParentTM = new Matrix4();\n  lParentTM.copyPosition(lParentGX);\n  const lParentGRSM = lParentTM.clone().invert().multiply(lParentGX);\n  const lParentGSM = lParentGRM.clone().invert().multiply(lParentGRSM);\n  const lLSM = lScalingM;\n  const lGlobalRS = new Matrix4();\n  if (inheritType === 0) {\n    lGlobalRS.copy(lParentGRM).multiply(lLRM).multiply(lParentGSM).multiply(lLSM);\n  } else if (inheritType === 1) {\n    lGlobalRS.copy(lParentGRM).multiply(lParentGSM).multiply(lLRM).multiply(lLSM);\n  } else {\n    const lParentLSM = new Matrix4().scale(new Vector3().setFromMatrixScale(lParentLX));\n    const lParentLSM_inv = lParentLSM.clone().invert();\n    const lParentGSM_noLocal = lParentGSM.clone().multiply(lParentLSM_inv);\n    lGlobalRS.copy(lParentGRM).multiply(lLRM).multiply(lParentGSM_noLocal).multiply(lLSM);\n  }\n  const lRotationPivotM_inv = lRotationPivotM.clone().invert();\n  const lScalingPivotM_inv = lScalingPivotM.clone().invert();\n  let lTransform = lTranslationM.clone().multiply(lRotationOffsetM).multiply(lRotationPivotM).multiply(lPreRotationM).multiply(lRotationM).multiply(lPostRotationM).multiply(lRotationPivotM_inv).multiply(lScalingOffsetM).multiply(lScalingPivotM).multiply(lScalingM).multiply(lScalingPivotM_inv);\n  const lLocalTWithAllPivotAndOffsetInfo = new Matrix4().copyPosition(lTransform);\n  const lGlobalTranslation = lParentGX.clone().multiply(lLocalTWithAllPivotAndOffsetInfo);\n  lGlobalT.copyPosition(lGlobalTranslation);\n  lTransform = lGlobalT.clone().multiply(lGlobalRS);\n  lTransform.premultiply(lParentGX.invert());\n  return lTransform;\n}\nfunction getEulerOrder(order) {\n  order = order || 0;\n  const enums = [\n    \"ZYX\",\n    // -> XYZ extrinsic\n    \"YZX\",\n    // -> XZY extrinsic\n    \"XZY\",\n    // -> YZX extrinsic\n    \"ZXY\",\n    // -> YXZ extrinsic\n    \"YXZ\",\n    // -> ZXY extrinsic\n    \"XYZ\"\n    // -> ZYX extrinsic\n    //'SphericXYZ', // not possible to support\n  ];\n  if (order === 6) {\n    console.warn(\"THREE.FBXLoader: unsupported Euler Order: Spherical XYZ. Animations and rotations may be incorrect.\");\n    return enums[0];\n  }\n  return enums[order];\n}\nfunction parseNumberArray(value) {\n  const array = value.split(\",\").map(function(val) {\n    return parseFloat(val);\n  });\n  return array;\n}\nfunction convertArrayBufferToString(buffer, from, to) {\n  if (from === void 0)\n    from = 0;\n  if (to === void 0)\n    to = buffer.byteLength;\n  return LoaderUtils.decodeText(new Uint8Array(buffer, from, to));\n}\nfunction append(a, b) {\n  for (let i = 0, j = a.length, l = b.length; i < l; i++, j++) {\n    a[j] = b[i];\n  }\n}\nfunction slice(a, b, from, to) {\n  for (let i = from, j = 0; i < to; i++, j++) {\n    a[j] = b[i];\n  }\n  return a;\n}\nfunction inject(a1, index, a2) {\n  return a1.slice(0, index).concat(a2).concat(a1.slice(index));\n}\nexport {\n  FBXLoader\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}