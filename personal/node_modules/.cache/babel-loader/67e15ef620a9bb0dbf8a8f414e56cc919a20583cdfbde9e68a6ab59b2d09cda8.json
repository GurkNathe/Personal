{"ast":null,"code":"import { Loader, FileLoader, BufferGeometry, Float32BufferAttribute, LoaderUtils } from \"three\";\nclass PLYLoader extends Loader {\n  constructor(manager) {\n    super(manager);\n    this.propertyNameMapping = {};\n  }\n  load(url, onLoad, onProgress, onError) {\n    const scope = this;\n    const loader = new FileLoader(this.manager);\n    loader.setPath(this.path);\n    loader.setResponseType(\"arraybuffer\");\n    loader.setRequestHeader(this.requestHeader);\n    loader.setWithCredentials(this.withCredentials);\n    loader.load(url, function (text) {\n      try {\n        onLoad(scope.parse(text));\n      } catch (e) {\n        if (onError) {\n          onError(e);\n        } else {\n          console.error(e);\n        }\n        scope.manager.itemError(url);\n      }\n    }, onProgress, onError);\n  }\n  setPropertyNameMapping(mapping) {\n    this.propertyNameMapping = mapping;\n  }\n  parse(data) {\n    function parseHeader(data2) {\n      const patternHeader = /ply([\\s\\S]*)end_header\\r?\\n/;\n      let headerText = \"\";\n      let headerLength = 0;\n      const result = patternHeader.exec(data2);\n      if (result !== null) {\n        headerText = result[1];\n        headerLength = new Blob([result[0]]).size;\n      }\n      const header = {\n        comments: [],\n        elements: [],\n        headerLength,\n        objInfo: \"\"\n      };\n      const lines = headerText.split(\"\\n\");\n      let currentElement;\n      function make_ply_element_property(propertValues, propertyNameMapping) {\n        const property = {\n          type: propertValues[0]\n        };\n        if (property.type === \"list\") {\n          property.name = propertValues[3];\n          property.countType = propertValues[1];\n          property.itemType = propertValues[2];\n        } else {\n          property.name = propertValues[1];\n        }\n        if (property.name in propertyNameMapping) {\n          property.name = propertyNameMapping[property.name];\n        }\n        return property;\n      }\n      for (let i = 0; i < lines.length; i++) {\n        let line = lines[i];\n        line = line.trim();\n        if (line === \"\") continue;\n        const lineValues = line.split(/\\s+/);\n        const lineType = lineValues.shift();\n        line = lineValues.join(\" \");\n        switch (lineType) {\n          case \"format\":\n            header.format = lineValues[0];\n            header.version = lineValues[1];\n            break;\n          case \"comment\":\n            header.comments.push(line);\n            break;\n          case \"element\":\n            if (currentElement !== void 0) {\n              header.elements.push(currentElement);\n            }\n            currentElement = {};\n            currentElement.name = lineValues[0];\n            currentElement.count = parseInt(lineValues[1]);\n            currentElement.properties = [];\n            break;\n          case \"property\":\n            currentElement.properties.push(make_ply_element_property(lineValues, scope.propertyNameMapping));\n            break;\n          case \"obj_info\":\n            header.objInfo = line;\n            break;\n          default:\n            console.log(\"unhandled\", lineType, lineValues);\n        }\n      }\n      if (currentElement !== void 0) {\n        header.elements.push(currentElement);\n      }\n      return header;\n    }\n    function parseASCIINumber(n, type) {\n      switch (type) {\n        case \"char\":\n        case \"uchar\":\n        case \"short\":\n        case \"ushort\":\n        case \"int\":\n        case \"uint\":\n        case \"int8\":\n        case \"uint8\":\n        case \"int16\":\n        case \"uint16\":\n        case \"int32\":\n        case \"uint32\":\n          return parseInt(n);\n        case \"float\":\n        case \"double\":\n        case \"float32\":\n        case \"float64\":\n          return parseFloat(n);\n      }\n    }\n    function parseASCIIElement(properties, line) {\n      const values = line.split(/\\s+/);\n      const element = {};\n      for (let i = 0; i < properties.length; i++) {\n        if (properties[i].type === \"list\") {\n          const list = [];\n          const n = parseASCIINumber(values.shift(), properties[i].countType);\n          for (let j = 0; j < n; j++) {\n            list.push(parseASCIINumber(values.shift(), properties[i].itemType));\n          }\n          element[properties[i].name] = list;\n        } else {\n          element[properties[i].name] = parseASCIINumber(values.shift(), properties[i].type);\n        }\n      }\n      return element;\n    }\n    function parseASCII(data2, header) {\n      const buffer = {\n        indices: [],\n        vertices: [],\n        normals: [],\n        uvs: [],\n        faceVertexUvs: [],\n        colors: []\n      };\n      let result;\n      const patternBody = /end_header\\s([\\s\\S]*)$/;\n      let body = \"\";\n      if ((result = patternBody.exec(data2)) !== null) {\n        body = result[1];\n      }\n      const lines = body.split(\"\\n\");\n      let currentElement = 0;\n      let currentElementCount = 0;\n      for (let i = 0; i < lines.length; i++) {\n        let line = lines[i];\n        line = line.trim();\n        if (line === \"\") {\n          continue;\n        }\n        if (currentElementCount >= header.elements[currentElement].count) {\n          currentElement++;\n          currentElementCount = 0;\n        }\n        const element = parseASCIIElement(header.elements[currentElement].properties, line);\n        handleElement(buffer, header.elements[currentElement].name, element);\n        currentElementCount++;\n      }\n      return postProcess(buffer);\n    }\n    function postProcess(buffer) {\n      let geometry2 = new BufferGeometry();\n      if (buffer.indices.length > 0) {\n        geometry2.setIndex(buffer.indices);\n      }\n      geometry2.setAttribute(\"position\", new Float32BufferAttribute(buffer.vertices, 3));\n      if (buffer.normals.length > 0) {\n        geometry2.setAttribute(\"normal\", new Float32BufferAttribute(buffer.normals, 3));\n      }\n      if (buffer.uvs.length > 0) {\n        geometry2.setAttribute(\"uv\", new Float32BufferAttribute(buffer.uvs, 2));\n      }\n      if (buffer.colors.length > 0) {\n        geometry2.setAttribute(\"color\", new Float32BufferAttribute(buffer.colors, 3));\n      }\n      if (buffer.faceVertexUvs.length > 0) {\n        geometry2 = geometry2.toNonIndexed();\n        geometry2.setAttribute(\"uv\", new Float32BufferAttribute(buffer.faceVertexUvs, 2));\n      }\n      geometry2.computeBoundingSphere();\n      return geometry2;\n    }\n    function handleElement(buffer, elementName, element) {\n      if (elementName === \"vertex\") {\n        buffer.vertices.push(element.x, element.y, element.z);\n        if (\"nx\" in element && \"ny\" in element && \"nz\" in element) {\n          buffer.normals.push(element.nx, element.ny, element.nz);\n        }\n        if (\"s\" in element && \"t\" in element) {\n          buffer.uvs.push(element.s, element.t);\n        }\n        if (\"red\" in element && \"green\" in element && \"blue\" in element) {\n          buffer.colors.push(element.red / 255, element.green / 255, element.blue / 255);\n        }\n      } else if (elementName === \"face\") {\n        const vertex_indices = element.vertex_indices || element.vertex_index;\n        const texcoord = element.texcoord;\n        if (vertex_indices.length === 3) {\n          buffer.indices.push(vertex_indices[0], vertex_indices[1], vertex_indices[2]);\n          if (texcoord && texcoord.length === 6) {\n            buffer.faceVertexUvs.push(texcoord[0], texcoord[1]);\n            buffer.faceVertexUvs.push(texcoord[2], texcoord[3]);\n            buffer.faceVertexUvs.push(texcoord[4], texcoord[5]);\n          }\n        } else if (vertex_indices.length === 4) {\n          buffer.indices.push(vertex_indices[0], vertex_indices[1], vertex_indices[3]);\n          buffer.indices.push(vertex_indices[1], vertex_indices[2], vertex_indices[3]);\n        }\n      }\n    }\n    function binaryRead(dataview, at, type, little_endian) {\n      switch (type) {\n        case \"int8\":\n        case \"char\":\n          return [dataview.getInt8(at), 1];\n        case \"uint8\":\n        case \"uchar\":\n          return [dataview.getUint8(at), 1];\n        case \"int16\":\n        case \"short\":\n          return [dataview.getInt16(at, little_endian), 2];\n        case \"uint16\":\n        case \"ushort\":\n          return [dataview.getUint16(at, little_endian), 2];\n        case \"int32\":\n        case \"int\":\n          return [dataview.getInt32(at, little_endian), 4];\n        case \"uint32\":\n        case \"uint\":\n          return [dataview.getUint32(at, little_endian), 4];\n        case \"float32\":\n        case \"float\":\n          return [dataview.getFloat32(at, little_endian), 4];\n        case \"float64\":\n        case \"double\":\n          return [dataview.getFloat64(at, little_endian), 8];\n      }\n    }\n    function binaryReadElement(dataview, at, properties, little_endian) {\n      const element = {};\n      let result,\n        read = 0;\n      for (let i = 0; i < properties.length; i++) {\n        if (properties[i].type === \"list\") {\n          const list = [];\n          result = binaryRead(dataview, at + read, properties[i].countType, little_endian);\n          const n = result[0];\n          read += result[1];\n          for (let j = 0; j < n; j++) {\n            result = binaryRead(dataview, at + read, properties[i].itemType, little_endian);\n            list.push(result[0]);\n            read += result[1];\n          }\n          element[properties[i].name] = list;\n        } else {\n          result = binaryRead(dataview, at + read, properties[i].type, little_endian);\n          element[properties[i].name] = result[0];\n          read += result[1];\n        }\n      }\n      return [element, read];\n    }\n    function parseBinary(data2, header) {\n      const buffer = {\n        indices: [],\n        vertices: [],\n        normals: [],\n        uvs: [],\n        faceVertexUvs: [],\n        colors: []\n      };\n      const little_endian = header.format === \"binary_little_endian\";\n      const body = new DataView(data2, header.headerLength);\n      let result,\n        loc = 0;\n      for (let currentElement = 0; currentElement < header.elements.length; currentElement++) {\n        for (let currentElementCount = 0; currentElementCount < header.elements[currentElement].count; currentElementCount++) {\n          result = binaryReadElement(body, loc, header.elements[currentElement].properties, little_endian);\n          loc += result[1];\n          const element = result[0];\n          handleElement(buffer, header.elements[currentElement].name, element);\n        }\n      }\n      return postProcess(buffer);\n    }\n    let geometry;\n    const scope = this;\n    if (data instanceof ArrayBuffer) {\n      const text = LoaderUtils.decodeText(new Uint8Array(data));\n      const header = parseHeader(text);\n      geometry = header.format === \"ascii\" ? parseASCII(text, header) : parseBinary(data, header);\n    } else {\n      geometry = parseASCII(data, parseHeader(data));\n    }\n    return geometry;\n  }\n}\nexport { PLYLoader };","map":{"version":3,"names":["Loader","FileLoader","BufferGeometry","Float32BufferAttribute","LoaderUtils","PLYLoader","constructor","manager","propertyNameMapping","load","url","onLoad","onProgress","onError","scope","loader","setPath","path","setResponseType","setRequestHeader","requestHeader","setWithCredentials","withCredentials","text","parse","e","console","error","itemError","setPropertyNameMapping","mapping","data","parseHeader","data2","patternHeader","headerText","headerLength","result","exec","Blob","size","header","comments","elements","objInfo","lines","split","currentElement","make_ply_element_property","propertValues","property","type","name","countType","itemType","i","length","line","trim","lineValues","lineType","shift","join","format","version","push","count","parseInt","properties","log","parseASCIINumber","n","parseFloat","parseASCIIElement","values","element","list","j","parseASCII","buffer","indices","vertices","normals","uvs","faceVertexUvs","colors","patternBody","body","currentElementCount","handleElement","postProcess","geometry2","setIndex","setAttribute","toNonIndexed","computeBoundingSphere","elementName","x","y","z","nx","ny","nz","s","t","red","green","blue","vertex_indices","vertex_index","texcoord","binaryRead","dataview","at","little_endian","getInt8","getUint8","getInt16","getUint16","getInt32","getUint32","getFloat32","getFloat64","binaryReadElement","read","parseBinary","DataView","loc","geometry","ArrayBuffer","decodeText","Uint8Array"],"sources":["/home/krug/Coding/JavaScript/Websites/Personal/personal/node_modules/.pnpm/three-stdlib@2.23.7_three@0.151.3/node_modules/three-stdlib/loaders/PLYLoader.js"],"sourcesContent":["import { Loader, FileLoader, BufferGeometry, Float32BufferAttribute, LoaderUtils } from \"three\";\nclass PLYLoader extends Loader {\n  constructor(manager) {\n    super(manager);\n    this.propertyNameMapping = {};\n  }\n  load(url, onLoad, onProgress, onError) {\n    const scope = this;\n    const loader = new FileLoader(this.manager);\n    loader.setPath(this.path);\n    loader.setResponseType(\"arraybuffer\");\n    loader.setRequestHeader(this.requestHeader);\n    loader.setWithCredentials(this.withCredentials);\n    loader.load(\n      url,\n      function(text) {\n        try {\n          onLoad(scope.parse(text));\n        } catch (e) {\n          if (onError) {\n            onError(e);\n          } else {\n            console.error(e);\n          }\n          scope.manager.itemError(url);\n        }\n      },\n      onProgress,\n      onError\n    );\n  }\n  setPropertyNameMapping(mapping) {\n    this.propertyNameMapping = mapping;\n  }\n  parse(data) {\n    function parseHeader(data2) {\n      const patternHeader = /ply([\\s\\S]*)end_header\\r?\\n/;\n      let headerText = \"\";\n      let headerLength = 0;\n      const result = patternHeader.exec(data2);\n      if (result !== null) {\n        headerText = result[1];\n        headerLength = new Blob([result[0]]).size;\n      }\n      const header = {\n        comments: [],\n        elements: [],\n        headerLength,\n        objInfo: \"\"\n      };\n      const lines = headerText.split(\"\\n\");\n      let currentElement;\n      function make_ply_element_property(propertValues, propertyNameMapping) {\n        const property = { type: propertValues[0] };\n        if (property.type === \"list\") {\n          property.name = propertValues[3];\n          property.countType = propertValues[1];\n          property.itemType = propertValues[2];\n        } else {\n          property.name = propertValues[1];\n        }\n        if (property.name in propertyNameMapping) {\n          property.name = propertyNameMapping[property.name];\n        }\n        return property;\n      }\n      for (let i = 0; i < lines.length; i++) {\n        let line = lines[i];\n        line = line.trim();\n        if (line === \"\")\n          continue;\n        const lineValues = line.split(/\\s+/);\n        const lineType = lineValues.shift();\n        line = lineValues.join(\" \");\n        switch (lineType) {\n          case \"format\":\n            header.format = lineValues[0];\n            header.version = lineValues[1];\n            break;\n          case \"comment\":\n            header.comments.push(line);\n            break;\n          case \"element\":\n            if (currentElement !== void 0) {\n              header.elements.push(currentElement);\n            }\n            currentElement = {};\n            currentElement.name = lineValues[0];\n            currentElement.count = parseInt(lineValues[1]);\n            currentElement.properties = [];\n            break;\n          case \"property\":\n            currentElement.properties.push(make_ply_element_property(lineValues, scope.propertyNameMapping));\n            break;\n          case \"obj_info\":\n            header.objInfo = line;\n            break;\n          default:\n            console.log(\"unhandled\", lineType, lineValues);\n        }\n      }\n      if (currentElement !== void 0) {\n        header.elements.push(currentElement);\n      }\n      return header;\n    }\n    function parseASCIINumber(n, type) {\n      switch (type) {\n        case \"char\":\n        case \"uchar\":\n        case \"short\":\n        case \"ushort\":\n        case \"int\":\n        case \"uint\":\n        case \"int8\":\n        case \"uint8\":\n        case \"int16\":\n        case \"uint16\":\n        case \"int32\":\n        case \"uint32\":\n          return parseInt(n);\n        case \"float\":\n        case \"double\":\n        case \"float32\":\n        case \"float64\":\n          return parseFloat(n);\n      }\n    }\n    function parseASCIIElement(properties, line) {\n      const values = line.split(/\\s+/);\n      const element = {};\n      for (let i = 0; i < properties.length; i++) {\n        if (properties[i].type === \"list\") {\n          const list = [];\n          const n = parseASCIINumber(values.shift(), properties[i].countType);\n          for (let j = 0; j < n; j++) {\n            list.push(parseASCIINumber(values.shift(), properties[i].itemType));\n          }\n          element[properties[i].name] = list;\n        } else {\n          element[properties[i].name] = parseASCIINumber(values.shift(), properties[i].type);\n        }\n      }\n      return element;\n    }\n    function parseASCII(data2, header) {\n      const buffer = {\n        indices: [],\n        vertices: [],\n        normals: [],\n        uvs: [],\n        faceVertexUvs: [],\n        colors: []\n      };\n      let result;\n      const patternBody = /end_header\\s([\\s\\S]*)$/;\n      let body = \"\";\n      if ((result = patternBody.exec(data2)) !== null) {\n        body = result[1];\n      }\n      const lines = body.split(\"\\n\");\n      let currentElement = 0;\n      let currentElementCount = 0;\n      for (let i = 0; i < lines.length; i++) {\n        let line = lines[i];\n        line = line.trim();\n        if (line === \"\") {\n          continue;\n        }\n        if (currentElementCount >= header.elements[currentElement].count) {\n          currentElement++;\n          currentElementCount = 0;\n        }\n        const element = parseASCIIElement(header.elements[currentElement].properties, line);\n        handleElement(buffer, header.elements[currentElement].name, element);\n        currentElementCount++;\n      }\n      return postProcess(buffer);\n    }\n    function postProcess(buffer) {\n      let geometry2 = new BufferGeometry();\n      if (buffer.indices.length > 0) {\n        geometry2.setIndex(buffer.indices);\n      }\n      geometry2.setAttribute(\"position\", new Float32BufferAttribute(buffer.vertices, 3));\n      if (buffer.normals.length > 0) {\n        geometry2.setAttribute(\"normal\", new Float32BufferAttribute(buffer.normals, 3));\n      }\n      if (buffer.uvs.length > 0) {\n        geometry2.setAttribute(\"uv\", new Float32BufferAttribute(buffer.uvs, 2));\n      }\n      if (buffer.colors.length > 0) {\n        geometry2.setAttribute(\"color\", new Float32BufferAttribute(buffer.colors, 3));\n      }\n      if (buffer.faceVertexUvs.length > 0) {\n        geometry2 = geometry2.toNonIndexed();\n        geometry2.setAttribute(\"uv\", new Float32BufferAttribute(buffer.faceVertexUvs, 2));\n      }\n      geometry2.computeBoundingSphere();\n      return geometry2;\n    }\n    function handleElement(buffer, elementName, element) {\n      if (elementName === \"vertex\") {\n        buffer.vertices.push(element.x, element.y, element.z);\n        if (\"nx\" in element && \"ny\" in element && \"nz\" in element) {\n          buffer.normals.push(element.nx, element.ny, element.nz);\n        }\n        if (\"s\" in element && \"t\" in element) {\n          buffer.uvs.push(element.s, element.t);\n        }\n        if (\"red\" in element && \"green\" in element && \"blue\" in element) {\n          buffer.colors.push(element.red / 255, element.green / 255, element.blue / 255);\n        }\n      } else if (elementName === \"face\") {\n        const vertex_indices = element.vertex_indices || element.vertex_index;\n        const texcoord = element.texcoord;\n        if (vertex_indices.length === 3) {\n          buffer.indices.push(vertex_indices[0], vertex_indices[1], vertex_indices[2]);\n          if (texcoord && texcoord.length === 6) {\n            buffer.faceVertexUvs.push(texcoord[0], texcoord[1]);\n            buffer.faceVertexUvs.push(texcoord[2], texcoord[3]);\n            buffer.faceVertexUvs.push(texcoord[4], texcoord[5]);\n          }\n        } else if (vertex_indices.length === 4) {\n          buffer.indices.push(vertex_indices[0], vertex_indices[1], vertex_indices[3]);\n          buffer.indices.push(vertex_indices[1], vertex_indices[2], vertex_indices[3]);\n        }\n      }\n    }\n    function binaryRead(dataview, at, type, little_endian) {\n      switch (type) {\n        case \"int8\":\n        case \"char\":\n          return [dataview.getInt8(at), 1];\n        case \"uint8\":\n        case \"uchar\":\n          return [dataview.getUint8(at), 1];\n        case \"int16\":\n        case \"short\":\n          return [dataview.getInt16(at, little_endian), 2];\n        case \"uint16\":\n        case \"ushort\":\n          return [dataview.getUint16(at, little_endian), 2];\n        case \"int32\":\n        case \"int\":\n          return [dataview.getInt32(at, little_endian), 4];\n        case \"uint32\":\n        case \"uint\":\n          return [dataview.getUint32(at, little_endian), 4];\n        case \"float32\":\n        case \"float\":\n          return [dataview.getFloat32(at, little_endian), 4];\n        case \"float64\":\n        case \"double\":\n          return [dataview.getFloat64(at, little_endian), 8];\n      }\n    }\n    function binaryReadElement(dataview, at, properties, little_endian) {\n      const element = {};\n      let result, read = 0;\n      for (let i = 0; i < properties.length; i++) {\n        if (properties[i].type === \"list\") {\n          const list = [];\n          result = binaryRead(dataview, at + read, properties[i].countType, little_endian);\n          const n = result[0];\n          read += result[1];\n          for (let j = 0; j < n; j++) {\n            result = binaryRead(dataview, at + read, properties[i].itemType, little_endian);\n            list.push(result[0]);\n            read += result[1];\n          }\n          element[properties[i].name] = list;\n        } else {\n          result = binaryRead(dataview, at + read, properties[i].type, little_endian);\n          element[properties[i].name] = result[0];\n          read += result[1];\n        }\n      }\n      return [element, read];\n    }\n    function parseBinary(data2, header) {\n      const buffer = {\n        indices: [],\n        vertices: [],\n        normals: [],\n        uvs: [],\n        faceVertexUvs: [],\n        colors: []\n      };\n      const little_endian = header.format === \"binary_little_endian\";\n      const body = new DataView(data2, header.headerLength);\n      let result, loc = 0;\n      for (let currentElement = 0; currentElement < header.elements.length; currentElement++) {\n        for (let currentElementCount = 0; currentElementCount < header.elements[currentElement].count; currentElementCount++) {\n          result = binaryReadElement(body, loc, header.elements[currentElement].properties, little_endian);\n          loc += result[1];\n          const element = result[0];\n          handleElement(buffer, header.elements[currentElement].name, element);\n        }\n      }\n      return postProcess(buffer);\n    }\n    let geometry;\n    const scope = this;\n    if (data instanceof ArrayBuffer) {\n      const text = LoaderUtils.decodeText(new Uint8Array(data));\n      const header = parseHeader(text);\n      geometry = header.format === \"ascii\" ? parseASCII(text, header) : parseBinary(data, header);\n    } else {\n      geometry = parseASCII(data, parseHeader(data));\n    }\n    return geometry;\n  }\n}\nexport {\n  PLYLoader\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}