{"ast":null,"code":"import _classCallCheck from \"/home/krug/Coding/JavaScript/Websites/Personal/personal/node_modules/.pnpm/@babel+runtime@7.22.3/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/home/krug/Coding/JavaScript/Websites/Personal/personal/node_modules/.pnpm/@babel+runtime@7.22.3/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _assertThisInitialized from \"/home/krug/Coding/JavaScript/Websites/Personal/personal/node_modules/.pnpm/@babel+runtime@7.22.3/node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js\";\nimport _inherits from \"/home/krug/Coding/JavaScript/Websites/Personal/personal/node_modules/.pnpm/@babel+runtime@7.22.3/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/home/krug/Coding/JavaScript/Websites/Personal/personal/node_modules/.pnpm/@babel+runtime@7.22.3/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nvar __defProp = Object.defineProperty;\nvar __defNormalProp = function __defNormalProp(obj, key, value) {\n  return key in obj ? __defProp(obj, key, {\n    enumerable: true,\n    configurable: true,\n    writable: true,\n    value: value\n  }) : obj[key] = value;\n};\nvar __publicField = function __publicField(obj, key, value) {\n  __defNormalProp(obj, typeof key !== \"symbol\" ? key + \"\" : key, value);\n  return value;\n};\nimport { Pass, FullScreenQuad } from \"./Pass.js\";\nimport { Vector2, Color, WebGLRenderTarget, MeshDepthMaterial, DoubleSide, RGBADepthPacking, NoBlending, UniformsUtils, ShaderMaterial, Matrix4, Vector3, AdditiveBlending } from \"three\";\nimport { CopyShader } from \"../shaders/CopyShader.js\";\nvar OutlinePass = /*#__PURE__*/function (_Pass) {\n  _inherits(OutlinePass, _Pass);\n  var _super = _createSuper(OutlinePass);\n  function OutlinePass(resolution, scene, camera, selectedObjects) {\n    var _this;\n    _classCallCheck(this, OutlinePass);\n    _this = _super.call(this);\n    __publicField(_assertThisInitialized(_this), \"renderScene\");\n    __publicField(_assertThisInitialized(_this), \"renderCamera\");\n    __publicField(_assertThisInitialized(_this), \"selectedObjects\");\n    __publicField(_assertThisInitialized(_this), \"visibleEdgeColor\");\n    __publicField(_assertThisInitialized(_this), \"hiddenEdgeColor\");\n    __publicField(_assertThisInitialized(_this), \"edgeGlow\");\n    __publicField(_assertThisInitialized(_this), \"usePatternTexture\");\n    __publicField(_assertThisInitialized(_this), \"edgeThickness\");\n    __publicField(_assertThisInitialized(_this), \"edgeStrength\");\n    __publicField(_assertThisInitialized(_this), \"downSampleRatio\");\n    __publicField(_assertThisInitialized(_this), \"pulsePeriod\");\n    __publicField(_assertThisInitialized(_this), \"resolution\");\n    __publicField(_assertThisInitialized(_this), \"renderTargetMaskBuffer\");\n    __publicField(_assertThisInitialized(_this), \"depthMaterial\");\n    __publicField(_assertThisInitialized(_this), \"prepareMaskMaterial\");\n    __publicField(_assertThisInitialized(_this), \"renderTargetDepthBuffer\");\n    __publicField(_assertThisInitialized(_this), \"renderTargetMaskDownSampleBuffer\");\n    __publicField(_assertThisInitialized(_this), \"renderTargetBlurBuffer1\");\n    __publicField(_assertThisInitialized(_this), \"renderTargetBlurBuffer2\");\n    __publicField(_assertThisInitialized(_this), \"edgeDetectionMaterial\");\n    __publicField(_assertThisInitialized(_this), \"renderTargetEdgeBuffer1\");\n    __publicField(_assertThisInitialized(_this), \"renderTargetEdgeBuffer2\");\n    __publicField(_assertThisInitialized(_this), \"separableBlurMaterial1\");\n    __publicField(_assertThisInitialized(_this), \"separableBlurMaterial2\");\n    __publicField(_assertThisInitialized(_this), \"overlayMaterial\");\n    __publicField(_assertThisInitialized(_this), \"materialCopy\");\n    __publicField(_assertThisInitialized(_this), \"oldClearAlpha\");\n    __publicField(_assertThisInitialized(_this), \"fsQuad\");\n    __publicField(_assertThisInitialized(_this), \"tempPulseColor1\");\n    __publicField(_assertThisInitialized(_this), \"tempPulseColor2\");\n    __publicField(_assertThisInitialized(_this), \"textureMatrix\");\n    __publicField(_assertThisInitialized(_this), \"patternTexture\");\n    __publicField(_assertThisInitialized(_this), \"_visibilityCache\");\n    __publicField(_assertThisInitialized(_this), \"_oldClearColor\");\n    __publicField(_assertThisInitialized(_this), \"copyUniforms\");\n    __publicField(_assertThisInitialized(_this), \"BlurDirectionX\", new Vector2(1, 0));\n    __publicField(_assertThisInitialized(_this), \"BlurDirectionY\", new Vector2(0, 1));\n    _this.renderScene = scene;\n    _this.renderCamera = camera;\n    _this.selectedObjects = selectedObjects !== void 0 ? selectedObjects : [];\n    _this.visibleEdgeColor = new Color(1, 1, 1);\n    _this.hiddenEdgeColor = new Color(0.1, 0.04, 0.02);\n    _this.edgeGlow = 0;\n    _this.usePatternTexture = false;\n    _this.edgeThickness = 1;\n    _this.edgeStrength = 3;\n    _this.downSampleRatio = 2;\n    _this.pulsePeriod = 0;\n    _this._visibilityCache = /* @__PURE__ */new Map();\n    _this.resolution = resolution !== void 0 ? new Vector2(resolution.x, resolution.y) : new Vector2(256, 256);\n    var resx = Math.round(_this.resolution.x / _this.downSampleRatio);\n    var resy = Math.round(_this.resolution.y / _this.downSampleRatio);\n    _this.renderTargetMaskBuffer = new WebGLRenderTarget(_this.resolution.x, _this.resolution.y);\n    _this.renderTargetMaskBuffer.texture.name = \"OutlinePass.mask\";\n    _this.renderTargetMaskBuffer.texture.generateMipmaps = false;\n    _this.depthMaterial = new MeshDepthMaterial();\n    _this.depthMaterial.side = DoubleSide;\n    _this.depthMaterial.depthPacking = RGBADepthPacking;\n    _this.depthMaterial.blending = NoBlending;\n    _this.prepareMaskMaterial = _this.getPrepareMaskMaterial();\n    _this.prepareMaskMaterial.side = DoubleSide;\n    _this.prepareMaskMaterial.fragmentShader = replaceDepthToViewZ(_this.prepareMaskMaterial.fragmentShader, _this.renderCamera);\n    _this.renderTargetDepthBuffer = new WebGLRenderTarget(_this.resolution.x, _this.resolution.y);\n    _this.renderTargetDepthBuffer.texture.name = \"OutlinePass.depth\";\n    _this.renderTargetDepthBuffer.texture.generateMipmaps = false;\n    _this.renderTargetMaskDownSampleBuffer = new WebGLRenderTarget(resx, resy);\n    _this.renderTargetMaskDownSampleBuffer.texture.name = \"OutlinePass.depthDownSample\";\n    _this.renderTargetMaskDownSampleBuffer.texture.generateMipmaps = false;\n    _this.renderTargetBlurBuffer1 = new WebGLRenderTarget(resx, resy);\n    _this.renderTargetBlurBuffer1.texture.name = \"OutlinePass.blur1\";\n    _this.renderTargetBlurBuffer1.texture.generateMipmaps = false;\n    _this.renderTargetBlurBuffer2 = new WebGLRenderTarget(Math.round(resx / 2), Math.round(resy / 2));\n    _this.renderTargetBlurBuffer2.texture.name = \"OutlinePass.blur2\";\n    _this.renderTargetBlurBuffer2.texture.generateMipmaps = false;\n    _this.edgeDetectionMaterial = _this.getEdgeDetectionMaterial();\n    _this.renderTargetEdgeBuffer1 = new WebGLRenderTarget(resx, resy);\n    _this.renderTargetEdgeBuffer1.texture.name = \"OutlinePass.edge1\";\n    _this.renderTargetEdgeBuffer1.texture.generateMipmaps = false;\n    _this.renderTargetEdgeBuffer2 = new WebGLRenderTarget(Math.round(resx / 2), Math.round(resy / 2));\n    _this.renderTargetEdgeBuffer2.texture.name = \"OutlinePass.edge2\";\n    _this.renderTargetEdgeBuffer2.texture.generateMipmaps = false;\n    var MAX_EDGE_THICKNESS = 4;\n    var MAX_EDGE_GLOW = 4;\n    _this.separableBlurMaterial1 = _this.getSeperableBlurMaterial(MAX_EDGE_THICKNESS);\n    _this.separableBlurMaterial1.uniforms[\"texSize\"].value.set(resx, resy);\n    _this.separableBlurMaterial1.uniforms[\"kernelRadius\"].value = 1;\n    _this.separableBlurMaterial2 = _this.getSeperableBlurMaterial(MAX_EDGE_GLOW);\n    _this.separableBlurMaterial2.uniforms[\"texSize\"].value.set(Math.round(resx / 2), Math.round(resy / 2));\n    _this.separableBlurMaterial2.uniforms[\"kernelRadius\"].value = MAX_EDGE_GLOW;\n    _this.overlayMaterial = _this.getOverlayMaterial();\n    if (CopyShader === void 0) console.error(\"THREE.OutlinePass relies on CopyShader\");\n    var copyShader = CopyShader;\n    _this.copyUniforms = UniformsUtils.clone(copyShader.uniforms);\n    _this.copyUniforms[\"opacity\"].value = 1;\n    _this.materialCopy = new ShaderMaterial({\n      uniforms: _this.copyUniforms,\n      vertexShader: copyShader.vertexShader,\n      fragmentShader: copyShader.fragmentShader,\n      blending: NoBlending,\n      depthTest: false,\n      depthWrite: false,\n      transparent: true\n    });\n    _this.enabled = true;\n    _this.needsSwap = false;\n    _this._oldClearColor = new Color();\n    _this.oldClearAlpha = 1;\n    _this.fsQuad = new FullScreenQuad(_this.materialCopy);\n    _this.tempPulseColor1 = new Color();\n    _this.tempPulseColor2 = new Color();\n    _this.textureMatrix = new Matrix4();\n    function replaceDepthToViewZ(string, camera2) {\n      var type = camera2.isPerspectiveCamera ? \"perspective\" : \"orthographic\";\n      return string.replace(/DEPTH_TO_VIEW_Z/g, type + \"DepthToViewZ\");\n    }\n    return _this;\n  }\n  _createClass(OutlinePass, [{\n    key: \"dispose\",\n    value: function dispose() {\n      this.renderTargetMaskBuffer.dispose();\n      this.renderTargetDepthBuffer.dispose();\n      this.renderTargetMaskDownSampleBuffer.dispose();\n      this.renderTargetBlurBuffer1.dispose();\n      this.renderTargetBlurBuffer2.dispose();\n      this.renderTargetEdgeBuffer1.dispose();\n      this.renderTargetEdgeBuffer2.dispose();\n    }\n  }, {\n    key: \"setSize\",\n    value: function setSize(width, height) {\n      this.renderTargetMaskBuffer.setSize(width, height);\n      this.renderTargetDepthBuffer.setSize(width, height);\n      var resx = Math.round(width / this.downSampleRatio);\n      var resy = Math.round(height / this.downSampleRatio);\n      this.renderTargetMaskDownSampleBuffer.setSize(resx, resy);\n      this.renderTargetBlurBuffer1.setSize(resx, resy);\n      this.renderTargetEdgeBuffer1.setSize(resx, resy);\n      this.separableBlurMaterial1.uniforms[\"texSize\"].value.set(resx, resy);\n      resx = Math.round(resx / 2);\n      resy = Math.round(resy / 2);\n      this.renderTargetBlurBuffer2.setSize(resx, resy);\n      this.renderTargetEdgeBuffer2.setSize(resx, resy);\n      this.separableBlurMaterial2.uniforms[\"texSize\"].value.set(resx, resy);\n    }\n  }, {\n    key: \"changeVisibilityOfSelectedObjects\",\n    value: function changeVisibilityOfSelectedObjects(bVisible) {\n      var cache = this._visibilityCache;\n      function gatherSelectedMeshesCallBack(object) {\n        if (object.isMesh) {\n          if (bVisible === true) {\n            object.visible = cache.get(object);\n          } else {\n            cache.set(object, object.visible);\n            object.visible = bVisible;\n          }\n        }\n      }\n      for (var i = 0; i < this.selectedObjects.length; i++) {\n        var selectedObject = this.selectedObjects[i];\n        selectedObject.traverse(gatherSelectedMeshesCallBack);\n      }\n    }\n  }, {\n    key: \"changeVisibilityOfNonSelectedObjects\",\n    value: function changeVisibilityOfNonSelectedObjects(bVisible) {\n      var cache = this._visibilityCache;\n      var selectedMeshes = [];\n      function gatherSelectedMeshesCallBack(object) {\n        if (object.isMesh) selectedMeshes.push(object);\n      }\n      for (var i = 0; i < this.selectedObjects.length; i++) {\n        var selectedObject = this.selectedObjects[i];\n        selectedObject.traverse(gatherSelectedMeshesCallBack);\n      }\n      function VisibilityChangeCallBack(object) {\n        if (object.isMesh || object.isSprite) {\n          var bFound = false;\n          for (var _i = 0; _i < selectedMeshes.length; _i++) {\n            var selectedObjectId = selectedMeshes[_i].id;\n            if (selectedObjectId === object.id) {\n              bFound = true;\n              break;\n            }\n          }\n          if (bFound === false) {\n            var visibility = object.visible;\n            if (bVisible === false || cache.get(object) === true) {\n              object.visible = bVisible;\n            }\n            cache.set(object, visibility);\n          }\n        } else if (object.isPoints || object.isLine) {\n          if (bVisible === true) {\n            object.visible = cache.get(object);\n          } else {\n            cache.set(object, object.visible);\n            object.visible = bVisible;\n          }\n        }\n      }\n      this.renderScene.traverse(VisibilityChangeCallBack);\n    }\n  }, {\n    key: \"updateTextureMatrix\",\n    value: function updateTextureMatrix() {\n      this.textureMatrix.set(0.5, 0, 0, 0.5, 0, 0.5, 0, 0.5, 0, 0, 0.5, 0.5, 0, 0, 0, 1);\n      this.textureMatrix.multiply(this.renderCamera.projectionMatrix);\n      this.textureMatrix.multiply(this.renderCamera.matrixWorldInverse);\n    }\n  }, {\n    key: \"render\",\n    value: function render(renderer, writeBuffer, readBuffer, deltaTime, maskActive) {\n      if (this.selectedObjects.length > 0) {\n        renderer.getClearColor(this._oldClearColor);\n        this.oldClearAlpha = renderer.getClearAlpha();\n        var oldAutoClear = renderer.autoClear;\n        renderer.autoClear = false;\n        if (maskActive) renderer.state.buffers.stencil.setTest(false);\n        renderer.setClearColor(16777215, 1);\n        this.changeVisibilityOfSelectedObjects(false);\n        var currentBackground = this.renderScene.background;\n        this.renderScene.background = null;\n        this.renderScene.overrideMaterial = this.depthMaterial;\n        renderer.setRenderTarget(this.renderTargetDepthBuffer);\n        renderer.clear();\n        renderer.render(this.renderScene, this.renderCamera);\n        this.changeVisibilityOfSelectedObjects(true);\n        this._visibilityCache.clear();\n        this.updateTextureMatrix();\n        this.changeVisibilityOfNonSelectedObjects(false);\n        this.renderScene.overrideMaterial = this.prepareMaskMaterial;\n        this.prepareMaskMaterial.uniforms[\"cameraNearFar\"].value.set(this.renderCamera.near, this.renderCamera.far);\n        this.prepareMaskMaterial.uniforms[\"depthTexture\"].value = this.renderTargetDepthBuffer.texture;\n        this.prepareMaskMaterial.uniforms[\"textureMatrix\"].value = this.textureMatrix;\n        renderer.setRenderTarget(this.renderTargetMaskBuffer);\n        renderer.clear();\n        renderer.render(this.renderScene, this.renderCamera);\n        this.renderScene.overrideMaterial = null;\n        this.changeVisibilityOfNonSelectedObjects(true);\n        this._visibilityCache.clear();\n        this.renderScene.background = currentBackground;\n        this.fsQuad.material = this.materialCopy;\n        this.copyUniforms[\"tDiffuse\"].value = this.renderTargetMaskBuffer.texture;\n        renderer.setRenderTarget(this.renderTargetMaskDownSampleBuffer);\n        renderer.clear();\n        this.fsQuad.render(renderer);\n        this.tempPulseColor1.copy(this.visibleEdgeColor);\n        this.tempPulseColor2.copy(this.hiddenEdgeColor);\n        if (this.pulsePeriod > 0) {\n          var scalar = (1 + 0.25) / 2 + Math.cos(performance.now() * 0.01 / this.pulsePeriod) * (1 - 0.25) / 2;\n          this.tempPulseColor1.multiplyScalar(scalar);\n          this.tempPulseColor2.multiplyScalar(scalar);\n        }\n        this.fsQuad.material = this.edgeDetectionMaterial;\n        this.edgeDetectionMaterial.uniforms[\"maskTexture\"].value = this.renderTargetMaskDownSampleBuffer.texture;\n        this.edgeDetectionMaterial.uniforms[\"texSize\"].value.set(this.renderTargetMaskDownSampleBuffer.width, this.renderTargetMaskDownSampleBuffer.height);\n        this.edgeDetectionMaterial.uniforms[\"visibleEdgeColor\"].value = this.tempPulseColor1;\n        this.edgeDetectionMaterial.uniforms[\"hiddenEdgeColor\"].value = this.tempPulseColor2;\n        renderer.setRenderTarget(this.renderTargetEdgeBuffer1);\n        renderer.clear();\n        this.fsQuad.render(renderer);\n        this.fsQuad.material = this.separableBlurMaterial1;\n        this.separableBlurMaterial1.uniforms[\"colorTexture\"].value = this.renderTargetEdgeBuffer1.texture;\n        this.separableBlurMaterial1.uniforms[\"direction\"].value = this.BlurDirectionX;\n        this.separableBlurMaterial1.uniforms[\"kernelRadius\"].value = this.edgeThickness;\n        renderer.setRenderTarget(this.renderTargetBlurBuffer1);\n        renderer.clear();\n        this.fsQuad.render(renderer);\n        this.separableBlurMaterial1.uniforms[\"colorTexture\"].value = this.renderTargetBlurBuffer1.texture;\n        this.separableBlurMaterial1.uniforms[\"direction\"].value = this.BlurDirectionY;\n        renderer.setRenderTarget(this.renderTargetEdgeBuffer1);\n        renderer.clear();\n        this.fsQuad.render(renderer);\n        this.fsQuad.material = this.separableBlurMaterial2;\n        this.separableBlurMaterial2.uniforms[\"colorTexture\"].value = this.renderTargetEdgeBuffer1.texture;\n        this.separableBlurMaterial2.uniforms[\"direction\"].value = this.BlurDirectionX;\n        renderer.setRenderTarget(this.renderTargetBlurBuffer2);\n        renderer.clear();\n        this.fsQuad.render(renderer);\n        this.separableBlurMaterial2.uniforms[\"colorTexture\"].value = this.renderTargetBlurBuffer2.texture;\n        this.separableBlurMaterial2.uniforms[\"direction\"].value = this.BlurDirectionY;\n        renderer.setRenderTarget(this.renderTargetEdgeBuffer2);\n        renderer.clear();\n        this.fsQuad.render(renderer);\n        this.fsQuad.material = this.overlayMaterial;\n        this.overlayMaterial.uniforms[\"maskTexture\"].value = this.renderTargetMaskBuffer.texture;\n        this.overlayMaterial.uniforms[\"edgeTexture1\"].value = this.renderTargetEdgeBuffer1.texture;\n        this.overlayMaterial.uniforms[\"edgeTexture2\"].value = this.renderTargetEdgeBuffer2.texture;\n        this.overlayMaterial.uniforms[\"patternTexture\"].value = this.patternTexture;\n        this.overlayMaterial.uniforms[\"edgeStrength\"].value = this.edgeStrength;\n        this.overlayMaterial.uniforms[\"edgeGlow\"].value = this.edgeGlow;\n        this.overlayMaterial.uniforms[\"usePatternTexture\"].value = this.usePatternTexture;\n        if (maskActive) renderer.state.buffers.stencil.setTest(true);\n        renderer.setRenderTarget(readBuffer);\n        this.fsQuad.render(renderer);\n        renderer.setClearColor(this._oldClearColor, this.oldClearAlpha);\n        renderer.autoClear = oldAutoClear;\n      }\n      if (this.renderToScreen) {\n        this.fsQuad.material = this.materialCopy;\n        this.copyUniforms[\"tDiffuse\"].value = readBuffer.texture;\n        renderer.setRenderTarget(null);\n        this.fsQuad.render(renderer);\n      }\n    }\n  }, {\n    key: \"getPrepareMaskMaterial\",\n    value: function getPrepareMaskMaterial() {\n      return new ShaderMaterial({\n        uniforms: {\n          depthTexture: {\n            value: null\n          },\n          cameraNearFar: {\n            value: new Vector2(0.5, 0.5)\n          },\n          textureMatrix: {\n            value: null\n          }\n        },\n        vertexShader: \"#include <morphtarget_pars_vertex>\\n\\t\\t\\t\\t#include <skinning_pars_vertex>\\n\\t\\t\\t\\tvarying vec4 projTexCoord;\\n\\t\\t\\t\\tvarying vec4 vPosition;\\n\\t\\t\\t\\tuniform mat4 textureMatrix;\\n\\t\\t\\t\\tvoid main() {\\n\\t\\t\\t\\t\\t#include <skinbase_vertex>\\n\\t\\t\\t\\t\\t#include <begin_vertex>\\n\\t\\t\\t\\t\\t#include <morphtarget_vertex>\\n\\t\\t\\t\\t\\t#include <skinning_vertex>\\n\\t\\t\\t\\t\\t#include <project_vertex>\\n\\t\\t\\t\\t\\tvPosition = mvPosition;\\n\\t\\t\\t\\t\\tvec4 worldPosition = modelMatrix * vec4( transformed, 1.0 );\\n\\t\\t\\t\\t\\tprojTexCoord = textureMatrix * worldPosition;\\n\\t\\t\\t\\t}\",\n        fragmentShader: \"#include <packing>\\n\\t\\t\\t\\tvarying vec4 vPosition;\\n\\t\\t\\t\\tvarying vec4 projTexCoord;\\n\\t\\t\\t\\tuniform sampler2D depthTexture;\\n\\t\\t\\t\\tuniform vec2 cameraNearFar;\\n\\t\\t\\t\\tvoid main() {\\n\\t\\t\\t\\t\\tfloat depth = unpackRGBAToDepth(texture2DProj( depthTexture, projTexCoord ));\\n\\t\\t\\t\\t\\tfloat viewZ = - DEPTH_TO_VIEW_Z( depth, cameraNearFar.x, cameraNearFar.y );\\n\\t\\t\\t\\t\\tfloat depthTest = (-vPosition.z > viewZ) ? 1.0 : 0.0;\\n\\t\\t\\t\\t\\tgl_FragColor = vec4(0.0, depthTest, 1.0, 1.0);\\n\\t\\t\\t\\t}\"\n      });\n    }\n  }, {\n    key: \"getEdgeDetectionMaterial\",\n    value: function getEdgeDetectionMaterial() {\n      return new ShaderMaterial({\n        uniforms: {\n          maskTexture: {\n            value: null\n          },\n          texSize: {\n            value: new Vector2(0.5, 0.5)\n          },\n          visibleEdgeColor: {\n            value: new Vector3(1, 1, 1)\n          },\n          hiddenEdgeColor: {\n            value: new Vector3(1, 1, 1)\n          }\n        },\n        vertexShader: \"varying vec2 vUv;\\n\\t\\t\\t\\tvoid main() {\\n\\t\\t\\t\\t\\tvUv = uv;\\n\\t\\t\\t\\t\\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\\n\\t\\t\\t\\t}\",\n        fragmentShader: \"varying vec2 vUv;\\n\\t\\t\\t\\tuniform sampler2D maskTexture;\\n\\t\\t\\t\\tuniform vec2 texSize;\\n\\t\\t\\t\\tuniform vec3 visibleEdgeColor;\\n\\t\\t\\t\\tuniform vec3 hiddenEdgeColor;\\n\\t\\t\\t\\tvoid main() {\\n\\t\\t\\t\\t\\tvec2 invSize = 1.0 / texSize;\\n\\t\\t\\t\\t\\tvec4 uvOffset = vec4(1.0, 0.0, 0.0, 1.0) * vec4(invSize, invSize);\\n\\t\\t\\t\\t\\tvec4 c1 = texture2D( maskTexture, vUv + uvOffset.xy);\\n\\t\\t\\t\\t\\tvec4 c2 = texture2D( maskTexture, vUv - uvOffset.xy);\\n\\t\\t\\t\\t\\tvec4 c3 = texture2D( maskTexture, vUv + uvOffset.yw);\\n\\t\\t\\t\\t\\tvec4 c4 = texture2D( maskTexture, vUv - uvOffset.yw);\\n\\t\\t\\t\\t\\tfloat diff1 = (c1.r - c2.r)*0.5;\\n\\t\\t\\t\\t\\tfloat diff2 = (c3.r - c4.r)*0.5;\\n\\t\\t\\t\\t\\tfloat d = length( vec2(diff1, diff2) );\\n\\t\\t\\t\\t\\tfloat a1 = min(c1.g, c2.g);\\n\\t\\t\\t\\t\\tfloat a2 = min(c3.g, c4.g);\\n\\t\\t\\t\\t\\tfloat visibilityFactor = min(a1, a2);\\n\\t\\t\\t\\t\\tvec3 edgeColor = 1.0 - visibilityFactor > 0.001 ? visibleEdgeColor : hiddenEdgeColor;\\n\\t\\t\\t\\t\\tgl_FragColor = vec4(edgeColor, 1.0) * vec4(d);\\n\\t\\t\\t\\t}\"\n      });\n    }\n  }, {\n    key: \"getSeperableBlurMaterial\",\n    value: function getSeperableBlurMaterial(maxRadius) {\n      return new ShaderMaterial({\n        defines: {\n          MAX_RADIUS: maxRadius\n        },\n        uniforms: {\n          colorTexture: {\n            value: null\n          },\n          texSize: {\n            value: new Vector2(0.5, 0.5)\n          },\n          direction: {\n            value: new Vector2(0.5, 0.5)\n          },\n          kernelRadius: {\n            value: 1\n          }\n        },\n        vertexShader: \"varying vec2 vUv;\\n\\t\\t\\t\\tvoid main() {\\n\\t\\t\\t\\t\\tvUv = uv;\\n\\t\\t\\t\\t\\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\\n\\t\\t\\t\\t}\",\n        fragmentShader: \"#include <common>\\n\\t\\t\\t\\tvarying vec2 vUv;\\n\\t\\t\\t\\tuniform sampler2D colorTexture;\\n\\t\\t\\t\\tuniform vec2 texSize;\\n\\t\\t\\t\\tuniform vec2 direction;\\n\\t\\t\\t\\tuniform float kernelRadius;\\n\\t\\t\\t\\tfloat gaussianPdf(in float x, in float sigma) {\\n\\t\\t\\t\\t\\treturn 0.39894 * exp( -0.5 * x * x/( sigma * sigma))/sigma;\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tvoid main() {\\n\\t\\t\\t\\t\\tvec2 invSize = 1.0 / texSize;\\n\\t\\t\\t\\t\\tfloat weightSum = gaussianPdf(0.0, kernelRadius);\\n\\t\\t\\t\\t\\tvec4 diffuseSum = texture2D( colorTexture, vUv) * weightSum;\\n\\t\\t\\t\\t\\tvec2 delta = direction * invSize * kernelRadius/float(MAX_RADIUS);\\n\\t\\t\\t\\t\\tvec2 uvOffset = delta;\\n\\t\\t\\t\\t\\tfor( int i = 1; i <= MAX_RADIUS; i ++ ) {\\n\\t\\t\\t\\t\\t\\tfloat w = gaussianPdf(uvOffset.x, kernelRadius);\\n\\t\\t\\t\\t\\t\\tvec4 sample1 = texture2D( colorTexture, vUv + uvOffset);\\n\\t\\t\\t\\t\\t\\tvec4 sample2 = texture2D( colorTexture, vUv - uvOffset);\\n\\t\\t\\t\\t\\t\\tdiffuseSum += ((sample1 + sample2) * w);\\n\\t\\t\\t\\t\\t\\tweightSum += (2.0 * w);\\n\\t\\t\\t\\t\\t\\tuvOffset += delta;\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\tgl_FragColor = diffuseSum/weightSum;\\n\\t\\t\\t\\t}\"\n      });\n    }\n  }, {\n    key: \"getOverlayMaterial\",\n    value: function getOverlayMaterial() {\n      return new ShaderMaterial({\n        uniforms: {\n          maskTexture: {\n            value: null\n          },\n          edgeTexture1: {\n            value: null\n          },\n          edgeTexture2: {\n            value: null\n          },\n          patternTexture: {\n            value: null\n          },\n          edgeStrength: {\n            value: 1\n          },\n          edgeGlow: {\n            value: 1\n          },\n          usePatternTexture: {\n            value: 0\n          }\n        },\n        vertexShader: \"varying vec2 vUv;\\n\\t\\t\\t\\tvoid main() {\\n\\t\\t\\t\\t\\tvUv = uv;\\n\\t\\t\\t\\t\\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\\n\\t\\t\\t\\t}\",\n        fragmentShader: \"varying vec2 vUv;\\n\\t\\t\\t\\tuniform sampler2D maskTexture;\\n\\t\\t\\t\\tuniform sampler2D edgeTexture1;\\n\\t\\t\\t\\tuniform sampler2D edgeTexture2;\\n\\t\\t\\t\\tuniform sampler2D patternTexture;\\n\\t\\t\\t\\tuniform float edgeStrength;\\n\\t\\t\\t\\tuniform float edgeGlow;\\n\\t\\t\\t\\tuniform bool usePatternTexture;\\n\\t\\t\\t\\tvoid main() {\\n\\t\\t\\t\\t\\tvec4 edgeValue1 = texture2D(edgeTexture1, vUv);\\n\\t\\t\\t\\t\\tvec4 edgeValue2 = texture2D(edgeTexture2, vUv);\\n\\t\\t\\t\\t\\tvec4 maskColor = texture2D(maskTexture, vUv);\\n\\t\\t\\t\\t\\tvec4 patternColor = texture2D(patternTexture, 6.0 * vUv);\\n\\t\\t\\t\\t\\tfloat visibilityFactor = 1.0 - maskColor.g > 0.0 ? 1.0 : 0.5;\\n\\t\\t\\t\\t\\tvec4 edgeValue = edgeValue1 + edgeValue2 * edgeGlow;\\n\\t\\t\\t\\t\\tvec4 finalColor = edgeStrength * maskColor.r * edgeValue;\\n\\t\\t\\t\\t\\tif(usePatternTexture)\\n\\t\\t\\t\\t\\t\\tfinalColor += + visibilityFactor * (1.0 - maskColor.r) * (1.0 - patternColor.r);\\n\\t\\t\\t\\t\\tgl_FragColor = finalColor;\\n\\t\\t\\t\\t}\",\n        blending: AdditiveBlending,\n        depthTest: false,\n        depthWrite: false,\n        transparent: true\n      });\n    }\n  }]);\n  return OutlinePass;\n}(Pass);\nexport { OutlinePass };","map":{"version":3,"names":["__defProp","Object","defineProperty","__defNormalProp","obj","key","value","enumerable","configurable","writable","__publicField","Pass","FullScreenQuad","Vector2","Color","WebGLRenderTarget","MeshDepthMaterial","DoubleSide","RGBADepthPacking","NoBlending","UniformsUtils","ShaderMaterial","Matrix4","Vector3","AdditiveBlending","CopyShader","OutlinePass","_Pass","_inherits","_super","_createSuper","resolution","scene","camera","selectedObjects","_this","_classCallCheck","call","_assertThisInitialized","renderScene","renderCamera","visibleEdgeColor","hiddenEdgeColor","edgeGlow","usePatternTexture","edgeThickness","edgeStrength","downSampleRatio","pulsePeriod","_visibilityCache","Map","x","y","resx","Math","round","resy","renderTargetMaskBuffer","texture","name","generateMipmaps","depthMaterial","side","depthPacking","blending","prepareMaskMaterial","getPrepareMaskMaterial","fragmentShader","replaceDepthToViewZ","renderTargetDepthBuffer","renderTargetMaskDownSampleBuffer","renderTargetBlurBuffer1","renderTargetBlurBuffer2","edgeDetectionMaterial","getEdgeDetectionMaterial","renderTargetEdgeBuffer1","renderTargetEdgeBuffer2","MAX_EDGE_THICKNESS","MAX_EDGE_GLOW","separableBlurMaterial1","getSeperableBlurMaterial","uniforms","set","separableBlurMaterial2","overlayMaterial","getOverlayMaterial","console","error","copyShader","copyUniforms","clone","materialCopy","vertexShader","depthTest","depthWrite","transparent","enabled","needsSwap","_oldClearColor","oldClearAlpha","fsQuad","tempPulseColor1","tempPulseColor2","textureMatrix","string","camera2","type","isPerspectiveCamera","replace","_createClass","dispose","setSize","width","height","changeVisibilityOfSelectedObjects","bVisible","cache","gatherSelectedMeshesCallBack","object","isMesh","visible","get","i","length","selectedObject","traverse","changeVisibilityOfNonSelectedObjects","selectedMeshes","push","VisibilityChangeCallBack","isSprite","bFound","selectedObjectId","id","visibility","isPoints","isLine","updateTextureMatrix","multiply","projectionMatrix","matrixWorldInverse","render","renderer","writeBuffer","readBuffer","deltaTime","maskActive","getClearColor","getClearAlpha","oldAutoClear","autoClear","state","buffers","stencil","setTest","setClearColor","currentBackground","background","overrideMaterial","setRenderTarget","clear","near","far","material","copy","scalar","cos","performance","now","multiplyScalar","BlurDirectionX","BlurDirectionY","patternTexture","renderToScreen","depthTexture","cameraNearFar","maskTexture","texSize","maxRadius","defines","MAX_RADIUS","colorTexture","direction","kernelRadius","edgeTexture1","edgeTexture2"],"sources":["/home/krug/Coding/JavaScript/Websites/Personal/personal/node_modules/.pnpm/three-stdlib@2.23.7_three@0.151.3/node_modules/three-stdlib/postprocessing/OutlinePass.js"],"sourcesContent":["var __defProp = Object.defineProperty;\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;\nvar __publicField = (obj, key, value) => {\n  __defNormalProp(obj, typeof key !== \"symbol\" ? key + \"\" : key, value);\n  return value;\n};\nimport { Pass, FullScreenQuad } from \"./Pass.js\";\nimport { Vector2, Color, WebGLRenderTarget, MeshDepthMaterial, DoubleSide, RGBADepthPacking, NoBlending, UniformsUtils, ShaderMaterial, Matrix4, Vector3, AdditiveBlending } from \"three\";\nimport { CopyShader } from \"../shaders/CopyShader.js\";\nclass OutlinePass extends Pass {\n  constructor(resolution, scene, camera, selectedObjects) {\n    super();\n    __publicField(this, \"renderScene\");\n    __publicField(this, \"renderCamera\");\n    __publicField(this, \"selectedObjects\");\n    __publicField(this, \"visibleEdgeColor\");\n    __publicField(this, \"hiddenEdgeColor\");\n    __publicField(this, \"edgeGlow\");\n    __publicField(this, \"usePatternTexture\");\n    __publicField(this, \"edgeThickness\");\n    __publicField(this, \"edgeStrength\");\n    __publicField(this, \"downSampleRatio\");\n    __publicField(this, \"pulsePeriod\");\n    __publicField(this, \"resolution\");\n    __publicField(this, \"renderTargetMaskBuffer\");\n    __publicField(this, \"depthMaterial\");\n    __publicField(this, \"prepareMaskMaterial\");\n    __publicField(this, \"renderTargetDepthBuffer\");\n    __publicField(this, \"renderTargetMaskDownSampleBuffer\");\n    __publicField(this, \"renderTargetBlurBuffer1\");\n    __publicField(this, \"renderTargetBlurBuffer2\");\n    __publicField(this, \"edgeDetectionMaterial\");\n    __publicField(this, \"renderTargetEdgeBuffer1\");\n    __publicField(this, \"renderTargetEdgeBuffer2\");\n    __publicField(this, \"separableBlurMaterial1\");\n    __publicField(this, \"separableBlurMaterial2\");\n    __publicField(this, \"overlayMaterial\");\n    __publicField(this, \"materialCopy\");\n    __publicField(this, \"oldClearAlpha\");\n    __publicField(this, \"fsQuad\");\n    __publicField(this, \"tempPulseColor1\");\n    __publicField(this, \"tempPulseColor2\");\n    __publicField(this, \"textureMatrix\");\n    __publicField(this, \"patternTexture\");\n    __publicField(this, \"_visibilityCache\");\n    __publicField(this, \"_oldClearColor\");\n    __publicField(this, \"copyUniforms\");\n    __publicField(this, \"BlurDirectionX\", new Vector2(1, 0));\n    __publicField(this, \"BlurDirectionY\", new Vector2(0, 1));\n    this.renderScene = scene;\n    this.renderCamera = camera;\n    this.selectedObjects = selectedObjects !== void 0 ? selectedObjects : [];\n    this.visibleEdgeColor = new Color(1, 1, 1);\n    this.hiddenEdgeColor = new Color(0.1, 0.04, 0.02);\n    this.edgeGlow = 0;\n    this.usePatternTexture = false;\n    this.edgeThickness = 1;\n    this.edgeStrength = 3;\n    this.downSampleRatio = 2;\n    this.pulsePeriod = 0;\n    this._visibilityCache = /* @__PURE__ */ new Map();\n    this.resolution = resolution !== void 0 ? new Vector2(resolution.x, resolution.y) : new Vector2(256, 256);\n    const resx = Math.round(this.resolution.x / this.downSampleRatio);\n    const resy = Math.round(this.resolution.y / this.downSampleRatio);\n    this.renderTargetMaskBuffer = new WebGLRenderTarget(this.resolution.x, this.resolution.y);\n    this.renderTargetMaskBuffer.texture.name = \"OutlinePass.mask\";\n    this.renderTargetMaskBuffer.texture.generateMipmaps = false;\n    this.depthMaterial = new MeshDepthMaterial();\n    this.depthMaterial.side = DoubleSide;\n    this.depthMaterial.depthPacking = RGBADepthPacking;\n    this.depthMaterial.blending = NoBlending;\n    this.prepareMaskMaterial = this.getPrepareMaskMaterial();\n    this.prepareMaskMaterial.side = DoubleSide;\n    this.prepareMaskMaterial.fragmentShader = replaceDepthToViewZ(\n      this.prepareMaskMaterial.fragmentShader,\n      this.renderCamera\n    );\n    this.renderTargetDepthBuffer = new WebGLRenderTarget(this.resolution.x, this.resolution.y);\n    this.renderTargetDepthBuffer.texture.name = \"OutlinePass.depth\";\n    this.renderTargetDepthBuffer.texture.generateMipmaps = false;\n    this.renderTargetMaskDownSampleBuffer = new WebGLRenderTarget(resx, resy);\n    this.renderTargetMaskDownSampleBuffer.texture.name = \"OutlinePass.depthDownSample\";\n    this.renderTargetMaskDownSampleBuffer.texture.generateMipmaps = false;\n    this.renderTargetBlurBuffer1 = new WebGLRenderTarget(resx, resy);\n    this.renderTargetBlurBuffer1.texture.name = \"OutlinePass.blur1\";\n    this.renderTargetBlurBuffer1.texture.generateMipmaps = false;\n    this.renderTargetBlurBuffer2 = new WebGLRenderTarget(Math.round(resx / 2), Math.round(resy / 2));\n    this.renderTargetBlurBuffer2.texture.name = \"OutlinePass.blur2\";\n    this.renderTargetBlurBuffer2.texture.generateMipmaps = false;\n    this.edgeDetectionMaterial = this.getEdgeDetectionMaterial();\n    this.renderTargetEdgeBuffer1 = new WebGLRenderTarget(resx, resy);\n    this.renderTargetEdgeBuffer1.texture.name = \"OutlinePass.edge1\";\n    this.renderTargetEdgeBuffer1.texture.generateMipmaps = false;\n    this.renderTargetEdgeBuffer2 = new WebGLRenderTarget(Math.round(resx / 2), Math.round(resy / 2));\n    this.renderTargetEdgeBuffer2.texture.name = \"OutlinePass.edge2\";\n    this.renderTargetEdgeBuffer2.texture.generateMipmaps = false;\n    const MAX_EDGE_THICKNESS = 4;\n    const MAX_EDGE_GLOW = 4;\n    this.separableBlurMaterial1 = this.getSeperableBlurMaterial(MAX_EDGE_THICKNESS);\n    this.separableBlurMaterial1.uniforms[\"texSize\"].value.set(resx, resy);\n    this.separableBlurMaterial1.uniforms[\"kernelRadius\"].value = 1;\n    this.separableBlurMaterial2 = this.getSeperableBlurMaterial(MAX_EDGE_GLOW);\n    this.separableBlurMaterial2.uniforms[\"texSize\"].value.set(Math.round(resx / 2), Math.round(resy / 2));\n    this.separableBlurMaterial2.uniforms[\"kernelRadius\"].value = MAX_EDGE_GLOW;\n    this.overlayMaterial = this.getOverlayMaterial();\n    if (CopyShader === void 0)\n      console.error(\"THREE.OutlinePass relies on CopyShader\");\n    const copyShader = CopyShader;\n    this.copyUniforms = UniformsUtils.clone(copyShader.uniforms);\n    this.copyUniforms[\"opacity\"].value = 1;\n    this.materialCopy = new ShaderMaterial({\n      uniforms: this.copyUniforms,\n      vertexShader: copyShader.vertexShader,\n      fragmentShader: copyShader.fragmentShader,\n      blending: NoBlending,\n      depthTest: false,\n      depthWrite: false,\n      transparent: true\n    });\n    this.enabled = true;\n    this.needsSwap = false;\n    this._oldClearColor = new Color();\n    this.oldClearAlpha = 1;\n    this.fsQuad = new FullScreenQuad(this.materialCopy);\n    this.tempPulseColor1 = new Color();\n    this.tempPulseColor2 = new Color();\n    this.textureMatrix = new Matrix4();\n    function replaceDepthToViewZ(string, camera2) {\n      const type = camera2.isPerspectiveCamera ? \"perspective\" : \"orthographic\";\n      return string.replace(/DEPTH_TO_VIEW_Z/g, type + \"DepthToViewZ\");\n    }\n  }\n  dispose() {\n    this.renderTargetMaskBuffer.dispose();\n    this.renderTargetDepthBuffer.dispose();\n    this.renderTargetMaskDownSampleBuffer.dispose();\n    this.renderTargetBlurBuffer1.dispose();\n    this.renderTargetBlurBuffer2.dispose();\n    this.renderTargetEdgeBuffer1.dispose();\n    this.renderTargetEdgeBuffer2.dispose();\n  }\n  setSize(width, height) {\n    this.renderTargetMaskBuffer.setSize(width, height);\n    this.renderTargetDepthBuffer.setSize(width, height);\n    let resx = Math.round(width / this.downSampleRatio);\n    let resy = Math.round(height / this.downSampleRatio);\n    this.renderTargetMaskDownSampleBuffer.setSize(resx, resy);\n    this.renderTargetBlurBuffer1.setSize(resx, resy);\n    this.renderTargetEdgeBuffer1.setSize(resx, resy);\n    this.separableBlurMaterial1.uniforms[\"texSize\"].value.set(resx, resy);\n    resx = Math.round(resx / 2);\n    resy = Math.round(resy / 2);\n    this.renderTargetBlurBuffer2.setSize(resx, resy);\n    this.renderTargetEdgeBuffer2.setSize(resx, resy);\n    this.separableBlurMaterial2.uniforms[\"texSize\"].value.set(resx, resy);\n  }\n  changeVisibilityOfSelectedObjects(bVisible) {\n    const cache = this._visibilityCache;\n    function gatherSelectedMeshesCallBack(object) {\n      if (object.isMesh) {\n        if (bVisible === true) {\n          object.visible = cache.get(object);\n        } else {\n          cache.set(object, object.visible);\n          object.visible = bVisible;\n        }\n      }\n    }\n    for (let i = 0; i < this.selectedObjects.length; i++) {\n      const selectedObject = this.selectedObjects[i];\n      selectedObject.traverse(gatherSelectedMeshesCallBack);\n    }\n  }\n  changeVisibilityOfNonSelectedObjects(bVisible) {\n    const cache = this._visibilityCache;\n    const selectedMeshes = [];\n    function gatherSelectedMeshesCallBack(object) {\n      if (object.isMesh)\n        selectedMeshes.push(object);\n    }\n    for (let i = 0; i < this.selectedObjects.length; i++) {\n      const selectedObject = this.selectedObjects[i];\n      selectedObject.traverse(gatherSelectedMeshesCallBack);\n    }\n    function VisibilityChangeCallBack(object) {\n      if (object.isMesh || object.isSprite) {\n        let bFound = false;\n        for (let i = 0; i < selectedMeshes.length; i++) {\n          const selectedObjectId = selectedMeshes[i].id;\n          if (selectedObjectId === object.id) {\n            bFound = true;\n            break;\n          }\n        }\n        if (bFound === false) {\n          const visibility = object.visible;\n          if (bVisible === false || cache.get(object) === true) {\n            object.visible = bVisible;\n          }\n          cache.set(object, visibility);\n        }\n      } else if (object.isPoints || object.isLine) {\n        if (bVisible === true) {\n          object.visible = cache.get(object);\n        } else {\n          cache.set(object, object.visible);\n          object.visible = bVisible;\n        }\n      }\n    }\n    this.renderScene.traverse(VisibilityChangeCallBack);\n  }\n  updateTextureMatrix() {\n    this.textureMatrix.set(0.5, 0, 0, 0.5, 0, 0.5, 0, 0.5, 0, 0, 0.5, 0.5, 0, 0, 0, 1);\n    this.textureMatrix.multiply(this.renderCamera.projectionMatrix);\n    this.textureMatrix.multiply(this.renderCamera.matrixWorldInverse);\n  }\n  render(renderer, writeBuffer, readBuffer, deltaTime, maskActive) {\n    if (this.selectedObjects.length > 0) {\n      renderer.getClearColor(this._oldClearColor);\n      this.oldClearAlpha = renderer.getClearAlpha();\n      const oldAutoClear = renderer.autoClear;\n      renderer.autoClear = false;\n      if (maskActive)\n        renderer.state.buffers.stencil.setTest(false);\n      renderer.setClearColor(16777215, 1);\n      this.changeVisibilityOfSelectedObjects(false);\n      const currentBackground = this.renderScene.background;\n      this.renderScene.background = null;\n      this.renderScene.overrideMaterial = this.depthMaterial;\n      renderer.setRenderTarget(this.renderTargetDepthBuffer);\n      renderer.clear();\n      renderer.render(this.renderScene, this.renderCamera);\n      this.changeVisibilityOfSelectedObjects(true);\n      this._visibilityCache.clear();\n      this.updateTextureMatrix();\n      this.changeVisibilityOfNonSelectedObjects(false);\n      this.renderScene.overrideMaterial = this.prepareMaskMaterial;\n      this.prepareMaskMaterial.uniforms[\"cameraNearFar\"].value.set(\n        this.renderCamera.near,\n        this.renderCamera.far\n      );\n      this.prepareMaskMaterial.uniforms[\"depthTexture\"].value = this.renderTargetDepthBuffer.texture;\n      this.prepareMaskMaterial.uniforms[\"textureMatrix\"].value = this.textureMatrix;\n      renderer.setRenderTarget(this.renderTargetMaskBuffer);\n      renderer.clear();\n      renderer.render(this.renderScene, this.renderCamera);\n      this.renderScene.overrideMaterial = null;\n      this.changeVisibilityOfNonSelectedObjects(true);\n      this._visibilityCache.clear();\n      this.renderScene.background = currentBackground;\n      this.fsQuad.material = this.materialCopy;\n      this.copyUniforms[\"tDiffuse\"].value = this.renderTargetMaskBuffer.texture;\n      renderer.setRenderTarget(this.renderTargetMaskDownSampleBuffer);\n      renderer.clear();\n      this.fsQuad.render(renderer);\n      this.tempPulseColor1.copy(this.visibleEdgeColor);\n      this.tempPulseColor2.copy(this.hiddenEdgeColor);\n      if (this.pulsePeriod > 0) {\n        const scalar = (1 + 0.25) / 2 + Math.cos(performance.now() * 0.01 / this.pulsePeriod) * (1 - 0.25) / 2;\n        this.tempPulseColor1.multiplyScalar(scalar);\n        this.tempPulseColor2.multiplyScalar(scalar);\n      }\n      this.fsQuad.material = this.edgeDetectionMaterial;\n      this.edgeDetectionMaterial.uniforms[\"maskTexture\"].value = this.renderTargetMaskDownSampleBuffer.texture;\n      this.edgeDetectionMaterial.uniforms[\"texSize\"].value.set(\n        this.renderTargetMaskDownSampleBuffer.width,\n        this.renderTargetMaskDownSampleBuffer.height\n      );\n      this.edgeDetectionMaterial.uniforms[\"visibleEdgeColor\"].value = this.tempPulseColor1;\n      this.edgeDetectionMaterial.uniforms[\"hiddenEdgeColor\"].value = this.tempPulseColor2;\n      renderer.setRenderTarget(this.renderTargetEdgeBuffer1);\n      renderer.clear();\n      this.fsQuad.render(renderer);\n      this.fsQuad.material = this.separableBlurMaterial1;\n      this.separableBlurMaterial1.uniforms[\"colorTexture\"].value = this.renderTargetEdgeBuffer1.texture;\n      this.separableBlurMaterial1.uniforms[\"direction\"].value = this.BlurDirectionX;\n      this.separableBlurMaterial1.uniforms[\"kernelRadius\"].value = this.edgeThickness;\n      renderer.setRenderTarget(this.renderTargetBlurBuffer1);\n      renderer.clear();\n      this.fsQuad.render(renderer);\n      this.separableBlurMaterial1.uniforms[\"colorTexture\"].value = this.renderTargetBlurBuffer1.texture;\n      this.separableBlurMaterial1.uniforms[\"direction\"].value = this.BlurDirectionY;\n      renderer.setRenderTarget(this.renderTargetEdgeBuffer1);\n      renderer.clear();\n      this.fsQuad.render(renderer);\n      this.fsQuad.material = this.separableBlurMaterial2;\n      this.separableBlurMaterial2.uniforms[\"colorTexture\"].value = this.renderTargetEdgeBuffer1.texture;\n      this.separableBlurMaterial2.uniforms[\"direction\"].value = this.BlurDirectionX;\n      renderer.setRenderTarget(this.renderTargetBlurBuffer2);\n      renderer.clear();\n      this.fsQuad.render(renderer);\n      this.separableBlurMaterial2.uniforms[\"colorTexture\"].value = this.renderTargetBlurBuffer2.texture;\n      this.separableBlurMaterial2.uniforms[\"direction\"].value = this.BlurDirectionY;\n      renderer.setRenderTarget(this.renderTargetEdgeBuffer2);\n      renderer.clear();\n      this.fsQuad.render(renderer);\n      this.fsQuad.material = this.overlayMaterial;\n      this.overlayMaterial.uniforms[\"maskTexture\"].value = this.renderTargetMaskBuffer.texture;\n      this.overlayMaterial.uniforms[\"edgeTexture1\"].value = this.renderTargetEdgeBuffer1.texture;\n      this.overlayMaterial.uniforms[\"edgeTexture2\"].value = this.renderTargetEdgeBuffer2.texture;\n      this.overlayMaterial.uniforms[\"patternTexture\"].value = this.patternTexture;\n      this.overlayMaterial.uniforms[\"edgeStrength\"].value = this.edgeStrength;\n      this.overlayMaterial.uniforms[\"edgeGlow\"].value = this.edgeGlow;\n      this.overlayMaterial.uniforms[\"usePatternTexture\"].value = this.usePatternTexture;\n      if (maskActive)\n        renderer.state.buffers.stencil.setTest(true);\n      renderer.setRenderTarget(readBuffer);\n      this.fsQuad.render(renderer);\n      renderer.setClearColor(this._oldClearColor, this.oldClearAlpha);\n      renderer.autoClear = oldAutoClear;\n    }\n    if (this.renderToScreen) {\n      this.fsQuad.material = this.materialCopy;\n      this.copyUniforms[\"tDiffuse\"].value = readBuffer.texture;\n      renderer.setRenderTarget(null);\n      this.fsQuad.render(renderer);\n    }\n  }\n  getPrepareMaskMaterial() {\n    return new ShaderMaterial({\n      uniforms: {\n        depthTexture: { value: null },\n        cameraNearFar: { value: new Vector2(0.5, 0.5) },\n        textureMatrix: { value: null }\n      },\n      vertexShader: `#include <morphtarget_pars_vertex>\n\t\t\t\t#include <skinning_pars_vertex>\n\t\t\t\tvarying vec4 projTexCoord;\n\t\t\t\tvarying vec4 vPosition;\n\t\t\t\tuniform mat4 textureMatrix;\n\t\t\t\tvoid main() {\n\t\t\t\t\t#include <skinbase_vertex>\n\t\t\t\t\t#include <begin_vertex>\n\t\t\t\t\t#include <morphtarget_vertex>\n\t\t\t\t\t#include <skinning_vertex>\n\t\t\t\t\t#include <project_vertex>\n\t\t\t\t\tvPosition = mvPosition;\n\t\t\t\t\tvec4 worldPosition = modelMatrix * vec4( transformed, 1.0 );\n\t\t\t\t\tprojTexCoord = textureMatrix * worldPosition;\n\t\t\t\t}`,\n      fragmentShader: `#include <packing>\n\t\t\t\tvarying vec4 vPosition;\n\t\t\t\tvarying vec4 projTexCoord;\n\t\t\t\tuniform sampler2D depthTexture;\n\t\t\t\tuniform vec2 cameraNearFar;\n\t\t\t\tvoid main() {\n\t\t\t\t\tfloat depth = unpackRGBAToDepth(texture2DProj( depthTexture, projTexCoord ));\n\t\t\t\t\tfloat viewZ = - DEPTH_TO_VIEW_Z( depth, cameraNearFar.x, cameraNearFar.y );\n\t\t\t\t\tfloat depthTest = (-vPosition.z > viewZ) ? 1.0 : 0.0;\n\t\t\t\t\tgl_FragColor = vec4(0.0, depthTest, 1.0, 1.0);\n\t\t\t\t}`\n    });\n  }\n  getEdgeDetectionMaterial() {\n    return new ShaderMaterial({\n      uniforms: {\n        maskTexture: { value: null },\n        texSize: { value: new Vector2(0.5, 0.5) },\n        visibleEdgeColor: { value: new Vector3(1, 1, 1) },\n        hiddenEdgeColor: { value: new Vector3(1, 1, 1) }\n      },\n      vertexShader: `varying vec2 vUv;\n\t\t\t\tvoid main() {\n\t\t\t\t\tvUv = uv;\n\t\t\t\t\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n\t\t\t\t}`,\n      fragmentShader: `varying vec2 vUv;\n\t\t\t\tuniform sampler2D maskTexture;\n\t\t\t\tuniform vec2 texSize;\n\t\t\t\tuniform vec3 visibleEdgeColor;\n\t\t\t\tuniform vec3 hiddenEdgeColor;\n\t\t\t\tvoid main() {\n\t\t\t\t\tvec2 invSize = 1.0 / texSize;\n\t\t\t\t\tvec4 uvOffset = vec4(1.0, 0.0, 0.0, 1.0) * vec4(invSize, invSize);\n\t\t\t\t\tvec4 c1 = texture2D( maskTexture, vUv + uvOffset.xy);\n\t\t\t\t\tvec4 c2 = texture2D( maskTexture, vUv - uvOffset.xy);\n\t\t\t\t\tvec4 c3 = texture2D( maskTexture, vUv + uvOffset.yw);\n\t\t\t\t\tvec4 c4 = texture2D( maskTexture, vUv - uvOffset.yw);\n\t\t\t\t\tfloat diff1 = (c1.r - c2.r)*0.5;\n\t\t\t\t\tfloat diff2 = (c3.r - c4.r)*0.5;\n\t\t\t\t\tfloat d = length( vec2(diff1, diff2) );\n\t\t\t\t\tfloat a1 = min(c1.g, c2.g);\n\t\t\t\t\tfloat a2 = min(c3.g, c4.g);\n\t\t\t\t\tfloat visibilityFactor = min(a1, a2);\n\t\t\t\t\tvec3 edgeColor = 1.0 - visibilityFactor > 0.001 ? visibleEdgeColor : hiddenEdgeColor;\n\t\t\t\t\tgl_FragColor = vec4(edgeColor, 1.0) * vec4(d);\n\t\t\t\t}`\n    });\n  }\n  getSeperableBlurMaterial(maxRadius) {\n    return new ShaderMaterial({\n      defines: {\n        MAX_RADIUS: maxRadius\n      },\n      uniforms: {\n        colorTexture: { value: null },\n        texSize: { value: new Vector2(0.5, 0.5) },\n        direction: { value: new Vector2(0.5, 0.5) },\n        kernelRadius: { value: 1 }\n      },\n      vertexShader: `varying vec2 vUv;\n\t\t\t\tvoid main() {\n\t\t\t\t\tvUv = uv;\n\t\t\t\t\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n\t\t\t\t}`,\n      fragmentShader: `#include <common>\n\t\t\t\tvarying vec2 vUv;\n\t\t\t\tuniform sampler2D colorTexture;\n\t\t\t\tuniform vec2 texSize;\n\t\t\t\tuniform vec2 direction;\n\t\t\t\tuniform float kernelRadius;\n\t\t\t\tfloat gaussianPdf(in float x, in float sigma) {\n\t\t\t\t\treturn 0.39894 * exp( -0.5 * x * x/( sigma * sigma))/sigma;\n\t\t\t\t}\n\t\t\t\tvoid main() {\n\t\t\t\t\tvec2 invSize = 1.0 / texSize;\n\t\t\t\t\tfloat weightSum = gaussianPdf(0.0, kernelRadius);\n\t\t\t\t\tvec4 diffuseSum = texture2D( colorTexture, vUv) * weightSum;\n\t\t\t\t\tvec2 delta = direction * invSize * kernelRadius/float(MAX_RADIUS);\n\t\t\t\t\tvec2 uvOffset = delta;\n\t\t\t\t\tfor( int i = 1; i <= MAX_RADIUS; i ++ ) {\n\t\t\t\t\t\tfloat w = gaussianPdf(uvOffset.x, kernelRadius);\n\t\t\t\t\t\tvec4 sample1 = texture2D( colorTexture, vUv + uvOffset);\n\t\t\t\t\t\tvec4 sample2 = texture2D( colorTexture, vUv - uvOffset);\n\t\t\t\t\t\tdiffuseSum += ((sample1 + sample2) * w);\n\t\t\t\t\t\tweightSum += (2.0 * w);\n\t\t\t\t\t\tuvOffset += delta;\n\t\t\t\t\t}\n\t\t\t\t\tgl_FragColor = diffuseSum/weightSum;\n\t\t\t\t}`\n    });\n  }\n  getOverlayMaterial() {\n    return new ShaderMaterial({\n      uniforms: {\n        maskTexture: { value: null },\n        edgeTexture1: { value: null },\n        edgeTexture2: { value: null },\n        patternTexture: { value: null },\n        edgeStrength: { value: 1 },\n        edgeGlow: { value: 1 },\n        usePatternTexture: { value: 0 }\n      },\n      vertexShader: `varying vec2 vUv;\n\t\t\t\tvoid main() {\n\t\t\t\t\tvUv = uv;\n\t\t\t\t\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n\t\t\t\t}`,\n      fragmentShader: `varying vec2 vUv;\n\t\t\t\tuniform sampler2D maskTexture;\n\t\t\t\tuniform sampler2D edgeTexture1;\n\t\t\t\tuniform sampler2D edgeTexture2;\n\t\t\t\tuniform sampler2D patternTexture;\n\t\t\t\tuniform float edgeStrength;\n\t\t\t\tuniform float edgeGlow;\n\t\t\t\tuniform bool usePatternTexture;\n\t\t\t\tvoid main() {\n\t\t\t\t\tvec4 edgeValue1 = texture2D(edgeTexture1, vUv);\n\t\t\t\t\tvec4 edgeValue2 = texture2D(edgeTexture2, vUv);\n\t\t\t\t\tvec4 maskColor = texture2D(maskTexture, vUv);\n\t\t\t\t\tvec4 patternColor = texture2D(patternTexture, 6.0 * vUv);\n\t\t\t\t\tfloat visibilityFactor = 1.0 - maskColor.g > 0.0 ? 1.0 : 0.5;\n\t\t\t\t\tvec4 edgeValue = edgeValue1 + edgeValue2 * edgeGlow;\n\t\t\t\t\tvec4 finalColor = edgeStrength * maskColor.r * edgeValue;\n\t\t\t\t\tif(usePatternTexture)\n\t\t\t\t\t\tfinalColor += + visibilityFactor * (1.0 - maskColor.r) * (1.0 - patternColor.r);\n\t\t\t\t\tgl_FragColor = finalColor;\n\t\t\t\t}`,\n      blending: AdditiveBlending,\n      depthTest: false,\n      depthWrite: false,\n      transparent: true\n    });\n  }\n}\nexport {\n  OutlinePass\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}