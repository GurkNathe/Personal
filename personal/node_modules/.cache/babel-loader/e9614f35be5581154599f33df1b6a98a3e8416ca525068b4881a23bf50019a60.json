{"ast":null,"code":"import _slicedToArray from \"/home/krug/Coding/JavaScript/Websites/Personal/personal/node_modules/.pnpm/@babel+runtime@7.22.3/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _classCallCheck from \"/home/krug/Coding/JavaScript/Websites/Personal/personal/node_modules/.pnpm/@babel+runtime@7.22.3/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/home/krug/Coding/JavaScript/Websites/Personal/personal/node_modules/.pnpm/@babel+runtime@7.22.3/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"/home/krug/Coding/JavaScript/Websites/Personal/personal/node_modules/.pnpm/@babel+runtime@7.22.3/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/home/krug/Coding/JavaScript/Websites/Personal/personal/node_modules/.pnpm/@babel+runtime@7.22.3/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { Loader, FileLoader, MeshStandardMaterial, Color, TextureLoader, Object3D, Matrix4, BufferGeometryLoader, DirectionalLight, PointLight, RectAreaLight, Vector3, SpotLight, CanvasTexture, LinearFilter, ClampToEdgeWrapping, SpriteMaterial, Sprite, LineBasicMaterial, Line, Mesh, PointsMaterial, Points } from \"three\";\nvar _taskCache = /* @__PURE__ */new WeakMap();\nvar Rhino3dmLoader = /*#__PURE__*/function (_Loader) {\n  _inherits(Rhino3dmLoader, _Loader);\n  var _super = _createSuper(Rhino3dmLoader);\n  function Rhino3dmLoader(manager) {\n    var _this;\n    _classCallCheck(this, Rhino3dmLoader);\n    _this = _super.call(this, manager);\n    _this.libraryPath = \"\";\n    _this.libraryPending = null;\n    _this.libraryBinary = null;\n    _this.libraryConfig = {};\n    _this.url = \"\";\n    _this.workerLimit = 4;\n    _this.workerPool = [];\n    _this.workerNextTaskID = 1;\n    _this.workerSourceURL = \"\";\n    _this.workerConfig = {};\n    _this.materials = [];\n    return _this;\n  }\n  _createClass(Rhino3dmLoader, [{\n    key: \"setLibraryPath\",\n    value: function setLibraryPath(path) {\n      this.libraryPath = path;\n      return this;\n    }\n  }, {\n    key: \"setWorkerLimit\",\n    value: function setWorkerLimit(workerLimit) {\n      this.workerLimit = workerLimit;\n      return this;\n    }\n  }, {\n    key: \"load\",\n    value: function load(url, onLoad, onProgress, onError) {\n      var _this2 = this;\n      var loader = new FileLoader(this.manager);\n      loader.setPath(this.path);\n      loader.setResponseType(\"arraybuffer\");\n      loader.setRequestHeader(this.requestHeader);\n      this.url = url;\n      loader.load(url, function (buffer) {\n        if (_taskCache.has(buffer)) {\n          var cachedTask = _taskCache.get(buffer);\n          return cachedTask.promise.then(onLoad).catch(onError);\n        }\n        _this2.decodeObjects(buffer, url).then(onLoad).catch(onError);\n      }, onProgress, onError);\n    }\n  }, {\n    key: \"debug\",\n    value: function debug() {\n      console.log(\"Task load: \", this.workerPool.map(function (worker) {\n        return worker._taskLoad;\n      }));\n    }\n  }, {\n    key: \"decodeObjects\",\n    value: function decodeObjects(buffer, url) {\n      var _this3 = this;\n      var worker;\n      var taskID;\n      var taskCost = buffer.byteLength;\n      var objectPending = this._getWorker(taskCost).then(function (_worker) {\n        worker = _worker;\n        taskID = _this3.workerNextTaskID++;\n        return new Promise(function (resolve, reject) {\n          worker._callbacks[taskID] = {\n            resolve: resolve,\n            reject: reject\n          };\n          worker.postMessage({\n            type: \"decode\",\n            id: taskID,\n            buffer: buffer\n          }, [buffer]);\n        });\n      }).then(function (message) {\n        return _this3._createGeometry(message.data);\n      });\n      objectPending.catch(function () {\n        return true;\n      }).then(function () {\n        if (worker && taskID) {\n          _this3._releaseTask(worker, taskID);\n        }\n      });\n      _taskCache.set(buffer, {\n        url: url,\n        promise: objectPending\n      });\n      return objectPending;\n    }\n  }, {\n    key: \"parse\",\n    value: function parse(data, onLoad, onError) {\n      this.decodeObjects(data, \"\").then(onLoad).catch(onError);\n    }\n  }, {\n    key: \"_compareMaterials\",\n    value: function _compareMaterials(material) {\n      var mat = {};\n      mat.name = material.name;\n      mat.color = {};\n      mat.color.r = material.color.r;\n      mat.color.g = material.color.g;\n      mat.color.b = material.color.b;\n      mat.type = material.type;\n      for (var i = 0; i < this.materials.length; i++) {\n        var m = this.materials[i];\n        var _mat = {};\n        _mat.name = m.name;\n        _mat.color = {};\n        _mat.color.r = m.color.r;\n        _mat.color.g = m.color.g;\n        _mat.color.b = m.color.b;\n        _mat.type = m.type;\n        if (JSON.stringify(mat) === JSON.stringify(_mat)) {\n          return m;\n        }\n      }\n      this.materials.push(material);\n      return material;\n    }\n  }, {\n    key: \"_createMaterial\",\n    value: function _createMaterial(material) {\n      if (material === void 0) {\n        return new MeshStandardMaterial({\n          color: new Color(1, 1, 1),\n          metalness: 0.8,\n          name: \"default\",\n          side: 2\n        });\n      }\n      var _diffuseColor = material.diffuseColor;\n      var diffusecolor = new Color(_diffuseColor.r / 255, _diffuseColor.g / 255, _diffuseColor.b / 255);\n      if (_diffuseColor.r === 0 && _diffuseColor.g === 0 && _diffuseColor.b === 0) {\n        diffusecolor.r = 1;\n        diffusecolor.g = 1;\n        diffusecolor.b = 1;\n      }\n      var mat = new MeshStandardMaterial({\n        color: diffusecolor,\n        name: material.name,\n        side: 2,\n        transparent: material.transparency > 0 ? true : false,\n        opacity: 1 - material.transparency\n      });\n      var textureLoader = new TextureLoader();\n      for (var i = 0; i < material.textures.length; i++) {\n        var texture = material.textures[i];\n        if (texture.image !== null) {\n          var map = textureLoader.load(texture.image);\n          switch (texture.type) {\n            case \"Diffuse\":\n              mat.map = map;\n              break;\n            case \"Bump\":\n              mat.bumpMap = map;\n              break;\n            case \"Transparency\":\n              mat.alphaMap = map;\n              mat.transparent = true;\n              break;\n            case \"Emap\":\n              mat.envMap = map;\n              break;\n          }\n        }\n      }\n      return mat;\n    }\n  }, {\n    key: \"_createGeometry\",\n    value: function _createGeometry(data) {\n      var object = new Object3D();\n      var instanceDefinitionObjects = [];\n      var instanceDefinitions = [];\n      var instanceReferences = [];\n      object.userData[\"layers\"] = data.layers;\n      object.userData[\"groups\"] = data.groups;\n      object.userData[\"settings\"] = data.settings;\n      object.userData[\"objectType\"] = \"File3dm\";\n      object.userData[\"materials\"] = null;\n      object.name = this.url;\n      var objects = data.objects;\n      var materials = data.materials;\n      for (var i = 0; i < objects.length; i++) {\n        var obj = objects[i];\n        var attributes = obj.attributes;\n        switch (obj.objectType) {\n          case \"InstanceDefinition\":\n            instanceDefinitions.push(obj);\n            break;\n          case \"InstanceReference\":\n            instanceReferences.push(obj);\n            break;\n          default:\n            var _object = void 0;\n            if (attributes.materialIndex >= 0) {\n              var rMaterial = materials[attributes.materialIndex];\n              var material = this._createMaterial(rMaterial);\n              material = this._compareMaterials(material);\n              _object = this._createObject(obj, material);\n            } else {\n              var _material2 = this._createMaterial();\n              _object = this._createObject(obj, _material2);\n            }\n            if (_object === void 0) {\n              continue;\n            }\n            var layer = data.layers[attributes.layerIndex];\n            _object.visible = layer ? data.layers[attributes.layerIndex].visible : true;\n            if (attributes.isInstanceDefinitionObject) {\n              instanceDefinitionObjects.push(_object);\n            } else {\n              object.add(_object);\n            }\n            break;\n        }\n      }\n      for (var _i = 0; _i < instanceDefinitions.length; _i++) {\n        var iDef = instanceDefinitions[_i];\n        objects = [];\n        for (var j = 0; j < iDef.attributes.objectIds.length; j++) {\n          var objId = iDef.attributes.objectIds[j];\n          for (var p = 0; p < instanceDefinitionObjects.length; p++) {\n            var idoId = instanceDefinitionObjects[p].userData.attributes.id;\n            if (objId === idoId) {\n              objects.push(instanceDefinitionObjects[p]);\n            }\n          }\n        }\n        for (var _j = 0; _j < instanceReferences.length; _j++) {\n          var iRef = instanceReferences[_j];\n          if (iRef.geometry.parentIdefId === iDef.attributes.id) {\n            var iRefObject = new Object3D();\n            var xf = iRef.geometry.xform.array;\n            var matrix = new Matrix4();\n            matrix.set(xf[0], xf[1], xf[2], xf[3], xf[4], xf[5], xf[6], xf[7], xf[8], xf[9], xf[10], xf[11], xf[12], xf[13], xf[14], xf[15]);\n            iRefObject.applyMatrix4(matrix);\n            for (var _p = 0; _p < objects.length; _p++) {\n              iRefObject.add(objects[_p].clone(true));\n            }\n            object.add(iRefObject);\n          }\n        }\n      }\n      object.userData[\"materials\"] = this.materials;\n      return object;\n    }\n  }, {\n    key: \"_createObject\",\n    value: function _createObject(obj, mat) {\n      var loader = new BufferGeometryLoader();\n      var attributes = obj.attributes;\n      var geometry, material, _color, color;\n      switch (obj.objectType) {\n        case \"Point\":\n        case \"PointSet\":\n          geometry = loader.parse(obj.geometry);\n          if (geometry.attributes.hasOwnProperty(\"color\")) {\n            material = new PointsMaterial({\n              vertexColors: true,\n              sizeAttenuation: false,\n              size: 2\n            });\n          } else {\n            _color = attributes.drawColor;\n            color = new Color(_color.r / 255, _color.g / 255, _color.b / 255);\n            material = new PointsMaterial({\n              color: color,\n              sizeAttenuation: false,\n              size: 2\n            });\n          }\n          material = this._compareMaterials(material);\n          var points = new Points(geometry, material);\n          points.userData[\"attributes\"] = attributes;\n          points.userData[\"objectType\"] = obj.objectType;\n          if (attributes.name) {\n            points.name = attributes.name;\n          }\n          return points;\n        case \"Mesh\":\n        case \"Extrusion\":\n        case \"SubD\":\n        case \"Brep\":\n          if (obj.geometry === null) return;\n          geometry = loader.parse(obj.geometry);\n          if (geometry.attributes.hasOwnProperty(\"color\")) {\n            mat.vertexColors = true;\n          }\n          if (mat === null) {\n            mat = this._createMaterial();\n            mat = this._compareMaterials(mat);\n          }\n          var mesh = new Mesh(geometry, mat);\n          mesh.castShadow = attributes.castsShadows;\n          mesh.receiveShadow = attributes.receivesShadows;\n          mesh.userData[\"attributes\"] = attributes;\n          mesh.userData[\"objectType\"] = obj.objectType;\n          if (attributes.name) {\n            mesh.name = attributes.name;\n          }\n          return mesh;\n        case \"Curve\":\n          geometry = loader.parse(obj.geometry);\n          _color = attributes.drawColor;\n          color = new Color(_color.r / 255, _color.g / 255, _color.b / 255);\n          material = new LineBasicMaterial({\n            color: color\n          });\n          material = this._compareMaterials(material);\n          var lines = new Line(geometry, material);\n          lines.userData[\"attributes\"] = attributes;\n          lines.userData[\"objectType\"] = obj.objectType;\n          if (attributes.name) {\n            lines.name = attributes.name;\n          }\n          return lines;\n        case \"TextDot\":\n          geometry = obj.geometry;\n          var ctx = document.createElement(\"canvas\").getContext(\"2d\");\n          var font = \"\".concat(geometry.fontHeight, \"px \").concat(geometry.fontFace);\n          ctx.font = font;\n          var width = ctx.measureText(geometry.text).width + 10;\n          var height = geometry.fontHeight + 10;\n          var r = window.devicePixelRatio;\n          ctx.canvas.width = width * r;\n          ctx.canvas.height = height * r;\n          ctx.canvas.style.width = width + \"px\";\n          ctx.canvas.style.height = height + \"px\";\n          ctx.setTransform(r, 0, 0, r, 0, 0);\n          ctx.font = font;\n          ctx.textBaseline = \"middle\";\n          ctx.textAlign = \"center\";\n          color = attributes.drawColor;\n          ctx.fillStyle = \"rgba(\".concat(color.r, \",\").concat(color.g, \",\").concat(color.b, \",\").concat(color.a, \")\");\n          ctx.fillRect(0, 0, width, height);\n          ctx.fillStyle = \"white\";\n          ctx.fillText(geometry.text, width / 2, height / 2);\n          var texture = new CanvasTexture(ctx.canvas);\n          texture.minFilter = LinearFilter;\n          texture.wrapS = ClampToEdgeWrapping;\n          texture.wrapT = ClampToEdgeWrapping;\n          material = new SpriteMaterial({\n            map: texture,\n            depthTest: false\n          });\n          var sprite = new Sprite(material);\n          sprite.position.set(geometry.point[0], geometry.point[1], geometry.point[2]);\n          sprite.scale.set(width / 10, height / 10, 1);\n          sprite.userData[\"attributes\"] = attributes;\n          sprite.userData[\"objectType\"] = obj.objectType;\n          if (attributes.name) {\n            sprite.name = attributes.name;\n          }\n          return sprite;\n        case \"Light\":\n          geometry = obj.geometry;\n          var light;\n          if (geometry.isDirectionalLight) {\n            light = new DirectionalLight();\n            light.castShadow = attributes.castsShadows;\n            light.position.set(geometry.location[0], geometry.location[1], geometry.location[2]);\n            light.target.position.set(geometry.direction[0], geometry.direction[1], geometry.direction[2]);\n            light.shadow.normalBias = 0.1;\n          } else if (geometry.isPointLight) {\n            light = new PointLight();\n            light.castShadow = attributes.castsShadows;\n            light.position.set(geometry.location[0], geometry.location[1], geometry.location[2]);\n            light.shadow.normalBias = 0.1;\n          } else if (geometry.isRectangularLight) {\n            light = new RectAreaLight();\n            var width2 = Math.abs(geometry.width[2]);\n            var height2 = Math.abs(geometry.length[0]);\n            light.position.set(geometry.location[0] - height2 / 2, geometry.location[1], geometry.location[2] - width2 / 2);\n            light.height = height2;\n            light.width = width2;\n            light.lookAt(new Vector3(geometry.direction[0], geometry.direction[1], geometry.direction[2]));\n          } else if (geometry.isSpotLight) {\n            light = new SpotLight();\n            light.castShadow = attributes.castsShadows;\n            light.position.set(geometry.location[0], geometry.location[1], geometry.location[2]);\n            light.target.position.set(geometry.direction[0], geometry.direction[1], geometry.direction[2]);\n            light.angle = geometry.spotAngleRadians;\n            light.shadow.normalBias = 0.1;\n          } else if (geometry.isLinearLight) {\n            console.warn(\"THREE.3DMLoader:  No conversion exists for linear lights.\");\n            return;\n          }\n          if (light) {\n            light.intensity = geometry.intensity;\n            _color = geometry.diffuse;\n            color = new Color(_color.r / 255, _color.g / 255, _color.b / 255);\n            light.color = color;\n            light.userData[\"attributes\"] = attributes;\n            light.userData[\"objectType\"] = obj.objectType;\n          }\n          return light;\n      }\n    }\n  }, {\n    key: \"_initLibrary\",\n    value: function _initLibrary() {\n      var _this4 = this;\n      if (!this.libraryPending) {\n        var jsLoader = new FileLoader(this.manager);\n        jsLoader.setPath(this.libraryPath);\n        var jsContent = new Promise(function (resolve, reject) {\n          jsLoader.load(\"rhino3dm.js\", resolve, void 0, reject);\n        });\n        var binaryLoader = new FileLoader(this.manager);\n        binaryLoader.setPath(this.libraryPath);\n        binaryLoader.setResponseType(\"arraybuffer\");\n        var binaryContent = new Promise(function (resolve, reject) {\n          binaryLoader.load(\"rhino3dm.wasm\", resolve, void 0, reject);\n        });\n        this.libraryPending = Promise.all([jsContent, binaryContent]).then(function (_ref) {\n          var _ref2 = _slicedToArray(_ref, 2),\n            jsContent2 = _ref2[0],\n            binaryContent2 = _ref2[1];\n          _this4.libraryConfig.wasmBinary = binaryContent2;\n          var fn = Rhino3dmWorker.toString();\n          var body = [\"/* rhino3dm.js */\", jsContent2, \"/* worker */\", fn.substring(fn.indexOf(\"{\") + 1, fn.lastIndexOf(\"}\"))].join(\"\\n\");\n          _this4.workerSourceURL = URL.createObjectURL(new Blob([body]));\n        });\n      }\n      return this.libraryPending;\n    }\n  }, {\n    key: \"_getWorker\",\n    value: function _getWorker(taskCost) {\n      var _this5 = this;\n      return this._initLibrary().then(function () {\n        if (_this5.workerPool.length < _this5.workerLimit) {\n          var worker2 = new Worker(_this5.workerSourceURL);\n          worker2._callbacks = {};\n          worker2._taskCosts = {};\n          worker2._taskLoad = 0;\n          worker2.postMessage({\n            type: \"init\",\n            libraryConfig: _this5.libraryConfig\n          });\n          worker2.onmessage = function (e) {\n            var message = e.data;\n            switch (message.type) {\n              case \"decode\":\n                worker2._callbacks[message.id].resolve(message);\n                break;\n              case \"error\":\n                worker2._callbacks[message.id].reject(message);\n                break;\n              default:\n                console.error('THREE.Rhino3dmLoader: Unexpected message, \"' + message.type + '\"');\n            }\n          };\n          _this5.workerPool.push(worker2);\n        } else {\n          _this5.workerPool.sort(function (a, b) {\n            return a._taskLoad > b._taskLoad ? -1 : 1;\n          });\n        }\n        var worker = _this5.workerPool[_this5.workerPool.length - 1];\n        worker._taskLoad += taskCost;\n        return worker;\n      });\n    }\n  }, {\n    key: \"_releaseTask\",\n    value: function _releaseTask(worker, taskID) {\n      worker._taskLoad -= worker._taskCosts[taskID];\n      delete worker._callbacks[taskID];\n      delete worker._taskCosts[taskID];\n    }\n  }, {\n    key: \"dispose\",\n    value: function dispose() {\n      for (var i = 0; i < this.workerPool.length; ++i) {\n        this.workerPool[i].terminate();\n      }\n      this.workerPool.length = 0;\n      return this;\n    }\n  }]);\n  return Rhino3dmLoader;\n}(Loader);\nfunction Rhino3dmWorker() {\n  var libraryPending;\n  var libraryConfig;\n  var rhino;\n  onmessage = function onmessage(e) {\n    var message = e.data;\n    switch (message.type) {\n      case \"init\":\n        libraryConfig = message.libraryConfig;\n        var wasmBinary = libraryConfig.wasmBinary;\n        var RhinoModule;\n        libraryPending = new Promise(function (resolve) {\n          RhinoModule = {\n            wasmBinary: wasmBinary,\n            onRuntimeInitialized: resolve\n          };\n          rhino3dm(RhinoModule);\n        }).then(function () {\n          rhino = RhinoModule;\n        });\n        break;\n      case \"decode\":\n        var buffer = message.buffer;\n        libraryPending.then(function () {\n          var data = decodeObjects(rhino, buffer);\n          self.postMessage({\n            type: \"decode\",\n            id: message.id,\n            data: data\n          });\n        });\n        break;\n    }\n  };\n  function decodeObjects(rhino2, buffer) {\n    var arr = new Uint8Array(buffer);\n    var doc = rhino2.File3dm.fromByteArray(arr);\n    var objects = [];\n    var materials = [];\n    var layers = [];\n    var views = [];\n    var namedViews = [];\n    var groups = [];\n    var objs = doc.objects();\n    var cnt = objs.count;\n    for (var i = 0; i < cnt; i++) {\n      var _object = objs.get(i);\n      var object = extractObjectData(_object, doc);\n      _object.delete();\n      if (object) {\n        objects.push(object);\n      }\n    }\n    for (var _i2 = 0; _i2 < doc.instanceDefinitions().count(); _i2++) {\n      var idef = doc.instanceDefinitions().get(_i2);\n      var idefAttributes = extractProperties(idef);\n      idefAttributes.objectIds = idef.getObjectIds();\n      objects.push({\n        geometry: null,\n        attributes: idefAttributes,\n        objectType: \"InstanceDefinition\"\n      });\n    }\n    var textureTypes = [\n    // rhino.TextureType.Bitmap,\n    rhino2.TextureType.Diffuse, rhino2.TextureType.Bump, rhino2.TextureType.Transparency, rhino2.TextureType.Opacity, rhino2.TextureType.Emap];\n    var pbrTextureTypes = [rhino2.TextureType.PBR_BaseColor, rhino2.TextureType.PBR_Subsurface, rhino2.TextureType.PBR_SubsurfaceScattering, rhino2.TextureType.PBR_SubsurfaceScatteringRadius, rhino2.TextureType.PBR_Metallic, rhino2.TextureType.PBR_Specular, rhino2.TextureType.PBR_SpecularTint, rhino2.TextureType.PBR_Roughness, rhino2.TextureType.PBR_Anisotropic, rhino2.TextureType.PBR_Anisotropic_Rotation, rhino2.TextureType.PBR_Sheen, rhino2.TextureType.PBR_SheenTint, rhino2.TextureType.PBR_Clearcoat, rhino2.TextureType.PBR_ClearcoatBump, rhino2.TextureType.PBR_ClearcoatRoughness, rhino2.TextureType.PBR_OpacityIor, rhino2.TextureType.PBR_OpacityRoughness, rhino2.TextureType.PBR_Emission, rhino2.TextureType.PBR_AmbientOcclusion, rhino2.TextureType.PBR_Displacement];\n    for (var _i3 = 0; _i3 < doc.materials().count(); _i3++) {\n      var _material = doc.materials().get(_i3);\n      var _pbrMaterial = _material.physicallyBased();\n      var material = extractProperties(_material);\n      var textures = [];\n      for (var j = 0; j < textureTypes.length; j++) {\n        var _texture = _material.getTexture(textureTypes[j]);\n        if (_texture) {\n          var textureType = textureTypes[j].constructor.name;\n          textureType = textureType.substring(12, textureType.length);\n          var texture = {\n            type: textureType\n          };\n          var image = doc.getEmbeddedFileAsBase64(_texture.fileName);\n          if (image) {\n            texture.image = \"data:image/png;base64,\" + image;\n          } else {\n            console.warn(\"THREE.3DMLoader: Image for \".concat(textureType, \" texture not embedded in file.\"));\n            texture.image = null;\n          }\n          textures.push(texture);\n          _texture.delete();\n        }\n      }\n      material.textures = textures;\n      if (_pbrMaterial.supported) {\n        console.log(\"pbr true\");\n        for (var _j2 = 0; _j2 < pbrTextureTypes.length; _j2++) {\n          var _texture2 = _material.getTexture(textureTypes[_j2]);\n          if (_texture2) {\n            var _image = doc.getEmbeddedFileAsBase64(_texture2.fileName);\n            var _textureType = textureTypes[_j2].constructor.name;\n            _textureType = _textureType.substring(12, _textureType.length);\n            var _texture3 = {\n              type: _textureType,\n              image: \"data:image/png;base64,\" + _image\n            };\n            textures.push(_texture3);\n            _texture2.delete();\n          }\n        }\n        var pbMaterialProperties = extractProperties(_material.physicallyBased());\n        material = Object.assign(pbMaterialProperties, material);\n      }\n      materials.push(material);\n      _material.delete();\n      _pbrMaterial.delete();\n    }\n    for (var _i4 = 0; _i4 < doc.layers().count(); _i4++) {\n      var _layer = doc.layers().get(_i4);\n      var layer = extractProperties(_layer);\n      layers.push(layer);\n      _layer.delete();\n    }\n    for (var _i5 = 0; _i5 < doc.views().count(); _i5++) {\n      var _view = doc.views().get(_i5);\n      var view = extractProperties(_view);\n      views.push(view);\n      _view.delete();\n    }\n    for (var _i6 = 0; _i6 < doc.namedViews().count(); _i6++) {\n      var _namedView = doc.namedViews().get(_i6);\n      var namedView = extractProperties(_namedView);\n      namedViews.push(namedView);\n      _namedView.delete();\n    }\n    for (var _i7 = 0; _i7 < doc.groups().count(); _i7++) {\n      var _group = doc.groups().get(_i7);\n      var group = extractProperties(_group);\n      groups.push(group);\n      _group.delete();\n    }\n    var settings = extractProperties(doc.settings());\n    doc.delete();\n    return {\n      objects: objects,\n      materials: materials,\n      layers: layers,\n      views: views,\n      namedViews: namedViews,\n      groups: groups,\n      settings: settings\n    };\n  }\n  function extractObjectData(object, doc) {\n    var _geometry = object.geometry();\n    var _attributes = object.attributes();\n    var objectType = _geometry.objectType;\n    var geometry, attributes, position, data, mesh;\n    switch (objectType) {\n      case rhino.ObjectType.Curve:\n        var pts = curveToPoints(_geometry, 100);\n        position = {};\n        attributes = {};\n        data = {};\n        position.itemSize = 3;\n        position.type = \"Float32Array\";\n        position.array = [];\n        for (var j = 0; j < pts.length; j++) {\n          position.array.push(pts[j][0]);\n          position.array.push(pts[j][1]);\n          position.array.push(pts[j][2]);\n        }\n        attributes.position = position;\n        data.attributes = attributes;\n        geometry = {\n          data: data\n        };\n        break;\n      case rhino.ObjectType.Point:\n        var pt = _geometry.location;\n        position = {};\n        var color = {};\n        attributes = {};\n        data = {};\n        position.itemSize = 3;\n        position.type = \"Float32Array\";\n        position.array = [pt[0], pt[1], pt[2]];\n        var _color = _attributes.drawColor(doc);\n        color.itemSize = 3;\n        color.type = \"Float32Array\";\n        color.array = [_color.r / 255, _color.g / 255, _color.b / 255];\n        attributes.position = position;\n        attributes.color = color;\n        data.attributes = attributes;\n        geometry = {\n          data: data\n        };\n        break;\n      case rhino.ObjectType.PointSet:\n      case rhino.ObjectType.Mesh:\n        geometry = _geometry.toThreejsJSON();\n        break;\n      case rhino.ObjectType.Brep:\n        var faces = _geometry.faces();\n        mesh = new rhino.Mesh();\n        for (var faceIndex = 0; faceIndex < faces.count; faceIndex++) {\n          var face = faces.get(faceIndex);\n          var _mesh = face.getMesh(rhino.MeshType.Any);\n          if (_mesh) {\n            mesh.append(_mesh);\n            _mesh.delete();\n          }\n          face.delete();\n        }\n        if (mesh.faces().count > 0) {\n          mesh.compact();\n          geometry = mesh.toThreejsJSON();\n          faces.delete();\n        }\n        mesh.delete();\n        break;\n      case rhino.ObjectType.Extrusion:\n        mesh = _geometry.getMesh(rhino.MeshType.Any);\n        if (mesh) {\n          geometry = mesh.toThreejsJSON();\n          mesh.delete();\n        }\n        break;\n      case rhino.ObjectType.TextDot:\n        geometry = extractProperties(_geometry);\n        break;\n      case rhino.ObjectType.Light:\n        geometry = extractProperties(_geometry);\n        break;\n      case rhino.ObjectType.InstanceReference:\n        geometry = extractProperties(_geometry);\n        geometry.xform = extractProperties(_geometry.xform);\n        geometry.xform.array = _geometry.xform.toFloatArray(true);\n        break;\n      case rhino.ObjectType.SubD:\n        _geometry.subdivide(3);\n        mesh = rhino.Mesh.createFromSubDControlNet(_geometry);\n        if (mesh) {\n          geometry = mesh.toThreejsJSON();\n          mesh.delete();\n        }\n        break;\n      default:\n        console.warn(\"THREE.3DMLoader: TODO: Implement \".concat(objectType.constructor.name));\n        break;\n    }\n    if (geometry) {\n      attributes = extractProperties(_attributes);\n      attributes.geometry = extractProperties(_geometry);\n      if (_attributes.groupCount > 0) {\n        attributes.groupIds = _attributes.getGroupList();\n      }\n      if (_attributes.userStringCount > 0) {\n        attributes.userStrings = _attributes.getUserStrings();\n      }\n      if (_geometry.userStringCount > 0) {\n        attributes.geometry.userStrings = _geometry.getUserStrings();\n      }\n      attributes.drawColor = _attributes.drawColor(doc);\n      objectType = objectType.constructor.name;\n      objectType = objectType.substring(11, objectType.length);\n      return {\n        geometry: geometry,\n        attributes: attributes,\n        objectType: objectType\n      };\n    } else {\n      console.warn(\"THREE.3DMLoader: \".concat(objectType.constructor.name, \" has no associated mesh geometry.\"));\n    }\n  }\n  function extractProperties(object) {\n    var result = {};\n    for (var property in object) {\n      var value = object[property];\n      if (typeof value !== \"function\") {\n        if (typeof value === \"object\" && value !== null && value.hasOwnProperty(\"constructor\")) {\n          result[property] = {\n            name: value.constructor.name,\n            value: value.value\n          };\n        } else {\n          result[property] = value;\n        }\n      } else {}\n    }\n    return result;\n  }\n  function curveToPoints(curve, pointLimit) {\n    var pointCount = pointLimit;\n    var rc = [];\n    var ts = [];\n    if (curve instanceof rhino.LineCurve) {\n      return [curve.pointAtStart, curve.pointAtEnd];\n    }\n    if (curve instanceof rhino.PolylineCurve) {\n      pointCount = curve.pointCount;\n      for (var i = 0; i < pointCount; i++) {\n        rc.push(curve.point(i));\n      }\n      return rc;\n    }\n    if (curve instanceof rhino.PolyCurve) {\n      var segmentCount = curve.segmentCount;\n      for (var _i8 = 0; _i8 < segmentCount; _i8++) {\n        var segment = curve.segmentCurve(_i8);\n        var segmentArray = curveToPoints(segment, pointCount);\n        rc = rc.concat(segmentArray);\n        segment.delete();\n      }\n      return rc;\n    }\n    if (curve instanceof rhino.ArcCurve) {\n      pointCount = Math.floor(curve.angleDegrees / 5);\n      pointCount = pointCount < 2 ? 2 : pointCount;\n    }\n    if (curve instanceof rhino.NurbsCurve && curve.degree === 1) {\n      var pLine = curve.tryGetPolyline();\n      for (var _i9 = 0; _i9 < pLine.count; _i9++) {\n        rc.push(pLine.get(_i9));\n      }\n      pLine.delete();\n      return rc;\n    }\n    var domain = curve.domain;\n    var divisions = pointCount - 1;\n    for (var j = 0; j < pointCount; j++) {\n      var t = domain[0] + j / divisions * (domain[1] - domain[0]);\n      if (t === domain[0] || t === domain[1]) {\n        ts.push(t);\n        continue;\n      }\n      var tan = curve.tangentAt(t);\n      var prevTan = curve.tangentAt(ts.slice(-1)[0]);\n      var tS = tan[0] * tan[0] + tan[1] * tan[1] + tan[2] * tan[2];\n      var ptS = prevTan[0] * prevTan[0] + prevTan[1] * prevTan[1] + prevTan[2] * prevTan[2];\n      var denominator = Math.sqrt(tS * ptS);\n      var angle = void 0;\n      if (denominator === 0) {\n        angle = Math.PI / 2;\n      } else {\n        var theta = (tan.x * prevTan.x + tan.y * prevTan.y + tan.z * prevTan.z) / denominator;\n        angle = Math.acos(Math.max(-1, Math.min(1, theta)));\n      }\n      if (angle < 0.1) continue;\n      ts.push(t);\n    }\n    rc = ts.map(function (t) {\n      return curve.pointAt(t);\n    });\n    return rc;\n  }\n}\nexport { Rhino3dmLoader };","map":{"version":3,"names":["Loader","FileLoader","MeshStandardMaterial","Color","TextureLoader","Object3D","Matrix4","BufferGeometryLoader","DirectionalLight","PointLight","RectAreaLight","Vector3","SpotLight","CanvasTexture","LinearFilter","ClampToEdgeWrapping","SpriteMaterial","Sprite","LineBasicMaterial","Line","Mesh","PointsMaterial","Points","_taskCache","WeakMap","Rhino3dmLoader","_Loader","_inherits","_super","_createSuper","manager","_this","_classCallCheck","call","libraryPath","libraryPending","libraryBinary","libraryConfig","url","workerLimit","workerPool","workerNextTaskID","workerSourceURL","workerConfig","materials","_createClass","key","value","setLibraryPath","path","setWorkerLimit","load","onLoad","onProgress","onError","_this2","loader","setPath","setResponseType","setRequestHeader","requestHeader","buffer","has","cachedTask","get","promise","then","catch","decodeObjects","debug","console","log","map","worker","_taskLoad","_this3","taskID","taskCost","byteLength","objectPending","_getWorker","_worker","Promise","resolve","reject","_callbacks","postMessage","type","id","message","_createGeometry","data","_releaseTask","set","parse","_compareMaterials","material","mat","name","color","r","g","b","i","length","m","_mat","JSON","stringify","push","_createMaterial","metalness","side","_diffuseColor","diffuseColor","diffusecolor","transparent","transparency","opacity","textureLoader","textures","texture","image","bumpMap","alphaMap","envMap","object","instanceDefinitionObjects","instanceDefinitions","instanceReferences","userData","layers","groups","settings","objects","obj","attributes","objectType","_object","materialIndex","rMaterial","_createObject","layer","layerIndex","visible","isInstanceDefinitionObject","add","iDef","j","objectIds","objId","p","idoId","iRef","geometry","parentIdefId","iRefObject","xf","xform","array","matrix","applyMatrix4","clone","_color","hasOwnProperty","vertexColors","sizeAttenuation","size","drawColor","points","mesh","castShadow","castsShadows","receiveShadow","receivesShadows","lines","ctx","document","createElement","getContext","font","concat","fontHeight","fontFace","width","measureText","text","height","window","devicePixelRatio","canvas","style","setTransform","textBaseline","textAlign","fillStyle","a","fillRect","fillText","minFilter","wrapS","wrapT","depthTest","sprite","position","point","scale","light","isDirectionalLight","location","target","direction","shadow","normalBias","isPointLight","isRectangularLight","width2","Math","abs","height2","lookAt","isSpotLight","angle","spotAngleRadians","isLinearLight","warn","intensity","diffuse","_initLibrary","_this4","jsLoader","jsContent","binaryLoader","binaryContent","all","_ref","_ref2","_slicedToArray","jsContent2","binaryContent2","wasmBinary","fn","Rhino3dmWorker","toString","body","substring","indexOf","lastIndexOf","join","URL","createObjectURL","Blob","_this5","worker2","Worker","_taskCosts","onmessage","e","error","sort","dispose","terminate","rhino","RhinoModule","onRuntimeInitialized","rhino3dm","self","rhino2","arr","Uint8Array","doc","File3dm","fromByteArray","views","namedViews","objs","cnt","count","extractObjectData","delete","idef","idefAttributes","extractProperties","getObjectIds","textureTypes","TextureType","Diffuse","Bump","Transparency","Opacity","Emap","pbrTextureTypes","PBR_BaseColor","PBR_Subsurface","PBR_SubsurfaceScattering","PBR_SubsurfaceScatteringRadius","PBR_Metallic","PBR_Specular","PBR_SpecularTint","PBR_Roughness","PBR_Anisotropic","PBR_Anisotropic_Rotation","PBR_Sheen","PBR_SheenTint","PBR_Clearcoat","PBR_ClearcoatBump","PBR_ClearcoatRoughness","PBR_OpacityIor","PBR_OpacityRoughness","PBR_Emission","PBR_AmbientOcclusion","PBR_Displacement","_material","_pbrMaterial","physicallyBased","_texture","getTexture","textureType","constructor","getEmbeddedFileAsBase64","fileName","supported","pbMaterialProperties","Object","assign","_layer","_view","view","_namedView","namedView","_group","group","_geometry","_attributes","ObjectType","Curve","pts","curveToPoints","itemSize","Point","pt","PointSet","toThreejsJSON","Brep","faces","faceIndex","face","_mesh","getMesh","MeshType","Any","append","compact","Extrusion","TextDot","Light","InstanceReference","toFloatArray","SubD","subdivide","createFromSubDControlNet","groupCount","groupIds","getGroupList","userStringCount","userStrings","getUserStrings","result","property","curve","pointLimit","pointCount","rc","ts","LineCurve","pointAtStart","pointAtEnd","PolylineCurve","PolyCurve","segmentCount","segment","segmentCurve","segmentArray","ArcCurve","floor","angleDegrees","NurbsCurve","degree","pLine","tryGetPolyline","domain","divisions","t","tan","tangentAt","prevTan","slice","tS","ptS","denominator","sqrt","PI","theta","x","y","z","acos","max","min","pointAt"],"sources":["/home/krug/Coding/JavaScript/Websites/Personal/personal/node_modules/.pnpm/three-stdlib@2.23.7_three@0.151.3/node_modules/three-stdlib/loaders/3DMLoader.js"],"sourcesContent":["import { Loader, FileLoader, MeshStandardMaterial, Color, TextureLoader, Object3D, Matrix4, BufferGeometryLoader, DirectionalLight, PointLight, RectAreaLight, Vector3, SpotLight, CanvasTexture, LinearFilter, ClampToEdgeWrapping, SpriteMaterial, Sprite, LineBasicMaterial, Line, Mesh, PointsMaterial, Points } from \"three\";\nconst _taskCache = /* @__PURE__ */ new WeakMap();\nclass Rhino3dmLoader extends Loader {\n  constructor(manager) {\n    super(manager);\n    this.libraryPath = \"\";\n    this.libraryPending = null;\n    this.libraryBinary = null;\n    this.libraryConfig = {};\n    this.url = \"\";\n    this.workerLimit = 4;\n    this.workerPool = [];\n    this.workerNextTaskID = 1;\n    this.workerSourceURL = \"\";\n    this.workerConfig = {};\n    this.materials = [];\n  }\n  setLibraryPath(path) {\n    this.libraryPath = path;\n    return this;\n  }\n  setWorkerLimit(workerLimit) {\n    this.workerLimit = workerLimit;\n    return this;\n  }\n  load(url, onLoad, onProgress, onError) {\n    const loader = new FileLoader(this.manager);\n    loader.setPath(this.path);\n    loader.setResponseType(\"arraybuffer\");\n    loader.setRequestHeader(this.requestHeader);\n    this.url = url;\n    loader.load(\n      url,\n      (buffer) => {\n        if (_taskCache.has(buffer)) {\n          const cachedTask = _taskCache.get(buffer);\n          return cachedTask.promise.then(onLoad).catch(onError);\n        }\n        this.decodeObjects(buffer, url).then(onLoad).catch(onError);\n      },\n      onProgress,\n      onError\n    );\n  }\n  debug() {\n    console.log(\n      \"Task load: \",\n      this.workerPool.map((worker) => worker._taskLoad)\n    );\n  }\n  decodeObjects(buffer, url) {\n    let worker;\n    let taskID;\n    const taskCost = buffer.byteLength;\n    const objectPending = this._getWorker(taskCost).then((_worker) => {\n      worker = _worker;\n      taskID = this.workerNextTaskID++;\n      return new Promise((resolve, reject) => {\n        worker._callbacks[taskID] = { resolve, reject };\n        worker.postMessage({ type: \"decode\", id: taskID, buffer }, [buffer]);\n      });\n    }).then((message) => this._createGeometry(message.data));\n    objectPending.catch(() => true).then(() => {\n      if (worker && taskID) {\n        this._releaseTask(worker, taskID);\n      }\n    });\n    _taskCache.set(buffer, {\n      url,\n      promise: objectPending\n    });\n    return objectPending;\n  }\n  parse(data, onLoad, onError) {\n    this.decodeObjects(data, \"\").then(onLoad).catch(onError);\n  }\n  _compareMaterials(material) {\n    const mat = {};\n    mat.name = material.name;\n    mat.color = {};\n    mat.color.r = material.color.r;\n    mat.color.g = material.color.g;\n    mat.color.b = material.color.b;\n    mat.type = material.type;\n    for (let i = 0; i < this.materials.length; i++) {\n      const m = this.materials[i];\n      const _mat = {};\n      _mat.name = m.name;\n      _mat.color = {};\n      _mat.color.r = m.color.r;\n      _mat.color.g = m.color.g;\n      _mat.color.b = m.color.b;\n      _mat.type = m.type;\n      if (JSON.stringify(mat) === JSON.stringify(_mat)) {\n        return m;\n      }\n    }\n    this.materials.push(material);\n    return material;\n  }\n  _createMaterial(material) {\n    if (material === void 0) {\n      return new MeshStandardMaterial({\n        color: new Color(1, 1, 1),\n        metalness: 0.8,\n        name: \"default\",\n        side: 2\n      });\n    }\n    const _diffuseColor = material.diffuseColor;\n    const diffusecolor = new Color(_diffuseColor.r / 255, _diffuseColor.g / 255, _diffuseColor.b / 255);\n    if (_diffuseColor.r === 0 && _diffuseColor.g === 0 && _diffuseColor.b === 0) {\n      diffusecolor.r = 1;\n      diffusecolor.g = 1;\n      diffusecolor.b = 1;\n    }\n    const mat = new MeshStandardMaterial({\n      color: diffusecolor,\n      name: material.name,\n      side: 2,\n      transparent: material.transparency > 0 ? true : false,\n      opacity: 1 - material.transparency\n    });\n    const textureLoader = new TextureLoader();\n    for (let i = 0; i < material.textures.length; i++) {\n      const texture = material.textures[i];\n      if (texture.image !== null) {\n        const map = textureLoader.load(texture.image);\n        switch (texture.type) {\n          case \"Diffuse\":\n            mat.map = map;\n            break;\n          case \"Bump\":\n            mat.bumpMap = map;\n            break;\n          case \"Transparency\":\n            mat.alphaMap = map;\n            mat.transparent = true;\n            break;\n          case \"Emap\":\n            mat.envMap = map;\n            break;\n        }\n      }\n    }\n    return mat;\n  }\n  _createGeometry(data) {\n    const object = new Object3D();\n    const instanceDefinitionObjects = [];\n    const instanceDefinitions = [];\n    const instanceReferences = [];\n    object.userData[\"layers\"] = data.layers;\n    object.userData[\"groups\"] = data.groups;\n    object.userData[\"settings\"] = data.settings;\n    object.userData[\"objectType\"] = \"File3dm\";\n    object.userData[\"materials\"] = null;\n    object.name = this.url;\n    let objects = data.objects;\n    const materials = data.materials;\n    for (let i = 0; i < objects.length; i++) {\n      const obj = objects[i];\n      const attributes = obj.attributes;\n      switch (obj.objectType) {\n        case \"InstanceDefinition\":\n          instanceDefinitions.push(obj);\n          break;\n        case \"InstanceReference\":\n          instanceReferences.push(obj);\n          break;\n        default:\n          let _object;\n          if (attributes.materialIndex >= 0) {\n            const rMaterial = materials[attributes.materialIndex];\n            let material = this._createMaterial(rMaterial);\n            material = this._compareMaterials(material);\n            _object = this._createObject(obj, material);\n          } else {\n            const material = this._createMaterial();\n            _object = this._createObject(obj, material);\n          }\n          if (_object === void 0) {\n            continue;\n          }\n          const layer = data.layers[attributes.layerIndex];\n          _object.visible = layer ? data.layers[attributes.layerIndex].visible : true;\n          if (attributes.isInstanceDefinitionObject) {\n            instanceDefinitionObjects.push(_object);\n          } else {\n            object.add(_object);\n          }\n          break;\n      }\n    }\n    for (let i = 0; i < instanceDefinitions.length; i++) {\n      const iDef = instanceDefinitions[i];\n      objects = [];\n      for (let j = 0; j < iDef.attributes.objectIds.length; j++) {\n        const objId = iDef.attributes.objectIds[j];\n        for (let p = 0; p < instanceDefinitionObjects.length; p++) {\n          const idoId = instanceDefinitionObjects[p].userData.attributes.id;\n          if (objId === idoId) {\n            objects.push(instanceDefinitionObjects[p]);\n          }\n        }\n      }\n      for (let j = 0; j < instanceReferences.length; j++) {\n        const iRef = instanceReferences[j];\n        if (iRef.geometry.parentIdefId === iDef.attributes.id) {\n          const iRefObject = new Object3D();\n          const xf = iRef.geometry.xform.array;\n          const matrix = new Matrix4();\n          matrix.set(\n            xf[0],\n            xf[1],\n            xf[2],\n            xf[3],\n            xf[4],\n            xf[5],\n            xf[6],\n            xf[7],\n            xf[8],\n            xf[9],\n            xf[10],\n            xf[11],\n            xf[12],\n            xf[13],\n            xf[14],\n            xf[15]\n          );\n          iRefObject.applyMatrix4(matrix);\n          for (let p = 0; p < objects.length; p++) {\n            iRefObject.add(objects[p].clone(true));\n          }\n          object.add(iRefObject);\n        }\n      }\n    }\n    object.userData[\"materials\"] = this.materials;\n    return object;\n  }\n  _createObject(obj, mat) {\n    const loader = new BufferGeometryLoader();\n    const attributes = obj.attributes;\n    let geometry, material, _color, color;\n    switch (obj.objectType) {\n      case \"Point\":\n      case \"PointSet\":\n        geometry = loader.parse(obj.geometry);\n        if (geometry.attributes.hasOwnProperty(\"color\")) {\n          material = new PointsMaterial({ vertexColors: true, sizeAttenuation: false, size: 2 });\n        } else {\n          _color = attributes.drawColor;\n          color = new Color(_color.r / 255, _color.g / 255, _color.b / 255);\n          material = new PointsMaterial({ color, sizeAttenuation: false, size: 2 });\n        }\n        material = this._compareMaterials(material);\n        const points = new Points(geometry, material);\n        points.userData[\"attributes\"] = attributes;\n        points.userData[\"objectType\"] = obj.objectType;\n        if (attributes.name) {\n          points.name = attributes.name;\n        }\n        return points;\n      case \"Mesh\":\n      case \"Extrusion\":\n      case \"SubD\":\n      case \"Brep\":\n        if (obj.geometry === null)\n          return;\n        geometry = loader.parse(obj.geometry);\n        if (geometry.attributes.hasOwnProperty(\"color\")) {\n          mat.vertexColors = true;\n        }\n        if (mat === null) {\n          mat = this._createMaterial();\n          mat = this._compareMaterials(mat);\n        }\n        const mesh = new Mesh(geometry, mat);\n        mesh.castShadow = attributes.castsShadows;\n        mesh.receiveShadow = attributes.receivesShadows;\n        mesh.userData[\"attributes\"] = attributes;\n        mesh.userData[\"objectType\"] = obj.objectType;\n        if (attributes.name) {\n          mesh.name = attributes.name;\n        }\n        return mesh;\n      case \"Curve\":\n        geometry = loader.parse(obj.geometry);\n        _color = attributes.drawColor;\n        color = new Color(_color.r / 255, _color.g / 255, _color.b / 255);\n        material = new LineBasicMaterial({ color });\n        material = this._compareMaterials(material);\n        const lines = new Line(geometry, material);\n        lines.userData[\"attributes\"] = attributes;\n        lines.userData[\"objectType\"] = obj.objectType;\n        if (attributes.name) {\n          lines.name = attributes.name;\n        }\n        return lines;\n      case \"TextDot\":\n        geometry = obj.geometry;\n        const ctx = document.createElement(\"canvas\").getContext(\"2d\");\n        const font = `${geometry.fontHeight}px ${geometry.fontFace}`;\n        ctx.font = font;\n        const width = ctx.measureText(geometry.text).width + 10;\n        const height = geometry.fontHeight + 10;\n        const r = window.devicePixelRatio;\n        ctx.canvas.width = width * r;\n        ctx.canvas.height = height * r;\n        ctx.canvas.style.width = width + \"px\";\n        ctx.canvas.style.height = height + \"px\";\n        ctx.setTransform(r, 0, 0, r, 0, 0);\n        ctx.font = font;\n        ctx.textBaseline = \"middle\";\n        ctx.textAlign = \"center\";\n        color = attributes.drawColor;\n        ctx.fillStyle = `rgba(${color.r},${color.g},${color.b},${color.a})`;\n        ctx.fillRect(0, 0, width, height);\n        ctx.fillStyle = \"white\";\n        ctx.fillText(geometry.text, width / 2, height / 2);\n        const texture = new CanvasTexture(ctx.canvas);\n        texture.minFilter = LinearFilter;\n        texture.wrapS = ClampToEdgeWrapping;\n        texture.wrapT = ClampToEdgeWrapping;\n        material = new SpriteMaterial({ map: texture, depthTest: false });\n        const sprite = new Sprite(material);\n        sprite.position.set(geometry.point[0], geometry.point[1], geometry.point[2]);\n        sprite.scale.set(width / 10, height / 10, 1);\n        sprite.userData[\"attributes\"] = attributes;\n        sprite.userData[\"objectType\"] = obj.objectType;\n        if (attributes.name) {\n          sprite.name = attributes.name;\n        }\n        return sprite;\n      case \"Light\":\n        geometry = obj.geometry;\n        let light;\n        if (geometry.isDirectionalLight) {\n          light = new DirectionalLight();\n          light.castShadow = attributes.castsShadows;\n          light.position.set(geometry.location[0], geometry.location[1], geometry.location[2]);\n          light.target.position.set(geometry.direction[0], geometry.direction[1], geometry.direction[2]);\n          light.shadow.normalBias = 0.1;\n        } else if (geometry.isPointLight) {\n          light = new PointLight();\n          light.castShadow = attributes.castsShadows;\n          light.position.set(geometry.location[0], geometry.location[1], geometry.location[2]);\n          light.shadow.normalBias = 0.1;\n        } else if (geometry.isRectangularLight) {\n          light = new RectAreaLight();\n          const width2 = Math.abs(geometry.width[2]);\n          const height2 = Math.abs(geometry.length[0]);\n          light.position.set(geometry.location[0] - height2 / 2, geometry.location[1], geometry.location[2] - width2 / 2);\n          light.height = height2;\n          light.width = width2;\n          light.lookAt(new Vector3(geometry.direction[0], geometry.direction[1], geometry.direction[2]));\n        } else if (geometry.isSpotLight) {\n          light = new SpotLight();\n          light.castShadow = attributes.castsShadows;\n          light.position.set(geometry.location[0], geometry.location[1], geometry.location[2]);\n          light.target.position.set(geometry.direction[0], geometry.direction[1], geometry.direction[2]);\n          light.angle = geometry.spotAngleRadians;\n          light.shadow.normalBias = 0.1;\n        } else if (geometry.isLinearLight) {\n          console.warn(\"THREE.3DMLoader:  No conversion exists for linear lights.\");\n          return;\n        }\n        if (light) {\n          light.intensity = geometry.intensity;\n          _color = geometry.diffuse;\n          color = new Color(_color.r / 255, _color.g / 255, _color.b / 255);\n          light.color = color;\n          light.userData[\"attributes\"] = attributes;\n          light.userData[\"objectType\"] = obj.objectType;\n        }\n        return light;\n    }\n  }\n  _initLibrary() {\n    if (!this.libraryPending) {\n      const jsLoader = new FileLoader(this.manager);\n      jsLoader.setPath(this.libraryPath);\n      const jsContent = new Promise((resolve, reject) => {\n        jsLoader.load(\"rhino3dm.js\", resolve, void 0, reject);\n      });\n      const binaryLoader = new FileLoader(this.manager);\n      binaryLoader.setPath(this.libraryPath);\n      binaryLoader.setResponseType(\"arraybuffer\");\n      const binaryContent = new Promise((resolve, reject) => {\n        binaryLoader.load(\"rhino3dm.wasm\", resolve, void 0, reject);\n      });\n      this.libraryPending = Promise.all([jsContent, binaryContent]).then(([jsContent2, binaryContent2]) => {\n        this.libraryConfig.wasmBinary = binaryContent2;\n        const fn = Rhino3dmWorker.toString();\n        const body = [\n          \"/* rhino3dm.js */\",\n          jsContent2,\n          \"/* worker */\",\n          fn.substring(fn.indexOf(\"{\") + 1, fn.lastIndexOf(\"}\"))\n        ].join(\"\\n\");\n        this.workerSourceURL = URL.createObjectURL(new Blob([body]));\n      });\n    }\n    return this.libraryPending;\n  }\n  _getWorker(taskCost) {\n    return this._initLibrary().then(() => {\n      if (this.workerPool.length < this.workerLimit) {\n        const worker2 = new Worker(this.workerSourceURL);\n        worker2._callbacks = {};\n        worker2._taskCosts = {};\n        worker2._taskLoad = 0;\n        worker2.postMessage({\n          type: \"init\",\n          libraryConfig: this.libraryConfig\n        });\n        worker2.onmessage = function(e) {\n          const message = e.data;\n          switch (message.type) {\n            case \"decode\":\n              worker2._callbacks[message.id].resolve(message);\n              break;\n            case \"error\":\n              worker2._callbacks[message.id].reject(message);\n              break;\n            default:\n              console.error('THREE.Rhino3dmLoader: Unexpected message, \"' + message.type + '\"');\n          }\n        };\n        this.workerPool.push(worker2);\n      } else {\n        this.workerPool.sort(function(a, b) {\n          return a._taskLoad > b._taskLoad ? -1 : 1;\n        });\n      }\n      const worker = this.workerPool[this.workerPool.length - 1];\n      worker._taskLoad += taskCost;\n      return worker;\n    });\n  }\n  _releaseTask(worker, taskID) {\n    worker._taskLoad -= worker._taskCosts[taskID];\n    delete worker._callbacks[taskID];\n    delete worker._taskCosts[taskID];\n  }\n  dispose() {\n    for (let i = 0; i < this.workerPool.length; ++i) {\n      this.workerPool[i].terminate();\n    }\n    this.workerPool.length = 0;\n    return this;\n  }\n}\nfunction Rhino3dmWorker() {\n  let libraryPending;\n  let libraryConfig;\n  let rhino;\n  onmessage = function(e) {\n    const message = e.data;\n    switch (message.type) {\n      case \"init\":\n        libraryConfig = message.libraryConfig;\n        const wasmBinary = libraryConfig.wasmBinary;\n        let RhinoModule;\n        libraryPending = new Promise(function(resolve) {\n          RhinoModule = { wasmBinary, onRuntimeInitialized: resolve };\n          rhino3dm(RhinoModule);\n        }).then(() => {\n          rhino = RhinoModule;\n        });\n        break;\n      case \"decode\":\n        const buffer = message.buffer;\n        libraryPending.then(() => {\n          const data = decodeObjects(rhino, buffer);\n          self.postMessage({ type: \"decode\", id: message.id, data });\n        });\n        break;\n    }\n  };\n  function decodeObjects(rhino2, buffer) {\n    const arr = new Uint8Array(buffer);\n    const doc = rhino2.File3dm.fromByteArray(arr);\n    const objects = [];\n    const materials = [];\n    const layers = [];\n    const views = [];\n    const namedViews = [];\n    const groups = [];\n    const objs = doc.objects();\n    const cnt = objs.count;\n    for (let i = 0; i < cnt; i++) {\n      const _object = objs.get(i);\n      const object = extractObjectData(_object, doc);\n      _object.delete();\n      if (object) {\n        objects.push(object);\n      }\n    }\n    for (let i = 0; i < doc.instanceDefinitions().count(); i++) {\n      const idef = doc.instanceDefinitions().get(i);\n      const idefAttributes = extractProperties(idef);\n      idefAttributes.objectIds = idef.getObjectIds();\n      objects.push({ geometry: null, attributes: idefAttributes, objectType: \"InstanceDefinition\" });\n    }\n    const textureTypes = [\n      // rhino.TextureType.Bitmap,\n      rhino2.TextureType.Diffuse,\n      rhino2.TextureType.Bump,\n      rhino2.TextureType.Transparency,\n      rhino2.TextureType.Opacity,\n      rhino2.TextureType.Emap\n    ];\n    const pbrTextureTypes = [\n      rhino2.TextureType.PBR_BaseColor,\n      rhino2.TextureType.PBR_Subsurface,\n      rhino2.TextureType.PBR_SubsurfaceScattering,\n      rhino2.TextureType.PBR_SubsurfaceScatteringRadius,\n      rhino2.TextureType.PBR_Metallic,\n      rhino2.TextureType.PBR_Specular,\n      rhino2.TextureType.PBR_SpecularTint,\n      rhino2.TextureType.PBR_Roughness,\n      rhino2.TextureType.PBR_Anisotropic,\n      rhino2.TextureType.PBR_Anisotropic_Rotation,\n      rhino2.TextureType.PBR_Sheen,\n      rhino2.TextureType.PBR_SheenTint,\n      rhino2.TextureType.PBR_Clearcoat,\n      rhino2.TextureType.PBR_ClearcoatBump,\n      rhino2.TextureType.PBR_ClearcoatRoughness,\n      rhino2.TextureType.PBR_OpacityIor,\n      rhino2.TextureType.PBR_OpacityRoughness,\n      rhino2.TextureType.PBR_Emission,\n      rhino2.TextureType.PBR_AmbientOcclusion,\n      rhino2.TextureType.PBR_Displacement\n    ];\n    for (let i = 0; i < doc.materials().count(); i++) {\n      const _material = doc.materials().get(i);\n      const _pbrMaterial = _material.physicallyBased();\n      let material = extractProperties(_material);\n      const textures = [];\n      for (let j = 0; j < textureTypes.length; j++) {\n        const _texture = _material.getTexture(textureTypes[j]);\n        if (_texture) {\n          let textureType = textureTypes[j].constructor.name;\n          textureType = textureType.substring(12, textureType.length);\n          const texture = { type: textureType };\n          const image = doc.getEmbeddedFileAsBase64(_texture.fileName);\n          if (image) {\n            texture.image = \"data:image/png;base64,\" + image;\n          } else {\n            console.warn(`THREE.3DMLoader: Image for ${textureType} texture not embedded in file.`);\n            texture.image = null;\n          }\n          textures.push(texture);\n          _texture.delete();\n        }\n      }\n      material.textures = textures;\n      if (_pbrMaterial.supported) {\n        console.log(\"pbr true\");\n        for (let j = 0; j < pbrTextureTypes.length; j++) {\n          const _texture = _material.getTexture(textureTypes[j]);\n          if (_texture) {\n            const image = doc.getEmbeddedFileAsBase64(_texture.fileName);\n            let textureType = textureTypes[j].constructor.name;\n            textureType = textureType.substring(12, textureType.length);\n            const texture = { type: textureType, image: \"data:image/png;base64,\" + image };\n            textures.push(texture);\n            _texture.delete();\n          }\n        }\n        const pbMaterialProperties = extractProperties(_material.physicallyBased());\n        material = Object.assign(pbMaterialProperties, material);\n      }\n      materials.push(material);\n      _material.delete();\n      _pbrMaterial.delete();\n    }\n    for (let i = 0; i < doc.layers().count(); i++) {\n      const _layer = doc.layers().get(i);\n      const layer = extractProperties(_layer);\n      layers.push(layer);\n      _layer.delete();\n    }\n    for (let i = 0; i < doc.views().count(); i++) {\n      const _view = doc.views().get(i);\n      const view = extractProperties(_view);\n      views.push(view);\n      _view.delete();\n    }\n    for (let i = 0; i < doc.namedViews().count(); i++) {\n      const _namedView = doc.namedViews().get(i);\n      const namedView = extractProperties(_namedView);\n      namedViews.push(namedView);\n      _namedView.delete();\n    }\n    for (let i = 0; i < doc.groups().count(); i++) {\n      const _group = doc.groups().get(i);\n      const group = extractProperties(_group);\n      groups.push(group);\n      _group.delete();\n    }\n    const settings = extractProperties(doc.settings());\n    doc.delete();\n    return { objects, materials, layers, views, namedViews, groups, settings };\n  }\n  function extractObjectData(object, doc) {\n    const _geometry = object.geometry();\n    const _attributes = object.attributes();\n    let objectType = _geometry.objectType;\n    let geometry, attributes, position, data, mesh;\n    switch (objectType) {\n      case rhino.ObjectType.Curve:\n        const pts = curveToPoints(_geometry, 100);\n        position = {};\n        attributes = {};\n        data = {};\n        position.itemSize = 3;\n        position.type = \"Float32Array\";\n        position.array = [];\n        for (let j = 0; j < pts.length; j++) {\n          position.array.push(pts[j][0]);\n          position.array.push(pts[j][1]);\n          position.array.push(pts[j][2]);\n        }\n        attributes.position = position;\n        data.attributes = attributes;\n        geometry = { data };\n        break;\n      case rhino.ObjectType.Point:\n        const pt = _geometry.location;\n        position = {};\n        const color = {};\n        attributes = {};\n        data = {};\n        position.itemSize = 3;\n        position.type = \"Float32Array\";\n        position.array = [pt[0], pt[1], pt[2]];\n        const _color = _attributes.drawColor(doc);\n        color.itemSize = 3;\n        color.type = \"Float32Array\";\n        color.array = [_color.r / 255, _color.g / 255, _color.b / 255];\n        attributes.position = position;\n        attributes.color = color;\n        data.attributes = attributes;\n        geometry = { data };\n        break;\n      case rhino.ObjectType.PointSet:\n      case rhino.ObjectType.Mesh:\n        geometry = _geometry.toThreejsJSON();\n        break;\n      case rhino.ObjectType.Brep:\n        const faces = _geometry.faces();\n        mesh = new rhino.Mesh();\n        for (let faceIndex = 0; faceIndex < faces.count; faceIndex++) {\n          const face = faces.get(faceIndex);\n          const _mesh = face.getMesh(rhino.MeshType.Any);\n          if (_mesh) {\n            mesh.append(_mesh);\n            _mesh.delete();\n          }\n          face.delete();\n        }\n        if (mesh.faces().count > 0) {\n          mesh.compact();\n          geometry = mesh.toThreejsJSON();\n          faces.delete();\n        }\n        mesh.delete();\n        break;\n      case rhino.ObjectType.Extrusion:\n        mesh = _geometry.getMesh(rhino.MeshType.Any);\n        if (mesh) {\n          geometry = mesh.toThreejsJSON();\n          mesh.delete();\n        }\n        break;\n      case rhino.ObjectType.TextDot:\n        geometry = extractProperties(_geometry);\n        break;\n      case rhino.ObjectType.Light:\n        geometry = extractProperties(_geometry);\n        break;\n      case rhino.ObjectType.InstanceReference:\n        geometry = extractProperties(_geometry);\n        geometry.xform = extractProperties(_geometry.xform);\n        geometry.xform.array = _geometry.xform.toFloatArray(true);\n        break;\n      case rhino.ObjectType.SubD:\n        _geometry.subdivide(3);\n        mesh = rhino.Mesh.createFromSubDControlNet(_geometry);\n        if (mesh) {\n          geometry = mesh.toThreejsJSON();\n          mesh.delete();\n        }\n        break;\n      default:\n        console.warn(`THREE.3DMLoader: TODO: Implement ${objectType.constructor.name}`);\n        break;\n    }\n    if (geometry) {\n      attributes = extractProperties(_attributes);\n      attributes.geometry = extractProperties(_geometry);\n      if (_attributes.groupCount > 0) {\n        attributes.groupIds = _attributes.getGroupList();\n      }\n      if (_attributes.userStringCount > 0) {\n        attributes.userStrings = _attributes.getUserStrings();\n      }\n      if (_geometry.userStringCount > 0) {\n        attributes.geometry.userStrings = _geometry.getUserStrings();\n      }\n      attributes.drawColor = _attributes.drawColor(doc);\n      objectType = objectType.constructor.name;\n      objectType = objectType.substring(11, objectType.length);\n      return { geometry, attributes, objectType };\n    } else {\n      console.warn(`THREE.3DMLoader: ${objectType.constructor.name} has no associated mesh geometry.`);\n    }\n  }\n  function extractProperties(object) {\n    const result = {};\n    for (const property in object) {\n      const value = object[property];\n      if (typeof value !== \"function\") {\n        if (typeof value === \"object\" && value !== null && value.hasOwnProperty(\"constructor\")) {\n          result[property] = { name: value.constructor.name, value: value.value };\n        } else {\n          result[property] = value;\n        }\n      } else {\n      }\n    }\n    return result;\n  }\n  function curveToPoints(curve, pointLimit) {\n    let pointCount = pointLimit;\n    let rc = [];\n    const ts = [];\n    if (curve instanceof rhino.LineCurve) {\n      return [curve.pointAtStart, curve.pointAtEnd];\n    }\n    if (curve instanceof rhino.PolylineCurve) {\n      pointCount = curve.pointCount;\n      for (let i = 0; i < pointCount; i++) {\n        rc.push(curve.point(i));\n      }\n      return rc;\n    }\n    if (curve instanceof rhino.PolyCurve) {\n      const segmentCount = curve.segmentCount;\n      for (let i = 0; i < segmentCount; i++) {\n        const segment = curve.segmentCurve(i);\n        const segmentArray = curveToPoints(segment, pointCount);\n        rc = rc.concat(segmentArray);\n        segment.delete();\n      }\n      return rc;\n    }\n    if (curve instanceof rhino.ArcCurve) {\n      pointCount = Math.floor(curve.angleDegrees / 5);\n      pointCount = pointCount < 2 ? 2 : pointCount;\n    }\n    if (curve instanceof rhino.NurbsCurve && curve.degree === 1) {\n      const pLine = curve.tryGetPolyline();\n      for (let i = 0; i < pLine.count; i++) {\n        rc.push(pLine.get(i));\n      }\n      pLine.delete();\n      return rc;\n    }\n    const domain = curve.domain;\n    const divisions = pointCount - 1;\n    for (let j = 0; j < pointCount; j++) {\n      const t = domain[0] + j / divisions * (domain[1] - domain[0]);\n      if (t === domain[0] || t === domain[1]) {\n        ts.push(t);\n        continue;\n      }\n      const tan = curve.tangentAt(t);\n      const prevTan = curve.tangentAt(ts.slice(-1)[0]);\n      const tS = tan[0] * tan[0] + tan[1] * tan[1] + tan[2] * tan[2];\n      const ptS = prevTan[0] * prevTan[0] + prevTan[1] * prevTan[1] + prevTan[2] * prevTan[2];\n      const denominator = Math.sqrt(tS * ptS);\n      let angle;\n      if (denominator === 0) {\n        angle = Math.PI / 2;\n      } else {\n        const theta = (tan.x * prevTan.x + tan.y * prevTan.y + tan.z * prevTan.z) / denominator;\n        angle = Math.acos(Math.max(-1, Math.min(1, theta)));\n      }\n      if (angle < 0.1)\n        continue;\n      ts.push(t);\n    }\n    rc = ts.map((t) => curve.pointAt(t));\n    return rc;\n  }\n}\nexport {\n  Rhino3dmLoader\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}