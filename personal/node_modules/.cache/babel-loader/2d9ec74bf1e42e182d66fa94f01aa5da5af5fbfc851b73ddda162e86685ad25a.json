{"ast":null,"code":"import { Vector3, Curve } from \"three\";\nimport { ParametricGeometry } from \"./ParametricGeometry.js\";\nclass TubeGeometry extends ParametricGeometry {\n  constructor(path) {\n    let segments = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 64;\n    let radius = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;\n    let segmentsRadius = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 8;\n    let closed = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;\n    const numpoints = segments + 1;\n    const frames = path.computeFrenetFrames(segments, closed),\n      tangents = frames.tangents,\n      normals = frames.normals,\n      binormals = frames.binormals;\n    const position = new Vector3();\n    function ParametricTube(u, v, target) {\n      v *= 2 * Math.PI;\n      const i = Math.floor(u * (numpoints - 1));\n      path.getPointAt(u, position);\n      const normal = normals[i];\n      const binormal = binormals[i];\n      const cx = -radius * Math.cos(v);\n      const cy = radius * Math.sin(v);\n      position.x += cx * normal.x + cy * binormal.x;\n      position.y += cx * normal.y + cy * binormal.y;\n      position.z += cx * normal.z + cy * binormal.z;\n      target.copy(position);\n    }\n    super(ParametricTube, segments, segmentsRadius);\n    this.tangents = tangents;\n    this.normals = normals;\n    this.binormals = binormals;\n    this.path = path;\n    this.segments = segments;\n    this.radius = radius;\n    this.segmentsRadius = segmentsRadius;\n    this.closed = closed;\n  }\n}\nconst ParametricGeometries = {\n  klein: function (v, u, target) {\n    u *= Math.PI;\n    v *= 2 * Math.PI;\n    u = u * 2;\n    let x, z;\n    if (u < Math.PI) {\n      x = 3 * Math.cos(u) * (1 + Math.sin(u)) + 2 * (1 - Math.cos(u) / 2) * Math.cos(u) * Math.cos(v);\n      z = -8 * Math.sin(u) - 2 * (1 - Math.cos(u) / 2) * Math.sin(u) * Math.cos(v);\n    } else {\n      x = 3 * Math.cos(u) * (1 + Math.sin(u)) + 2 * (1 - Math.cos(u) / 2) * Math.cos(v + Math.PI);\n      z = -8 * Math.sin(u);\n    }\n    const y = -2 * (1 - Math.cos(u) / 2) * Math.sin(v);\n    target.set(x, y, z);\n  },\n  plane: function (width, height) {\n    return function (u, v, target) {\n      const x = u * width;\n      const y = 0;\n      const z = v * height;\n      target.set(x, y, z);\n    };\n  },\n  mobius: function (u, t, target) {\n    u = u - 0.5;\n    const v = 2 * Math.PI * t;\n    const a = 2;\n    const x = Math.cos(v) * (a + u * Math.cos(v / 2));\n    const y = Math.sin(v) * (a + u * Math.cos(v / 2));\n    const z = u * Math.sin(v / 2);\n    target.set(x, y, z);\n  },\n  mobius3d: function (u, t, target) {\n    u *= Math.PI;\n    t *= 2 * Math.PI;\n    u = u * 2;\n    const phi = u / 2;\n    const major = 2.25,\n      a = 0.125,\n      b = 0.65;\n    let x = a * Math.cos(t) * Math.cos(phi) - b * Math.sin(t) * Math.sin(phi);\n    const z = a * Math.cos(t) * Math.sin(phi) + b * Math.sin(t) * Math.cos(phi);\n    const y = (major + x) * Math.sin(u);\n    x = (major + x) * Math.cos(u);\n    target.set(x, y, z);\n  },\n  TubeGeometry,\n  TorusKnotGeometry: class TorusKnotGeometry extends TubeGeometry {\n    constructor() {\n      let radius = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 200;\n      let tube = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 40;\n      let segmentsT = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 64;\n      let segmentsR = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 8;\n      let p = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 2;\n      let q = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : 3;\n      class TorusKnotCurve extends Curve {\n        getPoint(t) {\n          let optionalTarget = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : new Vector3();\n          const point = optionalTarget;\n          t *= Math.PI * 2;\n          const r = 0.5;\n          const x = (1 + r * Math.cos(q * t)) * Math.cos(p * t);\n          const y = (1 + r * Math.cos(q * t)) * Math.sin(p * t);\n          const z = r * Math.sin(q * t);\n          return point.set(x, y, z).multiplyScalar(radius);\n        }\n      }\n      const segments = segmentsT;\n      const radiusSegments = segmentsR;\n      const extrudePath = new TorusKnotCurve();\n      super(extrudePath, segments, tube, radiusSegments, true, false);\n      this.radius = radius;\n      this.tube = tube;\n      this.segmentsT = segmentsT;\n      this.segmentsR = segmentsR;\n      this.p = p;\n      this.q = q;\n    }\n  },\n  SphereGeometry: class SphereGeometry extends ParametricGeometry {\n    constructor(size, u, v) {\n      function sphere(u2, v2, target) {\n        u2 *= Math.PI;\n        v2 *= 2 * Math.PI;\n        const x = size * Math.sin(u2) * Math.cos(v2);\n        const y = size * Math.sin(u2) * Math.sin(v2);\n        const z = size * Math.cos(u2);\n        target.set(x, y, z);\n      }\n      super(sphere, u, v);\n    }\n  },\n  PlaneGeometry: class PlaneGeometry extends ParametricGeometry {\n    constructor(width, depth, segmentsWidth, segmentsDepth) {\n      function plane(u, v, target) {\n        const x = u * width;\n        const y = 0;\n        const z = v * depth;\n        target.set(x, y, z);\n      }\n      super(plane, segmentsWidth, segmentsDepth);\n    }\n  }\n};\nexport { ParametricGeometries };","map":{"version":3,"names":["Vector3","Curve","ParametricGeometry","TubeGeometry","constructor","path","segments","arguments","length","undefined","radius","segmentsRadius","closed","numpoints","frames","computeFrenetFrames","tangents","normals","binormals","position","ParametricTube","u","v","target","Math","PI","i","floor","getPointAt","normal","binormal","cx","cos","cy","sin","x","y","z","copy","ParametricGeometries","klein","set","plane","width","height","mobius","t","a","mobius3d","phi","major","b","TorusKnotGeometry","tube","segmentsT","segmentsR","p","q","TorusKnotCurve","getPoint","optionalTarget","point","r","multiplyScalar","radiusSegments","extrudePath","SphereGeometry","size","sphere","u2","v2","PlaneGeometry","depth","segmentsWidth","segmentsDepth"],"sources":["/home/krug/Coding/JavaScript/Websites/Personal/personal/node_modules/.pnpm/three-stdlib@2.23.7_three@0.151.3/node_modules/three-stdlib/geometries/ParametricGeometries.js"],"sourcesContent":["import { Vector3, Curve } from \"three\";\nimport { ParametricGeometry } from \"./ParametricGeometry.js\";\nclass TubeGeometry extends ParametricGeometry {\n  constructor(path, segments = 64, radius = 1, segmentsRadius = 8, closed = false) {\n    const numpoints = segments + 1;\n    const frames = path.computeFrenetFrames(segments, closed), tangents = frames.tangents, normals = frames.normals, binormals = frames.binormals;\n    const position = new Vector3();\n    function ParametricTube(u, v, target) {\n      v *= 2 * Math.PI;\n      const i = Math.floor(u * (numpoints - 1));\n      path.getPointAt(u, position);\n      const normal = normals[i];\n      const binormal = binormals[i];\n      const cx = -radius * Math.cos(v);\n      const cy = radius * Math.sin(v);\n      position.x += cx * normal.x + cy * binormal.x;\n      position.y += cx * normal.y + cy * binormal.y;\n      position.z += cx * normal.z + cy * binormal.z;\n      target.copy(position);\n    }\n    super(ParametricTube, segments, segmentsRadius);\n    this.tangents = tangents;\n    this.normals = normals;\n    this.binormals = binormals;\n    this.path = path;\n    this.segments = segments;\n    this.radius = radius;\n    this.segmentsRadius = segmentsRadius;\n    this.closed = closed;\n  }\n}\nconst ParametricGeometries = {\n  klein: function(v, u, target) {\n    u *= Math.PI;\n    v *= 2 * Math.PI;\n    u = u * 2;\n    let x, z;\n    if (u < Math.PI) {\n      x = 3 * Math.cos(u) * (1 + Math.sin(u)) + 2 * (1 - Math.cos(u) / 2) * Math.cos(u) * Math.cos(v);\n      z = -8 * Math.sin(u) - 2 * (1 - Math.cos(u) / 2) * Math.sin(u) * Math.cos(v);\n    } else {\n      x = 3 * Math.cos(u) * (1 + Math.sin(u)) + 2 * (1 - Math.cos(u) / 2) * Math.cos(v + Math.PI);\n      z = -8 * Math.sin(u);\n    }\n    const y = -2 * (1 - Math.cos(u) / 2) * Math.sin(v);\n    target.set(x, y, z);\n  },\n  plane: function(width, height) {\n    return function(u, v, target) {\n      const x = u * width;\n      const y = 0;\n      const z = v * height;\n      target.set(x, y, z);\n    };\n  },\n  mobius: function(u, t, target) {\n    u = u - 0.5;\n    const v = 2 * Math.PI * t;\n    const a = 2;\n    const x = Math.cos(v) * (a + u * Math.cos(v / 2));\n    const y = Math.sin(v) * (a + u * Math.cos(v / 2));\n    const z = u * Math.sin(v / 2);\n    target.set(x, y, z);\n  },\n  mobius3d: function(u, t, target) {\n    u *= Math.PI;\n    t *= 2 * Math.PI;\n    u = u * 2;\n    const phi = u / 2;\n    const major = 2.25, a = 0.125, b = 0.65;\n    let x = a * Math.cos(t) * Math.cos(phi) - b * Math.sin(t) * Math.sin(phi);\n    const z = a * Math.cos(t) * Math.sin(phi) + b * Math.sin(t) * Math.cos(phi);\n    const y = (major + x) * Math.sin(u);\n    x = (major + x) * Math.cos(u);\n    target.set(x, y, z);\n  },\n  TubeGeometry,\n  TorusKnotGeometry: class TorusKnotGeometry extends TubeGeometry {\n    constructor(radius = 200, tube = 40, segmentsT = 64, segmentsR = 8, p = 2, q = 3) {\n      class TorusKnotCurve extends Curve {\n        getPoint(t, optionalTarget = new Vector3()) {\n          const point = optionalTarget;\n          t *= Math.PI * 2;\n          const r = 0.5;\n          const x = (1 + r * Math.cos(q * t)) * Math.cos(p * t);\n          const y = (1 + r * Math.cos(q * t)) * Math.sin(p * t);\n          const z = r * Math.sin(q * t);\n          return point.set(x, y, z).multiplyScalar(radius);\n        }\n      }\n      const segments = segmentsT;\n      const radiusSegments = segmentsR;\n      const extrudePath = new TorusKnotCurve();\n      super(extrudePath, segments, tube, radiusSegments, true, false);\n      this.radius = radius;\n      this.tube = tube;\n      this.segmentsT = segmentsT;\n      this.segmentsR = segmentsR;\n      this.p = p;\n      this.q = q;\n    }\n  },\n  SphereGeometry: class SphereGeometry extends ParametricGeometry {\n    constructor(size, u, v) {\n      function sphere(u2, v2, target) {\n        u2 *= Math.PI;\n        v2 *= 2 * Math.PI;\n        const x = size * Math.sin(u2) * Math.cos(v2);\n        const y = size * Math.sin(u2) * Math.sin(v2);\n        const z = size * Math.cos(u2);\n        target.set(x, y, z);\n      }\n      super(sphere, u, v);\n    }\n  },\n  PlaneGeometry: class PlaneGeometry extends ParametricGeometry {\n    constructor(width, depth, segmentsWidth, segmentsDepth) {\n      function plane(u, v, target) {\n        const x = u * width;\n        const y = 0;\n        const z = v * depth;\n        target.set(x, y, z);\n      }\n      super(plane, segmentsWidth, segmentsDepth);\n    }\n  }\n};\nexport {\n  ParametricGeometries\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}