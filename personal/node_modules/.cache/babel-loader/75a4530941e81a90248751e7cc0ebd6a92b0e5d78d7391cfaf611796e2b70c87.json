{"ast":null,"code":"import _classCallCheck from \"/home/krug/Coding/JavaScript/Websites/Personal/personal/node_modules/.pnpm/@babel+runtime@7.22.3/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/home/krug/Coding/JavaScript/Websites/Personal/personal/node_modules/.pnpm/@babel+runtime@7.22.3/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"/home/krug/Coding/JavaScript/Websites/Personal/personal/node_modules/.pnpm/@babel+runtime@7.22.3/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/home/krug/Coding/JavaScript/Websites/Personal/personal/node_modules/.pnpm/@babel+runtime@7.22.3/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { Color, UniformsUtils, ShaderMaterial, CustomBlending, AddEquation, OneFactor, SrcAlphaFactor, WebGLRenderTarget, HalfFloatType } from \"three\";\nimport { Pass, FullScreenQuad } from \"./Pass.js\";\nimport { CopyShader } from \"../shaders/CopyShader.js\";\nvar SSAARenderPass = /*#__PURE__*/function (_Pass) {\n  _inherits(SSAARenderPass, _Pass);\n  var _super = _createSuper(SSAARenderPass);\n  function SSAARenderPass(scene, camera, clearColor, clearAlpha) {\n    var _this;\n    _classCallCheck(this, SSAARenderPass);\n    _this = _super.call(this);\n    _this.scene = scene;\n    _this.camera = camera;\n    _this.sampleLevel = 4;\n    _this.unbiased = true;\n    _this.clearColor = clearColor !== void 0 ? clearColor : 0;\n    _this.clearAlpha = clearAlpha !== void 0 ? clearAlpha : 0;\n    _this._oldClearColor = new Color();\n    var copyShader = CopyShader;\n    _this.copyUniforms = UniformsUtils.clone(copyShader.uniforms);\n    _this.copyMaterial = new ShaderMaterial({\n      uniforms: _this.copyUniforms,\n      vertexShader: copyShader.vertexShader,\n      fragmentShader: copyShader.fragmentShader,\n      transparent: true,\n      depthTest: false,\n      depthWrite: false,\n      // do not use AdditiveBlending because it mixes the alpha channel instead of adding\n      blending: CustomBlending,\n      blendEquation: AddEquation,\n      blendDst: OneFactor,\n      blendDstAlpha: OneFactor,\n      blendSrc: SrcAlphaFactor,\n      blendSrcAlpha: OneFactor\n    });\n    _this.fsQuad = new FullScreenQuad(_this.copyMaterial);\n    return _this;\n  }\n  _createClass(SSAARenderPass, [{\n    key: \"dispose\",\n    value: function dispose() {\n      if (this.sampleRenderTarget) {\n        this.sampleRenderTarget.dispose();\n        this.sampleRenderTarget = null;\n      }\n      this.copyMaterial.dispose();\n      this.fsQuad.dispose();\n    }\n  }, {\n    key: \"setSize\",\n    value: function setSize(width, height) {\n      if (this.sampleRenderTarget) this.sampleRenderTarget.setSize(width, height);\n    }\n  }, {\n    key: \"render\",\n    value: function render(renderer, writeBuffer, readBuffer) {\n      if (!this.sampleRenderTarget) {\n        this.sampleRenderTarget = new WebGLRenderTarget(readBuffer.width, readBuffer.height, {\n          type: HalfFloatType\n        });\n        this.sampleRenderTarget.texture.name = \"SSAARenderPass.sample\";\n      }\n      var jitterOffsets = _JitterVectors[Math.max(0, Math.min(this.sampleLevel, 5))];\n      var autoClear = renderer.autoClear;\n      renderer.autoClear = false;\n      renderer.getClearColor(this._oldClearColor);\n      var oldClearAlpha = renderer.getClearAlpha();\n      var baseSampleWeight = 1 / jitterOffsets.length;\n      var roundingRange = 1 / 32;\n      this.copyUniforms[\"tDiffuse\"].value = this.sampleRenderTarget.texture;\n      var viewOffset = {\n        fullWidth: readBuffer.width,\n        fullHeight: readBuffer.height,\n        offsetX: 0,\n        offsetY: 0,\n        width: readBuffer.width,\n        height: readBuffer.height\n      };\n      var originalViewOffset = Object.assign({}, this.camera.view);\n      if (originalViewOffset.enabled) Object.assign(viewOffset, originalViewOffset);\n      for (var i = 0; i < jitterOffsets.length; i++) {\n        var jitterOffset = jitterOffsets[i];\n        if (this.camera.setViewOffset) {\n          this.camera.setViewOffset(viewOffset.fullWidth, viewOffset.fullHeight, viewOffset.offsetX + jitterOffset[0] * 0.0625, viewOffset.offsetY + jitterOffset[1] * 0.0625,\n          // 0.0625 = 1 / 16\n          viewOffset.width, viewOffset.height);\n        }\n        var sampleWeight = baseSampleWeight;\n        if (this.unbiased) {\n          var uniformCenteredDistribution = -0.5 + (i + 0.5) / jitterOffsets.length;\n          sampleWeight += roundingRange * uniformCenteredDistribution;\n        }\n        this.copyUniforms[\"opacity\"].value = sampleWeight;\n        renderer.setClearColor(this.clearColor, this.clearAlpha);\n        renderer.setRenderTarget(this.sampleRenderTarget);\n        renderer.clear();\n        renderer.render(this.scene, this.camera);\n        renderer.setRenderTarget(this.renderToScreen ? null : writeBuffer);\n        if (i === 0) {\n          renderer.setClearColor(0, 0);\n          renderer.clear();\n        }\n        this.fsQuad.render(renderer);\n      }\n      if (this.camera.setViewOffset && originalViewOffset.enabled) {\n        this.camera.setViewOffset(originalViewOffset.fullWidth, originalViewOffset.fullHeight, originalViewOffset.offsetX, originalViewOffset.offsetY, originalViewOffset.width, originalViewOffset.height);\n      } else if (this.camera.clearViewOffset) {\n        this.camera.clearViewOffset();\n      }\n      renderer.autoClear = autoClear;\n      renderer.setClearColor(this._oldClearColor, oldClearAlpha);\n    }\n  }]);\n  return SSAARenderPass;\n}(Pass);\nvar _JitterVectors = [[[0, 0]], [[4, 4], [-4, -4]], [[-2, -6], [6, -2], [-6, 2], [2, 6]], [[1, -3], [-1, 3], [5, 1], [-3, -5], [-5, 5], [-7, -1], [3, 7], [7, -7]], [[1, 1], [-1, -3], [-3, 2], [4, -1], [-5, -2], [2, 5], [5, 3], [3, -5], [-2, 6], [0, -7], [-4, -6], [-6, 4], [-8, 0], [7, -4], [6, 7], [-7, -8]], [[-4, -7], [-7, -5], [-3, -5], [-5, -4], [-1, -4], [-2, -2], [-6, -1], [-4, 0], [-7, 1], [-1, 2], [-6, 3], [-3, 3], [-7, 6], [-3, 6], [-5, 7], [-1, 7], [5, -7], [1, -6], [6, -5], [4, -4], [2, -3], [7, -2], [1, -1], [4, -1], [2, 1], [6, 2], [0, 4], [4, 4], [2, 5], [7, 5], [5, 6], [3, 7]]];\nexport { SSAARenderPass };","map":{"version":3,"names":["Color","UniformsUtils","ShaderMaterial","CustomBlending","AddEquation","OneFactor","SrcAlphaFactor","WebGLRenderTarget","HalfFloatType","Pass","FullScreenQuad","CopyShader","SSAARenderPass","_Pass","_inherits","_super","_createSuper","scene","camera","clearColor","clearAlpha","_this","_classCallCheck","call","sampleLevel","unbiased","_oldClearColor","copyShader","copyUniforms","clone","uniforms","copyMaterial","vertexShader","fragmentShader","transparent","depthTest","depthWrite","blending","blendEquation","blendDst","blendDstAlpha","blendSrc","blendSrcAlpha","fsQuad","_createClass","key","value","dispose","sampleRenderTarget","setSize","width","height","render","renderer","writeBuffer","readBuffer","type","texture","name","jitterOffsets","_JitterVectors","Math","max","min","autoClear","getClearColor","oldClearAlpha","getClearAlpha","baseSampleWeight","length","roundingRange","viewOffset","fullWidth","fullHeight","offsetX","offsetY","originalViewOffset","Object","assign","view","enabled","i","jitterOffset","setViewOffset","sampleWeight","uniformCenteredDistribution","setClearColor","setRenderTarget","clear","renderToScreen","clearViewOffset"],"sources":["/home/krug/Coding/JavaScript/Websites/Personal/personal/node_modules/.pnpm/three-stdlib@2.23.7_three@0.151.3/node_modules/three-stdlib/postprocessing/SSAARenderPass.js"],"sourcesContent":["import { Color, UniformsUtils, ShaderMaterial, CustomBlending, AddEquation, OneFactor, SrcAlphaFactor, WebGLRenderTarget, HalfFloatType } from \"three\";\nimport { Pass, FullScreenQuad } from \"./Pass.js\";\nimport { CopyShader } from \"../shaders/CopyShader.js\";\nclass SSAARenderPass extends Pass {\n  constructor(scene, camera, clearColor, clearAlpha) {\n    super();\n    this.scene = scene;\n    this.camera = camera;\n    this.sampleLevel = 4;\n    this.unbiased = true;\n    this.clearColor = clearColor !== void 0 ? clearColor : 0;\n    this.clearAlpha = clearAlpha !== void 0 ? clearAlpha : 0;\n    this._oldClearColor = new Color();\n    const copyShader = CopyShader;\n    this.copyUniforms = UniformsUtils.clone(copyShader.uniforms);\n    this.copyMaterial = new ShaderMaterial({\n      uniforms: this.copyUniforms,\n      vertexShader: copyShader.vertexShader,\n      fragmentShader: copyShader.fragmentShader,\n      transparent: true,\n      depthTest: false,\n      depthWrite: false,\n      // do not use AdditiveBlending because it mixes the alpha channel instead of adding\n      blending: CustomBlending,\n      blendEquation: AddEquation,\n      blendDst: OneFactor,\n      blendDstAlpha: OneFactor,\n      blendSrc: SrcAlphaFactor,\n      blendSrcAlpha: OneFactor\n    });\n    this.fsQuad = new FullScreenQuad(this.copyMaterial);\n  }\n  dispose() {\n    if (this.sampleRenderTarget) {\n      this.sampleRenderTarget.dispose();\n      this.sampleRenderTarget = null;\n    }\n    this.copyMaterial.dispose();\n    this.fsQuad.dispose();\n  }\n  setSize(width, height) {\n    if (this.sampleRenderTarget)\n      this.sampleRenderTarget.setSize(width, height);\n  }\n  render(renderer, writeBuffer, readBuffer) {\n    if (!this.sampleRenderTarget) {\n      this.sampleRenderTarget = new WebGLRenderTarget(readBuffer.width, readBuffer.height, { type: HalfFloatType });\n      this.sampleRenderTarget.texture.name = \"SSAARenderPass.sample\";\n    }\n    const jitterOffsets = _JitterVectors[Math.max(0, Math.min(this.sampleLevel, 5))];\n    const autoClear = renderer.autoClear;\n    renderer.autoClear = false;\n    renderer.getClearColor(this._oldClearColor);\n    const oldClearAlpha = renderer.getClearAlpha();\n    const baseSampleWeight = 1 / jitterOffsets.length;\n    const roundingRange = 1 / 32;\n    this.copyUniforms[\"tDiffuse\"].value = this.sampleRenderTarget.texture;\n    const viewOffset = {\n      fullWidth: readBuffer.width,\n      fullHeight: readBuffer.height,\n      offsetX: 0,\n      offsetY: 0,\n      width: readBuffer.width,\n      height: readBuffer.height\n    };\n    const originalViewOffset = Object.assign({}, this.camera.view);\n    if (originalViewOffset.enabled)\n      Object.assign(viewOffset, originalViewOffset);\n    for (let i = 0; i < jitterOffsets.length; i++) {\n      const jitterOffset = jitterOffsets[i];\n      if (this.camera.setViewOffset) {\n        this.camera.setViewOffset(\n          viewOffset.fullWidth,\n          viewOffset.fullHeight,\n          viewOffset.offsetX + jitterOffset[0] * 0.0625,\n          viewOffset.offsetY + jitterOffset[1] * 0.0625,\n          // 0.0625 = 1 / 16\n          viewOffset.width,\n          viewOffset.height\n        );\n      }\n      let sampleWeight = baseSampleWeight;\n      if (this.unbiased) {\n        const uniformCenteredDistribution = -0.5 + (i + 0.5) / jitterOffsets.length;\n        sampleWeight += roundingRange * uniformCenteredDistribution;\n      }\n      this.copyUniforms[\"opacity\"].value = sampleWeight;\n      renderer.setClearColor(this.clearColor, this.clearAlpha);\n      renderer.setRenderTarget(this.sampleRenderTarget);\n      renderer.clear();\n      renderer.render(this.scene, this.camera);\n      renderer.setRenderTarget(this.renderToScreen ? null : writeBuffer);\n      if (i === 0) {\n        renderer.setClearColor(0, 0);\n        renderer.clear();\n      }\n      this.fsQuad.render(renderer);\n    }\n    if (this.camera.setViewOffset && originalViewOffset.enabled) {\n      this.camera.setViewOffset(\n        originalViewOffset.fullWidth,\n        originalViewOffset.fullHeight,\n        originalViewOffset.offsetX,\n        originalViewOffset.offsetY,\n        originalViewOffset.width,\n        originalViewOffset.height\n      );\n    } else if (this.camera.clearViewOffset) {\n      this.camera.clearViewOffset();\n    }\n    renderer.autoClear = autoClear;\n    renderer.setClearColor(this._oldClearColor, oldClearAlpha);\n  }\n}\nconst _JitterVectors = [\n  [\n    [0, 0]\n  ],\n  [\n    [4, 4],\n    [-4, -4]\n  ],\n  [\n    [-2, -6],\n    [6, -2],\n    [-6, 2],\n    [2, 6]\n  ],\n  [\n    [1, -3],\n    [-1, 3],\n    [5, 1],\n    [-3, -5],\n    [-5, 5],\n    [-7, -1],\n    [3, 7],\n    [7, -7]\n  ],\n  [\n    [1, 1],\n    [-1, -3],\n    [-3, 2],\n    [4, -1],\n    [-5, -2],\n    [2, 5],\n    [5, 3],\n    [3, -5],\n    [-2, 6],\n    [0, -7],\n    [-4, -6],\n    [-6, 4],\n    [-8, 0],\n    [7, -4],\n    [6, 7],\n    [-7, -8]\n  ],\n  [\n    [-4, -7],\n    [-7, -5],\n    [-3, -5],\n    [-5, -4],\n    [-1, -4],\n    [-2, -2],\n    [-6, -1],\n    [-4, 0],\n    [-7, 1],\n    [-1, 2],\n    [-6, 3],\n    [-3, 3],\n    [-7, 6],\n    [-3, 6],\n    [-5, 7],\n    [-1, 7],\n    [5, -7],\n    [1, -6],\n    [6, -5],\n    [4, -4],\n    [2, -3],\n    [7, -2],\n    [1, -1],\n    [4, -1],\n    [2, 1],\n    [6, 2],\n    [0, 4],\n    [4, 4],\n    [2, 5],\n    [7, 5],\n    [5, 6],\n    [3, 7]\n  ]\n];\nexport {\n  SSAARenderPass\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}