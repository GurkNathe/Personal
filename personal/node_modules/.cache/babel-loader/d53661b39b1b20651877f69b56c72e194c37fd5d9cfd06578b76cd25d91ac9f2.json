{"ast":null,"code":"var __defProp = Object.defineProperty;\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value\n}) : obj[key] = value;\nvar __publicField = (obj, key, value) => {\n  __defNormalProp(obj, typeof key !== \"symbol\" ? key + \"\" : key, value);\n  return value;\n};\nimport { Color, DepthTexture, UnsignedShortType, NearestFilter, WebGLRenderTarget, HalfFloatType, ShaderMaterial, UniformsUtils, NoBlending, MeshNormalMaterial, MeshBasicMaterial, SrcAlphaFactor, OneMinusSrcAlphaFactor, AddEquation, NormalBlending } from \"three\";\nimport { Pass, FullScreenQuad } from \"./Pass.js\";\nimport { SSRShader, SSRBlurShader, SSRDepthShader } from \"../shaders/SSRShader.js\";\nimport { CopyShader } from \"../shaders/CopyShader.js\";\nconst _SSRPass = class extends Pass {\n  constructor(_ref) {\n    let {\n      renderer,\n      scene,\n      camera,\n      width,\n      height,\n      selects,\n      bouncing = false,\n      groundReflector\n    } = _ref;\n    super();\n    this.width = width !== void 0 ? width : 512;\n    this.height = height !== void 0 ? height : 512;\n    this.clear = true;\n    this.renderer = renderer;\n    this.scene = scene;\n    this.camera = camera;\n    this.groundReflector = groundReflector;\n    this.opacity = SSRShader.uniforms.opacity.value;\n    this.output = 0;\n    this.maxDistance = SSRShader.uniforms.maxDistance.value;\n    this.thickness = SSRShader.uniforms.thickness.value;\n    this.tempColor = new Color();\n    this._selects = selects;\n    this.selective = Array.isArray(this._selects);\n    Object.defineProperty(this, \"selects\", {\n      get() {\n        return this._selects;\n      },\n      set(val) {\n        if (this._selects === val) return;\n        this._selects = val;\n        if (Array.isArray(val)) {\n          this.selective = true;\n          this.ssrMaterial.defines.SELECTIVE = true;\n          this.ssrMaterial.needsUpdate = true;\n        } else {\n          this.selective = false;\n          this.ssrMaterial.defines.SELECTIVE = false;\n          this.ssrMaterial.needsUpdate = true;\n        }\n      }\n    });\n    this._bouncing = bouncing;\n    Object.defineProperty(this, \"bouncing\", {\n      get() {\n        return this._bouncing;\n      },\n      set(val) {\n        if (this._bouncing === val) return;\n        this._bouncing = val;\n        if (val) {\n          this.ssrMaterial.uniforms[\"tDiffuse\"].value = this.prevRenderTarget.texture;\n        } else {\n          this.ssrMaterial.uniforms[\"tDiffuse\"].value = this.beautyRenderTarget.texture;\n        }\n      }\n    });\n    this.blur = true;\n    this._distanceAttenuation = SSRShader.defines.DISTANCE_ATTENUATION;\n    Object.defineProperty(this, \"distanceAttenuation\", {\n      get() {\n        return this._distanceAttenuation;\n      },\n      set(val) {\n        if (this._distanceAttenuation === val) return;\n        this._distanceAttenuation = val;\n        this.ssrMaterial.defines.DISTANCE_ATTENUATION = val;\n        this.ssrMaterial.needsUpdate = true;\n      }\n    });\n    this._fresnel = SSRShader.defines.FRESNEL;\n    Object.defineProperty(this, \"fresnel\", {\n      get() {\n        return this._fresnel;\n      },\n      set(val) {\n        if (this._fresnel === val) return;\n        this._fresnel = val;\n        this.ssrMaterial.defines.FRESNEL = val;\n        this.ssrMaterial.needsUpdate = true;\n      }\n    });\n    this._infiniteThick = SSRShader.defines.INFINITE_THICK;\n    Object.defineProperty(this, \"infiniteThick\", {\n      get() {\n        return this._infiniteThick;\n      },\n      set(val) {\n        if (this._infiniteThick === val) return;\n        this._infiniteThick = val;\n        this.ssrMaterial.defines.INFINITE_THICK = val;\n        this.ssrMaterial.needsUpdate = true;\n      }\n    });\n    const depthTexture = new DepthTexture();\n    depthTexture.type = UnsignedShortType;\n    depthTexture.minFilter = NearestFilter;\n    depthTexture.magFilter = NearestFilter;\n    this.beautyRenderTarget = new WebGLRenderTarget(this.width, this.height, {\n      minFilter: NearestFilter,\n      magFilter: NearestFilter,\n      type: HalfFloatType,\n      depthTexture,\n      depthBuffer: true\n    });\n    this.prevRenderTarget = new WebGLRenderTarget(this.width, this.height, {\n      minFilter: NearestFilter,\n      magFilter: NearestFilter\n    });\n    this.normalRenderTarget = new WebGLRenderTarget(this.width, this.height, {\n      minFilter: NearestFilter,\n      magFilter: NearestFilter,\n      type: HalfFloatType\n    });\n    this.metalnessRenderTarget = new WebGLRenderTarget(this.width, this.height, {\n      minFilter: NearestFilter,\n      magFilter: NearestFilter,\n      type: HalfFloatType\n    });\n    this.ssrRenderTarget = new WebGLRenderTarget(this.width, this.height, {\n      minFilter: NearestFilter,\n      magFilter: NearestFilter\n    });\n    this.blurRenderTarget = this.ssrRenderTarget.clone();\n    this.blurRenderTarget2 = this.ssrRenderTarget.clone();\n    this.ssrMaterial = new ShaderMaterial({\n      defines: Object.assign({}, SSRShader.defines, {\n        MAX_STEP: Math.sqrt(this.width * this.width + this.height * this.height)\n      }),\n      uniforms: UniformsUtils.clone(SSRShader.uniforms),\n      vertexShader: SSRShader.vertexShader,\n      fragmentShader: SSRShader.fragmentShader,\n      blending: NoBlending\n    });\n    this.ssrMaterial.uniforms[\"tDiffuse\"].value = this.beautyRenderTarget.texture;\n    this.ssrMaterial.uniforms[\"tNormal\"].value = this.normalRenderTarget.texture;\n    this.ssrMaterial.defines.SELECTIVE = this.selective;\n    this.ssrMaterial.needsUpdate = true;\n    this.ssrMaterial.uniforms[\"tMetalness\"].value = this.metalnessRenderTarget.texture;\n    this.ssrMaterial.uniforms[\"tDepth\"].value = this.beautyRenderTarget.depthTexture;\n    this.ssrMaterial.uniforms[\"cameraNear\"].value = this.camera.near;\n    this.ssrMaterial.uniforms[\"cameraFar\"].value = this.camera.far;\n    this.ssrMaterial.uniforms[\"thickness\"].value = this.thickness;\n    this.ssrMaterial.uniforms[\"resolution\"].value.set(this.width, this.height);\n    this.ssrMaterial.uniforms[\"cameraProjectionMatrix\"].value.copy(this.camera.projectionMatrix);\n    this.ssrMaterial.uniforms[\"cameraInverseProjectionMatrix\"].value.copy(this.camera.projectionMatrixInverse);\n    this.normalMaterial = new MeshNormalMaterial();\n    this.normalMaterial.blending = NoBlending;\n    this.metalnessOnMaterial = new MeshBasicMaterial({\n      color: \"white\"\n    });\n    this.metalnessOffMaterial = new MeshBasicMaterial({\n      color: \"black\"\n    });\n    this.blurMaterial = new ShaderMaterial({\n      defines: Object.assign({}, SSRBlurShader.defines),\n      uniforms: UniformsUtils.clone(SSRBlurShader.uniforms),\n      vertexShader: SSRBlurShader.vertexShader,\n      fragmentShader: SSRBlurShader.fragmentShader\n    });\n    this.blurMaterial.uniforms[\"tDiffuse\"].value = this.ssrRenderTarget.texture;\n    this.blurMaterial.uniforms[\"resolution\"].value.set(this.width, this.height);\n    this.blurMaterial2 = new ShaderMaterial({\n      defines: Object.assign({}, SSRBlurShader.defines),\n      uniforms: UniformsUtils.clone(SSRBlurShader.uniforms),\n      vertexShader: SSRBlurShader.vertexShader,\n      fragmentShader: SSRBlurShader.fragmentShader\n    });\n    this.blurMaterial2.uniforms[\"tDiffuse\"].value = this.blurRenderTarget.texture;\n    this.blurMaterial2.uniforms[\"resolution\"].value.set(this.width, this.height);\n    this.depthRenderMaterial = new ShaderMaterial({\n      defines: Object.assign({}, SSRDepthShader.defines),\n      uniforms: UniformsUtils.clone(SSRDepthShader.uniforms),\n      vertexShader: SSRDepthShader.vertexShader,\n      fragmentShader: SSRDepthShader.fragmentShader,\n      blending: NoBlending\n    });\n    this.depthRenderMaterial.uniforms[\"tDepth\"].value = this.beautyRenderTarget.depthTexture;\n    this.depthRenderMaterial.uniforms[\"cameraNear\"].value = this.camera.near;\n    this.depthRenderMaterial.uniforms[\"cameraFar\"].value = this.camera.far;\n    this.copyMaterial = new ShaderMaterial({\n      uniforms: UniformsUtils.clone(CopyShader.uniforms),\n      vertexShader: CopyShader.vertexShader,\n      fragmentShader: CopyShader.fragmentShader,\n      transparent: true,\n      depthTest: false,\n      depthWrite: false,\n      blendSrc: SrcAlphaFactor,\n      blendDst: OneMinusSrcAlphaFactor,\n      blendEquation: AddEquation,\n      blendSrcAlpha: SrcAlphaFactor,\n      blendDstAlpha: OneMinusSrcAlphaFactor,\n      blendEquationAlpha: AddEquation\n      // premultipliedAlpha:true,\n    });\n\n    this.fsQuad = new FullScreenQuad(null);\n    this.originalClearColor = new Color();\n  }\n  dispose() {\n    this.beautyRenderTarget.dispose();\n    this.prevRenderTarget.dispose();\n    this.normalRenderTarget.dispose();\n    this.metalnessRenderTarget.dispose();\n    this.ssrRenderTarget.dispose();\n    this.blurRenderTarget.dispose();\n    this.blurRenderTarget2.dispose();\n    this.normalMaterial.dispose();\n    this.metalnessOnMaterial.dispose();\n    this.metalnessOffMaterial.dispose();\n    this.blurMaterial.dispose();\n    this.blurMaterial2.dispose();\n    this.copyMaterial.dispose();\n    this.depthRenderMaterial.dispose();\n    this.fsQuad.dispose();\n  }\n  render(renderer, writeBuffer) {\n    renderer.setRenderTarget(this.beautyRenderTarget);\n    renderer.clear();\n    if (this.groundReflector) {\n      this.groundReflector.visible = false;\n      this.groundReflector.doRender(this.renderer, this.scene, this.camera);\n      this.groundReflector.visible = true;\n    }\n    renderer.render(this.scene, this.camera);\n    if (this.groundReflector) this.groundReflector.visible = false;\n    this.renderOverride(renderer, this.normalMaterial, this.normalRenderTarget, 0, 0);\n    if (this.selective) {\n      this.renderMetalness(renderer, this.metalnessOnMaterial, this.metalnessRenderTarget, 0, 0);\n    }\n    this.ssrMaterial.uniforms[\"opacity\"].value = this.opacity;\n    this.ssrMaterial.uniforms[\"maxDistance\"].value = this.maxDistance;\n    this.ssrMaterial.uniforms[\"thickness\"].value = this.thickness;\n    this.renderPass(renderer, this.ssrMaterial, this.ssrRenderTarget);\n    if (this.blur) {\n      this.renderPass(renderer, this.blurMaterial, this.blurRenderTarget);\n      this.renderPass(renderer, this.blurMaterial2, this.blurRenderTarget2);\n    }\n    switch (this.output) {\n      case _SSRPass.OUTPUT.Default:\n        if (this.bouncing) {\n          this.copyMaterial.uniforms[\"tDiffuse\"].value = this.beautyRenderTarget.texture;\n          this.copyMaterial.blending = NoBlending;\n          this.renderPass(renderer, this.copyMaterial, this.prevRenderTarget);\n          if (this.blur) this.copyMaterial.uniforms[\"tDiffuse\"].value = this.blurRenderTarget2.texture;else this.copyMaterial.uniforms[\"tDiffuse\"].value = this.ssrRenderTarget.texture;\n          this.copyMaterial.blending = NormalBlending;\n          this.renderPass(renderer, this.copyMaterial, this.prevRenderTarget);\n          this.copyMaterial.uniforms[\"tDiffuse\"].value = this.prevRenderTarget.texture;\n          this.copyMaterial.blending = NoBlending;\n          this.renderPass(renderer, this.copyMaterial, this.renderToScreen ? null : writeBuffer);\n        } else {\n          this.copyMaterial.uniforms[\"tDiffuse\"].value = this.beautyRenderTarget.texture;\n          this.copyMaterial.blending = NoBlending;\n          this.renderPass(renderer, this.copyMaterial, this.renderToScreen ? null : writeBuffer);\n          if (this.blur) this.copyMaterial.uniforms[\"tDiffuse\"].value = this.blurRenderTarget2.texture;else this.copyMaterial.uniforms[\"tDiffuse\"].value = this.ssrRenderTarget.texture;\n          this.copyMaterial.blending = NormalBlending;\n          this.renderPass(renderer, this.copyMaterial, this.renderToScreen ? null : writeBuffer);\n        }\n        break;\n      case _SSRPass.OUTPUT.SSR:\n        if (this.blur) this.copyMaterial.uniforms[\"tDiffuse\"].value = this.blurRenderTarget2.texture;else this.copyMaterial.uniforms[\"tDiffuse\"].value = this.ssrRenderTarget.texture;\n        this.copyMaterial.blending = NoBlending;\n        this.renderPass(renderer, this.copyMaterial, this.renderToScreen ? null : writeBuffer);\n        if (this.bouncing) {\n          if (this.blur) this.copyMaterial.uniforms[\"tDiffuse\"].value = this.blurRenderTarget2.texture;else this.copyMaterial.uniforms[\"tDiffuse\"].value = this.beautyRenderTarget.texture;\n          this.copyMaterial.blending = NoBlending;\n          this.renderPass(renderer, this.copyMaterial, this.prevRenderTarget);\n          this.copyMaterial.uniforms[\"tDiffuse\"].value = this.ssrRenderTarget.texture;\n          this.copyMaterial.blending = NormalBlending;\n          this.renderPass(renderer, this.copyMaterial, this.prevRenderTarget);\n        }\n        break;\n      case _SSRPass.OUTPUT.Beauty:\n        this.copyMaterial.uniforms[\"tDiffuse\"].value = this.beautyRenderTarget.texture;\n        this.copyMaterial.blending = NoBlending;\n        this.renderPass(renderer, this.copyMaterial, this.renderToScreen ? null : writeBuffer);\n        break;\n      case _SSRPass.OUTPUT.Depth:\n        this.renderPass(renderer, this.depthRenderMaterial, this.renderToScreen ? null : writeBuffer);\n        break;\n      case _SSRPass.OUTPUT.Normal:\n        this.copyMaterial.uniforms[\"tDiffuse\"].value = this.normalRenderTarget.texture;\n        this.copyMaterial.blending = NoBlending;\n        this.renderPass(renderer, this.copyMaterial, this.renderToScreen ? null : writeBuffer);\n        break;\n      case _SSRPass.OUTPUT.Metalness:\n        this.copyMaterial.uniforms[\"tDiffuse\"].value = this.metalnessRenderTarget.texture;\n        this.copyMaterial.blending = NoBlending;\n        this.renderPass(renderer, this.copyMaterial, this.renderToScreen ? null : writeBuffer);\n        break;\n      default:\n        console.warn(\"THREE.SSRPass: Unknown output type.\");\n    }\n  }\n  renderPass(renderer, passMaterial, renderTarget, clearColor, clearAlpha) {\n    this.originalClearColor.copy(renderer.getClearColor(this.tempColor));\n    const originalClearAlpha = renderer.getClearAlpha(this.tempColor);\n    const originalAutoClear = renderer.autoClear;\n    renderer.setRenderTarget(renderTarget);\n    renderer.autoClear = false;\n    if (clearColor !== void 0 && clearColor !== null) {\n      renderer.setClearColor(clearColor);\n      renderer.setClearAlpha(clearAlpha || 0);\n      renderer.clear();\n    }\n    this.fsQuad.material = passMaterial;\n    this.fsQuad.render(renderer);\n    renderer.autoClear = originalAutoClear;\n    renderer.setClearColor(this.originalClearColor);\n    renderer.setClearAlpha(originalClearAlpha);\n  }\n  renderOverride(renderer, overrideMaterial, renderTarget, clearColor, clearAlpha) {\n    this.originalClearColor.copy(renderer.getClearColor(this.tempColor));\n    const originalClearAlpha = renderer.getClearAlpha(this.tempColor);\n    const originalAutoClear = renderer.autoClear;\n    renderer.setRenderTarget(renderTarget);\n    renderer.autoClear = false;\n    clearColor = overrideMaterial.clearColor || clearColor;\n    clearAlpha = overrideMaterial.clearAlpha || clearAlpha;\n    if (clearColor !== void 0 && clearColor !== null) {\n      renderer.setClearColor(clearColor);\n      renderer.setClearAlpha(clearAlpha || 0);\n      renderer.clear();\n    }\n    this.scene.overrideMaterial = overrideMaterial;\n    renderer.render(this.scene, this.camera);\n    this.scene.overrideMaterial = null;\n    renderer.autoClear = originalAutoClear;\n    renderer.setClearColor(this.originalClearColor);\n    renderer.setClearAlpha(originalClearAlpha);\n  }\n  renderMetalness(renderer, overrideMaterial, renderTarget, clearColor, clearAlpha) {\n    this.originalClearColor.copy(renderer.getClearColor(this.tempColor));\n    const originalClearAlpha = renderer.getClearAlpha(this.tempColor);\n    const originalAutoClear = renderer.autoClear;\n    renderer.setRenderTarget(renderTarget);\n    renderer.autoClear = false;\n    clearColor = overrideMaterial.clearColor || clearColor;\n    clearAlpha = overrideMaterial.clearAlpha || clearAlpha;\n    if (clearColor !== void 0 && clearColor !== null) {\n      renderer.setClearColor(clearColor);\n      renderer.setClearAlpha(clearAlpha || 0);\n      renderer.clear();\n    }\n    this.scene.traverseVisible(child => {\n      child._SSRPassBackupMaterial = child.material;\n      if (this._selects.includes(child)) {\n        child.material = this.metalnessOnMaterial;\n      } else {\n        child.material = this.metalnessOffMaterial;\n      }\n    });\n    renderer.render(this.scene, this.camera);\n    this.scene.traverseVisible(child => {\n      child.material = child._SSRPassBackupMaterial;\n    });\n    renderer.autoClear = originalAutoClear;\n    renderer.setClearColor(this.originalClearColor);\n    renderer.setClearAlpha(originalClearAlpha);\n  }\n  setSize(width, height) {\n    this.width = width;\n    this.height = height;\n    this.ssrMaterial.defines.MAX_STEP = Math.sqrt(width * width + height * height);\n    this.ssrMaterial.needsUpdate = true;\n    this.beautyRenderTarget.setSize(width, height);\n    this.prevRenderTarget.setSize(width, height);\n    this.ssrRenderTarget.setSize(width, height);\n    this.normalRenderTarget.setSize(width, height);\n    this.metalnessRenderTarget.setSize(width, height);\n    this.blurRenderTarget.setSize(width, height);\n    this.blurRenderTarget2.setSize(width, height);\n    this.ssrMaterial.uniforms[\"resolution\"].value.set(width, height);\n    this.ssrMaterial.uniforms[\"cameraProjectionMatrix\"].value.copy(this.camera.projectionMatrix);\n    this.ssrMaterial.uniforms[\"cameraInverseProjectionMatrix\"].value.copy(this.camera.projectionMatrixInverse);\n    this.blurMaterial.uniforms[\"resolution\"].value.set(width, height);\n    this.blurMaterial2.uniforms[\"resolution\"].value.set(width, height);\n  }\n};\nlet SSRPass = _SSRPass;\n__publicField(SSRPass, \"OUTPUT\", {\n  Default: 0,\n  SSR: 1,\n  Beauty: 3,\n  Depth: 4,\n  Normal: 5,\n  Metalness: 7\n});\nexport { SSRPass };","map":{"version":3,"names":["__defProp","Object","defineProperty","__defNormalProp","obj","key","value","enumerable","configurable","writable","__publicField","Color","DepthTexture","UnsignedShortType","NearestFilter","WebGLRenderTarget","HalfFloatType","ShaderMaterial","UniformsUtils","NoBlending","MeshNormalMaterial","MeshBasicMaterial","SrcAlphaFactor","OneMinusSrcAlphaFactor","AddEquation","NormalBlending","Pass","FullScreenQuad","SSRShader","SSRBlurShader","SSRDepthShader","CopyShader","_SSRPass","constructor","_ref","renderer","scene","camera","width","height","selects","bouncing","groundReflector","clear","opacity","uniforms","output","maxDistance","thickness","tempColor","_selects","selective","Array","isArray","get","set","val","ssrMaterial","defines","SELECTIVE","needsUpdate","_bouncing","prevRenderTarget","texture","beautyRenderTarget","blur","_distanceAttenuation","DISTANCE_ATTENUATION","_fresnel","FRESNEL","_infiniteThick","INFINITE_THICK","depthTexture","type","minFilter","magFilter","depthBuffer","normalRenderTarget","metalnessRenderTarget","ssrRenderTarget","blurRenderTarget","clone","blurRenderTarget2","assign","MAX_STEP","Math","sqrt","vertexShader","fragmentShader","blending","near","far","copy","projectionMatrix","projectionMatrixInverse","normalMaterial","metalnessOnMaterial","color","metalnessOffMaterial","blurMaterial","blurMaterial2","depthRenderMaterial","copyMaterial","transparent","depthTest","depthWrite","blendSrc","blendDst","blendEquation","blendSrcAlpha","blendDstAlpha","blendEquationAlpha","fsQuad","originalClearColor","dispose","render","writeBuffer","setRenderTarget","visible","doRender","renderOverride","renderMetalness","renderPass","OUTPUT","Default","renderToScreen","SSR","Beauty","Depth","Normal","Metalness","console","warn","passMaterial","renderTarget","clearColor","clearAlpha","getClearColor","originalClearAlpha","getClearAlpha","originalAutoClear","autoClear","setClearColor","setClearAlpha","material","overrideMaterial","traverseVisible","child","_SSRPassBackupMaterial","includes","setSize","SSRPass"],"sources":["/home/krug/Coding/JavaScript/Websites/Personal/personal/node_modules/.pnpm/three-stdlib@2.23.7_three@0.151.3/node_modules/three-stdlib/postprocessing/SSRPass.js"],"sourcesContent":["var __defProp = Object.defineProperty;\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;\nvar __publicField = (obj, key, value) => {\n  __defNormalProp(obj, typeof key !== \"symbol\" ? key + \"\" : key, value);\n  return value;\n};\nimport { Color, DepthTexture, UnsignedShortType, NearestFilter, WebGLRenderTarget, HalfFloatType, ShaderMaterial, UniformsUtils, NoBlending, MeshNormalMaterial, MeshBasicMaterial, SrcAlphaFactor, OneMinusSrcAlphaFactor, AddEquation, NormalBlending } from \"three\";\nimport { Pass, FullScreenQuad } from \"./Pass.js\";\nimport { SSRShader, SSRBlurShader, SSRDepthShader } from \"../shaders/SSRShader.js\";\nimport { CopyShader } from \"../shaders/CopyShader.js\";\nconst _SSRPass = class extends Pass {\n  constructor({ renderer, scene, camera, width, height, selects, bouncing = false, groundReflector }) {\n    super();\n    this.width = width !== void 0 ? width : 512;\n    this.height = height !== void 0 ? height : 512;\n    this.clear = true;\n    this.renderer = renderer;\n    this.scene = scene;\n    this.camera = camera;\n    this.groundReflector = groundReflector;\n    this.opacity = SSRShader.uniforms.opacity.value;\n    this.output = 0;\n    this.maxDistance = SSRShader.uniforms.maxDistance.value;\n    this.thickness = SSRShader.uniforms.thickness.value;\n    this.tempColor = new Color();\n    this._selects = selects;\n    this.selective = Array.isArray(this._selects);\n    Object.defineProperty(this, \"selects\", {\n      get() {\n        return this._selects;\n      },\n      set(val) {\n        if (this._selects === val)\n          return;\n        this._selects = val;\n        if (Array.isArray(val)) {\n          this.selective = true;\n          this.ssrMaterial.defines.SELECTIVE = true;\n          this.ssrMaterial.needsUpdate = true;\n        } else {\n          this.selective = false;\n          this.ssrMaterial.defines.SELECTIVE = false;\n          this.ssrMaterial.needsUpdate = true;\n        }\n      }\n    });\n    this._bouncing = bouncing;\n    Object.defineProperty(this, \"bouncing\", {\n      get() {\n        return this._bouncing;\n      },\n      set(val) {\n        if (this._bouncing === val)\n          return;\n        this._bouncing = val;\n        if (val) {\n          this.ssrMaterial.uniforms[\"tDiffuse\"].value = this.prevRenderTarget.texture;\n        } else {\n          this.ssrMaterial.uniforms[\"tDiffuse\"].value = this.beautyRenderTarget.texture;\n        }\n      }\n    });\n    this.blur = true;\n    this._distanceAttenuation = SSRShader.defines.DISTANCE_ATTENUATION;\n    Object.defineProperty(this, \"distanceAttenuation\", {\n      get() {\n        return this._distanceAttenuation;\n      },\n      set(val) {\n        if (this._distanceAttenuation === val)\n          return;\n        this._distanceAttenuation = val;\n        this.ssrMaterial.defines.DISTANCE_ATTENUATION = val;\n        this.ssrMaterial.needsUpdate = true;\n      }\n    });\n    this._fresnel = SSRShader.defines.FRESNEL;\n    Object.defineProperty(this, \"fresnel\", {\n      get() {\n        return this._fresnel;\n      },\n      set(val) {\n        if (this._fresnel === val)\n          return;\n        this._fresnel = val;\n        this.ssrMaterial.defines.FRESNEL = val;\n        this.ssrMaterial.needsUpdate = true;\n      }\n    });\n    this._infiniteThick = SSRShader.defines.INFINITE_THICK;\n    Object.defineProperty(this, \"infiniteThick\", {\n      get() {\n        return this._infiniteThick;\n      },\n      set(val) {\n        if (this._infiniteThick === val)\n          return;\n        this._infiniteThick = val;\n        this.ssrMaterial.defines.INFINITE_THICK = val;\n        this.ssrMaterial.needsUpdate = true;\n      }\n    });\n    const depthTexture = new DepthTexture();\n    depthTexture.type = UnsignedShortType;\n    depthTexture.minFilter = NearestFilter;\n    depthTexture.magFilter = NearestFilter;\n    this.beautyRenderTarget = new WebGLRenderTarget(this.width, this.height, {\n      minFilter: NearestFilter,\n      magFilter: NearestFilter,\n      type: HalfFloatType,\n      depthTexture,\n      depthBuffer: true\n    });\n    this.prevRenderTarget = new WebGLRenderTarget(this.width, this.height, {\n      minFilter: NearestFilter,\n      magFilter: NearestFilter\n    });\n    this.normalRenderTarget = new WebGLRenderTarget(this.width, this.height, {\n      minFilter: NearestFilter,\n      magFilter: NearestFilter,\n      type: HalfFloatType\n    });\n    this.metalnessRenderTarget = new WebGLRenderTarget(this.width, this.height, {\n      minFilter: NearestFilter,\n      magFilter: NearestFilter,\n      type: HalfFloatType\n    });\n    this.ssrRenderTarget = new WebGLRenderTarget(this.width, this.height, {\n      minFilter: NearestFilter,\n      magFilter: NearestFilter\n    });\n    this.blurRenderTarget = this.ssrRenderTarget.clone();\n    this.blurRenderTarget2 = this.ssrRenderTarget.clone();\n    this.ssrMaterial = new ShaderMaterial({\n      defines: Object.assign({}, SSRShader.defines, {\n        MAX_STEP: Math.sqrt(this.width * this.width + this.height * this.height)\n      }),\n      uniforms: UniformsUtils.clone(SSRShader.uniforms),\n      vertexShader: SSRShader.vertexShader,\n      fragmentShader: SSRShader.fragmentShader,\n      blending: NoBlending\n    });\n    this.ssrMaterial.uniforms[\"tDiffuse\"].value = this.beautyRenderTarget.texture;\n    this.ssrMaterial.uniforms[\"tNormal\"].value = this.normalRenderTarget.texture;\n    this.ssrMaterial.defines.SELECTIVE = this.selective;\n    this.ssrMaterial.needsUpdate = true;\n    this.ssrMaterial.uniforms[\"tMetalness\"].value = this.metalnessRenderTarget.texture;\n    this.ssrMaterial.uniforms[\"tDepth\"].value = this.beautyRenderTarget.depthTexture;\n    this.ssrMaterial.uniforms[\"cameraNear\"].value = this.camera.near;\n    this.ssrMaterial.uniforms[\"cameraFar\"].value = this.camera.far;\n    this.ssrMaterial.uniforms[\"thickness\"].value = this.thickness;\n    this.ssrMaterial.uniforms[\"resolution\"].value.set(this.width, this.height);\n    this.ssrMaterial.uniforms[\"cameraProjectionMatrix\"].value.copy(this.camera.projectionMatrix);\n    this.ssrMaterial.uniforms[\"cameraInverseProjectionMatrix\"].value.copy(this.camera.projectionMatrixInverse);\n    this.normalMaterial = new MeshNormalMaterial();\n    this.normalMaterial.blending = NoBlending;\n    this.metalnessOnMaterial = new MeshBasicMaterial({\n      color: \"white\"\n    });\n    this.metalnessOffMaterial = new MeshBasicMaterial({\n      color: \"black\"\n    });\n    this.blurMaterial = new ShaderMaterial({\n      defines: Object.assign({}, SSRBlurShader.defines),\n      uniforms: UniformsUtils.clone(SSRBlurShader.uniforms),\n      vertexShader: SSRBlurShader.vertexShader,\n      fragmentShader: SSRBlurShader.fragmentShader\n    });\n    this.blurMaterial.uniforms[\"tDiffuse\"].value = this.ssrRenderTarget.texture;\n    this.blurMaterial.uniforms[\"resolution\"].value.set(this.width, this.height);\n    this.blurMaterial2 = new ShaderMaterial({\n      defines: Object.assign({}, SSRBlurShader.defines),\n      uniforms: UniformsUtils.clone(SSRBlurShader.uniforms),\n      vertexShader: SSRBlurShader.vertexShader,\n      fragmentShader: SSRBlurShader.fragmentShader\n    });\n    this.blurMaterial2.uniforms[\"tDiffuse\"].value = this.blurRenderTarget.texture;\n    this.blurMaterial2.uniforms[\"resolution\"].value.set(this.width, this.height);\n    this.depthRenderMaterial = new ShaderMaterial({\n      defines: Object.assign({}, SSRDepthShader.defines),\n      uniforms: UniformsUtils.clone(SSRDepthShader.uniforms),\n      vertexShader: SSRDepthShader.vertexShader,\n      fragmentShader: SSRDepthShader.fragmentShader,\n      blending: NoBlending\n    });\n    this.depthRenderMaterial.uniforms[\"tDepth\"].value = this.beautyRenderTarget.depthTexture;\n    this.depthRenderMaterial.uniforms[\"cameraNear\"].value = this.camera.near;\n    this.depthRenderMaterial.uniforms[\"cameraFar\"].value = this.camera.far;\n    this.copyMaterial = new ShaderMaterial({\n      uniforms: UniformsUtils.clone(CopyShader.uniforms),\n      vertexShader: CopyShader.vertexShader,\n      fragmentShader: CopyShader.fragmentShader,\n      transparent: true,\n      depthTest: false,\n      depthWrite: false,\n      blendSrc: SrcAlphaFactor,\n      blendDst: OneMinusSrcAlphaFactor,\n      blendEquation: AddEquation,\n      blendSrcAlpha: SrcAlphaFactor,\n      blendDstAlpha: OneMinusSrcAlphaFactor,\n      blendEquationAlpha: AddEquation\n      // premultipliedAlpha:true,\n    });\n    this.fsQuad = new FullScreenQuad(null);\n    this.originalClearColor = new Color();\n  }\n  dispose() {\n    this.beautyRenderTarget.dispose();\n    this.prevRenderTarget.dispose();\n    this.normalRenderTarget.dispose();\n    this.metalnessRenderTarget.dispose();\n    this.ssrRenderTarget.dispose();\n    this.blurRenderTarget.dispose();\n    this.blurRenderTarget2.dispose();\n    this.normalMaterial.dispose();\n    this.metalnessOnMaterial.dispose();\n    this.metalnessOffMaterial.dispose();\n    this.blurMaterial.dispose();\n    this.blurMaterial2.dispose();\n    this.copyMaterial.dispose();\n    this.depthRenderMaterial.dispose();\n    this.fsQuad.dispose();\n  }\n  render(renderer, writeBuffer) {\n    renderer.setRenderTarget(this.beautyRenderTarget);\n    renderer.clear();\n    if (this.groundReflector) {\n      this.groundReflector.visible = false;\n      this.groundReflector.doRender(this.renderer, this.scene, this.camera);\n      this.groundReflector.visible = true;\n    }\n    renderer.render(this.scene, this.camera);\n    if (this.groundReflector)\n      this.groundReflector.visible = false;\n    this.renderOverride(renderer, this.normalMaterial, this.normalRenderTarget, 0, 0);\n    if (this.selective) {\n      this.renderMetalness(renderer, this.metalnessOnMaterial, this.metalnessRenderTarget, 0, 0);\n    }\n    this.ssrMaterial.uniforms[\"opacity\"].value = this.opacity;\n    this.ssrMaterial.uniforms[\"maxDistance\"].value = this.maxDistance;\n    this.ssrMaterial.uniforms[\"thickness\"].value = this.thickness;\n    this.renderPass(renderer, this.ssrMaterial, this.ssrRenderTarget);\n    if (this.blur) {\n      this.renderPass(renderer, this.blurMaterial, this.blurRenderTarget);\n      this.renderPass(renderer, this.blurMaterial2, this.blurRenderTarget2);\n    }\n    switch (this.output) {\n      case _SSRPass.OUTPUT.Default:\n        if (this.bouncing) {\n          this.copyMaterial.uniforms[\"tDiffuse\"].value = this.beautyRenderTarget.texture;\n          this.copyMaterial.blending = NoBlending;\n          this.renderPass(renderer, this.copyMaterial, this.prevRenderTarget);\n          if (this.blur)\n            this.copyMaterial.uniforms[\"tDiffuse\"].value = this.blurRenderTarget2.texture;\n          else\n            this.copyMaterial.uniforms[\"tDiffuse\"].value = this.ssrRenderTarget.texture;\n          this.copyMaterial.blending = NormalBlending;\n          this.renderPass(renderer, this.copyMaterial, this.prevRenderTarget);\n          this.copyMaterial.uniforms[\"tDiffuse\"].value = this.prevRenderTarget.texture;\n          this.copyMaterial.blending = NoBlending;\n          this.renderPass(renderer, this.copyMaterial, this.renderToScreen ? null : writeBuffer);\n        } else {\n          this.copyMaterial.uniforms[\"tDiffuse\"].value = this.beautyRenderTarget.texture;\n          this.copyMaterial.blending = NoBlending;\n          this.renderPass(renderer, this.copyMaterial, this.renderToScreen ? null : writeBuffer);\n          if (this.blur)\n            this.copyMaterial.uniforms[\"tDiffuse\"].value = this.blurRenderTarget2.texture;\n          else\n            this.copyMaterial.uniforms[\"tDiffuse\"].value = this.ssrRenderTarget.texture;\n          this.copyMaterial.blending = NormalBlending;\n          this.renderPass(renderer, this.copyMaterial, this.renderToScreen ? null : writeBuffer);\n        }\n        break;\n      case _SSRPass.OUTPUT.SSR:\n        if (this.blur)\n          this.copyMaterial.uniforms[\"tDiffuse\"].value = this.blurRenderTarget2.texture;\n        else\n          this.copyMaterial.uniforms[\"tDiffuse\"].value = this.ssrRenderTarget.texture;\n        this.copyMaterial.blending = NoBlending;\n        this.renderPass(renderer, this.copyMaterial, this.renderToScreen ? null : writeBuffer);\n        if (this.bouncing) {\n          if (this.blur)\n            this.copyMaterial.uniforms[\"tDiffuse\"].value = this.blurRenderTarget2.texture;\n          else\n            this.copyMaterial.uniforms[\"tDiffuse\"].value = this.beautyRenderTarget.texture;\n          this.copyMaterial.blending = NoBlending;\n          this.renderPass(renderer, this.copyMaterial, this.prevRenderTarget);\n          this.copyMaterial.uniforms[\"tDiffuse\"].value = this.ssrRenderTarget.texture;\n          this.copyMaterial.blending = NormalBlending;\n          this.renderPass(renderer, this.copyMaterial, this.prevRenderTarget);\n        }\n        break;\n      case _SSRPass.OUTPUT.Beauty:\n        this.copyMaterial.uniforms[\"tDiffuse\"].value = this.beautyRenderTarget.texture;\n        this.copyMaterial.blending = NoBlending;\n        this.renderPass(renderer, this.copyMaterial, this.renderToScreen ? null : writeBuffer);\n        break;\n      case _SSRPass.OUTPUT.Depth:\n        this.renderPass(renderer, this.depthRenderMaterial, this.renderToScreen ? null : writeBuffer);\n        break;\n      case _SSRPass.OUTPUT.Normal:\n        this.copyMaterial.uniforms[\"tDiffuse\"].value = this.normalRenderTarget.texture;\n        this.copyMaterial.blending = NoBlending;\n        this.renderPass(renderer, this.copyMaterial, this.renderToScreen ? null : writeBuffer);\n        break;\n      case _SSRPass.OUTPUT.Metalness:\n        this.copyMaterial.uniforms[\"tDiffuse\"].value = this.metalnessRenderTarget.texture;\n        this.copyMaterial.blending = NoBlending;\n        this.renderPass(renderer, this.copyMaterial, this.renderToScreen ? null : writeBuffer);\n        break;\n      default:\n        console.warn(\"THREE.SSRPass: Unknown output type.\");\n    }\n  }\n  renderPass(renderer, passMaterial, renderTarget, clearColor, clearAlpha) {\n    this.originalClearColor.copy(renderer.getClearColor(this.tempColor));\n    const originalClearAlpha = renderer.getClearAlpha(this.tempColor);\n    const originalAutoClear = renderer.autoClear;\n    renderer.setRenderTarget(renderTarget);\n    renderer.autoClear = false;\n    if (clearColor !== void 0 && clearColor !== null) {\n      renderer.setClearColor(clearColor);\n      renderer.setClearAlpha(clearAlpha || 0);\n      renderer.clear();\n    }\n    this.fsQuad.material = passMaterial;\n    this.fsQuad.render(renderer);\n    renderer.autoClear = originalAutoClear;\n    renderer.setClearColor(this.originalClearColor);\n    renderer.setClearAlpha(originalClearAlpha);\n  }\n  renderOverride(renderer, overrideMaterial, renderTarget, clearColor, clearAlpha) {\n    this.originalClearColor.copy(renderer.getClearColor(this.tempColor));\n    const originalClearAlpha = renderer.getClearAlpha(this.tempColor);\n    const originalAutoClear = renderer.autoClear;\n    renderer.setRenderTarget(renderTarget);\n    renderer.autoClear = false;\n    clearColor = overrideMaterial.clearColor || clearColor;\n    clearAlpha = overrideMaterial.clearAlpha || clearAlpha;\n    if (clearColor !== void 0 && clearColor !== null) {\n      renderer.setClearColor(clearColor);\n      renderer.setClearAlpha(clearAlpha || 0);\n      renderer.clear();\n    }\n    this.scene.overrideMaterial = overrideMaterial;\n    renderer.render(this.scene, this.camera);\n    this.scene.overrideMaterial = null;\n    renderer.autoClear = originalAutoClear;\n    renderer.setClearColor(this.originalClearColor);\n    renderer.setClearAlpha(originalClearAlpha);\n  }\n  renderMetalness(renderer, overrideMaterial, renderTarget, clearColor, clearAlpha) {\n    this.originalClearColor.copy(renderer.getClearColor(this.tempColor));\n    const originalClearAlpha = renderer.getClearAlpha(this.tempColor);\n    const originalAutoClear = renderer.autoClear;\n    renderer.setRenderTarget(renderTarget);\n    renderer.autoClear = false;\n    clearColor = overrideMaterial.clearColor || clearColor;\n    clearAlpha = overrideMaterial.clearAlpha || clearAlpha;\n    if (clearColor !== void 0 && clearColor !== null) {\n      renderer.setClearColor(clearColor);\n      renderer.setClearAlpha(clearAlpha || 0);\n      renderer.clear();\n    }\n    this.scene.traverseVisible((child) => {\n      child._SSRPassBackupMaterial = child.material;\n      if (this._selects.includes(child)) {\n        child.material = this.metalnessOnMaterial;\n      } else {\n        child.material = this.metalnessOffMaterial;\n      }\n    });\n    renderer.render(this.scene, this.camera);\n    this.scene.traverseVisible((child) => {\n      child.material = child._SSRPassBackupMaterial;\n    });\n    renderer.autoClear = originalAutoClear;\n    renderer.setClearColor(this.originalClearColor);\n    renderer.setClearAlpha(originalClearAlpha);\n  }\n  setSize(width, height) {\n    this.width = width;\n    this.height = height;\n    this.ssrMaterial.defines.MAX_STEP = Math.sqrt(width * width + height * height);\n    this.ssrMaterial.needsUpdate = true;\n    this.beautyRenderTarget.setSize(width, height);\n    this.prevRenderTarget.setSize(width, height);\n    this.ssrRenderTarget.setSize(width, height);\n    this.normalRenderTarget.setSize(width, height);\n    this.metalnessRenderTarget.setSize(width, height);\n    this.blurRenderTarget.setSize(width, height);\n    this.blurRenderTarget2.setSize(width, height);\n    this.ssrMaterial.uniforms[\"resolution\"].value.set(width, height);\n    this.ssrMaterial.uniforms[\"cameraProjectionMatrix\"].value.copy(this.camera.projectionMatrix);\n    this.ssrMaterial.uniforms[\"cameraInverseProjectionMatrix\"].value.copy(this.camera.projectionMatrixInverse);\n    this.blurMaterial.uniforms[\"resolution\"].value.set(width, height);\n    this.blurMaterial2.uniforms[\"resolution\"].value.set(width, height);\n  }\n};\nlet SSRPass = _SSRPass;\n__publicField(SSRPass, \"OUTPUT\", {\n  Default: 0,\n  SSR: 1,\n  Beauty: 3,\n  Depth: 4,\n  Normal: 5,\n  Metalness: 7\n});\nexport {\n  SSRPass\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}