{"ast":null,"code":"import { createError } from '../../errors.js';\nimport { replaceDiacritics } from './diacritics.js';\nimport { SPLITTERS, SUPPORTED_LANGUAGES } from './languages.js';\nimport { stemmer as english } from './english-stemmer.js';\nfunction normalizeToken(prop, token) {\n  var _this_stopWords;\n  const key = `${this.language}:${prop}:${token}`;\n  if (this.normalizationCache.has(key)) {\n    return this.normalizationCache.get(key);\n  }\n  // Remove stopwords if enabled\n  if ((_this_stopWords = this.stopWords) === null || _this_stopWords === void 0 ? void 0 : _this_stopWords.includes(token)) {\n    this.normalizationCache.set(key, '');\n    return '';\n  }\n  // Apply stemming if enabled\n  if (this.stemmer && !this.stemmerSkipProperties.has(prop)) {\n    token = this.stemmer(token);\n  }\n  token = replaceDiacritics(token);\n  this.normalizationCache.set(key, token);\n  return token;\n}\n/* c8 ignore next 10 */\nfunction trim(text) {\n  while (text[text.length - 1] === '') {\n    text.pop();\n  }\n  while (text[0] === '') {\n    text.shift();\n  }\n  return text;\n}\nfunction tokenize(input, language, prop) {\n  if (language && language !== this.language) {\n    throw createError('LANGUAGE_NOT_SUPPORTED', language);\n  }\n  /* c8 ignore next 3 */\n  if (typeof input !== 'string') {\n    return [input];\n  }\n  let tokens;\n  if (prop && this.tokenizeSkipProperties.has(prop)) {\n    tokens = [this.normalizeToken.bind(this, prop ?? '')(input)];\n  } else {\n    const splitRule = SPLITTERS[this.language];\n    tokens = input.toLowerCase().split(splitRule).map(this.normalizeToken.bind(this, prop ?? '')).filter(Boolean);\n  }\n  const trimTokens = trim(tokens);\n  if (!this.allowDuplicates) {\n    return Array.from(new Set(trimTokens));\n  }\n  return trimTokens;\n}\nexport async function createTokenizer(config = {}) {\n  if (!config.language) {\n    config.language = 'english';\n  } else if (!SUPPORTED_LANGUAGES.includes(config.language)) {\n    throw createError('LANGUAGE_NOT_SUPPORTED', config.language);\n  }\n  // Handle stemming - It is disabled by default\n  let stemmer;\n  if (config.stemming || config.stemmer && !('stemming' in config)) {\n    if (config.stemmer) {\n      if (typeof config.stemmer !== 'function') {\n        throw createError('INVALID_STEMMER_FUNCTION_TYPE');\n      }\n      stemmer = config.stemmer;\n    } else {\n      if (config.language === 'english') {\n        stemmer = english;\n      } else {\n        throw createError('MISSING_STEMMER', config.language);\n      }\n    }\n  }\n  // Handle stopwords\n  let stopWords;\n  if (config.stopWords !== false) {\n    stopWords = [];\n    if (Array.isArray(config.stopWords)) {\n      stopWords = config.stopWords;\n    } else if (typeof config.stopWords === 'function') {\n      stopWords = await config.stopWords(stopWords);\n    } else if (config.stopWords) {\n      throw createError('CUSTOM_STOP_WORDS_MUST_BE_FUNCTION_OR_ARRAY');\n    }\n    // Make sure stopWords is just an array of strings\n    if (!Array.isArray(stopWords)) {\n      throw createError('CUSTOM_STOP_WORDS_MUST_BE_FUNCTION_OR_ARRAY');\n    }\n    for (const s of stopWords) {\n      if (typeof s !== 'string') {\n        throw createError('CUSTOM_STOP_WORDS_MUST_BE_FUNCTION_OR_ARRAY');\n      }\n    }\n  }\n  // Create the tokenizer\n  const tokenizer = {\n    tokenize,\n    language: config.language,\n    stemmer,\n    stemmerSkipProperties: new Set(config.stemmerSkipProperties ? [config.stemmerSkipProperties].flat() : []),\n    tokenizeSkipProperties: new Set(config.tokenizeSkipProperties ? [config.tokenizeSkipProperties].flat() : []),\n    stopWords,\n    allowDuplicates: Boolean(config.allowDuplicates),\n    normalizeToken,\n    normalizationCache: new Map()\n  };\n  tokenizer.tokenize = tokenize.bind(tokenizer);\n  tokenizer.normalizeToken = normalizeToken;\n  return tokenizer;\n}","map":{"version":3,"names":["createError","replaceDiacritics","SPLITTERS","SUPPORTED_LANGUAGES","stemmer","english","normalizeToken","prop","token","_this_stopWords","key","language","normalizationCache","has","get","stopWords","includes","set","stemmerSkipProperties","trim","text","length","pop","shift","tokenize","input","tokens","tokenizeSkipProperties","bind","splitRule","toLowerCase","split","map","filter","Boolean","trimTokens","allowDuplicates","Array","from","Set","createTokenizer","config","stemming","isArray","s","tokenizer","flat","Map"],"sources":["/home/krug/Coding/JavaScript/Websites/Personal/personal/node_modules/.pnpm/@orama+orama@1.2.11/node_modules/@orama/orama/src/components/tokenizer/index.ts"],"sourcesContent":["import { createError } from '../../errors.js'\nimport { Stemmer, Tokenizer, DefaultTokenizerConfig } from '../../types.js'\nimport { replaceDiacritics } from './diacritics.js'\nimport { Language, SPLITTERS, SUPPORTED_LANGUAGES } from './languages.js'\nimport { stemmer as english } from './english-stemmer.js'\n\ninterface DefaultTokenizer extends Tokenizer {\n  language: Language\n  stemmer?: Stemmer\n  tokenizeSkipProperties: Set<string>\n  stemmerSkipProperties: Set<string>\n  stopWords?: string[]\n  allowDuplicates: boolean\n  normalizationCache: Map<string, string>\n  normalizeToken(this: DefaultTokenizer, token: string, prop: string | undefined): string\n}\n\nfunction normalizeToken(this: DefaultTokenizer, prop: string, token: string): string {\n  const key = `${this.language}:${prop}:${token}`\n\n  if (this.normalizationCache.has(key)) {\n    return this.normalizationCache.get(key)!\n  }\n\n  // Remove stopwords if enabled\n  if (this.stopWords?.includes(token)) {\n    this.normalizationCache.set(key, '')\n    return ''\n  }\n\n  // Apply stemming if enabled\n  if (this.stemmer && !this.stemmerSkipProperties.has(prop)) {\n    token = this.stemmer(token)\n  }\n\n  token = replaceDiacritics(token)\n  this.normalizationCache.set(key, token)\n  return token\n}\n\n/* c8 ignore next 10 */\nfunction trim(text: string[]): string[] {\n  while (text[text.length - 1] === '') {\n    text.pop()\n  }\n  while (text[0] === '') {\n    text.shift()\n  }\n  return text\n}\n\nfunction tokenize(this: DefaultTokenizer, input: string, language?: string, prop?: string): string[] {\n  if (language && language !== this.language) {\n    throw createError('LANGUAGE_NOT_SUPPORTED', language)\n  }\n\n  /* c8 ignore next 3 */\n  if (typeof input !== 'string') {\n    return [input]\n  }\n\n  let tokens: string[]\n  if (prop && this.tokenizeSkipProperties.has(prop)) {\n    tokens = [this.normalizeToken.bind(this, prop ?? '')(input)]\n  } else {\n    const splitRule = SPLITTERS[this.language]\n    tokens = input\n      .toLowerCase()\n      .split(splitRule)\n      .map(this.normalizeToken.bind(this, prop ?? ''))\n      .filter(Boolean)\n  }\n\n  const trimTokens = trim(tokens)\n\n  if (!this.allowDuplicates) {\n    return Array.from(new Set(trimTokens))\n  }\n\n  return trimTokens\n}\n\nexport async function createTokenizer(config: DefaultTokenizerConfig = {}): Promise<DefaultTokenizer> {\n  if (!config.language) {\n    config.language = 'english'\n  } else if (!SUPPORTED_LANGUAGES.includes(config.language)) {\n    throw createError('LANGUAGE_NOT_SUPPORTED', config.language)\n  }\n\n  // Handle stemming - It is disabled by default\n  let stemmer: Stemmer | undefined\n\n  if (config.stemming || (config.stemmer && !('stemming' in config))) {\n    if (config.stemmer) {\n      if (typeof config.stemmer !== 'function') {\n        throw createError('INVALID_STEMMER_FUNCTION_TYPE')\n      }\n\n      stemmer = config.stemmer\n    } else {\n      if (config.language === 'english') {\n        stemmer = english\n      } else {\n        throw createError('MISSING_STEMMER', config.language)\n      }\n    }\n  }\n\n  // Handle stopwords\n  let stopWords: string[] | undefined\n\n  if (config.stopWords !== false) {\n    stopWords = []\n\n    if (Array.isArray(config.stopWords)) {\n      stopWords = config.stopWords\n    } else if (typeof config.stopWords === 'function') {\n      stopWords = await config.stopWords(stopWords)\n    } else if (config.stopWords) {\n      throw createError('CUSTOM_STOP_WORDS_MUST_BE_FUNCTION_OR_ARRAY')\n    }\n\n    // Make sure stopWords is just an array of strings\n    if (!Array.isArray(stopWords)) {\n      throw createError('CUSTOM_STOP_WORDS_MUST_BE_FUNCTION_OR_ARRAY')\n    }\n\n    for (const s of stopWords) {\n      if (typeof s !== 'string') {\n        throw createError('CUSTOM_STOP_WORDS_MUST_BE_FUNCTION_OR_ARRAY')\n      }\n    }\n  }\n\n  // Create the tokenizer\n  const tokenizer: DefaultTokenizer = {\n    tokenize,\n    language: config.language,\n    stemmer,\n    stemmerSkipProperties: new Set(config.stemmerSkipProperties ? [config.stemmerSkipProperties].flat() : []),\n    tokenizeSkipProperties: new Set(config.tokenizeSkipProperties ? [config.tokenizeSkipProperties].flat() : []),\n    stopWords,\n    allowDuplicates: Boolean(config.allowDuplicates),\n    normalizeToken,\n    normalizationCache: new Map(),\n  }\n\n  tokenizer.tokenize = tokenize.bind(tokenizer)\n  tokenizer.normalizeToken = normalizeToken\n\n  return tokenizer\n}\n"],"mappings":"AAAA,SAASA,WAAW,QAAQ;AAE5B,SAASC,iBAAiB,QAAQ;AAClC,SAAmBC,SAAS,EAAEC,mBAAmB,QAAQ;AACzD,SAASC,OAAA,IAAWC,OAAO,QAAQ;AAanC,SAASC,eAAuCC,IAAY,EAAEC,KAAa,EAAU;MAQ/EC,eAAA;EAPJ,MAAMC,GAAA,GAAO,GAAE,IAAI,CAACC,QAAS,IAAGJ,IAAK,IAAGC,KAAM,EAAC;EAE/C,IAAI,IAAI,CAACI,kBAAkB,CAACC,GAAG,CAACH,GAAA,GAAM;IACpC,OAAO,IAAI,CAACE,kBAAkB,CAACE,GAAG,CAACJ,GAAA;EACrC;EAEA;EACA,IAAI,CAAAD,eAAA,OAAI,CAACM,SAAS,cAAdN,eAAA,uBAAAA,eAAA,CAAgBO,QAAA,CAASR,KAAA,GAAQ;IACnC,IAAI,CAACI,kBAAkB,CAACK,GAAG,CAACP,GAAA,EAAK;IACjC,OAAO;EACT;EAEA;EACA,IAAI,IAAI,CAACN,OAAO,IAAI,CAAC,IAAI,CAACc,qBAAqB,CAACL,GAAG,CAACN,IAAA,GAAO;IACzDC,KAAA,GAAQ,IAAI,CAACJ,OAAO,CAACI,KAAA;EACvB;EAEAA,KAAA,GAAQP,iBAAA,CAAkBO,KAAA;EAC1B,IAAI,CAACI,kBAAkB,CAACK,GAAG,CAACP,GAAA,EAAKF,KAAA;EACjC,OAAOA,KAAA;AACT;AAEA;AACA,SAASW,KAAKC,IAAc,EAAY;EACtC,OAAOA,IAAI,CAACA,IAAA,CAAKC,MAAM,GAAG,EAAE,KAAK,IAAI;IACnCD,IAAA,CAAKE,GAAG;EACV;EACA,OAAOF,IAAI,CAAC,EAAE,KAAK,IAAI;IACrBA,IAAA,CAAKG,KAAK;EACZ;EACA,OAAOH,IAAA;AACT;AAEA,SAASI,SAAiCC,KAAa,EAAEd,QAAiB,EAAEJ,IAAa,EAAY;EACnG,IAAII,QAAA,IAAYA,QAAA,KAAa,IAAI,CAACA,QAAQ,EAAE;IAC1C,MAAMX,WAAA,CAAY,0BAA0BW,QAAA;EAC9C;EAEA;EACA,IAAI,OAAOc,KAAA,KAAU,UAAU;IAC7B,OAAO,CAACA,KAAA,CAAM;EAChB;EAEA,IAAIC,MAAA;EACJ,IAAInB,IAAA,IAAQ,IAAI,CAACoB,sBAAsB,CAACd,GAAG,CAACN,IAAA,GAAO;IACjDmB,MAAA,GAAS,CAAC,IAAI,CAACpB,cAAc,CAACsB,IAAI,CAAC,IAAI,EAAErB,IAAA,IAAQ,IAAIkB,KAAA,EAAO;EAC9D,OAAO;IACL,MAAMI,SAAA,GAAY3B,SAAS,CAAC,IAAI,CAACS,QAAQ,CAAC;IAC1Ce,MAAA,GAASD,KAAA,CACNK,WAAW,GACXC,KAAK,CAACF,SAAA,EACNG,GAAG,CAAC,IAAI,CAAC1B,cAAc,CAACsB,IAAI,CAAC,IAAI,EAAErB,IAAA,IAAQ,KAC3C0B,MAAM,CAACC,OAAA;EACZ;EAEA,MAAMC,UAAA,GAAahB,IAAA,CAAKO,MAAA;EAExB,IAAI,CAAC,IAAI,CAACU,eAAe,EAAE;IACzB,OAAOC,KAAA,CAAMC,IAAI,CAAC,IAAIC,GAAA,CAAIJ,UAAA;EAC5B;EAEA,OAAOA,UAAA;AACT;AAEA,OAAO,eAAeK,gBAAgBC,MAAA,GAAiC,CAAC,CAAC,EAA6B;EACpG,IAAI,CAACA,MAAA,CAAO9B,QAAQ,EAAE;IACpB8B,MAAA,CAAO9B,QAAQ,GAAG;EACpB,OAAO,IAAI,CAACR,mBAAA,CAAoBa,QAAQ,CAACyB,MAAA,CAAO9B,QAAQ,GAAG;IACzD,MAAMX,WAAA,CAAY,0BAA0ByC,MAAA,CAAO9B,QAAQ;EAC7D;EAEA;EACA,IAAIP,OAAA;EAEJ,IAAIqC,MAAA,CAAOC,QAAQ,IAAKD,MAAA,CAAOrC,OAAO,IAAI,EAAE,cAAcqC,MAAK,GAAK;IAClE,IAAIA,MAAA,CAAOrC,OAAO,EAAE;MAClB,IAAI,OAAOqC,MAAA,CAAOrC,OAAO,KAAK,YAAY;QACxC,MAAMJ,WAAA,CAAY;MACpB;MAEAI,OAAA,GAAUqC,MAAA,CAAOrC,OAAO;IAC1B,OAAO;MACL,IAAIqC,MAAA,CAAO9B,QAAQ,KAAK,WAAW;QACjCP,OAAA,GAAUC,OAAA;MACZ,OAAO;QACL,MAAML,WAAA,CAAY,mBAAmByC,MAAA,CAAO9B,QAAQ;MACtD;IACF;EACF;EAEA;EACA,IAAII,SAAA;EAEJ,IAAI0B,MAAA,CAAO1B,SAAS,KAAK,KAAK,EAAE;IAC9BA,SAAA,GAAY,EAAE;IAEd,IAAIsB,KAAA,CAAMM,OAAO,CAACF,MAAA,CAAO1B,SAAS,GAAG;MACnCA,SAAA,GAAY0B,MAAA,CAAO1B,SAAS;IAC9B,OAAO,IAAI,OAAO0B,MAAA,CAAO1B,SAAS,KAAK,YAAY;MACjDA,SAAA,GAAY,MAAM0B,MAAA,CAAO1B,SAAS,CAACA,SAAA;IACrC,OAAO,IAAI0B,MAAA,CAAO1B,SAAS,EAAE;MAC3B,MAAMf,WAAA,CAAY;IACpB;IAEA;IACA,IAAI,CAACqC,KAAA,CAAMM,OAAO,CAAC5B,SAAA,GAAY;MAC7B,MAAMf,WAAA,CAAY;IACpB;IAEA,KAAK,MAAM4C,CAAA,IAAK7B,SAAA,EAAW;MACzB,IAAI,OAAO6B,CAAA,KAAM,UAAU;QACzB,MAAM5C,WAAA,CAAY;MACpB;IACF;EACF;EAEA;EACA,MAAM6C,SAAA,GAA8B;IAClCrB,QAAA;IACAb,QAAA,EAAU8B,MAAA,CAAO9B,QAAQ;IACzBP,OAAA;IACAc,qBAAA,EAAuB,IAAIqB,GAAA,CAAIE,MAAA,CAAOvB,qBAAqB,GAAG,CAACuB,MAAA,CAAOvB,qBAAqB,CAAC,CAAC4B,IAAI,KAAK,EAAE;IACxGnB,sBAAA,EAAwB,IAAIY,GAAA,CAAIE,MAAA,CAAOd,sBAAsB,GAAG,CAACc,MAAA,CAAOd,sBAAsB,CAAC,CAACmB,IAAI,KAAK,EAAE;IAC3G/B,SAAA;IACAqB,eAAA,EAAiBF,OAAA,CAAQO,MAAA,CAAOL,eAAe;IAC/C9B,cAAA;IACAM,kBAAA,EAAoB,IAAImC,GAAA;EAC1B;EAEAF,SAAA,CAAUrB,QAAQ,GAAGA,QAAA,CAASI,IAAI,CAACiB,SAAA;EACnCA,SAAA,CAAUvC,cAAc,GAAGA,cAAA;EAE3B,OAAOuC,SAAA;AACT"},"metadata":{},"sourceType":"module","externalDependencies":[]}