{"ast":null,"code":"import _createClass from \"/home/krug/Coding/JavaScript/Websites/Personal/personal/node_modules/.pnpm/@babel+runtime@7.22.3/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _classCallCheck from \"/home/krug/Coding/JavaScript/Websites/Personal/personal/node_modules/.pnpm/@babel+runtime@7.22.3/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _inherits from \"/home/krug/Coding/JavaScript/Websites/Personal/personal/node_modules/.pnpm/@babel+runtime@7.22.3/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/home/krug/Coding/JavaScript/Websites/Personal/personal/node_modules/.pnpm/@babel+runtime@7.22.3/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { BufferAttribute, Matrix4, Vector3, Matrix3, MeshPhongMaterial, UniformsUtils, ShaderLib, ShaderChunk } from \"three\";\nvar GeometryCompressionUtils = {\n  /**\n   * Make the input mesh.geometry's normal attribute encoded and compressed by 3 different methods.\n   * Also will change the mesh.material to `PackedPhongMaterial` which let the vertex shader program decode the normal data.\n   *\n   * @param {THREE.Mesh} mesh\n   * @param {String} encodeMethod\t\t\"DEFAULT\" || \"OCT1Byte\" || \"OCT2Byte\" || \"ANGLES\"\n   *\n   */\n  compressNormals: function compressNormals(mesh, encodeMethod) {\n    if (!mesh.geometry) {\n      console.error(\"Mesh must contain geometry. \");\n    }\n    var normal = mesh.geometry.attributes.normal;\n    if (!normal) {\n      console.error(\"Geometry must contain normal attribute. \");\n    }\n    if (normal.isPacked) return;\n    if (normal.itemSize != 3) {\n      console.error(\"normal.itemSize is not 3, which cannot be encoded. \");\n    }\n    var array = normal.array;\n    var count = normal.count;\n    var result;\n    if (encodeMethod == \"DEFAULT\") {\n      result = new Uint8Array(count * 3);\n      for (var idx = 0; idx < array.length; idx += 3) {\n        var encoded = this.EncodingFuncs.defaultEncode(array[idx], array[idx + 1], array[idx + 2], 1);\n        result[idx + 0] = encoded[0];\n        result[idx + 1] = encoded[1];\n        result[idx + 2] = encoded[2];\n      }\n      mesh.geometry.setAttribute(\"normal\", new BufferAttribute(result, 3, true));\n      mesh.geometry.attributes.normal.bytes = result.length * 1;\n    } else if (encodeMethod == \"OCT1Byte\") {\n      result = new Int8Array(count * 2);\n      for (var _idx = 0; _idx < array.length; _idx += 3) {\n        var _encoded = this.EncodingFuncs.octEncodeBest(array[_idx], array[_idx + 1], array[_idx + 2], 1);\n        result[_idx / 3 * 2 + 0] = _encoded[0];\n        result[_idx / 3 * 2 + 1] = _encoded[1];\n      }\n      mesh.geometry.setAttribute(\"normal\", new BufferAttribute(result, 2, true));\n      mesh.geometry.attributes.normal.bytes = result.length * 1;\n    } else if (encodeMethod == \"OCT2Byte\") {\n      result = new Int16Array(count * 2);\n      for (var _idx2 = 0; _idx2 < array.length; _idx2 += 3) {\n        var _encoded2 = this.EncodingFuncs.octEncodeBest(array[_idx2], array[_idx2 + 1], array[_idx2 + 2], 2);\n        result[_idx2 / 3 * 2 + 0] = _encoded2[0];\n        result[_idx2 / 3 * 2 + 1] = _encoded2[1];\n      }\n      mesh.geometry.setAttribute(\"normal\", new BufferAttribute(result, 2, true));\n      mesh.geometry.attributes.normal.bytes = result.length * 2;\n    } else if (encodeMethod == \"ANGLES\") {\n      result = new Uint16Array(count * 2);\n      for (var _idx3 = 0; _idx3 < array.length; _idx3 += 3) {\n        var _encoded3 = this.EncodingFuncs.anglesEncode(array[_idx3], array[_idx3 + 1], array[_idx3 + 2]);\n        result[_idx3 / 3 * 2 + 0] = _encoded3[0];\n        result[_idx3 / 3 * 2 + 1] = _encoded3[1];\n      }\n      mesh.geometry.setAttribute(\"normal\", new BufferAttribute(result, 2, true));\n      mesh.geometry.attributes.normal.bytes = result.length * 2;\n    } else {\n      console.error(\"Unrecognized encoding method, should be `DEFAULT` or `ANGLES` or `OCT`. \");\n    }\n    mesh.geometry.attributes.normal.needsUpdate = true;\n    mesh.geometry.attributes.normal.isPacked = true;\n    mesh.geometry.attributes.normal.packingMethod = encodeMethod;\n    if (!(mesh.material instanceof PackedPhongMaterial)) {\n      mesh.material = new PackedPhongMaterial().copy(mesh.material);\n    }\n    if (encodeMethod == \"ANGLES\") {\n      mesh.material.defines.USE_PACKED_NORMAL = 0;\n    }\n    if (encodeMethod == \"OCT1Byte\") {\n      mesh.material.defines.USE_PACKED_NORMAL = 1;\n    }\n    if (encodeMethod == \"OCT2Byte\") {\n      mesh.material.defines.USE_PACKED_NORMAL = 1;\n    }\n    if (encodeMethod == \"DEFAULT\") {\n      mesh.material.defines.USE_PACKED_NORMAL = 2;\n    }\n  },\n  /**\n   * Make the input mesh.geometry's position attribute encoded and compressed.\n   * Also will change the mesh.material to `PackedPhongMaterial` which let the vertex shader program decode the position data.\n   *\n   * @param {THREE.Mesh} mesh\n   *\n   */\n  compressPositions: function compressPositions(mesh) {\n    if (!mesh.geometry) {\n      console.error(\"Mesh must contain geometry. \");\n    }\n    var position = mesh.geometry.attributes.position;\n    if (!position) {\n      console.error(\"Geometry must contain position attribute. \");\n    }\n    if (position.isPacked) return;\n    if (position.itemSize != 3) {\n      console.error(\"position.itemSize is not 3, which cannot be packed. \");\n    }\n    var array = position.array;\n    var encodingBytes = 2;\n    var result = this.EncodingFuncs.quantizedEncode(array, encodingBytes);\n    var quantized = result.quantized;\n    var decodeMat = result.decodeMat;\n    if (mesh.geometry.boundingBox == null) mesh.geometry.computeBoundingBox();\n    if (mesh.geometry.boundingSphere == null) mesh.geometry.computeBoundingSphere();\n    mesh.geometry.setAttribute(\"position\", new BufferAttribute(quantized, 3));\n    mesh.geometry.attributes.position.isPacked = true;\n    mesh.geometry.attributes.position.needsUpdate = true;\n    mesh.geometry.attributes.position.bytes = quantized.length * encodingBytes;\n    if (!(mesh.material instanceof PackedPhongMaterial)) {\n      mesh.material = new PackedPhongMaterial().copy(mesh.material);\n    }\n    mesh.material.defines.USE_PACKED_POSITION = 0;\n    mesh.material.uniforms.quantizeMatPos.value = decodeMat;\n    mesh.material.uniforms.quantizeMatPos.needsUpdate = true;\n  },\n  /**\n   * Make the input mesh.geometry's uv attribute encoded and compressed.\n   * Also will change the mesh.material to `PackedPhongMaterial` which let the vertex shader program decode the uv data.\n   *\n   * @param {THREE.Mesh} mesh\n   *\n   */\n  compressUvs: function compressUvs(mesh) {\n    if (!mesh.geometry) {\n      console.error(\"Mesh must contain geometry property. \");\n    }\n    var uvs = mesh.geometry.attributes.uv;\n    if (!uvs) {\n      console.error(\"Geometry must contain uv attribute. \");\n    }\n    if (uvs.isPacked) return;\n    var range = {\n      min: Infinity,\n      max: -Infinity\n    };\n    var array = uvs.array;\n    for (var i = 0; i < array.length; i++) {\n      range.min = Math.min(range.min, array[i]);\n      range.max = Math.max(range.max, array[i]);\n    }\n    var result;\n    if (range.min >= -1 && range.max <= 1) {\n      result = new Uint16Array(array.length);\n      for (var _i = 0; _i < array.length; _i += 2) {\n        var encoded = this.EncodingFuncs.defaultEncode(array[_i], array[_i + 1], 0, 2);\n        result[_i] = encoded[0];\n        result[_i + 1] = encoded[1];\n      }\n      mesh.geometry.setAttribute(\"uv\", new BufferAttribute(result, 2, true));\n      mesh.geometry.attributes.uv.isPacked = true;\n      mesh.geometry.attributes.uv.needsUpdate = true;\n      mesh.geometry.attributes.uv.bytes = result.length * 2;\n      if (!(mesh.material instanceof PackedPhongMaterial)) {\n        mesh.material = new PackedPhongMaterial().copy(mesh.material);\n      }\n      mesh.material.defines.USE_PACKED_UV = 0;\n    } else {\n      result = this.EncodingFuncs.quantizedEncodeUV(array, 2);\n      mesh.geometry.setAttribute(\"uv\", new BufferAttribute(result.quantized, 2));\n      mesh.geometry.attributes.uv.isPacked = true;\n      mesh.geometry.attributes.uv.needsUpdate = true;\n      mesh.geometry.attributes.uv.bytes = result.quantized.length * 2;\n      if (!(mesh.material instanceof PackedPhongMaterial)) {\n        mesh.material = new PackedPhongMaterial().copy(mesh.material);\n      }\n      mesh.material.defines.USE_PACKED_UV = 1;\n      mesh.material.uniforms.quantizeMatUV.value = result.decodeMat;\n      mesh.material.uniforms.quantizeMatUV.needsUpdate = true;\n    }\n  },\n  EncodingFuncs: {\n    defaultEncode: function defaultEncode(x, y, z, bytes) {\n      if (bytes == 1) {\n        var tmpx = Math.round((x + 1) * 0.5 * 255);\n        var tmpy = Math.round((y + 1) * 0.5 * 255);\n        var tmpz = Math.round((z + 1) * 0.5 * 255);\n        return new Uint8Array([tmpx, tmpy, tmpz]);\n      } else if (bytes == 2) {\n        var _tmpx = Math.round((x + 1) * 0.5 * 65535);\n        var _tmpy = Math.round((y + 1) * 0.5 * 65535);\n        var _tmpz = Math.round((z + 1) * 0.5 * 65535);\n        return new Uint16Array([_tmpx, _tmpy, _tmpz]);\n      } else {\n        console.error(\"number of bytes must be 1 or 2\");\n      }\n    },\n    defaultDecode: function defaultDecode(array, bytes) {\n      if (bytes == 1) {\n        return [array[0] / 255 * 2 - 1, array[1] / 255 * 2 - 1, array[2] / 255 * 2 - 1];\n      } else if (bytes == 2) {\n        return [array[0] / 65535 * 2 - 1, array[1] / 65535 * 2 - 1, array[2] / 65535 * 2 - 1];\n      } else {\n        console.error(\"number of bytes must be 1 or 2\");\n      }\n    },\n    // for `Angles` encoding\n    anglesEncode: function anglesEncode(x, y, z) {\n      var normal0 = parseInt(0.5 * (1 + Math.atan2(y, x) / Math.PI) * 65535);\n      var normal1 = parseInt(0.5 * (1 + z) * 65535);\n      return new Uint16Array([normal0, normal1]);\n    },\n    // for `Octahedron` encoding\n    octEncodeBest: function octEncodeBest(x, y, z, bytes) {\n      var oct, dec, best, currentCos, bestCos;\n      best = oct = octEncodeVec3(x, y, z, \"floor\", \"floor\");\n      dec = octDecodeVec2(oct);\n      bestCos = dot(x, y, z, dec);\n      oct = octEncodeVec3(x, y, z, \"ceil\", \"floor\");\n      dec = octDecodeVec2(oct);\n      currentCos = dot(x, y, z, dec);\n      if (currentCos > bestCos) {\n        best = oct;\n        bestCos = currentCos;\n      }\n      oct = octEncodeVec3(x, y, z, \"floor\", \"ceil\");\n      dec = octDecodeVec2(oct);\n      currentCos = dot(x, y, z, dec);\n      if (currentCos > bestCos) {\n        best = oct;\n        bestCos = currentCos;\n      }\n      oct = octEncodeVec3(x, y, z, \"ceil\", \"ceil\");\n      dec = octDecodeVec2(oct);\n      currentCos = dot(x, y, z, dec);\n      if (currentCos > bestCos) {\n        best = oct;\n      }\n      return best;\n      function octEncodeVec3(x0, y0, z0, xfunc, yfunc) {\n        var x2 = x0 / (Math.abs(x0) + Math.abs(y0) + Math.abs(z0));\n        var y2 = y0 / (Math.abs(x0) + Math.abs(y0) + Math.abs(z0));\n        if (z < 0) {\n          var tempx = (1 - Math.abs(y2)) * (x2 >= 0 ? 1 : -1);\n          var tempy = (1 - Math.abs(x2)) * (y2 >= 0 ? 1 : -1);\n          x2 = tempx;\n          y2 = tempy;\n          var diff = 1 - Math.abs(x2) - Math.abs(y2);\n          if (diff > 0) {\n            diff += 1e-3;\n            x2 += x2 > 0 ? diff / 2 : -diff / 2;\n            y2 += y2 > 0 ? diff / 2 : -diff / 2;\n          }\n        }\n        if (bytes == 1) {\n          return new Int8Array([Math[xfunc](x2 * 127.5 + (x2 < 0 ? 1 : 0)), Math[yfunc](y2 * 127.5 + (y2 < 0 ? 1 : 0))]);\n        }\n        if (bytes == 2) {\n          return new Int16Array([Math[xfunc](x2 * 32767.5 + (x2 < 0 ? 1 : 0)), Math[yfunc](y2 * 32767.5 + (y2 < 0 ? 1 : 0))]);\n        }\n      }\n      function octDecodeVec2(oct2) {\n        var x2 = oct2[0];\n        var y2 = oct2[1];\n        if (bytes == 1) {\n          x2 /= x2 < 0 ? 127 : 128;\n          y2 /= y2 < 0 ? 127 : 128;\n        } else if (bytes == 2) {\n          x2 /= x2 < 0 ? 32767 : 32768;\n          y2 /= y2 < 0 ? 32767 : 32768;\n        }\n        var z2 = 1 - Math.abs(x2) - Math.abs(y2);\n        if (z2 < 0) {\n          var tmpx = x2;\n          x2 = (1 - Math.abs(y2)) * (x2 >= 0 ? 1 : -1);\n          y2 = (1 - Math.abs(tmpx)) * (y2 >= 0 ? 1 : -1);\n        }\n        var length = Math.sqrt(x2 * x2 + y2 * y2 + z2 * z2);\n        return [x2 / length, y2 / length, z2 / length];\n      }\n      function dot(x2, y2, z2, vec3) {\n        return x2 * vec3[0] + y2 * vec3[1] + z2 * vec3[2];\n      }\n    },\n    quantizedEncode: function quantizedEncode(array, bytes) {\n      var quantized, segments;\n      if (bytes == 1) {\n        quantized = new Uint8Array(array.length);\n        segments = 255;\n      } else if (bytes == 2) {\n        quantized = new Uint16Array(array.length);\n        segments = 65535;\n      } else {\n        console.error(\"number of bytes error! \");\n      }\n      var decodeMat = new Matrix4();\n      var min = new Float32Array(3);\n      var max = new Float32Array(3);\n      min[0] = min[1] = min[2] = Number.MAX_VALUE;\n      max[0] = max[1] = max[2] = -Number.MAX_VALUE;\n      for (var i = 0; i < array.length; i += 3) {\n        min[0] = Math.min(min[0], array[i + 0]);\n        min[1] = Math.min(min[1], array[i + 1]);\n        min[2] = Math.min(min[2], array[i + 2]);\n        max[0] = Math.max(max[0], array[i + 0]);\n        max[1] = Math.max(max[1], array[i + 1]);\n        max[2] = Math.max(max[2], array[i + 2]);\n      }\n      decodeMat.scale(new Vector3((max[0] - min[0]) / segments, (max[1] - min[1]) / segments, (max[2] - min[2]) / segments));\n      decodeMat.elements[12] = min[0];\n      decodeMat.elements[13] = min[1];\n      decodeMat.elements[14] = min[2];\n      decodeMat.transpose();\n      var multiplier = new Float32Array([max[0] !== min[0] ? segments / (max[0] - min[0]) : 0, max[1] !== min[1] ? segments / (max[1] - min[1]) : 0, max[2] !== min[2] ? segments / (max[2] - min[2]) : 0]);\n      for (var _i2 = 0; _i2 < array.length; _i2 += 3) {\n        quantized[_i2 + 0] = Math.floor((array[_i2 + 0] - min[0]) * multiplier[0]);\n        quantized[_i2 + 1] = Math.floor((array[_i2 + 1] - min[1]) * multiplier[1]);\n        quantized[_i2 + 2] = Math.floor((array[_i2 + 2] - min[2]) * multiplier[2]);\n      }\n      return {\n        quantized: quantized,\n        decodeMat: decodeMat\n      };\n    },\n    quantizedEncodeUV: function quantizedEncodeUV(array, bytes) {\n      var quantized, segments;\n      if (bytes == 1) {\n        quantized = new Uint8Array(array.length);\n        segments = 255;\n      } else if (bytes == 2) {\n        quantized = new Uint16Array(array.length);\n        segments = 65535;\n      } else {\n        console.error(\"number of bytes error! \");\n      }\n      var decodeMat = new Matrix3();\n      var min = new Float32Array(2);\n      var max = new Float32Array(2);\n      min[0] = min[1] = Number.MAX_VALUE;\n      max[0] = max[1] = -Number.MAX_VALUE;\n      for (var i = 0; i < array.length; i += 2) {\n        min[0] = Math.min(min[0], array[i + 0]);\n        min[1] = Math.min(min[1], array[i + 1]);\n        max[0] = Math.max(max[0], array[i + 0]);\n        max[1] = Math.max(max[1], array[i + 1]);\n      }\n      decodeMat.scale((max[0] - min[0]) / segments, (max[1] - min[1]) / segments);\n      decodeMat.elements[6] = min[0];\n      decodeMat.elements[7] = min[1];\n      decodeMat.transpose();\n      var multiplier = new Float32Array([max[0] !== min[0] ? segments / (max[0] - min[0]) : 0, max[1] !== min[1] ? segments / (max[1] - min[1]) : 0]);\n      for (var _i3 = 0; _i3 < array.length; _i3 += 2) {\n        quantized[_i3 + 0] = Math.floor((array[_i3 + 0] - min[0]) * multiplier[0]);\n        quantized[_i3 + 1] = Math.floor((array[_i3 + 1] - min[1]) * multiplier[1]);\n      }\n      return {\n        quantized: quantized,\n        decodeMat: decodeMat\n      };\n    }\n  }\n};\nvar PackedPhongMaterial = /*#__PURE__*/function (_MeshPhongMaterial) {\n  _inherits(PackedPhongMaterial, _MeshPhongMaterial);\n  var _super = _createSuper(PackedPhongMaterial);\n  function PackedPhongMaterial(parameters) {\n    var _this;\n    _classCallCheck(this, PackedPhongMaterial);\n    _this = _super.call(this);\n    _this.defines = {};\n    _this.type = \"PackedPhongMaterial\";\n    _this.uniforms = UniformsUtils.merge([ShaderLib.phong.uniforms, {\n      quantizeMatPos: {\n        value: null\n      },\n      quantizeMatUV: {\n        value: null\n      }\n    }]);\n    _this.vertexShader = [\"#define PHONG\", \"varying vec3 vViewPosition;\", \"#ifndef FLAT_SHADED\", \"varying vec3 vNormal;\", \"#endif\", ShaderChunk.common, ShaderChunk.uv_pars_vertex, ShaderChunk.uv2_pars_vertex, ShaderChunk.displacementmap_pars_vertex, ShaderChunk.envmap_pars_vertex, ShaderChunk.color_pars_vertex, ShaderChunk.fog_pars_vertex, ShaderChunk.morphtarget_pars_vertex, ShaderChunk.skinning_pars_vertex, ShaderChunk.shadowmap_pars_vertex, ShaderChunk.logdepthbuf_pars_vertex, ShaderChunk.clipping_planes_pars_vertex, \"#ifdef USE_PACKED_NORMAL\\n\\t\\t\\t\\t\\t#if USE_PACKED_NORMAL == 0\\n\\t\\t\\t\\t\\t\\tvec3 decodeNormal(vec3 packedNormal)\\n\\t\\t\\t\\t\\t\\t{\\n\\t\\t\\t\\t\\t\\t\\tfloat x = packedNormal.x * 2.0 - 1.0;\\n\\t\\t\\t\\t\\t\\t\\tfloat y = packedNormal.y * 2.0 - 1.0;\\n\\t\\t\\t\\t\\t\\t\\tvec2 scth = vec2(sin(x * PI), cos(x * PI));\\n\\t\\t\\t\\t\\t\\t\\tvec2 scphi = vec2(sqrt(1.0 - y * y), y);\\n\\t\\t\\t\\t\\t\\t\\treturn normalize( vec3(scth.y * scphi.x, scth.x * scphi.x, scphi.y) );\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t#endif\\n\\n\\t\\t\\t\\t\\t#if USE_PACKED_NORMAL == 1\\n\\t\\t\\t\\t\\t\\tvec3 decodeNormal(vec3 packedNormal)\\n\\t\\t\\t\\t\\t\\t{\\n\\t\\t\\t\\t\\t\\t\\tvec3 v = vec3(packedNormal.xy, 1.0 - abs(packedNormal.x) - abs(packedNormal.y));\\n\\t\\t\\t\\t\\t\\t\\tif (v.z < 0.0)\\n\\t\\t\\t\\t\\t\\t\\t{\\n\\t\\t\\t\\t\\t\\t\\t\\tv.xy = (1.0 - abs(v.yx)) * vec2((v.x >= 0.0) ? +1.0 : -1.0, (v.y >= 0.0) ? +1.0 : -1.0);\\n\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\treturn normalize(v);\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t#endif\\n\\n\\t\\t\\t\\t\\t#if USE_PACKED_NORMAL == 2\\n\\t\\t\\t\\t\\t\\tvec3 decodeNormal(vec3 packedNormal)\\n\\t\\t\\t\\t\\t\\t{\\n\\t\\t\\t\\t\\t\\t\\tvec3 v = (packedNormal * 2.0) - 1.0;\\n\\t\\t\\t\\t\\t\\t\\treturn normalize(v);\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t#endif\\n\\t\\t\\t\\t#endif\", \"#ifdef USE_PACKED_POSITION\\n\\t\\t\\t\\t\\t#if USE_PACKED_POSITION == 0\\n\\t\\t\\t\\t\\t\\tuniform mat4 quantizeMatPos;\\n\\t\\t\\t\\t\\t#endif\\n\\t\\t\\t\\t#endif\", \"#ifdef USE_PACKED_UV\\n\\t\\t\\t\\t\\t#if USE_PACKED_UV == 1\\n\\t\\t\\t\\t\\t\\tuniform mat3 quantizeMatUV;\\n\\t\\t\\t\\t\\t#endif\\n\\t\\t\\t\\t#endif\", \"#ifdef USE_PACKED_UV\\n\\t\\t\\t\\t\\t#if USE_PACKED_UV == 0\\n\\t\\t\\t\\t\\t\\tvec2 decodeUV(vec2 packedUV)\\n\\t\\t\\t\\t\\t\\t{\\n\\t\\t\\t\\t\\t\\t\\tvec2 uv = (packedUV * 2.0) - 1.0;\\n\\t\\t\\t\\t\\t\\t\\treturn uv;\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t#endif\\n\\n\\t\\t\\t\\t\\t#if USE_PACKED_UV == 1\\n\\t\\t\\t\\t\\t\\tvec2 decodeUV(vec2 packedUV)\\n\\t\\t\\t\\t\\t\\t{\\n\\t\\t\\t\\t\\t\\t\\tvec2 uv = ( vec3(packedUV, 1.0) * quantizeMatUV ).xy;\\n\\t\\t\\t\\t\\t\\t\\treturn uv;\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t#endif\\n\\t\\t\\t\\t#endif\", \"void main() {\", ShaderChunk.uv_vertex, \"#ifdef USE_UV\\n\\t\\t\\t\\t\\t#ifdef USE_PACKED_UV\\n\\t\\t\\t\\t\\t\\tvUv = decodeUV(vUv);\\n\\t\\t\\t\\t\\t#endif\\n\\t\\t\\t\\t#endif\", ShaderChunk.uv2_vertex, ShaderChunk.color_vertex, ShaderChunk.beginnormal_vertex, \"#ifdef USE_PACKED_NORMAL\\n\\t\\t\\t\\t\\tobjectNormal = decodeNormal(objectNormal);\\n\\t\\t\\t\\t#endif\\n\\n\\t\\t\\t\\t#ifdef USE_TANGENT\\n\\t\\t\\t\\t\\tvec3 objectTangent = vec3( tangent.xyz );\\n\\t\\t\\t\\t#endif\\n\\t\\t\\t\\t\", ShaderChunk.morphnormal_vertex, ShaderChunk.skinbase_vertex, ShaderChunk.skinnormal_vertex, ShaderChunk.defaultnormal_vertex, \"#ifndef FLAT_SHADED\", \"\tvNormal = normalize( transformedNormal );\", \"#endif\", ShaderChunk.begin_vertex, \"#ifdef USE_PACKED_POSITION\\n\\t\\t\\t\\t\\t#if USE_PACKED_POSITION == 0\\n\\t\\t\\t\\t\\t\\ttransformed = ( vec4(transformed, 1.0) * quantizeMatPos ).xyz;\\n\\t\\t\\t\\t\\t#endif\\n\\t\\t\\t\\t#endif\", ShaderChunk.morphtarget_vertex, ShaderChunk.skinning_vertex, ShaderChunk.displacementmap_vertex, ShaderChunk.project_vertex, ShaderChunk.logdepthbuf_vertex, ShaderChunk.clipping_planes_vertex, \"vViewPosition = - mvPosition.xyz;\", ShaderChunk.worldpos_vertex, ShaderChunk.envmap_vertex, ShaderChunk.shadowmap_vertex, ShaderChunk.fog_vertex, \"}\"].join(\"\\n\");\n    _this.fragmentShader = [\"#define PHONG\", \"uniform vec3 diffuse;\", \"uniform vec3 emissive;\", \"uniform vec3 specular;\", \"uniform float shininess;\", \"uniform float opacity;\", ShaderChunk.common, ShaderChunk.packing, ShaderChunk.dithering_pars_fragment, ShaderChunk.color_pars_fragment, ShaderChunk.uv_pars_fragment, ShaderChunk.uv2_pars_fragment, ShaderChunk.map_pars_fragment, ShaderChunk.alphamap_pars_fragment, ShaderChunk.aomap_pars_fragment, ShaderChunk.lightmap_pars_fragment, ShaderChunk.emissivemap_pars_fragment, ShaderChunk.envmap_common_pars_fragment, ShaderChunk.envmap_pars_fragment, ShaderChunk.cube_uv_reflection_fragment, ShaderChunk.fog_pars_fragment, ShaderChunk.bsdfs, ShaderChunk.lights_pars_begin, ShaderChunk.lights_phong_pars_fragment, ShaderChunk.shadowmap_pars_fragment, ShaderChunk.bumpmap_pars_fragment, ShaderChunk.normalmap_pars_fragment, ShaderChunk.specularmap_pars_fragment, ShaderChunk.logdepthbuf_pars_fragment, ShaderChunk.clipping_planes_pars_fragment, \"void main() {\", ShaderChunk.clipping_planes_fragment, \"vec4 diffuseColor = vec4( diffuse, opacity );\", \"ReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\", \"vec3 totalEmissiveRadiance = emissive;\", ShaderChunk.logdepthbuf_fragment, ShaderChunk.map_fragment, ShaderChunk.color_fragment, ShaderChunk.alphamap_fragment, ShaderChunk.alphatest_fragment, ShaderChunk.specularmap_fragment, ShaderChunk.normal_fragment_begin, ShaderChunk.normal_fragment_maps, ShaderChunk.emissivemap_fragment,\n    // accumulation\n    ShaderChunk.lights_phong_fragment, ShaderChunk.lights_fragment_begin, ShaderChunk.lights_fragment_maps, ShaderChunk.lights_fragment_end,\n    // modulation\n    ShaderChunk.aomap_fragment, \"vec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;\", ShaderChunk.envmap_fragment, \"gl_FragColor = vec4( outgoingLight, diffuseColor.a );\", ShaderChunk.tonemapping_fragment, ShaderChunk.encodings_fragment, ShaderChunk.fog_fragment, ShaderChunk.premultiplied_alpha_fragment, ShaderChunk.dithering_fragment, \"}\"].join(\"\\n\");\n    _this.setValues(parameters);\n    return _this;\n  }\n  return _createClass(PackedPhongMaterial);\n}(MeshPhongMaterial);\nexport { GeometryCompressionUtils, PackedPhongMaterial };","map":{"version":3,"names":["BufferAttribute","Matrix4","Vector3","Matrix3","MeshPhongMaterial","UniformsUtils","ShaderLib","ShaderChunk","GeometryCompressionUtils","compressNormals","mesh","encodeMethod","geometry","console","error","normal","attributes","isPacked","itemSize","array","count","result","Uint8Array","idx","length","encoded","EncodingFuncs","defaultEncode","setAttribute","bytes","Int8Array","octEncodeBest","Int16Array","Uint16Array","anglesEncode","needsUpdate","packingMethod","material","PackedPhongMaterial","copy","defines","USE_PACKED_NORMAL","compressPositions","position","encodingBytes","quantizedEncode","quantized","decodeMat","boundingBox","computeBoundingBox","boundingSphere","computeBoundingSphere","USE_PACKED_POSITION","uniforms","quantizeMatPos","value","compressUvs","uvs","uv","range","min","Infinity","max","i","Math","USE_PACKED_UV","quantizedEncodeUV","quantizeMatUV","x","y","z","tmpx","round","tmpy","tmpz","defaultDecode","normal0","parseInt","atan2","PI","normal1","oct","dec","best","currentCos","bestCos","octEncodeVec3","octDecodeVec2","dot","x0","y0","z0","xfunc","yfunc","x2","abs","y2","tempx","tempy","diff","oct2","z2","sqrt","vec3","segments","Float32Array","Number","MAX_VALUE","scale","elements","transpose","multiplier","floor","_MeshPhongMaterial","_inherits","_super","_createSuper","parameters","_this","_classCallCheck","call","type","merge","phong","vertexShader","common","uv_pars_vertex","uv2_pars_vertex","displacementmap_pars_vertex","envmap_pars_vertex","color_pars_vertex","fog_pars_vertex","morphtarget_pars_vertex","skinning_pars_vertex","shadowmap_pars_vertex","logdepthbuf_pars_vertex","clipping_planes_pars_vertex","uv_vertex","uv2_vertex","color_vertex","beginnormal_vertex","morphnormal_vertex","skinbase_vertex","skinnormal_vertex","defaultnormal_vertex","begin_vertex","morphtarget_vertex","skinning_vertex","displacementmap_vertex","project_vertex","logdepthbuf_vertex","clipping_planes_vertex","worldpos_vertex","envmap_vertex","shadowmap_vertex","fog_vertex","join","fragmentShader","packing","dithering_pars_fragment","color_pars_fragment","uv_pars_fragment","uv2_pars_fragment","map_pars_fragment","alphamap_pars_fragment","aomap_pars_fragment","lightmap_pars_fragment","emissivemap_pars_fragment","envmap_common_pars_fragment","envmap_pars_fragment","cube_uv_reflection_fragment","fog_pars_fragment","bsdfs","lights_pars_begin","lights_phong_pars_fragment","shadowmap_pars_fragment","bumpmap_pars_fragment","normalmap_pars_fragment","specularmap_pars_fragment","logdepthbuf_pars_fragment","clipping_planes_pars_fragment","clipping_planes_fragment","logdepthbuf_fragment","map_fragment","color_fragment","alphamap_fragment","alphatest_fragment","specularmap_fragment","normal_fragment_begin","normal_fragment_maps","emissivemap_fragment","lights_phong_fragment","lights_fragment_begin","lights_fragment_maps","lights_fragment_end","aomap_fragment","envmap_fragment","tonemapping_fragment","encodings_fragment","fog_fragment","premultiplied_alpha_fragment","dithering_fragment","setValues","_createClass"],"sources":["/home/krug/Coding/JavaScript/Websites/Personal/personal/node_modules/.pnpm/three-stdlib@2.23.7_three@0.151.3/node_modules/three-stdlib/utils/GeometryCompressionUtils.js"],"sourcesContent":["import { BufferAttribute, Matrix4, Vector3, Matrix3, MeshPhongMaterial, UniformsUtils, ShaderLib, ShaderChunk } from \"three\";\nvar GeometryCompressionUtils = {\n  /**\n   * Make the input mesh.geometry's normal attribute encoded and compressed by 3 different methods.\n   * Also will change the mesh.material to `PackedPhongMaterial` which let the vertex shader program decode the normal data.\n   *\n   * @param {THREE.Mesh} mesh\n   * @param {String} encodeMethod\t\t\"DEFAULT\" || \"OCT1Byte\" || \"OCT2Byte\" || \"ANGLES\"\n   *\n   */\n  compressNormals: function(mesh, encodeMethod) {\n    if (!mesh.geometry) {\n      console.error(\"Mesh must contain geometry. \");\n    }\n    const normal = mesh.geometry.attributes.normal;\n    if (!normal) {\n      console.error(\"Geometry must contain normal attribute. \");\n    }\n    if (normal.isPacked)\n      return;\n    if (normal.itemSize != 3) {\n      console.error(\"normal.itemSize is not 3, which cannot be encoded. \");\n    }\n    const array = normal.array;\n    const count = normal.count;\n    let result;\n    if (encodeMethod == \"DEFAULT\") {\n      result = new Uint8Array(count * 3);\n      for (let idx = 0; idx < array.length; idx += 3) {\n        const encoded = this.EncodingFuncs.defaultEncode(array[idx], array[idx + 1], array[idx + 2], 1);\n        result[idx + 0] = encoded[0];\n        result[idx + 1] = encoded[1];\n        result[idx + 2] = encoded[2];\n      }\n      mesh.geometry.setAttribute(\"normal\", new BufferAttribute(result, 3, true));\n      mesh.geometry.attributes.normal.bytes = result.length * 1;\n    } else if (encodeMethod == \"OCT1Byte\") {\n      result = new Int8Array(count * 2);\n      for (let idx = 0; idx < array.length; idx += 3) {\n        const encoded = this.EncodingFuncs.octEncodeBest(array[idx], array[idx + 1], array[idx + 2], 1);\n        result[idx / 3 * 2 + 0] = encoded[0];\n        result[idx / 3 * 2 + 1] = encoded[1];\n      }\n      mesh.geometry.setAttribute(\"normal\", new BufferAttribute(result, 2, true));\n      mesh.geometry.attributes.normal.bytes = result.length * 1;\n    } else if (encodeMethod == \"OCT2Byte\") {\n      result = new Int16Array(count * 2);\n      for (let idx = 0; idx < array.length; idx += 3) {\n        const encoded = this.EncodingFuncs.octEncodeBest(array[idx], array[idx + 1], array[idx + 2], 2);\n        result[idx / 3 * 2 + 0] = encoded[0];\n        result[idx / 3 * 2 + 1] = encoded[1];\n      }\n      mesh.geometry.setAttribute(\"normal\", new BufferAttribute(result, 2, true));\n      mesh.geometry.attributes.normal.bytes = result.length * 2;\n    } else if (encodeMethod == \"ANGLES\") {\n      result = new Uint16Array(count * 2);\n      for (let idx = 0; idx < array.length; idx += 3) {\n        const encoded = this.EncodingFuncs.anglesEncode(array[idx], array[idx + 1], array[idx + 2]);\n        result[idx / 3 * 2 + 0] = encoded[0];\n        result[idx / 3 * 2 + 1] = encoded[1];\n      }\n      mesh.geometry.setAttribute(\"normal\", new BufferAttribute(result, 2, true));\n      mesh.geometry.attributes.normal.bytes = result.length * 2;\n    } else {\n      console.error(\"Unrecognized encoding method, should be `DEFAULT` or `ANGLES` or `OCT`. \");\n    }\n    mesh.geometry.attributes.normal.needsUpdate = true;\n    mesh.geometry.attributes.normal.isPacked = true;\n    mesh.geometry.attributes.normal.packingMethod = encodeMethod;\n    if (!(mesh.material instanceof PackedPhongMaterial)) {\n      mesh.material = new PackedPhongMaterial().copy(mesh.material);\n    }\n    if (encodeMethod == \"ANGLES\") {\n      mesh.material.defines.USE_PACKED_NORMAL = 0;\n    }\n    if (encodeMethod == \"OCT1Byte\") {\n      mesh.material.defines.USE_PACKED_NORMAL = 1;\n    }\n    if (encodeMethod == \"OCT2Byte\") {\n      mesh.material.defines.USE_PACKED_NORMAL = 1;\n    }\n    if (encodeMethod == \"DEFAULT\") {\n      mesh.material.defines.USE_PACKED_NORMAL = 2;\n    }\n  },\n  /**\n   * Make the input mesh.geometry's position attribute encoded and compressed.\n   * Also will change the mesh.material to `PackedPhongMaterial` which let the vertex shader program decode the position data.\n   *\n   * @param {THREE.Mesh} mesh\n   *\n   */\n  compressPositions: function(mesh) {\n    if (!mesh.geometry) {\n      console.error(\"Mesh must contain geometry. \");\n    }\n    const position = mesh.geometry.attributes.position;\n    if (!position) {\n      console.error(\"Geometry must contain position attribute. \");\n    }\n    if (position.isPacked)\n      return;\n    if (position.itemSize != 3) {\n      console.error(\"position.itemSize is not 3, which cannot be packed. \");\n    }\n    const array = position.array;\n    const encodingBytes = 2;\n    const result = this.EncodingFuncs.quantizedEncode(array, encodingBytes);\n    const quantized = result.quantized;\n    const decodeMat = result.decodeMat;\n    if (mesh.geometry.boundingBox == null)\n      mesh.geometry.computeBoundingBox();\n    if (mesh.geometry.boundingSphere == null)\n      mesh.geometry.computeBoundingSphere();\n    mesh.geometry.setAttribute(\"position\", new BufferAttribute(quantized, 3));\n    mesh.geometry.attributes.position.isPacked = true;\n    mesh.geometry.attributes.position.needsUpdate = true;\n    mesh.geometry.attributes.position.bytes = quantized.length * encodingBytes;\n    if (!(mesh.material instanceof PackedPhongMaterial)) {\n      mesh.material = new PackedPhongMaterial().copy(mesh.material);\n    }\n    mesh.material.defines.USE_PACKED_POSITION = 0;\n    mesh.material.uniforms.quantizeMatPos.value = decodeMat;\n    mesh.material.uniforms.quantizeMatPos.needsUpdate = true;\n  },\n  /**\n   * Make the input mesh.geometry's uv attribute encoded and compressed.\n   * Also will change the mesh.material to `PackedPhongMaterial` which let the vertex shader program decode the uv data.\n   *\n   * @param {THREE.Mesh} mesh\n   *\n   */\n  compressUvs: function(mesh) {\n    if (!mesh.geometry) {\n      console.error(\"Mesh must contain geometry property. \");\n    }\n    const uvs = mesh.geometry.attributes.uv;\n    if (!uvs) {\n      console.error(\"Geometry must contain uv attribute. \");\n    }\n    if (uvs.isPacked)\n      return;\n    const range = { min: Infinity, max: -Infinity };\n    const array = uvs.array;\n    for (let i = 0; i < array.length; i++) {\n      range.min = Math.min(range.min, array[i]);\n      range.max = Math.max(range.max, array[i]);\n    }\n    let result;\n    if (range.min >= -1 && range.max <= 1) {\n      result = new Uint16Array(array.length);\n      for (let i = 0; i < array.length; i += 2) {\n        const encoded = this.EncodingFuncs.defaultEncode(array[i], array[i + 1], 0, 2);\n        result[i] = encoded[0];\n        result[i + 1] = encoded[1];\n      }\n      mesh.geometry.setAttribute(\"uv\", new BufferAttribute(result, 2, true));\n      mesh.geometry.attributes.uv.isPacked = true;\n      mesh.geometry.attributes.uv.needsUpdate = true;\n      mesh.geometry.attributes.uv.bytes = result.length * 2;\n      if (!(mesh.material instanceof PackedPhongMaterial)) {\n        mesh.material = new PackedPhongMaterial().copy(mesh.material);\n      }\n      mesh.material.defines.USE_PACKED_UV = 0;\n    } else {\n      result = this.EncodingFuncs.quantizedEncodeUV(array, 2);\n      mesh.geometry.setAttribute(\"uv\", new BufferAttribute(result.quantized, 2));\n      mesh.geometry.attributes.uv.isPacked = true;\n      mesh.geometry.attributes.uv.needsUpdate = true;\n      mesh.geometry.attributes.uv.bytes = result.quantized.length * 2;\n      if (!(mesh.material instanceof PackedPhongMaterial)) {\n        mesh.material = new PackedPhongMaterial().copy(mesh.material);\n      }\n      mesh.material.defines.USE_PACKED_UV = 1;\n      mesh.material.uniforms.quantizeMatUV.value = result.decodeMat;\n      mesh.material.uniforms.quantizeMatUV.needsUpdate = true;\n    }\n  },\n  EncodingFuncs: {\n    defaultEncode: function(x, y, z, bytes) {\n      if (bytes == 1) {\n        const tmpx = Math.round((x + 1) * 0.5 * 255);\n        const tmpy = Math.round((y + 1) * 0.5 * 255);\n        const tmpz = Math.round((z + 1) * 0.5 * 255);\n        return new Uint8Array([tmpx, tmpy, tmpz]);\n      } else if (bytes == 2) {\n        const tmpx = Math.round((x + 1) * 0.5 * 65535);\n        const tmpy = Math.round((y + 1) * 0.5 * 65535);\n        const tmpz = Math.round((z + 1) * 0.5 * 65535);\n        return new Uint16Array([tmpx, tmpy, tmpz]);\n      } else {\n        console.error(\"number of bytes must be 1 or 2\");\n      }\n    },\n    defaultDecode: function(array, bytes) {\n      if (bytes == 1) {\n        return [array[0] / 255 * 2 - 1, array[1] / 255 * 2 - 1, array[2] / 255 * 2 - 1];\n      } else if (bytes == 2) {\n        return [array[0] / 65535 * 2 - 1, array[1] / 65535 * 2 - 1, array[2] / 65535 * 2 - 1];\n      } else {\n        console.error(\"number of bytes must be 1 or 2\");\n      }\n    },\n    // for `Angles` encoding\n    anglesEncode: function(x, y, z) {\n      const normal0 = parseInt(0.5 * (1 + Math.atan2(y, x) / Math.PI) * 65535);\n      const normal1 = parseInt(0.5 * (1 + z) * 65535);\n      return new Uint16Array([normal0, normal1]);\n    },\n    // for `Octahedron` encoding\n    octEncodeBest: function(x, y, z, bytes) {\n      var oct, dec, best, currentCos, bestCos;\n      best = oct = octEncodeVec3(x, y, z, \"floor\", \"floor\");\n      dec = octDecodeVec2(oct);\n      bestCos = dot(x, y, z, dec);\n      oct = octEncodeVec3(x, y, z, \"ceil\", \"floor\");\n      dec = octDecodeVec2(oct);\n      currentCos = dot(x, y, z, dec);\n      if (currentCos > bestCos) {\n        best = oct;\n        bestCos = currentCos;\n      }\n      oct = octEncodeVec3(x, y, z, \"floor\", \"ceil\");\n      dec = octDecodeVec2(oct);\n      currentCos = dot(x, y, z, dec);\n      if (currentCos > bestCos) {\n        best = oct;\n        bestCos = currentCos;\n      }\n      oct = octEncodeVec3(x, y, z, \"ceil\", \"ceil\");\n      dec = octDecodeVec2(oct);\n      currentCos = dot(x, y, z, dec);\n      if (currentCos > bestCos) {\n        best = oct;\n      }\n      return best;\n      function octEncodeVec3(x0, y0, z0, xfunc, yfunc) {\n        var x2 = x0 / (Math.abs(x0) + Math.abs(y0) + Math.abs(z0));\n        var y2 = y0 / (Math.abs(x0) + Math.abs(y0) + Math.abs(z0));\n        if (z < 0) {\n          var tempx = (1 - Math.abs(y2)) * (x2 >= 0 ? 1 : -1);\n          var tempy = (1 - Math.abs(x2)) * (y2 >= 0 ? 1 : -1);\n          x2 = tempx;\n          y2 = tempy;\n          var diff = 1 - Math.abs(x2) - Math.abs(y2);\n          if (diff > 0) {\n            diff += 1e-3;\n            x2 += x2 > 0 ? diff / 2 : -diff / 2;\n            y2 += y2 > 0 ? diff / 2 : -diff / 2;\n          }\n        }\n        if (bytes == 1) {\n          return new Int8Array([Math[xfunc](x2 * 127.5 + (x2 < 0 ? 1 : 0)), Math[yfunc](y2 * 127.5 + (y2 < 0 ? 1 : 0))]);\n        }\n        if (bytes == 2) {\n          return new Int16Array([\n            Math[xfunc](x2 * 32767.5 + (x2 < 0 ? 1 : 0)),\n            Math[yfunc](y2 * 32767.5 + (y2 < 0 ? 1 : 0))\n          ]);\n        }\n      }\n      function octDecodeVec2(oct2) {\n        var x2 = oct2[0];\n        var y2 = oct2[1];\n        if (bytes == 1) {\n          x2 /= x2 < 0 ? 127 : 128;\n          y2 /= y2 < 0 ? 127 : 128;\n        } else if (bytes == 2) {\n          x2 /= x2 < 0 ? 32767 : 32768;\n          y2 /= y2 < 0 ? 32767 : 32768;\n        }\n        var z2 = 1 - Math.abs(x2) - Math.abs(y2);\n        if (z2 < 0) {\n          var tmpx = x2;\n          x2 = (1 - Math.abs(y2)) * (x2 >= 0 ? 1 : -1);\n          y2 = (1 - Math.abs(tmpx)) * (y2 >= 0 ? 1 : -1);\n        }\n        var length = Math.sqrt(x2 * x2 + y2 * y2 + z2 * z2);\n        return [x2 / length, y2 / length, z2 / length];\n      }\n      function dot(x2, y2, z2, vec3) {\n        return x2 * vec3[0] + y2 * vec3[1] + z2 * vec3[2];\n      }\n    },\n    quantizedEncode: function(array, bytes) {\n      let quantized, segments;\n      if (bytes == 1) {\n        quantized = new Uint8Array(array.length);\n        segments = 255;\n      } else if (bytes == 2) {\n        quantized = new Uint16Array(array.length);\n        segments = 65535;\n      } else {\n        console.error(\"number of bytes error! \");\n      }\n      const decodeMat = new Matrix4();\n      const min = new Float32Array(3);\n      const max = new Float32Array(3);\n      min[0] = min[1] = min[2] = Number.MAX_VALUE;\n      max[0] = max[1] = max[2] = -Number.MAX_VALUE;\n      for (let i = 0; i < array.length; i += 3) {\n        min[0] = Math.min(min[0], array[i + 0]);\n        min[1] = Math.min(min[1], array[i + 1]);\n        min[2] = Math.min(min[2], array[i + 2]);\n        max[0] = Math.max(max[0], array[i + 0]);\n        max[1] = Math.max(max[1], array[i + 1]);\n        max[2] = Math.max(max[2], array[i + 2]);\n      }\n      decodeMat.scale(\n        new Vector3((max[0] - min[0]) / segments, (max[1] - min[1]) / segments, (max[2] - min[2]) / segments)\n      );\n      decodeMat.elements[12] = min[0];\n      decodeMat.elements[13] = min[1];\n      decodeMat.elements[14] = min[2];\n      decodeMat.transpose();\n      const multiplier = new Float32Array([\n        max[0] !== min[0] ? segments / (max[0] - min[0]) : 0,\n        max[1] !== min[1] ? segments / (max[1] - min[1]) : 0,\n        max[2] !== min[2] ? segments / (max[2] - min[2]) : 0\n      ]);\n      for (let i = 0; i < array.length; i += 3) {\n        quantized[i + 0] = Math.floor((array[i + 0] - min[0]) * multiplier[0]);\n        quantized[i + 1] = Math.floor((array[i + 1] - min[1]) * multiplier[1]);\n        quantized[i + 2] = Math.floor((array[i + 2] - min[2]) * multiplier[2]);\n      }\n      return {\n        quantized,\n        decodeMat\n      };\n    },\n    quantizedEncodeUV: function(array, bytes) {\n      let quantized, segments;\n      if (bytes == 1) {\n        quantized = new Uint8Array(array.length);\n        segments = 255;\n      } else if (bytes == 2) {\n        quantized = new Uint16Array(array.length);\n        segments = 65535;\n      } else {\n        console.error(\"number of bytes error! \");\n      }\n      const decodeMat = new Matrix3();\n      const min = new Float32Array(2);\n      const max = new Float32Array(2);\n      min[0] = min[1] = Number.MAX_VALUE;\n      max[0] = max[1] = -Number.MAX_VALUE;\n      for (let i = 0; i < array.length; i += 2) {\n        min[0] = Math.min(min[0], array[i + 0]);\n        min[1] = Math.min(min[1], array[i + 1]);\n        max[0] = Math.max(max[0], array[i + 0]);\n        max[1] = Math.max(max[1], array[i + 1]);\n      }\n      decodeMat.scale((max[0] - min[0]) / segments, (max[1] - min[1]) / segments);\n      decodeMat.elements[6] = min[0];\n      decodeMat.elements[7] = min[1];\n      decodeMat.transpose();\n      const multiplier = new Float32Array([\n        max[0] !== min[0] ? segments / (max[0] - min[0]) : 0,\n        max[1] !== min[1] ? segments / (max[1] - min[1]) : 0\n      ]);\n      for (let i = 0; i < array.length; i += 2) {\n        quantized[i + 0] = Math.floor((array[i + 0] - min[0]) * multiplier[0]);\n        quantized[i + 1] = Math.floor((array[i + 1] - min[1]) * multiplier[1]);\n      }\n      return {\n        quantized,\n        decodeMat\n      };\n    }\n  }\n};\nclass PackedPhongMaterial extends MeshPhongMaterial {\n  constructor(parameters) {\n    super();\n    this.defines = {};\n    this.type = \"PackedPhongMaterial\";\n    this.uniforms = UniformsUtils.merge([\n      ShaderLib.phong.uniforms,\n      {\n        quantizeMatPos: { value: null },\n        quantizeMatUV: { value: null }\n      }\n    ]);\n    this.vertexShader = [\n      \"#define PHONG\",\n      \"varying vec3 vViewPosition;\",\n      \"#ifndef FLAT_SHADED\",\n      \"varying vec3 vNormal;\",\n      \"#endif\",\n      ShaderChunk.common,\n      ShaderChunk.uv_pars_vertex,\n      ShaderChunk.uv2_pars_vertex,\n      ShaderChunk.displacementmap_pars_vertex,\n      ShaderChunk.envmap_pars_vertex,\n      ShaderChunk.color_pars_vertex,\n      ShaderChunk.fog_pars_vertex,\n      ShaderChunk.morphtarget_pars_vertex,\n      ShaderChunk.skinning_pars_vertex,\n      ShaderChunk.shadowmap_pars_vertex,\n      ShaderChunk.logdepthbuf_pars_vertex,\n      ShaderChunk.clipping_planes_pars_vertex,\n      `#ifdef USE_PACKED_NORMAL\n\t\t\t\t\t#if USE_PACKED_NORMAL == 0\n\t\t\t\t\t\tvec3 decodeNormal(vec3 packedNormal)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tfloat x = packedNormal.x * 2.0 - 1.0;\n\t\t\t\t\t\t\tfloat y = packedNormal.y * 2.0 - 1.0;\n\t\t\t\t\t\t\tvec2 scth = vec2(sin(x * PI), cos(x * PI));\n\t\t\t\t\t\t\tvec2 scphi = vec2(sqrt(1.0 - y * y), y);\n\t\t\t\t\t\t\treturn normalize( vec3(scth.y * scphi.x, scth.x * scphi.x, scphi.y) );\n\t\t\t\t\t\t}\n\t\t\t\t\t#endif\n\n\t\t\t\t\t#if USE_PACKED_NORMAL == 1\n\t\t\t\t\t\tvec3 decodeNormal(vec3 packedNormal)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tvec3 v = vec3(packedNormal.xy, 1.0 - abs(packedNormal.x) - abs(packedNormal.y));\n\t\t\t\t\t\t\tif (v.z < 0.0)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tv.xy = (1.0 - abs(v.yx)) * vec2((v.x >= 0.0) ? +1.0 : -1.0, (v.y >= 0.0) ? +1.0 : -1.0);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\treturn normalize(v);\n\t\t\t\t\t\t}\n\t\t\t\t\t#endif\n\n\t\t\t\t\t#if USE_PACKED_NORMAL == 2\n\t\t\t\t\t\tvec3 decodeNormal(vec3 packedNormal)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tvec3 v = (packedNormal * 2.0) - 1.0;\n\t\t\t\t\t\t\treturn normalize(v);\n\t\t\t\t\t\t}\n\t\t\t\t\t#endif\n\t\t\t\t#endif`,\n      `#ifdef USE_PACKED_POSITION\n\t\t\t\t\t#if USE_PACKED_POSITION == 0\n\t\t\t\t\t\tuniform mat4 quantizeMatPos;\n\t\t\t\t\t#endif\n\t\t\t\t#endif`,\n      `#ifdef USE_PACKED_UV\n\t\t\t\t\t#if USE_PACKED_UV == 1\n\t\t\t\t\t\tuniform mat3 quantizeMatUV;\n\t\t\t\t\t#endif\n\t\t\t\t#endif`,\n      `#ifdef USE_PACKED_UV\n\t\t\t\t\t#if USE_PACKED_UV == 0\n\t\t\t\t\t\tvec2 decodeUV(vec2 packedUV)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tvec2 uv = (packedUV * 2.0) - 1.0;\n\t\t\t\t\t\t\treturn uv;\n\t\t\t\t\t\t}\n\t\t\t\t\t#endif\n\n\t\t\t\t\t#if USE_PACKED_UV == 1\n\t\t\t\t\t\tvec2 decodeUV(vec2 packedUV)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tvec2 uv = ( vec3(packedUV, 1.0) * quantizeMatUV ).xy;\n\t\t\t\t\t\t\treturn uv;\n\t\t\t\t\t\t}\n\t\t\t\t\t#endif\n\t\t\t\t#endif`,\n      \"void main() {\",\n      ShaderChunk.uv_vertex,\n      `#ifdef USE_UV\n\t\t\t\t\t#ifdef USE_PACKED_UV\n\t\t\t\t\t\tvUv = decodeUV(vUv);\n\t\t\t\t\t#endif\n\t\t\t\t#endif`,\n      ShaderChunk.uv2_vertex,\n      ShaderChunk.color_vertex,\n      ShaderChunk.beginnormal_vertex,\n      `#ifdef USE_PACKED_NORMAL\n\t\t\t\t\tobjectNormal = decodeNormal(objectNormal);\n\t\t\t\t#endif\n\n\t\t\t\t#ifdef USE_TANGENT\n\t\t\t\t\tvec3 objectTangent = vec3( tangent.xyz );\n\t\t\t\t#endif\n\t\t\t\t`,\n      ShaderChunk.morphnormal_vertex,\n      ShaderChunk.skinbase_vertex,\n      ShaderChunk.skinnormal_vertex,\n      ShaderChunk.defaultnormal_vertex,\n      \"#ifndef FLAT_SHADED\",\n      \"\tvNormal = normalize( transformedNormal );\",\n      \"#endif\",\n      ShaderChunk.begin_vertex,\n      `#ifdef USE_PACKED_POSITION\n\t\t\t\t\t#if USE_PACKED_POSITION == 0\n\t\t\t\t\t\ttransformed = ( vec4(transformed, 1.0) * quantizeMatPos ).xyz;\n\t\t\t\t\t#endif\n\t\t\t\t#endif`,\n      ShaderChunk.morphtarget_vertex,\n      ShaderChunk.skinning_vertex,\n      ShaderChunk.displacementmap_vertex,\n      ShaderChunk.project_vertex,\n      ShaderChunk.logdepthbuf_vertex,\n      ShaderChunk.clipping_planes_vertex,\n      \"vViewPosition = - mvPosition.xyz;\",\n      ShaderChunk.worldpos_vertex,\n      ShaderChunk.envmap_vertex,\n      ShaderChunk.shadowmap_vertex,\n      ShaderChunk.fog_vertex,\n      \"}\"\n    ].join(\"\\n\");\n    this.fragmentShader = [\n      \"#define PHONG\",\n      \"uniform vec3 diffuse;\",\n      \"uniform vec3 emissive;\",\n      \"uniform vec3 specular;\",\n      \"uniform float shininess;\",\n      \"uniform float opacity;\",\n      ShaderChunk.common,\n      ShaderChunk.packing,\n      ShaderChunk.dithering_pars_fragment,\n      ShaderChunk.color_pars_fragment,\n      ShaderChunk.uv_pars_fragment,\n      ShaderChunk.uv2_pars_fragment,\n      ShaderChunk.map_pars_fragment,\n      ShaderChunk.alphamap_pars_fragment,\n      ShaderChunk.aomap_pars_fragment,\n      ShaderChunk.lightmap_pars_fragment,\n      ShaderChunk.emissivemap_pars_fragment,\n      ShaderChunk.envmap_common_pars_fragment,\n      ShaderChunk.envmap_pars_fragment,\n      ShaderChunk.cube_uv_reflection_fragment,\n      ShaderChunk.fog_pars_fragment,\n      ShaderChunk.bsdfs,\n      ShaderChunk.lights_pars_begin,\n      ShaderChunk.lights_phong_pars_fragment,\n      ShaderChunk.shadowmap_pars_fragment,\n      ShaderChunk.bumpmap_pars_fragment,\n      ShaderChunk.normalmap_pars_fragment,\n      ShaderChunk.specularmap_pars_fragment,\n      ShaderChunk.logdepthbuf_pars_fragment,\n      ShaderChunk.clipping_planes_pars_fragment,\n      \"void main() {\",\n      ShaderChunk.clipping_planes_fragment,\n      \"vec4 diffuseColor = vec4( diffuse, opacity );\",\n      \"ReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\",\n      \"vec3 totalEmissiveRadiance = emissive;\",\n      ShaderChunk.logdepthbuf_fragment,\n      ShaderChunk.map_fragment,\n      ShaderChunk.color_fragment,\n      ShaderChunk.alphamap_fragment,\n      ShaderChunk.alphatest_fragment,\n      ShaderChunk.specularmap_fragment,\n      ShaderChunk.normal_fragment_begin,\n      ShaderChunk.normal_fragment_maps,\n      ShaderChunk.emissivemap_fragment,\n      // accumulation\n      ShaderChunk.lights_phong_fragment,\n      ShaderChunk.lights_fragment_begin,\n      ShaderChunk.lights_fragment_maps,\n      ShaderChunk.lights_fragment_end,\n      // modulation\n      ShaderChunk.aomap_fragment,\n      \"vec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;\",\n      ShaderChunk.envmap_fragment,\n      \"gl_FragColor = vec4( outgoingLight, diffuseColor.a );\",\n      ShaderChunk.tonemapping_fragment,\n      ShaderChunk.encodings_fragment,\n      ShaderChunk.fog_fragment,\n      ShaderChunk.premultiplied_alpha_fragment,\n      ShaderChunk.dithering_fragment,\n      \"}\"\n    ].join(\"\\n\");\n    this.setValues(parameters);\n  }\n}\nexport {\n  GeometryCompressionUtils,\n  PackedPhongMaterial\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}