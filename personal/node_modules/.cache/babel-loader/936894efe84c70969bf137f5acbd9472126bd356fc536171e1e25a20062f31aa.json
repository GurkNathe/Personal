{"ast":null,"code":"var BleachBypassShader = {\n  uniforms: {\n    tDiffuse: {\n      value: null\n    },\n    opacity: {\n      value: 1\n    }\n  },\n  vertexShader: [\"varying vec2 vUv;\", \"void main() {\", \"\tvUv = uv;\", \"\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\", \"}\"].join(\"\\n\"),\n  fragmentShader: [\"uniform float opacity;\", \"uniform sampler2D tDiffuse;\", \"varying vec2 vUv;\", \"void main() {\", \"\tvec4 base = texture2D( tDiffuse, vUv );\", \"\tvec3 lumCoeff = vec3( 0.25, 0.65, 0.1 );\", \"\tfloat lum = dot( lumCoeff, base.rgb );\", \"\tvec3 blend = vec3( lum );\", \"\tfloat L = min( 1.0, max( 0.0, 10.0 * ( lum - 0.45 ) ) );\", \"\tvec3 result1 = 2.0 * base.rgb * blend;\", \"\tvec3 result2 = 1.0 - 2.0 * ( 1.0 - blend ) * ( 1.0 - base.rgb );\", \"\tvec3 newColor = mix( result1, result2, L );\", \"\tfloat A2 = opacity * base.a;\", \"\tvec3 mixRGB = A2 * newColor.rgb;\", \"\tmixRGB += ( ( 1.0 - A2 ) * base.rgb );\", \"\tgl_FragColor = vec4( mixRGB, base.a );\", \"}\"].join(\"\\n\")\n};\nexport { BleachBypassShader };","map":{"version":3,"names":["BleachBypassShader","uniforms","tDiffuse","value","opacity","vertexShader","join","fragmentShader"],"sources":["/home/krug/Coding/JavaScript/Websites/Personal/personal/node_modules/.pnpm/three-stdlib@2.23.7_three@0.151.3/node_modules/three-stdlib/shaders/BleachBypassShader.js"],"sourcesContent":["const BleachBypassShader = {\n  uniforms: {\n    tDiffuse: { value: null },\n    opacity: { value: 1 }\n  },\n  vertexShader: [\n    \"varying vec2 vUv;\",\n    \"void main() {\",\n    \"\tvUv = uv;\",\n    \"\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\",\n    \"}\"\n  ].join(\"\\n\"),\n  fragmentShader: [\n    \"uniform float opacity;\",\n    \"uniform sampler2D tDiffuse;\",\n    \"varying vec2 vUv;\",\n    \"void main() {\",\n    \"\tvec4 base = texture2D( tDiffuse, vUv );\",\n    \"\tvec3 lumCoeff = vec3( 0.25, 0.65, 0.1 );\",\n    \"\tfloat lum = dot( lumCoeff, base.rgb );\",\n    \"\tvec3 blend = vec3( lum );\",\n    \"\tfloat L = min( 1.0, max( 0.0, 10.0 * ( lum - 0.45 ) ) );\",\n    \"\tvec3 result1 = 2.0 * base.rgb * blend;\",\n    \"\tvec3 result2 = 1.0 - 2.0 * ( 1.0 - blend ) * ( 1.0 - base.rgb );\",\n    \"\tvec3 newColor = mix( result1, result2, L );\",\n    \"\tfloat A2 = opacity * base.a;\",\n    \"\tvec3 mixRGB = A2 * newColor.rgb;\",\n    \"\tmixRGB += ( ( 1.0 - A2 ) * base.rgb );\",\n    \"\tgl_FragColor = vec4( mixRGB, base.a );\",\n    \"}\"\n  ].join(\"\\n\")\n};\nexport {\n  BleachBypassShader\n};\n"],"mappings":"AAAA,IAAMA,kBAAkB,GAAG;EACzBC,QAAQ,EAAE;IACRC,QAAQ,EAAE;MAAEC,KAAK,EAAE;IAAK,CAAC;IACzBC,OAAO,EAAE;MAAED,KAAK,EAAE;IAAE;EACtB,CAAC;EACDE,YAAY,EAAE,CACZ,mBAAmB,EACnB,eAAe,EACf,YAAY,EACZ,4EAA4E,EAC5E,GAAG,CACJ,CAACC,IAAI,CAAC,IAAI,CAAC;EACZC,cAAc,EAAE,CACd,wBAAwB,EACxB,6BAA6B,EAC7B,mBAAmB,EACnB,eAAe,EACf,0CAA0C,EAC1C,2CAA2C,EAC3C,yCAAyC,EACzC,4BAA4B,EAC5B,2DAA2D,EAC3D,yCAAyC,EACzC,mEAAmE,EACnE,8CAA8C,EAC9C,+BAA+B,EAC/B,mCAAmC,EACnC,yCAAyC,EACzC,yCAAyC,EACzC,GAAG,CACJ,CAACD,IAAI,CAAC,IAAI;AACb,CAAC;AACD,SACEN,kBAAkB"},"metadata":{},"sourceType":"module","externalDependencies":[]}