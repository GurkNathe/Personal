{"ast":null,"code":"import _classCallCheck from \"/home/krug/Coding/JavaScript/Websites/Personal/personal/node_modules/.pnpm/@babel+runtime@7.22.3/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/home/krug/Coding/JavaScript/Websites/Personal/personal/node_modules/.pnpm/@babel+runtime@7.22.3/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"/home/krug/Coding/JavaScript/Websites/Personal/personal/node_modules/.pnpm/@babel+runtime@7.22.3/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/home/krug/Coding/JavaScript/Websites/Personal/personal/node_modules/.pnpm/@babel+runtime@7.22.3/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { Loader, FileLoader, LoaderUtils, MeshPhongMaterial, Color, Group, Float32BufferAttribute, BufferGeometry, Mesh } from \"three\";\nimport { unzipSync } from \"fflate\";\nvar AMFLoader = /*#__PURE__*/function (_Loader) {\n  _inherits(AMFLoader, _Loader);\n  var _super = _createSuper(AMFLoader);\n  function AMFLoader(manager) {\n    _classCallCheck(this, AMFLoader);\n    return _super.call(this, manager);\n  }\n  _createClass(AMFLoader, [{\n    key: \"load\",\n    value: function load(url, onLoad, onProgress, onError) {\n      var scope = this;\n      var loader = new FileLoader(scope.manager);\n      loader.setPath(scope.path);\n      loader.setResponseType(\"arraybuffer\");\n      loader.setRequestHeader(scope.requestHeader);\n      loader.setWithCredentials(scope.withCredentials);\n      loader.load(url, function (text) {\n        try {\n          onLoad(scope.parse(text));\n        } catch (e) {\n          if (onError) {\n            onError(e);\n          } else {\n            console.error(e);\n          }\n          scope.manager.itemError(url);\n        }\n      }, onProgress, onError);\n    }\n  }, {\n    key: \"parse\",\n    value: function parse(data) {\n      function loadDocument(data2) {\n        var view = new DataView(data2);\n        var magic = String.fromCharCode(view.getUint8(0), view.getUint8(1));\n        if (magic === \"PK\") {\n          var zip = null;\n          var file = null;\n          console.log(\"THREE.AMFLoader: Loading Zip\");\n          try {\n            zip = unzipSync(new Uint8Array(data2));\n          } catch (e) {\n            if (e instanceof ReferenceError) {\n              console.log(\"THREE.AMFLoader: fflate missing and file is compressed.\");\n              return null;\n            }\n          }\n          for (file in zip) {\n            if (file.toLowerCase().substr(-4) === \".amf\") {\n              break;\n            }\n          }\n          console.log(\"THREE.AMFLoader: Trying to load file asset: \" + file);\n          view = new DataView(zip[file].buffer);\n        }\n        var fileText = LoaderUtils.decodeText(view);\n        var xmlData2 = new DOMParser().parseFromString(fileText, \"application/xml\");\n        if (xmlData2.documentElement.nodeName.toLowerCase() !== \"amf\") {\n          console.log(\"THREE.AMFLoader: Error loading AMF - no AMF document found.\");\n          return null;\n        }\n        return xmlData2;\n      }\n      function loadDocumentScale(node) {\n        var scale = 1;\n        var unit = \"millimeter\";\n        if (node.documentElement.attributes.unit !== void 0) {\n          unit = node.documentElement.attributes.unit.value.toLowerCase();\n        }\n        var scaleUnits = {\n          millimeter: 1,\n          inch: 25.4,\n          feet: 304.8,\n          meter: 1e3,\n          micron: 1e-3\n        };\n        if (scaleUnits[unit] !== void 0) {\n          scale = scaleUnits[unit];\n        }\n        console.log(\"THREE.AMFLoader: Unit scale: \" + scale);\n        return scale;\n      }\n      function loadMaterials(node) {\n        var matName = \"AMF Material\";\n        var matId = node.attributes.id.textContent;\n        var color = {\n          r: 1,\n          g: 1,\n          b: 1,\n          a: 1\n        };\n        var loadedMaterial = null;\n        for (var i2 = 0; i2 < node.childNodes.length; i2++) {\n          var matChildEl = node.childNodes[i2];\n          if (matChildEl.nodeName === \"metadata\" && matChildEl.attributes.type !== void 0) {\n            if (matChildEl.attributes.type.value === \"name\") {\n              matName = matChildEl.textContent;\n            }\n          } else if (matChildEl.nodeName === \"color\") {\n            color = loadColor(matChildEl);\n          }\n        }\n        loadedMaterial = new MeshPhongMaterial({\n          flatShading: true,\n          color: new Color(color.r, color.g, color.b),\n          name: matName\n        });\n        if (color.a !== 1) {\n          loadedMaterial.transparent = true;\n          loadedMaterial.opacity = color.a;\n        }\n        return {\n          id: matId,\n          material: loadedMaterial\n        };\n      }\n      function loadColor(node) {\n        var color = {\n          r: 1,\n          g: 1,\n          b: 1,\n          a: 1\n        };\n        for (var i2 = 0; i2 < node.childNodes.length; i2++) {\n          var matColor = node.childNodes[i2];\n          if (matColor.nodeName === \"r\") {\n            color.r = matColor.textContent;\n          } else if (matColor.nodeName === \"g\") {\n            color.g = matColor.textContent;\n          } else if (matColor.nodeName === \"b\") {\n            color.b = matColor.textContent;\n          } else if (matColor.nodeName === \"a\") {\n            color.a = matColor.textContent;\n          }\n        }\n        return color;\n      }\n      function loadMeshVolume(node) {\n        var volume = {\n          name: \"\",\n          triangles: [],\n          materialid: null\n        };\n        var currVolumeNode = node.firstElementChild;\n        if (node.attributes.materialid !== void 0) {\n          volume.materialId = node.attributes.materialid.nodeValue;\n        }\n        while (currVolumeNode) {\n          if (currVolumeNode.nodeName === \"metadata\") {\n            if (currVolumeNode.attributes.type !== void 0) {\n              if (currVolumeNode.attributes.type.value === \"name\") {\n                volume.name = currVolumeNode.textContent;\n              }\n            }\n          } else if (currVolumeNode.nodeName === \"triangle\") {\n            var v1 = currVolumeNode.getElementsByTagName(\"v1\")[0].textContent;\n            var v2 = currVolumeNode.getElementsByTagName(\"v2\")[0].textContent;\n            var v3 = currVolumeNode.getElementsByTagName(\"v3\")[0].textContent;\n            volume.triangles.push(v1, v2, v3);\n          }\n          currVolumeNode = currVolumeNode.nextElementSibling;\n        }\n        return volume;\n      }\n      function loadMeshVertices(node) {\n        var vertArray = [];\n        var normalArray = [];\n        var currVerticesNode = node.firstElementChild;\n        while (currVerticesNode) {\n          if (currVerticesNode.nodeName === \"vertex\") {\n            var vNode = currVerticesNode.firstElementChild;\n            while (vNode) {\n              if (vNode.nodeName === \"coordinates\") {\n                var x = vNode.getElementsByTagName(\"x\")[0].textContent;\n                var y = vNode.getElementsByTagName(\"y\")[0].textContent;\n                var z = vNode.getElementsByTagName(\"z\")[0].textContent;\n                vertArray.push(x, y, z);\n              } else if (vNode.nodeName === \"normal\") {\n                var nx = vNode.getElementsByTagName(\"nx\")[0].textContent;\n                var ny = vNode.getElementsByTagName(\"ny\")[0].textContent;\n                var nz = vNode.getElementsByTagName(\"nz\")[0].textContent;\n                normalArray.push(nx, ny, nz);\n              }\n              vNode = vNode.nextElementSibling;\n            }\n          }\n          currVerticesNode = currVerticesNode.nextElementSibling;\n        }\n        return {\n          vertices: vertArray,\n          normals: normalArray\n        };\n      }\n      function loadObject(node) {\n        var objId = node.attributes.id.textContent;\n        var loadedObject = {\n          name: \"amfobject\",\n          meshes: []\n        };\n        var currColor = null;\n        var currObjNode = node.firstElementChild;\n        while (currObjNode) {\n          if (currObjNode.nodeName === \"metadata\") {\n            if (currObjNode.attributes.type !== void 0) {\n              if (currObjNode.attributes.type.value === \"name\") {\n                loadedObject.name = currObjNode.textContent;\n              }\n            }\n          } else if (currObjNode.nodeName === \"color\") {\n            currColor = loadColor(currObjNode);\n          } else if (currObjNode.nodeName === \"mesh\") {\n            var currMeshNode = currObjNode.firstElementChild;\n            var mesh = {\n              vertices: [],\n              normals: [],\n              volumes: [],\n              color: currColor\n            };\n            while (currMeshNode) {\n              if (currMeshNode.nodeName === \"vertices\") {\n                var loadedVertices = loadMeshVertices(currMeshNode);\n                mesh.normals = mesh.normals.concat(loadedVertices.normals);\n                mesh.vertices = mesh.vertices.concat(loadedVertices.vertices);\n              } else if (currMeshNode.nodeName === \"volume\") {\n                mesh.volumes.push(loadMeshVolume(currMeshNode));\n              }\n              currMeshNode = currMeshNode.nextElementSibling;\n            }\n            loadedObject.meshes.push(mesh);\n          }\n          currObjNode = currObjNode.nextElementSibling;\n        }\n        return {\n          id: objId,\n          obj: loadedObject\n        };\n      }\n      var xmlData = loadDocument(data);\n      var amfName = \"\";\n      var amfAuthor = \"\";\n      var amfScale = loadDocumentScale(xmlData);\n      var amfMaterials = {};\n      var amfObjects = {};\n      var childNodes = xmlData.documentElement.childNodes;\n      var i, j;\n      for (i = 0; i < childNodes.length; i++) {\n        var child = childNodes[i];\n        if (child.nodeName === \"metadata\") {\n          if (child.attributes.type !== void 0) {\n            if (child.attributes.type.value === \"name\") {\n              amfName = child.textContent;\n            } else if (child.attributes.type.value === \"author\") {\n              amfAuthor = child.textContent;\n            }\n          }\n        } else if (child.nodeName === \"material\") {\n          var loadedMaterial = loadMaterials(child);\n          amfMaterials[loadedMaterial.id] = loadedMaterial.material;\n        } else if (child.nodeName === \"object\") {\n          var loadedObject = loadObject(child);\n          amfObjects[loadedObject.id] = loadedObject.obj;\n        }\n      }\n      var sceneObject = new Group();\n      var defaultMaterial = new MeshPhongMaterial({\n        color: 11184895,\n        flatShading: true\n      });\n      sceneObject.name = amfName;\n      sceneObject.userData.author = amfAuthor;\n      sceneObject.userData.loader = \"AMF\";\n      for (var id in amfObjects) {\n        var part = amfObjects[id];\n        var meshes = part.meshes;\n        var newObject = new Group();\n        newObject.name = part.name || \"\";\n        for (i = 0; i < meshes.length; i++) {\n          var objDefaultMaterial = defaultMaterial;\n          var mesh = meshes[i];\n          var vertices = new Float32BufferAttribute(mesh.vertices, 3);\n          var normals = null;\n          if (mesh.normals.length) {\n            normals = new Float32BufferAttribute(mesh.normals, 3);\n          }\n          if (mesh.color) {\n            var color = mesh.color;\n            objDefaultMaterial = defaultMaterial.clone();\n            objDefaultMaterial.color = new Color(color.r, color.g, color.b);\n            if (color.a !== 1) {\n              objDefaultMaterial.transparent = true;\n              objDefaultMaterial.opacity = color.a;\n            }\n          }\n          var volumes = mesh.volumes;\n          for (j = 0; j < volumes.length; j++) {\n            var volume = volumes[j];\n            var newGeometry = new BufferGeometry();\n            var material = objDefaultMaterial;\n            newGeometry.setIndex(volume.triangles);\n            newGeometry.setAttribute(\"position\", vertices.clone());\n            if (normals) {\n              newGeometry.setAttribute(\"normal\", normals.clone());\n            }\n            if (amfMaterials[volume.materialId] !== void 0) {\n              material = amfMaterials[volume.materialId];\n            }\n            newGeometry.scale(amfScale, amfScale, amfScale);\n            newObject.add(new Mesh(newGeometry, material.clone()));\n          }\n        }\n        sceneObject.add(newObject);\n      }\n      return sceneObject;\n    }\n  }]);\n  return AMFLoader;\n}(Loader);\nexport { AMFLoader };","map":{"version":3,"names":["Loader","FileLoader","LoaderUtils","MeshPhongMaterial","Color","Group","Float32BufferAttribute","BufferGeometry","Mesh","unzipSync","AMFLoader","_Loader","_inherits","_super","_createSuper","manager","_classCallCheck","call","_createClass","key","value","load","url","onLoad","onProgress","onError","scope","loader","setPath","path","setResponseType","setRequestHeader","requestHeader","setWithCredentials","withCredentials","text","parse","e","console","error","itemError","data","loadDocument","data2","view","DataView","magic","String","fromCharCode","getUint8","zip","file","log","Uint8Array","ReferenceError","toLowerCase","substr","buffer","fileText","decodeText","xmlData2","DOMParser","parseFromString","documentElement","nodeName","loadDocumentScale","node","scale","unit","attributes","scaleUnits","millimeter","inch","feet","meter","micron","loadMaterials","matName","matId","id","textContent","color","r","g","b","a","loadedMaterial","i2","childNodes","length","matChildEl","type","loadColor","flatShading","name","transparent","opacity","material","matColor","loadMeshVolume","volume","triangles","materialid","currVolumeNode","firstElementChild","materialId","nodeValue","v1","getElementsByTagName","v2","v3","push","nextElementSibling","loadMeshVertices","vertArray","normalArray","currVerticesNode","vNode","x","y","z","nx","ny","nz","vertices","normals","loadObject","objId","loadedObject","meshes","currColor","currObjNode","currMeshNode","mesh","volumes","loadedVertices","concat","obj","xmlData","amfName","amfAuthor","amfScale","amfMaterials","amfObjects","i","j","child","sceneObject","defaultMaterial","userData","author","part","newObject","objDefaultMaterial","clone","newGeometry","setIndex","setAttribute","add"],"sources":["/home/krug/Coding/JavaScript/Websites/Personal/personal/node_modules/.pnpm/three-stdlib@2.23.7_three@0.151.3/node_modules/three-stdlib/loaders/AMFLoader.js"],"sourcesContent":["import { Loader, FileLoader, LoaderUtils, MeshPhongMaterial, Color, Group, Float32BufferAttribute, BufferGeometry, Mesh } from \"three\";\nimport { unzipSync } from \"fflate\";\nclass AMFLoader extends Loader {\n  constructor(manager) {\n    super(manager);\n  }\n  load(url, onLoad, onProgress, onError) {\n    const scope = this;\n    const loader = new FileLoader(scope.manager);\n    loader.setPath(scope.path);\n    loader.setResponseType(\"arraybuffer\");\n    loader.setRequestHeader(scope.requestHeader);\n    loader.setWithCredentials(scope.withCredentials);\n    loader.load(\n      url,\n      function(text) {\n        try {\n          onLoad(scope.parse(text));\n        } catch (e) {\n          if (onError) {\n            onError(e);\n          } else {\n            console.error(e);\n          }\n          scope.manager.itemError(url);\n        }\n      },\n      onProgress,\n      onError\n    );\n  }\n  parse(data) {\n    function loadDocument(data2) {\n      let view = new DataView(data2);\n      const magic = String.fromCharCode(view.getUint8(0), view.getUint8(1));\n      if (magic === \"PK\") {\n        let zip = null;\n        let file = null;\n        console.log(\"THREE.AMFLoader: Loading Zip\");\n        try {\n          zip = unzipSync(new Uint8Array(data2));\n        } catch (e) {\n          if (e instanceof ReferenceError) {\n            console.log(\"THREE.AMFLoader: fflate missing and file is compressed.\");\n            return null;\n          }\n        }\n        for (file in zip) {\n          if (file.toLowerCase().substr(-4) === \".amf\") {\n            break;\n          }\n        }\n        console.log(\"THREE.AMFLoader: Trying to load file asset: \" + file);\n        view = new DataView(zip[file].buffer);\n      }\n      const fileText = LoaderUtils.decodeText(view);\n      const xmlData2 = new DOMParser().parseFromString(fileText, \"application/xml\");\n      if (xmlData2.documentElement.nodeName.toLowerCase() !== \"amf\") {\n        console.log(\"THREE.AMFLoader: Error loading AMF - no AMF document found.\");\n        return null;\n      }\n      return xmlData2;\n    }\n    function loadDocumentScale(node) {\n      let scale = 1;\n      let unit = \"millimeter\";\n      if (node.documentElement.attributes.unit !== void 0) {\n        unit = node.documentElement.attributes.unit.value.toLowerCase();\n      }\n      const scaleUnits = {\n        millimeter: 1,\n        inch: 25.4,\n        feet: 304.8,\n        meter: 1e3,\n        micron: 1e-3\n      };\n      if (scaleUnits[unit] !== void 0) {\n        scale = scaleUnits[unit];\n      }\n      console.log(\"THREE.AMFLoader: Unit scale: \" + scale);\n      return scale;\n    }\n    function loadMaterials(node) {\n      let matName = \"AMF Material\";\n      const matId = node.attributes.id.textContent;\n      let color = { r: 1, g: 1, b: 1, a: 1 };\n      let loadedMaterial = null;\n      for (let i2 = 0; i2 < node.childNodes.length; i2++) {\n        const matChildEl = node.childNodes[i2];\n        if (matChildEl.nodeName === \"metadata\" && matChildEl.attributes.type !== void 0) {\n          if (matChildEl.attributes.type.value === \"name\") {\n            matName = matChildEl.textContent;\n          }\n        } else if (matChildEl.nodeName === \"color\") {\n          color = loadColor(matChildEl);\n        }\n      }\n      loadedMaterial = new MeshPhongMaterial({\n        flatShading: true,\n        color: new Color(color.r, color.g, color.b),\n        name: matName\n      });\n      if (color.a !== 1) {\n        loadedMaterial.transparent = true;\n        loadedMaterial.opacity = color.a;\n      }\n      return { id: matId, material: loadedMaterial };\n    }\n    function loadColor(node) {\n      const color = { r: 1, g: 1, b: 1, a: 1 };\n      for (let i2 = 0; i2 < node.childNodes.length; i2++) {\n        const matColor = node.childNodes[i2];\n        if (matColor.nodeName === \"r\") {\n          color.r = matColor.textContent;\n        } else if (matColor.nodeName === \"g\") {\n          color.g = matColor.textContent;\n        } else if (matColor.nodeName === \"b\") {\n          color.b = matColor.textContent;\n        } else if (matColor.nodeName === \"a\") {\n          color.a = matColor.textContent;\n        }\n      }\n      return color;\n    }\n    function loadMeshVolume(node) {\n      const volume = { name: \"\", triangles: [], materialid: null };\n      let currVolumeNode = node.firstElementChild;\n      if (node.attributes.materialid !== void 0) {\n        volume.materialId = node.attributes.materialid.nodeValue;\n      }\n      while (currVolumeNode) {\n        if (currVolumeNode.nodeName === \"metadata\") {\n          if (currVolumeNode.attributes.type !== void 0) {\n            if (currVolumeNode.attributes.type.value === \"name\") {\n              volume.name = currVolumeNode.textContent;\n            }\n          }\n        } else if (currVolumeNode.nodeName === \"triangle\") {\n          const v1 = currVolumeNode.getElementsByTagName(\"v1\")[0].textContent;\n          const v2 = currVolumeNode.getElementsByTagName(\"v2\")[0].textContent;\n          const v3 = currVolumeNode.getElementsByTagName(\"v3\")[0].textContent;\n          volume.triangles.push(v1, v2, v3);\n        }\n        currVolumeNode = currVolumeNode.nextElementSibling;\n      }\n      return volume;\n    }\n    function loadMeshVertices(node) {\n      const vertArray = [];\n      const normalArray = [];\n      let currVerticesNode = node.firstElementChild;\n      while (currVerticesNode) {\n        if (currVerticesNode.nodeName === \"vertex\") {\n          let vNode = currVerticesNode.firstElementChild;\n          while (vNode) {\n            if (vNode.nodeName === \"coordinates\") {\n              const x = vNode.getElementsByTagName(\"x\")[0].textContent;\n              const y = vNode.getElementsByTagName(\"y\")[0].textContent;\n              const z = vNode.getElementsByTagName(\"z\")[0].textContent;\n              vertArray.push(x, y, z);\n            } else if (vNode.nodeName === \"normal\") {\n              const nx = vNode.getElementsByTagName(\"nx\")[0].textContent;\n              const ny = vNode.getElementsByTagName(\"ny\")[0].textContent;\n              const nz = vNode.getElementsByTagName(\"nz\")[0].textContent;\n              normalArray.push(nx, ny, nz);\n            }\n            vNode = vNode.nextElementSibling;\n          }\n        }\n        currVerticesNode = currVerticesNode.nextElementSibling;\n      }\n      return { vertices: vertArray, normals: normalArray };\n    }\n    function loadObject(node) {\n      const objId = node.attributes.id.textContent;\n      const loadedObject = { name: \"amfobject\", meshes: [] };\n      let currColor = null;\n      let currObjNode = node.firstElementChild;\n      while (currObjNode) {\n        if (currObjNode.nodeName === \"metadata\") {\n          if (currObjNode.attributes.type !== void 0) {\n            if (currObjNode.attributes.type.value === \"name\") {\n              loadedObject.name = currObjNode.textContent;\n            }\n          }\n        } else if (currObjNode.nodeName === \"color\") {\n          currColor = loadColor(currObjNode);\n        } else if (currObjNode.nodeName === \"mesh\") {\n          let currMeshNode = currObjNode.firstElementChild;\n          const mesh = { vertices: [], normals: [], volumes: [], color: currColor };\n          while (currMeshNode) {\n            if (currMeshNode.nodeName === \"vertices\") {\n              const loadedVertices = loadMeshVertices(currMeshNode);\n              mesh.normals = mesh.normals.concat(loadedVertices.normals);\n              mesh.vertices = mesh.vertices.concat(loadedVertices.vertices);\n            } else if (currMeshNode.nodeName === \"volume\") {\n              mesh.volumes.push(loadMeshVolume(currMeshNode));\n            }\n            currMeshNode = currMeshNode.nextElementSibling;\n          }\n          loadedObject.meshes.push(mesh);\n        }\n        currObjNode = currObjNode.nextElementSibling;\n      }\n      return { id: objId, obj: loadedObject };\n    }\n    const xmlData = loadDocument(data);\n    let amfName = \"\";\n    let amfAuthor = \"\";\n    const amfScale = loadDocumentScale(xmlData);\n    const amfMaterials = {};\n    const amfObjects = {};\n    const childNodes = xmlData.documentElement.childNodes;\n    let i, j;\n    for (i = 0; i < childNodes.length; i++) {\n      const child = childNodes[i];\n      if (child.nodeName === \"metadata\") {\n        if (child.attributes.type !== void 0) {\n          if (child.attributes.type.value === \"name\") {\n            amfName = child.textContent;\n          } else if (child.attributes.type.value === \"author\") {\n            amfAuthor = child.textContent;\n          }\n        }\n      } else if (child.nodeName === \"material\") {\n        const loadedMaterial = loadMaterials(child);\n        amfMaterials[loadedMaterial.id] = loadedMaterial.material;\n      } else if (child.nodeName === \"object\") {\n        const loadedObject = loadObject(child);\n        amfObjects[loadedObject.id] = loadedObject.obj;\n      }\n    }\n    const sceneObject = new Group();\n    const defaultMaterial = new MeshPhongMaterial({ color: 11184895, flatShading: true });\n    sceneObject.name = amfName;\n    sceneObject.userData.author = amfAuthor;\n    sceneObject.userData.loader = \"AMF\";\n    for (const id in amfObjects) {\n      const part = amfObjects[id];\n      const meshes = part.meshes;\n      const newObject = new Group();\n      newObject.name = part.name || \"\";\n      for (i = 0; i < meshes.length; i++) {\n        let objDefaultMaterial = defaultMaterial;\n        const mesh = meshes[i];\n        const vertices = new Float32BufferAttribute(mesh.vertices, 3);\n        let normals = null;\n        if (mesh.normals.length) {\n          normals = new Float32BufferAttribute(mesh.normals, 3);\n        }\n        if (mesh.color) {\n          const color = mesh.color;\n          objDefaultMaterial = defaultMaterial.clone();\n          objDefaultMaterial.color = new Color(color.r, color.g, color.b);\n          if (color.a !== 1) {\n            objDefaultMaterial.transparent = true;\n            objDefaultMaterial.opacity = color.a;\n          }\n        }\n        const volumes = mesh.volumes;\n        for (j = 0; j < volumes.length; j++) {\n          const volume = volumes[j];\n          const newGeometry = new BufferGeometry();\n          let material = objDefaultMaterial;\n          newGeometry.setIndex(volume.triangles);\n          newGeometry.setAttribute(\"position\", vertices.clone());\n          if (normals) {\n            newGeometry.setAttribute(\"normal\", normals.clone());\n          }\n          if (amfMaterials[volume.materialId] !== void 0) {\n            material = amfMaterials[volume.materialId];\n          }\n          newGeometry.scale(amfScale, amfScale, amfScale);\n          newObject.add(new Mesh(newGeometry, material.clone()));\n        }\n      }\n      sceneObject.add(newObject);\n    }\n    return sceneObject;\n  }\n}\nexport {\n  AMFLoader\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}