{"ast":null,"code":"import { useLoader } from '@react-three/fiber';\nimport { CubeTextureLoader, CubeReflectionMapping, EquirectangularReflectionMapping, sRGBEncoding, LinearEncoding } from 'three';\nimport { EXRLoader, RGBELoader } from 'three-stdlib';\nimport { suspend } from 'suspend-react';\nimport { presetsObj } from '../helpers/environment-assets.js';\nconst CUBEMAP_ROOT = 'https://raw.githack.com/pmndrs/drei-assets/456060a26bbeb8fdf79326f224b6d99b8bcce736/hdri/';\nconst isPromise = promise => typeof promise === 'object' && typeof promise.then === 'function';\nconst isArray = arr => Array.isArray(arr);\nfunction useEnvironment() {\n  let {\n    files = ['/px.png', '/nx.png', '/py.png', '/ny.png', '/pz.png', '/nz.png'],\n    path = '',\n    preset = undefined,\n    encoding = undefined,\n    extensions\n  } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var _files$split$pop;\n  if (preset) {\n    if (!(preset in presetsObj)) throw new Error('Preset must be one of: ' + Object.keys(presetsObj).join(', '));\n    files = presetsObj[preset];\n    path = CUBEMAP_ROOT;\n  } // Using promises that return inline-URLs by default\n\n  if (isPromise(files)) {\n    files = suspend(async promise => {\n      const result = await promise;\n      return result.default;\n    }, [files]);\n  }\n  const isCubeMap = isArray(files);\n  const extension = !isArray(files) && ((_files$split$pop = files.split('.').pop()) == null ? void 0 : _files$split$pop.toLowerCase());\n  const loader = isCubeMap ? CubeTextureLoader : isPromise(files) || extension === 'exr' ? EXRLoader : extension === 'hdr' ? RGBELoader : null;\n  if (!loader) throw new Error('useEnvironment: Unrecognized file extension: ' + files);\n  const loaderResult = useLoader(\n  // @ts-expect-error\n  loader, isCubeMap ? [files] : files, loader => {\n    loader.setPath(path);\n    if (extensions) extensions(loader);\n  });\n  const texture = isCubeMap ?\n  // @ts-ignore\n  loaderResult[0] : loaderResult;\n  texture.mapping = isCubeMap ? CubeReflectionMapping : EquirectangularReflectionMapping;\n  texture.encoding = (encoding !== null && encoding !== void 0 ? encoding : isCubeMap) ? sRGBEncoding : LinearEncoding;\n  return texture;\n}\nexport { useEnvironment };","map":{"version":3,"names":["useLoader","CubeTextureLoader","CubeReflectionMapping","EquirectangularReflectionMapping","sRGBEncoding","LinearEncoding","EXRLoader","RGBELoader","suspend","presetsObj","CUBEMAP_ROOT","isPromise","promise","then","isArray","arr","Array","useEnvironment","files","path","preset","undefined","encoding","extensions","arguments","length","_files$split$pop","Error","Object","keys","join","result","default","isCubeMap","extension","split","pop","toLowerCase","loader","loaderResult","setPath","texture","mapping"],"sources":["/home/krug/Coding/JavaScript/Websites/Personal/personal/node_modules/.pnpm/@react-three+drei@9.72.1_@react-three+fiber@8.13.0_@types+three@0.150.2_react-dom@18.2.0_react@18.2.0_three@0.151.3/node_modules/@react-three/drei/core/useEnvironment.js"],"sourcesContent":["import { useLoader } from '@react-three/fiber';\nimport { CubeTextureLoader, CubeReflectionMapping, EquirectangularReflectionMapping, sRGBEncoding, LinearEncoding } from 'three';\nimport { EXRLoader, RGBELoader } from 'three-stdlib';\nimport { suspend } from 'suspend-react';\nimport { presetsObj } from '../helpers/environment-assets.js';\n\nconst CUBEMAP_ROOT = 'https://raw.githack.com/pmndrs/drei-assets/456060a26bbeb8fdf79326f224b6d99b8bcce736/hdri/';\n\nconst isPromise = promise => typeof promise === 'object' && typeof promise.then === 'function';\n\nconst isArray = arr => Array.isArray(arr);\n\nfunction useEnvironment({\n  files = ['/px.png', '/nx.png', '/py.png', '/ny.png', '/pz.png', '/nz.png'],\n  path = '',\n  preset = undefined,\n  encoding = undefined,\n  extensions\n} = {}) {\n  var _files$split$pop;\n\n  if (preset) {\n    if (!(preset in presetsObj)) throw new Error('Preset must be one of: ' + Object.keys(presetsObj).join(', '));\n    files = presetsObj[preset];\n    path = CUBEMAP_ROOT;\n  } // Using promises that return inline-URLs by default\n\n\n  if (isPromise(files)) {\n    files = suspend(async promise => {\n      const result = await promise;\n      return result.default;\n    }, [files]);\n  }\n\n  const isCubeMap = isArray(files);\n  const extension = !isArray(files) && ((_files$split$pop = files.split('.').pop()) == null ? void 0 : _files$split$pop.toLowerCase());\n  const loader = isCubeMap ? CubeTextureLoader : isPromise(files) || extension === 'exr' ? EXRLoader : extension === 'hdr' ? RGBELoader : null;\n  if (!loader) throw new Error('useEnvironment: Unrecognized file extension: ' + files);\n  const loaderResult = useLoader( // @ts-expect-error\n  loader, isCubeMap ? [files] : files, loader => {\n    loader.setPath(path);\n    if (extensions) extensions(loader);\n  });\n  const texture = isCubeMap ? // @ts-ignore\n  loaderResult[0] : loaderResult;\n  texture.mapping = isCubeMap ? CubeReflectionMapping : EquirectangularReflectionMapping;\n  texture.encoding = (encoding !== null && encoding !== void 0 ? encoding : isCubeMap) ? sRGBEncoding : LinearEncoding;\n  return texture;\n}\n\nexport { useEnvironment };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}