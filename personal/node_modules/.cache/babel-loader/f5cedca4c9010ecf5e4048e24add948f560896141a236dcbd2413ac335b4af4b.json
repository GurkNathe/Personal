{"ast":null,"code":"var BokehShader = {\n  defines: {\n    DEPTH_PACKING: 1,\n    PERSPECTIVE_CAMERA: 1\n  },\n  uniforms: {\n    tColor: {\n      value: null\n    },\n    tDepth: {\n      value: null\n    },\n    focus: {\n      value: 1\n    },\n    aspect: {\n      value: 1\n    },\n    aperture: {\n      value: 0.025\n    },\n    maxblur: {\n      value: 0.01\n    },\n    nearClip: {\n      value: 1\n    },\n    farClip: {\n      value: 1e3\n    }\n  },\n  vertexShader: [\"varying vec2 vUv;\", \"void main() {\", \"\tvUv = uv;\", \"\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\", \"}\"].join(\"\\n\"),\n  fragmentShader: [\"#include <common>\", \"varying vec2 vUv;\", \"uniform sampler2D tColor;\", \"uniform sampler2D tDepth;\", \"uniform float maxblur;\",\n  // max blur amount\n  \"uniform float aperture;\",\n  // aperture - bigger values for shallower depth of field\n  \"uniform float nearClip;\", \"uniform float farClip;\", \"uniform float focus;\", \"uniform float aspect;\", \"#include <packing>\", \"float getDepth( const in vec2 screenPosition ) {\", \"\t#if DEPTH_PACKING == 1\", \"\treturn unpackRGBAToDepth( texture2D( tDepth, screenPosition ) );\", \"\t#else\", \"\treturn texture2D( tDepth, screenPosition ).x;\", \"\t#endif\", \"}\", \"float getViewZ( const in float depth ) {\", \"\t#if PERSPECTIVE_CAMERA == 1\", \"\treturn perspectiveDepthToViewZ( depth, nearClip, farClip );\", \"\t#else\", \"\treturn orthographicDepthToViewZ( depth, nearClip, farClip );\", \"\t#endif\", \"}\", \"void main() {\", \"\tvec2 aspectcorrect = vec2( 1.0, aspect );\", \"\tfloat viewZ = getViewZ( getDepth( vUv ) );\", \"\tfloat factor = ( focus + viewZ );\",\n  // viewZ is <= 0, so this is a difference equation\n  \"\tvec2 dofblur = vec2 ( clamp( factor * aperture, -maxblur, maxblur ) );\", \"\tvec2 dofblur9 = dofblur * 0.9;\", \"\tvec2 dofblur7 = dofblur * 0.7;\", \"\tvec2 dofblur4 = dofblur * 0.4;\", \"\tvec4 col = vec4( 0.0 );\", \"\tcol += texture2D( tColor, vUv.xy );\", \"\tcol += texture2D( tColor, vUv.xy + ( vec2(  0.0,   0.4  ) * aspectcorrect ) * dofblur );\", \"\tcol += texture2D( tColor, vUv.xy + ( vec2(  0.15,  0.37 ) * aspectcorrect ) * dofblur );\", \"\tcol += texture2D( tColor, vUv.xy + ( vec2(  0.29,  0.29 ) * aspectcorrect ) * dofblur );\", \"\tcol += texture2D( tColor, vUv.xy + ( vec2( -0.37,  0.15 ) * aspectcorrect ) * dofblur );\", \"\tcol += texture2D( tColor, vUv.xy + ( vec2(  0.40,  0.0  ) * aspectcorrect ) * dofblur );\", \"\tcol += texture2D( tColor, vUv.xy + ( vec2(  0.37, -0.15 ) * aspectcorrect ) * dofblur );\", \"\tcol += texture2D( tColor, vUv.xy + ( vec2(  0.29, -0.29 ) * aspectcorrect ) * dofblur );\", \"\tcol += texture2D( tColor, vUv.xy + ( vec2( -0.15, -0.37 ) * aspectcorrect ) * dofblur );\", \"\tcol += texture2D( tColor, vUv.xy + ( vec2(  0.0,  -0.4  ) * aspectcorrect ) * dofblur );\", \"\tcol += texture2D( tColor, vUv.xy + ( vec2( -0.15,  0.37 ) * aspectcorrect ) * dofblur );\", \"\tcol += texture2D( tColor, vUv.xy + ( vec2( -0.29,  0.29 ) * aspectcorrect ) * dofblur );\", \"\tcol += texture2D( tColor, vUv.xy + ( vec2(  0.37,  0.15 ) * aspectcorrect ) * dofblur );\", \"\tcol += texture2D( tColor, vUv.xy + ( vec2( -0.4,   0.0  ) * aspectcorrect ) * dofblur );\", \"\tcol += texture2D( tColor, vUv.xy + ( vec2( -0.37, -0.15 ) * aspectcorrect ) * dofblur );\", \"\tcol += texture2D( tColor, vUv.xy + ( vec2( -0.29, -0.29 ) * aspectcorrect ) * dofblur );\", \"\tcol += texture2D( tColor, vUv.xy + ( vec2(  0.15, -0.37 ) * aspectcorrect ) * dofblur );\", \"\tcol += texture2D( tColor, vUv.xy + ( vec2(  0.15,  0.37 ) * aspectcorrect ) * dofblur9 );\", \"\tcol += texture2D( tColor, vUv.xy + ( vec2( -0.37,  0.15 ) * aspectcorrect ) * dofblur9 );\", \"\tcol += texture2D( tColor, vUv.xy + ( vec2(  0.37, -0.15 ) * aspectcorrect ) * dofblur9 );\", \"\tcol += texture2D( tColor, vUv.xy + ( vec2( -0.15, -0.37 ) * aspectcorrect ) * dofblur9 );\", \"\tcol += texture2D( tColor, vUv.xy + ( vec2( -0.15,  0.37 ) * aspectcorrect ) * dofblur9 );\", \"\tcol += texture2D( tColor, vUv.xy + ( vec2(  0.37,  0.15 ) * aspectcorrect ) * dofblur9 );\", \"\tcol += texture2D( tColor, vUv.xy + ( vec2( -0.37, -0.15 ) * aspectcorrect ) * dofblur9 );\", \"\tcol += texture2D( tColor, vUv.xy + ( vec2(  0.15, -0.37 ) * aspectcorrect ) * dofblur9 );\", \"\tcol += texture2D( tColor, vUv.xy + ( vec2(  0.29,  0.29 ) * aspectcorrect ) * dofblur7 );\", \"\tcol += texture2D( tColor, vUv.xy + ( vec2(  0.40,  0.0  ) * aspectcorrect ) * dofblur7 );\", \"\tcol += texture2D( tColor, vUv.xy + ( vec2(  0.29, -0.29 ) * aspectcorrect ) * dofblur7 );\", \"\tcol += texture2D( tColor, vUv.xy + ( vec2(  0.0,  -0.4  ) * aspectcorrect ) * dofblur7 );\", \"\tcol += texture2D( tColor, vUv.xy + ( vec2( -0.29,  0.29 ) * aspectcorrect ) * dofblur7 );\", \"\tcol += texture2D( tColor, vUv.xy + ( vec2( -0.4,   0.0  ) * aspectcorrect ) * dofblur7 );\", \"\tcol += texture2D( tColor, vUv.xy + ( vec2( -0.29, -0.29 ) * aspectcorrect ) * dofblur7 );\", \"\tcol += texture2D( tColor, vUv.xy + ( vec2(  0.0,   0.4  ) * aspectcorrect ) * dofblur7 );\", \"\tcol += texture2D( tColor, vUv.xy + ( vec2(  0.29,  0.29 ) * aspectcorrect ) * dofblur4 );\", \"\tcol += texture2D( tColor, vUv.xy + ( vec2(  0.4,   0.0  ) * aspectcorrect ) * dofblur4 );\", \"\tcol += texture2D( tColor, vUv.xy + ( vec2(  0.29, -0.29 ) * aspectcorrect ) * dofblur4 );\", \"\tcol += texture2D( tColor, vUv.xy + ( vec2(  0.0,  -0.4  ) * aspectcorrect ) * dofblur4 );\", \"\tcol += texture2D( tColor, vUv.xy + ( vec2( -0.29,  0.29 ) * aspectcorrect ) * dofblur4 );\", \"\tcol += texture2D( tColor, vUv.xy + ( vec2( -0.4,   0.0  ) * aspectcorrect ) * dofblur4 );\", \"\tcol += texture2D( tColor, vUv.xy + ( vec2( -0.29, -0.29 ) * aspectcorrect ) * dofblur4 );\", \"\tcol += texture2D( tColor, vUv.xy + ( vec2(  0.0,   0.4  ) * aspectcorrect ) * dofblur4 );\", \"\tgl_FragColor = col / 41.0;\", \"\tgl_FragColor.a = 1.0;\", \"}\"].join(\"\\n\")\n};\nexport { BokehShader };","map":{"version":3,"names":["BokehShader","defines","DEPTH_PACKING","PERSPECTIVE_CAMERA","uniforms","tColor","value","tDepth","focus","aspect","aperture","maxblur","nearClip","farClip","vertexShader","join","fragmentShader"],"sources":["/home/krug/Coding/JavaScript/Websites/Personal/personal/node_modules/.pnpm/three-stdlib@2.23.7_three@0.151.3/node_modules/three-stdlib/shaders/BokehShader.js"],"sourcesContent":["const BokehShader = {\n  defines: {\n    DEPTH_PACKING: 1,\n    PERSPECTIVE_CAMERA: 1\n  },\n  uniforms: {\n    tColor: { value: null },\n    tDepth: { value: null },\n    focus: { value: 1 },\n    aspect: { value: 1 },\n    aperture: { value: 0.025 },\n    maxblur: { value: 0.01 },\n    nearClip: { value: 1 },\n    farClip: { value: 1e3 }\n  },\n  vertexShader: [\n    \"varying vec2 vUv;\",\n    \"void main() {\",\n    \"\tvUv = uv;\",\n    \"\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\",\n    \"}\"\n  ].join(\"\\n\"),\n  fragmentShader: [\n    \"#include <common>\",\n    \"varying vec2 vUv;\",\n    \"uniform sampler2D tColor;\",\n    \"uniform sampler2D tDepth;\",\n    \"uniform float maxblur;\",\n    // max blur amount\n    \"uniform float aperture;\",\n    // aperture - bigger values for shallower depth of field\n    \"uniform float nearClip;\",\n    \"uniform float farClip;\",\n    \"uniform float focus;\",\n    \"uniform float aspect;\",\n    \"#include <packing>\",\n    \"float getDepth( const in vec2 screenPosition ) {\",\n    \"\t#if DEPTH_PACKING == 1\",\n    \"\treturn unpackRGBAToDepth( texture2D( tDepth, screenPosition ) );\",\n    \"\t#else\",\n    \"\treturn texture2D( tDepth, screenPosition ).x;\",\n    \"\t#endif\",\n    \"}\",\n    \"float getViewZ( const in float depth ) {\",\n    \"\t#if PERSPECTIVE_CAMERA == 1\",\n    \"\treturn perspectiveDepthToViewZ( depth, nearClip, farClip );\",\n    \"\t#else\",\n    \"\treturn orthographicDepthToViewZ( depth, nearClip, farClip );\",\n    \"\t#endif\",\n    \"}\",\n    \"void main() {\",\n    \"\tvec2 aspectcorrect = vec2( 1.0, aspect );\",\n    \"\tfloat viewZ = getViewZ( getDepth( vUv ) );\",\n    \"\tfloat factor = ( focus + viewZ );\",\n    // viewZ is <= 0, so this is a difference equation\n    \"\tvec2 dofblur = vec2 ( clamp( factor * aperture, -maxblur, maxblur ) );\",\n    \"\tvec2 dofblur9 = dofblur * 0.9;\",\n    \"\tvec2 dofblur7 = dofblur * 0.7;\",\n    \"\tvec2 dofblur4 = dofblur * 0.4;\",\n    \"\tvec4 col = vec4( 0.0 );\",\n    \"\tcol += texture2D( tColor, vUv.xy );\",\n    \"\tcol += texture2D( tColor, vUv.xy + ( vec2(  0.0,   0.4  ) * aspectcorrect ) * dofblur );\",\n    \"\tcol += texture2D( tColor, vUv.xy + ( vec2(  0.15,  0.37 ) * aspectcorrect ) * dofblur );\",\n    \"\tcol += texture2D( tColor, vUv.xy + ( vec2(  0.29,  0.29 ) * aspectcorrect ) * dofblur );\",\n    \"\tcol += texture2D( tColor, vUv.xy + ( vec2( -0.37,  0.15 ) * aspectcorrect ) * dofblur );\",\n    \"\tcol += texture2D( tColor, vUv.xy + ( vec2(  0.40,  0.0  ) * aspectcorrect ) * dofblur );\",\n    \"\tcol += texture2D( tColor, vUv.xy + ( vec2(  0.37, -0.15 ) * aspectcorrect ) * dofblur );\",\n    \"\tcol += texture2D( tColor, vUv.xy + ( vec2(  0.29, -0.29 ) * aspectcorrect ) * dofblur );\",\n    \"\tcol += texture2D( tColor, vUv.xy + ( vec2( -0.15, -0.37 ) * aspectcorrect ) * dofblur );\",\n    \"\tcol += texture2D( tColor, vUv.xy + ( vec2(  0.0,  -0.4  ) * aspectcorrect ) * dofblur );\",\n    \"\tcol += texture2D( tColor, vUv.xy + ( vec2( -0.15,  0.37 ) * aspectcorrect ) * dofblur );\",\n    \"\tcol += texture2D( tColor, vUv.xy + ( vec2( -0.29,  0.29 ) * aspectcorrect ) * dofblur );\",\n    \"\tcol += texture2D( tColor, vUv.xy + ( vec2(  0.37,  0.15 ) * aspectcorrect ) * dofblur );\",\n    \"\tcol += texture2D( tColor, vUv.xy + ( vec2( -0.4,   0.0  ) * aspectcorrect ) * dofblur );\",\n    \"\tcol += texture2D( tColor, vUv.xy + ( vec2( -0.37, -0.15 ) * aspectcorrect ) * dofblur );\",\n    \"\tcol += texture2D( tColor, vUv.xy + ( vec2( -0.29, -0.29 ) * aspectcorrect ) * dofblur );\",\n    \"\tcol += texture2D( tColor, vUv.xy + ( vec2(  0.15, -0.37 ) * aspectcorrect ) * dofblur );\",\n    \"\tcol += texture2D( tColor, vUv.xy + ( vec2(  0.15,  0.37 ) * aspectcorrect ) * dofblur9 );\",\n    \"\tcol += texture2D( tColor, vUv.xy + ( vec2( -0.37,  0.15 ) * aspectcorrect ) * dofblur9 );\",\n    \"\tcol += texture2D( tColor, vUv.xy + ( vec2(  0.37, -0.15 ) * aspectcorrect ) * dofblur9 );\",\n    \"\tcol += texture2D( tColor, vUv.xy + ( vec2( -0.15, -0.37 ) * aspectcorrect ) * dofblur9 );\",\n    \"\tcol += texture2D( tColor, vUv.xy + ( vec2( -0.15,  0.37 ) * aspectcorrect ) * dofblur9 );\",\n    \"\tcol += texture2D( tColor, vUv.xy + ( vec2(  0.37,  0.15 ) * aspectcorrect ) * dofblur9 );\",\n    \"\tcol += texture2D( tColor, vUv.xy + ( vec2( -0.37, -0.15 ) * aspectcorrect ) * dofblur9 );\",\n    \"\tcol += texture2D( tColor, vUv.xy + ( vec2(  0.15, -0.37 ) * aspectcorrect ) * dofblur9 );\",\n    \"\tcol += texture2D( tColor, vUv.xy + ( vec2(  0.29,  0.29 ) * aspectcorrect ) * dofblur7 );\",\n    \"\tcol += texture2D( tColor, vUv.xy + ( vec2(  0.40,  0.0  ) * aspectcorrect ) * dofblur7 );\",\n    \"\tcol += texture2D( tColor, vUv.xy + ( vec2(  0.29, -0.29 ) * aspectcorrect ) * dofblur7 );\",\n    \"\tcol += texture2D( tColor, vUv.xy + ( vec2(  0.0,  -0.4  ) * aspectcorrect ) * dofblur7 );\",\n    \"\tcol += texture2D( tColor, vUv.xy + ( vec2( -0.29,  0.29 ) * aspectcorrect ) * dofblur7 );\",\n    \"\tcol += texture2D( tColor, vUv.xy + ( vec2( -0.4,   0.0  ) * aspectcorrect ) * dofblur7 );\",\n    \"\tcol += texture2D( tColor, vUv.xy + ( vec2( -0.29, -0.29 ) * aspectcorrect ) * dofblur7 );\",\n    \"\tcol += texture2D( tColor, vUv.xy + ( vec2(  0.0,   0.4  ) * aspectcorrect ) * dofblur7 );\",\n    \"\tcol += texture2D( tColor, vUv.xy + ( vec2(  0.29,  0.29 ) * aspectcorrect ) * dofblur4 );\",\n    \"\tcol += texture2D( tColor, vUv.xy + ( vec2(  0.4,   0.0  ) * aspectcorrect ) * dofblur4 );\",\n    \"\tcol += texture2D( tColor, vUv.xy + ( vec2(  0.29, -0.29 ) * aspectcorrect ) * dofblur4 );\",\n    \"\tcol += texture2D( tColor, vUv.xy + ( vec2(  0.0,  -0.4  ) * aspectcorrect ) * dofblur4 );\",\n    \"\tcol += texture2D( tColor, vUv.xy + ( vec2( -0.29,  0.29 ) * aspectcorrect ) * dofblur4 );\",\n    \"\tcol += texture2D( tColor, vUv.xy + ( vec2( -0.4,   0.0  ) * aspectcorrect ) * dofblur4 );\",\n    \"\tcol += texture2D( tColor, vUv.xy + ( vec2( -0.29, -0.29 ) * aspectcorrect ) * dofblur4 );\",\n    \"\tcol += texture2D( tColor, vUv.xy + ( vec2(  0.0,   0.4  ) * aspectcorrect ) * dofblur4 );\",\n    \"\tgl_FragColor = col / 41.0;\",\n    \"\tgl_FragColor.a = 1.0;\",\n    \"}\"\n  ].join(\"\\n\")\n};\nexport {\n  BokehShader\n};\n"],"mappings":"AAAA,IAAMA,WAAW,GAAG;EAClBC,OAAO,EAAE;IACPC,aAAa,EAAE,CAAC;IAChBC,kBAAkB,EAAE;EACtB,CAAC;EACDC,QAAQ,EAAE;IACRC,MAAM,EAAE;MAAEC,KAAK,EAAE;IAAK,CAAC;IACvBC,MAAM,EAAE;MAAED,KAAK,EAAE;IAAK,CAAC;IACvBE,KAAK,EAAE;MAAEF,KAAK,EAAE;IAAE,CAAC;IACnBG,MAAM,EAAE;MAAEH,KAAK,EAAE;IAAE,CAAC;IACpBI,QAAQ,EAAE;MAAEJ,KAAK,EAAE;IAAM,CAAC;IAC1BK,OAAO,EAAE;MAAEL,KAAK,EAAE;IAAK,CAAC;IACxBM,QAAQ,EAAE;MAAEN,KAAK,EAAE;IAAE,CAAC;IACtBO,OAAO,EAAE;MAAEP,KAAK,EAAE;IAAI;EACxB,CAAC;EACDQ,YAAY,EAAE,CACZ,mBAAmB,EACnB,eAAe,EACf,YAAY,EACZ,4EAA4E,EAC5E,GAAG,CACJ,CAACC,IAAI,CAAC,IAAI,CAAC;EACZC,cAAc,EAAE,CACd,mBAAmB,EACnB,mBAAmB,EACnB,2BAA2B,EAC3B,2BAA2B,EAC3B,wBAAwB;EACxB;EACA,yBAAyB;EACzB;EACA,yBAAyB,EACzB,wBAAwB,EACxB,sBAAsB,EACtB,uBAAuB,EACvB,oBAAoB,EACpB,kDAAkD,EAClD,yBAAyB,EACzB,mEAAmE,EACnE,QAAQ,EACR,gDAAgD,EAChD,SAAS,EACT,GAAG,EACH,0CAA0C,EAC1C,8BAA8B,EAC9B,8DAA8D,EAC9D,QAAQ,EACR,+DAA+D,EAC/D,SAAS,EACT,GAAG,EACH,eAAe,EACf,4CAA4C,EAC5C,6CAA6C,EAC7C,oCAAoC;EACpC;EACA,yEAAyE,EACzE,iCAAiC,EACjC,iCAAiC,EACjC,iCAAiC,EACjC,0BAA0B,EAC1B,sCAAsC,EACtC,2FAA2F,EAC3F,2FAA2F,EAC3F,2FAA2F,EAC3F,2FAA2F,EAC3F,2FAA2F,EAC3F,2FAA2F,EAC3F,2FAA2F,EAC3F,2FAA2F,EAC3F,2FAA2F,EAC3F,2FAA2F,EAC3F,2FAA2F,EAC3F,2FAA2F,EAC3F,2FAA2F,EAC3F,2FAA2F,EAC3F,2FAA2F,EAC3F,2FAA2F,EAC3F,4FAA4F,EAC5F,4FAA4F,EAC5F,4FAA4F,EAC5F,4FAA4F,EAC5F,4FAA4F,EAC5F,4FAA4F,EAC5F,4FAA4F,EAC5F,4FAA4F,EAC5F,4FAA4F,EAC5F,4FAA4F,EAC5F,4FAA4F,EAC5F,4FAA4F,EAC5F,4FAA4F,EAC5F,4FAA4F,EAC5F,4FAA4F,EAC5F,4FAA4F,EAC5F,4FAA4F,EAC5F,4FAA4F,EAC5F,4FAA4F,EAC5F,4FAA4F,EAC5F,4FAA4F,EAC5F,4FAA4F,EAC5F,4FAA4F,EAC5F,4FAA4F,EAC5F,6BAA6B,EAC7B,wBAAwB,EACxB,GAAG,CACJ,CAACD,IAAI,CAAC,IAAI;AACb,CAAC;AACD,SACEf,WAAW"},"metadata":{},"sourceType":"module","externalDependencies":[]}