{"ast":null,"code":"import _createClass from \"/home/krug/Coding/JavaScript/Websites/Personal/personal/node_modules/.pnpm/@babel+runtime@7.22.3/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _classCallCheck from \"/home/krug/Coding/JavaScript/Websites/Personal/personal/node_modules/.pnpm/@babel+runtime@7.22.3/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nvar __defProp = Object.defineProperty;\nvar __defNormalProp = function __defNormalProp(obj, key, value) {\n  return key in obj ? __defProp(obj, key, {\n    enumerable: true,\n    configurable: true,\n    writable: true,\n    value: value\n  }) : obj[key] = value;\n};\nvar __publicField = function __publicField(obj, key, value) {\n  __defNormalProp(obj, typeof key !== \"symbol\" ? key + \"\" : key, value);\n  return value;\n};\nimport { Mesh, PlaneGeometry, OrthographicCamera, MathUtils, WebGLRenderTarget, Vector2, RawShaderMaterial, NoBlending } from \"three\";\nvar _mipmapMaterial = /* @__PURE__ */_getMipmapMaterial();\nvar _mesh = /* @__PURE__ */new Mesh( /* @__PURE__ */new PlaneGeometry(2, 2), _mipmapMaterial);\nvar _flatCamera = /* @__PURE__ */new OrthographicCamera(0, 1, 0, 1, 0, 1);\nvar _tempTarget = null;\nvar RoughnessMipmapper = /*#__PURE__*/_createClass(function RoughnessMipmapper(renderer) {\n  _classCallCheck(this, RoughnessMipmapper);\n  __publicField(this, \"generateMipmaps\", function (material) {\n    if (\"roughnessMap\" in material === false) return;\n    var roughnessMap = material.roughnessMap,\n      normalMap = material.normalMap;\n    if (roughnessMap === null || normalMap === null || !roughnessMap.generateMipmaps || material.userData.roughnessUpdated) {\n      return;\n    }\n    material.userData.roughnessUpdated = true;\n    var width = Math.max(roughnessMap.image.width, normalMap.image.width);\n    var height = Math.max(roughnessMap.image.height, normalMap.image.height);\n    if (!MathUtils.isPowerOfTwo(width) || !MathUtils.isPowerOfTwo(height)) return;\n    var oldTarget = this._renderer.getRenderTarget();\n    var autoClear = this._renderer.autoClear;\n    this._renderer.autoClear = false;\n    if (_tempTarget === null || _tempTarget.width !== width || _tempTarget.height !== height) {\n      if (_tempTarget !== null) _tempTarget.dispose();\n      _tempTarget = new WebGLRenderTarget(width, height, {\n        depthBuffer: false\n      });\n      _tempTarget.scissorTest = true;\n    }\n    if (width !== roughnessMap.image.width || height !== roughnessMap.image.height) {\n      var params = {\n        wrapS: roughnessMap.wrapS,\n        wrapT: roughnessMap.wrapT,\n        magFilter: roughnessMap.magFilter,\n        minFilter: roughnessMap.minFilter,\n        depthBuffer: false\n      };\n      var newRoughnessTarget = new WebGLRenderTarget(width, height, params);\n      newRoughnessTarget.texture.generateMipmaps = true;\n      this._renderer.setRenderTarget(newRoughnessTarget);\n      material.roughnessMap = newRoughnessTarget.texture;\n      if (material.metalnessMap == roughnessMap) material.metalnessMap = material.roughnessMap;\n      if (material.aoMap == roughnessMap) material.aoMap = material.roughnessMap;\n    }\n    _mipmapMaterial.uniforms.roughnessMap.value = roughnessMap;\n    _mipmapMaterial.uniforms.normalMap.value = normalMap;\n    var position = new Vector2(0, 0);\n    var texelSize = _mipmapMaterial.uniforms.texelSize.value;\n    for (var mip = 0; width >= 1 && height >= 1; ++mip, width /= 2, height /= 2) {\n      texelSize.set(1 / width, 1 / height);\n      if (mip == 0) texelSize.set(0, 0);\n      _tempTarget.viewport.set(position.x, position.y, width, height);\n      _tempTarget.scissor.set(position.x, position.y, width, height);\n      this._renderer.setRenderTarget(_tempTarget);\n      this._renderer.render(_mesh, _flatCamera);\n      this._renderer.copyFramebufferToTexture(position, material.roughnessMap, mip);\n      _mipmapMaterial.uniforms.roughnessMap.value = material.roughnessMap;\n    }\n    if (roughnessMap !== material.roughnessMap) roughnessMap.dispose();\n    this._renderer.setRenderTarget(oldTarget);\n    this._renderer.autoClear = autoClear;\n  });\n  __publicField(this, \"dispose\", function () {\n    _mipmapMaterial.dispose();\n    _mesh.geometry.dispose();\n    if (_tempTarget != null) _tempTarget.dispose();\n  });\n  this._renderer = renderer;\n  this._renderer.compile(_mesh, _flatCamera);\n});\nfunction _getMipmapMaterial() {\n  var shaderMaterial = new RawShaderMaterial({\n    uniforms: {\n      roughnessMap: {\n        value: null\n      },\n      normalMap: {\n        value: null\n      },\n      texelSize: {\n        value: new Vector2(1, 1)\n      }\n    },\n    vertexShader: /* glsl */\"\\n\\t\\t\\tprecision mediump float;\\n\\t\\t\\tprecision mediump int;\\n\\n\\t\\t\\tattribute vec3 position;\\n\\t\\t\\tattribute vec2 uv;\\n\\n\\t\\t\\tvarying vec2 vUv;\\n\\n\\t\\t\\tvoid main() {\\n\\n\\t\\t\\t\\tvUv = uv;\\n\\n\\t\\t\\t\\tgl_Position = vec4( position, 1.0 );\\n\\n\\t\\t\\t}\\n\\t\\t\",\n    fragmentShader: /* glsl */\"\\n\\t\\t\\tprecision mediump float;\\n\\t\\t\\tprecision mediump int;\\n\\n\\t\\t\\tvarying vec2 vUv;\\n\\n\\t\\t\\tuniform sampler2D roughnessMap;\\n\\t\\t\\tuniform sampler2D normalMap;\\n\\t\\t\\tuniform vec2 texelSize;\\n\\n\\t\\t\\t#define ENVMAP_TYPE_CUBE_UV\\n\\n\\t\\t\\tvec4 envMapTexelToLinear( vec4 a ) { return a; }\\n\\n\\t\\t\\t#include <cube_uv_reflection_fragment>\\n\\n\\t\\t\\tfloat roughnessToVariance( float roughness ) {\\n\\n\\t\\t\\t\\tfloat variance = 0.0;\\n\\n\\t\\t\\t\\tif ( roughness >= r1 ) {\\n\\n\\t\\t\\t\\t\\tvariance = ( r0 - roughness ) * ( v1 - v0 ) / ( r0 - r1 ) + v0;\\n\\n\\t\\t\\t\\t} else if ( roughness >= r4 ) {\\n\\n\\t\\t\\t\\t\\tvariance = ( r1 - roughness ) * ( v4 - v1 ) / ( r1 - r4 ) + v1;\\n\\n\\t\\t\\t\\t} else if ( roughness >= r5 ) {\\n\\n\\t\\t\\t\\t\\tvariance = ( r4 - roughness ) * ( v5 - v4 ) / ( r4 - r5 ) + v4;\\n\\n\\t\\t\\t\\t} else {\\n\\n\\t\\t\\t\\t\\tfloat roughness2 = roughness * roughness;\\n\\n\\t\\t\\t\\t\\tvariance = 1.79 * roughness2 * roughness2;\\n\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\treturn variance;\\n\\n\\t\\t\\t}\\n\\n\\t\\t\\tfloat varianceToRoughness( float variance ) {\\n\\n\\t\\t\\t\\tfloat roughness = 0.0;\\n\\n\\t\\t\\t\\tif ( variance >= v1 ) {\\n\\n\\t\\t\\t\\t\\troughness = ( v0 - variance ) * ( r1 - r0 ) / ( v0 - v1 ) + r0;\\n\\n\\t\\t\\t\\t} else if ( variance >= v4 ) {\\n\\n\\t\\t\\t\\t\\troughness = ( v1 - variance ) * ( r4 - r1 ) / ( v1 - v4 ) + r1;\\n\\n\\t\\t\\t\\t} else if ( variance >= v5 ) {\\n\\n\\t\\t\\t\\t\\troughness = ( v4 - variance ) * ( r5 - r4 ) / ( v4 - v5 ) + r4;\\n\\n\\t\\t\\t\\t} else {\\n\\n\\t\\t\\t\\t\\troughness = pow( 0.559 * variance, 0.25 ); // 0.559 = 1.0 / 1.79\\n\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\treturn roughness;\\n\\n\\t\\t\\t}\\n\\n\\t\\t\\tvoid main() {\\n\\n\\t\\t\\t\\tgl_FragColor = texture2D( roughnessMap, vUv, - 1.0 );\\n\\n\\t\\t\\t\\tif ( texelSize.x == 0.0 ) return;\\n\\n\\t\\t\\t\\tfloat roughness = gl_FragColor.g;\\n\\n\\t\\t\\t\\tfloat variance = roughnessToVariance( roughness );\\n\\n\\t\\t\\t\\tvec3 avgNormal;\\n\\n\\t\\t\\t\\tfor ( float x = - 1.0; x < 2.0; x += 2.0 ) {\\n\\n\\t\\t\\t\\t\\tfor ( float y = - 1.0; y < 2.0; y += 2.0 ) {\\n\\n\\t\\t\\t\\t\\t\\tvec2 uv = vUv + vec2( x, y ) * 0.25 * texelSize;\\n\\n\\t\\t\\t\\t\\t\\tavgNormal += normalize( texture2D( normalMap, uv, - 1.0 ).xyz - 0.5 );\\n\\n\\t\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\tvariance += 1.0 - 0.25 * length( avgNormal );\\n\\n\\t\\t\\t\\tgl_FragColor.g = varianceToRoughness( variance );\\n\\n\\t\\t\\t}\\n\\t\\t\",\n    blending: NoBlending,\n    depthTest: false,\n    depthWrite: false\n  });\n  shaderMaterial.type = \"RoughnessMipmapper\";\n  return shaderMaterial;\n}\nexport { RoughnessMipmapper };","map":{"version":3,"names":["__defProp","Object","defineProperty","__defNormalProp","obj","key","value","enumerable","configurable","writable","__publicField","Mesh","PlaneGeometry","OrthographicCamera","MathUtils","WebGLRenderTarget","Vector2","RawShaderMaterial","NoBlending","_mipmapMaterial","_getMipmapMaterial","_mesh","_flatCamera","_tempTarget","RoughnessMipmapper","_createClass","renderer","_classCallCheck","material","roughnessMap","normalMap","generateMipmaps","userData","roughnessUpdated","width","Math","max","image","height","isPowerOfTwo","oldTarget","_renderer","getRenderTarget","autoClear","dispose","depthBuffer","scissorTest","params","wrapS","wrapT","magFilter","minFilter","newRoughnessTarget","texture","setRenderTarget","metalnessMap","aoMap","uniforms","position","texelSize","mip","set","viewport","x","y","scissor","render","copyFramebufferToTexture","geometry","compile","shaderMaterial","vertexShader","fragmentShader","blending","depthTest","depthWrite","type"],"sources":["/home/krug/Coding/JavaScript/Websites/Personal/personal/node_modules/.pnpm/three-stdlib@2.23.7_three@0.151.3/node_modules/three-stdlib/utils/RoughnessMipmapper.js"],"sourcesContent":["var __defProp = Object.defineProperty;\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;\nvar __publicField = (obj, key, value) => {\n  __defNormalProp(obj, typeof key !== \"symbol\" ? key + \"\" : key, value);\n  return value;\n};\nimport { Mesh, PlaneGeometry, OrthographicCamera, MathUtils, WebGLRenderTarget, Vector2, RawShaderMaterial, NoBlending } from \"three\";\nvar _mipmapMaterial = /* @__PURE__ */ _getMipmapMaterial();\nvar _mesh = /* @__PURE__ */ new Mesh(/* @__PURE__ */ new PlaneGeometry(2, 2), _mipmapMaterial);\nvar _flatCamera = /* @__PURE__ */ new OrthographicCamera(0, 1, 0, 1, 0, 1);\nvar _tempTarget = null;\nclass RoughnessMipmapper {\n  constructor(renderer) {\n    __publicField(this, \"generateMipmaps\", function(material) {\n      if (\"roughnessMap\" in material === false)\n        return;\n      var { roughnessMap, normalMap } = material;\n      if (roughnessMap === null || normalMap === null || !roughnessMap.generateMipmaps || material.userData.roughnessUpdated) {\n        return;\n      }\n      material.userData.roughnessUpdated = true;\n      var width = Math.max(roughnessMap.image.width, normalMap.image.width);\n      var height = Math.max(roughnessMap.image.height, normalMap.image.height);\n      if (!MathUtils.isPowerOfTwo(width) || !MathUtils.isPowerOfTwo(height))\n        return;\n      var oldTarget = this._renderer.getRenderTarget();\n      var autoClear = this._renderer.autoClear;\n      this._renderer.autoClear = false;\n      if (_tempTarget === null || _tempTarget.width !== width || _tempTarget.height !== height) {\n        if (_tempTarget !== null)\n          _tempTarget.dispose();\n        _tempTarget = new WebGLRenderTarget(width, height, {\n          depthBuffer: false\n        });\n        _tempTarget.scissorTest = true;\n      }\n      if (width !== roughnessMap.image.width || height !== roughnessMap.image.height) {\n        var params = {\n          wrapS: roughnessMap.wrapS,\n          wrapT: roughnessMap.wrapT,\n          magFilter: roughnessMap.magFilter,\n          minFilter: roughnessMap.minFilter,\n          depthBuffer: false\n        };\n        var newRoughnessTarget = new WebGLRenderTarget(width, height, params);\n        newRoughnessTarget.texture.generateMipmaps = true;\n        this._renderer.setRenderTarget(newRoughnessTarget);\n        material.roughnessMap = newRoughnessTarget.texture;\n        if (material.metalnessMap == roughnessMap)\n          material.metalnessMap = material.roughnessMap;\n        if (material.aoMap == roughnessMap)\n          material.aoMap = material.roughnessMap;\n      }\n      _mipmapMaterial.uniforms.roughnessMap.value = roughnessMap;\n      _mipmapMaterial.uniforms.normalMap.value = normalMap;\n      var position = new Vector2(0, 0);\n      var texelSize = _mipmapMaterial.uniforms.texelSize.value;\n      for (let mip = 0; width >= 1 && height >= 1; ++mip, width /= 2, height /= 2) {\n        texelSize.set(1 / width, 1 / height);\n        if (mip == 0)\n          texelSize.set(0, 0);\n        _tempTarget.viewport.set(position.x, position.y, width, height);\n        _tempTarget.scissor.set(position.x, position.y, width, height);\n        this._renderer.setRenderTarget(_tempTarget);\n        this._renderer.render(_mesh, _flatCamera);\n        this._renderer.copyFramebufferToTexture(position, material.roughnessMap, mip);\n        _mipmapMaterial.uniforms.roughnessMap.value = material.roughnessMap;\n      }\n      if (roughnessMap !== material.roughnessMap)\n        roughnessMap.dispose();\n      this._renderer.setRenderTarget(oldTarget);\n      this._renderer.autoClear = autoClear;\n    });\n    __publicField(this, \"dispose\", function() {\n      _mipmapMaterial.dispose();\n      _mesh.geometry.dispose();\n      if (_tempTarget != null)\n        _tempTarget.dispose();\n    });\n    this._renderer = renderer;\n    this._renderer.compile(_mesh, _flatCamera);\n  }\n}\nfunction _getMipmapMaterial() {\n  var shaderMaterial = new RawShaderMaterial({\n    uniforms: {\n      roughnessMap: { value: null },\n      normalMap: { value: null },\n      texelSize: { value: new Vector2(1, 1) }\n    },\n    vertexShader: (\n      /* glsl */\n      `\n\t\t\tprecision mediump float;\n\t\t\tprecision mediump int;\n\n\t\t\tattribute vec3 position;\n\t\t\tattribute vec2 uv;\n\n\t\t\tvarying vec2 vUv;\n\n\t\t\tvoid main() {\n\n\t\t\t\tvUv = uv;\n\n\t\t\t\tgl_Position = vec4( position, 1.0 );\n\n\t\t\t}\n\t\t`\n    ),\n    fragmentShader: (\n      /* glsl */\n      `\n\t\t\tprecision mediump float;\n\t\t\tprecision mediump int;\n\n\t\t\tvarying vec2 vUv;\n\n\t\t\tuniform sampler2D roughnessMap;\n\t\t\tuniform sampler2D normalMap;\n\t\t\tuniform vec2 texelSize;\n\n\t\t\t#define ENVMAP_TYPE_CUBE_UV\n\n\t\t\tvec4 envMapTexelToLinear( vec4 a ) { return a; }\n\n\t\t\t#include <cube_uv_reflection_fragment>\n\n\t\t\tfloat roughnessToVariance( float roughness ) {\n\n\t\t\t\tfloat variance = 0.0;\n\n\t\t\t\tif ( roughness >= r1 ) {\n\n\t\t\t\t\tvariance = ( r0 - roughness ) * ( v1 - v0 ) / ( r0 - r1 ) + v0;\n\n\t\t\t\t} else if ( roughness >= r4 ) {\n\n\t\t\t\t\tvariance = ( r1 - roughness ) * ( v4 - v1 ) / ( r1 - r4 ) + v1;\n\n\t\t\t\t} else if ( roughness >= r5 ) {\n\n\t\t\t\t\tvariance = ( r4 - roughness ) * ( v5 - v4 ) / ( r4 - r5 ) + v4;\n\n\t\t\t\t} else {\n\n\t\t\t\t\tfloat roughness2 = roughness * roughness;\n\n\t\t\t\t\tvariance = 1.79 * roughness2 * roughness2;\n\n\t\t\t\t}\n\n\t\t\t\treturn variance;\n\n\t\t\t}\n\n\t\t\tfloat varianceToRoughness( float variance ) {\n\n\t\t\t\tfloat roughness = 0.0;\n\n\t\t\t\tif ( variance >= v1 ) {\n\n\t\t\t\t\troughness = ( v0 - variance ) * ( r1 - r0 ) / ( v0 - v1 ) + r0;\n\n\t\t\t\t} else if ( variance >= v4 ) {\n\n\t\t\t\t\troughness = ( v1 - variance ) * ( r4 - r1 ) / ( v1 - v4 ) + r1;\n\n\t\t\t\t} else if ( variance >= v5 ) {\n\n\t\t\t\t\troughness = ( v4 - variance ) * ( r5 - r4 ) / ( v4 - v5 ) + r4;\n\n\t\t\t\t} else {\n\n\t\t\t\t\troughness = pow( 0.559 * variance, 0.25 ); // 0.559 = 1.0 / 1.79\n\n\t\t\t\t}\n\n\t\t\t\treturn roughness;\n\n\t\t\t}\n\n\t\t\tvoid main() {\n\n\t\t\t\tgl_FragColor = texture2D( roughnessMap, vUv, - 1.0 );\n\n\t\t\t\tif ( texelSize.x == 0.0 ) return;\n\n\t\t\t\tfloat roughness = gl_FragColor.g;\n\n\t\t\t\tfloat variance = roughnessToVariance( roughness );\n\n\t\t\t\tvec3 avgNormal;\n\n\t\t\t\tfor ( float x = - 1.0; x < 2.0; x += 2.0 ) {\n\n\t\t\t\t\tfor ( float y = - 1.0; y < 2.0; y += 2.0 ) {\n\n\t\t\t\t\t\tvec2 uv = vUv + vec2( x, y ) * 0.25 * texelSize;\n\n\t\t\t\t\t\tavgNormal += normalize( texture2D( normalMap, uv, - 1.0 ).xyz - 0.5 );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tvariance += 1.0 - 0.25 * length( avgNormal );\n\n\t\t\t\tgl_FragColor.g = varianceToRoughness( variance );\n\n\t\t\t}\n\t\t`\n    ),\n    blending: NoBlending,\n    depthTest: false,\n    depthWrite: false\n  });\n  shaderMaterial.type = \"RoughnessMipmapper\";\n  return shaderMaterial;\n}\nexport {\n  RoughnessMipmapper\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}