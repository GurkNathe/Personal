{"ast":null,"code":"import { FloatType, Scene, Camera, Mesh, PlaneGeometry, NearestFilter, ShaderMaterial, ClampToEdgeWrapping, WebGLRenderTarget, RGBAFormat, DataTexture, NoToneMapping } from \"three\";\nclass GPUComputationRenderer {\n  constructor(sizeX, sizeY, renderer) {\n    this.variables = [];\n    this.currentTextureIndex = 0;\n    let dataType = FloatType;\n    const scene = new Scene();\n    const camera = new Camera();\n    camera.position.z = 1;\n    const passThruUniforms = {\n      passThruTexture: {\n        value: null\n      }\n    };\n    const passThruShader = createShaderMaterial(getPassThroughFragmentShader(), passThruUniforms);\n    const mesh = new Mesh(new PlaneGeometry(2, 2), passThruShader);\n    scene.add(mesh);\n    this.setDataType = function (type) {\n      dataType = type;\n      return this;\n    };\n    this.addVariable = function (variableName, computeFragmentShader, initialValueTexture) {\n      const material = this.createShaderMaterial(computeFragmentShader);\n      const variable = {\n        name: variableName,\n        initialValueTexture,\n        material,\n        dependencies: null,\n        renderTargets: [],\n        wrapS: null,\n        wrapT: null,\n        minFilter: NearestFilter,\n        magFilter: NearestFilter\n      };\n      this.variables.push(variable);\n      return variable;\n    };\n    this.setVariableDependencies = function (variable, dependencies) {\n      variable.dependencies = dependencies;\n    };\n    this.init = function () {\n      if (renderer.capabilities.isWebGL2 === false && renderer.extensions.has(\"OES_texture_float\") === false) {\n        return \"No OES_texture_float support for float textures.\";\n      }\n      if (renderer.capabilities.maxVertexTextures === 0) {\n        return \"No support for vertex shader textures.\";\n      }\n      for (let i = 0; i < this.variables.length; i++) {\n        const variable = this.variables[i];\n        variable.renderTargets[0] = this.createRenderTarget(sizeX, sizeY, variable.wrapS, variable.wrapT, variable.minFilter, variable.magFilter);\n        variable.renderTargets[1] = this.createRenderTarget(sizeX, sizeY, variable.wrapS, variable.wrapT, variable.minFilter, variable.magFilter);\n        this.renderTexture(variable.initialValueTexture, variable.renderTargets[0]);\n        this.renderTexture(variable.initialValueTexture, variable.renderTargets[1]);\n        const material = variable.material;\n        const uniforms = material.uniforms;\n        if (variable.dependencies !== null) {\n          for (let d = 0; d < variable.dependencies.length; d++) {\n            const depVar = variable.dependencies[d];\n            if (depVar.name !== variable.name) {\n              let found = false;\n              for (let j = 0; j < this.variables.length; j++) {\n                if (depVar.name === this.variables[j].name) {\n                  found = true;\n                  break;\n                }\n              }\n              if (!found) {\n                return \"Variable dependency not found. Variable=\" + variable.name + \", dependency=\" + depVar.name;\n              }\n            }\n            uniforms[depVar.name] = {\n              value: null\n            };\n            material.fragmentShader = \"\\nuniform sampler2D \" + depVar.name + \";\\n\" + material.fragmentShader;\n          }\n        }\n      }\n      this.currentTextureIndex = 0;\n      return null;\n    };\n    this.compute = function () {\n      const currentTextureIndex = this.currentTextureIndex;\n      const nextTextureIndex = this.currentTextureIndex === 0 ? 1 : 0;\n      for (let i = 0, il = this.variables.length; i < il; i++) {\n        const variable = this.variables[i];\n        if (variable.dependencies !== null) {\n          const uniforms = variable.material.uniforms;\n          for (let d = 0, dl = variable.dependencies.length; d < dl; d++) {\n            const depVar = variable.dependencies[d];\n            uniforms[depVar.name].value = depVar.renderTargets[currentTextureIndex].texture;\n          }\n        }\n        this.doRenderTarget(variable.material, variable.renderTargets[nextTextureIndex]);\n      }\n      this.currentTextureIndex = nextTextureIndex;\n    };\n    this.getCurrentRenderTarget = function (variable) {\n      return variable.renderTargets[this.currentTextureIndex];\n    };\n    this.getAlternateRenderTarget = function (variable) {\n      return variable.renderTargets[this.currentTextureIndex === 0 ? 1 : 0];\n    };\n    this.dispose = function () {\n      mesh.geometry.dispose();\n      mesh.material.dispose();\n      const variables = this.variables;\n      for (let i = 0; i < variables.length; i++) {\n        const variable = variables[i];\n        if (variable.initialValueTexture) variable.initialValueTexture.dispose();\n        const renderTargets = variable.renderTargets;\n        for (let j = 0; j < renderTargets.length; j++) {\n          const renderTarget = renderTargets[j];\n          renderTarget.dispose();\n        }\n      }\n    };\n    function addResolutionDefine(materialShader) {\n      materialShader.defines.resolution = \"vec2( \" + sizeX.toFixed(1) + \", \" + sizeY.toFixed(1) + \" )\";\n    }\n    this.addResolutionDefine = addResolutionDefine;\n    function createShaderMaterial(computeFragmentShader, uniforms) {\n      uniforms = uniforms || {};\n      const material = new ShaderMaterial({\n        uniforms,\n        vertexShader: getPassThroughVertexShader(),\n        fragmentShader: computeFragmentShader\n      });\n      addResolutionDefine(material);\n      return material;\n    }\n    this.createShaderMaterial = createShaderMaterial;\n    this.createRenderTarget = function (sizeXTexture, sizeYTexture, wrapS, wrapT, minFilter, magFilter) {\n      sizeXTexture = sizeXTexture || sizeX;\n      sizeYTexture = sizeYTexture || sizeY;\n      wrapS = wrapS || ClampToEdgeWrapping;\n      wrapT = wrapT || ClampToEdgeWrapping;\n      minFilter = minFilter || NearestFilter;\n      magFilter = magFilter || NearestFilter;\n      const renderTarget = new WebGLRenderTarget(sizeXTexture, sizeYTexture, {\n        wrapS,\n        wrapT,\n        minFilter,\n        magFilter,\n        format: RGBAFormat,\n        type: dataType,\n        depthBuffer: false\n      });\n      return renderTarget;\n    };\n    this.createTexture = function () {\n      const data = new Float32Array(sizeX * sizeY * 4);\n      const texture = new DataTexture(data, sizeX, sizeY, RGBAFormat, FloatType);\n      texture.needsUpdate = true;\n      return texture;\n    };\n    this.renderTexture = function (input, output) {\n      passThruUniforms.passThruTexture.value = input;\n      this.doRenderTarget(passThruShader, output);\n      passThruUniforms.passThruTexture.value = null;\n    };\n    this.doRenderTarget = function (material, output) {\n      const currentRenderTarget = renderer.getRenderTarget();\n      const currentXrEnabled = renderer.xr.enabled;\n      const currentShadowAutoUpdate = renderer.shadowMap.autoUpdate;\n      const currentOutputColorSpace = renderer.outputColorSpace;\n      const currentToneMapping = renderer.toneMapping;\n      renderer.xr.enabled = false;\n      renderer.shadowMap.autoUpdate = false;\n      if (\"outputColorSpace\" in renderer) renderer.outputColorSpace = \"srgb-linear\";else renderer.encoding = 3e3;\n      renderer.toneMapping = NoToneMapping;\n      mesh.material = material;\n      renderer.setRenderTarget(output);\n      renderer.render(scene, camera);\n      mesh.material = passThruShader;\n      renderer.xr.enabled = currentXrEnabled;\n      renderer.shadowMap.autoUpdate = currentShadowAutoUpdate;\n      renderer.outputColorSpace = currentOutputColorSpace;\n      renderer.toneMapping = currentToneMapping;\n      renderer.setRenderTarget(currentRenderTarget);\n    };\n    function getPassThroughVertexShader() {\n      return \"void main()\t{\\n\\n\tgl_Position = vec4( position, 1.0 );\\n\\n}\\n\";\n    }\n    function getPassThroughFragmentShader() {\n      return \"uniform sampler2D passThruTexture;\\n\\nvoid main() {\\n\\n\tvec2 uv = gl_FragCoord.xy / resolution.xy;\\n\\n\tgl_FragColor = texture2D( passThruTexture, uv );\\n\\n}\\n\";\n    }\n  }\n}\nexport { GPUComputationRenderer };","map":{"version":3,"names":["FloatType","Scene","Camera","Mesh","PlaneGeometry","NearestFilter","ShaderMaterial","ClampToEdgeWrapping","WebGLRenderTarget","RGBAFormat","DataTexture","NoToneMapping","GPUComputationRenderer","constructor","sizeX","sizeY","renderer","variables","currentTextureIndex","dataType","scene","camera","position","z","passThruUniforms","passThruTexture","value","passThruShader","createShaderMaterial","getPassThroughFragmentShader","mesh","add","setDataType","type","addVariable","variableName","computeFragmentShader","initialValueTexture","material","variable","name","dependencies","renderTargets","wrapS","wrapT","minFilter","magFilter","push","setVariableDependencies","init","capabilities","isWebGL2","extensions","has","maxVertexTextures","i","length","createRenderTarget","renderTexture","uniforms","d","depVar","found","j","fragmentShader","compute","nextTextureIndex","il","dl","texture","doRenderTarget","getCurrentRenderTarget","getAlternateRenderTarget","dispose","geometry","renderTarget","addResolutionDefine","materialShader","defines","resolution","toFixed","vertexShader","getPassThroughVertexShader","sizeXTexture","sizeYTexture","format","depthBuffer","createTexture","data","Float32Array","needsUpdate","input","output","currentRenderTarget","getRenderTarget","currentXrEnabled","xr","enabled","currentShadowAutoUpdate","shadowMap","autoUpdate","currentOutputColorSpace","outputColorSpace","currentToneMapping","toneMapping","encoding","setRenderTarget","render"],"sources":["/home/krug/Coding/JavaScript/Websites/Personal/personal/node_modules/.pnpm/three-stdlib@2.23.7_three@0.151.3/node_modules/three-stdlib/misc/GPUComputationRenderer.js"],"sourcesContent":["import { FloatType, Scene, Camera, Mesh, PlaneGeometry, NearestFilter, ShaderMaterial, ClampToEdgeWrapping, WebGLRenderTarget, RGBAFormat, DataTexture, NoToneMapping } from \"three\";\nclass GPUComputationRenderer {\n  constructor(sizeX, sizeY, renderer) {\n    this.variables = [];\n    this.currentTextureIndex = 0;\n    let dataType = FloatType;\n    const scene = new Scene();\n    const camera = new Camera();\n    camera.position.z = 1;\n    const passThruUniforms = {\n      passThruTexture: { value: null }\n    };\n    const passThruShader = createShaderMaterial(getPassThroughFragmentShader(), passThruUniforms);\n    const mesh = new Mesh(new PlaneGeometry(2, 2), passThruShader);\n    scene.add(mesh);\n    this.setDataType = function(type) {\n      dataType = type;\n      return this;\n    };\n    this.addVariable = function(variableName, computeFragmentShader, initialValueTexture) {\n      const material = this.createShaderMaterial(computeFragmentShader);\n      const variable = {\n        name: variableName,\n        initialValueTexture,\n        material,\n        dependencies: null,\n        renderTargets: [],\n        wrapS: null,\n        wrapT: null,\n        minFilter: NearestFilter,\n        magFilter: NearestFilter\n      };\n      this.variables.push(variable);\n      return variable;\n    };\n    this.setVariableDependencies = function(variable, dependencies) {\n      variable.dependencies = dependencies;\n    };\n    this.init = function() {\n      if (renderer.capabilities.isWebGL2 === false && renderer.extensions.has(\"OES_texture_float\") === false) {\n        return \"No OES_texture_float support for float textures.\";\n      }\n      if (renderer.capabilities.maxVertexTextures === 0) {\n        return \"No support for vertex shader textures.\";\n      }\n      for (let i = 0; i < this.variables.length; i++) {\n        const variable = this.variables[i];\n        variable.renderTargets[0] = this.createRenderTarget(\n          sizeX,\n          sizeY,\n          variable.wrapS,\n          variable.wrapT,\n          variable.minFilter,\n          variable.magFilter\n        );\n        variable.renderTargets[1] = this.createRenderTarget(\n          sizeX,\n          sizeY,\n          variable.wrapS,\n          variable.wrapT,\n          variable.minFilter,\n          variable.magFilter\n        );\n        this.renderTexture(variable.initialValueTexture, variable.renderTargets[0]);\n        this.renderTexture(variable.initialValueTexture, variable.renderTargets[1]);\n        const material = variable.material;\n        const uniforms = material.uniforms;\n        if (variable.dependencies !== null) {\n          for (let d = 0; d < variable.dependencies.length; d++) {\n            const depVar = variable.dependencies[d];\n            if (depVar.name !== variable.name) {\n              let found = false;\n              for (let j = 0; j < this.variables.length; j++) {\n                if (depVar.name === this.variables[j].name) {\n                  found = true;\n                  break;\n                }\n              }\n              if (!found) {\n                return \"Variable dependency not found. Variable=\" + variable.name + \", dependency=\" + depVar.name;\n              }\n            }\n            uniforms[depVar.name] = { value: null };\n            material.fragmentShader = \"\\nuniform sampler2D \" + depVar.name + \";\\n\" + material.fragmentShader;\n          }\n        }\n      }\n      this.currentTextureIndex = 0;\n      return null;\n    };\n    this.compute = function() {\n      const currentTextureIndex = this.currentTextureIndex;\n      const nextTextureIndex = this.currentTextureIndex === 0 ? 1 : 0;\n      for (let i = 0, il = this.variables.length; i < il; i++) {\n        const variable = this.variables[i];\n        if (variable.dependencies !== null) {\n          const uniforms = variable.material.uniforms;\n          for (let d = 0, dl = variable.dependencies.length; d < dl; d++) {\n            const depVar = variable.dependencies[d];\n            uniforms[depVar.name].value = depVar.renderTargets[currentTextureIndex].texture;\n          }\n        }\n        this.doRenderTarget(variable.material, variable.renderTargets[nextTextureIndex]);\n      }\n      this.currentTextureIndex = nextTextureIndex;\n    };\n    this.getCurrentRenderTarget = function(variable) {\n      return variable.renderTargets[this.currentTextureIndex];\n    };\n    this.getAlternateRenderTarget = function(variable) {\n      return variable.renderTargets[this.currentTextureIndex === 0 ? 1 : 0];\n    };\n    this.dispose = function() {\n      mesh.geometry.dispose();\n      mesh.material.dispose();\n      const variables = this.variables;\n      for (let i = 0; i < variables.length; i++) {\n        const variable = variables[i];\n        if (variable.initialValueTexture)\n          variable.initialValueTexture.dispose();\n        const renderTargets = variable.renderTargets;\n        for (let j = 0; j < renderTargets.length; j++) {\n          const renderTarget = renderTargets[j];\n          renderTarget.dispose();\n        }\n      }\n    };\n    function addResolutionDefine(materialShader) {\n      materialShader.defines.resolution = \"vec2( \" + sizeX.toFixed(1) + \", \" + sizeY.toFixed(1) + \" )\";\n    }\n    this.addResolutionDefine = addResolutionDefine;\n    function createShaderMaterial(computeFragmentShader, uniforms) {\n      uniforms = uniforms || {};\n      const material = new ShaderMaterial({\n        uniforms,\n        vertexShader: getPassThroughVertexShader(),\n        fragmentShader: computeFragmentShader\n      });\n      addResolutionDefine(material);\n      return material;\n    }\n    this.createShaderMaterial = createShaderMaterial;\n    this.createRenderTarget = function(sizeXTexture, sizeYTexture, wrapS, wrapT, minFilter, magFilter) {\n      sizeXTexture = sizeXTexture || sizeX;\n      sizeYTexture = sizeYTexture || sizeY;\n      wrapS = wrapS || ClampToEdgeWrapping;\n      wrapT = wrapT || ClampToEdgeWrapping;\n      minFilter = minFilter || NearestFilter;\n      magFilter = magFilter || NearestFilter;\n      const renderTarget = new WebGLRenderTarget(sizeXTexture, sizeYTexture, {\n        wrapS,\n        wrapT,\n        minFilter,\n        magFilter,\n        format: RGBAFormat,\n        type: dataType,\n        depthBuffer: false\n      });\n      return renderTarget;\n    };\n    this.createTexture = function() {\n      const data = new Float32Array(sizeX * sizeY * 4);\n      const texture = new DataTexture(data, sizeX, sizeY, RGBAFormat, FloatType);\n      texture.needsUpdate = true;\n      return texture;\n    };\n    this.renderTexture = function(input, output) {\n      passThruUniforms.passThruTexture.value = input;\n      this.doRenderTarget(passThruShader, output);\n      passThruUniforms.passThruTexture.value = null;\n    };\n    this.doRenderTarget = function(material, output) {\n      const currentRenderTarget = renderer.getRenderTarget();\n      const currentXrEnabled = renderer.xr.enabled;\n      const currentShadowAutoUpdate = renderer.shadowMap.autoUpdate;\n      const currentOutputColorSpace = renderer.outputColorSpace;\n      const currentToneMapping = renderer.toneMapping;\n      renderer.xr.enabled = false;\n      renderer.shadowMap.autoUpdate = false;\n      if (\"outputColorSpace\" in renderer)\n        renderer.outputColorSpace = \"srgb-linear\";\n      else\n        renderer.encoding = 3e3;\n      renderer.toneMapping = NoToneMapping;\n      mesh.material = material;\n      renderer.setRenderTarget(output);\n      renderer.render(scene, camera);\n      mesh.material = passThruShader;\n      renderer.xr.enabled = currentXrEnabled;\n      renderer.shadowMap.autoUpdate = currentShadowAutoUpdate;\n      renderer.outputColorSpace = currentOutputColorSpace;\n      renderer.toneMapping = currentToneMapping;\n      renderer.setRenderTarget(currentRenderTarget);\n    };\n    function getPassThroughVertexShader() {\n      return \"void main()\t{\\n\\n\tgl_Position = vec4( position, 1.0 );\\n\\n}\\n\";\n    }\n    function getPassThroughFragmentShader() {\n      return \"uniform sampler2D passThruTexture;\\n\\nvoid main() {\\n\\n\tvec2 uv = gl_FragCoord.xy / resolution.xy;\\n\\n\tgl_FragColor = texture2D( passThruTexture, uv );\\n\\n}\\n\";\n    }\n  }\n}\nexport {\n  GPUComputationRenderer\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}