{"ast":null,"code":"import { Matrix4, Object3D, Vector3, EventDispatcher, BufferGeometry, Float32BufferAttribute, MathUtils, Matrix3, Color, Vector2, Box3, Sphere, BufferAttribute } from \"three\";\nconst _m1 = /* @__PURE__ */new Matrix4();\nconst _obj = /* @__PURE__ */new Object3D();\nconst _offset = /* @__PURE__ */new Vector3();\nclass Geometry extends EventDispatcher {\n  static createBufferGeometryFromObject(object) {\n    let buffergeometry = new BufferGeometry();\n    const geometry = object.geometry;\n    if (object.isPoints || object.isLine) {\n      const positions = new Float32BufferAttribute(geometry.vertices.length * 3, 3);\n      const colors = new Float32BufferAttribute(geometry.colors.length * 3, 3);\n      buffergeometry.setAttribute(\"position\", positions.copyVector3sArray(geometry.vertices));\n      buffergeometry.setAttribute(\"color\", colors.copyColorsArray(geometry.colors));\n      if (geometry.lineDistances && geometry.lineDistances.length === geometry.vertices.length) {\n        const lineDistances = new Float32BufferAttribute(geometry.lineDistances.length, 1);\n        buffergeometry.setAttribute(\"lineDistance\", lineDistances.copyArray(geometry.lineDistances));\n      }\n      if (geometry.boundingSphere !== null) {\n        buffergeometry.boundingSphere = geometry.boundingSphere.clone();\n      }\n      if (geometry.boundingBox !== null) {\n        buffergeometry.boundingBox = geometry.boundingBox.clone();\n      }\n    } else if (object.isMesh) {\n      buffergeometry = geometry.toBufferGeometry();\n    }\n    return buffergeometry;\n  }\n  constructor() {\n    super();\n    this.isGeometry = true;\n    this.uuid = MathUtils.generateUUID();\n    this.name = \"\";\n    this.type = \"Geometry\";\n    this.vertices = [];\n    this.colors = [];\n    this.faces = [];\n    this.faceVertexUvs = [[]];\n    this.morphTargets = [];\n    this.morphNormals = [];\n    this.skinWeights = [];\n    this.skinIndices = [];\n    this.lineDistances = [];\n    this.boundingBox = null;\n    this.boundingSphere = null;\n    this.elementsNeedUpdate = false;\n    this.verticesNeedUpdate = false;\n    this.uvsNeedUpdate = false;\n    this.normalsNeedUpdate = false;\n    this.colorsNeedUpdate = false;\n    this.lineDistancesNeedUpdate = false;\n    this.groupsNeedUpdate = false;\n  }\n  applyMatrix4(matrix) {\n    const normalMatrix = new Matrix3().getNormalMatrix(matrix);\n    for (let i = 0, il = this.vertices.length; i < il; i++) {\n      const vertex = this.vertices[i];\n      vertex.applyMatrix4(matrix);\n    }\n    for (let i = 0, il = this.faces.length; i < il; i++) {\n      const face = this.faces[i];\n      face.normal.applyMatrix3(normalMatrix).normalize();\n      for (let j = 0, jl = face.vertexNormals.length; j < jl; j++) {\n        face.vertexNormals[j].applyMatrix3(normalMatrix).normalize();\n      }\n    }\n    if (this.boundingBox !== null) {\n      this.computeBoundingBox();\n    }\n    if (this.boundingSphere !== null) {\n      this.computeBoundingSphere();\n    }\n    this.verticesNeedUpdate = true;\n    this.normalsNeedUpdate = true;\n    return this;\n  }\n  rotateX(angle) {\n    _m1.makeRotationX(angle);\n    this.applyMatrix4(_m1);\n    return this;\n  }\n  rotateY(angle) {\n    _m1.makeRotationY(angle);\n    this.applyMatrix4(_m1);\n    return this;\n  }\n  rotateZ(angle) {\n    _m1.makeRotationZ(angle);\n    this.applyMatrix4(_m1);\n    return this;\n  }\n  translate(x, y, z) {\n    _m1.makeTranslation(x, y, z);\n    this.applyMatrix4(_m1);\n    return this;\n  }\n  scale(x, y, z) {\n    _m1.makeScale(x, y, z);\n    this.applyMatrix4(_m1);\n    return this;\n  }\n  lookAt(vector) {\n    _obj.lookAt(vector);\n    _obj.updateMatrix();\n    this.applyMatrix4(_obj.matrix);\n    return this;\n  }\n  fromBufferGeometry(geometry) {\n    const scope = this;\n    const index = geometry.index !== null ? geometry.index : void 0;\n    const attributes = geometry.attributes;\n    if (attributes.position === void 0) {\n      console.error(\"THREE.Geometry.fromBufferGeometry(): Position attribute required for conversion.\");\n      return this;\n    }\n    const position = attributes.position;\n    const normal = attributes.normal;\n    const color = attributes.color;\n    const uv = attributes.uv;\n    const uv2 = attributes.uv2;\n    if (uv2 !== void 0) this.faceVertexUvs[1] = [];\n    for (let i = 0; i < position.count; i++) {\n      scope.vertices.push(new Vector3().fromBufferAttribute(position, i));\n      if (color !== void 0) {\n        scope.colors.push(new Color().fromBufferAttribute(color, i));\n      }\n    }\n    function addFace(a, b, c, materialIndex) {\n      const vertexColors = color === void 0 ? [] : [scope.colors[a].clone(), scope.colors[b].clone(), scope.colors[c].clone()];\n      const vertexNormals = normal === void 0 ? [] : [new Vector3().fromBufferAttribute(normal, a), new Vector3().fromBufferAttribute(normal, b), new Vector3().fromBufferAttribute(normal, c)];\n      const face = new Face3(a, b, c, vertexNormals, vertexColors, materialIndex);\n      scope.faces.push(face);\n      if (uv !== void 0) {\n        scope.faceVertexUvs[0].push([new Vector2().fromBufferAttribute(uv, a), new Vector2().fromBufferAttribute(uv, b), new Vector2().fromBufferAttribute(uv, c)]);\n      }\n      if (uv2 !== void 0) {\n        scope.faceVertexUvs[1].push([new Vector2().fromBufferAttribute(uv2, a), new Vector2().fromBufferAttribute(uv2, b), new Vector2().fromBufferAttribute(uv2, c)]);\n      }\n    }\n    const groups = geometry.groups;\n    if (groups.length > 0) {\n      for (let i = 0; i < groups.length; i++) {\n        const group = groups[i];\n        const start = group.start;\n        const count = group.count;\n        for (let j = start, jl = start + count; j < jl; j += 3) {\n          if (index !== void 0) {\n            addFace(index.getX(j), index.getX(j + 1), index.getX(j + 2), group.materialIndex);\n          } else {\n            addFace(j, j + 1, j + 2, group.materialIndex);\n          }\n        }\n      }\n    } else {\n      if (index !== void 0) {\n        for (let i = 0; i < index.count; i += 3) {\n          addFace(index.getX(i), index.getX(i + 1), index.getX(i + 2));\n        }\n      } else {\n        for (let i = 0; i < position.count; i += 3) {\n          addFace(i, i + 1, i + 2);\n        }\n      }\n    }\n    this.computeFaceNormals();\n    if (geometry.boundingBox !== null) {\n      this.boundingBox = geometry.boundingBox.clone();\n    }\n    if (geometry.boundingSphere !== null) {\n      this.boundingSphere = geometry.boundingSphere.clone();\n    }\n    return this;\n  }\n  center() {\n    this.computeBoundingBox();\n    this.boundingBox.getCenter(_offset).negate();\n    this.translate(_offset.x, _offset.y, _offset.z);\n    return this;\n  }\n  normalize() {\n    this.computeBoundingSphere();\n    const center = this.boundingSphere.center;\n    const radius = this.boundingSphere.radius;\n    const s = radius === 0 ? 1 : 1 / radius;\n    const matrix = new Matrix4();\n    matrix.set(s, 0, 0, -s * center.x, 0, s, 0, -s * center.y, 0, 0, s, -s * center.z, 0, 0, 0, 1);\n    this.applyMatrix4(matrix);\n    return this;\n  }\n  computeFaceNormals() {\n    const cb = new Vector3(),\n      ab = new Vector3();\n    for (let f = 0, fl = this.faces.length; f < fl; f++) {\n      const face = this.faces[f];\n      const vA = this.vertices[face.a];\n      const vB = this.vertices[face.b];\n      const vC = this.vertices[face.c];\n      cb.subVectors(vC, vB);\n      ab.subVectors(vA, vB);\n      cb.cross(ab);\n      cb.normalize();\n      face.normal.copy(cb);\n    }\n  }\n  computeVertexNormals() {\n    let areaWeighted = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n    const vertices = new Array(this.vertices.length);\n    for (let v = 0, vl = this.vertices.length; v < vl; v++) {\n      vertices[v] = new Vector3();\n    }\n    if (areaWeighted) {\n      const cb = new Vector3(),\n        ab = new Vector3();\n      for (let f = 0, fl = this.faces.length; f < fl; f++) {\n        const face = this.faces[f];\n        const vA = this.vertices[face.a];\n        const vB = this.vertices[face.b];\n        const vC = this.vertices[face.c];\n        cb.subVectors(vC, vB);\n        ab.subVectors(vA, vB);\n        cb.cross(ab);\n        vertices[face.a].add(cb);\n        vertices[face.b].add(cb);\n        vertices[face.c].add(cb);\n      }\n    } else {\n      this.computeFaceNormals();\n      for (let f = 0, fl = this.faces.length; f < fl; f++) {\n        const face = this.faces[f];\n        vertices[face.a].add(face.normal);\n        vertices[face.b].add(face.normal);\n        vertices[face.c].add(face.normal);\n      }\n    }\n    for (let v = 0, vl = this.vertices.length; v < vl; v++) {\n      vertices[v].normalize();\n    }\n    for (let f = 0, fl = this.faces.length; f < fl; f++) {\n      const face = this.faces[f];\n      const vertexNormals = face.vertexNormals;\n      if (vertexNormals.length === 3) {\n        vertexNormals[0].copy(vertices[face.a]);\n        vertexNormals[1].copy(vertices[face.b]);\n        vertexNormals[2].copy(vertices[face.c]);\n      } else {\n        vertexNormals[0] = vertices[face.a].clone();\n        vertexNormals[1] = vertices[face.b].clone();\n        vertexNormals[2] = vertices[face.c].clone();\n      }\n    }\n    if (this.faces.length > 0) {\n      this.normalsNeedUpdate = true;\n    }\n  }\n  computeFlatVertexNormals() {\n    this.computeFaceNormals();\n    for (let f = 0, fl = this.faces.length; f < fl; f++) {\n      const face = this.faces[f];\n      const vertexNormals = face.vertexNormals;\n      if (vertexNormals.length === 3) {\n        vertexNormals[0].copy(face.normal);\n        vertexNormals[1].copy(face.normal);\n        vertexNormals[2].copy(face.normal);\n      } else {\n        vertexNormals[0] = face.normal.clone();\n        vertexNormals[1] = face.normal.clone();\n        vertexNormals[2] = face.normal.clone();\n      }\n    }\n    if (this.faces.length > 0) {\n      this.normalsNeedUpdate = true;\n    }\n  }\n  computeMorphNormals() {\n    for (let f = 0, fl = this.faces.length; f < fl; f++) {\n      const face = this.faces[f];\n      if (!face.__originalFaceNormal) {\n        face.__originalFaceNormal = face.normal.clone();\n      } else {\n        face.__originalFaceNormal.copy(face.normal);\n      }\n      if (!face.__originalVertexNormals) face.__originalVertexNormals = [];\n      for (let i = 0, il = face.vertexNormals.length; i < il; i++) {\n        if (!face.__originalVertexNormals[i]) {\n          face.__originalVertexNormals[i] = face.vertexNormals[i].clone();\n        } else {\n          face.__originalVertexNormals[i].copy(face.vertexNormals[i]);\n        }\n      }\n    }\n    const tmpGeo = new Geometry();\n    tmpGeo.faces = this.faces;\n    for (let i = 0, il = this.morphTargets.length; i < il; i++) {\n      if (!this.morphNormals[i]) {\n        this.morphNormals[i] = {};\n        this.morphNormals[i].faceNormals = [];\n        this.morphNormals[i].vertexNormals = [];\n        const dstNormalsFace = this.morphNormals[i].faceNormals;\n        const dstNormalsVertex = this.morphNormals[i].vertexNormals;\n        for (let f = 0, fl = this.faces.length; f < fl; f++) {\n          const faceNormal = new Vector3();\n          const vertexNormals = {\n            a: new Vector3(),\n            b: new Vector3(),\n            c: new Vector3()\n          };\n          dstNormalsFace.push(faceNormal);\n          dstNormalsVertex.push(vertexNormals);\n        }\n      }\n      const morphNormals = this.morphNormals[i];\n      tmpGeo.vertices = this.morphTargets[i].vertices;\n      tmpGeo.computeFaceNormals();\n      tmpGeo.computeVertexNormals();\n      for (let f = 0, fl = this.faces.length; f < fl; f++) {\n        const face = this.faces[f];\n        const faceNormal = morphNormals.faceNormals[f];\n        const vertexNormals = morphNormals.vertexNormals[f];\n        faceNormal.copy(face.normal);\n        vertexNormals.a.copy(face.vertexNormals[0]);\n        vertexNormals.b.copy(face.vertexNormals[1]);\n        vertexNormals.c.copy(face.vertexNormals[2]);\n      }\n    }\n    for (let f = 0, fl = this.faces.length; f < fl; f++) {\n      const face = this.faces[f];\n      face.normal = face.__originalFaceNormal;\n      face.vertexNormals = face.__originalVertexNormals;\n    }\n  }\n  computeBoundingBox() {\n    if (this.boundingBox === null) {\n      this.boundingBox = new Box3();\n    }\n    this.boundingBox.setFromPoints(this.vertices);\n  }\n  computeBoundingSphere() {\n    if (this.boundingSphere === null) {\n      this.boundingSphere = new Sphere();\n    }\n    this.boundingSphere.setFromPoints(this.vertices);\n  }\n  merge(geometry, matrix) {\n    let materialIndexOffset = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n    if (!(geometry && geometry.isGeometry)) {\n      console.error(\"THREE.Geometry.merge(): geometry not an instance of THREE.Geometry.\", geometry);\n      return;\n    }\n    let normalMatrix;\n    const vertexOffset = this.vertices.length,\n      vertices1 = this.vertices,\n      vertices2 = geometry.vertices,\n      faces1 = this.faces,\n      faces2 = geometry.faces,\n      colors1 = this.colors,\n      colors2 = geometry.colors;\n    if (matrix !== void 0) {\n      normalMatrix = new Matrix3().getNormalMatrix(matrix);\n    }\n    for (let i = 0, il = vertices2.length; i < il; i++) {\n      const vertex = vertices2[i];\n      const vertexCopy = vertex.clone();\n      if (matrix !== void 0) vertexCopy.applyMatrix4(matrix);\n      vertices1.push(vertexCopy);\n    }\n    for (let i = 0, il = colors2.length; i < il; i++) {\n      colors1.push(colors2[i].clone());\n    }\n    for (let i = 0, il = faces2.length; i < il; i++) {\n      const face = faces2[i];\n      let normal, color;\n      const faceVertexNormals = face.vertexNormals,\n        faceVertexColors = face.vertexColors;\n      const faceCopy = new Face3(face.a + vertexOffset, face.b + vertexOffset, face.c + vertexOffset);\n      faceCopy.normal.copy(face.normal);\n      if (normalMatrix !== void 0) {\n        faceCopy.normal.applyMatrix3(normalMatrix).normalize();\n      }\n      for (let j = 0, jl = faceVertexNormals.length; j < jl; j++) {\n        normal = faceVertexNormals[j].clone();\n        if (normalMatrix !== void 0) {\n          normal.applyMatrix3(normalMatrix).normalize();\n        }\n        faceCopy.vertexNormals.push(normal);\n      }\n      faceCopy.color.copy(face.color);\n      for (let j = 0, jl = faceVertexColors.length; j < jl; j++) {\n        color = faceVertexColors[j];\n        faceCopy.vertexColors.push(color.clone());\n      }\n      faceCopy.materialIndex = face.materialIndex + materialIndexOffset;\n      faces1.push(faceCopy);\n    }\n    for (let i = 0, il = geometry.faceVertexUvs.length; i < il; i++) {\n      const faceVertexUvs2 = geometry.faceVertexUvs[i];\n      if (this.faceVertexUvs[i] === void 0) this.faceVertexUvs[i] = [];\n      for (let j = 0, jl = faceVertexUvs2.length; j < jl; j++) {\n        const uvs2 = faceVertexUvs2[j],\n          uvsCopy = [];\n        for (let k = 0, kl = uvs2.length; k < kl; k++) {\n          uvsCopy.push(uvs2[k].clone());\n        }\n        this.faceVertexUvs[i].push(uvsCopy);\n      }\n    }\n  }\n  mergeMesh(mesh) {\n    if (!(mesh && mesh.isMesh)) {\n      console.error(\"THREE.Geometry.mergeMesh(): mesh not an instance of THREE.Mesh.\", mesh);\n      return;\n    }\n    if (mesh.matrixAutoUpdate) mesh.updateMatrix();\n    this.merge(mesh.geometry, mesh.matrix);\n  }\n  /*\n   * Checks for duplicate vertices with hashmap.\n   * Duplicated vertices are removed\n   * and faces' vertices are updated.\n   */\n  mergeVertices() {\n    let precisionPoints = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 4;\n    const verticesMap = {};\n    const unique = [],\n      changes = [];\n    const precision = Math.pow(10, precisionPoints);\n    for (let i = 0, il = this.vertices.length; i < il; i++) {\n      const v = this.vertices[i];\n      const key = `${Math.round(v.x * precision)}_${Math.round(v.y * precision)}_${Math.round(v.z * precision)}`;\n      if (verticesMap[key] === void 0) {\n        verticesMap[key] = i;\n        unique.push(this.vertices[i]);\n        changes[i] = unique.length - 1;\n      } else {\n        changes[i] = changes[verticesMap[key]];\n      }\n    }\n    const faceIndicesToRemove = [];\n    for (let i = 0, il = this.faces.length; i < il; i++) {\n      const face = this.faces[i];\n      face.a = changes[face.a];\n      face.b = changes[face.b];\n      face.c = changes[face.c];\n      const indices = [face.a, face.b, face.c];\n      for (let n = 0; n < 3; n++) {\n        if (indices[n] === indices[(n + 1) % 3]) {\n          faceIndicesToRemove.push(i);\n          break;\n        }\n      }\n    }\n    for (let i = faceIndicesToRemove.length - 1; i >= 0; i--) {\n      const idx = faceIndicesToRemove[i];\n      this.faces.splice(idx, 1);\n      for (let j = 0, jl = this.faceVertexUvs.length; j < jl; j++) {\n        this.faceVertexUvs[j].splice(idx, 1);\n      }\n    }\n    const diff = this.vertices.length - unique.length;\n    this.vertices = unique;\n    return diff;\n  }\n  setFromPoints(points) {\n    this.vertices = [];\n    for (let i = 0, l = points.length; i < l; i++) {\n      const point = points[i];\n      this.vertices.push(new Vector3(point.x, point.y, point.z || 0));\n    }\n    return this;\n  }\n  sortFacesByMaterialIndex() {\n    const faces = this.faces;\n    const length = faces.length;\n    for (let i = 0; i < length; i++) {\n      faces[i]._id = i;\n    }\n    function materialIndexSort(a, b) {\n      return a.materialIndex - b.materialIndex;\n    }\n    faces.sort(materialIndexSort);\n    const uvs1 = this.faceVertexUvs[0];\n    const uvs2 = this.faceVertexUvs[1];\n    let newUvs1, newUvs2;\n    if (uvs1 && uvs1.length === length) newUvs1 = [];\n    if (uvs2 && uvs2.length === length) newUvs2 = [];\n    for (let i = 0; i < length; i++) {\n      const id = faces[i]._id;\n      if (newUvs1) newUvs1.push(uvs1[id]);\n      if (newUvs2) newUvs2.push(uvs2[id]);\n    }\n    if (newUvs1) this.faceVertexUvs[0] = newUvs1;\n    if (newUvs2) this.faceVertexUvs[1] = newUvs2;\n  }\n  toJSON() {\n    const data = {\n      metadata: {\n        version: 4.5,\n        type: \"Geometry\",\n        generator: \"Geometry.toJSON\"\n      }\n    };\n    data.uuid = this.uuid;\n    data.type = this.type;\n    if (this.name !== \"\") data.name = this.name;\n    if (this.parameters !== void 0) {\n      const parameters = this.parameters;\n      for (let key in parameters) {\n        if (parameters[key] !== void 0) data[key] = parameters[key];\n      }\n      return data;\n    }\n    const vertices = [];\n    for (let i = 0; i < this.vertices.length; i++) {\n      const vertex = this.vertices[i];\n      vertices.push(vertex.x, vertex.y, vertex.z);\n    }\n    const faces = [];\n    const normals = [];\n    const normalsHash = {};\n    const colors = [];\n    const colorsHash = {};\n    const uvs = [];\n    const uvsHash = {};\n    for (let i = 0; i < this.faces.length; i++) {\n      const face = this.faces[i];\n      const hasMaterial = true;\n      const hasFaceUv = false;\n      const hasFaceVertexUv = this.faceVertexUvs[0][i] !== void 0;\n      const hasFaceNormal = face.normal.length() > 0;\n      const hasFaceVertexNormal = face.vertexNormals.length > 0;\n      const hasFaceColor = face.color.r !== 1 || face.color.g !== 1 || face.color.b !== 1;\n      const hasFaceVertexColor = face.vertexColors.length > 0;\n      let faceType = 0;\n      faceType = setBit(faceType, 0, 0);\n      faceType = setBit(faceType, 1, hasMaterial);\n      faceType = setBit(faceType, 2, hasFaceUv);\n      faceType = setBit(faceType, 3, hasFaceVertexUv);\n      faceType = setBit(faceType, 4, hasFaceNormal);\n      faceType = setBit(faceType, 5, hasFaceVertexNormal);\n      faceType = setBit(faceType, 6, hasFaceColor);\n      faceType = setBit(faceType, 7, hasFaceVertexColor);\n      faces.push(faceType);\n      faces.push(face.a, face.b, face.c);\n      faces.push(face.materialIndex);\n      if (hasFaceVertexUv) {\n        const faceVertexUvs = this.faceVertexUvs[0][i];\n        faces.push(getUvIndex(faceVertexUvs[0]), getUvIndex(faceVertexUvs[1]), getUvIndex(faceVertexUvs[2]));\n      }\n      if (hasFaceNormal) {\n        faces.push(getNormalIndex(face.normal));\n      }\n      if (hasFaceVertexNormal) {\n        const vertexNormals = face.vertexNormals;\n        faces.push(getNormalIndex(vertexNormals[0]), getNormalIndex(vertexNormals[1]), getNormalIndex(vertexNormals[2]));\n      }\n      if (hasFaceColor) {\n        faces.push(getColorIndex(face.color));\n      }\n      if (hasFaceVertexColor) {\n        const vertexColors = face.vertexColors;\n        faces.push(getColorIndex(vertexColors[0]), getColorIndex(vertexColors[1]), getColorIndex(vertexColors[2]));\n      }\n    }\n    function setBit(value, position, enabled) {\n      return enabled ? value | 1 << position : value & ~(1 << position);\n    }\n    function getNormalIndex(normal) {\n      const hash = normal.x.toString() + normal.y.toString() + normal.z.toString();\n      if (normalsHash[hash] !== void 0) {\n        return normalsHash[hash];\n      }\n      normalsHash[hash] = normals.length / 3;\n      normals.push(normal.x, normal.y, normal.z);\n      return normalsHash[hash];\n    }\n    function getColorIndex(color) {\n      const hash = color.r.toString() + color.g.toString() + color.b.toString();\n      if (colorsHash[hash] !== void 0) {\n        return colorsHash[hash];\n      }\n      colorsHash[hash] = colors.length;\n      colors.push(color.getHex());\n      return colorsHash[hash];\n    }\n    function getUvIndex(uv) {\n      const hash = uv.x.toString() + uv.y.toString();\n      if (uvsHash[hash] !== void 0) {\n        return uvsHash[hash];\n      }\n      uvsHash[hash] = uvs.length / 2;\n      uvs.push(uv.x, uv.y);\n      return uvsHash[hash];\n    }\n    data.data = {};\n    data.data.vertices = vertices;\n    data.data.normals = normals;\n    if (colors.length > 0) data.data.colors = colors;\n    if (uvs.length > 0) data.data.uvs = [uvs];\n    data.data.faces = faces;\n    return data;\n  }\n  clone() {\n    return new Geometry().copy(this);\n  }\n  copy(source) {\n    this.vertices = [];\n    this.colors = [];\n    this.faces = [];\n    this.faceVertexUvs = [[]];\n    this.morphTargets = [];\n    this.morphNormals = [];\n    this.skinWeights = [];\n    this.skinIndices = [];\n    this.lineDistances = [];\n    this.boundingBox = null;\n    this.boundingSphere = null;\n    this.name = source.name;\n    const vertices = source.vertices;\n    for (let i = 0, il = vertices.length; i < il; i++) {\n      this.vertices.push(vertices[i].clone());\n    }\n    const colors = source.colors;\n    for (let i = 0, il = colors.length; i < il; i++) {\n      this.colors.push(colors[i].clone());\n    }\n    const faces = source.faces;\n    for (let i = 0, il = faces.length; i < il; i++) {\n      this.faces.push(faces[i].clone());\n    }\n    for (let i = 0, il = source.faceVertexUvs.length; i < il; i++) {\n      const faceVertexUvs = source.faceVertexUvs[i];\n      if (this.faceVertexUvs[i] === void 0) {\n        this.faceVertexUvs[i] = [];\n      }\n      for (let j = 0, jl = faceVertexUvs.length; j < jl; j++) {\n        const uvs = faceVertexUvs[j],\n          uvsCopy = [];\n        for (let k = 0, kl = uvs.length; k < kl; k++) {\n          const uv = uvs[k];\n          uvsCopy.push(uv.clone());\n        }\n        this.faceVertexUvs[i].push(uvsCopy);\n      }\n    }\n    const morphTargets = source.morphTargets;\n    for (let i = 0, il = morphTargets.length; i < il; i++) {\n      const morphTarget = {};\n      morphTarget.name = morphTargets[i].name;\n      if (morphTargets[i].vertices !== void 0) {\n        morphTarget.vertices = [];\n        for (let j = 0, jl = morphTargets[i].vertices.length; j < jl; j++) {\n          morphTarget.vertices.push(morphTargets[i].vertices[j].clone());\n        }\n      }\n      if (morphTargets[i].normals !== void 0) {\n        morphTarget.normals = [];\n        for (let j = 0, jl = morphTargets[i].normals.length; j < jl; j++) {\n          morphTarget.normals.push(morphTargets[i].normals[j].clone());\n        }\n      }\n      this.morphTargets.push(morphTarget);\n    }\n    const morphNormals = source.morphNormals;\n    for (let i = 0, il = morphNormals.length; i < il; i++) {\n      const morphNormal = {};\n      if (morphNormals[i].vertexNormals !== void 0) {\n        morphNormal.vertexNormals = [];\n        for (let j = 0, jl = morphNormals[i].vertexNormals.length; j < jl; j++) {\n          const srcVertexNormal = morphNormals[i].vertexNormals[j];\n          const destVertexNormal = {};\n          destVertexNormal.a = srcVertexNormal.a.clone();\n          destVertexNormal.b = srcVertexNormal.b.clone();\n          destVertexNormal.c = srcVertexNormal.c.clone();\n          morphNormal.vertexNormals.push(destVertexNormal);\n        }\n      }\n      if (morphNormals[i].faceNormals !== void 0) {\n        morphNormal.faceNormals = [];\n        for (let j = 0, jl = morphNormals[i].faceNormals.length; j < jl; j++) {\n          morphNormal.faceNormals.push(morphNormals[i].faceNormals[j].clone());\n        }\n      }\n      this.morphNormals.push(morphNormal);\n    }\n    const skinWeights = source.skinWeights;\n    for (let i = 0, il = skinWeights.length; i < il; i++) {\n      this.skinWeights.push(skinWeights[i].clone());\n    }\n    const skinIndices = source.skinIndices;\n    for (let i = 0, il = skinIndices.length; i < il; i++) {\n      this.skinIndices.push(skinIndices[i].clone());\n    }\n    const lineDistances = source.lineDistances;\n    for (let i = 0, il = lineDistances.length; i < il; i++) {\n      this.lineDistances.push(lineDistances[i]);\n    }\n    const boundingBox = source.boundingBox;\n    if (boundingBox !== null) {\n      this.boundingBox = boundingBox.clone();\n    }\n    const boundingSphere = source.boundingSphere;\n    if (boundingSphere !== null) {\n      this.boundingSphere = boundingSphere.clone();\n    }\n    this.elementsNeedUpdate = source.elementsNeedUpdate;\n    this.verticesNeedUpdate = source.verticesNeedUpdate;\n    this.uvsNeedUpdate = source.uvsNeedUpdate;\n    this.normalsNeedUpdate = source.normalsNeedUpdate;\n    this.colorsNeedUpdate = source.colorsNeedUpdate;\n    this.lineDistancesNeedUpdate = source.lineDistancesNeedUpdate;\n    this.groupsNeedUpdate = source.groupsNeedUpdate;\n    return this;\n  }\n  toBufferGeometry() {\n    const geometry = new DirectGeometry().fromGeometry(this);\n    const buffergeometry = new BufferGeometry();\n    const positions = new Float32Array(geometry.vertices.length * 3);\n    buffergeometry.setAttribute(\"position\", new BufferAttribute(positions, 3).copyVector3sArray(geometry.vertices));\n    if (geometry.normals.length > 0) {\n      const normals = new Float32Array(geometry.normals.length * 3);\n      buffergeometry.setAttribute(\"normal\", new BufferAttribute(normals, 3).copyVector3sArray(geometry.normals));\n    }\n    if (geometry.colors.length > 0) {\n      const colors = new Float32Array(geometry.colors.length * 3);\n      buffergeometry.setAttribute(\"color\", new BufferAttribute(colors, 3).copyColorsArray(geometry.colors));\n    }\n    if (geometry.uvs.length > 0) {\n      const uvs = new Float32Array(geometry.uvs.length * 2);\n      buffergeometry.setAttribute(\"uv\", new BufferAttribute(uvs, 2).copyVector2sArray(geometry.uvs));\n    }\n    if (geometry.uvs2.length > 0) {\n      const uvs2 = new Float32Array(geometry.uvs2.length * 2);\n      buffergeometry.setAttribute(\"uv2\", new BufferAttribute(uvs2, 2).copyVector2sArray(geometry.uvs2));\n    }\n    buffergeometry.groups = geometry.groups;\n    for (let name in geometry.morphTargets) {\n      const array = [];\n      const morphTargets = geometry.morphTargets[name];\n      for (let i = 0, l = morphTargets.length; i < l; i++) {\n        const morphTarget = morphTargets[i];\n        const attribute = new Float32BufferAttribute(morphTarget.data.length * 3, 3);\n        attribute.name = morphTarget.name;\n        array.push(attribute.copyVector3sArray(morphTarget.data));\n      }\n      buffergeometry.morphAttributes[name] = array;\n    }\n    if (geometry.skinIndices.length > 0) {\n      const skinIndices = new Float32BufferAttribute(geometry.skinIndices.length * 4, 4);\n      buffergeometry.setAttribute(\"skinIndex\", skinIndices.copyVector4sArray(geometry.skinIndices));\n    }\n    if (geometry.skinWeights.length > 0) {\n      const skinWeights = new Float32BufferAttribute(geometry.skinWeights.length * 4, 4);\n      buffergeometry.setAttribute(\"skinWeight\", skinWeights.copyVector4sArray(geometry.skinWeights));\n    }\n    if (geometry.boundingSphere !== null) {\n      buffergeometry.boundingSphere = geometry.boundingSphere.clone();\n    }\n    if (geometry.boundingBox !== null) {\n      buffergeometry.boundingBox = geometry.boundingBox.clone();\n    }\n    return buffergeometry;\n  }\n  computeTangents() {\n    console.error(\"THREE.Geometry: .computeTangents() has been removed.\");\n  }\n  computeLineDistances() {\n    console.error(\"THREE.Geometry: .computeLineDistances() has been removed. Use THREE.Line.computeLineDistances() instead.\");\n  }\n  applyMatrix(matrix) {\n    console.warn(\"THREE.Geometry: .applyMatrix() has been renamed to .applyMatrix4().\");\n    return this.applyMatrix4(matrix);\n  }\n  dispose() {\n    this.dispatchEvent({\n      type: \"dispose\"\n    });\n  }\n}\nclass DirectGeometry {\n  constructor() {\n    this.vertices = [];\n    this.normals = [];\n    this.colors = [];\n    this.uvs = [];\n    this.uvs2 = [];\n    this.groups = [];\n    this.morphTargets = {};\n    this.skinWeights = [];\n    this.skinIndices = [];\n    this.boundingBox = null;\n    this.boundingSphere = null;\n    this.verticesNeedUpdate = false;\n    this.normalsNeedUpdate = false;\n    this.colorsNeedUpdate = false;\n    this.uvsNeedUpdate = false;\n    this.groupsNeedUpdate = false;\n  }\n  computeGroups(geometry) {\n    const groups = [];\n    let group, i;\n    let materialIndex = void 0;\n    const faces = geometry.faces;\n    for (i = 0; i < faces.length; i++) {\n      const face = faces[i];\n      if (face.materialIndex !== materialIndex) {\n        materialIndex = face.materialIndex;\n        if (group !== void 0) {\n          group.count = i * 3 - group.start;\n          groups.push(group);\n        }\n        group = {\n          start: i * 3,\n          materialIndex\n        };\n      }\n    }\n    if (group !== void 0) {\n      group.count = i * 3 - group.start;\n      groups.push(group);\n    }\n    this.groups = groups;\n  }\n  fromGeometry(geometry) {\n    const faces = geometry.faces;\n    const vertices = geometry.vertices;\n    const faceVertexUvs = geometry.faceVertexUvs;\n    const hasFaceVertexUv = faceVertexUvs[0] && faceVertexUvs[0].length > 0;\n    const hasFaceVertexUv2 = faceVertexUvs[1] && faceVertexUvs[1].length > 0;\n    const morphTargets = geometry.morphTargets;\n    const morphTargetsLength = morphTargets.length;\n    let morphTargetsPosition;\n    if (morphTargetsLength > 0) {\n      morphTargetsPosition = [];\n      for (let i = 0; i < morphTargetsLength; i++) {\n        morphTargetsPosition[i] = {\n          name: morphTargets[i].name,\n          data: []\n        };\n      }\n      this.morphTargets.position = morphTargetsPosition;\n    }\n    const morphNormals = geometry.morphNormals;\n    const morphNormalsLength = morphNormals.length;\n    let morphTargetsNormal;\n    if (morphNormalsLength > 0) {\n      morphTargetsNormal = [];\n      for (let i = 0; i < morphNormalsLength; i++) {\n        morphTargetsNormal[i] = {\n          name: morphNormals[i].name,\n          data: []\n        };\n      }\n      this.morphTargets.normal = morphTargetsNormal;\n    }\n    const skinIndices = geometry.skinIndices;\n    const skinWeights = geometry.skinWeights;\n    const hasSkinIndices = skinIndices.length === vertices.length;\n    const hasSkinWeights = skinWeights.length === vertices.length;\n    if (vertices.length > 0 && faces.length === 0) {\n      console.error(\"THREE.DirectGeometry: Faceless geometries are not supported.\");\n    }\n    for (let i = 0; i < faces.length; i++) {\n      const face = faces[i];\n      this.vertices.push(vertices[face.a], vertices[face.b], vertices[face.c]);\n      const vertexNormals = face.vertexNormals;\n      if (vertexNormals.length === 3) {\n        this.normals.push(vertexNormals[0], vertexNormals[1], vertexNormals[2]);\n      } else {\n        const normal = face.normal;\n        this.normals.push(normal, normal, normal);\n      }\n      const vertexColors = face.vertexColors;\n      if (vertexColors.length === 3) {\n        this.colors.push(vertexColors[0], vertexColors[1], vertexColors[2]);\n      } else {\n        const color = face.color;\n        this.colors.push(color, color, color);\n      }\n      if (hasFaceVertexUv === true) {\n        const vertexUvs = faceVertexUvs[0][i];\n        if (vertexUvs !== void 0) {\n          this.uvs.push(vertexUvs[0], vertexUvs[1], vertexUvs[2]);\n        } else {\n          console.warn(\"THREE.DirectGeometry.fromGeometry(): Undefined vertexUv \", i);\n          this.uvs.push(new Vector2(), new Vector2(), new Vector2());\n        }\n      }\n      if (hasFaceVertexUv2 === true) {\n        const vertexUvs = faceVertexUvs[1][i];\n        if (vertexUvs !== void 0) {\n          this.uvs2.push(vertexUvs[0], vertexUvs[1], vertexUvs[2]);\n        } else {\n          console.warn(\"THREE.DirectGeometry.fromGeometry(): Undefined vertexUv2 \", i);\n          this.uvs2.push(new Vector2(), new Vector2(), new Vector2());\n        }\n      }\n      for (let j = 0; j < morphTargetsLength; j++) {\n        const morphTarget = morphTargets[j].vertices;\n        morphTargetsPosition[j].data.push(morphTarget[face.a], morphTarget[face.b], morphTarget[face.c]);\n      }\n      for (let j = 0; j < morphNormalsLength; j++) {\n        const morphNormal = morphNormals[j].vertexNormals[i];\n        morphTargetsNormal[j].data.push(morphNormal.a, morphNormal.b, morphNormal.c);\n      }\n      if (hasSkinIndices) {\n        this.skinIndices.push(skinIndices[face.a], skinIndices[face.b], skinIndices[face.c]);\n      }\n      if (hasSkinWeights) {\n        this.skinWeights.push(skinWeights[face.a], skinWeights[face.b], skinWeights[face.c]);\n      }\n    }\n    this.computeGroups(geometry);\n    this.verticesNeedUpdate = geometry.verticesNeedUpdate;\n    this.normalsNeedUpdate = geometry.normalsNeedUpdate;\n    this.colorsNeedUpdate = geometry.colorsNeedUpdate;\n    this.uvsNeedUpdate = geometry.uvsNeedUpdate;\n    this.groupsNeedUpdate = geometry.groupsNeedUpdate;\n    if (geometry.boundingSphere !== null) {\n      this.boundingSphere = geometry.boundingSphere.clone();\n    }\n    if (geometry.boundingBox !== null) {\n      this.boundingBox = geometry.boundingBox.clone();\n    }\n    return this;\n  }\n}\nclass Face3 {\n  constructor(a, b, c, normal, color) {\n    let materialIndex = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : 0;\n    this.a = a;\n    this.b = b;\n    this.c = c;\n    this.normal = normal && normal.isVector3 ? normal : new Vector3();\n    this.vertexNormals = Array.isArray(normal) ? normal : [];\n    this.color = color && color.isColor ? color : new Color();\n    this.vertexColors = Array.isArray(color) ? color : [];\n    this.materialIndex = materialIndex;\n  }\n  clone() {\n    return new this.constructor().copy(this);\n  }\n  copy(source) {\n    this.a = source.a;\n    this.b = source.b;\n    this.c = source.c;\n    this.normal.copy(source.normal);\n    this.color.copy(source.color);\n    this.materialIndex = source.materialIndex;\n    for (let i = 0, il = source.vertexNormals.length; i < il; i++) {\n      this.vertexNormals[i] = source.vertexNormals[i].clone();\n    }\n    for (let i = 0, il = source.vertexColors.length; i < il; i++) {\n      this.vertexColors[i] = source.vertexColors[i].clone();\n    }\n    return this;\n  }\n}\nexport { Face3, Geometry };","map":{"version":3,"names":["Matrix4","Object3D","Vector3","EventDispatcher","BufferGeometry","Float32BufferAttribute","MathUtils","Matrix3","Color","Vector2","Box3","Sphere","BufferAttribute","_m1","_obj","_offset","Geometry","createBufferGeometryFromObject","object","buffergeometry","geometry","isPoints","isLine","positions","vertices","length","colors","setAttribute","copyVector3sArray","copyColorsArray","lineDistances","copyArray","boundingSphere","clone","boundingBox","isMesh","toBufferGeometry","constructor","isGeometry","uuid","generateUUID","name","type","faces","faceVertexUvs","morphTargets","morphNormals","skinWeights","skinIndices","elementsNeedUpdate","verticesNeedUpdate","uvsNeedUpdate","normalsNeedUpdate","colorsNeedUpdate","lineDistancesNeedUpdate","groupsNeedUpdate","applyMatrix4","matrix","normalMatrix","getNormalMatrix","i","il","vertex","face","normal","applyMatrix3","normalize","j","jl","vertexNormals","computeBoundingBox","computeBoundingSphere","rotateX","angle","makeRotationX","rotateY","makeRotationY","rotateZ","makeRotationZ","translate","x","y","z","makeTranslation","scale","makeScale","lookAt","vector","updateMatrix","fromBufferGeometry","scope","index","attributes","position","console","error","color","uv","uv2","count","push","fromBufferAttribute","addFace","a","b","c","materialIndex","vertexColors","Face3","groups","group","start","getX","computeFaceNormals","center","getCenter","negate","radius","s","set","cb","ab","f","fl","vA","vB","vC","subVectors","cross","copy","computeVertexNormals","areaWeighted","arguments","undefined","Array","v","vl","add","computeFlatVertexNormals","computeMorphNormals","__originalFaceNormal","__originalVertexNormals","tmpGeo","faceNormals","dstNormalsFace","dstNormalsVertex","faceNormal","setFromPoints","merge","materialIndexOffset","vertexOffset","vertices1","vertices2","faces1","faces2","colors1","colors2","vertexCopy","faceVertexNormals","faceVertexColors","faceCopy","faceVertexUvs2","uvs2","uvsCopy","k","kl","mergeMesh","mesh","matrixAutoUpdate","mergeVertices","precisionPoints","verticesMap","unique","changes","precision","Math","pow","key","round","faceIndicesToRemove","indices","n","idx","splice","diff","points","l","point","sortFacesByMaterialIndex","_id","materialIndexSort","sort","uvs1","newUvs1","newUvs2","id","toJSON","data","metadata","version","generator","parameters","normals","normalsHash","colorsHash","uvs","uvsHash","hasMaterial","hasFaceUv","hasFaceVertexUv","hasFaceNormal","hasFaceVertexNormal","hasFaceColor","r","g","hasFaceVertexColor","faceType","setBit","getUvIndex","getNormalIndex","getColorIndex","value","enabled","hash","toString","getHex","source","morphTarget","morphNormal","srcVertexNormal","destVertexNormal","DirectGeometry","fromGeometry","Float32Array","copyVector2sArray","array","attribute","morphAttributes","copyVector4sArray","computeTangents","computeLineDistances","applyMatrix","warn","dispose","dispatchEvent","computeGroups","hasFaceVertexUv2","morphTargetsLength","morphTargetsPosition","morphNormalsLength","morphTargetsNormal","hasSkinIndices","hasSkinWeights","vertexUvs","isVector3","isArray","isColor"],"sources":["/home/krug/Coding/JavaScript/Websites/Personal/personal/node_modules/.pnpm/three-stdlib@2.23.7_three@0.151.3/node_modules/three-stdlib/deprecated/Geometry.js"],"sourcesContent":["import { Matrix4, Object3D, Vector3, EventDispatcher, BufferGeometry, Float32BufferAttribute, MathUtils, Matrix3, Color, Vector2, Box3, Sphere, BufferAttribute } from \"three\";\nconst _m1 = /* @__PURE__ */ new Matrix4();\nconst _obj = /* @__PURE__ */ new Object3D();\nconst _offset = /* @__PURE__ */ new Vector3();\nclass Geometry extends EventDispatcher {\n  static createBufferGeometryFromObject(object) {\n    let buffergeometry = new BufferGeometry();\n    const geometry = object.geometry;\n    if (object.isPoints || object.isLine) {\n      const positions = new Float32BufferAttribute(geometry.vertices.length * 3, 3);\n      const colors = new Float32BufferAttribute(geometry.colors.length * 3, 3);\n      buffergeometry.setAttribute(\"position\", positions.copyVector3sArray(geometry.vertices));\n      buffergeometry.setAttribute(\"color\", colors.copyColorsArray(geometry.colors));\n      if (geometry.lineDistances && geometry.lineDistances.length === geometry.vertices.length) {\n        const lineDistances = new Float32BufferAttribute(geometry.lineDistances.length, 1);\n        buffergeometry.setAttribute(\"lineDistance\", lineDistances.copyArray(geometry.lineDistances));\n      }\n      if (geometry.boundingSphere !== null) {\n        buffergeometry.boundingSphere = geometry.boundingSphere.clone();\n      }\n      if (geometry.boundingBox !== null) {\n        buffergeometry.boundingBox = geometry.boundingBox.clone();\n      }\n    } else if (object.isMesh) {\n      buffergeometry = geometry.toBufferGeometry();\n    }\n    return buffergeometry;\n  }\n  constructor() {\n    super();\n    this.isGeometry = true;\n    this.uuid = MathUtils.generateUUID();\n    this.name = \"\";\n    this.type = \"Geometry\";\n    this.vertices = [];\n    this.colors = [];\n    this.faces = [];\n    this.faceVertexUvs = [[]];\n    this.morphTargets = [];\n    this.morphNormals = [];\n    this.skinWeights = [];\n    this.skinIndices = [];\n    this.lineDistances = [];\n    this.boundingBox = null;\n    this.boundingSphere = null;\n    this.elementsNeedUpdate = false;\n    this.verticesNeedUpdate = false;\n    this.uvsNeedUpdate = false;\n    this.normalsNeedUpdate = false;\n    this.colorsNeedUpdate = false;\n    this.lineDistancesNeedUpdate = false;\n    this.groupsNeedUpdate = false;\n  }\n  applyMatrix4(matrix) {\n    const normalMatrix = new Matrix3().getNormalMatrix(matrix);\n    for (let i = 0, il = this.vertices.length; i < il; i++) {\n      const vertex = this.vertices[i];\n      vertex.applyMatrix4(matrix);\n    }\n    for (let i = 0, il = this.faces.length; i < il; i++) {\n      const face = this.faces[i];\n      face.normal.applyMatrix3(normalMatrix).normalize();\n      for (let j = 0, jl = face.vertexNormals.length; j < jl; j++) {\n        face.vertexNormals[j].applyMatrix3(normalMatrix).normalize();\n      }\n    }\n    if (this.boundingBox !== null) {\n      this.computeBoundingBox();\n    }\n    if (this.boundingSphere !== null) {\n      this.computeBoundingSphere();\n    }\n    this.verticesNeedUpdate = true;\n    this.normalsNeedUpdate = true;\n    return this;\n  }\n  rotateX(angle) {\n    _m1.makeRotationX(angle);\n    this.applyMatrix4(_m1);\n    return this;\n  }\n  rotateY(angle) {\n    _m1.makeRotationY(angle);\n    this.applyMatrix4(_m1);\n    return this;\n  }\n  rotateZ(angle) {\n    _m1.makeRotationZ(angle);\n    this.applyMatrix4(_m1);\n    return this;\n  }\n  translate(x, y, z) {\n    _m1.makeTranslation(x, y, z);\n    this.applyMatrix4(_m1);\n    return this;\n  }\n  scale(x, y, z) {\n    _m1.makeScale(x, y, z);\n    this.applyMatrix4(_m1);\n    return this;\n  }\n  lookAt(vector) {\n    _obj.lookAt(vector);\n    _obj.updateMatrix();\n    this.applyMatrix4(_obj.matrix);\n    return this;\n  }\n  fromBufferGeometry(geometry) {\n    const scope = this;\n    const index = geometry.index !== null ? geometry.index : void 0;\n    const attributes = geometry.attributes;\n    if (attributes.position === void 0) {\n      console.error(\"THREE.Geometry.fromBufferGeometry(): Position attribute required for conversion.\");\n      return this;\n    }\n    const position = attributes.position;\n    const normal = attributes.normal;\n    const color = attributes.color;\n    const uv = attributes.uv;\n    const uv2 = attributes.uv2;\n    if (uv2 !== void 0)\n      this.faceVertexUvs[1] = [];\n    for (let i = 0; i < position.count; i++) {\n      scope.vertices.push(new Vector3().fromBufferAttribute(position, i));\n      if (color !== void 0) {\n        scope.colors.push(new Color().fromBufferAttribute(color, i));\n      }\n    }\n    function addFace(a, b, c, materialIndex) {\n      const vertexColors = color === void 0 ? [] : [scope.colors[a].clone(), scope.colors[b].clone(), scope.colors[c].clone()];\n      const vertexNormals = normal === void 0 ? [] : [\n        new Vector3().fromBufferAttribute(normal, a),\n        new Vector3().fromBufferAttribute(normal, b),\n        new Vector3().fromBufferAttribute(normal, c)\n      ];\n      const face = new Face3(a, b, c, vertexNormals, vertexColors, materialIndex);\n      scope.faces.push(face);\n      if (uv !== void 0) {\n        scope.faceVertexUvs[0].push([\n          new Vector2().fromBufferAttribute(uv, a),\n          new Vector2().fromBufferAttribute(uv, b),\n          new Vector2().fromBufferAttribute(uv, c)\n        ]);\n      }\n      if (uv2 !== void 0) {\n        scope.faceVertexUvs[1].push([\n          new Vector2().fromBufferAttribute(uv2, a),\n          new Vector2().fromBufferAttribute(uv2, b),\n          new Vector2().fromBufferAttribute(uv2, c)\n        ]);\n      }\n    }\n    const groups = geometry.groups;\n    if (groups.length > 0) {\n      for (let i = 0; i < groups.length; i++) {\n        const group = groups[i];\n        const start = group.start;\n        const count = group.count;\n        for (let j = start, jl = start + count; j < jl; j += 3) {\n          if (index !== void 0) {\n            addFace(index.getX(j), index.getX(j + 1), index.getX(j + 2), group.materialIndex);\n          } else {\n            addFace(j, j + 1, j + 2, group.materialIndex);\n          }\n        }\n      }\n    } else {\n      if (index !== void 0) {\n        for (let i = 0; i < index.count; i += 3) {\n          addFace(index.getX(i), index.getX(i + 1), index.getX(i + 2));\n        }\n      } else {\n        for (let i = 0; i < position.count; i += 3) {\n          addFace(i, i + 1, i + 2);\n        }\n      }\n    }\n    this.computeFaceNormals();\n    if (geometry.boundingBox !== null) {\n      this.boundingBox = geometry.boundingBox.clone();\n    }\n    if (geometry.boundingSphere !== null) {\n      this.boundingSphere = geometry.boundingSphere.clone();\n    }\n    return this;\n  }\n  center() {\n    this.computeBoundingBox();\n    this.boundingBox.getCenter(_offset).negate();\n    this.translate(_offset.x, _offset.y, _offset.z);\n    return this;\n  }\n  normalize() {\n    this.computeBoundingSphere();\n    const center = this.boundingSphere.center;\n    const radius = this.boundingSphere.radius;\n    const s = radius === 0 ? 1 : 1 / radius;\n    const matrix = new Matrix4();\n    matrix.set(s, 0, 0, -s * center.x, 0, s, 0, -s * center.y, 0, 0, s, -s * center.z, 0, 0, 0, 1);\n    this.applyMatrix4(matrix);\n    return this;\n  }\n  computeFaceNormals() {\n    const cb = new Vector3(), ab = new Vector3();\n    for (let f = 0, fl = this.faces.length; f < fl; f++) {\n      const face = this.faces[f];\n      const vA = this.vertices[face.a];\n      const vB = this.vertices[face.b];\n      const vC = this.vertices[face.c];\n      cb.subVectors(vC, vB);\n      ab.subVectors(vA, vB);\n      cb.cross(ab);\n      cb.normalize();\n      face.normal.copy(cb);\n    }\n  }\n  computeVertexNormals(areaWeighted = true) {\n    const vertices = new Array(this.vertices.length);\n    for (let v = 0, vl = this.vertices.length; v < vl; v++) {\n      vertices[v] = new Vector3();\n    }\n    if (areaWeighted) {\n      const cb = new Vector3(), ab = new Vector3();\n      for (let f = 0, fl = this.faces.length; f < fl; f++) {\n        const face = this.faces[f];\n        const vA = this.vertices[face.a];\n        const vB = this.vertices[face.b];\n        const vC = this.vertices[face.c];\n        cb.subVectors(vC, vB);\n        ab.subVectors(vA, vB);\n        cb.cross(ab);\n        vertices[face.a].add(cb);\n        vertices[face.b].add(cb);\n        vertices[face.c].add(cb);\n      }\n    } else {\n      this.computeFaceNormals();\n      for (let f = 0, fl = this.faces.length; f < fl; f++) {\n        const face = this.faces[f];\n        vertices[face.a].add(face.normal);\n        vertices[face.b].add(face.normal);\n        vertices[face.c].add(face.normal);\n      }\n    }\n    for (let v = 0, vl = this.vertices.length; v < vl; v++) {\n      vertices[v].normalize();\n    }\n    for (let f = 0, fl = this.faces.length; f < fl; f++) {\n      const face = this.faces[f];\n      const vertexNormals = face.vertexNormals;\n      if (vertexNormals.length === 3) {\n        vertexNormals[0].copy(vertices[face.a]);\n        vertexNormals[1].copy(vertices[face.b]);\n        vertexNormals[2].copy(vertices[face.c]);\n      } else {\n        vertexNormals[0] = vertices[face.a].clone();\n        vertexNormals[1] = vertices[face.b].clone();\n        vertexNormals[2] = vertices[face.c].clone();\n      }\n    }\n    if (this.faces.length > 0) {\n      this.normalsNeedUpdate = true;\n    }\n  }\n  computeFlatVertexNormals() {\n    this.computeFaceNormals();\n    for (let f = 0, fl = this.faces.length; f < fl; f++) {\n      const face = this.faces[f];\n      const vertexNormals = face.vertexNormals;\n      if (vertexNormals.length === 3) {\n        vertexNormals[0].copy(face.normal);\n        vertexNormals[1].copy(face.normal);\n        vertexNormals[2].copy(face.normal);\n      } else {\n        vertexNormals[0] = face.normal.clone();\n        vertexNormals[1] = face.normal.clone();\n        vertexNormals[2] = face.normal.clone();\n      }\n    }\n    if (this.faces.length > 0) {\n      this.normalsNeedUpdate = true;\n    }\n  }\n  computeMorphNormals() {\n    for (let f = 0, fl = this.faces.length; f < fl; f++) {\n      const face = this.faces[f];\n      if (!face.__originalFaceNormal) {\n        face.__originalFaceNormal = face.normal.clone();\n      } else {\n        face.__originalFaceNormal.copy(face.normal);\n      }\n      if (!face.__originalVertexNormals)\n        face.__originalVertexNormals = [];\n      for (let i = 0, il = face.vertexNormals.length; i < il; i++) {\n        if (!face.__originalVertexNormals[i]) {\n          face.__originalVertexNormals[i] = face.vertexNormals[i].clone();\n        } else {\n          face.__originalVertexNormals[i].copy(face.vertexNormals[i]);\n        }\n      }\n    }\n    const tmpGeo = new Geometry();\n    tmpGeo.faces = this.faces;\n    for (let i = 0, il = this.morphTargets.length; i < il; i++) {\n      if (!this.morphNormals[i]) {\n        this.morphNormals[i] = {};\n        this.morphNormals[i].faceNormals = [];\n        this.morphNormals[i].vertexNormals = [];\n        const dstNormalsFace = this.morphNormals[i].faceNormals;\n        const dstNormalsVertex = this.morphNormals[i].vertexNormals;\n        for (let f = 0, fl = this.faces.length; f < fl; f++) {\n          const faceNormal = new Vector3();\n          const vertexNormals = {\n            a: new Vector3(),\n            b: new Vector3(),\n            c: new Vector3()\n          };\n          dstNormalsFace.push(faceNormal);\n          dstNormalsVertex.push(vertexNormals);\n        }\n      }\n      const morphNormals = this.morphNormals[i];\n      tmpGeo.vertices = this.morphTargets[i].vertices;\n      tmpGeo.computeFaceNormals();\n      tmpGeo.computeVertexNormals();\n      for (let f = 0, fl = this.faces.length; f < fl; f++) {\n        const face = this.faces[f];\n        const faceNormal = morphNormals.faceNormals[f];\n        const vertexNormals = morphNormals.vertexNormals[f];\n        faceNormal.copy(face.normal);\n        vertexNormals.a.copy(face.vertexNormals[0]);\n        vertexNormals.b.copy(face.vertexNormals[1]);\n        vertexNormals.c.copy(face.vertexNormals[2]);\n      }\n    }\n    for (let f = 0, fl = this.faces.length; f < fl; f++) {\n      const face = this.faces[f];\n      face.normal = face.__originalFaceNormal;\n      face.vertexNormals = face.__originalVertexNormals;\n    }\n  }\n  computeBoundingBox() {\n    if (this.boundingBox === null) {\n      this.boundingBox = new Box3();\n    }\n    this.boundingBox.setFromPoints(this.vertices);\n  }\n  computeBoundingSphere() {\n    if (this.boundingSphere === null) {\n      this.boundingSphere = new Sphere();\n    }\n    this.boundingSphere.setFromPoints(this.vertices);\n  }\n  merge(geometry, matrix, materialIndexOffset = 0) {\n    if (!(geometry && geometry.isGeometry)) {\n      console.error(\"THREE.Geometry.merge(): geometry not an instance of THREE.Geometry.\", geometry);\n      return;\n    }\n    let normalMatrix;\n    const vertexOffset = this.vertices.length, vertices1 = this.vertices, vertices2 = geometry.vertices, faces1 = this.faces, faces2 = geometry.faces, colors1 = this.colors, colors2 = geometry.colors;\n    if (matrix !== void 0) {\n      normalMatrix = new Matrix3().getNormalMatrix(matrix);\n    }\n    for (let i = 0, il = vertices2.length; i < il; i++) {\n      const vertex = vertices2[i];\n      const vertexCopy = vertex.clone();\n      if (matrix !== void 0)\n        vertexCopy.applyMatrix4(matrix);\n      vertices1.push(vertexCopy);\n    }\n    for (let i = 0, il = colors2.length; i < il; i++) {\n      colors1.push(colors2[i].clone());\n    }\n    for (let i = 0, il = faces2.length; i < il; i++) {\n      const face = faces2[i];\n      let normal, color;\n      const faceVertexNormals = face.vertexNormals, faceVertexColors = face.vertexColors;\n      const faceCopy = new Face3(face.a + vertexOffset, face.b + vertexOffset, face.c + vertexOffset);\n      faceCopy.normal.copy(face.normal);\n      if (normalMatrix !== void 0) {\n        faceCopy.normal.applyMatrix3(normalMatrix).normalize();\n      }\n      for (let j = 0, jl = faceVertexNormals.length; j < jl; j++) {\n        normal = faceVertexNormals[j].clone();\n        if (normalMatrix !== void 0) {\n          normal.applyMatrix3(normalMatrix).normalize();\n        }\n        faceCopy.vertexNormals.push(normal);\n      }\n      faceCopy.color.copy(face.color);\n      for (let j = 0, jl = faceVertexColors.length; j < jl; j++) {\n        color = faceVertexColors[j];\n        faceCopy.vertexColors.push(color.clone());\n      }\n      faceCopy.materialIndex = face.materialIndex + materialIndexOffset;\n      faces1.push(faceCopy);\n    }\n    for (let i = 0, il = geometry.faceVertexUvs.length; i < il; i++) {\n      const faceVertexUvs2 = geometry.faceVertexUvs[i];\n      if (this.faceVertexUvs[i] === void 0)\n        this.faceVertexUvs[i] = [];\n      for (let j = 0, jl = faceVertexUvs2.length; j < jl; j++) {\n        const uvs2 = faceVertexUvs2[j], uvsCopy = [];\n        for (let k = 0, kl = uvs2.length; k < kl; k++) {\n          uvsCopy.push(uvs2[k].clone());\n        }\n        this.faceVertexUvs[i].push(uvsCopy);\n      }\n    }\n  }\n  mergeMesh(mesh) {\n    if (!(mesh && mesh.isMesh)) {\n      console.error(\"THREE.Geometry.mergeMesh(): mesh not an instance of THREE.Mesh.\", mesh);\n      return;\n    }\n    if (mesh.matrixAutoUpdate)\n      mesh.updateMatrix();\n    this.merge(mesh.geometry, mesh.matrix);\n  }\n  /*\n   * Checks for duplicate vertices with hashmap.\n   * Duplicated vertices are removed\n   * and faces' vertices are updated.\n   */\n  mergeVertices(precisionPoints = 4) {\n    const verticesMap = {};\n    const unique = [], changes = [];\n    const precision = Math.pow(10, precisionPoints);\n    for (let i = 0, il = this.vertices.length; i < il; i++) {\n      const v = this.vertices[i];\n      const key = `${Math.round(v.x * precision)}_${Math.round(v.y * precision)}_${Math.round(v.z * precision)}`;\n      if (verticesMap[key] === void 0) {\n        verticesMap[key] = i;\n        unique.push(this.vertices[i]);\n        changes[i] = unique.length - 1;\n      } else {\n        changes[i] = changes[verticesMap[key]];\n      }\n    }\n    const faceIndicesToRemove = [];\n    for (let i = 0, il = this.faces.length; i < il; i++) {\n      const face = this.faces[i];\n      face.a = changes[face.a];\n      face.b = changes[face.b];\n      face.c = changes[face.c];\n      const indices = [face.a, face.b, face.c];\n      for (let n = 0; n < 3; n++) {\n        if (indices[n] === indices[(n + 1) % 3]) {\n          faceIndicesToRemove.push(i);\n          break;\n        }\n      }\n    }\n    for (let i = faceIndicesToRemove.length - 1; i >= 0; i--) {\n      const idx = faceIndicesToRemove[i];\n      this.faces.splice(idx, 1);\n      for (let j = 0, jl = this.faceVertexUvs.length; j < jl; j++) {\n        this.faceVertexUvs[j].splice(idx, 1);\n      }\n    }\n    const diff = this.vertices.length - unique.length;\n    this.vertices = unique;\n    return diff;\n  }\n  setFromPoints(points) {\n    this.vertices = [];\n    for (let i = 0, l = points.length; i < l; i++) {\n      const point = points[i];\n      this.vertices.push(new Vector3(point.x, point.y, point.z || 0));\n    }\n    return this;\n  }\n  sortFacesByMaterialIndex() {\n    const faces = this.faces;\n    const length = faces.length;\n    for (let i = 0; i < length; i++) {\n      faces[i]._id = i;\n    }\n    function materialIndexSort(a, b) {\n      return a.materialIndex - b.materialIndex;\n    }\n    faces.sort(materialIndexSort);\n    const uvs1 = this.faceVertexUvs[0];\n    const uvs2 = this.faceVertexUvs[1];\n    let newUvs1, newUvs2;\n    if (uvs1 && uvs1.length === length)\n      newUvs1 = [];\n    if (uvs2 && uvs2.length === length)\n      newUvs2 = [];\n    for (let i = 0; i < length; i++) {\n      const id = faces[i]._id;\n      if (newUvs1)\n        newUvs1.push(uvs1[id]);\n      if (newUvs2)\n        newUvs2.push(uvs2[id]);\n    }\n    if (newUvs1)\n      this.faceVertexUvs[0] = newUvs1;\n    if (newUvs2)\n      this.faceVertexUvs[1] = newUvs2;\n  }\n  toJSON() {\n    const data = {\n      metadata: {\n        version: 4.5,\n        type: \"Geometry\",\n        generator: \"Geometry.toJSON\"\n      }\n    };\n    data.uuid = this.uuid;\n    data.type = this.type;\n    if (this.name !== \"\")\n      data.name = this.name;\n    if (this.parameters !== void 0) {\n      const parameters = this.parameters;\n      for (let key in parameters) {\n        if (parameters[key] !== void 0)\n          data[key] = parameters[key];\n      }\n      return data;\n    }\n    const vertices = [];\n    for (let i = 0; i < this.vertices.length; i++) {\n      const vertex = this.vertices[i];\n      vertices.push(vertex.x, vertex.y, vertex.z);\n    }\n    const faces = [];\n    const normals = [];\n    const normalsHash = {};\n    const colors = [];\n    const colorsHash = {};\n    const uvs = [];\n    const uvsHash = {};\n    for (let i = 0; i < this.faces.length; i++) {\n      const face = this.faces[i];\n      const hasMaterial = true;\n      const hasFaceUv = false;\n      const hasFaceVertexUv = this.faceVertexUvs[0][i] !== void 0;\n      const hasFaceNormal = face.normal.length() > 0;\n      const hasFaceVertexNormal = face.vertexNormals.length > 0;\n      const hasFaceColor = face.color.r !== 1 || face.color.g !== 1 || face.color.b !== 1;\n      const hasFaceVertexColor = face.vertexColors.length > 0;\n      let faceType = 0;\n      faceType = setBit(faceType, 0, 0);\n      faceType = setBit(faceType, 1, hasMaterial);\n      faceType = setBit(faceType, 2, hasFaceUv);\n      faceType = setBit(faceType, 3, hasFaceVertexUv);\n      faceType = setBit(faceType, 4, hasFaceNormal);\n      faceType = setBit(faceType, 5, hasFaceVertexNormal);\n      faceType = setBit(faceType, 6, hasFaceColor);\n      faceType = setBit(faceType, 7, hasFaceVertexColor);\n      faces.push(faceType);\n      faces.push(face.a, face.b, face.c);\n      faces.push(face.materialIndex);\n      if (hasFaceVertexUv) {\n        const faceVertexUvs = this.faceVertexUvs[0][i];\n        faces.push(getUvIndex(faceVertexUvs[0]), getUvIndex(faceVertexUvs[1]), getUvIndex(faceVertexUvs[2]));\n      }\n      if (hasFaceNormal) {\n        faces.push(getNormalIndex(face.normal));\n      }\n      if (hasFaceVertexNormal) {\n        const vertexNormals = face.vertexNormals;\n        faces.push(getNormalIndex(vertexNormals[0]), getNormalIndex(vertexNormals[1]), getNormalIndex(vertexNormals[2]));\n      }\n      if (hasFaceColor) {\n        faces.push(getColorIndex(face.color));\n      }\n      if (hasFaceVertexColor) {\n        const vertexColors = face.vertexColors;\n        faces.push(getColorIndex(vertexColors[0]), getColorIndex(vertexColors[1]), getColorIndex(vertexColors[2]));\n      }\n    }\n    function setBit(value, position, enabled) {\n      return enabled ? value | 1 << position : value & ~(1 << position);\n    }\n    function getNormalIndex(normal) {\n      const hash = normal.x.toString() + normal.y.toString() + normal.z.toString();\n      if (normalsHash[hash] !== void 0) {\n        return normalsHash[hash];\n      }\n      normalsHash[hash] = normals.length / 3;\n      normals.push(normal.x, normal.y, normal.z);\n      return normalsHash[hash];\n    }\n    function getColorIndex(color) {\n      const hash = color.r.toString() + color.g.toString() + color.b.toString();\n      if (colorsHash[hash] !== void 0) {\n        return colorsHash[hash];\n      }\n      colorsHash[hash] = colors.length;\n      colors.push(color.getHex());\n      return colorsHash[hash];\n    }\n    function getUvIndex(uv) {\n      const hash = uv.x.toString() + uv.y.toString();\n      if (uvsHash[hash] !== void 0) {\n        return uvsHash[hash];\n      }\n      uvsHash[hash] = uvs.length / 2;\n      uvs.push(uv.x, uv.y);\n      return uvsHash[hash];\n    }\n    data.data = {};\n    data.data.vertices = vertices;\n    data.data.normals = normals;\n    if (colors.length > 0)\n      data.data.colors = colors;\n    if (uvs.length > 0)\n      data.data.uvs = [uvs];\n    data.data.faces = faces;\n    return data;\n  }\n  clone() {\n    return new Geometry().copy(this);\n  }\n  copy(source) {\n    this.vertices = [];\n    this.colors = [];\n    this.faces = [];\n    this.faceVertexUvs = [[]];\n    this.morphTargets = [];\n    this.morphNormals = [];\n    this.skinWeights = [];\n    this.skinIndices = [];\n    this.lineDistances = [];\n    this.boundingBox = null;\n    this.boundingSphere = null;\n    this.name = source.name;\n    const vertices = source.vertices;\n    for (let i = 0, il = vertices.length; i < il; i++) {\n      this.vertices.push(vertices[i].clone());\n    }\n    const colors = source.colors;\n    for (let i = 0, il = colors.length; i < il; i++) {\n      this.colors.push(colors[i].clone());\n    }\n    const faces = source.faces;\n    for (let i = 0, il = faces.length; i < il; i++) {\n      this.faces.push(faces[i].clone());\n    }\n    for (let i = 0, il = source.faceVertexUvs.length; i < il; i++) {\n      const faceVertexUvs = source.faceVertexUvs[i];\n      if (this.faceVertexUvs[i] === void 0) {\n        this.faceVertexUvs[i] = [];\n      }\n      for (let j = 0, jl = faceVertexUvs.length; j < jl; j++) {\n        const uvs = faceVertexUvs[j], uvsCopy = [];\n        for (let k = 0, kl = uvs.length; k < kl; k++) {\n          const uv = uvs[k];\n          uvsCopy.push(uv.clone());\n        }\n        this.faceVertexUvs[i].push(uvsCopy);\n      }\n    }\n    const morphTargets = source.morphTargets;\n    for (let i = 0, il = morphTargets.length; i < il; i++) {\n      const morphTarget = {};\n      morphTarget.name = morphTargets[i].name;\n      if (morphTargets[i].vertices !== void 0) {\n        morphTarget.vertices = [];\n        for (let j = 0, jl = morphTargets[i].vertices.length; j < jl; j++) {\n          morphTarget.vertices.push(morphTargets[i].vertices[j].clone());\n        }\n      }\n      if (morphTargets[i].normals !== void 0) {\n        morphTarget.normals = [];\n        for (let j = 0, jl = morphTargets[i].normals.length; j < jl; j++) {\n          morphTarget.normals.push(morphTargets[i].normals[j].clone());\n        }\n      }\n      this.morphTargets.push(morphTarget);\n    }\n    const morphNormals = source.morphNormals;\n    for (let i = 0, il = morphNormals.length; i < il; i++) {\n      const morphNormal = {};\n      if (morphNormals[i].vertexNormals !== void 0) {\n        morphNormal.vertexNormals = [];\n        for (let j = 0, jl = morphNormals[i].vertexNormals.length; j < jl; j++) {\n          const srcVertexNormal = morphNormals[i].vertexNormals[j];\n          const destVertexNormal = {};\n          destVertexNormal.a = srcVertexNormal.a.clone();\n          destVertexNormal.b = srcVertexNormal.b.clone();\n          destVertexNormal.c = srcVertexNormal.c.clone();\n          morphNormal.vertexNormals.push(destVertexNormal);\n        }\n      }\n      if (morphNormals[i].faceNormals !== void 0) {\n        morphNormal.faceNormals = [];\n        for (let j = 0, jl = morphNormals[i].faceNormals.length; j < jl; j++) {\n          morphNormal.faceNormals.push(morphNormals[i].faceNormals[j].clone());\n        }\n      }\n      this.morphNormals.push(morphNormal);\n    }\n    const skinWeights = source.skinWeights;\n    for (let i = 0, il = skinWeights.length; i < il; i++) {\n      this.skinWeights.push(skinWeights[i].clone());\n    }\n    const skinIndices = source.skinIndices;\n    for (let i = 0, il = skinIndices.length; i < il; i++) {\n      this.skinIndices.push(skinIndices[i].clone());\n    }\n    const lineDistances = source.lineDistances;\n    for (let i = 0, il = lineDistances.length; i < il; i++) {\n      this.lineDistances.push(lineDistances[i]);\n    }\n    const boundingBox = source.boundingBox;\n    if (boundingBox !== null) {\n      this.boundingBox = boundingBox.clone();\n    }\n    const boundingSphere = source.boundingSphere;\n    if (boundingSphere !== null) {\n      this.boundingSphere = boundingSphere.clone();\n    }\n    this.elementsNeedUpdate = source.elementsNeedUpdate;\n    this.verticesNeedUpdate = source.verticesNeedUpdate;\n    this.uvsNeedUpdate = source.uvsNeedUpdate;\n    this.normalsNeedUpdate = source.normalsNeedUpdate;\n    this.colorsNeedUpdate = source.colorsNeedUpdate;\n    this.lineDistancesNeedUpdate = source.lineDistancesNeedUpdate;\n    this.groupsNeedUpdate = source.groupsNeedUpdate;\n    return this;\n  }\n  toBufferGeometry() {\n    const geometry = new DirectGeometry().fromGeometry(this);\n    const buffergeometry = new BufferGeometry();\n    const positions = new Float32Array(geometry.vertices.length * 3);\n    buffergeometry.setAttribute(\"position\", new BufferAttribute(positions, 3).copyVector3sArray(geometry.vertices));\n    if (geometry.normals.length > 0) {\n      const normals = new Float32Array(geometry.normals.length * 3);\n      buffergeometry.setAttribute(\"normal\", new BufferAttribute(normals, 3).copyVector3sArray(geometry.normals));\n    }\n    if (geometry.colors.length > 0) {\n      const colors = new Float32Array(geometry.colors.length * 3);\n      buffergeometry.setAttribute(\"color\", new BufferAttribute(colors, 3).copyColorsArray(geometry.colors));\n    }\n    if (geometry.uvs.length > 0) {\n      const uvs = new Float32Array(geometry.uvs.length * 2);\n      buffergeometry.setAttribute(\"uv\", new BufferAttribute(uvs, 2).copyVector2sArray(geometry.uvs));\n    }\n    if (geometry.uvs2.length > 0) {\n      const uvs2 = new Float32Array(geometry.uvs2.length * 2);\n      buffergeometry.setAttribute(\"uv2\", new BufferAttribute(uvs2, 2).copyVector2sArray(geometry.uvs2));\n    }\n    buffergeometry.groups = geometry.groups;\n    for (let name in geometry.morphTargets) {\n      const array = [];\n      const morphTargets = geometry.morphTargets[name];\n      for (let i = 0, l = morphTargets.length; i < l; i++) {\n        const morphTarget = morphTargets[i];\n        const attribute = new Float32BufferAttribute(morphTarget.data.length * 3, 3);\n        attribute.name = morphTarget.name;\n        array.push(attribute.copyVector3sArray(morphTarget.data));\n      }\n      buffergeometry.morphAttributes[name] = array;\n    }\n    if (geometry.skinIndices.length > 0) {\n      const skinIndices = new Float32BufferAttribute(geometry.skinIndices.length * 4, 4);\n      buffergeometry.setAttribute(\"skinIndex\", skinIndices.copyVector4sArray(geometry.skinIndices));\n    }\n    if (geometry.skinWeights.length > 0) {\n      const skinWeights = new Float32BufferAttribute(geometry.skinWeights.length * 4, 4);\n      buffergeometry.setAttribute(\"skinWeight\", skinWeights.copyVector4sArray(geometry.skinWeights));\n    }\n    if (geometry.boundingSphere !== null) {\n      buffergeometry.boundingSphere = geometry.boundingSphere.clone();\n    }\n    if (geometry.boundingBox !== null) {\n      buffergeometry.boundingBox = geometry.boundingBox.clone();\n    }\n    return buffergeometry;\n  }\n  computeTangents() {\n    console.error(\"THREE.Geometry: .computeTangents() has been removed.\");\n  }\n  computeLineDistances() {\n    console.error(\n      \"THREE.Geometry: .computeLineDistances() has been removed. Use THREE.Line.computeLineDistances() instead.\"\n    );\n  }\n  applyMatrix(matrix) {\n    console.warn(\"THREE.Geometry: .applyMatrix() has been renamed to .applyMatrix4().\");\n    return this.applyMatrix4(matrix);\n  }\n  dispose() {\n    this.dispatchEvent({ type: \"dispose\" });\n  }\n}\nclass DirectGeometry {\n  constructor() {\n    this.vertices = [];\n    this.normals = [];\n    this.colors = [];\n    this.uvs = [];\n    this.uvs2 = [];\n    this.groups = [];\n    this.morphTargets = {};\n    this.skinWeights = [];\n    this.skinIndices = [];\n    this.boundingBox = null;\n    this.boundingSphere = null;\n    this.verticesNeedUpdate = false;\n    this.normalsNeedUpdate = false;\n    this.colorsNeedUpdate = false;\n    this.uvsNeedUpdate = false;\n    this.groupsNeedUpdate = false;\n  }\n  computeGroups(geometry) {\n    const groups = [];\n    let group, i;\n    let materialIndex = void 0;\n    const faces = geometry.faces;\n    for (i = 0; i < faces.length; i++) {\n      const face = faces[i];\n      if (face.materialIndex !== materialIndex) {\n        materialIndex = face.materialIndex;\n        if (group !== void 0) {\n          group.count = i * 3 - group.start;\n          groups.push(group);\n        }\n        group = {\n          start: i * 3,\n          materialIndex\n        };\n      }\n    }\n    if (group !== void 0) {\n      group.count = i * 3 - group.start;\n      groups.push(group);\n    }\n    this.groups = groups;\n  }\n  fromGeometry(geometry) {\n    const faces = geometry.faces;\n    const vertices = geometry.vertices;\n    const faceVertexUvs = geometry.faceVertexUvs;\n    const hasFaceVertexUv = faceVertexUvs[0] && faceVertexUvs[0].length > 0;\n    const hasFaceVertexUv2 = faceVertexUvs[1] && faceVertexUvs[1].length > 0;\n    const morphTargets = geometry.morphTargets;\n    const morphTargetsLength = morphTargets.length;\n    let morphTargetsPosition;\n    if (morphTargetsLength > 0) {\n      morphTargetsPosition = [];\n      for (let i = 0; i < morphTargetsLength; i++) {\n        morphTargetsPosition[i] = {\n          name: morphTargets[i].name,\n          data: []\n        };\n      }\n      this.morphTargets.position = morphTargetsPosition;\n    }\n    const morphNormals = geometry.morphNormals;\n    const morphNormalsLength = morphNormals.length;\n    let morphTargetsNormal;\n    if (morphNormalsLength > 0) {\n      morphTargetsNormal = [];\n      for (let i = 0; i < morphNormalsLength; i++) {\n        morphTargetsNormal[i] = {\n          name: morphNormals[i].name,\n          data: []\n        };\n      }\n      this.morphTargets.normal = morphTargetsNormal;\n    }\n    const skinIndices = geometry.skinIndices;\n    const skinWeights = geometry.skinWeights;\n    const hasSkinIndices = skinIndices.length === vertices.length;\n    const hasSkinWeights = skinWeights.length === vertices.length;\n    if (vertices.length > 0 && faces.length === 0) {\n      console.error(\"THREE.DirectGeometry: Faceless geometries are not supported.\");\n    }\n    for (let i = 0; i < faces.length; i++) {\n      const face = faces[i];\n      this.vertices.push(vertices[face.a], vertices[face.b], vertices[face.c]);\n      const vertexNormals = face.vertexNormals;\n      if (vertexNormals.length === 3) {\n        this.normals.push(vertexNormals[0], vertexNormals[1], vertexNormals[2]);\n      } else {\n        const normal = face.normal;\n        this.normals.push(normal, normal, normal);\n      }\n      const vertexColors = face.vertexColors;\n      if (vertexColors.length === 3) {\n        this.colors.push(vertexColors[0], vertexColors[1], vertexColors[2]);\n      } else {\n        const color = face.color;\n        this.colors.push(color, color, color);\n      }\n      if (hasFaceVertexUv === true) {\n        const vertexUvs = faceVertexUvs[0][i];\n        if (vertexUvs !== void 0) {\n          this.uvs.push(vertexUvs[0], vertexUvs[1], vertexUvs[2]);\n        } else {\n          console.warn(\"THREE.DirectGeometry.fromGeometry(): Undefined vertexUv \", i);\n          this.uvs.push(new Vector2(), new Vector2(), new Vector2());\n        }\n      }\n      if (hasFaceVertexUv2 === true) {\n        const vertexUvs = faceVertexUvs[1][i];\n        if (vertexUvs !== void 0) {\n          this.uvs2.push(vertexUvs[0], vertexUvs[1], vertexUvs[2]);\n        } else {\n          console.warn(\"THREE.DirectGeometry.fromGeometry(): Undefined vertexUv2 \", i);\n          this.uvs2.push(new Vector2(), new Vector2(), new Vector2());\n        }\n      }\n      for (let j = 0; j < morphTargetsLength; j++) {\n        const morphTarget = morphTargets[j].vertices;\n        morphTargetsPosition[j].data.push(morphTarget[face.a], morphTarget[face.b], morphTarget[face.c]);\n      }\n      for (let j = 0; j < morphNormalsLength; j++) {\n        const morphNormal = morphNormals[j].vertexNormals[i];\n        morphTargetsNormal[j].data.push(morphNormal.a, morphNormal.b, morphNormal.c);\n      }\n      if (hasSkinIndices) {\n        this.skinIndices.push(skinIndices[face.a], skinIndices[face.b], skinIndices[face.c]);\n      }\n      if (hasSkinWeights) {\n        this.skinWeights.push(skinWeights[face.a], skinWeights[face.b], skinWeights[face.c]);\n      }\n    }\n    this.computeGroups(geometry);\n    this.verticesNeedUpdate = geometry.verticesNeedUpdate;\n    this.normalsNeedUpdate = geometry.normalsNeedUpdate;\n    this.colorsNeedUpdate = geometry.colorsNeedUpdate;\n    this.uvsNeedUpdate = geometry.uvsNeedUpdate;\n    this.groupsNeedUpdate = geometry.groupsNeedUpdate;\n    if (geometry.boundingSphere !== null) {\n      this.boundingSphere = geometry.boundingSphere.clone();\n    }\n    if (geometry.boundingBox !== null) {\n      this.boundingBox = geometry.boundingBox.clone();\n    }\n    return this;\n  }\n}\nclass Face3 {\n  constructor(a, b, c, normal, color, materialIndex = 0) {\n    this.a = a;\n    this.b = b;\n    this.c = c;\n    this.normal = normal && normal.isVector3 ? normal : new Vector3();\n    this.vertexNormals = Array.isArray(normal) ? normal : [];\n    this.color = color && color.isColor ? color : new Color();\n    this.vertexColors = Array.isArray(color) ? color : [];\n    this.materialIndex = materialIndex;\n  }\n  clone() {\n    return new this.constructor().copy(this);\n  }\n  copy(source) {\n    this.a = source.a;\n    this.b = source.b;\n    this.c = source.c;\n    this.normal.copy(source.normal);\n    this.color.copy(source.color);\n    this.materialIndex = source.materialIndex;\n    for (let i = 0, il = source.vertexNormals.length; i < il; i++) {\n      this.vertexNormals[i] = source.vertexNormals[i].clone();\n    }\n    for (let i = 0, il = source.vertexColors.length; i < il; i++) {\n      this.vertexColors[i] = source.vertexColors[i].clone();\n    }\n    return this;\n  }\n}\nexport {\n  Face3,\n  Geometry\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}