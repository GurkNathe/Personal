{"ast":null,"code":"var __defProp = Object.defineProperty;\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value\n}) : obj[key] = value;\nvar __publicField = (obj, key, value) => {\n  __defNormalProp(obj, typeof key !== \"symbol\" ? key + \"\" : key, value);\n  return value;\n};\nimport { Object3D, Sphere, Box3 } from \"three\";\nimport { XRHandMeshModel } from \"./XRHandMeshModel.js\";\nconst TOUCH_RADIUS = 0.01;\nconst POINTING_JOINT = \"index-finger-tip\";\nclass OculusHandModel extends Object3D {\n  constructor(controller, leftModelPath, rightModelPath) {\n    super();\n    __publicField(this, \"controller\");\n    __publicField(this, \"motionController\");\n    __publicField(this, \"envMap\");\n    __publicField(this, \"mesh\");\n    __publicField(this, \"xrInputSource\");\n    this.controller = controller;\n    this.motionController = null;\n    this.envMap = null;\n    this.mesh = null;\n    this.xrInputSource = null;\n    controller.addEventListener(\"connected\", event => {\n      const xrInputSource = event.data;\n      if (xrInputSource.hand && !this.motionController) {\n        this.xrInputSource = xrInputSource;\n        this.motionController = new XRHandMeshModel(this, controller, void 0, xrInputSource.handedness, xrInputSource.handedness === \"left\" ? leftModelPath : rightModelPath);\n      }\n    });\n    controller.addEventListener(\"disconnected\", () => {\n      this.dispose();\n    });\n  }\n  updateMatrixWorld(force) {\n    super.updateMatrixWorld(force);\n    if (this.motionController) {\n      this.motionController.updateMesh();\n    }\n  }\n  getPointerPosition() {\n    const indexFingerTip = this.controller.joints[POINTING_JOINT];\n    if (indexFingerTip) {\n      return indexFingerTip.position;\n    } else {\n      return null;\n    }\n  }\n  intersectBoxObject(boxObject) {\n    const pointerPosition = this.getPointerPosition();\n    if (pointerPosition) {\n      const indexSphere = new Sphere(pointerPosition, TOUCH_RADIUS);\n      const box = new Box3().setFromObject(boxObject);\n      return indexSphere.intersectsBox(box);\n    } else {\n      return false;\n    }\n  }\n  checkButton(button) {\n    if (this.intersectBoxObject(button)) {\n      button.onPress();\n    } else {\n      button.onClear();\n    }\n    if (button.isPressed()) {\n      button.whilePressed();\n    }\n  }\n  dispose() {\n    this.clear();\n    this.motionController = null;\n  }\n}\nexport { OculusHandModel };","map":{"version":3,"names":["__defProp","Object","defineProperty","__defNormalProp","obj","key","value","enumerable","configurable","writable","__publicField","Object3D","Sphere","Box3","XRHandMeshModel","TOUCH_RADIUS","POINTING_JOINT","OculusHandModel","constructor","controller","leftModelPath","rightModelPath","motionController","envMap","mesh","xrInputSource","addEventListener","event","data","hand","handedness","dispose","updateMatrixWorld","force","updateMesh","getPointerPosition","indexFingerTip","joints","position","intersectBoxObject","boxObject","pointerPosition","indexSphere","box","setFromObject","intersectsBox","checkButton","button","onPress","onClear","isPressed","whilePressed","clear"],"sources":["/home/krug/Coding/JavaScript/Websites/Personal/personal/node_modules/.pnpm/three-stdlib@2.23.7_three@0.151.3/node_modules/three-stdlib/webxr/OculusHandModel.js"],"sourcesContent":["var __defProp = Object.defineProperty;\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;\nvar __publicField = (obj, key, value) => {\n  __defNormalProp(obj, typeof key !== \"symbol\" ? key + \"\" : key, value);\n  return value;\n};\nimport { Object3D, Sphere, Box3 } from \"three\";\nimport { XRHandMeshModel } from \"./XRHandMeshModel.js\";\nconst TOUCH_RADIUS = 0.01;\nconst POINTING_JOINT = \"index-finger-tip\";\nclass OculusHandModel extends Object3D {\n  constructor(controller, leftModelPath, rightModelPath) {\n    super();\n    __publicField(this, \"controller\");\n    __publicField(this, \"motionController\");\n    __publicField(this, \"envMap\");\n    __publicField(this, \"mesh\");\n    __publicField(this, \"xrInputSource\");\n    this.controller = controller;\n    this.motionController = null;\n    this.envMap = null;\n    this.mesh = null;\n    this.xrInputSource = null;\n    controller.addEventListener(\"connected\", (event) => {\n      const xrInputSource = event.data;\n      if (xrInputSource.hand && !this.motionController) {\n        this.xrInputSource = xrInputSource;\n        this.motionController = new XRHandMeshModel(\n          this,\n          controller,\n          void 0,\n          xrInputSource.handedness,\n          xrInputSource.handedness === \"left\" ? leftModelPath : rightModelPath\n        );\n      }\n    });\n    controller.addEventListener(\"disconnected\", () => {\n      this.dispose();\n    });\n  }\n  updateMatrixWorld(force) {\n    super.updateMatrixWorld(force);\n    if (this.motionController) {\n      this.motionController.updateMesh();\n    }\n  }\n  getPointerPosition() {\n    const indexFingerTip = this.controller.joints[POINTING_JOINT];\n    if (indexFingerTip) {\n      return indexFingerTip.position;\n    } else {\n      return null;\n    }\n  }\n  intersectBoxObject(boxObject) {\n    const pointerPosition = this.getPointerPosition();\n    if (pointerPosition) {\n      const indexSphere = new Sphere(pointerPosition, TOUCH_RADIUS);\n      const box = new Box3().setFromObject(boxObject);\n      return indexSphere.intersectsBox(box);\n    } else {\n      return false;\n    }\n  }\n  checkButton(button) {\n    if (this.intersectBoxObject(button)) {\n      button.onPress();\n    } else {\n      button.onClear();\n    }\n    if (button.isPressed()) {\n      button.whilePressed();\n    }\n  }\n  dispose() {\n    this.clear();\n    this.motionController = null;\n  }\n}\nexport {\n  OculusHandModel\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}