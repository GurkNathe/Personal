{"ast":null,"code":"import _objectWithoutProperties from \"/home/krug/Coding/JavaScript/Websites/Personal/personal/node_modules/.pnpm/@babel+runtime@7.22.3/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js\";\nimport _slicedToArray from \"/home/krug/Coding/JavaScript/Websites/Personal/personal/node_modules/.pnpm/@babel+runtime@7.22.3/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nvar _excluded = [\"children\", \"weight\", \"transform\", \"instances\", \"mesh\", \"count\"];\nimport _extends from '@babel/runtime/helpers/esm/extends';\nimport * as React from 'react';\nimport { MeshSurfaceSampler } from 'three-stdlib';\nimport { InstancedBufferAttribute, Vector3, Color, Object3D } from 'three';\nfunction useSurfaceSampler(mesh) {\n  var count = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 16;\n  var transform = arguments.length > 2 ? arguments[2] : undefined;\n  var weight = arguments.length > 3 ? arguments[3] : undefined;\n  var instanceMesh = arguments.length > 4 ? arguments[4] : undefined;\n  var _React$useState = React.useState(function () {\n      var arr = Array.from({\n        length: count\n      }, function () {\n        return [1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1];\n      }).flat();\n      return new InstancedBufferAttribute(Float32Array.from(arr), 16);\n    }),\n    _React$useState2 = _slicedToArray(_React$useState, 2),\n    buffer = _React$useState2[0],\n    setBuffer = _React$useState2[1];\n  React.useLayoutEffect(function () {\n    if (typeof mesh.current === 'undefined') return;\n    var sampler = new MeshSurfaceSampler(mesh.current);\n    if (weight) {\n      sampler.setWeightAttribute(weight);\n    }\n    sampler.build();\n    var position = new Vector3();\n    var normal = new Vector3();\n    var color = new Color();\n    var dummy = new Object3D();\n    mesh.current.updateMatrixWorld(true);\n    for (var i = 0; i < count; i++) {\n      sampler.sample(position, normal, color);\n      if (typeof transform === 'function') {\n        transform({\n          dummy: dummy,\n          sampledMesh: mesh.current,\n          position: position,\n          normal: normal,\n          color: color\n        }, i);\n      } else {\n        dummy.position.copy(position);\n      }\n      dummy.updateMatrix();\n      if (instanceMesh != null && instanceMesh.current) {\n        instanceMesh.current.setMatrixAt(i, dummy.matrix);\n      }\n      dummy.matrix.toArray(buffer.array, i * 16);\n    }\n    if (instanceMesh != null && instanceMesh.current) {\n      instanceMesh.current.instanceMatrix.needsUpdate = true;\n    }\n    buffer.needsUpdate = true;\n    setBuffer(buffer.clone());\n  }, [mesh, instanceMesh, weight, count, transform]);\n  return buffer;\n}\nfunction Sampler(_ref) {\n  var children = _ref.children,\n    weight = _ref.weight,\n    transform = _ref.transform,\n    instances = _ref.instances,\n    mesh = _ref.mesh,\n    _ref$count = _ref.count,\n    count = _ref$count === void 0 ? 16 : _ref$count,\n    props = _objectWithoutProperties(_ref, _excluded);\n  var group = React.useRef(null);\n  var instancedRef = React.useRef(null);\n  var meshToSampleRef = React.useRef(null);\n  React.useLayoutEffect(function () {\n    var _instances$current, _mesh$current;\n    instancedRef.current = (_instances$current = instances == null ? void 0 : instances.current) !== null && _instances$current !== void 0 ? _instances$current : group.current.children.find(function (c) {\n      return c.hasOwnProperty('instanceMatrix');\n    });\n    meshToSampleRef.current = (_mesh$current = mesh == null ? void 0 : mesh.current) !== null && _mesh$current !== void 0 ? _mesh$current : group.current.children.find(function (c) {\n      return c.type === 'Mesh';\n    });\n  }, [children, mesh == null ? void 0 : mesh.current, instances == null ? void 0 : instances.current]);\n  useSurfaceSampler(meshToSampleRef, count, transform, weight, instancedRef);\n  return /*#__PURE__*/React.createElement(\"group\", _extends({\n    ref: group\n  }, props), children);\n}\nexport { Sampler, useSurfaceSampler };","map":{"version":3,"names":["_extends","React","MeshSurfaceSampler","InstancedBufferAttribute","Vector3","Color","Object3D","useSurfaceSampler","mesh","count","arguments","length","undefined","transform","weight","instanceMesh","_React$useState","useState","arr","Array","from","flat","Float32Array","_React$useState2","_slicedToArray","buffer","setBuffer","useLayoutEffect","current","sampler","setWeightAttribute","build","position","normal","color","dummy","updateMatrixWorld","i","sample","sampledMesh","copy","updateMatrix","setMatrixAt","matrix","toArray","array","instanceMatrix","needsUpdate","clone","Sampler","_ref","children","instances","_ref$count","props","_objectWithoutProperties","_excluded","group","useRef","instancedRef","meshToSampleRef","_instances$current","_mesh$current","find","c","hasOwnProperty","type","createElement","ref"],"sources":["/home/krug/Coding/JavaScript/Websites/Personal/personal/node_modules/.pnpm/@react-three+drei@9.72.1_@react-three+fiber@8.13.0_@types+three@0.150.2_react-dom@18.2.0_react@18.2.0_three@0.151.3/node_modules/@react-three/drei/core/Sampler.js"],"sourcesContent":["import _extends from '@babel/runtime/helpers/esm/extends';\nimport * as React from 'react';\nimport { MeshSurfaceSampler } from 'three-stdlib';\nimport { InstancedBufferAttribute, Vector3, Color, Object3D } from 'three';\n\nfunction useSurfaceSampler(mesh, count = 16, transform, weight, instanceMesh) {\n  const [buffer, setBuffer] = React.useState(() => {\n    const arr = Array.from({\n      length: count\n    }, () => [1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1]).flat();\n    return new InstancedBufferAttribute(Float32Array.from(arr), 16);\n  });\n  React.useLayoutEffect(() => {\n    if (typeof mesh.current === 'undefined') return;\n    const sampler = new MeshSurfaceSampler(mesh.current);\n\n    if (weight) {\n      sampler.setWeightAttribute(weight);\n    }\n\n    sampler.build();\n    const position = new Vector3();\n    const normal = new Vector3();\n    const color = new Color();\n    const dummy = new Object3D();\n    mesh.current.updateMatrixWorld(true);\n\n    for (let i = 0; i < count; i++) {\n      sampler.sample(position, normal, color);\n\n      if (typeof transform === 'function') {\n        transform({\n          dummy,\n          sampledMesh: mesh.current,\n          position,\n          normal,\n          color\n        }, i);\n      } else {\n        dummy.position.copy(position);\n      }\n\n      dummy.updateMatrix();\n\n      if (instanceMesh != null && instanceMesh.current) {\n        instanceMesh.current.setMatrixAt(i, dummy.matrix);\n      }\n\n      dummy.matrix.toArray(buffer.array, i * 16);\n    }\n\n    if (instanceMesh != null && instanceMesh.current) {\n      instanceMesh.current.instanceMatrix.needsUpdate = true;\n    }\n\n    buffer.needsUpdate = true;\n    setBuffer(buffer.clone());\n  }, [mesh, instanceMesh, weight, count, transform]);\n  return buffer;\n}\nfunction Sampler({\n  children,\n  weight,\n  transform,\n  instances,\n  mesh,\n  count = 16,\n  ...props\n}) {\n  const group = React.useRef(null);\n  const instancedRef = React.useRef(null);\n  const meshToSampleRef = React.useRef(null);\n  React.useLayoutEffect(() => {\n    var _instances$current, _mesh$current;\n\n    instancedRef.current = (_instances$current = instances == null ? void 0 : instances.current) !== null && _instances$current !== void 0 ? _instances$current : group.current.children.find(c => c.hasOwnProperty('instanceMatrix'));\n    meshToSampleRef.current = (_mesh$current = mesh == null ? void 0 : mesh.current) !== null && _mesh$current !== void 0 ? _mesh$current : group.current.children.find(c => c.type === 'Mesh');\n  }, [children, mesh == null ? void 0 : mesh.current, instances == null ? void 0 : instances.current]);\n  useSurfaceSampler(meshToSampleRef, count, transform, weight, instancedRef);\n  return /*#__PURE__*/React.createElement(\"group\", _extends({\n    ref: group\n  }, props), children);\n}\n\nexport { Sampler, useSurfaceSampler };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}