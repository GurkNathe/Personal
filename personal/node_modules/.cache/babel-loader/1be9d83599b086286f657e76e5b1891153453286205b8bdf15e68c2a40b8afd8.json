{"ast":null,"code":"import _classCallCheck from \"/home/krug/Coding/JavaScript/Websites/Personal/personal/node_modules/.pnpm/@babel+runtime@7.22.3/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/home/krug/Coding/JavaScript/Websites/Personal/personal/node_modules/.pnpm/@babel+runtime@7.22.3/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"/home/krug/Coding/JavaScript/Websites/Personal/personal/node_modules/.pnpm/@babel+runtime@7.22.3/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/home/krug/Coding/JavaScript/Websites/Personal/personal/node_modules/.pnpm/@babel+runtime@7.22.3/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { UniformsUtils, ShaderMaterial, NoBlending, WebGLRenderTarget, LinearMipmapLinearFilter, MeshBasicMaterial } from \"three\";\nimport { Pass, FullScreenQuad } from \"./Pass.js\";\nimport { CopyShader } from \"../shaders/CopyShader.js\";\nimport { LuminosityShader } from \"../shaders/LuminosityShader.js\";\nimport { ToneMapShader } from \"../shaders/ToneMapShader.js\";\nvar AdaptiveToneMappingPass = /*#__PURE__*/function (_Pass) {\n  _inherits(AdaptiveToneMappingPass, _Pass);\n  var _super = _createSuper(AdaptiveToneMappingPass);\n  function AdaptiveToneMappingPass(adaptive, resolution) {\n    var _this;\n    _classCallCheck(this, AdaptiveToneMappingPass);\n    _this = _super.call(this);\n    _this.resolution = resolution !== void 0 ? resolution : 256;\n    _this.needsInit = true;\n    _this.adaptive = adaptive !== void 0 ? !!adaptive : true;\n    _this.luminanceRT = null;\n    _this.previousLuminanceRT = null;\n    _this.currentLuminanceRT = null;\n    var copyShader = CopyShader;\n    _this.copyUniforms = UniformsUtils.clone(copyShader.uniforms);\n    _this.materialCopy = new ShaderMaterial({\n      uniforms: _this.copyUniforms,\n      vertexShader: copyShader.vertexShader,\n      fragmentShader: copyShader.fragmentShader,\n      blending: NoBlending,\n      depthTest: false\n    });\n    _this.materialLuminance = new ShaderMaterial({\n      uniforms: UniformsUtils.clone(LuminosityShader.uniforms),\n      vertexShader: LuminosityShader.vertexShader,\n      fragmentShader: LuminosityShader.fragmentShader,\n      blending: NoBlending\n    });\n    _this.adaptLuminanceShader = {\n      defines: {\n        MIP_LEVEL_1X1: (Math.log(_this.resolution) / Math.log(2)).toFixed(1)\n      },\n      uniforms: {\n        lastLum: {\n          value: null\n        },\n        currentLum: {\n          value: null\n        },\n        minLuminance: {\n          value: 0.01\n        },\n        delta: {\n          value: 0.016\n        },\n        tau: {\n          value: 1\n        }\n      },\n      vertexShader: \"varying vec2 vUv;\\n\\n\\t\\t\\t\\tvoid main() {\\n\\n\\t\\t\\t\\t\\tvUv = uv;\\n\\t\\t\\t\\t\\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\\n\\n\\t\\t\\t\\t}\",\n      fragmentShader: \"varying vec2 vUv;\\n\\n\\t\\t\\t\\tuniform sampler2D lastLum;\\n\\t\\t\\t\\tuniform sampler2D currentLum;\\n\\t\\t\\t\\tuniform float minLuminance;\\n\\t\\t\\t\\tuniform float delta;\\n\\t\\t\\t\\tuniform float tau;\\n\\n\\t\\t\\t\\tvoid main() {\\n\\n\\t\\t\\t\\t\\tvec4 lastLum = texture2D( lastLum, vUv, MIP_LEVEL_1X1 );\\n\\t\\t\\t\\t\\tvec4 currentLum = texture2D( currentLum, vUv, MIP_LEVEL_1X1 );\\n\\n\\t\\t\\t\\t\\tfloat fLastLum = max( minLuminance, lastLum.r );\\n\\t\\t\\t\\t\\tfloat fCurrentLum = max( minLuminance, currentLum.r );\\n\\n\\t\\t\\t\\t\\t//The adaption seems to work better in extreme lighting differences\\n\\t\\t\\t\\t\\t//if the input luminance is squared.\\n\\t\\t\\t\\t\\tfCurrentLum *= fCurrentLum;\\n\\n\\t\\t\\t\\t\\t// Adapt the luminance using Pattanaik's technique\\n\\t\\t\\t\\t\\tfloat fAdaptedLum = fLastLum + (fCurrentLum - fLastLum) * (1.0 - exp(-delta * tau));\\n\\t\\t\\t\\t\\t// \\\"fAdaptedLum = sqrt(fAdaptedLum);\\n\\t\\t\\t\\t\\tgl_FragColor.r = fAdaptedLum;\\n\\t\\t\\t\\t}\"\n    };\n    _this.materialAdaptiveLum = new ShaderMaterial({\n      uniforms: UniformsUtils.clone(_this.adaptLuminanceShader.uniforms),\n      vertexShader: _this.adaptLuminanceShader.vertexShader,\n      fragmentShader: _this.adaptLuminanceShader.fragmentShader,\n      defines: Object.assign({}, _this.adaptLuminanceShader.defines),\n      blending: NoBlending\n    });\n    _this.materialToneMap = new ShaderMaterial({\n      uniforms: UniformsUtils.clone(ToneMapShader.uniforms),\n      vertexShader: ToneMapShader.vertexShader,\n      fragmentShader: ToneMapShader.fragmentShader,\n      blending: NoBlending\n    });\n    _this.fsQuad = new FullScreenQuad(null);\n    return _this;\n  }\n  _createClass(AdaptiveToneMappingPass, [{\n    key: \"render\",\n    value: function render(renderer, writeBuffer, readBuffer, deltaTime) {\n      if (this.needsInit) {\n        this.reset(renderer);\n        this.luminanceRT.texture.type = readBuffer.texture.type;\n        this.previousLuminanceRT.texture.type = readBuffer.texture.type;\n        this.currentLuminanceRT.texture.type = readBuffer.texture.type;\n        this.needsInit = false;\n      }\n      if (this.adaptive) {\n        this.fsQuad.material = this.materialLuminance;\n        this.materialLuminance.uniforms.tDiffuse.value = readBuffer.texture;\n        renderer.setRenderTarget(this.currentLuminanceRT);\n        this.fsQuad.render(renderer);\n        this.fsQuad.material = this.materialAdaptiveLum;\n        this.materialAdaptiveLum.uniforms.delta.value = deltaTime;\n        this.materialAdaptiveLum.uniforms.lastLum.value = this.previousLuminanceRT.texture;\n        this.materialAdaptiveLum.uniforms.currentLum.value = this.currentLuminanceRT.texture;\n        renderer.setRenderTarget(this.luminanceRT);\n        this.fsQuad.render(renderer);\n        this.fsQuad.material = this.materialCopy;\n        this.copyUniforms.tDiffuse.value = this.luminanceRT.texture;\n        renderer.setRenderTarget(this.previousLuminanceRT);\n        this.fsQuad.render(renderer);\n      }\n      this.fsQuad.material = this.materialToneMap;\n      this.materialToneMap.uniforms.tDiffuse.value = readBuffer.texture;\n      if (this.renderToScreen) {\n        renderer.setRenderTarget(null);\n        this.fsQuad.render(renderer);\n      } else {\n        renderer.setRenderTarget(writeBuffer);\n        if (this.clear) renderer.clear();\n        this.fsQuad.render(renderer);\n      }\n    }\n  }, {\n    key: \"reset\",\n    value: function reset() {\n      if (this.luminanceRT) {\n        this.luminanceRT.dispose();\n      }\n      if (this.currentLuminanceRT) {\n        this.currentLuminanceRT.dispose();\n      }\n      if (this.previousLuminanceRT) {\n        this.previousLuminanceRT.dispose();\n      }\n      this.luminanceRT = new WebGLRenderTarget(this.resolution, this.resolution);\n      this.luminanceRT.texture.name = \"AdaptiveToneMappingPass.l\";\n      this.luminanceRT.texture.generateMipmaps = false;\n      this.previousLuminanceRT = new WebGLRenderTarget(this.resolution, this.resolution);\n      this.previousLuminanceRT.texture.name = \"AdaptiveToneMappingPass.pl\";\n      this.previousLuminanceRT.texture.generateMipmaps = false;\n      var pars = {\n        minFilter: LinearMipmapLinearFilter,\n        generateMipmaps: true\n      };\n      this.currentLuminanceRT = new WebGLRenderTarget(this.resolution, this.resolution, pars);\n      this.currentLuminanceRT.texture.name = \"AdaptiveToneMappingPass.cl\";\n      if (this.adaptive) {\n        this.materialToneMap.defines[\"ADAPTED_LUMINANCE\"] = \"\";\n        this.materialToneMap.uniforms.luminanceMap.value = this.luminanceRT.texture;\n      }\n      this.fsQuad.material = new MeshBasicMaterial({\n        color: 7829367\n      });\n      this.materialLuminance.needsUpdate = true;\n      this.materialAdaptiveLum.needsUpdate = true;\n      this.materialToneMap.needsUpdate = true;\n    }\n  }, {\n    key: \"setAdaptive\",\n    value: function setAdaptive(adaptive) {\n      if (adaptive) {\n        this.adaptive = true;\n        this.materialToneMap.defines[\"ADAPTED_LUMINANCE\"] = \"\";\n        this.materialToneMap.uniforms.luminanceMap.value = this.luminanceRT.texture;\n      } else {\n        this.adaptive = false;\n        delete this.materialToneMap.defines[\"ADAPTED_LUMINANCE\"];\n        this.materialToneMap.uniforms.luminanceMap.value = null;\n      }\n      this.materialToneMap.needsUpdate = true;\n    }\n  }, {\n    key: \"setAdaptionRate\",\n    value: function setAdaptionRate(rate) {\n      if (rate) {\n        this.materialAdaptiveLum.uniforms.tau.value = Math.abs(rate);\n      }\n    }\n  }, {\n    key: \"setMinLuminance\",\n    value: function setMinLuminance(minLum) {\n      if (minLum) {\n        this.materialToneMap.uniforms.minLuminance.value = minLum;\n        this.materialAdaptiveLum.uniforms.minLuminance.value = minLum;\n      }\n    }\n  }, {\n    key: \"setMaxLuminance\",\n    value: function setMaxLuminance(maxLum) {\n      if (maxLum) {\n        this.materialToneMap.uniforms.maxLuminance.value = maxLum;\n      }\n    }\n  }, {\n    key: \"setAverageLuminance\",\n    value: function setAverageLuminance(avgLum) {\n      if (avgLum) {\n        this.materialToneMap.uniforms.averageLuminance.value = avgLum;\n      }\n    }\n  }, {\n    key: \"setMiddleGrey\",\n    value: function setMiddleGrey(middleGrey) {\n      if (middleGrey) {\n        this.materialToneMap.uniforms.middleGrey.value = middleGrey;\n      }\n    }\n  }, {\n    key: \"dispose\",\n    value: function dispose() {\n      if (this.luminanceRT) {\n        this.luminanceRT.dispose();\n      }\n      if (this.previousLuminanceRT) {\n        this.previousLuminanceRT.dispose();\n      }\n      if (this.currentLuminanceRT) {\n        this.currentLuminanceRT.dispose();\n      }\n      if (this.materialLuminance) {\n        this.materialLuminance.dispose();\n      }\n      if (this.materialAdaptiveLum) {\n        this.materialAdaptiveLum.dispose();\n      }\n      if (this.materialCopy) {\n        this.materialCopy.dispose();\n      }\n      if (this.materialToneMap) {\n        this.materialToneMap.dispose();\n      }\n    }\n  }]);\n  return AdaptiveToneMappingPass;\n}(Pass);\nexport { AdaptiveToneMappingPass };","map":{"version":3,"names":["UniformsUtils","ShaderMaterial","NoBlending","WebGLRenderTarget","LinearMipmapLinearFilter","MeshBasicMaterial","Pass","FullScreenQuad","CopyShader","LuminosityShader","ToneMapShader","AdaptiveToneMappingPass","_Pass","_inherits","_super","_createSuper","adaptive","resolution","_this","_classCallCheck","call","needsInit","luminanceRT","previousLuminanceRT","currentLuminanceRT","copyShader","copyUniforms","clone","uniforms","materialCopy","vertexShader","fragmentShader","blending","depthTest","materialLuminance","adaptLuminanceShader","defines","MIP_LEVEL_1X1","Math","log","toFixed","lastLum","value","currentLum","minLuminance","delta","tau","materialAdaptiveLum","Object","assign","materialToneMap","fsQuad","_createClass","key","render","renderer","writeBuffer","readBuffer","deltaTime","reset","texture","type","material","tDiffuse","setRenderTarget","renderToScreen","clear","dispose","name","generateMipmaps","pars","minFilter","luminanceMap","color","needsUpdate","setAdaptive","setAdaptionRate","rate","abs","setMinLuminance","minLum","setMaxLuminance","maxLum","maxLuminance","setAverageLuminance","avgLum","averageLuminance","setMiddleGrey","middleGrey"],"sources":["/home/krug/Coding/JavaScript/Websites/Personal/personal/node_modules/.pnpm/three-stdlib@2.23.7_three@0.151.3/node_modules/three-stdlib/postprocessing/AdaptiveToneMappingPass.js"],"sourcesContent":["import { UniformsUtils, ShaderMaterial, NoBlending, WebGLRenderTarget, LinearMipmapLinearFilter, MeshBasicMaterial } from \"three\";\nimport { Pass, FullScreenQuad } from \"./Pass.js\";\nimport { CopyShader } from \"../shaders/CopyShader.js\";\nimport { LuminosityShader } from \"../shaders/LuminosityShader.js\";\nimport { ToneMapShader } from \"../shaders/ToneMapShader.js\";\nclass AdaptiveToneMappingPass extends Pass {\n  constructor(adaptive, resolution) {\n    super();\n    this.resolution = resolution !== void 0 ? resolution : 256;\n    this.needsInit = true;\n    this.adaptive = adaptive !== void 0 ? !!adaptive : true;\n    this.luminanceRT = null;\n    this.previousLuminanceRT = null;\n    this.currentLuminanceRT = null;\n    const copyShader = CopyShader;\n    this.copyUniforms = UniformsUtils.clone(copyShader.uniforms);\n    this.materialCopy = new ShaderMaterial({\n      uniforms: this.copyUniforms,\n      vertexShader: copyShader.vertexShader,\n      fragmentShader: copyShader.fragmentShader,\n      blending: NoBlending,\n      depthTest: false\n    });\n    this.materialLuminance = new ShaderMaterial({\n      uniforms: UniformsUtils.clone(LuminosityShader.uniforms),\n      vertexShader: LuminosityShader.vertexShader,\n      fragmentShader: LuminosityShader.fragmentShader,\n      blending: NoBlending\n    });\n    this.adaptLuminanceShader = {\n      defines: {\n        MIP_LEVEL_1X1: (Math.log(this.resolution) / Math.log(2)).toFixed(1)\n      },\n      uniforms: {\n        lastLum: { value: null },\n        currentLum: { value: null },\n        minLuminance: { value: 0.01 },\n        delta: { value: 0.016 },\n        tau: { value: 1 }\n      },\n      vertexShader: `varying vec2 vUv;\n\n\t\t\t\tvoid main() {\n\n\t\t\t\t\tvUv = uv;\n\t\t\t\t\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n\n\t\t\t\t}`,\n      fragmentShader: `varying vec2 vUv;\n\n\t\t\t\tuniform sampler2D lastLum;\n\t\t\t\tuniform sampler2D currentLum;\n\t\t\t\tuniform float minLuminance;\n\t\t\t\tuniform float delta;\n\t\t\t\tuniform float tau;\n\n\t\t\t\tvoid main() {\n\n\t\t\t\t\tvec4 lastLum = texture2D( lastLum, vUv, MIP_LEVEL_1X1 );\n\t\t\t\t\tvec4 currentLum = texture2D( currentLum, vUv, MIP_LEVEL_1X1 );\n\n\t\t\t\t\tfloat fLastLum = max( minLuminance, lastLum.r );\n\t\t\t\t\tfloat fCurrentLum = max( minLuminance, currentLum.r );\n\n\t\t\t\t\t//The adaption seems to work better in extreme lighting differences\n\t\t\t\t\t//if the input luminance is squared.\n\t\t\t\t\tfCurrentLum *= fCurrentLum;\n\n\t\t\t\t\t// Adapt the luminance using Pattanaik's technique\n\t\t\t\t\tfloat fAdaptedLum = fLastLum + (fCurrentLum - fLastLum) * (1.0 - exp(-delta * tau));\n\t\t\t\t\t// \"fAdaptedLum = sqrt(fAdaptedLum);\n\t\t\t\t\tgl_FragColor.r = fAdaptedLum;\n\t\t\t\t}`\n    };\n    this.materialAdaptiveLum = new ShaderMaterial({\n      uniforms: UniformsUtils.clone(this.adaptLuminanceShader.uniforms),\n      vertexShader: this.adaptLuminanceShader.vertexShader,\n      fragmentShader: this.adaptLuminanceShader.fragmentShader,\n      defines: Object.assign({}, this.adaptLuminanceShader.defines),\n      blending: NoBlending\n    });\n    this.materialToneMap = new ShaderMaterial({\n      uniforms: UniformsUtils.clone(ToneMapShader.uniforms),\n      vertexShader: ToneMapShader.vertexShader,\n      fragmentShader: ToneMapShader.fragmentShader,\n      blending: NoBlending\n    });\n    this.fsQuad = new FullScreenQuad(null);\n  }\n  render(renderer, writeBuffer, readBuffer, deltaTime) {\n    if (this.needsInit) {\n      this.reset(renderer);\n      this.luminanceRT.texture.type = readBuffer.texture.type;\n      this.previousLuminanceRT.texture.type = readBuffer.texture.type;\n      this.currentLuminanceRT.texture.type = readBuffer.texture.type;\n      this.needsInit = false;\n    }\n    if (this.adaptive) {\n      this.fsQuad.material = this.materialLuminance;\n      this.materialLuminance.uniforms.tDiffuse.value = readBuffer.texture;\n      renderer.setRenderTarget(this.currentLuminanceRT);\n      this.fsQuad.render(renderer);\n      this.fsQuad.material = this.materialAdaptiveLum;\n      this.materialAdaptiveLum.uniforms.delta.value = deltaTime;\n      this.materialAdaptiveLum.uniforms.lastLum.value = this.previousLuminanceRT.texture;\n      this.materialAdaptiveLum.uniforms.currentLum.value = this.currentLuminanceRT.texture;\n      renderer.setRenderTarget(this.luminanceRT);\n      this.fsQuad.render(renderer);\n      this.fsQuad.material = this.materialCopy;\n      this.copyUniforms.tDiffuse.value = this.luminanceRT.texture;\n      renderer.setRenderTarget(this.previousLuminanceRT);\n      this.fsQuad.render(renderer);\n    }\n    this.fsQuad.material = this.materialToneMap;\n    this.materialToneMap.uniforms.tDiffuse.value = readBuffer.texture;\n    if (this.renderToScreen) {\n      renderer.setRenderTarget(null);\n      this.fsQuad.render(renderer);\n    } else {\n      renderer.setRenderTarget(writeBuffer);\n      if (this.clear)\n        renderer.clear();\n      this.fsQuad.render(renderer);\n    }\n  }\n  reset() {\n    if (this.luminanceRT) {\n      this.luminanceRT.dispose();\n    }\n    if (this.currentLuminanceRT) {\n      this.currentLuminanceRT.dispose();\n    }\n    if (this.previousLuminanceRT) {\n      this.previousLuminanceRT.dispose();\n    }\n    this.luminanceRT = new WebGLRenderTarget(this.resolution, this.resolution);\n    this.luminanceRT.texture.name = \"AdaptiveToneMappingPass.l\";\n    this.luminanceRT.texture.generateMipmaps = false;\n    this.previousLuminanceRT = new WebGLRenderTarget(this.resolution, this.resolution);\n    this.previousLuminanceRT.texture.name = \"AdaptiveToneMappingPass.pl\";\n    this.previousLuminanceRT.texture.generateMipmaps = false;\n    const pars = { minFilter: LinearMipmapLinearFilter, generateMipmaps: true };\n    this.currentLuminanceRT = new WebGLRenderTarget(this.resolution, this.resolution, pars);\n    this.currentLuminanceRT.texture.name = \"AdaptiveToneMappingPass.cl\";\n    if (this.adaptive) {\n      this.materialToneMap.defines[\"ADAPTED_LUMINANCE\"] = \"\";\n      this.materialToneMap.uniforms.luminanceMap.value = this.luminanceRT.texture;\n    }\n    this.fsQuad.material = new MeshBasicMaterial({ color: 7829367 });\n    this.materialLuminance.needsUpdate = true;\n    this.materialAdaptiveLum.needsUpdate = true;\n    this.materialToneMap.needsUpdate = true;\n  }\n  setAdaptive(adaptive) {\n    if (adaptive) {\n      this.adaptive = true;\n      this.materialToneMap.defines[\"ADAPTED_LUMINANCE\"] = \"\";\n      this.materialToneMap.uniforms.luminanceMap.value = this.luminanceRT.texture;\n    } else {\n      this.adaptive = false;\n      delete this.materialToneMap.defines[\"ADAPTED_LUMINANCE\"];\n      this.materialToneMap.uniforms.luminanceMap.value = null;\n    }\n    this.materialToneMap.needsUpdate = true;\n  }\n  setAdaptionRate(rate) {\n    if (rate) {\n      this.materialAdaptiveLum.uniforms.tau.value = Math.abs(rate);\n    }\n  }\n  setMinLuminance(minLum) {\n    if (minLum) {\n      this.materialToneMap.uniforms.minLuminance.value = minLum;\n      this.materialAdaptiveLum.uniforms.minLuminance.value = minLum;\n    }\n  }\n  setMaxLuminance(maxLum) {\n    if (maxLum) {\n      this.materialToneMap.uniforms.maxLuminance.value = maxLum;\n    }\n  }\n  setAverageLuminance(avgLum) {\n    if (avgLum) {\n      this.materialToneMap.uniforms.averageLuminance.value = avgLum;\n    }\n  }\n  setMiddleGrey(middleGrey) {\n    if (middleGrey) {\n      this.materialToneMap.uniforms.middleGrey.value = middleGrey;\n    }\n  }\n  dispose() {\n    if (this.luminanceRT) {\n      this.luminanceRT.dispose();\n    }\n    if (this.previousLuminanceRT) {\n      this.previousLuminanceRT.dispose();\n    }\n    if (this.currentLuminanceRT) {\n      this.currentLuminanceRT.dispose();\n    }\n    if (this.materialLuminance) {\n      this.materialLuminance.dispose();\n    }\n    if (this.materialAdaptiveLum) {\n      this.materialAdaptiveLum.dispose();\n    }\n    if (this.materialCopy) {\n      this.materialCopy.dispose();\n    }\n    if (this.materialToneMap) {\n      this.materialToneMap.dispose();\n    }\n  }\n}\nexport {\n  AdaptiveToneMappingPass\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}