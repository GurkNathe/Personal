{"ast":null,"code":"var __defProp = Object.defineProperty;\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value\n}) : obj[key] = value;\nvar __publicField = (obj, key, value) => {\n  __defNormalProp(obj, typeof key !== \"symbol\" ? key + \"\" : key, value);\n  return value;\n};\nimport { BufferGeometry, Vector3, Uint32BufferAttribute, Float32BufferAttribute, DynamicDrawUsage, MathUtils } from \"three\";\nimport { SimplexNoise } from \"../math/SimplexNoise.js\";\nconst _LightningStrike = class extends BufferGeometry {\n  constructor() {\n    let rayParameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    super();\n    this.isLightningStrike = true;\n    this.type = \"LightningStrike\";\n    this.init(_LightningStrike.copyParameters(rayParameters, rayParameters));\n    this.createMesh();\n  }\n  static createRandomGenerator() {\n    const numSeeds = 2053;\n    const seeds = [];\n    for (let i = 0; i < numSeeds; i++) {\n      seeds.push(Math.random());\n    }\n    const generator = {\n      currentSeed: 0,\n      random: function () {\n        const value = seeds[generator.currentSeed];\n        generator.currentSeed = (generator.currentSeed + 1) % numSeeds;\n        return value;\n      },\n      getSeed: function () {\n        return generator.currentSeed / numSeeds;\n      },\n      setSeed: function (seed) {\n        generator.currentSeed = Math.floor(seed * numSeeds) % numSeeds;\n      }\n    };\n    return generator;\n  }\n  static copyParameters() {\n    let dest = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    let source = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    const vecCopy = function (v) {\n      if (source === dest) {\n        return v;\n      } else {\n        return v.clone();\n      }\n    };\n    dest.sourceOffset = source.sourceOffset !== void 0 ? vecCopy(source.sourceOffset) : new Vector3(0, 100, 0), dest.destOffset = source.destOffset !== void 0 ? vecCopy(source.destOffset) : new Vector3(0, 0, 0), dest.timeScale = source.timeScale !== void 0 ? source.timeScale : 1, dest.roughness = source.roughness !== void 0 ? source.roughness : 0.9, dest.straightness = source.straightness !== void 0 ? source.straightness : 0.7, dest.up0 = source.up0 !== void 0 ? vecCopy(source.up0) : new Vector3(0, 0, 1);\n    dest.up1 = source.up1 !== void 0 ? vecCopy(source.up1) : new Vector3(0, 0, 1), dest.radius0 = source.radius0 !== void 0 ? source.radius0 : 1, dest.radius1 = source.radius1 !== void 0 ? source.radius1 : 1, dest.radius0Factor = source.radius0Factor !== void 0 ? source.radius0Factor : 0.5, dest.radius1Factor = source.radius1Factor !== void 0 ? source.radius1Factor : 0.2, dest.minRadius = source.minRadius !== void 0 ? source.minRadius : 0.2,\n    // These parameters should not be changed after lightning creation. They can be changed but the ray will change its form abruptly:\n    dest.isEternal = source.isEternal !== void 0 ? source.isEternal : source.birthTime === void 0 || source.deathTime === void 0, dest.birthTime = source.birthTime, dest.deathTime = source.deathTime, dest.propagationTimeFactor = source.propagationTimeFactor !== void 0 ? source.propagationTimeFactor : 0.1, dest.vanishingTimeFactor = source.vanishingTimeFactor !== void 0 ? source.vanishingTimeFactor : 0.9, dest.subrayPeriod = source.subrayPeriod !== void 0 ? source.subrayPeriod : 4, dest.subrayDutyCycle = source.subrayDutyCycle !== void 0 ? source.subrayDutyCycle : 0.6;\n    dest.maxIterations = source.maxIterations !== void 0 ? source.maxIterations : 9;\n    dest.isStatic = source.isStatic !== void 0 ? source.isStatic : false;\n    dest.ramification = source.ramification !== void 0 ? source.ramification : 5;\n    dest.maxSubrayRecursion = source.maxSubrayRecursion !== void 0 ? source.maxSubrayRecursion : 3;\n    dest.recursionProbability = source.recursionProbability !== void 0 ? source.recursionProbability : 0.6;\n    dest.generateUVs = source.generateUVs !== void 0 ? source.generateUVs : false;\n    dest.randomGenerator = source.randomGenerator, dest.noiseSeed = source.noiseSeed, dest.onDecideSubrayCreation = source.onDecideSubrayCreation, dest.onSubrayCreation = source.onSubrayCreation;\n    return dest;\n  }\n  update(time) {\n    if (this.isStatic) return;\n    if (this.rayParameters.isEternal || this.rayParameters.birthTime <= time && time <= this.rayParameters.deathTime) {\n      this.updateMesh(time);\n      if (time < this.subrays[0].endPropagationTime) {\n        this.state = _LightningStrike.RAY_PROPAGATING;\n      } else if (time > this.subrays[0].beginVanishingTime) {\n        this.state = _LightningStrike.RAY_VANISHING;\n      } else {\n        this.state = _LightningStrike.RAY_STEADY;\n      }\n      this.visible = true;\n    } else {\n      this.visible = false;\n      if (time < this.rayParameters.birthTime) {\n        this.state = _LightningStrike.RAY_UNBORN;\n      } else {\n        this.state = _LightningStrike.RAY_EXTINGUISHED;\n      }\n    }\n  }\n  init(rayParameters) {\n    this.rayParameters = rayParameters;\n    this.maxIterations = rayParameters.maxIterations !== void 0 ? Math.floor(rayParameters.maxIterations) : 9;\n    rayParameters.maxIterations = this.maxIterations;\n    this.isStatic = rayParameters.isStatic !== void 0 ? rayParameters.isStatic : false;\n    rayParameters.isStatic = this.isStatic;\n    this.ramification = rayParameters.ramification !== void 0 ? Math.floor(rayParameters.ramification) : 5;\n    rayParameters.ramification = this.ramification;\n    this.maxSubrayRecursion = rayParameters.maxSubrayRecursion !== void 0 ? Math.floor(rayParameters.maxSubrayRecursion) : 3;\n    rayParameters.maxSubrayRecursion = this.maxSubrayRecursion;\n    this.recursionProbability = rayParameters.recursionProbability !== void 0 ? rayParameters.recursionProbability : 0.6;\n    rayParameters.recursionProbability = this.recursionProbability;\n    this.generateUVs = rayParameters.generateUVs !== void 0 ? rayParameters.generateUVs : false;\n    rayParameters.generateUVs = this.generateUVs;\n    if (rayParameters.randomGenerator !== void 0) {\n      this.randomGenerator = rayParameters.randomGenerator;\n      this.seedGenerator = rayParameters.randomGenerator;\n      if (rayParameters.noiseSeed !== void 0) {\n        this.seedGenerator.setSeed(rayParameters.noiseSeed);\n      }\n    } else {\n      this.randomGenerator = _LightningStrike.createRandomGenerator();\n      this.seedGenerator = Math;\n    }\n    if (rayParameters.onDecideSubrayCreation !== void 0) {\n      this.onDecideSubrayCreation = rayParameters.onDecideSubrayCreation;\n    } else {\n      this.createDefaultSubrayCreationCallbacks();\n      if (rayParameters.onSubrayCreation !== void 0) {\n        this.onSubrayCreation = rayParameters.onSubrayCreation;\n      }\n    }\n    this.state = _LightningStrike.RAY_INITIALIZED;\n    this.maxSubrays = Math.ceil(1 + Math.pow(this.ramification, Math.max(0, this.maxSubrayRecursion - 1)));\n    rayParameters.maxSubrays = this.maxSubrays;\n    this.maxRaySegments = 2 * (1 << this.maxIterations);\n    this.subrays = [];\n    for (let i = 0; i < this.maxSubrays; i++) {\n      this.subrays.push(this.createSubray());\n    }\n    this.raySegments = [];\n    for (let i = 0; i < this.maxRaySegments; i++) {\n      this.raySegments.push(this.createSegment());\n    }\n    this.time = 0;\n    this.timeFraction = 0;\n    this.currentSegmentCallback = null;\n    this.currentCreateTriangleVertices = this.generateUVs ? this.createTriangleVerticesWithUVs : this.createTriangleVerticesWithoutUVs;\n    this.numSubrays = 0;\n    this.currentSubray = null;\n    this.currentSegmentIndex = 0;\n    this.isInitialSegment = false;\n    this.subrayProbability = 0;\n    this.currentVertex = 0;\n    this.currentIndex = 0;\n    this.currentCoordinate = 0;\n    this.currentUVCoordinate = 0;\n    this.vertices = null;\n    this.uvs = null;\n    this.indices = null;\n    this.positionAttribute = null;\n    this.uvsAttribute = null;\n    this.simplexX = new SimplexNoise(this.seedGenerator);\n    this.simplexY = new SimplexNoise(this.seedGenerator);\n    this.simplexZ = new SimplexNoise(this.seedGenerator);\n    this.forwards = new Vector3();\n    this.forwardsFill = new Vector3();\n    this.side = new Vector3();\n    this.down = new Vector3();\n    this.middlePos = new Vector3();\n    this.middleLinPos = new Vector3();\n    this.newPos = new Vector3();\n    this.vPos = new Vector3();\n    this.cross1 = new Vector3();\n  }\n  createMesh() {\n    const maxDrawableSegmentsPerSubRay = 1 << this.maxIterations;\n    const maxVerts = 3 * (maxDrawableSegmentsPerSubRay + 1) * this.maxSubrays;\n    const maxIndices = 18 * maxDrawableSegmentsPerSubRay * this.maxSubrays;\n    this.vertices = new Float32Array(maxVerts * 3);\n    this.indices = new Uint32Array(maxIndices);\n    if (this.generateUVs) {\n      this.uvs = new Float32Array(maxVerts * 2);\n    }\n    this.fillMesh(0);\n    this.setIndex(new Uint32BufferAttribute(this.indices, 1));\n    this.positionAttribute = new Float32BufferAttribute(this.vertices, 3);\n    this.setAttribute(\"position\", this.positionAttribute);\n    if (this.generateUVs) {\n      this.uvsAttribute = new Float32BufferAttribute(new Float32Array(this.uvs), 2);\n      this.setAttribute(\"uv\", this.uvsAttribute);\n    }\n    if (!this.isStatic) {\n      this.index.usage = DynamicDrawUsage;\n      this.positionAttribute.usage = DynamicDrawUsage;\n      if (this.generateUVs) {\n        this.uvsAttribute.usage = DynamicDrawUsage;\n      }\n    }\n    this.vertices = this.positionAttribute.array;\n    this.indices = this.index.array;\n    if (this.generateUVs) {\n      this.uvs = this.uvsAttribute.array;\n    }\n  }\n  updateMesh(time) {\n    this.fillMesh(time);\n    this.drawRange.count = this.currentIndex;\n    this.index.needsUpdate = true;\n    this.positionAttribute.needsUpdate = true;\n    if (this.generateUVs) {\n      this.uvsAttribute.needsUpdate = true;\n    }\n  }\n  fillMesh(time) {\n    const scope = this;\n    this.currentVertex = 0;\n    this.currentIndex = 0;\n    this.currentCoordinate = 0;\n    this.currentUVCoordinate = 0;\n    this.fractalRay(time, function fillVertices(segment) {\n      const subray = scope.currentSubray;\n      if (time < subray.birthTime) {\n        return;\n      } else if (this.rayParameters.isEternal && scope.currentSubray.recursion == 0) {\n        scope.createPrism(segment);\n        scope.onDecideSubrayCreation(segment, scope);\n      } else if (time < subray.endPropagationTime) {\n        if (scope.timeFraction >= segment.fraction0 * subray.propagationTimeFactor) {\n          scope.createPrism(segment);\n          scope.onDecideSubrayCreation(segment, scope);\n        }\n      } else if (time < subray.beginVanishingTime) {\n        scope.createPrism(segment);\n        scope.onDecideSubrayCreation(segment, scope);\n      } else {\n        if (scope.timeFraction <= subray.vanishingTimeFactor + segment.fraction1 * (1 - subray.vanishingTimeFactor)) {\n          scope.createPrism(segment);\n        }\n        scope.onDecideSubrayCreation(segment, scope);\n      }\n    });\n  }\n  addNewSubray() {\n    return this.subrays[this.numSubrays++];\n  }\n  initSubray(subray, rayParameters) {\n    subray.pos0.copy(rayParameters.sourceOffset);\n    subray.pos1.copy(rayParameters.destOffset);\n    subray.up0.copy(rayParameters.up0);\n    subray.up1.copy(rayParameters.up1);\n    subray.radius0 = rayParameters.radius0;\n    subray.radius1 = rayParameters.radius1;\n    subray.birthTime = rayParameters.birthTime;\n    subray.deathTime = rayParameters.deathTime;\n    subray.timeScale = rayParameters.timeScale;\n    subray.roughness = rayParameters.roughness;\n    subray.straightness = rayParameters.straightness;\n    subray.propagationTimeFactor = rayParameters.propagationTimeFactor;\n    subray.vanishingTimeFactor = rayParameters.vanishingTimeFactor;\n    subray.maxIterations = this.maxIterations;\n    subray.seed = rayParameters.noiseSeed !== void 0 ? rayParameters.noiseSeed : 0;\n    subray.recursion = 0;\n  }\n  fractalRay(time, segmentCallback) {\n    this.time = time;\n    this.currentSegmentCallback = segmentCallback;\n    this.numSubrays = 0;\n    this.initSubray(this.addNewSubray(), this.rayParameters);\n    for (let subrayIndex = 0; subrayIndex < this.numSubrays; subrayIndex++) {\n      const subray = this.subrays[subrayIndex];\n      this.currentSubray = subray;\n      this.randomGenerator.setSeed(subray.seed);\n      subray.endPropagationTime = MathUtils.lerp(subray.birthTime, subray.deathTime, subray.propagationTimeFactor);\n      subray.beginVanishingTime = MathUtils.lerp(subray.deathTime, subray.birthTime, 1 - subray.vanishingTimeFactor);\n      const random1 = this.randomGenerator.random;\n      subray.linPos0.set(random1(), random1(), random1()).multiplyScalar(1e3);\n      subray.linPos1.set(random1(), random1(), random1()).multiplyScalar(1e3);\n      this.timeFraction = (time - subray.birthTime) / (subray.deathTime - subray.birthTime);\n      this.currentSegmentIndex = 0;\n      this.isInitialSegment = true;\n      const segment = this.getNewSegment();\n      segment.iteration = 0;\n      segment.pos0.copy(subray.pos0);\n      segment.pos1.copy(subray.pos1);\n      segment.linPos0.copy(subray.linPos0);\n      segment.linPos1.copy(subray.linPos1);\n      segment.up0.copy(subray.up0);\n      segment.up1.copy(subray.up1);\n      segment.radius0 = subray.radius0;\n      segment.radius1 = subray.radius1;\n      segment.fraction0 = 0;\n      segment.fraction1 = 1;\n      segment.positionVariationFactor = 1 - subray.straightness;\n      this.subrayProbability = this.ramification * Math.pow(this.recursionProbability, subray.recursion) / (1 << subray.maxIterations);\n      this.fractalRayRecursive(segment);\n    }\n    this.currentSegmentCallback = null;\n    this.currentSubray = null;\n  }\n  fractalRayRecursive(segment) {\n    if (segment.iteration >= this.currentSubray.maxIterations) {\n      this.currentSegmentCallback(segment);\n      return;\n    }\n    this.forwards.subVectors(segment.pos1, segment.pos0);\n    let lForwards = this.forwards.length();\n    if (lForwards < 1e-6) {\n      this.forwards.set(0, 0, 0.01);\n      lForwards = this.forwards.length();\n    }\n    const middleRadius = (segment.radius0 + segment.radius1) * 0.5;\n    const middleFraction = (segment.fraction0 + segment.fraction1) * 0.5;\n    const timeDimension = this.time * this.currentSubray.timeScale * Math.pow(2, segment.iteration);\n    this.middlePos.lerpVectors(segment.pos0, segment.pos1, 0.5);\n    this.middleLinPos.lerpVectors(segment.linPos0, segment.linPos1, 0.5);\n    const p = this.middleLinPos;\n    this.newPos.set(this.simplexX.noise4d(p.x, p.y, p.z, timeDimension), this.simplexY.noise4d(p.x, p.y, p.z, timeDimension), this.simplexZ.noise4d(p.x, p.y, p.z, timeDimension));\n    this.newPos.multiplyScalar(segment.positionVariationFactor * lForwards);\n    this.newPos.add(this.middlePos);\n    const newSegment1 = this.getNewSegment();\n    newSegment1.pos0.copy(segment.pos0);\n    newSegment1.pos1.copy(this.newPos);\n    newSegment1.linPos0.copy(segment.linPos0);\n    newSegment1.linPos1.copy(this.middleLinPos);\n    newSegment1.up0.copy(segment.up0);\n    newSegment1.up1.copy(segment.up1);\n    newSegment1.radius0 = segment.radius0;\n    newSegment1.radius1 = middleRadius;\n    newSegment1.fraction0 = segment.fraction0;\n    newSegment1.fraction1 = middleFraction;\n    newSegment1.positionVariationFactor = segment.positionVariationFactor * this.currentSubray.roughness;\n    newSegment1.iteration = segment.iteration + 1;\n    const newSegment2 = this.getNewSegment();\n    newSegment2.pos0.copy(this.newPos);\n    newSegment2.pos1.copy(segment.pos1);\n    newSegment2.linPos0.copy(this.middleLinPos);\n    newSegment2.linPos1.copy(segment.linPos1);\n    this.cross1.crossVectors(segment.up0, this.forwards.normalize());\n    newSegment2.up0.crossVectors(this.forwards, this.cross1).normalize();\n    newSegment2.up1.copy(segment.up1);\n    newSegment2.radius0 = middleRadius;\n    newSegment2.radius1 = segment.radius1;\n    newSegment2.fraction0 = middleFraction;\n    newSegment2.fraction1 = segment.fraction1;\n    newSegment2.positionVariationFactor = segment.positionVariationFactor * this.currentSubray.roughness;\n    newSegment2.iteration = segment.iteration + 1;\n    this.fractalRayRecursive(newSegment1);\n    this.fractalRayRecursive(newSegment2);\n  }\n  createPrism(segment) {\n    this.forwardsFill.subVectors(segment.pos1, segment.pos0).normalize();\n    if (this.isInitialSegment) {\n      this.currentCreateTriangleVertices(segment.pos0, segment.up0, this.forwardsFill, segment.radius0, 0);\n      this.isInitialSegment = false;\n    }\n    this.currentCreateTriangleVertices(segment.pos1, segment.up0, this.forwardsFill, segment.radius1, segment.fraction1);\n    this.createPrismFaces();\n  }\n  createTriangleVerticesWithoutUVs(pos, up, forwards, radius) {\n    this.side.crossVectors(up, forwards).multiplyScalar(radius * _LightningStrike.COS30DEG);\n    this.down.copy(up).multiplyScalar(-radius * _LightningStrike.SIN30DEG);\n    const p = this.vPos;\n    const v = this.vertices;\n    p.copy(pos).sub(this.side).add(this.down);\n    v[this.currentCoordinate++] = p.x;\n    v[this.currentCoordinate++] = p.y;\n    v[this.currentCoordinate++] = p.z;\n    p.copy(pos).add(this.side).add(this.down);\n    v[this.currentCoordinate++] = p.x;\n    v[this.currentCoordinate++] = p.y;\n    v[this.currentCoordinate++] = p.z;\n    p.copy(up).multiplyScalar(radius).add(pos);\n    v[this.currentCoordinate++] = p.x;\n    v[this.currentCoordinate++] = p.y;\n    v[this.currentCoordinate++] = p.z;\n    this.currentVertex += 3;\n  }\n  createTriangleVerticesWithUVs(pos, up, forwards, radius, u) {\n    this.side.crossVectors(up, forwards).multiplyScalar(radius * _LightningStrike.COS30DEG);\n    this.down.copy(up).multiplyScalar(-radius * _LightningStrike.SIN30DEG);\n    const p = this.vPos;\n    const v = this.vertices;\n    const uv = this.uvs;\n    p.copy(pos).sub(this.side).add(this.down);\n    v[this.currentCoordinate++] = p.x;\n    v[this.currentCoordinate++] = p.y;\n    v[this.currentCoordinate++] = p.z;\n    uv[this.currentUVCoordinate++] = u;\n    uv[this.currentUVCoordinate++] = 0;\n    p.copy(pos).add(this.side).add(this.down);\n    v[this.currentCoordinate++] = p.x;\n    v[this.currentCoordinate++] = p.y;\n    v[this.currentCoordinate++] = p.z;\n    uv[this.currentUVCoordinate++] = u;\n    uv[this.currentUVCoordinate++] = 0.5;\n    p.copy(up).multiplyScalar(radius).add(pos);\n    v[this.currentCoordinate++] = p.x;\n    v[this.currentCoordinate++] = p.y;\n    v[this.currentCoordinate++] = p.z;\n    uv[this.currentUVCoordinate++] = u;\n    uv[this.currentUVCoordinate++] = 1;\n    this.currentVertex += 3;\n  }\n  createPrismFaces(vertex) {\n    const indices = this.indices;\n    vertex = this.currentVertex - 6;\n    indices[this.currentIndex++] = vertex + 1;\n    indices[this.currentIndex++] = vertex + 2;\n    indices[this.currentIndex++] = vertex + 5;\n    indices[this.currentIndex++] = vertex + 1;\n    indices[this.currentIndex++] = vertex + 5;\n    indices[this.currentIndex++] = vertex + 4;\n    indices[this.currentIndex++] = vertex + 0;\n    indices[this.currentIndex++] = vertex + 1;\n    indices[this.currentIndex++] = vertex + 4;\n    indices[this.currentIndex++] = vertex + 0;\n    indices[this.currentIndex++] = vertex + 4;\n    indices[this.currentIndex++] = vertex + 3;\n    indices[this.currentIndex++] = vertex + 2;\n    indices[this.currentIndex++] = vertex + 0;\n    indices[this.currentIndex++] = vertex + 3;\n    indices[this.currentIndex++] = vertex + 2;\n    indices[this.currentIndex++] = vertex + 3;\n    indices[this.currentIndex++] = vertex + 5;\n  }\n  createDefaultSubrayCreationCallbacks() {\n    const random1 = this.randomGenerator.random;\n    this.onDecideSubrayCreation = function (segment, lightningStrike) {\n      const subray = lightningStrike.currentSubray;\n      const period = lightningStrike.rayParameters.subrayPeriod;\n      const dutyCycle = lightningStrike.rayParameters.subrayDutyCycle;\n      const phase0 = lightningStrike.rayParameters.isEternal && subray.recursion == 0 ? -random1() * period : MathUtils.lerp(subray.birthTime, subray.endPropagationTime, segment.fraction0) - random1() * period;\n      const phase = lightningStrike.time - phase0;\n      const currentCycle = Math.floor(phase / period);\n      const childSubraySeed = random1() * (currentCycle + 1);\n      const isActive = phase % period <= dutyCycle * period;\n      let probability = 0;\n      if (isActive) {\n        probability = lightningStrike.subrayProbability;\n      }\n      if (subray.recursion < lightningStrike.maxSubrayRecursion && lightningStrike.numSubrays < lightningStrike.maxSubrays && random1() < probability) {\n        const childSubray = lightningStrike.addNewSubray();\n        const parentSeed = lightningStrike.randomGenerator.getSeed();\n        childSubray.seed = childSubraySeed;\n        lightningStrike.randomGenerator.setSeed(childSubraySeed);\n        childSubray.recursion = subray.recursion + 1;\n        childSubray.maxIterations = Math.max(1, subray.maxIterations - 1);\n        childSubray.linPos0.set(random1(), random1(), random1()).multiplyScalar(1e3);\n        childSubray.linPos1.set(random1(), random1(), random1()).multiplyScalar(1e3);\n        childSubray.up0.copy(subray.up0);\n        childSubray.up1.copy(subray.up1);\n        childSubray.radius0 = segment.radius0 * lightningStrike.rayParameters.radius0Factor;\n        childSubray.radius1 = Math.min(lightningStrike.rayParameters.minRadius, segment.radius1 * lightningStrike.rayParameters.radius1Factor);\n        childSubray.birthTime = phase0 + currentCycle * period;\n        childSubray.deathTime = childSubray.birthTime + period * dutyCycle;\n        if (!lightningStrike.rayParameters.isEternal && subray.recursion == 0) {\n          childSubray.birthTime = Math.max(childSubray.birthTime, subray.birthTime);\n          childSubray.deathTime = Math.min(childSubray.deathTime, subray.deathTime);\n        }\n        childSubray.timeScale = subray.timeScale * 2;\n        childSubray.roughness = subray.roughness;\n        childSubray.straightness = subray.straightness;\n        childSubray.propagationTimeFactor = subray.propagationTimeFactor;\n        childSubray.vanishingTimeFactor = subray.vanishingTimeFactor;\n        lightningStrike.onSubrayCreation(segment, subray, childSubray, lightningStrike);\n        lightningStrike.randomGenerator.setSeed(parentSeed);\n      }\n    };\n    const vec1Pos = new Vector3();\n    const vec2Forward = new Vector3();\n    const vec3Side = new Vector3();\n    const vec4Up = new Vector3();\n    this.onSubrayCreation = function (segment, parentSubray, childSubray, lightningStrike) {\n      lightningStrike.subrayCylinderPosition(segment, parentSubray, childSubray, 0.5, 0.6, 0.2);\n    };\n    this.subrayConePosition = function (segment, parentSubray, childSubray, heightFactor, sideWidthFactor, minSideWidthFactor) {\n      childSubray.pos0.copy(segment.pos0);\n      vec1Pos.subVectors(parentSubray.pos1, parentSubray.pos0);\n      vec2Forward.copy(vec1Pos).normalize();\n      vec1Pos.multiplyScalar(segment.fraction0 + (1 - segment.fraction0) * (random1() * heightFactor));\n      const length = vec1Pos.length();\n      vec3Side.crossVectors(parentSubray.up0, vec2Forward);\n      const angle = 2 * Math.PI * random1();\n      vec3Side.multiplyScalar(Math.cos(angle));\n      vec4Up.copy(parentSubray.up0).multiplyScalar(Math.sin(angle));\n      childSubray.pos1.copy(vec3Side).add(vec4Up).multiplyScalar(length * sideWidthFactor * (minSideWidthFactor + random1() * (1 - minSideWidthFactor))).add(vec1Pos).add(parentSubray.pos0);\n    };\n    this.subrayCylinderPosition = function (segment, parentSubray, childSubray, heightFactor, sideWidthFactor, minSideWidthFactor) {\n      childSubray.pos0.copy(segment.pos0);\n      vec1Pos.subVectors(parentSubray.pos1, parentSubray.pos0);\n      vec2Forward.copy(vec1Pos).normalize();\n      vec1Pos.multiplyScalar(segment.fraction0 + (1 - segment.fraction0) * ((2 * random1() - 1) * heightFactor));\n      const length = vec1Pos.length();\n      vec3Side.crossVectors(parentSubray.up0, vec2Forward);\n      const angle = 2 * Math.PI * random1();\n      vec3Side.multiplyScalar(Math.cos(angle));\n      vec4Up.copy(parentSubray.up0).multiplyScalar(Math.sin(angle));\n      childSubray.pos1.copy(vec3Side).add(vec4Up).multiplyScalar(length * sideWidthFactor * (minSideWidthFactor + random1() * (1 - minSideWidthFactor))).add(vec1Pos).add(parentSubray.pos0);\n    };\n  }\n  createSubray() {\n    return {\n      seed: 0,\n      maxIterations: 0,\n      recursion: 0,\n      pos0: new Vector3(),\n      pos1: new Vector3(),\n      linPos0: new Vector3(),\n      linPos1: new Vector3(),\n      up0: new Vector3(),\n      up1: new Vector3(),\n      radius0: 0,\n      radius1: 0,\n      birthTime: 0,\n      deathTime: 0,\n      timeScale: 0,\n      roughness: 0,\n      straightness: 0,\n      propagationTimeFactor: 0,\n      vanishingTimeFactor: 0,\n      endPropagationTime: 0,\n      beginVanishingTime: 0\n    };\n  }\n  createSegment() {\n    return {\n      iteration: 0,\n      pos0: new Vector3(),\n      pos1: new Vector3(),\n      linPos0: new Vector3(),\n      linPos1: new Vector3(),\n      up0: new Vector3(),\n      up1: new Vector3(),\n      radius0: 0,\n      radius1: 0,\n      fraction0: 0,\n      fraction1: 0,\n      positionVariationFactor: 0\n    };\n  }\n  getNewSegment() {\n    return this.raySegments[this.currentSegmentIndex++];\n  }\n  copy(source) {\n    super.copy(source);\n    this.init(_LightningStrike.copyParameters({}, source.rayParameters));\n    return this;\n  }\n  clone() {\n    return new this.constructor(_LightningStrike.copyParameters({}, this.rayParameters));\n  }\n};\nlet LightningStrike = _LightningStrike;\n// Ray states\n__publicField(LightningStrike, \"RAY_INITIALIZED\", 0);\n__publicField(LightningStrike, \"RAY_UNBORN\", 1);\n__publicField(LightningStrike, \"RAY_PROPAGATING\", 2);\n__publicField(LightningStrike, \"RAY_STEADY\", 3);\n__publicField(LightningStrike, \"RAY_VANISHING\", 4);\n__publicField(LightningStrike, \"RAY_EXTINGUISHED\", 5);\n__publicField(LightningStrike, \"COS30DEG\", Math.cos(30 * Math.PI / 180));\n__publicField(LightningStrike, \"SIN30DEG\", Math.sin(30 * Math.PI / 180));\nexport { LightningStrike };","map":{"version":3,"names":["__defProp","Object","defineProperty","__defNormalProp","obj","key","value","enumerable","configurable","writable","__publicField","BufferGeometry","Vector3","Uint32BufferAttribute","Float32BufferAttribute","DynamicDrawUsage","MathUtils","SimplexNoise","_LightningStrike","constructor","rayParameters","arguments","length","undefined","isLightningStrike","type","init","copyParameters","createMesh","createRandomGenerator","numSeeds","seeds","i","push","Math","random","generator","currentSeed","getSeed","setSeed","seed","floor","dest","source","vecCopy","v","clone","sourceOffset","destOffset","timeScale","roughness","straightness","up0","up1","radius0","radius1","radius0Factor","radius1Factor","minRadius","isEternal","birthTime","deathTime","propagationTimeFactor","vanishingTimeFactor","subrayPeriod","subrayDutyCycle","maxIterations","isStatic","ramification","maxSubrayRecursion","recursionProbability","generateUVs","randomGenerator","noiseSeed","onDecideSubrayCreation","onSubrayCreation","update","time","updateMesh","subrays","endPropagationTime","state","RAY_PROPAGATING","beginVanishingTime","RAY_VANISHING","RAY_STEADY","visible","RAY_UNBORN","RAY_EXTINGUISHED","seedGenerator","createDefaultSubrayCreationCallbacks","RAY_INITIALIZED","maxSubrays","ceil","pow","max","maxRaySegments","createSubray","raySegments","createSegment","timeFraction","currentSegmentCallback","currentCreateTriangleVertices","createTriangleVerticesWithUVs","createTriangleVerticesWithoutUVs","numSubrays","currentSubray","currentSegmentIndex","isInitialSegment","subrayProbability","currentVertex","currentIndex","currentCoordinate","currentUVCoordinate","vertices","uvs","indices","positionAttribute","uvsAttribute","simplexX","simplexY","simplexZ","forwards","forwardsFill","side","down","middlePos","middleLinPos","newPos","vPos","cross1","maxDrawableSegmentsPerSubRay","maxVerts","maxIndices","Float32Array","Uint32Array","fillMesh","setIndex","setAttribute","index","usage","array","drawRange","count","needsUpdate","scope","fractalRay","fillVertices","segment","subray","recursion","createPrism","fraction0","fraction1","addNewSubray","initSubray","pos0","copy","pos1","segmentCallback","subrayIndex","lerp","random1","linPos0","set","multiplyScalar","linPos1","getNewSegment","iteration","positionVariationFactor","fractalRayRecursive","subVectors","lForwards","middleRadius","middleFraction","timeDimension","lerpVectors","p","noise4d","x","y","z","add","newSegment1","newSegment2","crossVectors","normalize","createPrismFaces","pos","up","radius","COS30DEG","SIN30DEG","sub","u","uv","vertex","lightningStrike","period","dutyCycle","phase0","phase","currentCycle","childSubraySeed","isActive","probability","childSubray","parentSeed","min","vec1Pos","vec2Forward","vec3Side","vec4Up","parentSubray","subrayCylinderPosition","subrayConePosition","heightFactor","sideWidthFactor","minSideWidthFactor","angle","PI","cos","sin","LightningStrike"],"sources":["/home/krug/Coding/JavaScript/Websites/Personal/personal/node_modules/.pnpm/three-stdlib@2.23.7_three@0.151.3/node_modules/three-stdlib/geometries/LightningStrike.js"],"sourcesContent":["var __defProp = Object.defineProperty;\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;\nvar __publicField = (obj, key, value) => {\n  __defNormalProp(obj, typeof key !== \"symbol\" ? key + \"\" : key, value);\n  return value;\n};\nimport { BufferGeometry, Vector3, Uint32BufferAttribute, Float32BufferAttribute, DynamicDrawUsage, MathUtils } from \"three\";\nimport { SimplexNoise } from \"../math/SimplexNoise.js\";\nconst _LightningStrike = class extends BufferGeometry {\n  constructor(rayParameters = {}) {\n    super();\n    this.isLightningStrike = true;\n    this.type = \"LightningStrike\";\n    this.init(_LightningStrike.copyParameters(rayParameters, rayParameters));\n    this.createMesh();\n  }\n  static createRandomGenerator() {\n    const numSeeds = 2053;\n    const seeds = [];\n    for (let i = 0; i < numSeeds; i++) {\n      seeds.push(Math.random());\n    }\n    const generator = {\n      currentSeed: 0,\n      random: function() {\n        const value = seeds[generator.currentSeed];\n        generator.currentSeed = (generator.currentSeed + 1) % numSeeds;\n        return value;\n      },\n      getSeed: function() {\n        return generator.currentSeed / numSeeds;\n      },\n      setSeed: function(seed) {\n        generator.currentSeed = Math.floor(seed * numSeeds) % numSeeds;\n      }\n    };\n    return generator;\n  }\n  static copyParameters(dest = {}, source = {}) {\n    const vecCopy = function(v) {\n      if (source === dest) {\n        return v;\n      } else {\n        return v.clone();\n      }\n    };\n    dest.sourceOffset = source.sourceOffset !== void 0 ? vecCopy(source.sourceOffset) : new Vector3(0, 100, 0), dest.destOffset = source.destOffset !== void 0 ? vecCopy(source.destOffset) : new Vector3(0, 0, 0), dest.timeScale = source.timeScale !== void 0 ? source.timeScale : 1, dest.roughness = source.roughness !== void 0 ? source.roughness : 0.9, dest.straightness = source.straightness !== void 0 ? source.straightness : 0.7, dest.up0 = source.up0 !== void 0 ? vecCopy(source.up0) : new Vector3(0, 0, 1);\n    dest.up1 = source.up1 !== void 0 ? vecCopy(source.up1) : new Vector3(0, 0, 1), dest.radius0 = source.radius0 !== void 0 ? source.radius0 : 1, dest.radius1 = source.radius1 !== void 0 ? source.radius1 : 1, dest.radius0Factor = source.radius0Factor !== void 0 ? source.radius0Factor : 0.5, dest.radius1Factor = source.radius1Factor !== void 0 ? source.radius1Factor : 0.2, dest.minRadius = source.minRadius !== void 0 ? source.minRadius : 0.2, // These parameters should not be changed after lightning creation. They can be changed but the ray will change its form abruptly:\n    dest.isEternal = source.isEternal !== void 0 ? source.isEternal : source.birthTime === void 0 || source.deathTime === void 0, dest.birthTime = source.birthTime, dest.deathTime = source.deathTime, dest.propagationTimeFactor = source.propagationTimeFactor !== void 0 ? source.propagationTimeFactor : 0.1, dest.vanishingTimeFactor = source.vanishingTimeFactor !== void 0 ? source.vanishingTimeFactor : 0.9, dest.subrayPeriod = source.subrayPeriod !== void 0 ? source.subrayPeriod : 4, dest.subrayDutyCycle = source.subrayDutyCycle !== void 0 ? source.subrayDutyCycle : 0.6;\n    dest.maxIterations = source.maxIterations !== void 0 ? source.maxIterations : 9;\n    dest.isStatic = source.isStatic !== void 0 ? source.isStatic : false;\n    dest.ramification = source.ramification !== void 0 ? source.ramification : 5;\n    dest.maxSubrayRecursion = source.maxSubrayRecursion !== void 0 ? source.maxSubrayRecursion : 3;\n    dest.recursionProbability = source.recursionProbability !== void 0 ? source.recursionProbability : 0.6;\n    dest.generateUVs = source.generateUVs !== void 0 ? source.generateUVs : false;\n    dest.randomGenerator = source.randomGenerator, dest.noiseSeed = source.noiseSeed, dest.onDecideSubrayCreation = source.onDecideSubrayCreation, dest.onSubrayCreation = source.onSubrayCreation;\n    return dest;\n  }\n  update(time) {\n    if (this.isStatic)\n      return;\n    if (this.rayParameters.isEternal || this.rayParameters.birthTime <= time && time <= this.rayParameters.deathTime) {\n      this.updateMesh(time);\n      if (time < this.subrays[0].endPropagationTime) {\n        this.state = _LightningStrike.RAY_PROPAGATING;\n      } else if (time > this.subrays[0].beginVanishingTime) {\n        this.state = _LightningStrike.RAY_VANISHING;\n      } else {\n        this.state = _LightningStrike.RAY_STEADY;\n      }\n      this.visible = true;\n    } else {\n      this.visible = false;\n      if (time < this.rayParameters.birthTime) {\n        this.state = _LightningStrike.RAY_UNBORN;\n      } else {\n        this.state = _LightningStrike.RAY_EXTINGUISHED;\n      }\n    }\n  }\n  init(rayParameters) {\n    this.rayParameters = rayParameters;\n    this.maxIterations = rayParameters.maxIterations !== void 0 ? Math.floor(rayParameters.maxIterations) : 9;\n    rayParameters.maxIterations = this.maxIterations;\n    this.isStatic = rayParameters.isStatic !== void 0 ? rayParameters.isStatic : false;\n    rayParameters.isStatic = this.isStatic;\n    this.ramification = rayParameters.ramification !== void 0 ? Math.floor(rayParameters.ramification) : 5;\n    rayParameters.ramification = this.ramification;\n    this.maxSubrayRecursion = rayParameters.maxSubrayRecursion !== void 0 ? Math.floor(rayParameters.maxSubrayRecursion) : 3;\n    rayParameters.maxSubrayRecursion = this.maxSubrayRecursion;\n    this.recursionProbability = rayParameters.recursionProbability !== void 0 ? rayParameters.recursionProbability : 0.6;\n    rayParameters.recursionProbability = this.recursionProbability;\n    this.generateUVs = rayParameters.generateUVs !== void 0 ? rayParameters.generateUVs : false;\n    rayParameters.generateUVs = this.generateUVs;\n    if (rayParameters.randomGenerator !== void 0) {\n      this.randomGenerator = rayParameters.randomGenerator;\n      this.seedGenerator = rayParameters.randomGenerator;\n      if (rayParameters.noiseSeed !== void 0) {\n        this.seedGenerator.setSeed(rayParameters.noiseSeed);\n      }\n    } else {\n      this.randomGenerator = _LightningStrike.createRandomGenerator();\n      this.seedGenerator = Math;\n    }\n    if (rayParameters.onDecideSubrayCreation !== void 0) {\n      this.onDecideSubrayCreation = rayParameters.onDecideSubrayCreation;\n    } else {\n      this.createDefaultSubrayCreationCallbacks();\n      if (rayParameters.onSubrayCreation !== void 0) {\n        this.onSubrayCreation = rayParameters.onSubrayCreation;\n      }\n    }\n    this.state = _LightningStrike.RAY_INITIALIZED;\n    this.maxSubrays = Math.ceil(1 + Math.pow(this.ramification, Math.max(0, this.maxSubrayRecursion - 1)));\n    rayParameters.maxSubrays = this.maxSubrays;\n    this.maxRaySegments = 2 * (1 << this.maxIterations);\n    this.subrays = [];\n    for (let i = 0; i < this.maxSubrays; i++) {\n      this.subrays.push(this.createSubray());\n    }\n    this.raySegments = [];\n    for (let i = 0; i < this.maxRaySegments; i++) {\n      this.raySegments.push(this.createSegment());\n    }\n    this.time = 0;\n    this.timeFraction = 0;\n    this.currentSegmentCallback = null;\n    this.currentCreateTriangleVertices = this.generateUVs ? this.createTriangleVerticesWithUVs : this.createTriangleVerticesWithoutUVs;\n    this.numSubrays = 0;\n    this.currentSubray = null;\n    this.currentSegmentIndex = 0;\n    this.isInitialSegment = false;\n    this.subrayProbability = 0;\n    this.currentVertex = 0;\n    this.currentIndex = 0;\n    this.currentCoordinate = 0;\n    this.currentUVCoordinate = 0;\n    this.vertices = null;\n    this.uvs = null;\n    this.indices = null;\n    this.positionAttribute = null;\n    this.uvsAttribute = null;\n    this.simplexX = new SimplexNoise(this.seedGenerator);\n    this.simplexY = new SimplexNoise(this.seedGenerator);\n    this.simplexZ = new SimplexNoise(this.seedGenerator);\n    this.forwards = new Vector3();\n    this.forwardsFill = new Vector3();\n    this.side = new Vector3();\n    this.down = new Vector3();\n    this.middlePos = new Vector3();\n    this.middleLinPos = new Vector3();\n    this.newPos = new Vector3();\n    this.vPos = new Vector3();\n    this.cross1 = new Vector3();\n  }\n  createMesh() {\n    const maxDrawableSegmentsPerSubRay = 1 << this.maxIterations;\n    const maxVerts = 3 * (maxDrawableSegmentsPerSubRay + 1) * this.maxSubrays;\n    const maxIndices = 18 * maxDrawableSegmentsPerSubRay * this.maxSubrays;\n    this.vertices = new Float32Array(maxVerts * 3);\n    this.indices = new Uint32Array(maxIndices);\n    if (this.generateUVs) {\n      this.uvs = new Float32Array(maxVerts * 2);\n    }\n    this.fillMesh(0);\n    this.setIndex(new Uint32BufferAttribute(this.indices, 1));\n    this.positionAttribute = new Float32BufferAttribute(this.vertices, 3);\n    this.setAttribute(\"position\", this.positionAttribute);\n    if (this.generateUVs) {\n      this.uvsAttribute = new Float32BufferAttribute(new Float32Array(this.uvs), 2);\n      this.setAttribute(\"uv\", this.uvsAttribute);\n    }\n    if (!this.isStatic) {\n      this.index.usage = DynamicDrawUsage;\n      this.positionAttribute.usage = DynamicDrawUsage;\n      if (this.generateUVs) {\n        this.uvsAttribute.usage = DynamicDrawUsage;\n      }\n    }\n    this.vertices = this.positionAttribute.array;\n    this.indices = this.index.array;\n    if (this.generateUVs) {\n      this.uvs = this.uvsAttribute.array;\n    }\n  }\n  updateMesh(time) {\n    this.fillMesh(time);\n    this.drawRange.count = this.currentIndex;\n    this.index.needsUpdate = true;\n    this.positionAttribute.needsUpdate = true;\n    if (this.generateUVs) {\n      this.uvsAttribute.needsUpdate = true;\n    }\n  }\n  fillMesh(time) {\n    const scope = this;\n    this.currentVertex = 0;\n    this.currentIndex = 0;\n    this.currentCoordinate = 0;\n    this.currentUVCoordinate = 0;\n    this.fractalRay(time, function fillVertices(segment) {\n      const subray = scope.currentSubray;\n      if (time < subray.birthTime) {\n        return;\n      } else if (this.rayParameters.isEternal && scope.currentSubray.recursion == 0) {\n        scope.createPrism(segment);\n        scope.onDecideSubrayCreation(segment, scope);\n      } else if (time < subray.endPropagationTime) {\n        if (scope.timeFraction >= segment.fraction0 * subray.propagationTimeFactor) {\n          scope.createPrism(segment);\n          scope.onDecideSubrayCreation(segment, scope);\n        }\n      } else if (time < subray.beginVanishingTime) {\n        scope.createPrism(segment);\n        scope.onDecideSubrayCreation(segment, scope);\n      } else {\n        if (scope.timeFraction <= subray.vanishingTimeFactor + segment.fraction1 * (1 - subray.vanishingTimeFactor)) {\n          scope.createPrism(segment);\n        }\n        scope.onDecideSubrayCreation(segment, scope);\n      }\n    });\n  }\n  addNewSubray() {\n    return this.subrays[this.numSubrays++];\n  }\n  initSubray(subray, rayParameters) {\n    subray.pos0.copy(rayParameters.sourceOffset);\n    subray.pos1.copy(rayParameters.destOffset);\n    subray.up0.copy(rayParameters.up0);\n    subray.up1.copy(rayParameters.up1);\n    subray.radius0 = rayParameters.radius0;\n    subray.radius1 = rayParameters.radius1;\n    subray.birthTime = rayParameters.birthTime;\n    subray.deathTime = rayParameters.deathTime;\n    subray.timeScale = rayParameters.timeScale;\n    subray.roughness = rayParameters.roughness;\n    subray.straightness = rayParameters.straightness;\n    subray.propagationTimeFactor = rayParameters.propagationTimeFactor;\n    subray.vanishingTimeFactor = rayParameters.vanishingTimeFactor;\n    subray.maxIterations = this.maxIterations;\n    subray.seed = rayParameters.noiseSeed !== void 0 ? rayParameters.noiseSeed : 0;\n    subray.recursion = 0;\n  }\n  fractalRay(time, segmentCallback) {\n    this.time = time;\n    this.currentSegmentCallback = segmentCallback;\n    this.numSubrays = 0;\n    this.initSubray(this.addNewSubray(), this.rayParameters);\n    for (let subrayIndex = 0; subrayIndex < this.numSubrays; subrayIndex++) {\n      const subray = this.subrays[subrayIndex];\n      this.currentSubray = subray;\n      this.randomGenerator.setSeed(subray.seed);\n      subray.endPropagationTime = MathUtils.lerp(subray.birthTime, subray.deathTime, subray.propagationTimeFactor);\n      subray.beginVanishingTime = MathUtils.lerp(subray.deathTime, subray.birthTime, 1 - subray.vanishingTimeFactor);\n      const random1 = this.randomGenerator.random;\n      subray.linPos0.set(random1(), random1(), random1()).multiplyScalar(1e3);\n      subray.linPos1.set(random1(), random1(), random1()).multiplyScalar(1e3);\n      this.timeFraction = (time - subray.birthTime) / (subray.deathTime - subray.birthTime);\n      this.currentSegmentIndex = 0;\n      this.isInitialSegment = true;\n      const segment = this.getNewSegment();\n      segment.iteration = 0;\n      segment.pos0.copy(subray.pos0);\n      segment.pos1.copy(subray.pos1);\n      segment.linPos0.copy(subray.linPos0);\n      segment.linPos1.copy(subray.linPos1);\n      segment.up0.copy(subray.up0);\n      segment.up1.copy(subray.up1);\n      segment.radius0 = subray.radius0;\n      segment.radius1 = subray.radius1;\n      segment.fraction0 = 0;\n      segment.fraction1 = 1;\n      segment.positionVariationFactor = 1 - subray.straightness;\n      this.subrayProbability = this.ramification * Math.pow(this.recursionProbability, subray.recursion) / (1 << subray.maxIterations);\n      this.fractalRayRecursive(segment);\n    }\n    this.currentSegmentCallback = null;\n    this.currentSubray = null;\n  }\n  fractalRayRecursive(segment) {\n    if (segment.iteration >= this.currentSubray.maxIterations) {\n      this.currentSegmentCallback(segment);\n      return;\n    }\n    this.forwards.subVectors(segment.pos1, segment.pos0);\n    let lForwards = this.forwards.length();\n    if (lForwards < 1e-6) {\n      this.forwards.set(0, 0, 0.01);\n      lForwards = this.forwards.length();\n    }\n    const middleRadius = (segment.radius0 + segment.radius1) * 0.5;\n    const middleFraction = (segment.fraction0 + segment.fraction1) * 0.5;\n    const timeDimension = this.time * this.currentSubray.timeScale * Math.pow(2, segment.iteration);\n    this.middlePos.lerpVectors(segment.pos0, segment.pos1, 0.5);\n    this.middleLinPos.lerpVectors(segment.linPos0, segment.linPos1, 0.5);\n    const p = this.middleLinPos;\n    this.newPos.set(\n      this.simplexX.noise4d(p.x, p.y, p.z, timeDimension),\n      this.simplexY.noise4d(p.x, p.y, p.z, timeDimension),\n      this.simplexZ.noise4d(p.x, p.y, p.z, timeDimension)\n    );\n    this.newPos.multiplyScalar(segment.positionVariationFactor * lForwards);\n    this.newPos.add(this.middlePos);\n    const newSegment1 = this.getNewSegment();\n    newSegment1.pos0.copy(segment.pos0);\n    newSegment1.pos1.copy(this.newPos);\n    newSegment1.linPos0.copy(segment.linPos0);\n    newSegment1.linPos1.copy(this.middleLinPos);\n    newSegment1.up0.copy(segment.up0);\n    newSegment1.up1.copy(segment.up1);\n    newSegment1.radius0 = segment.radius0;\n    newSegment1.radius1 = middleRadius;\n    newSegment1.fraction0 = segment.fraction0;\n    newSegment1.fraction1 = middleFraction;\n    newSegment1.positionVariationFactor = segment.positionVariationFactor * this.currentSubray.roughness;\n    newSegment1.iteration = segment.iteration + 1;\n    const newSegment2 = this.getNewSegment();\n    newSegment2.pos0.copy(this.newPos);\n    newSegment2.pos1.copy(segment.pos1);\n    newSegment2.linPos0.copy(this.middleLinPos);\n    newSegment2.linPos1.copy(segment.linPos1);\n    this.cross1.crossVectors(segment.up0, this.forwards.normalize());\n    newSegment2.up0.crossVectors(this.forwards, this.cross1).normalize();\n    newSegment2.up1.copy(segment.up1);\n    newSegment2.radius0 = middleRadius;\n    newSegment2.radius1 = segment.radius1;\n    newSegment2.fraction0 = middleFraction;\n    newSegment2.fraction1 = segment.fraction1;\n    newSegment2.positionVariationFactor = segment.positionVariationFactor * this.currentSubray.roughness;\n    newSegment2.iteration = segment.iteration + 1;\n    this.fractalRayRecursive(newSegment1);\n    this.fractalRayRecursive(newSegment2);\n  }\n  createPrism(segment) {\n    this.forwardsFill.subVectors(segment.pos1, segment.pos0).normalize();\n    if (this.isInitialSegment) {\n      this.currentCreateTriangleVertices(segment.pos0, segment.up0, this.forwardsFill, segment.radius0, 0);\n      this.isInitialSegment = false;\n    }\n    this.currentCreateTriangleVertices(segment.pos1, segment.up0, this.forwardsFill, segment.radius1, segment.fraction1);\n    this.createPrismFaces();\n  }\n  createTriangleVerticesWithoutUVs(pos, up, forwards, radius) {\n    this.side.crossVectors(up, forwards).multiplyScalar(radius * _LightningStrike.COS30DEG);\n    this.down.copy(up).multiplyScalar(-radius * _LightningStrike.SIN30DEG);\n    const p = this.vPos;\n    const v = this.vertices;\n    p.copy(pos).sub(this.side).add(this.down);\n    v[this.currentCoordinate++] = p.x;\n    v[this.currentCoordinate++] = p.y;\n    v[this.currentCoordinate++] = p.z;\n    p.copy(pos).add(this.side).add(this.down);\n    v[this.currentCoordinate++] = p.x;\n    v[this.currentCoordinate++] = p.y;\n    v[this.currentCoordinate++] = p.z;\n    p.copy(up).multiplyScalar(radius).add(pos);\n    v[this.currentCoordinate++] = p.x;\n    v[this.currentCoordinate++] = p.y;\n    v[this.currentCoordinate++] = p.z;\n    this.currentVertex += 3;\n  }\n  createTriangleVerticesWithUVs(pos, up, forwards, radius, u) {\n    this.side.crossVectors(up, forwards).multiplyScalar(radius * _LightningStrike.COS30DEG);\n    this.down.copy(up).multiplyScalar(-radius * _LightningStrike.SIN30DEG);\n    const p = this.vPos;\n    const v = this.vertices;\n    const uv = this.uvs;\n    p.copy(pos).sub(this.side).add(this.down);\n    v[this.currentCoordinate++] = p.x;\n    v[this.currentCoordinate++] = p.y;\n    v[this.currentCoordinate++] = p.z;\n    uv[this.currentUVCoordinate++] = u;\n    uv[this.currentUVCoordinate++] = 0;\n    p.copy(pos).add(this.side).add(this.down);\n    v[this.currentCoordinate++] = p.x;\n    v[this.currentCoordinate++] = p.y;\n    v[this.currentCoordinate++] = p.z;\n    uv[this.currentUVCoordinate++] = u;\n    uv[this.currentUVCoordinate++] = 0.5;\n    p.copy(up).multiplyScalar(radius).add(pos);\n    v[this.currentCoordinate++] = p.x;\n    v[this.currentCoordinate++] = p.y;\n    v[this.currentCoordinate++] = p.z;\n    uv[this.currentUVCoordinate++] = u;\n    uv[this.currentUVCoordinate++] = 1;\n    this.currentVertex += 3;\n  }\n  createPrismFaces(vertex) {\n    const indices = this.indices;\n    vertex = this.currentVertex - 6;\n    indices[this.currentIndex++] = vertex + 1;\n    indices[this.currentIndex++] = vertex + 2;\n    indices[this.currentIndex++] = vertex + 5;\n    indices[this.currentIndex++] = vertex + 1;\n    indices[this.currentIndex++] = vertex + 5;\n    indices[this.currentIndex++] = vertex + 4;\n    indices[this.currentIndex++] = vertex + 0;\n    indices[this.currentIndex++] = vertex + 1;\n    indices[this.currentIndex++] = vertex + 4;\n    indices[this.currentIndex++] = vertex + 0;\n    indices[this.currentIndex++] = vertex + 4;\n    indices[this.currentIndex++] = vertex + 3;\n    indices[this.currentIndex++] = vertex + 2;\n    indices[this.currentIndex++] = vertex + 0;\n    indices[this.currentIndex++] = vertex + 3;\n    indices[this.currentIndex++] = vertex + 2;\n    indices[this.currentIndex++] = vertex + 3;\n    indices[this.currentIndex++] = vertex + 5;\n  }\n  createDefaultSubrayCreationCallbacks() {\n    const random1 = this.randomGenerator.random;\n    this.onDecideSubrayCreation = function(segment, lightningStrike) {\n      const subray = lightningStrike.currentSubray;\n      const period = lightningStrike.rayParameters.subrayPeriod;\n      const dutyCycle = lightningStrike.rayParameters.subrayDutyCycle;\n      const phase0 = lightningStrike.rayParameters.isEternal && subray.recursion == 0 ? -random1() * period : MathUtils.lerp(subray.birthTime, subray.endPropagationTime, segment.fraction0) - random1() * period;\n      const phase = lightningStrike.time - phase0;\n      const currentCycle = Math.floor(phase / period);\n      const childSubraySeed = random1() * (currentCycle + 1);\n      const isActive = phase % period <= dutyCycle * period;\n      let probability = 0;\n      if (isActive) {\n        probability = lightningStrike.subrayProbability;\n      }\n      if (subray.recursion < lightningStrike.maxSubrayRecursion && lightningStrike.numSubrays < lightningStrike.maxSubrays && random1() < probability) {\n        const childSubray = lightningStrike.addNewSubray();\n        const parentSeed = lightningStrike.randomGenerator.getSeed();\n        childSubray.seed = childSubraySeed;\n        lightningStrike.randomGenerator.setSeed(childSubraySeed);\n        childSubray.recursion = subray.recursion + 1;\n        childSubray.maxIterations = Math.max(1, subray.maxIterations - 1);\n        childSubray.linPos0.set(random1(), random1(), random1()).multiplyScalar(1e3);\n        childSubray.linPos1.set(random1(), random1(), random1()).multiplyScalar(1e3);\n        childSubray.up0.copy(subray.up0);\n        childSubray.up1.copy(subray.up1);\n        childSubray.radius0 = segment.radius0 * lightningStrike.rayParameters.radius0Factor;\n        childSubray.radius1 = Math.min(\n          lightningStrike.rayParameters.minRadius,\n          segment.radius1 * lightningStrike.rayParameters.radius1Factor\n        );\n        childSubray.birthTime = phase0 + currentCycle * period;\n        childSubray.deathTime = childSubray.birthTime + period * dutyCycle;\n        if (!lightningStrike.rayParameters.isEternal && subray.recursion == 0) {\n          childSubray.birthTime = Math.max(childSubray.birthTime, subray.birthTime);\n          childSubray.deathTime = Math.min(childSubray.deathTime, subray.deathTime);\n        }\n        childSubray.timeScale = subray.timeScale * 2;\n        childSubray.roughness = subray.roughness;\n        childSubray.straightness = subray.straightness;\n        childSubray.propagationTimeFactor = subray.propagationTimeFactor;\n        childSubray.vanishingTimeFactor = subray.vanishingTimeFactor;\n        lightningStrike.onSubrayCreation(segment, subray, childSubray, lightningStrike);\n        lightningStrike.randomGenerator.setSeed(parentSeed);\n      }\n    };\n    const vec1Pos = new Vector3();\n    const vec2Forward = new Vector3();\n    const vec3Side = new Vector3();\n    const vec4Up = new Vector3();\n    this.onSubrayCreation = function(segment, parentSubray, childSubray, lightningStrike) {\n      lightningStrike.subrayCylinderPosition(segment, parentSubray, childSubray, 0.5, 0.6, 0.2);\n    };\n    this.subrayConePosition = function(segment, parentSubray, childSubray, heightFactor, sideWidthFactor, minSideWidthFactor) {\n      childSubray.pos0.copy(segment.pos0);\n      vec1Pos.subVectors(parentSubray.pos1, parentSubray.pos0);\n      vec2Forward.copy(vec1Pos).normalize();\n      vec1Pos.multiplyScalar(segment.fraction0 + (1 - segment.fraction0) * (random1() * heightFactor));\n      const length = vec1Pos.length();\n      vec3Side.crossVectors(parentSubray.up0, vec2Forward);\n      const angle = 2 * Math.PI * random1();\n      vec3Side.multiplyScalar(Math.cos(angle));\n      vec4Up.copy(parentSubray.up0).multiplyScalar(Math.sin(angle));\n      childSubray.pos1.copy(vec3Side).add(vec4Up).multiplyScalar(length * sideWidthFactor * (minSideWidthFactor + random1() * (1 - minSideWidthFactor))).add(vec1Pos).add(parentSubray.pos0);\n    };\n    this.subrayCylinderPosition = function(segment, parentSubray, childSubray, heightFactor, sideWidthFactor, minSideWidthFactor) {\n      childSubray.pos0.copy(segment.pos0);\n      vec1Pos.subVectors(parentSubray.pos1, parentSubray.pos0);\n      vec2Forward.copy(vec1Pos).normalize();\n      vec1Pos.multiplyScalar(segment.fraction0 + (1 - segment.fraction0) * ((2 * random1() - 1) * heightFactor));\n      const length = vec1Pos.length();\n      vec3Side.crossVectors(parentSubray.up0, vec2Forward);\n      const angle = 2 * Math.PI * random1();\n      vec3Side.multiplyScalar(Math.cos(angle));\n      vec4Up.copy(parentSubray.up0).multiplyScalar(Math.sin(angle));\n      childSubray.pos1.copy(vec3Side).add(vec4Up).multiplyScalar(length * sideWidthFactor * (minSideWidthFactor + random1() * (1 - minSideWidthFactor))).add(vec1Pos).add(parentSubray.pos0);\n    };\n  }\n  createSubray() {\n    return {\n      seed: 0,\n      maxIterations: 0,\n      recursion: 0,\n      pos0: new Vector3(),\n      pos1: new Vector3(),\n      linPos0: new Vector3(),\n      linPos1: new Vector3(),\n      up0: new Vector3(),\n      up1: new Vector3(),\n      radius0: 0,\n      radius1: 0,\n      birthTime: 0,\n      deathTime: 0,\n      timeScale: 0,\n      roughness: 0,\n      straightness: 0,\n      propagationTimeFactor: 0,\n      vanishingTimeFactor: 0,\n      endPropagationTime: 0,\n      beginVanishingTime: 0\n    };\n  }\n  createSegment() {\n    return {\n      iteration: 0,\n      pos0: new Vector3(),\n      pos1: new Vector3(),\n      linPos0: new Vector3(),\n      linPos1: new Vector3(),\n      up0: new Vector3(),\n      up1: new Vector3(),\n      radius0: 0,\n      radius1: 0,\n      fraction0: 0,\n      fraction1: 0,\n      positionVariationFactor: 0\n    };\n  }\n  getNewSegment() {\n    return this.raySegments[this.currentSegmentIndex++];\n  }\n  copy(source) {\n    super.copy(source);\n    this.init(_LightningStrike.copyParameters({}, source.rayParameters));\n    return this;\n  }\n  clone() {\n    return new this.constructor(_LightningStrike.copyParameters({}, this.rayParameters));\n  }\n};\nlet LightningStrike = _LightningStrike;\n// Ray states\n__publicField(LightningStrike, \"RAY_INITIALIZED\", 0);\n__publicField(LightningStrike, \"RAY_UNBORN\", 1);\n__publicField(LightningStrike, \"RAY_PROPAGATING\", 2);\n__publicField(LightningStrike, \"RAY_STEADY\", 3);\n__publicField(LightningStrike, \"RAY_VANISHING\", 4);\n__publicField(LightningStrike, \"RAY_EXTINGUISHED\", 5);\n__publicField(LightningStrike, \"COS30DEG\", Math.cos(30 * Math.PI / 180));\n__publicField(LightningStrike, \"SIN30DEG\", Math.sin(30 * Math.PI / 180));\nexport {\n  LightningStrike\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}