{"ast":null,"code":"import { Object3D } from \"three\";\nimport { XRHandPrimitiveModel } from \"./XRHandPrimitiveModel.js\";\nimport { XRHandMeshModel } from \"./XRHandMeshModel.js\";\nclass XRHandModel extends Object3D {\n  constructor(controller) {\n    super();\n    this.controller = controller;\n    this.motionController = null;\n    this.envMap = null;\n    this.mesh = null;\n  }\n  updateMatrixWorld(force) {\n    super.updateMatrixWorld(force);\n    if (this.motionController) {\n      this.motionController.updateMesh();\n    }\n  }\n}\nclass XRHandModelFactory {\n  constructor() {\n    this.path = null;\n  }\n  setPath(path) {\n    this.path = path;\n    return this;\n  }\n  createHandModel(controller, profile) {\n    const handModel = new XRHandModel(controller);\n    controller.addEventListener(\"connected\", event => {\n      const xrInputSource = event.data;\n      if (xrInputSource.hand && !handModel.motionController) {\n        handModel.xrInputSource = xrInputSource;\n        if (profile === void 0 || profile === \"spheres\") {\n          handModel.motionController = new XRHandPrimitiveModel(handModel, controller, this.path, xrInputSource.handedness, {\n            primitive: \"sphere\"\n          });\n        } else if (profile === \"boxes\") {\n          handModel.motionController = new XRHandPrimitiveModel(handModel, controller, this.path, xrInputSource.handedness, {\n            primitive: \"box\"\n          });\n        } else if (profile === \"mesh\") {\n          handModel.motionController = new XRHandMeshModel(handModel, controller, this.path, xrInputSource.handedness);\n        }\n      }\n    });\n    controller.addEventListener(\"disconnected\", () => {});\n    return handModel;\n  }\n}\nexport { XRHandModelFactory };","map":{"version":3,"names":["Object3D","XRHandPrimitiveModel","XRHandMeshModel","XRHandModel","constructor","controller","motionController","envMap","mesh","updateMatrixWorld","force","updateMesh","XRHandModelFactory","path","setPath","createHandModel","profile","handModel","addEventListener","event","xrInputSource","data","hand","handedness","primitive"],"sources":["/home/krug/Coding/JavaScript/Websites/Personal/personal/node_modules/.pnpm/three-stdlib@2.23.7_three@0.151.3/node_modules/three-stdlib/webxr/XRHandModelFactory.js"],"sourcesContent":["import { Object3D } from \"three\";\nimport { XRHandPrimitiveModel } from \"./XRHandPrimitiveModel.js\";\nimport { XRHandMeshModel } from \"./XRHandMeshModel.js\";\nclass XRHandModel extends Object3D {\n  constructor(controller) {\n    super();\n    this.controller = controller;\n    this.motionController = null;\n    this.envMap = null;\n    this.mesh = null;\n  }\n  updateMatrixWorld(force) {\n    super.updateMatrixWorld(force);\n    if (this.motionController) {\n      this.motionController.updateMesh();\n    }\n  }\n}\nclass XRHandModelFactory {\n  constructor() {\n    this.path = null;\n  }\n  setPath(path) {\n    this.path = path;\n    return this;\n  }\n  createHandModel(controller, profile) {\n    const handModel = new XRHandModel(controller);\n    controller.addEventListener(\"connected\", (event) => {\n      const xrInputSource = event.data;\n      if (xrInputSource.hand && !handModel.motionController) {\n        handModel.xrInputSource = xrInputSource;\n        if (profile === void 0 || profile === \"spheres\") {\n          handModel.motionController = new XRHandPrimitiveModel(\n            handModel,\n            controller,\n            this.path,\n            xrInputSource.handedness,\n            { primitive: \"sphere\" }\n          );\n        } else if (profile === \"boxes\") {\n          handModel.motionController = new XRHandPrimitiveModel(\n            handModel,\n            controller,\n            this.path,\n            xrInputSource.handedness,\n            { primitive: \"box\" }\n          );\n        } else if (profile === \"mesh\") {\n          handModel.motionController = new XRHandMeshModel(handModel, controller, this.path, xrInputSource.handedness);\n        }\n      }\n    });\n    controller.addEventListener(\"disconnected\", () => {\n    });\n    return handModel;\n  }\n}\nexport {\n  XRHandModelFactory\n};\n"],"mappings":"AAAA,SAASA,QAAQ,QAAQ,OAAO;AAChC,SAASC,oBAAoB,QAAQ,2BAA2B;AAChE,SAASC,eAAe,QAAQ,sBAAsB;AACtD,MAAMC,WAAW,SAASH,QAAQ,CAAC;EACjCI,WAAWA,CAACC,UAAU,EAAE;IACtB,KAAK,CAAC,CAAC;IACP,IAAI,CAACA,UAAU,GAAGA,UAAU;IAC5B,IAAI,CAACC,gBAAgB,GAAG,IAAI;IAC5B,IAAI,CAACC,MAAM,GAAG,IAAI;IAClB,IAAI,CAACC,IAAI,GAAG,IAAI;EAClB;EACAC,iBAAiBA,CAACC,KAAK,EAAE;IACvB,KAAK,CAACD,iBAAiB,CAACC,KAAK,CAAC;IAC9B,IAAI,IAAI,CAACJ,gBAAgB,EAAE;MACzB,IAAI,CAACA,gBAAgB,CAACK,UAAU,CAAC,CAAC;IACpC;EACF;AACF;AACA,MAAMC,kBAAkB,CAAC;EACvBR,WAAWA,CAAA,EAAG;IACZ,IAAI,CAACS,IAAI,GAAG,IAAI;EAClB;EACAC,OAAOA,CAACD,IAAI,EAAE;IACZ,IAAI,CAACA,IAAI,GAAGA,IAAI;IAChB,OAAO,IAAI;EACb;EACAE,eAAeA,CAACV,UAAU,EAAEW,OAAO,EAAE;IACnC,MAAMC,SAAS,GAAG,IAAId,WAAW,CAACE,UAAU,CAAC;IAC7CA,UAAU,CAACa,gBAAgB,CAAC,WAAW,EAAGC,KAAK,IAAK;MAClD,MAAMC,aAAa,GAAGD,KAAK,CAACE,IAAI;MAChC,IAAID,aAAa,CAACE,IAAI,IAAI,CAACL,SAAS,CAACX,gBAAgB,EAAE;QACrDW,SAAS,CAACG,aAAa,GAAGA,aAAa;QACvC,IAAIJ,OAAO,KAAK,KAAK,CAAC,IAAIA,OAAO,KAAK,SAAS,EAAE;UAC/CC,SAAS,CAACX,gBAAgB,GAAG,IAAIL,oBAAoB,CACnDgB,SAAS,EACTZ,UAAU,EACV,IAAI,CAACQ,IAAI,EACTO,aAAa,CAACG,UAAU,EACxB;YAAEC,SAAS,EAAE;UAAS,CACxB,CAAC;QACH,CAAC,MAAM,IAAIR,OAAO,KAAK,OAAO,EAAE;UAC9BC,SAAS,CAACX,gBAAgB,GAAG,IAAIL,oBAAoB,CACnDgB,SAAS,EACTZ,UAAU,EACV,IAAI,CAACQ,IAAI,EACTO,aAAa,CAACG,UAAU,EACxB;YAAEC,SAAS,EAAE;UAAM,CACrB,CAAC;QACH,CAAC,MAAM,IAAIR,OAAO,KAAK,MAAM,EAAE;UAC7BC,SAAS,CAACX,gBAAgB,GAAG,IAAIJ,eAAe,CAACe,SAAS,EAAEZ,UAAU,EAAE,IAAI,CAACQ,IAAI,EAAEO,aAAa,CAACG,UAAU,CAAC;QAC9G;MACF;IACF,CAAC,CAAC;IACFlB,UAAU,CAACa,gBAAgB,CAAC,cAAc,EAAE,MAAM,CAClD,CAAC,CAAC;IACF,OAAOD,SAAS;EAClB;AACF;AACA,SACEL,kBAAkB"},"metadata":{},"sourceType":"module","externalDependencies":[]}