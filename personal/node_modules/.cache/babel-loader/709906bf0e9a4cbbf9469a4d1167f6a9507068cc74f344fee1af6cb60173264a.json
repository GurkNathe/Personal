{"ast":null,"code":"import _classCallCheck from \"/home/krug/Coding/JavaScript/Websites/Personal/personal/node_modules/.pnpm/@babel+runtime@7.22.3/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/home/krug/Coding/JavaScript/Websites/Personal/personal/node_modules/.pnpm/@babel+runtime@7.22.3/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"/home/krug/Coding/JavaScript/Websites/Personal/personal/node_modules/.pnpm/@babel+runtime@7.22.3/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/home/krug/Coding/JavaScript/Websites/Personal/personal/node_modules/.pnpm/@babel+runtime@7.22.3/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { Loader, LoaderUtils, FileLoader, FrontSide, RepeatWrapping, Color, MeshPhongMaterial, Vector2, DefaultLoadingManager, TextureLoader } from \"three\";\nvar MTLLoader = /*#__PURE__*/function (_Loader) {\n  _inherits(MTLLoader, _Loader);\n  var _super = _createSuper(MTLLoader);\n  function MTLLoader(manager) {\n    _classCallCheck(this, MTLLoader);\n    return _super.call(this, manager);\n  }\n  /**\n   * Loads and parses a MTL asset from a URL.\n   *\n   * @param {String} url - URL to the MTL file.\n   * @param {Function} [onLoad] - Callback invoked with the loaded object.\n   * @param {Function} [onProgress] - Callback for download progress.\n   * @param {Function} [onError] - Callback for download errors.\n   *\n   * @see setPath setResourcePath\n   *\n   * @note In order for relative texture references to resolve correctly\n   * you must call setResourcePath() explicitly prior to load.\n   */\n  _createClass(MTLLoader, [{\n    key: \"load\",\n    value: function load(url, onLoad, onProgress, onError) {\n      var scope = this;\n      var path = this.path === \"\" ? LoaderUtils.extractUrlBase(url) : this.path;\n      var loader = new FileLoader(this.manager);\n      loader.setPath(this.path);\n      loader.setRequestHeader(this.requestHeader);\n      loader.setWithCredentials(this.withCredentials);\n      loader.load(url, function (text) {\n        try {\n          onLoad(scope.parse(text, path));\n        } catch (e) {\n          if (onError) {\n            onError(e);\n          } else {\n            console.error(e);\n          }\n          scope.manager.itemError(url);\n        }\n      }, onProgress, onError);\n    }\n  }, {\n    key: \"setMaterialOptions\",\n    value: function setMaterialOptions(value) {\n      this.materialOptions = value;\n      return this;\n    }\n    /**\n     * Parses a MTL file.\n     *\n     * @param {String} text - Content of MTL file\n     * @return {MaterialCreator}\n     *\n     * @see setPath setResourcePath\n     *\n     * @note In order for relative texture references to resolve correctly\n     * you must call setResourcePath() explicitly prior to parse.\n     */\n  }, {\n    key: \"parse\",\n    value: function parse(text, path) {\n      var lines = text.split(\"\\n\");\n      var info = {};\n      var delimiter_pattern = /\\s+/;\n      var materialsInfo = {};\n      for (var i = 0; i < lines.length; i++) {\n        var line = lines[i];\n        line = line.trim();\n        if (line.length === 0 || line.charAt(0) === \"#\") {\n          continue;\n        }\n        var pos = line.indexOf(\" \");\n        var key = pos >= 0 ? line.substring(0, pos) : line;\n        key = key.toLowerCase();\n        var value = pos >= 0 ? line.substring(pos + 1) : \"\";\n        value = value.trim();\n        if (key === \"newmtl\") {\n          info = {\n            name: value\n          };\n          materialsInfo[value] = info;\n        } else {\n          if (key === \"ka\" || key === \"kd\" || key === \"ks\" || key === \"ke\") {\n            var ss = value.split(delimiter_pattern, 3);\n            info[key] = [parseFloat(ss[0]), parseFloat(ss[1]), parseFloat(ss[2])];\n          } else {\n            info[key] = value;\n          }\n        }\n      }\n      var materialCreator = new MaterialCreator(this.resourcePath || path, this.materialOptions);\n      materialCreator.setCrossOrigin(this.crossOrigin);\n      materialCreator.setManager(this.manager);\n      materialCreator.setMaterials(materialsInfo);\n      return materialCreator;\n    }\n  }]);\n  return MTLLoader;\n}(Loader);\nvar MaterialCreator = /*#__PURE__*/function () {\n  function MaterialCreator() {\n    var baseUrl = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : \"\";\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    _classCallCheck(this, MaterialCreator);\n    this.baseUrl = baseUrl;\n    this.options = options;\n    this.materialsInfo = {};\n    this.materials = {};\n    this.materialsArray = [];\n    this.nameLookup = {};\n    this.crossOrigin = \"anonymous\";\n    this.side = this.options.side !== void 0 ? this.options.side : FrontSide;\n    this.wrap = this.options.wrap !== void 0 ? this.options.wrap : RepeatWrapping;\n  }\n  _createClass(MaterialCreator, [{\n    key: \"setCrossOrigin\",\n    value: function setCrossOrigin(value) {\n      this.crossOrigin = value;\n      return this;\n    }\n  }, {\n    key: \"setManager\",\n    value: function setManager(value) {\n      this.manager = value;\n    }\n  }, {\n    key: \"setMaterials\",\n    value: function setMaterials(materialsInfo) {\n      this.materialsInfo = this.convert(materialsInfo);\n      this.materials = {};\n      this.materialsArray = [];\n      this.nameLookup = {};\n    }\n  }, {\n    key: \"convert\",\n    value: function convert(materialsInfo) {\n      if (!this.options) return materialsInfo;\n      var converted = {};\n      for (var mn in materialsInfo) {\n        var mat = materialsInfo[mn];\n        var covmat = {};\n        converted[mn] = covmat;\n        for (var prop in mat) {\n          var save = true;\n          var value = mat[prop];\n          var lprop = prop.toLowerCase();\n          switch (lprop) {\n            case \"kd\":\n            case \"ka\":\n            case \"ks\":\n              if (this.options && this.options.normalizeRGB) {\n                value = [value[0] / 255, value[1] / 255, value[2] / 255];\n              }\n              if (this.options && this.options.ignoreZeroRGBs) {\n                if (value[0] === 0 && value[1] === 0 && value[2] === 0) {\n                  save = false;\n                }\n              }\n              break;\n            default:\n              break;\n          }\n          if (save) {\n            covmat[lprop] = value;\n          }\n        }\n      }\n      return converted;\n    }\n  }, {\n    key: \"preload\",\n    value: function preload() {\n      for (var mn in this.materialsInfo) {\n        this.create(mn);\n      }\n    }\n  }, {\n    key: \"getIndex\",\n    value: function getIndex(materialName) {\n      return this.nameLookup[materialName];\n    }\n  }, {\n    key: \"getAsArray\",\n    value: function getAsArray() {\n      var index = 0;\n      for (var mn in this.materialsInfo) {\n        this.materialsArray[index] = this.create(mn);\n        this.nameLookup[mn] = index;\n        index++;\n      }\n      return this.materialsArray;\n    }\n  }, {\n    key: \"create\",\n    value: function create(materialName) {\n      if (this.materials[materialName] === void 0) {\n        this.createMaterial_(materialName);\n      }\n      return this.materials[materialName];\n    }\n  }, {\n    key: \"createMaterial_\",\n    value: function createMaterial_(materialName) {\n      var scope = this;\n      var mat = this.materialsInfo[materialName];\n      var params = {\n        name: materialName,\n        side: this.side\n      };\n      function resolveURL(baseUrl, url) {\n        if (typeof url !== \"string\" || url === \"\") return \"\";\n        if (/^https?:\\/\\//i.test(url)) return url;\n        return baseUrl + url;\n      }\n      function setMapForType(mapType, value) {\n        if (params[mapType]) return;\n        var texParams = scope.getTextureParams(value, params);\n        var map = scope.loadTexture(resolveURL(scope.baseUrl, texParams.url));\n        map.repeat.copy(texParams.scale);\n        map.offset.copy(texParams.offset);\n        map.wrapS = scope.wrap;\n        map.wrapT = scope.wrap;\n        params[mapType] = map;\n      }\n      for (var prop in mat) {\n        var value = mat[prop];\n        var n = void 0;\n        if (value === \"\") continue;\n        switch (prop.toLowerCase()) {\n          case \"kd\":\n            params.color = new Color().fromArray(value);\n            break;\n          case \"ks\":\n            params.specular = new Color().fromArray(value);\n            break;\n          case \"ke\":\n            params.emissive = new Color().fromArray(value);\n            break;\n          case \"map_kd\":\n            setMapForType(\"map\", value);\n            break;\n          case \"map_ks\":\n            setMapForType(\"specularMap\", value);\n            break;\n          case \"map_ke\":\n            setMapForType(\"emissiveMap\", value);\n            break;\n          case \"norm\":\n            setMapForType(\"normalMap\", value);\n            break;\n          case \"map_bump\":\n          case \"bump\":\n            setMapForType(\"bumpMap\", value);\n            break;\n          case \"map_d\":\n            setMapForType(\"alphaMap\", value);\n            params.transparent = true;\n            break;\n          case \"ns\":\n            params.shininess = parseFloat(value);\n            break;\n          case \"d\":\n            n = parseFloat(value);\n            if (n < 1) {\n              params.opacity = n;\n              params.transparent = true;\n            }\n            break;\n          case \"tr\":\n            n = parseFloat(value);\n            if (this.options && this.options.invertTrProperty) n = 1 - n;\n            if (n > 0) {\n              params.opacity = 1 - n;\n              params.transparent = true;\n            }\n            break;\n          default:\n            break;\n        }\n      }\n      this.materials[materialName] = new MeshPhongMaterial(params);\n      return this.materials[materialName];\n    }\n  }, {\n    key: \"getTextureParams\",\n    value: function getTextureParams(value, matParams) {\n      var texParams = {\n        scale: new Vector2(1, 1),\n        offset: new Vector2(0, 0)\n      };\n      var items = value.split(/\\s+/);\n      var pos;\n      pos = items.indexOf(\"-bm\");\n      if (pos >= 0) {\n        matParams.bumpScale = parseFloat(items[pos + 1]);\n        items.splice(pos, 2);\n      }\n      pos = items.indexOf(\"-s\");\n      if (pos >= 0) {\n        texParams.scale.set(parseFloat(items[pos + 1]), parseFloat(items[pos + 2]));\n        items.splice(pos, 4);\n      }\n      pos = items.indexOf(\"-o\");\n      if (pos >= 0) {\n        texParams.offset.set(parseFloat(items[pos + 1]), parseFloat(items[pos + 2]));\n        items.splice(pos, 4);\n      }\n      texParams.url = items.join(\" \").trim();\n      return texParams;\n    }\n  }, {\n    key: \"loadTexture\",\n    value: function loadTexture(url, mapping, onLoad, onProgress, onError) {\n      var manager = this.manager !== void 0 ? this.manager : DefaultLoadingManager;\n      var loader = manager.getHandler(url);\n      if (loader === null) {\n        loader = new TextureLoader(manager);\n      }\n      if (loader.setCrossOrigin) loader.setCrossOrigin(this.crossOrigin);\n      var texture = loader.load(url, onLoad, onProgress, onError);\n      if (mapping !== void 0) texture.mapping = mapping;\n      return texture;\n    }\n  }]);\n  return MaterialCreator;\n}();\nexport { MTLLoader };","map":{"version":3,"names":["Loader","LoaderUtils","FileLoader","FrontSide","RepeatWrapping","Color","MeshPhongMaterial","Vector2","DefaultLoadingManager","TextureLoader","MTLLoader","_Loader","_inherits","_super","_createSuper","manager","_classCallCheck","call","_createClass","key","value","load","url","onLoad","onProgress","onError","scope","path","extractUrlBase","loader","setPath","setRequestHeader","requestHeader","setWithCredentials","withCredentials","text","parse","e","console","error","itemError","setMaterialOptions","materialOptions","lines","split","info","delimiter_pattern","materialsInfo","i","length","line","trim","charAt","pos","indexOf","substring","toLowerCase","name","ss","parseFloat","materialCreator","MaterialCreator","resourcePath","setCrossOrigin","crossOrigin","setManager","setMaterials","baseUrl","arguments","undefined","options","materials","materialsArray","nameLookup","side","wrap","convert","converted","mn","mat","covmat","prop","save","lprop","normalizeRGB","ignoreZeroRGBs","preload","create","getIndex","materialName","getAsArray","index","createMaterial_","params","resolveURL","test","setMapForType","mapType","texParams","getTextureParams","map","loadTexture","repeat","copy","scale","offset","wrapS","wrapT","n","color","fromArray","specular","emissive","transparent","shininess","opacity","invertTrProperty","matParams","items","bumpScale","splice","set","join","mapping","getHandler","texture"],"sources":["/home/krug/Coding/JavaScript/Websites/Personal/personal/node_modules/.pnpm/three-stdlib@2.23.7_three@0.151.3/node_modules/three-stdlib/loaders/MTLLoader.js"],"sourcesContent":["import { Loader, LoaderUtils, FileLoader, FrontSide, RepeatWrapping, Color, MeshPhongMaterial, Vector2, DefaultLoadingManager, TextureLoader } from \"three\";\nclass MTLLoader extends Loader {\n  constructor(manager) {\n    super(manager);\n  }\n  /**\n   * Loads and parses a MTL asset from a URL.\n   *\n   * @param {String} url - URL to the MTL file.\n   * @param {Function} [onLoad] - Callback invoked with the loaded object.\n   * @param {Function} [onProgress] - Callback for download progress.\n   * @param {Function} [onError] - Callback for download errors.\n   *\n   * @see setPath setResourcePath\n   *\n   * @note In order for relative texture references to resolve correctly\n   * you must call setResourcePath() explicitly prior to load.\n   */\n  load(url, onLoad, onProgress, onError) {\n    const scope = this;\n    const path = this.path === \"\" ? LoaderUtils.extractUrlBase(url) : this.path;\n    const loader = new FileLoader(this.manager);\n    loader.setPath(this.path);\n    loader.setRequestHeader(this.requestHeader);\n    loader.setWithCredentials(this.withCredentials);\n    loader.load(\n      url,\n      function(text) {\n        try {\n          onLoad(scope.parse(text, path));\n        } catch (e) {\n          if (onError) {\n            onError(e);\n          } else {\n            console.error(e);\n          }\n          scope.manager.itemError(url);\n        }\n      },\n      onProgress,\n      onError\n    );\n  }\n  setMaterialOptions(value) {\n    this.materialOptions = value;\n    return this;\n  }\n  /**\n   * Parses a MTL file.\n   *\n   * @param {String} text - Content of MTL file\n   * @return {MaterialCreator}\n   *\n   * @see setPath setResourcePath\n   *\n   * @note In order for relative texture references to resolve correctly\n   * you must call setResourcePath() explicitly prior to parse.\n   */\n  parse(text, path) {\n    const lines = text.split(\"\\n\");\n    let info = {};\n    const delimiter_pattern = /\\s+/;\n    const materialsInfo = {};\n    for (let i = 0; i < lines.length; i++) {\n      let line = lines[i];\n      line = line.trim();\n      if (line.length === 0 || line.charAt(0) === \"#\") {\n        continue;\n      }\n      const pos = line.indexOf(\" \");\n      let key = pos >= 0 ? line.substring(0, pos) : line;\n      key = key.toLowerCase();\n      let value = pos >= 0 ? line.substring(pos + 1) : \"\";\n      value = value.trim();\n      if (key === \"newmtl\") {\n        info = { name: value };\n        materialsInfo[value] = info;\n      } else {\n        if (key === \"ka\" || key === \"kd\" || key === \"ks\" || key === \"ke\") {\n          const ss = value.split(delimiter_pattern, 3);\n          info[key] = [parseFloat(ss[0]), parseFloat(ss[1]), parseFloat(ss[2])];\n        } else {\n          info[key] = value;\n        }\n      }\n    }\n    const materialCreator = new MaterialCreator(this.resourcePath || path, this.materialOptions);\n    materialCreator.setCrossOrigin(this.crossOrigin);\n    materialCreator.setManager(this.manager);\n    materialCreator.setMaterials(materialsInfo);\n    return materialCreator;\n  }\n}\nclass MaterialCreator {\n  constructor(baseUrl = \"\", options = {}) {\n    this.baseUrl = baseUrl;\n    this.options = options;\n    this.materialsInfo = {};\n    this.materials = {};\n    this.materialsArray = [];\n    this.nameLookup = {};\n    this.crossOrigin = \"anonymous\";\n    this.side = this.options.side !== void 0 ? this.options.side : FrontSide;\n    this.wrap = this.options.wrap !== void 0 ? this.options.wrap : RepeatWrapping;\n  }\n  setCrossOrigin(value) {\n    this.crossOrigin = value;\n    return this;\n  }\n  setManager(value) {\n    this.manager = value;\n  }\n  setMaterials(materialsInfo) {\n    this.materialsInfo = this.convert(materialsInfo);\n    this.materials = {};\n    this.materialsArray = [];\n    this.nameLookup = {};\n  }\n  convert(materialsInfo) {\n    if (!this.options)\n      return materialsInfo;\n    const converted = {};\n    for (const mn in materialsInfo) {\n      const mat = materialsInfo[mn];\n      const covmat = {};\n      converted[mn] = covmat;\n      for (const prop in mat) {\n        let save = true;\n        let value = mat[prop];\n        const lprop = prop.toLowerCase();\n        switch (lprop) {\n          case \"kd\":\n          case \"ka\":\n          case \"ks\":\n            if (this.options && this.options.normalizeRGB) {\n              value = [value[0] / 255, value[1] / 255, value[2] / 255];\n            }\n            if (this.options && this.options.ignoreZeroRGBs) {\n              if (value[0] === 0 && value[1] === 0 && value[2] === 0) {\n                save = false;\n              }\n            }\n            break;\n          default:\n            break;\n        }\n        if (save) {\n          covmat[lprop] = value;\n        }\n      }\n    }\n    return converted;\n  }\n  preload() {\n    for (const mn in this.materialsInfo) {\n      this.create(mn);\n    }\n  }\n  getIndex(materialName) {\n    return this.nameLookup[materialName];\n  }\n  getAsArray() {\n    let index = 0;\n    for (const mn in this.materialsInfo) {\n      this.materialsArray[index] = this.create(mn);\n      this.nameLookup[mn] = index;\n      index++;\n    }\n    return this.materialsArray;\n  }\n  create(materialName) {\n    if (this.materials[materialName] === void 0) {\n      this.createMaterial_(materialName);\n    }\n    return this.materials[materialName];\n  }\n  createMaterial_(materialName) {\n    const scope = this;\n    const mat = this.materialsInfo[materialName];\n    const params = {\n      name: materialName,\n      side: this.side\n    };\n    function resolveURL(baseUrl, url) {\n      if (typeof url !== \"string\" || url === \"\")\n        return \"\";\n      if (/^https?:\\/\\//i.test(url))\n        return url;\n      return baseUrl + url;\n    }\n    function setMapForType(mapType, value) {\n      if (params[mapType])\n        return;\n      const texParams = scope.getTextureParams(value, params);\n      const map = scope.loadTexture(resolveURL(scope.baseUrl, texParams.url));\n      map.repeat.copy(texParams.scale);\n      map.offset.copy(texParams.offset);\n      map.wrapS = scope.wrap;\n      map.wrapT = scope.wrap;\n      params[mapType] = map;\n    }\n    for (const prop in mat) {\n      const value = mat[prop];\n      let n;\n      if (value === \"\")\n        continue;\n      switch (prop.toLowerCase()) {\n        case \"kd\":\n          params.color = new Color().fromArray(value);\n          break;\n        case \"ks\":\n          params.specular = new Color().fromArray(value);\n          break;\n        case \"ke\":\n          params.emissive = new Color().fromArray(value);\n          break;\n        case \"map_kd\":\n          setMapForType(\"map\", value);\n          break;\n        case \"map_ks\":\n          setMapForType(\"specularMap\", value);\n          break;\n        case \"map_ke\":\n          setMapForType(\"emissiveMap\", value);\n          break;\n        case \"norm\":\n          setMapForType(\"normalMap\", value);\n          break;\n        case \"map_bump\":\n        case \"bump\":\n          setMapForType(\"bumpMap\", value);\n          break;\n        case \"map_d\":\n          setMapForType(\"alphaMap\", value);\n          params.transparent = true;\n          break;\n        case \"ns\":\n          params.shininess = parseFloat(value);\n          break;\n        case \"d\":\n          n = parseFloat(value);\n          if (n < 1) {\n            params.opacity = n;\n            params.transparent = true;\n          }\n          break;\n        case \"tr\":\n          n = parseFloat(value);\n          if (this.options && this.options.invertTrProperty)\n            n = 1 - n;\n          if (n > 0) {\n            params.opacity = 1 - n;\n            params.transparent = true;\n          }\n          break;\n        default:\n          break;\n      }\n    }\n    this.materials[materialName] = new MeshPhongMaterial(params);\n    return this.materials[materialName];\n  }\n  getTextureParams(value, matParams) {\n    const texParams = {\n      scale: new Vector2(1, 1),\n      offset: new Vector2(0, 0)\n    };\n    const items = value.split(/\\s+/);\n    let pos;\n    pos = items.indexOf(\"-bm\");\n    if (pos >= 0) {\n      matParams.bumpScale = parseFloat(items[pos + 1]);\n      items.splice(pos, 2);\n    }\n    pos = items.indexOf(\"-s\");\n    if (pos >= 0) {\n      texParams.scale.set(parseFloat(items[pos + 1]), parseFloat(items[pos + 2]));\n      items.splice(pos, 4);\n    }\n    pos = items.indexOf(\"-o\");\n    if (pos >= 0) {\n      texParams.offset.set(parseFloat(items[pos + 1]), parseFloat(items[pos + 2]));\n      items.splice(pos, 4);\n    }\n    texParams.url = items.join(\" \").trim();\n    return texParams;\n  }\n  loadTexture(url, mapping, onLoad, onProgress, onError) {\n    const manager = this.manager !== void 0 ? this.manager : DefaultLoadingManager;\n    let loader = manager.getHandler(url);\n    if (loader === null) {\n      loader = new TextureLoader(manager);\n    }\n    if (loader.setCrossOrigin)\n      loader.setCrossOrigin(this.crossOrigin);\n    const texture = loader.load(url, onLoad, onProgress, onError);\n    if (mapping !== void 0)\n      texture.mapping = mapping;\n    return texture;\n  }\n}\nexport {\n  MTLLoader\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}