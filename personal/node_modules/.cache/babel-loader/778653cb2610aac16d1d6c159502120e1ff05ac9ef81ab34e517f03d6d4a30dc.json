{"ast":null,"code":"import { Vector2 } from \"three\";\nconst DotScreenShader = {\n  uniforms: {\n    tDiffuse: {\n      value: null\n    },\n    tSize: {\n      value: /* @__PURE__ */new Vector2(256, 256)\n    },\n    center: {\n      value: /* @__PURE__ */new Vector2(0.5, 0.5)\n    },\n    angle: {\n      value: 1.57\n    },\n    scale: {\n      value: 1\n    }\n  },\n  vertexShader: [\"varying vec2 vUv;\", \"void main() {\", \"\tvUv = uv;\", \"\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\", \"}\"].join(\"\\n\"),\n  fragmentShader: [\"uniform vec2 center;\", \"uniform float angle;\", \"uniform float scale;\", \"uniform vec2 tSize;\", \"uniform sampler2D tDiffuse;\", \"varying vec2 vUv;\", \"float pattern() {\", \"\tfloat s = sin( angle ), c = cos( angle );\", \"\tvec2 tex = vUv * tSize - center;\", \"\tvec2 point = vec2( c * tex.x - s * tex.y, s * tex.x + c * tex.y ) * scale;\", \"\treturn ( sin( point.x ) * sin( point.y ) ) * 4.0;\", \"}\", \"void main() {\", \"\tvec4 color = texture2D( tDiffuse, vUv );\", \"\tfloat average = ( color.r + color.g + color.b ) / 3.0;\", \"\tgl_FragColor = vec4( vec3( average * 10.0 - 5.0 + pattern() ), color.a );\", \"}\"].join(\"\\n\")\n};\nexport { DotScreenShader };","map":{"version":3,"names":["Vector2","DotScreenShader","uniforms","tDiffuse","value","tSize","center","angle","scale","vertexShader","join","fragmentShader"],"sources":["/home/krug/Coding/JavaScript/Websites/Personal/personal/node_modules/.pnpm/three-stdlib@2.23.7_three@0.151.3/node_modules/three-stdlib/shaders/DotScreenShader.js"],"sourcesContent":["import { Vector2 } from \"three\";\nconst DotScreenShader = {\n  uniforms: {\n    tDiffuse: { value: null },\n    tSize: { value: /* @__PURE__ */ new Vector2(256, 256) },\n    center: { value: /* @__PURE__ */ new Vector2(0.5, 0.5) },\n    angle: { value: 1.57 },\n    scale: { value: 1 }\n  },\n  vertexShader: [\n    \"varying vec2 vUv;\",\n    \"void main() {\",\n    \"\tvUv = uv;\",\n    \"\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\",\n    \"}\"\n  ].join(\"\\n\"),\n  fragmentShader: [\n    \"uniform vec2 center;\",\n    \"uniform float angle;\",\n    \"uniform float scale;\",\n    \"uniform vec2 tSize;\",\n    \"uniform sampler2D tDiffuse;\",\n    \"varying vec2 vUv;\",\n    \"float pattern() {\",\n    \"\tfloat s = sin( angle ), c = cos( angle );\",\n    \"\tvec2 tex = vUv * tSize - center;\",\n    \"\tvec2 point = vec2( c * tex.x - s * tex.y, s * tex.x + c * tex.y ) * scale;\",\n    \"\treturn ( sin( point.x ) * sin( point.y ) ) * 4.0;\",\n    \"}\",\n    \"void main() {\",\n    \"\tvec4 color = texture2D( tDiffuse, vUv );\",\n    \"\tfloat average = ( color.r + color.g + color.b ) / 3.0;\",\n    \"\tgl_FragColor = vec4( vec3( average * 10.0 - 5.0 + pattern() ), color.a );\",\n    \"}\"\n  ].join(\"\\n\")\n};\nexport {\n  DotScreenShader\n};\n"],"mappings":"AAAA,SAASA,OAAO,QAAQ,OAAO;AAC/B,MAAMC,eAAe,GAAG;EACtBC,QAAQ,EAAE;IACRC,QAAQ,EAAE;MAAEC,KAAK,EAAE;IAAK,CAAC;IACzBC,KAAK,EAAE;MAAED,KAAK,EAAE,eAAgB,IAAIJ,OAAO,CAAC,GAAG,EAAE,GAAG;IAAE,CAAC;IACvDM,MAAM,EAAE;MAAEF,KAAK,EAAE,eAAgB,IAAIJ,OAAO,CAAC,GAAG,EAAE,GAAG;IAAE,CAAC;IACxDO,KAAK,EAAE;MAAEH,KAAK,EAAE;IAAK,CAAC;IACtBI,KAAK,EAAE;MAAEJ,KAAK,EAAE;IAAE;EACpB,CAAC;EACDK,YAAY,EAAE,CACZ,mBAAmB,EACnB,eAAe,EACf,YAAY,EACZ,4EAA4E,EAC5E,GAAG,CACJ,CAACC,IAAI,CAAC,IAAI,CAAC;EACZC,cAAc,EAAE,CACd,sBAAsB,EACtB,sBAAsB,EACtB,sBAAsB,EACtB,qBAAqB,EACrB,6BAA6B,EAC7B,mBAAmB,EACnB,mBAAmB,EACnB,4CAA4C,EAC5C,mCAAmC,EACnC,6EAA6E,EAC7E,oDAAoD,EACpD,GAAG,EACH,eAAe,EACf,2CAA2C,EAC3C,yDAAyD,EACzD,4EAA4E,EAC5E,GAAG,CACJ,CAACD,IAAI,CAAC,IAAI;AACb,CAAC;AACD,SACET,eAAe"},"metadata":{},"sourceType":"module","externalDependencies":[]}