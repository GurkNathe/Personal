{"ast":null,"code":"import _classCallCheck from \"/home/krug/Coding/JavaScript/Websites/Personal/personal/node_modules/.pnpm/@babel+runtime@7.22.3/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/home/krug/Coding/JavaScript/Websites/Personal/personal/node_modules/.pnpm/@babel+runtime@7.22.3/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"/home/krug/Coding/JavaScript/Websites/Personal/personal/node_modules/.pnpm/@babel+runtime@7.22.3/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/home/krug/Coding/JavaScript/Websites/Personal/personal/node_modules/.pnpm/@babel+runtime@7.22.3/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { CompressedTextureLoader, RGBAFormat, RGB_ETC1_Format, RGBA_S3TC_DXT5_Format, RGBA_S3TC_DXT3_Format, RGB_S3TC_DXT1_Format } from \"three\";\nvar DDSLoader = /*#__PURE__*/function (_CompressedTextureLoa) {\n  _inherits(DDSLoader, _CompressedTextureLoa);\n  var _super = _createSuper(DDSLoader);\n  function DDSLoader(manager) {\n    _classCallCheck(this, DDSLoader);\n    return _super.call(this, manager);\n  }\n  _createClass(DDSLoader, [{\n    key: \"parse\",\n    value: function parse(buffer, loadMipmaps) {\n      var dds = {\n        mipmaps: [],\n        width: 0,\n        height: 0,\n        format: null,\n        mipmapCount: 1\n      };\n      var DDS_MAGIC = 542327876;\n      var DDSD_MIPMAPCOUNT = 131072;\n      var DDSCAPS2_CUBEMAP = 512;\n      var DDSCAPS2_CUBEMAP_POSITIVEX = 1024;\n      var DDSCAPS2_CUBEMAP_NEGATIVEX = 2048;\n      var DDSCAPS2_CUBEMAP_POSITIVEY = 4096;\n      var DDSCAPS2_CUBEMAP_NEGATIVEY = 8192;\n      var DDSCAPS2_CUBEMAP_POSITIVEZ = 16384;\n      var DDSCAPS2_CUBEMAP_NEGATIVEZ = 32768;\n      var DDPF_FOURCC = 4;\n      function fourCCToInt32(value) {\n        return value.charCodeAt(0) + (value.charCodeAt(1) << 8) + (value.charCodeAt(2) << 16) + (value.charCodeAt(3) << 24);\n      }\n      function int32ToFourCC(value) {\n        return String.fromCharCode(value & 255, value >> 8 & 255, value >> 16 & 255, value >> 24 & 255);\n      }\n      function loadARGBMip(buffer2, dataOffset2, width, height) {\n        var dataLength = width * height * 4;\n        var srcBuffer = new Uint8Array(buffer2, dataOffset2, dataLength);\n        var byteArray = new Uint8Array(dataLength);\n        var dst = 0;\n        var src = 0;\n        for (var y = 0; y < height; y++) {\n          for (var x = 0; x < width; x++) {\n            var b = srcBuffer[src];\n            src++;\n            var g = srcBuffer[src];\n            src++;\n            var r = srcBuffer[src];\n            src++;\n            var a = srcBuffer[src];\n            src++;\n            byteArray[dst] = r;\n            dst++;\n            byteArray[dst] = g;\n            dst++;\n            byteArray[dst] = b;\n            dst++;\n            byteArray[dst] = a;\n            dst++;\n          }\n        }\n        return byteArray;\n      }\n      var FOURCC_DXT1 = fourCCToInt32(\"DXT1\");\n      var FOURCC_DXT3 = fourCCToInt32(\"DXT3\");\n      var FOURCC_DXT5 = fourCCToInt32(\"DXT5\");\n      var FOURCC_ETC1 = fourCCToInt32(\"ETC1\");\n      var headerLengthInt = 31;\n      var off_magic = 0;\n      var off_size = 1;\n      var off_flags = 2;\n      var off_height = 3;\n      var off_width = 4;\n      var off_mipmapCount = 7;\n      var off_pfFlags = 20;\n      var off_pfFourCC = 21;\n      var off_RGBBitCount = 22;\n      var off_RBitMask = 23;\n      var off_GBitMask = 24;\n      var off_BBitMask = 25;\n      var off_ABitMask = 26;\n      var off_caps2 = 28;\n      var header = new Int32Array(buffer, 0, headerLengthInt);\n      if (header[off_magic] !== DDS_MAGIC) {\n        console.error(\"THREE.DDSLoader.parse: Invalid magic number in DDS header.\");\n        return dds;\n      }\n      if (!header[off_pfFlags] & DDPF_FOURCC) {\n        console.error(\"THREE.DDSLoader.parse: Unsupported format, must contain a FourCC code.\");\n        return dds;\n      }\n      var blockBytes;\n      var fourCC = header[off_pfFourCC];\n      var isRGBAUncompressed = false;\n      switch (fourCC) {\n        case FOURCC_DXT1:\n          blockBytes = 8;\n          dds.format = RGB_S3TC_DXT1_Format;\n          break;\n        case FOURCC_DXT3:\n          blockBytes = 16;\n          dds.format = RGBA_S3TC_DXT3_Format;\n          break;\n        case FOURCC_DXT5:\n          blockBytes = 16;\n          dds.format = RGBA_S3TC_DXT5_Format;\n          break;\n        case FOURCC_ETC1:\n          blockBytes = 8;\n          dds.format = RGB_ETC1_Format;\n          break;\n        default:\n          if (header[off_RGBBitCount] === 32 && header[off_RBitMask] & 16711680 && header[off_GBitMask] & 65280 && header[off_BBitMask] & 255 && header[off_ABitMask] & 4278190080) {\n            isRGBAUncompressed = true;\n            blockBytes = 64;\n            dds.format = RGBAFormat;\n          } else {\n            console.error(\"THREE.DDSLoader.parse: Unsupported FourCC code \", int32ToFourCC(fourCC));\n            return dds;\n          }\n      }\n      dds.mipmapCount = 1;\n      if (header[off_flags] & DDSD_MIPMAPCOUNT && loadMipmaps !== false) {\n        dds.mipmapCount = Math.max(1, header[off_mipmapCount]);\n      }\n      var caps2 = header[off_caps2];\n      dds.isCubemap = caps2 & DDSCAPS2_CUBEMAP ? true : false;\n      if (dds.isCubemap && (!(caps2 & DDSCAPS2_CUBEMAP_POSITIVEX) || !(caps2 & DDSCAPS2_CUBEMAP_NEGATIVEX) || !(caps2 & DDSCAPS2_CUBEMAP_POSITIVEY) || !(caps2 & DDSCAPS2_CUBEMAP_NEGATIVEY) || !(caps2 & DDSCAPS2_CUBEMAP_POSITIVEZ) || !(caps2 & DDSCAPS2_CUBEMAP_NEGATIVEZ))) {\n        console.error(\"THREE.DDSLoader.parse: Incomplete cubemap faces\");\n        return dds;\n      }\n      dds.width = header[off_width];\n      dds.height = header[off_height];\n      var dataOffset = header[off_size] + 4;\n      var faces = dds.isCubemap ? 6 : 1;\n      for (var face = 0; face < faces; face++) {\n        var width = dds.width;\n        var height = dds.height;\n        for (var i = 0; i < dds.mipmapCount; i++) {\n          var byteArray = void 0,\n            dataLength = void 0;\n          if (isRGBAUncompressed) {\n            byteArray = loadARGBMip(buffer, dataOffset, width, height);\n            dataLength = byteArray.length;\n          } else {\n            dataLength = Math.max(4, width) / 4 * Math.max(4, height) / 4 * blockBytes;\n            byteArray = new Uint8Array(buffer, dataOffset, dataLength);\n          }\n          var mipmap = {\n            data: byteArray,\n            width: width,\n            height: height\n          };\n          dds.mipmaps.push(mipmap);\n          dataOffset += dataLength;\n          width = Math.max(width >> 1, 1);\n          height = Math.max(height >> 1, 1);\n        }\n      }\n      return dds;\n    }\n  }]);\n  return DDSLoader;\n}(CompressedTextureLoader);\nexport { DDSLoader };","map":{"version":3,"names":["CompressedTextureLoader","RGBAFormat","RGB_ETC1_Format","RGBA_S3TC_DXT5_Format","RGBA_S3TC_DXT3_Format","RGB_S3TC_DXT1_Format","DDSLoader","_CompressedTextureLoa","_inherits","_super","_createSuper","manager","_classCallCheck","call","_createClass","key","value","parse","buffer","loadMipmaps","dds","mipmaps","width","height","format","mipmapCount","DDS_MAGIC","DDSD_MIPMAPCOUNT","DDSCAPS2_CUBEMAP","DDSCAPS2_CUBEMAP_POSITIVEX","DDSCAPS2_CUBEMAP_NEGATIVEX","DDSCAPS2_CUBEMAP_POSITIVEY","DDSCAPS2_CUBEMAP_NEGATIVEY","DDSCAPS2_CUBEMAP_POSITIVEZ","DDSCAPS2_CUBEMAP_NEGATIVEZ","DDPF_FOURCC","fourCCToInt32","charCodeAt","int32ToFourCC","String","fromCharCode","loadARGBMip","buffer2","dataOffset2","dataLength","srcBuffer","Uint8Array","byteArray","dst","src","y","x","b","g","r","a","FOURCC_DXT1","FOURCC_DXT3","FOURCC_DXT5","FOURCC_ETC1","headerLengthInt","off_magic","off_size","off_flags","off_height","off_width","off_mipmapCount","off_pfFlags","off_pfFourCC","off_RGBBitCount","off_RBitMask","off_GBitMask","off_BBitMask","off_ABitMask","off_caps2","header","Int32Array","console","error","blockBytes","fourCC","isRGBAUncompressed","Math","max","caps2","isCubemap","dataOffset","faces","face","i","length","mipmap","data","push"],"sources":["/home/krug/Coding/JavaScript/Websites/Personal/personal/node_modules/.pnpm/three-stdlib@2.23.7_three@0.151.3/node_modules/three-stdlib/loaders/DDSLoader.js"],"sourcesContent":["import { CompressedTextureLoader, RGBAFormat, RGB_ETC1_Format, RGBA_S3TC_DXT5_Format, RGBA_S3TC_DXT3_Format, RGB_S3TC_DXT1_Format } from \"three\";\nclass DDSLoader extends CompressedTextureLoader {\n  constructor(manager) {\n    super(manager);\n  }\n  parse(buffer, loadMipmaps) {\n    const dds = { mipmaps: [], width: 0, height: 0, format: null, mipmapCount: 1 };\n    const DDS_MAGIC = 542327876;\n    const DDSD_MIPMAPCOUNT = 131072;\n    const DDSCAPS2_CUBEMAP = 512;\n    const DDSCAPS2_CUBEMAP_POSITIVEX = 1024;\n    const DDSCAPS2_CUBEMAP_NEGATIVEX = 2048;\n    const DDSCAPS2_CUBEMAP_POSITIVEY = 4096;\n    const DDSCAPS2_CUBEMAP_NEGATIVEY = 8192;\n    const DDSCAPS2_CUBEMAP_POSITIVEZ = 16384;\n    const DDSCAPS2_CUBEMAP_NEGATIVEZ = 32768;\n    const DDPF_FOURCC = 4;\n    function fourCCToInt32(value) {\n      return value.charCodeAt(0) + (value.charCodeAt(1) << 8) + (value.charCodeAt(2) << 16) + (value.charCodeAt(3) << 24);\n    }\n    function int32ToFourCC(value) {\n      return String.fromCharCode(value & 255, value >> 8 & 255, value >> 16 & 255, value >> 24 & 255);\n    }\n    function loadARGBMip(buffer2, dataOffset2, width, height) {\n      const dataLength = width * height * 4;\n      const srcBuffer = new Uint8Array(buffer2, dataOffset2, dataLength);\n      const byteArray = new Uint8Array(dataLength);\n      let dst = 0;\n      let src = 0;\n      for (let y = 0; y < height; y++) {\n        for (let x = 0; x < width; x++) {\n          const b = srcBuffer[src];\n          src++;\n          const g = srcBuffer[src];\n          src++;\n          const r = srcBuffer[src];\n          src++;\n          const a = srcBuffer[src];\n          src++;\n          byteArray[dst] = r;\n          dst++;\n          byteArray[dst] = g;\n          dst++;\n          byteArray[dst] = b;\n          dst++;\n          byteArray[dst] = a;\n          dst++;\n        }\n      }\n      return byteArray;\n    }\n    const FOURCC_DXT1 = fourCCToInt32(\"DXT1\");\n    const FOURCC_DXT3 = fourCCToInt32(\"DXT3\");\n    const FOURCC_DXT5 = fourCCToInt32(\"DXT5\");\n    const FOURCC_ETC1 = fourCCToInt32(\"ETC1\");\n    const headerLengthInt = 31;\n    const off_magic = 0;\n    const off_size = 1;\n    const off_flags = 2;\n    const off_height = 3;\n    const off_width = 4;\n    const off_mipmapCount = 7;\n    const off_pfFlags = 20;\n    const off_pfFourCC = 21;\n    const off_RGBBitCount = 22;\n    const off_RBitMask = 23;\n    const off_GBitMask = 24;\n    const off_BBitMask = 25;\n    const off_ABitMask = 26;\n    const off_caps2 = 28;\n    const header = new Int32Array(buffer, 0, headerLengthInt);\n    if (header[off_magic] !== DDS_MAGIC) {\n      console.error(\"THREE.DDSLoader.parse: Invalid magic number in DDS header.\");\n      return dds;\n    }\n    if (!header[off_pfFlags] & DDPF_FOURCC) {\n      console.error(\"THREE.DDSLoader.parse: Unsupported format, must contain a FourCC code.\");\n      return dds;\n    }\n    let blockBytes;\n    const fourCC = header[off_pfFourCC];\n    let isRGBAUncompressed = false;\n    switch (fourCC) {\n      case FOURCC_DXT1:\n        blockBytes = 8;\n        dds.format = RGB_S3TC_DXT1_Format;\n        break;\n      case FOURCC_DXT3:\n        blockBytes = 16;\n        dds.format = RGBA_S3TC_DXT3_Format;\n        break;\n      case FOURCC_DXT5:\n        blockBytes = 16;\n        dds.format = RGBA_S3TC_DXT5_Format;\n        break;\n      case FOURCC_ETC1:\n        blockBytes = 8;\n        dds.format = RGB_ETC1_Format;\n        break;\n      default:\n        if (header[off_RGBBitCount] === 32 && header[off_RBitMask] & 16711680 && header[off_GBitMask] & 65280 && header[off_BBitMask] & 255 && header[off_ABitMask] & 4278190080) {\n          isRGBAUncompressed = true;\n          blockBytes = 64;\n          dds.format = RGBAFormat;\n        } else {\n          console.error(\"THREE.DDSLoader.parse: Unsupported FourCC code \", int32ToFourCC(fourCC));\n          return dds;\n        }\n    }\n    dds.mipmapCount = 1;\n    if (header[off_flags] & DDSD_MIPMAPCOUNT && loadMipmaps !== false) {\n      dds.mipmapCount = Math.max(1, header[off_mipmapCount]);\n    }\n    const caps2 = header[off_caps2];\n    dds.isCubemap = caps2 & DDSCAPS2_CUBEMAP ? true : false;\n    if (dds.isCubemap && (!(caps2 & DDSCAPS2_CUBEMAP_POSITIVEX) || !(caps2 & DDSCAPS2_CUBEMAP_NEGATIVEX) || !(caps2 & DDSCAPS2_CUBEMAP_POSITIVEY) || !(caps2 & DDSCAPS2_CUBEMAP_NEGATIVEY) || !(caps2 & DDSCAPS2_CUBEMAP_POSITIVEZ) || !(caps2 & DDSCAPS2_CUBEMAP_NEGATIVEZ))) {\n      console.error(\"THREE.DDSLoader.parse: Incomplete cubemap faces\");\n      return dds;\n    }\n    dds.width = header[off_width];\n    dds.height = header[off_height];\n    let dataOffset = header[off_size] + 4;\n    const faces = dds.isCubemap ? 6 : 1;\n    for (let face = 0; face < faces; face++) {\n      let width = dds.width;\n      let height = dds.height;\n      for (let i = 0; i < dds.mipmapCount; i++) {\n        let byteArray, dataLength;\n        if (isRGBAUncompressed) {\n          byteArray = loadARGBMip(buffer, dataOffset, width, height);\n          dataLength = byteArray.length;\n        } else {\n          dataLength = Math.max(4, width) / 4 * Math.max(4, height) / 4 * blockBytes;\n          byteArray = new Uint8Array(buffer, dataOffset, dataLength);\n        }\n        const mipmap = { data: byteArray, width, height };\n        dds.mipmaps.push(mipmap);\n        dataOffset += dataLength;\n        width = Math.max(width >> 1, 1);\n        height = Math.max(height >> 1, 1);\n      }\n    }\n    return dds;\n  }\n}\nexport {\n  DDSLoader\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}