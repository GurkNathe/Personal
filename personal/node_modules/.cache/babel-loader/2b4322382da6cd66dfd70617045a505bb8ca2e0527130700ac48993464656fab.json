{"ast":null,"code":"import _createClass from \"/home/krug/Coding/JavaScript/Websites/Personal/personal/node_modules/.pnpm/@babel+runtime@7.22.3/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _classCallCheck from \"/home/krug/Coding/JavaScript/Websites/Personal/personal/node_modules/.pnpm/@babel+runtime@7.22.3/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport { Matrix3, OrthographicCamera, Scene, StereoCamera, LinearFilter, NearestFilter, RGBAFormat, WebGLRenderTarget, ShaderMaterial, Mesh, PlaneGeometry } from \"three\";\nvar AnaglyphEffect = /*#__PURE__*/_createClass(function AnaglyphEffect(renderer) {\n  var width = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 512;\n  var height = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 512;\n  _classCallCheck(this, AnaglyphEffect);\n  this.colorMatrixLeft = new Matrix3().fromArray([0.4561, -0.0400822, -0.0152161, 0.500484, -0.0378246, -0.0205971, 0.176381, -0.0157589, -546856e-8]);\n  this.colorMatrixRight = new Matrix3().fromArray([-0.0434706, 0.378476, -0.0721527, -0.0879388, 0.73364, -0.112961, -155529e-8, -0.0184503, 1.2264]);\n  var _camera = new OrthographicCamera(-1, 1, 1, -1, 0, 1);\n  var _scene = new Scene();\n  var _stereo = new StereoCamera();\n  var _params = {\n    minFilter: LinearFilter,\n    magFilter: NearestFilter,\n    format: RGBAFormat\n  };\n  var _renderTargetL = new WebGLRenderTarget(width, height, _params);\n  var _renderTargetR = new WebGLRenderTarget(width, height, _params);\n  var _material = new ShaderMaterial({\n    uniforms: {\n      mapLeft: {\n        value: _renderTargetL.texture\n      },\n      mapRight: {\n        value: _renderTargetR.texture\n      },\n      colorMatrixLeft: {\n        value: this.colorMatrixLeft\n      },\n      colorMatrixRight: {\n        value: this.colorMatrixRight\n      }\n    },\n    vertexShader: [\"varying vec2 vUv;\", \"void main() {\", \"\tvUv = vec2( uv.x, uv.y );\", \"\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\", \"}\"].join(\"\\n\"),\n    fragmentShader: [\"uniform sampler2D mapLeft;\", \"uniform sampler2D mapRight;\", \"varying vec2 vUv;\", \"uniform mat3 colorMatrixLeft;\", \"uniform mat3 colorMatrixRight;\", \"void main() {\", \"\tvec2 uv = vUv;\", \"\tvec4 colorL = texture2D( mapLeft, uv );\", \"\tvec4 colorR = texture2D( mapRight, uv );\", \"\tvec3 color = clamp(\", \"\t\t\tcolorMatrixLeft * colorL.rgb +\", \"\t\t\tcolorMatrixRight * colorR.rgb, 0., 1. );\", \"\tgl_FragColor = vec4(\", \"\t\t\tcolor.r, color.g, color.b,\", \"\t\t\tmax( colorL.a, colorR.a ) );\", \"\t#include <tonemapping_fragment>\", \"\t#include <encodings_fragment>\", \"}\"].join(\"\\n\")\n  });\n  var _mesh = new Mesh(new PlaneGeometry(2, 2), _material);\n  _scene.add(_mesh);\n  this.setSize = function (width2, height2) {\n    renderer.setSize(width2, height2);\n    var pixelRatio = renderer.getPixelRatio();\n    _renderTargetL.setSize(width2 * pixelRatio, height2 * pixelRatio);\n    _renderTargetR.setSize(width2 * pixelRatio, height2 * pixelRatio);\n  };\n  this.render = function (scene, camera) {\n    var currentRenderTarget = renderer.getRenderTarget();\n    if (scene.matrixWorldAutoUpdate === true) scene.updateMatrixWorld();\n    if (camera.parent === null && camera.matrixWorldAutoUpdate === true) camera.updateMatrixWorld();\n    _stereo.update(camera);\n    renderer.setRenderTarget(_renderTargetL);\n    renderer.clear();\n    renderer.render(scene, _stereo.cameraL);\n    renderer.setRenderTarget(_renderTargetR);\n    renderer.clear();\n    renderer.render(scene, _stereo.cameraR);\n    renderer.setRenderTarget(null);\n    renderer.render(_scene, _camera);\n    renderer.setRenderTarget(currentRenderTarget);\n  };\n  this.dispose = function () {\n    _renderTargetL.dispose();\n    _renderTargetR.dispose();\n    _mesh.geometry.dispose();\n    _mesh.material.dispose();\n  };\n});\nexport { AnaglyphEffect };","map":{"version":3,"names":["Matrix3","OrthographicCamera","Scene","StereoCamera","LinearFilter","NearestFilter","RGBAFormat","WebGLRenderTarget","ShaderMaterial","Mesh","PlaneGeometry","AnaglyphEffect","_createClass","renderer","width","arguments","length","undefined","height","_classCallCheck","colorMatrixLeft","fromArray","colorMatrixRight","_camera","_scene","_stereo","_params","minFilter","magFilter","format","_renderTargetL","_renderTargetR","_material","uniforms","mapLeft","value","texture","mapRight","vertexShader","join","fragmentShader","_mesh","add","setSize","width2","height2","pixelRatio","getPixelRatio","render","scene","camera","currentRenderTarget","getRenderTarget","matrixWorldAutoUpdate","updateMatrixWorld","parent","update","setRenderTarget","clear","cameraL","cameraR","dispose","geometry","material"],"sources":["/home/krug/Coding/JavaScript/Websites/Personal/personal/node_modules/.pnpm/three-stdlib@2.23.7_three@0.151.3/node_modules/three-stdlib/effects/AnaglyphEffect.js"],"sourcesContent":["import { Matrix3, OrthographicCamera, Scene, StereoCamera, LinearFilter, NearestFilter, RGBAFormat, WebGLRenderTarget, ShaderMaterial, Mesh, PlaneGeometry } from \"three\";\nclass AnaglyphEffect {\n  constructor(renderer, width = 512, height = 512) {\n    this.colorMatrixLeft = new Matrix3().fromArray([\n      0.4561,\n      -0.0400822,\n      -0.0152161,\n      0.500484,\n      -0.0378246,\n      -0.0205971,\n      0.176381,\n      -0.0157589,\n      -546856e-8\n    ]);\n    this.colorMatrixRight = new Matrix3().fromArray([\n      -0.0434706,\n      0.378476,\n      -0.0721527,\n      -0.0879388,\n      0.73364,\n      -0.112961,\n      -155529e-8,\n      -0.0184503,\n      1.2264\n    ]);\n    const _camera = new OrthographicCamera(-1, 1, 1, -1, 0, 1);\n    const _scene = new Scene();\n    const _stereo = new StereoCamera();\n    const _params = { minFilter: LinearFilter, magFilter: NearestFilter, format: RGBAFormat };\n    const _renderTargetL = new WebGLRenderTarget(width, height, _params);\n    const _renderTargetR = new WebGLRenderTarget(width, height, _params);\n    const _material = new ShaderMaterial({\n      uniforms: {\n        mapLeft: { value: _renderTargetL.texture },\n        mapRight: { value: _renderTargetR.texture },\n        colorMatrixLeft: { value: this.colorMatrixLeft },\n        colorMatrixRight: { value: this.colorMatrixRight }\n      },\n      vertexShader: [\n        \"varying vec2 vUv;\",\n        \"void main() {\",\n        \"\tvUv = vec2( uv.x, uv.y );\",\n        \"\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\",\n        \"}\"\n      ].join(\"\\n\"),\n      fragmentShader: [\n        \"uniform sampler2D mapLeft;\",\n        \"uniform sampler2D mapRight;\",\n        \"varying vec2 vUv;\",\n        \"uniform mat3 colorMatrixLeft;\",\n        \"uniform mat3 colorMatrixRight;\",\n        \"void main() {\",\n        \"\tvec2 uv = vUv;\",\n        \"\tvec4 colorL = texture2D( mapLeft, uv );\",\n        \"\tvec4 colorR = texture2D( mapRight, uv );\",\n        \"\tvec3 color = clamp(\",\n        \"\t\t\tcolorMatrixLeft * colorL.rgb +\",\n        \"\t\t\tcolorMatrixRight * colorR.rgb, 0., 1. );\",\n        \"\tgl_FragColor = vec4(\",\n        \"\t\t\tcolor.r, color.g, color.b,\",\n        \"\t\t\tmax( colorL.a, colorR.a ) );\",\n        \"\t#include <tonemapping_fragment>\",\n        \"\t#include <encodings_fragment>\",\n        \"}\"\n      ].join(\"\\n\")\n    });\n    const _mesh = new Mesh(new PlaneGeometry(2, 2), _material);\n    _scene.add(_mesh);\n    this.setSize = function(width2, height2) {\n      renderer.setSize(width2, height2);\n      const pixelRatio = renderer.getPixelRatio();\n      _renderTargetL.setSize(width2 * pixelRatio, height2 * pixelRatio);\n      _renderTargetR.setSize(width2 * pixelRatio, height2 * pixelRatio);\n    };\n    this.render = function(scene, camera) {\n      const currentRenderTarget = renderer.getRenderTarget();\n      if (scene.matrixWorldAutoUpdate === true)\n        scene.updateMatrixWorld();\n      if (camera.parent === null && camera.matrixWorldAutoUpdate === true)\n        camera.updateMatrixWorld();\n      _stereo.update(camera);\n      renderer.setRenderTarget(_renderTargetL);\n      renderer.clear();\n      renderer.render(scene, _stereo.cameraL);\n      renderer.setRenderTarget(_renderTargetR);\n      renderer.clear();\n      renderer.render(scene, _stereo.cameraR);\n      renderer.setRenderTarget(null);\n      renderer.render(_scene, _camera);\n      renderer.setRenderTarget(currentRenderTarget);\n    };\n    this.dispose = function() {\n      _renderTargetL.dispose();\n      _renderTargetR.dispose();\n      _mesh.geometry.dispose();\n      _mesh.material.dispose();\n    };\n  }\n}\nexport {\n  AnaglyphEffect\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}