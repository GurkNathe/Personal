{"ast":null,"code":"import { Loader, FileLoader, Vector3, Matrix4 } from \"three\";\nimport { gunzipSync } from \"fflate\";\nimport { Volume } from \"../misc/Volume.js\";\nclass NRRDLoader extends Loader {\n  constructor(manager) {\n    super(manager);\n  }\n  load(url, onLoad, onProgress, onError) {\n    const scope = this;\n    const loader = new FileLoader(scope.manager);\n    loader.setPath(scope.path);\n    loader.setResponseType(\"arraybuffer\");\n    loader.setRequestHeader(scope.requestHeader);\n    loader.setWithCredentials(scope.withCredentials);\n    loader.load(url, function (data) {\n      try {\n        onLoad(scope.parse(data));\n      } catch (e) {\n        if (onError) {\n          onError(e);\n        } else {\n          console.error(e);\n        }\n        scope.manager.itemError(url);\n      }\n    }, onProgress, onError);\n  }\n  parse(data) {\n    let _data = data;\n    let _dataPointer = 0;\n    const _nativeLittleEndian = new Int8Array(new Int16Array([1]).buffer)[0] > 0;\n    const _littleEndian = true;\n    const headerObject = {};\n    function scan(type, chunks) {\n      if (chunks === void 0 || chunks === null) {\n        chunks = 1;\n      }\n      let _chunkSize = 1;\n      let _array_type = Uint8Array;\n      switch (type) {\n        case \"uchar\":\n          break;\n        case \"schar\":\n          _array_type = Int8Array;\n          break;\n        case \"ushort\":\n          _array_type = Uint16Array;\n          _chunkSize = 2;\n          break;\n        case \"sshort\":\n          _array_type = Int16Array;\n          _chunkSize = 2;\n          break;\n        case \"uint\":\n          _array_type = Uint32Array;\n          _chunkSize = 4;\n          break;\n        case \"sint\":\n          _array_type = Int32Array;\n          _chunkSize = 4;\n          break;\n        case \"float\":\n          _array_type = Float32Array;\n          _chunkSize = 4;\n          break;\n        case \"complex\":\n          _array_type = Float64Array;\n          _chunkSize = 8;\n          break;\n        case \"double\":\n          _array_type = Float64Array;\n          _chunkSize = 8;\n          break;\n      }\n      let _bytes2 = new _array_type(_data.slice(_dataPointer, _dataPointer += chunks * _chunkSize));\n      if (_nativeLittleEndian != _littleEndian) {\n        _bytes2 = flipEndianness(_bytes2, _chunkSize);\n      }\n      if (chunks == 1) {\n        return _bytes2[0];\n      }\n      return _bytes2;\n    }\n    function flipEndianness(array, chunkSize) {\n      const u8 = new Uint8Array(array.buffer, array.byteOffset, array.byteLength);\n      for (let i2 = 0; i2 < array.byteLength; i2 += chunkSize) {\n        for (let j = i2 + chunkSize - 1, k = i2; j > k; j--, k++) {\n          const tmp = u8[k];\n          u8[k] = u8[j];\n          u8[j] = tmp;\n        }\n      }\n      return array;\n    }\n    function parseHeader(header) {\n      let data2, field, fn, i2, l, m, _i, _len;\n      const lines = header.split(/\\r?\\n/);\n      for (_i = 0, _len = lines.length; _i < _len; _i++) {\n        l = lines[_i];\n        if (l.match(/NRRD\\d+/)) {\n          headerObject.isNrrd = true;\n        } else if (l.match(/^#/)) {} else if (m = l.match(/(.*):(.*)/)) {\n          field = m[1].trim();\n          data2 = m[2].trim();\n          fn = _fieldFunctions[field];\n          if (fn) {\n            fn.call(headerObject, data2);\n          } else {\n            headerObject[field] = data2;\n          }\n        }\n      }\n      if (!headerObject.isNrrd) {\n        throw new Error(\"Not an NRRD file\");\n      }\n      if (headerObject.encoding === \"bz2\" || headerObject.encoding === \"bzip2\") {\n        throw new Error(\"Bzip is not supported\");\n      }\n      if (!headerObject.vectors) {\n        headerObject.vectors = [new Vector3(1, 0, 0), new Vector3(0, 1, 0), new Vector3(0, 0, 1)];\n        if (headerObject.spacings) {\n          for (i2 = 0; i2 <= 2; i2++) {\n            if (!isNaN(headerObject.spacings[i2])) {\n              headerObject.vectors[i2].multiplyScalar(headerObject.spacings[i2]);\n            }\n          }\n        }\n      }\n    }\n    function parseDataAsText(data2, start, end) {\n      let number = \"\";\n      start = start || 0;\n      end = end || data2.length;\n      let value;\n      const lengthOfTheResult = headerObject.sizes.reduce(function (previous, current) {\n        return previous * current;\n      }, 1);\n      let base = 10;\n      if (headerObject.encoding === \"hex\") {\n        base = 16;\n      }\n      const result = new headerObject.__array(lengthOfTheResult);\n      let resultIndex = 0;\n      let parsingFunction = parseInt;\n      if (headerObject.__array === Float32Array || headerObject.__array === Float64Array) {\n        parsingFunction = parseFloat;\n      }\n      for (let i2 = start; i2 < end; i2++) {\n        value = data2[i2];\n        if ((value < 9 || value > 13) && value !== 32) {\n          number += String.fromCharCode(value);\n        } else {\n          if (number !== \"\") {\n            result[resultIndex] = parsingFunction(number, base);\n            resultIndex++;\n          }\n          number = \"\";\n        }\n      }\n      if (number !== \"\") {\n        result[resultIndex] = parsingFunction(number, base);\n        resultIndex++;\n      }\n      return result;\n    }\n    const _bytes = scan(\"uchar\", data.byteLength);\n    const _length = _bytes.length;\n    let _header = null;\n    let _data_start = 0;\n    let i;\n    for (i = 1; i < _length; i++) {\n      if (_bytes[i - 1] == 10 && _bytes[i] == 10) {\n        _header = this.parseChars(_bytes, 0, i - 2);\n        _data_start = i + 1;\n        break;\n      }\n    }\n    parseHeader(_header);\n    _data = _bytes.subarray(_data_start);\n    if (headerObject.encoding.substring(0, 2) === \"gz\") {\n      _data = gunzipSync(new Uint8Array(_data));\n    } else if (headerObject.encoding === \"ascii\" || headerObject.encoding === \"text\" || headerObject.encoding === \"txt\" || headerObject.encoding === \"hex\") {\n      _data = parseDataAsText(_data);\n    } else if (headerObject.encoding === \"raw\") {\n      const _copy = new Uint8Array(_data.length);\n      for (let i2 = 0; i2 < _data.length; i2++) {\n        _copy[i2] = _data[i2];\n      }\n      _data = _copy;\n    }\n    _data = _data.buffer;\n    const volume = new Volume();\n    volume.header = headerObject;\n    volume.data = new headerObject.__array(_data);\n    const min_max = volume.computeMinMax();\n    const min = min_max[0];\n    const max = min_max[1];\n    volume.windowLow = min;\n    volume.windowHigh = max;\n    volume.dimensions = [headerObject.sizes[0], headerObject.sizes[1], headerObject.sizes[2]];\n    volume.xLength = volume.dimensions[0];\n    volume.yLength = volume.dimensions[1];\n    volume.zLength = volume.dimensions[2];\n    const spacingX = new Vector3(headerObject.vectors[0][0], headerObject.vectors[0][1], headerObject.vectors[0][2]).length();\n    const spacingY = new Vector3(headerObject.vectors[1][0], headerObject.vectors[1][1], headerObject.vectors[1][2]).length();\n    const spacingZ = new Vector3(headerObject.vectors[2][0], headerObject.vectors[2][1], headerObject.vectors[2][2]).length();\n    volume.spacing = [spacingX, spacingY, spacingZ];\n    volume.matrix = new Matrix4();\n    let _spaceX = 1;\n    let _spaceY = 1;\n    const _spaceZ = 1;\n    if (headerObject.space == \"left-posterior-superior\") {\n      _spaceX = -1;\n      _spaceY = -1;\n    } else if (headerObject.space === \"left-anterior-superior\") {\n      _spaceX = -1;\n    }\n    if (!headerObject.vectors) {\n      volume.matrix.set(_spaceX, 0, 0, 0, 0, _spaceY, 0, 0, 0, 0, _spaceZ, 0, 0, 0, 0, 1);\n    } else {\n      const v = headerObject.vectors;\n      volume.matrix.set(_spaceX * v[0][0], _spaceX * v[1][0], _spaceX * v[2][0], 0, _spaceY * v[0][1], _spaceY * v[1][1], _spaceY * v[2][1], 0, _spaceZ * v[0][2], _spaceZ * v[1][2], _spaceZ * v[2][2], 0, 0, 0, 0, 1);\n    }\n    volume.inverseMatrix = new Matrix4();\n    volume.inverseMatrix.copy(volume.matrix).invert();\n    volume.RASDimensions = new Vector3(volume.xLength, volume.yLength, volume.zLength).applyMatrix4(volume.matrix).round().toArray().map(Math.abs);\n    if (volume.lowerThreshold === -Infinity) {\n      volume.lowerThreshold = min;\n    }\n    if (volume.upperThreshold === Infinity) {\n      volume.upperThreshold = max;\n    }\n    return volume;\n  }\n  parseChars(array, start, end) {\n    if (start === void 0) {\n      start = 0;\n    }\n    if (end === void 0) {\n      end = array.length;\n    }\n    let output = \"\";\n    let i = 0;\n    for (i = start; i < end; ++i) {\n      output += String.fromCharCode(array[i]);\n    }\n    return output;\n  }\n}\nconst _fieldFunctions = {\n  type: function (data) {\n    switch (data) {\n      case \"uchar\":\n      case \"unsigned char\":\n      case \"uint8\":\n      case \"uint8_t\":\n        this.__array = Uint8Array;\n        break;\n      case \"signed char\":\n      case \"int8\":\n      case \"int8_t\":\n        this.__array = Int8Array;\n        break;\n      case \"short\":\n      case \"short int\":\n      case \"signed short\":\n      case \"signed short int\":\n      case \"int16\":\n      case \"int16_t\":\n        this.__array = Int16Array;\n        break;\n      case \"ushort\":\n      case \"unsigned short\":\n      case \"unsigned short int\":\n      case \"uint16\":\n      case \"uint16_t\":\n        this.__array = Uint16Array;\n        break;\n      case \"int\":\n      case \"signed int\":\n      case \"int32\":\n      case \"int32_t\":\n        this.__array = Int32Array;\n        break;\n      case \"uint\":\n      case \"unsigned int\":\n      case \"uint32\":\n      case \"uint32_t\":\n        this.__array = Uint32Array;\n        break;\n      case \"float\":\n        this.__array = Float32Array;\n        break;\n      case \"double\":\n        this.__array = Float64Array;\n        break;\n      default:\n        throw new Error(\"Unsupported NRRD data type: \" + data);\n    }\n    return this.type = data;\n  },\n  endian: function (data) {\n    return this.endian = data;\n  },\n  encoding: function (data) {\n    return this.encoding = data;\n  },\n  dimension: function (data) {\n    return this.dim = parseInt(data, 10);\n  },\n  sizes: function (data) {\n    let i;\n    return this.sizes = function () {\n      const _ref = data.split(/\\s+/);\n      const _results = [];\n      for (let _i = 0, _len = _ref.length; _i < _len; _i++) {\n        i = _ref[_i];\n        _results.push(parseInt(i, 10));\n      }\n      return _results;\n    }();\n  },\n  space: function (data) {\n    return this.space = data;\n  },\n  \"space origin\": function (data) {\n    return this.space_origin = data.split(\"(\")[1].split(\")\")[0].split(\",\");\n  },\n  \"space directions\": function (data) {\n    let f, v;\n    const parts = data.match(/\\(.*?\\)/g);\n    return this.vectors = function () {\n      const _results = [];\n      for (let _i = 0, _len = parts.length; _i < _len; _i++) {\n        v = parts[_i];\n        _results.push(function () {\n          const _ref = v.slice(1, -1).split(/,/);\n          const _results2 = [];\n          for (let _j = 0, _len2 = _ref.length; _j < _len2; _j++) {\n            f = _ref[_j];\n            _results2.push(parseFloat(f));\n          }\n          return _results2;\n        }());\n      }\n      return _results;\n    }();\n  },\n  spacings: function (data) {\n    let f;\n    const parts = data.split(/\\s+/);\n    return this.spacings = function () {\n      const _results = [];\n      for (let _i = 0, _len = parts.length; _i < _len; _i++) {\n        f = parts[_i];\n        _results.push(parseFloat(f));\n      }\n      return _results;\n    }();\n  }\n};\nexport { NRRDLoader };","map":{"version":3,"names":["Loader","FileLoader","Vector3","Matrix4","gunzipSync","Volume","NRRDLoader","constructor","manager","load","url","onLoad","onProgress","onError","scope","loader","setPath","path","setResponseType","setRequestHeader","requestHeader","setWithCredentials","withCredentials","data","parse","e","console","error","itemError","_data","_dataPointer","_nativeLittleEndian","Int8Array","Int16Array","buffer","_littleEndian","headerObject","scan","type","chunks","_chunkSize","_array_type","Uint8Array","Uint16Array","Uint32Array","Int32Array","Float32Array","Float64Array","_bytes2","slice","flipEndianness","array","chunkSize","u8","byteOffset","byteLength","i2","j","k","tmp","parseHeader","header","data2","field","fn","l","m","_i","_len","lines","split","length","match","isNrrd","trim","_fieldFunctions","call","Error","encoding","vectors","spacings","isNaN","multiplyScalar","parseDataAsText","start","end","number","value","lengthOfTheResult","sizes","reduce","previous","current","base","result","__array","resultIndex","parsingFunction","parseInt","parseFloat","String","fromCharCode","_bytes","_length","_header","_data_start","i","parseChars","subarray","substring","_copy","volume","min_max","computeMinMax","min","max","windowLow","windowHigh","dimensions","xLength","yLength","zLength","spacingX","spacingY","spacingZ","spacing","matrix","_spaceX","_spaceY","_spaceZ","space","set","v","inverseMatrix","copy","invert","RASDimensions","applyMatrix4","round","toArray","map","Math","abs","lowerThreshold","Infinity","upperThreshold","output","endian","dimension","dim","_ref","_results","push","space origin","space_origin","space directions","f","parts","_results2","_j","_len2"],"sources":["/home/krug/Coding/JavaScript/Websites/Personal/personal/node_modules/.pnpm/three-stdlib@2.23.7_three@0.151.3/node_modules/three-stdlib/loaders/NRRDLoader.js"],"sourcesContent":["import { Loader, FileLoader, Vector3, Matrix4 } from \"three\";\nimport { gunzipSync } from \"fflate\";\nimport { Volume } from \"../misc/Volume.js\";\nclass NRRDLoader extends Loader {\n  constructor(manager) {\n    super(manager);\n  }\n  load(url, onLoad, onProgress, onError) {\n    const scope = this;\n    const loader = new FileLoader(scope.manager);\n    loader.setPath(scope.path);\n    loader.setResponseType(\"arraybuffer\");\n    loader.setRequestHeader(scope.requestHeader);\n    loader.setWithCredentials(scope.withCredentials);\n    loader.load(\n      url,\n      function(data) {\n        try {\n          onLoad(scope.parse(data));\n        } catch (e) {\n          if (onError) {\n            onError(e);\n          } else {\n            console.error(e);\n          }\n          scope.manager.itemError(url);\n        }\n      },\n      onProgress,\n      onError\n    );\n  }\n  parse(data) {\n    let _data = data;\n    let _dataPointer = 0;\n    const _nativeLittleEndian = new Int8Array(new Int16Array([1]).buffer)[0] > 0;\n    const _littleEndian = true;\n    const headerObject = {};\n    function scan(type, chunks) {\n      if (chunks === void 0 || chunks === null) {\n        chunks = 1;\n      }\n      let _chunkSize = 1;\n      let _array_type = Uint8Array;\n      switch (type) {\n        case \"uchar\":\n          break;\n        case \"schar\":\n          _array_type = Int8Array;\n          break;\n        case \"ushort\":\n          _array_type = Uint16Array;\n          _chunkSize = 2;\n          break;\n        case \"sshort\":\n          _array_type = Int16Array;\n          _chunkSize = 2;\n          break;\n        case \"uint\":\n          _array_type = Uint32Array;\n          _chunkSize = 4;\n          break;\n        case \"sint\":\n          _array_type = Int32Array;\n          _chunkSize = 4;\n          break;\n        case \"float\":\n          _array_type = Float32Array;\n          _chunkSize = 4;\n          break;\n        case \"complex\":\n          _array_type = Float64Array;\n          _chunkSize = 8;\n          break;\n        case \"double\":\n          _array_type = Float64Array;\n          _chunkSize = 8;\n          break;\n      }\n      let _bytes2 = new _array_type(_data.slice(_dataPointer, _dataPointer += chunks * _chunkSize));\n      if (_nativeLittleEndian != _littleEndian) {\n        _bytes2 = flipEndianness(_bytes2, _chunkSize);\n      }\n      if (chunks == 1) {\n        return _bytes2[0];\n      }\n      return _bytes2;\n    }\n    function flipEndianness(array, chunkSize) {\n      const u8 = new Uint8Array(array.buffer, array.byteOffset, array.byteLength);\n      for (let i2 = 0; i2 < array.byteLength; i2 += chunkSize) {\n        for (let j = i2 + chunkSize - 1, k = i2; j > k; j--, k++) {\n          const tmp = u8[k];\n          u8[k] = u8[j];\n          u8[j] = tmp;\n        }\n      }\n      return array;\n    }\n    function parseHeader(header) {\n      let data2, field, fn, i2, l, m, _i, _len;\n      const lines = header.split(/\\r?\\n/);\n      for (_i = 0, _len = lines.length; _i < _len; _i++) {\n        l = lines[_i];\n        if (l.match(/NRRD\\d+/)) {\n          headerObject.isNrrd = true;\n        } else if (l.match(/^#/)) {\n        } else if (m = l.match(/(.*):(.*)/)) {\n          field = m[1].trim();\n          data2 = m[2].trim();\n          fn = _fieldFunctions[field];\n          if (fn) {\n            fn.call(headerObject, data2);\n          } else {\n            headerObject[field] = data2;\n          }\n        }\n      }\n      if (!headerObject.isNrrd) {\n        throw new Error(\"Not an NRRD file\");\n      }\n      if (headerObject.encoding === \"bz2\" || headerObject.encoding === \"bzip2\") {\n        throw new Error(\"Bzip is not supported\");\n      }\n      if (!headerObject.vectors) {\n        headerObject.vectors = [new Vector3(1, 0, 0), new Vector3(0, 1, 0), new Vector3(0, 0, 1)];\n        if (headerObject.spacings) {\n          for (i2 = 0; i2 <= 2; i2++) {\n            if (!isNaN(headerObject.spacings[i2])) {\n              headerObject.vectors[i2].multiplyScalar(headerObject.spacings[i2]);\n            }\n          }\n        }\n      }\n    }\n    function parseDataAsText(data2, start, end) {\n      let number = \"\";\n      start = start || 0;\n      end = end || data2.length;\n      let value;\n      const lengthOfTheResult = headerObject.sizes.reduce(function(previous, current) {\n        return previous * current;\n      }, 1);\n      let base = 10;\n      if (headerObject.encoding === \"hex\") {\n        base = 16;\n      }\n      const result = new headerObject.__array(lengthOfTheResult);\n      let resultIndex = 0;\n      let parsingFunction = parseInt;\n      if (headerObject.__array === Float32Array || headerObject.__array === Float64Array) {\n        parsingFunction = parseFloat;\n      }\n      for (let i2 = start; i2 < end; i2++) {\n        value = data2[i2];\n        if ((value < 9 || value > 13) && value !== 32) {\n          number += String.fromCharCode(value);\n        } else {\n          if (number !== \"\") {\n            result[resultIndex] = parsingFunction(number, base);\n            resultIndex++;\n          }\n          number = \"\";\n        }\n      }\n      if (number !== \"\") {\n        result[resultIndex] = parsingFunction(number, base);\n        resultIndex++;\n      }\n      return result;\n    }\n    const _bytes = scan(\"uchar\", data.byteLength);\n    const _length = _bytes.length;\n    let _header = null;\n    let _data_start = 0;\n    let i;\n    for (i = 1; i < _length; i++) {\n      if (_bytes[i - 1] == 10 && _bytes[i] == 10) {\n        _header = this.parseChars(_bytes, 0, i - 2);\n        _data_start = i + 1;\n        break;\n      }\n    }\n    parseHeader(_header);\n    _data = _bytes.subarray(_data_start);\n    if (headerObject.encoding.substring(0, 2) === \"gz\") {\n      _data = gunzipSync(new Uint8Array(_data));\n    } else if (headerObject.encoding === \"ascii\" || headerObject.encoding === \"text\" || headerObject.encoding === \"txt\" || headerObject.encoding === \"hex\") {\n      _data = parseDataAsText(_data);\n    } else if (headerObject.encoding === \"raw\") {\n      const _copy = new Uint8Array(_data.length);\n      for (let i2 = 0; i2 < _data.length; i2++) {\n        _copy[i2] = _data[i2];\n      }\n      _data = _copy;\n    }\n    _data = _data.buffer;\n    const volume = new Volume();\n    volume.header = headerObject;\n    volume.data = new headerObject.__array(_data);\n    const min_max = volume.computeMinMax();\n    const min = min_max[0];\n    const max = min_max[1];\n    volume.windowLow = min;\n    volume.windowHigh = max;\n    volume.dimensions = [headerObject.sizes[0], headerObject.sizes[1], headerObject.sizes[2]];\n    volume.xLength = volume.dimensions[0];\n    volume.yLength = volume.dimensions[1];\n    volume.zLength = volume.dimensions[2];\n    const spacingX = new Vector3(\n      headerObject.vectors[0][0],\n      headerObject.vectors[0][1],\n      headerObject.vectors[0][2]\n    ).length();\n    const spacingY = new Vector3(\n      headerObject.vectors[1][0],\n      headerObject.vectors[1][1],\n      headerObject.vectors[1][2]\n    ).length();\n    const spacingZ = new Vector3(\n      headerObject.vectors[2][0],\n      headerObject.vectors[2][1],\n      headerObject.vectors[2][2]\n    ).length();\n    volume.spacing = [spacingX, spacingY, spacingZ];\n    volume.matrix = new Matrix4();\n    let _spaceX = 1;\n    let _spaceY = 1;\n    const _spaceZ = 1;\n    if (headerObject.space == \"left-posterior-superior\") {\n      _spaceX = -1;\n      _spaceY = -1;\n    } else if (headerObject.space === \"left-anterior-superior\") {\n      _spaceX = -1;\n    }\n    if (!headerObject.vectors) {\n      volume.matrix.set(_spaceX, 0, 0, 0, 0, _spaceY, 0, 0, 0, 0, _spaceZ, 0, 0, 0, 0, 1);\n    } else {\n      const v = headerObject.vectors;\n      volume.matrix.set(\n        _spaceX * v[0][0],\n        _spaceX * v[1][0],\n        _spaceX * v[2][0],\n        0,\n        _spaceY * v[0][1],\n        _spaceY * v[1][1],\n        _spaceY * v[2][1],\n        0,\n        _spaceZ * v[0][2],\n        _spaceZ * v[1][2],\n        _spaceZ * v[2][2],\n        0,\n        0,\n        0,\n        0,\n        1\n      );\n    }\n    volume.inverseMatrix = new Matrix4();\n    volume.inverseMatrix.copy(volume.matrix).invert();\n    volume.RASDimensions = new Vector3(volume.xLength, volume.yLength, volume.zLength).applyMatrix4(volume.matrix).round().toArray().map(Math.abs);\n    if (volume.lowerThreshold === -Infinity) {\n      volume.lowerThreshold = min;\n    }\n    if (volume.upperThreshold === Infinity) {\n      volume.upperThreshold = max;\n    }\n    return volume;\n  }\n  parseChars(array, start, end) {\n    if (start === void 0) {\n      start = 0;\n    }\n    if (end === void 0) {\n      end = array.length;\n    }\n    let output = \"\";\n    let i = 0;\n    for (i = start; i < end; ++i) {\n      output += String.fromCharCode(array[i]);\n    }\n    return output;\n  }\n}\nconst _fieldFunctions = {\n  type: function(data) {\n    switch (data) {\n      case \"uchar\":\n      case \"unsigned char\":\n      case \"uint8\":\n      case \"uint8_t\":\n        this.__array = Uint8Array;\n        break;\n      case \"signed char\":\n      case \"int8\":\n      case \"int8_t\":\n        this.__array = Int8Array;\n        break;\n      case \"short\":\n      case \"short int\":\n      case \"signed short\":\n      case \"signed short int\":\n      case \"int16\":\n      case \"int16_t\":\n        this.__array = Int16Array;\n        break;\n      case \"ushort\":\n      case \"unsigned short\":\n      case \"unsigned short int\":\n      case \"uint16\":\n      case \"uint16_t\":\n        this.__array = Uint16Array;\n        break;\n      case \"int\":\n      case \"signed int\":\n      case \"int32\":\n      case \"int32_t\":\n        this.__array = Int32Array;\n        break;\n      case \"uint\":\n      case \"unsigned int\":\n      case \"uint32\":\n      case \"uint32_t\":\n        this.__array = Uint32Array;\n        break;\n      case \"float\":\n        this.__array = Float32Array;\n        break;\n      case \"double\":\n        this.__array = Float64Array;\n        break;\n      default:\n        throw new Error(\"Unsupported NRRD data type: \" + data);\n    }\n    return this.type = data;\n  },\n  endian: function(data) {\n    return this.endian = data;\n  },\n  encoding: function(data) {\n    return this.encoding = data;\n  },\n  dimension: function(data) {\n    return this.dim = parseInt(data, 10);\n  },\n  sizes: function(data) {\n    let i;\n    return this.sizes = function() {\n      const _ref = data.split(/\\s+/);\n      const _results = [];\n      for (let _i = 0, _len = _ref.length; _i < _len; _i++) {\n        i = _ref[_i];\n        _results.push(parseInt(i, 10));\n      }\n      return _results;\n    }();\n  },\n  space: function(data) {\n    return this.space = data;\n  },\n  \"space origin\": function(data) {\n    return this.space_origin = data.split(\"(\")[1].split(\")\")[0].split(\",\");\n  },\n  \"space directions\": function(data) {\n    let f, v;\n    const parts = data.match(/\\(.*?\\)/g);\n    return this.vectors = function() {\n      const _results = [];\n      for (let _i = 0, _len = parts.length; _i < _len; _i++) {\n        v = parts[_i];\n        _results.push(\n          function() {\n            const _ref = v.slice(1, -1).split(/,/);\n            const _results2 = [];\n            for (let _j = 0, _len2 = _ref.length; _j < _len2; _j++) {\n              f = _ref[_j];\n              _results2.push(parseFloat(f));\n            }\n            return _results2;\n          }()\n        );\n      }\n      return _results;\n    }();\n  },\n  spacings: function(data) {\n    let f;\n    const parts = data.split(/\\s+/);\n    return this.spacings = function() {\n      const _results = [];\n      for (let _i = 0, _len = parts.length; _i < _len; _i++) {\n        f = parts[_i];\n        _results.push(parseFloat(f));\n      }\n      return _results;\n    }();\n  }\n};\nexport {\n  NRRDLoader\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}