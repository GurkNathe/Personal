{"ast":null,"code":"import _objectSpread from \"/home/krug/Coding/JavaScript/Websites/Personal/personal/node_modules/.pnpm/@babel+runtime@7.22.3/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _classCallCheck from \"/home/krug/Coding/JavaScript/Websites/Personal/personal/node_modules/.pnpm/@babel+runtime@7.22.3/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/home/krug/Coding/JavaScript/Websites/Personal/personal/node_modules/.pnpm/@babel+runtime@7.22.3/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nvar __defProp = Object.defineProperty;\nvar __defNormalProp = function __defNormalProp(obj, key, value) {\n  return key in obj ? __defProp(obj, key, {\n    enumerable: true,\n    configurable: true,\n    writable: true,\n    value: value\n  }) : obj[key] = value;\n};\nvar __publicField = function __publicField(obj, key, value) {\n  __defNormalProp(obj, typeof key !== \"symbol\" ? key + \"\" : key, value);\n  return value;\n};\nimport { InterleavedBufferAttribute, Matrix4, MeshLambertMaterial, MeshBasicMaterial, MeshPhongMaterial, Color, DoubleSide, Mesh } from \"three\";\nvar ColladaExporter = /*#__PURE__*/function () {\n  function ColladaExporter() {\n    _classCallCheck(this, ColladaExporter);\n    __publicField(this, \"options\");\n    __publicField(this, \"geometryInfo\");\n    __publicField(this, \"materialMap\");\n    __publicField(this, \"imageMap\");\n    __publicField(this, \"textures\");\n    __publicField(this, \"libraryImages\");\n    __publicField(this, \"libraryGeometries\");\n    __publicField(this, \"libraryEffects\");\n    __publicField(this, \"libraryMaterials\");\n    __publicField(this, \"canvas\");\n    __publicField(this, \"ctx\");\n    __publicField(this, \"transMat\");\n    __publicField(this, \"getFuncs\", [\"getX\", \"getY\", \"getZ\", \"getW\"]);\n    this.options = {\n      version: \"1.4.1\",\n      author: null,\n      textureDirectory: \"\",\n      upAxis: \"Y_UP\",\n      unitName: null,\n      unitMeter: null\n    };\n    this.geometryInfo = /* @__PURE__ */new WeakMap();\n    this.materialMap = /* @__PURE__ */new WeakMap();\n    this.imageMap = /* @__PURE__ */new WeakMap();\n    this.textures = [];\n    this.libraryImages = [];\n    this.libraryGeometries = [];\n    this.libraryEffects = [];\n    this.libraryMaterials = [];\n    this.canvas = null;\n    this.ctx = null;\n    this.transMat = null;\n  }\n  _createClass(ColladaExporter, [{\n    key: \"parse\",\n    value: function parse(object, onDone) {\n      var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n      this.options = _objectSpread(_objectSpread({}, this.options), options);\n      if (this.options.upAxis.match(/^[XYZ]_UP$/) === null) {\n        console.error(\"ColladaExporter: Invalid upAxis: valid values are X_UP, Y_UP or Z_UP.\");\n        return null;\n      }\n      if (this.options.unitName !== null && this.options.unitMeter === null) {\n        console.error(\"ColladaExporter: unitMeter needs to be specified if unitName is specified.\");\n        return null;\n      }\n      if (this.options.unitMeter !== null && this.options.unitName === null) {\n        console.error(\"ColladaExporter: unitName needs to be specified if unitMeter is specified.\");\n        return null;\n      }\n      if (this.options.textureDirectory !== \"\") {\n        this.options.textureDirectory = \"\".concat(this.options.textureDirectory, \"/\").replace(/\\\\/g, \"/\").replace(/\\/+/g, \"/\");\n      }\n      if (this.options.version !== \"1.4.1\" && this.options.version !== \"1.5.0\") {\n        console.warn(\"ColladaExporter : Version \".concat(this.options.version, \" not supported for export. Only 1.4.1 and 1.5.0.\"));\n        return null;\n      }\n      var libraryVisualScenes = this.processObject(object);\n      var specLink = this.options.version === \"1.4.1\" ? \"http://www.collada.org/2005/11/COLLADASchema\" : \"https://www.khronos.org/collada/\";\n      var dae = \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\" standalone=\\\"no\\\" ?>\".concat(\"<COLLADA xmlns=\\\"\".concat(specLink, \"\\\" version=\\\"\").concat(this.options.version, \"\\\">\"), \"<asset><contributor><authoring_tool>three.js Collada Exporter</authoring_tool>\", this.options.author !== null ? \"<author>\".concat(this.options.author, \"</author>\") : \"\", \"</contributor>\", \"<created>\".concat( /* @__PURE__ */new Date().toISOString(), \"</created>\"), \"<modified>\".concat( /* @__PURE__ */new Date().toISOString(), \"</modified>\"), \"<up_axis>Y_UP</up_axis></asset>\");\n      dae += \"<library_images>\".concat(this.libraryImages.join(\"\"), \"</library_images>\");\n      dae += \"<library_effects>\".concat(this.libraryEffects.join(\"\"), \"</library_effects>\");\n      dae += \"<library_materials>\".concat(this.libraryMaterials.join(\"\"), \"</library_materials>\");\n      dae += \"<library_geometries>\".concat(this.libraryGeometries.join(\"\"), \"</library_geometries>\");\n      dae += \"<library_visual_scenes><visual_scene id=\\\"Scene\\\" name=\\\"scene\\\">\".concat(libraryVisualScenes, \"</visual_scene></library_visual_scenes>\");\n      dae += '<scene><instance_visual_scene url=\"#Scene\"/></scene>';\n      dae += \"</COLLADA>\";\n      var res = {\n        data: this.format(dae),\n        textures: this.textures\n      };\n      if (typeof onDone === \"function\") {\n        requestAnimationFrame(function () {\n          return onDone(res);\n        });\n      }\n      return res;\n    }\n    // Convert the urdf xml into a well-formatted, indented format\n  }, {\n    key: \"format\",\n    value: function format(urdf) {\n      var _a, _b;\n      var IS_END_TAG = /^<\\//;\n      var IS_SELF_CLOSING = /(\\?>$)|(\\/>$)/;\n      var HAS_TEXT = /<[^>]+>[^<]*<\\/[^<]+>/;\n      var pad = function pad(ch, num) {\n        return num > 0 ? ch + pad(ch, num - 1) : \"\";\n      };\n      var tagnum = 0;\n      return (_b = (_a = urdf.match(/(<[^>]+>[^<]+<\\/[^<]+>)|(<[^>]+>)/g)) == null ? void 0 : _a.map(function (tag) {\n        if (!HAS_TEXT.test(tag) && !IS_SELF_CLOSING.test(tag) && IS_END_TAG.test(tag)) {\n          tagnum--;\n        }\n        var res = \"\".concat(pad(\"  \", tagnum)).concat(tag);\n        if (!HAS_TEXT.test(tag) && !IS_SELF_CLOSING.test(tag) && !IS_END_TAG.test(tag)) {\n          tagnum++;\n        }\n        return res;\n      }).join(\"\\n\")) != null ? _b : \"\";\n    }\n    // Convert an image into a png format for saving\n  }, {\n    key: \"base64ToBuffer\",\n    value: function base64ToBuffer(str) {\n      var b = atob(str);\n      var buf = new Uint8Array(b.length);\n      for (var i = 0, l = buf.length; i < l; i++) {\n        buf[i] = b.charCodeAt(i);\n      }\n      return buf;\n    }\n  }, {\n    key: \"imageToData\",\n    value: function imageToData(image, ext) {\n      var _a;\n      this.canvas = this.canvas || document.createElement(\"canvas\");\n      this.ctx = this.ctx || this.canvas.getContext(\"2d\");\n      this.canvas.width = image.width instanceof SVGAnimatedLength ? 0 : image.width;\n      this.canvas.height = image.height instanceof SVGAnimatedLength ? 0 : image.height;\n      (_a = this.ctx) == null ? void 0 : _a.drawImage(image, 0, 0);\n      var base64data = this.canvas.toDataURL(\"image/\".concat(ext), 1).replace(/^data:image\\/(png|jpg);base64,/, \"\");\n      return this.base64ToBuffer(base64data);\n    }\n    // gets the attribute array. Generate a new array if the attribute is interleaved\n  }, {\n    key: \"attrBufferToArray\",\n    value: function attrBufferToArray(attr) {\n      if (attr instanceof InterleavedBufferAttribute && attr.isInterleavedBufferAttribute) {\n        var TypedArrayConstructor = attr.array.constructor;\n        var arr = new TypedArrayConstructor(attr.count * attr.itemSize);\n        var size = attr.itemSize;\n        for (var i = 0, l = attr.count; i < l; i++) {\n          for (var j = 0; j < size; j++) {\n            arr[i * size + j] = attr[this.getFuncs[j]](i);\n          }\n        }\n        return arr;\n      } else {\n        return attr.array;\n      }\n    }\n    // Returns an array of the same type starting at the `st` index,\n    // and `ct` length\n  }, {\n    key: \"subArray\",\n    value: function subArray(arr, st, ct) {\n      if (Array.isArray(arr)) {\n        return arr.slice(st, st + ct);\n      } else {\n        var TypedArrayConstructor = arr.constructor;\n        return new TypedArrayConstructor(arr.buffer, st * arr.BYTES_PER_ELEMENT, ct);\n      }\n    }\n    // Returns the string for a geometry's attribute\n  }, {\n    key: \"getAttribute\",\n    value: function getAttribute(attr, name, params, type) {\n      var array = this.attrBufferToArray(attr);\n      var res = Array.isArray(array) ? \"\".concat(\"<source id=\\\"\".concat(name, \"\\\"><float_array id=\\\"\").concat(name, \"-array\\\" count=\\\"\").concat(array.length, \"\\\">\") + array.join(\" \"), \"</float_array><technique_common>\", \"<accessor source=\\\"#\".concat(name, \"-array\\\" count=\\\"\").concat(Math.floor(array.length / attr.itemSize), \"\\\" stride=\\\"\").concat(attr.itemSize, \"\\\">\")).concat(params.map(function (n) {\n        return \"<param name=\\\"\".concat(n, \"\\\" type=\\\"\").concat(type, \"\\\" />\");\n      }).join(\"\"), \"</accessor></technique_common></source>\") : \"\";\n      return res;\n    }\n    // Returns the string for a node's transform information\n  }, {\n    key: \"getTransform\",\n    value: function getTransform(o) {\n      o.updateMatrix();\n      this.transMat = this.transMat || new Matrix4();\n      this.transMat.copy(o.matrix);\n      this.transMat.transpose();\n      return \"<matrix>\".concat(this.transMat.toArray().join(\" \"), \"</matrix>\");\n    }\n    // Process the given piece of geometry into the geometry library\n    // Returns the mesh id\n  }, {\n    key: \"processGeometry\",\n    value: function processGeometry(g) {\n      var info = this.geometryInfo.get(g);\n      if (!info) {\n        var bufferGeometry = g;\n        if (!bufferGeometry.isBufferGeometry) {\n          throw new Error(\"THREE.ColladaExporter: Geometry is not of type THREE.BufferGeometry.\");\n        }\n        var meshid = \"Mesh\".concat(this.libraryGeometries.length + 1);\n        var indexCount = bufferGeometry.index ? bufferGeometry.index.count * bufferGeometry.index.itemSize : bufferGeometry.attributes.position.count;\n        var groups = bufferGeometry.groups != null && bufferGeometry.groups.length !== 0 ? bufferGeometry.groups : [{\n          start: 0,\n          count: indexCount,\n          materialIndex: 0\n        }];\n        var gname = g.name ? \" name=\\\"\".concat(g.name, \"\\\"\") : \"\";\n        var gnode = \"<geometry id=\\\"\".concat(meshid, \"\\\"\").concat(gname, \"><mesh>\");\n        var posName = \"\".concat(meshid, \"-position\");\n        var vertName = \"\".concat(meshid, \"-vertices\");\n        gnode += this.getAttribute(bufferGeometry.attributes.position, posName, [\"X\", \"Y\", \"Z\"], \"float\");\n        gnode += \"<vertices id=\\\"\".concat(vertName, \"\\\"><input semantic=\\\"POSITION\\\" source=\\\"#\").concat(posName, \"\\\" /></vertices>\");\n        var triangleInputs = \"<input semantic=\\\"VERTEX\\\" source=\\\"#\".concat(vertName, \"\\\" offset=\\\"0\\\" />\");\n        if (\"normal\" in bufferGeometry.attributes) {\n          var normName = \"\".concat(meshid, \"-normal\");\n          gnode += this.getAttribute(bufferGeometry.attributes.normal, normName, [\"X\", \"Y\", \"Z\"], \"float\");\n          triangleInputs += \"<input semantic=\\\"NORMAL\\\" source=\\\"#\".concat(normName, \"\\\" offset=\\\"0\\\" />\");\n        }\n        if (\"uv\" in bufferGeometry.attributes) {\n          var uvName = \"\".concat(meshid, \"-texcoord\");\n          gnode += this.getAttribute(bufferGeometry.attributes.uv, uvName, [\"S\", \"T\"], \"float\");\n          triangleInputs += \"<input semantic=\\\"TEXCOORD\\\" source=\\\"#\".concat(uvName, \"\\\" offset=\\\"0\\\" set=\\\"0\\\" />\");\n        }\n        if (\"uv2\" in bufferGeometry.attributes) {\n          var _uvName = \"\".concat(meshid, \"-texcoord2\");\n          gnode += this.getAttribute(bufferGeometry.attributes.uv2, _uvName, [\"S\", \"T\"], \"float\");\n          triangleInputs += \"<input semantic=\\\"TEXCOORD\\\" source=\\\"#\".concat(_uvName, \"\\\" offset=\\\"0\\\" set=\\\"1\\\" />\");\n        }\n        if (\"color\" in bufferGeometry.attributes) {\n          var colName = \"\".concat(meshid, \"-color\");\n          gnode += this.getAttribute(bufferGeometry.attributes.color, colName, [\"X\", \"Y\", \"Z\"], \"uint8\");\n          triangleInputs += \"<input semantic=\\\"COLOR\\\" source=\\\"#\".concat(colName, \"\\\" offset=\\\"0\\\" />\");\n        }\n        var indexArray = null;\n        if (bufferGeometry.index) {\n          indexArray = this.attrBufferToArray(bufferGeometry.index);\n        } else {\n          indexArray = new Array(indexCount);\n          for (var i = 0, l = indexArray.length; i < l && Array.isArray(indexArray); i++) indexArray[i] = i;\n        }\n        for (var _i = 0, _l = groups.length; _i < _l; _i++) {\n          var group = groups[_i];\n          var subarr = this.subArray(indexArray, group.start, group.count);\n          var polycount = subarr.length / 3;\n          gnode += \"<triangles material=\\\"MESH_MATERIAL_\".concat(group.materialIndex, \"\\\" count=\\\"\").concat(polycount, \"\\\">\");\n          gnode += triangleInputs;\n          gnode += \"<p>\".concat(subarr.join(\" \"), \"</p>\");\n          gnode += \"</triangles>\";\n        }\n        gnode += \"</mesh></geometry>\";\n        this.libraryGeometries.push(gnode);\n        info = {\n          meshid: meshid,\n          bufferGeometry: bufferGeometry\n        };\n        this.geometryInfo.set(g, info);\n      }\n      return info;\n    }\n    // Process the given texture into the image library\n    // Returns the image library\n  }, {\n    key: \"processTexture\",\n    value: function processTexture(tex) {\n      var texid = this.imageMap.get(tex);\n      if (texid == null) {\n        texid = \"image-\".concat(this.libraryImages.length + 1);\n        var ext = \"png\";\n        var name = tex.name || texid;\n        var imageNode = \"<image id=\\\"\".concat(texid, \"\\\" name=\\\"\").concat(name, \"\\\">\");\n        if (this.options.version === \"1.5.0\") {\n          imageNode += \"<init_from><ref>\".concat(this.options.textureDirectory).concat(name, \".\").concat(ext, \"</ref></init_from>\");\n        } else {\n          imageNode += \"<init_from>\".concat(this.options.textureDirectory).concat(name, \".\").concat(ext, \"</init_from>\");\n        }\n        imageNode += \"</image>\";\n        this.libraryImages.push(imageNode);\n        this.imageMap.set(tex, texid);\n        this.textures.push({\n          directory: this.options.textureDirectory,\n          name: name,\n          ext: ext,\n          data: this.imageToData(tex.image, ext),\n          original: tex\n        });\n      }\n      return texid;\n    }\n    // Process the given material into the material and effect libraries\n    // Returns the material id\n  }, {\n    key: \"processMaterial\",\n    value: function processMaterial(m) {\n      var matid = this.materialMap.get(m);\n      if (matid == null) {\n        matid = \"Mat\".concat(this.libraryEffects.length + 1);\n        var type = \"phong\";\n        if (m instanceof MeshLambertMaterial) {\n          type = \"lambert\";\n        } else if (m instanceof MeshBasicMaterial) {\n          type = \"constant\";\n          if (m.map !== null) {\n            console.warn(\"ColladaExporter: Texture maps not supported with MeshBasicMaterial.\");\n          }\n        }\n        if (m instanceof MeshPhongMaterial) {\n          var emissive = m.emissive ? m.emissive : new Color(0, 0, 0);\n          var diffuse = m.color ? m.color : new Color(0, 0, 0);\n          var specular = m.specular ? m.specular : new Color(1, 1, 1);\n          var shininess = m.shininess || 0;\n          var reflectivity = m.reflectivity || 0;\n          var transparencyNode = \"\";\n          if (m.transparent) {\n            transparencyNode += \"<transparent>\".concat(m.map ? '<texture texture=\"diffuse-sampler\"></texture>' : \"<float>1</float>\", \"</transparent>\");\n            if (m.opacity < 1) {\n              transparencyNode += \"<transparency><float>\".concat(m.opacity, \"</float></transparency>\");\n            }\n          }\n          var techniqueNode = \"\".concat(\"<technique sid=\\\"common\\\"><\".concat(type, \">\"), \"<emission>\", m.emissiveMap ? '<texture texture=\"emissive-sampler\" texcoord=\"TEXCOORD\" />' : \"<color sid=\\\"emission\\\">\".concat(emissive.r, \" \").concat(emissive.g, \" \").concat(emissive.b, \" 1</color>\"), \"</emission>\").concat(type !== \"constant\" ? \"<diffuse>\".concat(m.map ? '<texture texture=\"diffuse-sampler\" texcoord=\"TEXCOORD\" />' : \"<color sid=\\\"diffuse\\\">\".concat(diffuse.r, \" \").concat(diffuse.g, \" \").concat(diffuse.b, \" 1</color>\"), \"</diffuse>\") : \"\").concat(type !== \"constant\" ? \"<bump>\".concat(m.normalMap ? '<texture texture=\"bump-sampler\" texcoord=\"TEXCOORD\" />' : \"\", \"</bump>\") : \"\").concat(type === \"phong\" ? \"\".concat(\"<specular><color sid=\\\"specular\\\">\".concat(specular.r, \" \").concat(specular.g, \" \").concat(specular.b, \" 1</color></specular>\"), \"<shininess>\", m.specularMap ? '<texture texture=\"specular-sampler\" texcoord=\"TEXCOORD\" />' : \"<float sid=\\\"shininess\\\">\".concat(shininess, \"</float>\"), \"</shininess>\") : \"\", \"<reflective><color>\".concat(diffuse.r, \" \").concat(diffuse.g, \" \").concat(diffuse.b, \" 1</color></reflective>\"), \"<reflectivity><float>\".concat(reflectivity, \"</float></reflectivity>\")).concat(transparencyNode, \"</\".concat(type, \"></technique>\"));\n          var effectnode = \"\".concat(\"<effect id=\\\"\".concat(matid, \"-effect\\\">\"), \"<profile_COMMON>\", m.map ? \"<newparam sid=\\\"diffuse-surface\\\"><surface type=\\\"2D\\\">\".concat(\"<init_from>\".concat(this.processTexture(m.map), \"</init_from>\"), \"</surface></newparam><newparam sid=\\\"diffuse-sampler\\\"><sampler2D><source>diffuse-surface</source></sampler2D></newparam>\") : \"\").concat(m.specularMap ? \"<newparam sid=\\\"specular-surface\\\"><surface type=\\\"2D\\\">\".concat(\"<init_from>\".concat(this.processTexture(m.specularMap), \"</init_from>\"), \"</surface></newparam><newparam sid=\\\"specular-sampler\\\"><sampler2D><source>specular-surface</source></sampler2D></newparam>\") : \"\").concat(m.emissiveMap ? \"<newparam sid=\\\"emissive-surface\\\"><surface type=\\\"2D\\\">\".concat(\"<init_from>\".concat(this.processTexture(m.emissiveMap), \"</init_from>\"), \"</surface></newparam><newparam sid=\\\"emissive-sampler\\\"><sampler2D><source>emissive-surface</source></sampler2D></newparam>\") : \"\").concat(m.normalMap ? \"<newparam sid=\\\"bump-surface\\\"><surface type=\\\"2D\\\">\".concat(\"<init_from>\".concat(this.processTexture(m.normalMap), \"</init_from>\"), \"</surface></newparam><newparam sid=\\\"bump-sampler\\\"><sampler2D><source>bump-surface</source></sampler2D></newparam>\") : \"\").concat(techniqueNode).concat(m.side === DoubleSide ? '<extra><technique profile=\"THREEJS\"><double_sided sid=\"double_sided\" type=\"int\">1</double_sided></technique></extra>' : \"\", \"</profile_COMMON></effect>\");\n          var materialName = m.name ? \" name=\\\"\".concat(m.name, \"\\\"\") : \"\";\n          var materialNode = \"<material id=\\\"\".concat(matid, \"\\\"\").concat(materialName, \"><instance_effect url=\\\"#\").concat(matid, \"-effect\\\" /></material>\");\n          this.libraryMaterials.push(materialNode);\n          this.libraryEffects.push(effectnode);\n          this.materialMap.set(m, matid);\n        }\n      }\n      return matid;\n    }\n    // Recursively process the object into a scene\n  }, {\n    key: \"processObject\",\n    value: function processObject(o) {\n      var _this = this;\n      var node = \"<node name=\\\"\".concat(o.name, \"\\\">\");\n      node += this.getTransform(o);\n      var a = new Mesh();\n      a.geometry;\n      if (o instanceof Mesh && o.isMesh && o.geometry !== null) {\n        var geomInfo = this.processGeometry(o.geometry);\n        var meshid = geomInfo.meshid;\n        var geometry = geomInfo.bufferGeometry;\n        var matids = null;\n        var matidsArray;\n        var mat = o.material || new MeshBasicMaterial();\n        var materials = Array.isArray(mat) ? mat : [mat];\n        if (geometry.groups.length > materials.length) {\n          matidsArray = new Array(geometry.groups.length);\n        } else {\n          matidsArray = new Array(materials.length);\n        }\n        matids = matidsArray.fill(null).map(function (_, i) {\n          return _this.processMaterial(materials[i % materials.length]);\n        });\n        node += \"\".concat(\"<instance_geometry url=\\\"#\".concat(meshid, \"\\\">\") + (matids != null ? \"<bind_material><technique_common>\".concat(matids.map(function (id, i) {\n          return \"\".concat(\"<instance_material symbol=\\\"MESH_MATERIAL_\".concat(i, \"\\\" target=\\\"#\").concat(id, \"\\\" >\"), \"<bind_vertex_input semantic=\\\"TEXCOORD\\\" input_semantic=\\\"TEXCOORD\\\" input_set=\\\"0\\\" /></instance_material>\");\n        }).join(\"\"), \"</technique_common></bind_material>\") : \"\"), \"</instance_geometry>\");\n      }\n      o.children.forEach(function (c) {\n        return node += _this.processObject(c);\n      });\n      node += \"</node>\";\n      return node;\n    }\n  }]);\n  return ColladaExporter;\n}();\nexport { ColladaExporter };","map":{"version":3,"names":["__defProp","Object","defineProperty","__defNormalProp","obj","key","value","enumerable","configurable","writable","__publicField","InterleavedBufferAttribute","Matrix4","MeshLambertMaterial","MeshBasicMaterial","MeshPhongMaterial","Color","DoubleSide","Mesh","ColladaExporter","_classCallCheck","options","version","author","textureDirectory","upAxis","unitName","unitMeter","geometryInfo","WeakMap","materialMap","imageMap","textures","libraryImages","libraryGeometries","libraryEffects","libraryMaterials","canvas","ctx","transMat","_createClass","parse","object","onDone","arguments","length","undefined","_objectSpread","match","console","error","concat","replace","warn","libraryVisualScenes","processObject","specLink","dae","Date","toISOString","join","res","data","format","requestAnimationFrame","urdf","_a","_b","IS_END_TAG","IS_SELF_CLOSING","HAS_TEXT","pad","ch","num","tagnum","map","tag","test","base64ToBuffer","str","b","atob","buf","Uint8Array","i","l","charCodeAt","imageToData","image","ext","document","createElement","getContext","width","SVGAnimatedLength","height","drawImage","base64data","toDataURL","attrBufferToArray","attr","isInterleavedBufferAttribute","TypedArrayConstructor","array","constructor","arr","count","itemSize","size","j","getFuncs","subArray","st","ct","Array","isArray","slice","buffer","BYTES_PER_ELEMENT","getAttribute","name","params","type","Math","floor","n","getTransform","o","updateMatrix","copy","matrix","transpose","toArray","processGeometry","g","info","get","bufferGeometry","isBufferGeometry","Error","meshid","indexCount","index","attributes","position","groups","start","materialIndex","gname","gnode","posName","vertName","triangleInputs","normName","normal","uvName","uv","uv2","colName","color","indexArray","group","subarr","polycount","push","set","processTexture","tex","texid","imageNode","directory","original","processMaterial","m","matid","emissive","diffuse","specular","shininess","reflectivity","transparencyNode","transparent","opacity","techniqueNode","emissiveMap","r","normalMap","specularMap","effectnode","side","materialName","materialNode","_this","node","a","geometry","isMesh","geomInfo","matids","matidsArray","mat","material","materials","fill","_","id","children","forEach","c"],"sources":["/home/krug/Coding/JavaScript/Websites/Personal/personal/node_modules/.pnpm/three-stdlib@2.23.7_three@0.151.3/node_modules/three-stdlib/exporters/ColladaExporter.js"],"sourcesContent":["var __defProp = Object.defineProperty;\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;\nvar __publicField = (obj, key, value) => {\n  __defNormalProp(obj, typeof key !== \"symbol\" ? key + \"\" : key, value);\n  return value;\n};\nimport { InterleavedBufferAttribute, Matrix4, MeshLambertMaterial, MeshBasicMaterial, MeshPhongMaterial, Color, DoubleSide, Mesh } from \"three\";\nclass ColladaExporter {\n  constructor() {\n    __publicField(this, \"options\");\n    __publicField(this, \"geometryInfo\");\n    __publicField(this, \"materialMap\");\n    __publicField(this, \"imageMap\");\n    __publicField(this, \"textures\");\n    __publicField(this, \"libraryImages\");\n    __publicField(this, \"libraryGeometries\");\n    __publicField(this, \"libraryEffects\");\n    __publicField(this, \"libraryMaterials\");\n    __publicField(this, \"canvas\");\n    __publicField(this, \"ctx\");\n    __publicField(this, \"transMat\");\n    __publicField(this, \"getFuncs\", [\"getX\", \"getY\", \"getZ\", \"getW\"]);\n    this.options = {\n      version: \"1.4.1\",\n      author: null,\n      textureDirectory: \"\",\n      upAxis: \"Y_UP\",\n      unitName: null,\n      unitMeter: null\n    };\n    this.geometryInfo = /* @__PURE__ */ new WeakMap();\n    this.materialMap = /* @__PURE__ */ new WeakMap();\n    this.imageMap = /* @__PURE__ */ new WeakMap();\n    this.textures = [];\n    this.libraryImages = [];\n    this.libraryGeometries = [];\n    this.libraryEffects = [];\n    this.libraryMaterials = [];\n    this.canvas = null;\n    this.ctx = null;\n    this.transMat = null;\n  }\n  parse(object, onDone, options = {}) {\n    this.options = { ...this.options, ...options };\n    if (this.options.upAxis.match(/^[XYZ]_UP$/) === null) {\n      console.error(\"ColladaExporter: Invalid upAxis: valid values are X_UP, Y_UP or Z_UP.\");\n      return null;\n    }\n    if (this.options.unitName !== null && this.options.unitMeter === null) {\n      console.error(\"ColladaExporter: unitMeter needs to be specified if unitName is specified.\");\n      return null;\n    }\n    if (this.options.unitMeter !== null && this.options.unitName === null) {\n      console.error(\"ColladaExporter: unitName needs to be specified if unitMeter is specified.\");\n      return null;\n    }\n    if (this.options.textureDirectory !== \"\") {\n      this.options.textureDirectory = `${this.options.textureDirectory}/`.replace(/\\\\/g, \"/\").replace(/\\/+/g, \"/\");\n    }\n    if (this.options.version !== \"1.4.1\" && this.options.version !== \"1.5.0\") {\n      console.warn(`ColladaExporter : Version ${this.options.version} not supported for export. Only 1.4.1 and 1.5.0.`);\n      return null;\n    }\n    const libraryVisualScenes = this.processObject(object);\n    const specLink = this.options.version === \"1.4.1\" ? \"http://www.collada.org/2005/11/COLLADASchema\" : \"https://www.khronos.org/collada/\";\n    let dae = `<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\" ?>${`<COLLADA xmlns=\"${specLink}\" version=\"${this.options.version}\">`}<asset><contributor><authoring_tool>three.js Collada Exporter</authoring_tool>${this.options.author !== null ? `<author>${this.options.author}</author>` : \"\"}</contributor>${`<created>${(/* @__PURE__ */ new Date()).toISOString()}</created>`}${`<modified>${(/* @__PURE__ */ new Date()).toISOString()}</modified>`}<up_axis>Y_UP</up_axis></asset>`;\n    dae += `<library_images>${this.libraryImages.join(\"\")}</library_images>`;\n    dae += `<library_effects>${this.libraryEffects.join(\"\")}</library_effects>`;\n    dae += `<library_materials>${this.libraryMaterials.join(\"\")}</library_materials>`;\n    dae += `<library_geometries>${this.libraryGeometries.join(\"\")}</library_geometries>`;\n    dae += `<library_visual_scenes><visual_scene id=\"Scene\" name=\"scene\">${libraryVisualScenes}</visual_scene></library_visual_scenes>`;\n    dae += '<scene><instance_visual_scene url=\"#Scene\"/></scene>';\n    dae += \"</COLLADA>\";\n    const res = {\n      data: this.format(dae),\n      textures: this.textures\n    };\n    if (typeof onDone === \"function\") {\n      requestAnimationFrame(() => onDone(res));\n    }\n    return res;\n  }\n  // Convert the urdf xml into a well-formatted, indented format\n  format(urdf) {\n    var _a, _b;\n    const IS_END_TAG = /^<\\//;\n    const IS_SELF_CLOSING = /(\\?>$)|(\\/>$)/;\n    const HAS_TEXT = /<[^>]+>[^<]*<\\/[^<]+>/;\n    const pad = (ch, num) => num > 0 ? ch + pad(ch, num - 1) : \"\";\n    let tagnum = 0;\n    return (_b = (_a = urdf.match(/(<[^>]+>[^<]+<\\/[^<]+>)|(<[^>]+>)/g)) == null ? void 0 : _a.map((tag) => {\n      if (!HAS_TEXT.test(tag) && !IS_SELF_CLOSING.test(tag) && IS_END_TAG.test(tag)) {\n        tagnum--;\n      }\n      const res = `${pad(\"  \", tagnum)}${tag}`;\n      if (!HAS_TEXT.test(tag) && !IS_SELF_CLOSING.test(tag) && !IS_END_TAG.test(tag)) {\n        tagnum++;\n      }\n      return res;\n    }).join(\"\\n\")) != null ? _b : \"\";\n  }\n  // Convert an image into a png format for saving\n  base64ToBuffer(str) {\n    const b = atob(str);\n    const buf = new Uint8Array(b.length);\n    for (let i = 0, l = buf.length; i < l; i++) {\n      buf[i] = b.charCodeAt(i);\n    }\n    return buf;\n  }\n  imageToData(image, ext) {\n    var _a;\n    this.canvas = this.canvas || document.createElement(\"canvas\");\n    this.ctx = this.ctx || this.canvas.getContext(\"2d\");\n    this.canvas.width = image.width instanceof SVGAnimatedLength ? 0 : image.width;\n    this.canvas.height = image.height instanceof SVGAnimatedLength ? 0 : image.height;\n    (_a = this.ctx) == null ? void 0 : _a.drawImage(image, 0, 0);\n    const base64data = this.canvas.toDataURL(`image/${ext}`, 1).replace(/^data:image\\/(png|jpg);base64,/, \"\");\n    return this.base64ToBuffer(base64data);\n  }\n  // gets the attribute array. Generate a new array if the attribute is interleaved\n  attrBufferToArray(attr) {\n    if (attr instanceof InterleavedBufferAttribute && attr.isInterleavedBufferAttribute) {\n      const TypedArrayConstructor = attr.array.constructor;\n      const arr = new TypedArrayConstructor(attr.count * attr.itemSize);\n      const size = attr.itemSize;\n      for (let i = 0, l = attr.count; i < l; i++) {\n        for (let j = 0; j < size; j++) {\n          arr[i * size + j] = attr[this.getFuncs[j]](i);\n        }\n      }\n      return arr;\n    } else {\n      return attr.array;\n    }\n  }\n  // Returns an array of the same type starting at the `st` index,\n  // and `ct` length\n  subArray(arr, st, ct) {\n    if (Array.isArray(arr)) {\n      return arr.slice(st, st + ct);\n    } else {\n      const TypedArrayConstructor = arr.constructor;\n      return new TypedArrayConstructor(arr.buffer, st * arr.BYTES_PER_ELEMENT, ct);\n    }\n  }\n  // Returns the string for a geometry's attribute\n  getAttribute(attr, name, params, type) {\n    const array = this.attrBufferToArray(attr);\n    const res = Array.isArray(array) ? `${`<source id=\"${name}\"><float_array id=\"${name}-array\" count=\"${array.length}\">` + array.join(\" \")}</float_array><technique_common>${`<accessor source=\"#${name}-array\" count=\"${Math.floor(\n      array.length / attr.itemSize\n    )}\" stride=\"${attr.itemSize}\">`}${params.map((n) => `<param name=\"${n}\" type=\"${type}\" />`).join(\"\")}</accessor></technique_common></source>` : \"\";\n    return res;\n  }\n  // Returns the string for a node's transform information\n  getTransform(o) {\n    o.updateMatrix();\n    this.transMat = this.transMat || new Matrix4();\n    this.transMat.copy(o.matrix);\n    this.transMat.transpose();\n    return `<matrix>${this.transMat.toArray().join(\" \")}</matrix>`;\n  }\n  // Process the given piece of geometry into the geometry library\n  // Returns the mesh id\n  processGeometry(g) {\n    let info = this.geometryInfo.get(g);\n    if (!info) {\n      const bufferGeometry = g;\n      if (!bufferGeometry.isBufferGeometry) {\n        throw new Error(\"THREE.ColladaExporter: Geometry is not of type THREE.BufferGeometry.\");\n      }\n      const meshid = `Mesh${this.libraryGeometries.length + 1}`;\n      const indexCount = bufferGeometry.index ? bufferGeometry.index.count * bufferGeometry.index.itemSize : bufferGeometry.attributes.position.count;\n      const groups = bufferGeometry.groups != null && bufferGeometry.groups.length !== 0 ? bufferGeometry.groups : [{ start: 0, count: indexCount, materialIndex: 0 }];\n      const gname = g.name ? ` name=\"${g.name}\"` : \"\";\n      let gnode = `<geometry id=\"${meshid}\"${gname}><mesh>`;\n      const posName = `${meshid}-position`;\n      const vertName = `${meshid}-vertices`;\n      gnode += this.getAttribute(bufferGeometry.attributes.position, posName, [\"X\", \"Y\", \"Z\"], \"float\");\n      gnode += `<vertices id=\"${vertName}\"><input semantic=\"POSITION\" source=\"#${posName}\" /></vertices>`;\n      let triangleInputs = `<input semantic=\"VERTEX\" source=\"#${vertName}\" offset=\"0\" />`;\n      if (\"normal\" in bufferGeometry.attributes) {\n        const normName = `${meshid}-normal`;\n        gnode += this.getAttribute(bufferGeometry.attributes.normal, normName, [\"X\", \"Y\", \"Z\"], \"float\");\n        triangleInputs += `<input semantic=\"NORMAL\" source=\"#${normName}\" offset=\"0\" />`;\n      }\n      if (\"uv\" in bufferGeometry.attributes) {\n        const uvName = `${meshid}-texcoord`;\n        gnode += this.getAttribute(bufferGeometry.attributes.uv, uvName, [\"S\", \"T\"], \"float\");\n        triangleInputs += `<input semantic=\"TEXCOORD\" source=\"#${uvName}\" offset=\"0\" set=\"0\" />`;\n      }\n      if (\"uv2\" in bufferGeometry.attributes) {\n        const uvName = `${meshid}-texcoord2`;\n        gnode += this.getAttribute(bufferGeometry.attributes.uv2, uvName, [\"S\", \"T\"], \"float\");\n        triangleInputs += `<input semantic=\"TEXCOORD\" source=\"#${uvName}\" offset=\"0\" set=\"1\" />`;\n      }\n      if (\"color\" in bufferGeometry.attributes) {\n        const colName = `${meshid}-color`;\n        gnode += this.getAttribute(bufferGeometry.attributes.color, colName, [\"X\", \"Y\", \"Z\"], \"uint8\");\n        triangleInputs += `<input semantic=\"COLOR\" source=\"#${colName}\" offset=\"0\" />`;\n      }\n      let indexArray = null;\n      if (bufferGeometry.index) {\n        indexArray = this.attrBufferToArray(bufferGeometry.index);\n      } else {\n        indexArray = new Array(indexCount);\n        for (let i = 0, l = indexArray.length; i < l && Array.isArray(indexArray); i++)\n          indexArray[i] = i;\n      }\n      for (let i = 0, l = groups.length; i < l; i++) {\n        const group = groups[i];\n        const subarr = this.subArray(indexArray, group.start, group.count);\n        const polycount = subarr.length / 3;\n        gnode += `<triangles material=\"MESH_MATERIAL_${group.materialIndex}\" count=\"${polycount}\">`;\n        gnode += triangleInputs;\n        gnode += `<p>${subarr.join(\" \")}</p>`;\n        gnode += \"</triangles>\";\n      }\n      gnode += \"</mesh></geometry>\";\n      this.libraryGeometries.push(gnode);\n      info = { meshid, bufferGeometry };\n      this.geometryInfo.set(g, info);\n    }\n    return info;\n  }\n  // Process the given texture into the image library\n  // Returns the image library\n  processTexture(tex) {\n    let texid = this.imageMap.get(tex);\n    if (texid == null) {\n      texid = `image-${this.libraryImages.length + 1}`;\n      const ext = \"png\";\n      const name = tex.name || texid;\n      let imageNode = `<image id=\"${texid}\" name=\"${name}\">`;\n      if (this.options.version === \"1.5.0\") {\n        imageNode += `<init_from><ref>${this.options.textureDirectory}${name}.${ext}</ref></init_from>`;\n      } else {\n        imageNode += `<init_from>${this.options.textureDirectory}${name}.${ext}</init_from>`;\n      }\n      imageNode += \"</image>\";\n      this.libraryImages.push(imageNode);\n      this.imageMap.set(tex, texid);\n      this.textures.push({\n        directory: this.options.textureDirectory,\n        name,\n        ext,\n        data: this.imageToData(tex.image, ext),\n        original: tex\n      });\n    }\n    return texid;\n  }\n  // Process the given material into the material and effect libraries\n  // Returns the material id\n  processMaterial(m) {\n    let matid = this.materialMap.get(m);\n    if (matid == null) {\n      matid = `Mat${this.libraryEffects.length + 1}`;\n      let type = \"phong\";\n      if (m instanceof MeshLambertMaterial) {\n        type = \"lambert\";\n      } else if (m instanceof MeshBasicMaterial) {\n        type = \"constant\";\n        if (m.map !== null) {\n          console.warn(\"ColladaExporter: Texture maps not supported with MeshBasicMaterial.\");\n        }\n      }\n      if (m instanceof MeshPhongMaterial) {\n        const emissive = m.emissive ? m.emissive : new Color(0, 0, 0);\n        const diffuse = m.color ? m.color : new Color(0, 0, 0);\n        const specular = m.specular ? m.specular : new Color(1, 1, 1);\n        const shininess = m.shininess || 0;\n        const reflectivity = m.reflectivity || 0;\n        let transparencyNode = \"\";\n        if (m.transparent) {\n          transparencyNode += `<transparent>${m.map ? '<texture texture=\"diffuse-sampler\"></texture>' : \"<float>1</float>\"}</transparent>`;\n          if (m.opacity < 1) {\n            transparencyNode += `<transparency><float>${m.opacity}</float></transparency>`;\n          }\n        }\n        const techniqueNode = `${`<technique sid=\"common\"><${type}>`}<emission>${m.emissiveMap ? '<texture texture=\"emissive-sampler\" texcoord=\"TEXCOORD\" />' : `<color sid=\"emission\">${emissive.r} ${emissive.g} ${emissive.b} 1</color>`}</emission>${type !== \"constant\" ? `<diffuse>${m.map ? '<texture texture=\"diffuse-sampler\" texcoord=\"TEXCOORD\" />' : `<color sid=\"diffuse\">${diffuse.r} ${diffuse.g} ${diffuse.b} 1</color>`}</diffuse>` : \"\"}${type !== \"constant\" ? `<bump>${m.normalMap ? '<texture texture=\"bump-sampler\" texcoord=\"TEXCOORD\" />' : \"\"}</bump>` : \"\"}${type === \"phong\" ? `${`<specular><color sid=\"specular\">${specular.r} ${specular.g} ${specular.b} 1</color></specular>`}<shininess>${m.specularMap ? '<texture texture=\"specular-sampler\" texcoord=\"TEXCOORD\" />' : `<float sid=\"shininess\">${shininess}</float>`}</shininess>` : \"\"}${`<reflective><color>${diffuse.r} ${diffuse.g} ${diffuse.b} 1</color></reflective>`}${`<reflectivity><float>${reflectivity}</float></reflectivity>`}${transparencyNode}${`</${type}></technique>`}`;\n        const effectnode = `${`<effect id=\"${matid}-effect\">`}<profile_COMMON>${m.map ? `<newparam sid=\"diffuse-surface\"><surface type=\"2D\">${`<init_from>${this.processTexture(\n          m.map\n        )}</init_from>`}</surface></newparam><newparam sid=\"diffuse-sampler\"><sampler2D><source>diffuse-surface</source></sampler2D></newparam>` : \"\"}${m.specularMap ? `<newparam sid=\"specular-surface\"><surface type=\"2D\">${`<init_from>${this.processTexture(\n          m.specularMap\n        )}</init_from>`}</surface></newparam><newparam sid=\"specular-sampler\"><sampler2D><source>specular-surface</source></sampler2D></newparam>` : \"\"}${m.emissiveMap ? `<newparam sid=\"emissive-surface\"><surface type=\"2D\">${`<init_from>${this.processTexture(\n          m.emissiveMap\n        )}</init_from>`}</surface></newparam><newparam sid=\"emissive-sampler\"><sampler2D><source>emissive-surface</source></sampler2D></newparam>` : \"\"}${m.normalMap ? `<newparam sid=\"bump-surface\"><surface type=\"2D\">${`<init_from>${this.processTexture(\n          m.normalMap\n        )}</init_from>`}</surface></newparam><newparam sid=\"bump-sampler\"><sampler2D><source>bump-surface</source></sampler2D></newparam>` : \"\"}${techniqueNode}${m.side === DoubleSide ? '<extra><technique profile=\"THREEJS\"><double_sided sid=\"double_sided\" type=\"int\">1</double_sided></technique></extra>' : \"\"}</profile_COMMON></effect>`;\n        const materialName = m.name ? ` name=\"${m.name}\"` : \"\";\n        const materialNode = `<material id=\"${matid}\"${materialName}><instance_effect url=\"#${matid}-effect\" /></material>`;\n        this.libraryMaterials.push(materialNode);\n        this.libraryEffects.push(effectnode);\n        this.materialMap.set(m, matid);\n      }\n    }\n    return matid;\n  }\n  // Recursively process the object into a scene\n  processObject(o) {\n    let node = `<node name=\"${o.name}\">`;\n    node += this.getTransform(o);\n    const a = new Mesh();\n    a.geometry;\n    if (o instanceof Mesh && o.isMesh && o.geometry !== null) {\n      const geomInfo = this.processGeometry(o.geometry);\n      const meshid = geomInfo.meshid;\n      const geometry = geomInfo.bufferGeometry;\n      let matids = null;\n      let matidsArray;\n      const mat = o.material || new MeshBasicMaterial();\n      const materials = Array.isArray(mat) ? mat : [mat];\n      if (geometry.groups.length > materials.length) {\n        matidsArray = new Array(geometry.groups.length);\n      } else {\n        matidsArray = new Array(materials.length);\n      }\n      matids = matidsArray.fill(null).map((_, i) => this.processMaterial(materials[i % materials.length]));\n      node += `${`<instance_geometry url=\"#${meshid}\">` + (matids != null ? `<bind_material><technique_common>${matids.map(\n        (id, i) => `${`<instance_material symbol=\"MESH_MATERIAL_${i}\" target=\"#${id}\" >`}<bind_vertex_input semantic=\"TEXCOORD\" input_semantic=\"TEXCOORD\" input_set=\"0\" /></instance_material>`\n      ).join(\"\")}</technique_common></bind_material>` : \"\")}</instance_geometry>`;\n    }\n    o.children.forEach((c) => node += this.processObject(c));\n    node += \"</node>\";\n    return node;\n  }\n}\nexport {\n  ColladaExporter\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}