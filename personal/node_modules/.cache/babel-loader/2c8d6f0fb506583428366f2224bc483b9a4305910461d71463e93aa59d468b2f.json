{"ast":null,"code":"import _classCallCheck from \"/home/krug/Coding/JavaScript/Websites/Personal/personal/node_modules/.pnpm/@babel+runtime@7.22.3/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/home/krug/Coding/JavaScript/Websites/Personal/personal/node_modules/.pnpm/@babel+runtime@7.22.3/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"/home/krug/Coding/JavaScript/Websites/Personal/personal/node_modules/.pnpm/@babel+runtime@7.22.3/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/home/krug/Coding/JavaScript/Websites/Personal/personal/node_modules/.pnpm/@babel+runtime@7.22.3/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { Loader, FileLoader, BufferGeometry, BufferAttribute } from \"three\";\nvar bigEndianPlatform = null;\nfunction _isBigEndianPlatform() {\n  if (bigEndianPlatform === null) {\n    var buffer = new ArrayBuffer(2),\n      uint8Array = new Uint8Array(buffer),\n      uint16Array = new Uint16Array(buffer);\n    uint8Array[0] = 170;\n    uint8Array[1] = 187;\n    bigEndianPlatform = uint16Array[0] === 43707;\n  }\n  return bigEndianPlatform;\n}\nvar InvertedEncodingTypes = [null, Float32Array, null, Int8Array, Int16Array, null, Int32Array, Uint8Array, Uint16Array, null, Uint32Array];\nvar getMethods = {\n  Uint16Array: \"getUint16\",\n  Uint32Array: \"getUint32\",\n  Int16Array: \"getInt16\",\n  Int32Array: \"getInt32\",\n  Float32Array: \"getFloat32\",\n  Float64Array: \"getFloat64\"\n};\nfunction copyFromBuffer(sourceArrayBuffer, viewType, position, length, fromBigEndian) {\n  var bytesPerElement = viewType.BYTES_PER_ELEMENT;\n  var result;\n  if (fromBigEndian === _isBigEndianPlatform() || bytesPerElement === 1) {\n    result = new viewType(sourceArrayBuffer, position, length);\n  } else {\n    var readView = new DataView(sourceArrayBuffer, position, length * bytesPerElement),\n      getMethod = getMethods[viewType.name],\n      littleEndian = !fromBigEndian;\n    result = new viewType(length);\n    for (var i = 0; i < length; i++) {\n      result[i] = readView[getMethod](i * bytesPerElement, littleEndian);\n    }\n  }\n  return result;\n}\nfunction decodePrwm(buffer) {\n  var array = new Uint8Array(buffer),\n    version = array[0];\n  var flags = array[1];\n  var indexedGeometry = !!(flags >> 7 & 1),\n    indicesType = flags >> 6 & 1,\n    bigEndian = (flags >> 5 & 1) === 1,\n    attributesNumber = flags & 31;\n  var valuesNumber = 0,\n    indicesNumber = 0;\n  if (bigEndian) {\n    valuesNumber = (array[2] << 16) + (array[3] << 8) + array[4];\n    indicesNumber = (array[5] << 16) + (array[6] << 8) + array[7];\n  } else {\n    valuesNumber = array[2] + (array[3] << 8) + (array[4] << 16);\n    indicesNumber = array[5] + (array[6] << 8) + (array[7] << 16);\n  }\n  if (version === 0) {\n    throw new Error(\"PRWM decoder: Invalid format version: 0\");\n  } else if (version !== 1) {\n    throw new Error(\"PRWM decoder: Unsupported format version: \" + version);\n  }\n  if (!indexedGeometry) {\n    if (indicesType !== 0) {\n      throw new Error(\"PRWM decoder: Indices type must be set to 0 for non-indexed geometries\");\n    } else if (indicesNumber !== 0) {\n      throw new Error(\"PRWM decoder: Number of indices must be set to 0 for non-indexed geometries\");\n    }\n  }\n  var pos = 8;\n  var attributes = {};\n  for (var i = 0; i < attributesNumber; i++) {\n    var attributeName = \"\";\n    while (pos < array.length) {\n      var char = array[pos];\n      pos++;\n      if (char === 0) {\n        break;\n      } else {\n        attributeName += String.fromCharCode(char);\n      }\n    }\n    flags = array[pos];\n    var attributeType = flags >> 7 & 1;\n    var cardinality = (flags >> 4 & 3) + 1;\n    var encodingType = flags & 15;\n    var arrayType = InvertedEncodingTypes[encodingType];\n    pos++;\n    pos = Math.ceil(pos / 4) * 4;\n    var values = copyFromBuffer(buffer, arrayType, pos, cardinality * valuesNumber, bigEndian);\n    pos += arrayType.BYTES_PER_ELEMENT * cardinality * valuesNumber;\n    attributes[attributeName] = {\n      type: attributeType,\n      cardinality: cardinality,\n      values: values\n    };\n  }\n  pos = Math.ceil(pos / 4) * 4;\n  var indices = null;\n  if (indexedGeometry) {\n    indices = copyFromBuffer(buffer, indicesType === 1 ? Uint32Array : Uint16Array, pos, indicesNumber, bigEndian);\n  }\n  return {\n    version: version,\n    attributes: attributes,\n    indices: indices\n  };\n}\nvar PRWMLoader = /*#__PURE__*/function (_Loader) {\n  _inherits(PRWMLoader, _Loader);\n  var _super = _createSuper(PRWMLoader);\n  function PRWMLoader(manager) {\n    _classCallCheck(this, PRWMLoader);\n    return _super.call(this, manager);\n  }\n  _createClass(PRWMLoader, [{\n    key: \"load\",\n    value: function load(url, onLoad, onProgress, onError) {\n      var scope = this;\n      var loader = new FileLoader(scope.manager);\n      loader.setPath(scope.path);\n      loader.setResponseType(\"arraybuffer\");\n      loader.setRequestHeader(scope.requestHeader);\n      loader.setWithCredentials(scope.withCredentials);\n      url = url.replace(/\\*/g, _isBigEndianPlatform() ? \"be\" : \"le\");\n      loader.load(url, function (arrayBuffer) {\n        try {\n          onLoad(scope.parse(arrayBuffer));\n        } catch (e) {\n          if (onError) {\n            onError(e);\n          } else {\n            console.error(e);\n          }\n          scope.manager.itemError(url);\n        }\n      }, onProgress, onError);\n    }\n  }, {\n    key: \"parse\",\n    value: function parse(arrayBuffer) {\n      var data = decodePrwm(arrayBuffer),\n        attributesKey = Object.keys(data.attributes),\n        bufferGeometry = new BufferGeometry();\n      for (var i = 0; i < attributesKey.length; i++) {\n        var attribute = data.attributes[attributesKey[i]];\n        bufferGeometry.setAttribute(attributesKey[i], new BufferAttribute(attribute.values, attribute.cardinality, attribute.normalized));\n      }\n      if (data.indices !== null) {\n        bufferGeometry.setIndex(new BufferAttribute(data.indices, 1));\n      }\n      return bufferGeometry;\n    }\n  }], [{\n    key: \"isBigEndianPlatform\",\n    value: function isBigEndianPlatform() {\n      return _isBigEndianPlatform();\n    }\n  }]);\n  return PRWMLoader;\n}(Loader);\nexport { PRWMLoader };","map":{"version":3,"names":["Loader","FileLoader","BufferGeometry","BufferAttribute","bigEndianPlatform","isBigEndianPlatform","buffer","ArrayBuffer","uint8Array","Uint8Array","uint16Array","Uint16Array","InvertedEncodingTypes","Float32Array","Int8Array","Int16Array","Int32Array","Uint32Array","getMethods","Float64Array","copyFromBuffer","sourceArrayBuffer","viewType","position","length","fromBigEndian","bytesPerElement","BYTES_PER_ELEMENT","result","readView","DataView","getMethod","name","littleEndian","i","decodePrwm","array","version","flags","indexedGeometry","indicesType","bigEndian","attributesNumber","valuesNumber","indicesNumber","Error","pos","attributes","attributeName","char","String","fromCharCode","attributeType","cardinality","encodingType","arrayType","Math","ceil","values","type","indices","PRWMLoader","_Loader","_inherits","_super","_createSuper","manager","_classCallCheck","call","_createClass","key","value","load","url","onLoad","onProgress","onError","scope","loader","setPath","path","setResponseType","setRequestHeader","requestHeader","setWithCredentials","withCredentials","replace","arrayBuffer","parse","e","console","error","itemError","data","attributesKey","Object","keys","bufferGeometry","attribute","setAttribute","normalized","setIndex"],"sources":["/home/krug/Coding/JavaScript/Websites/Personal/personal/node_modules/.pnpm/three-stdlib@2.23.7_three@0.151.3/node_modules/three-stdlib/loaders/PRWMLoader.js"],"sourcesContent":["import { Loader, FileLoader, BufferGeometry, BufferAttribute } from \"three\";\nlet bigEndianPlatform = null;\nfunction isBigEndianPlatform() {\n  if (bigEndianPlatform === null) {\n    const buffer = new ArrayBuffer(2), uint8Array = new Uint8Array(buffer), uint16Array = new Uint16Array(buffer);\n    uint8Array[0] = 170;\n    uint8Array[1] = 187;\n    bigEndianPlatform = uint16Array[0] === 43707;\n  }\n  return bigEndianPlatform;\n}\nconst InvertedEncodingTypes = [\n  null,\n  Float32Array,\n  null,\n  Int8Array,\n  Int16Array,\n  null,\n  Int32Array,\n  Uint8Array,\n  Uint16Array,\n  null,\n  Uint32Array\n];\nconst getMethods = {\n  Uint16Array: \"getUint16\",\n  Uint32Array: \"getUint32\",\n  Int16Array: \"getInt16\",\n  Int32Array: \"getInt32\",\n  Float32Array: \"getFloat32\",\n  Float64Array: \"getFloat64\"\n};\nfunction copyFromBuffer(sourceArrayBuffer, viewType, position, length, fromBigEndian) {\n  const bytesPerElement = viewType.BYTES_PER_ELEMENT;\n  let result;\n  if (fromBigEndian === isBigEndianPlatform() || bytesPerElement === 1) {\n    result = new viewType(sourceArrayBuffer, position, length);\n  } else {\n    const readView = new DataView(sourceArrayBuffer, position, length * bytesPerElement), getMethod = getMethods[viewType.name], littleEndian = !fromBigEndian;\n    result = new viewType(length);\n    for (let i = 0; i < length; i++) {\n      result[i] = readView[getMethod](i * bytesPerElement, littleEndian);\n    }\n  }\n  return result;\n}\nfunction decodePrwm(buffer) {\n  const array = new Uint8Array(buffer), version = array[0];\n  let flags = array[1];\n  const indexedGeometry = !!(flags >> 7 & 1), indicesType = flags >> 6 & 1, bigEndian = (flags >> 5 & 1) === 1, attributesNumber = flags & 31;\n  let valuesNumber = 0, indicesNumber = 0;\n  if (bigEndian) {\n    valuesNumber = (array[2] << 16) + (array[3] << 8) + array[4];\n    indicesNumber = (array[5] << 16) + (array[6] << 8) + array[7];\n  } else {\n    valuesNumber = array[2] + (array[3] << 8) + (array[4] << 16);\n    indicesNumber = array[5] + (array[6] << 8) + (array[7] << 16);\n  }\n  if (version === 0) {\n    throw new Error(\"PRWM decoder: Invalid format version: 0\");\n  } else if (version !== 1) {\n    throw new Error(\"PRWM decoder: Unsupported format version: \" + version);\n  }\n  if (!indexedGeometry) {\n    if (indicesType !== 0) {\n      throw new Error(\"PRWM decoder: Indices type must be set to 0 for non-indexed geometries\");\n    } else if (indicesNumber !== 0) {\n      throw new Error(\"PRWM decoder: Number of indices must be set to 0 for non-indexed geometries\");\n    }\n  }\n  let pos = 8;\n  const attributes = {};\n  for (let i = 0; i < attributesNumber; i++) {\n    let attributeName = \"\";\n    while (pos < array.length) {\n      const char = array[pos];\n      pos++;\n      if (char === 0) {\n        break;\n      } else {\n        attributeName += String.fromCharCode(char);\n      }\n    }\n    flags = array[pos];\n    const attributeType = flags >> 7 & 1;\n    const cardinality = (flags >> 4 & 3) + 1;\n    const encodingType = flags & 15;\n    const arrayType = InvertedEncodingTypes[encodingType];\n    pos++;\n    pos = Math.ceil(pos / 4) * 4;\n    const values = copyFromBuffer(buffer, arrayType, pos, cardinality * valuesNumber, bigEndian);\n    pos += arrayType.BYTES_PER_ELEMENT * cardinality * valuesNumber;\n    attributes[attributeName] = {\n      type: attributeType,\n      cardinality,\n      values\n    };\n  }\n  pos = Math.ceil(pos / 4) * 4;\n  let indices = null;\n  if (indexedGeometry) {\n    indices = copyFromBuffer(buffer, indicesType === 1 ? Uint32Array : Uint16Array, pos, indicesNumber, bigEndian);\n  }\n  return {\n    version,\n    attributes,\n    indices\n  };\n}\nclass PRWMLoader extends Loader {\n  constructor(manager) {\n    super(manager);\n  }\n  load(url, onLoad, onProgress, onError) {\n    const scope = this;\n    const loader = new FileLoader(scope.manager);\n    loader.setPath(scope.path);\n    loader.setResponseType(\"arraybuffer\");\n    loader.setRequestHeader(scope.requestHeader);\n    loader.setWithCredentials(scope.withCredentials);\n    url = url.replace(/\\*/g, isBigEndianPlatform() ? \"be\" : \"le\");\n    loader.load(\n      url,\n      function(arrayBuffer) {\n        try {\n          onLoad(scope.parse(arrayBuffer));\n        } catch (e) {\n          if (onError) {\n            onError(e);\n          } else {\n            console.error(e);\n          }\n          scope.manager.itemError(url);\n        }\n      },\n      onProgress,\n      onError\n    );\n  }\n  parse(arrayBuffer) {\n    const data = decodePrwm(arrayBuffer), attributesKey = Object.keys(data.attributes), bufferGeometry = new BufferGeometry();\n    for (let i = 0; i < attributesKey.length; i++) {\n      const attribute = data.attributes[attributesKey[i]];\n      bufferGeometry.setAttribute(\n        attributesKey[i],\n        new BufferAttribute(attribute.values, attribute.cardinality, attribute.normalized)\n      );\n    }\n    if (data.indices !== null) {\n      bufferGeometry.setIndex(new BufferAttribute(data.indices, 1));\n    }\n    return bufferGeometry;\n  }\n  static isBigEndianPlatform() {\n    return isBigEndianPlatform();\n  }\n}\nexport {\n  PRWMLoader\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}