{"ast":null,"code":"import { Vector3, Color, Vector2, Vector4, Box3, Matrix4, Frustum, Matrix3, DoubleSide } from \"three\";\nclass RenderableObject {\n  constructor() {\n    this.id = 0;\n    this.object = null;\n    this.z = 0;\n    this.renderOrder = 0;\n  }\n}\nclass RenderableFace {\n  constructor() {\n    this.id = 0;\n    this.v1 = new RenderableVertex();\n    this.v2 = new RenderableVertex();\n    this.v3 = new RenderableVertex();\n    this.normalModel = new Vector3();\n    this.vertexNormalsModel = [new Vector3(), new Vector3(), new Vector3()];\n    this.vertexNormalsLength = 0;\n    this.color = new Color();\n    this.material = null;\n    this.uvs = [new Vector2(), new Vector2(), new Vector2()];\n    this.z = 0;\n    this.renderOrder = 0;\n  }\n}\nclass RenderableVertex {\n  constructor() {\n    this.position = new Vector3();\n    this.positionWorld = new Vector3();\n    this.positionScreen = new Vector4();\n    this.visible = true;\n  }\n  copy(vertex) {\n    this.positionWorld.copy(vertex.positionWorld);\n    this.positionScreen.copy(vertex.positionScreen);\n  }\n}\nclass RenderableLine {\n  constructor() {\n    this.id = 0;\n    this.v1 = new RenderableVertex();\n    this.v2 = new RenderableVertex();\n    this.vertexColors = [new Color(), new Color()];\n    this.material = null;\n    this.z = 0;\n    this.renderOrder = 0;\n  }\n}\nclass RenderableSprite {\n  constructor() {\n    this.id = 0;\n    this.object = null;\n    this.x = 0;\n    this.y = 0;\n    this.z = 0;\n    this.rotation = 0;\n    this.scale = new Vector2();\n    this.material = null;\n    this.renderOrder = 0;\n  }\n}\nclass Projector {\n  constructor() {\n    let _object,\n      _objectCount,\n      _objectPoolLength = 0,\n      _vertex,\n      _vertexCount,\n      _vertexPoolLength = 0,\n      _face,\n      _faceCount,\n      _facePoolLength = 0,\n      _line,\n      _lineCount,\n      _linePoolLength = 0,\n      _sprite,\n      _spriteCount,\n      _spritePoolLength = 0,\n      _modelMatrix;\n    const _renderData = {\n        objects: [],\n        lights: [],\n        elements: []\n      },\n      _vector3 = new Vector3(),\n      _vector4 = new Vector4(),\n      _clipBox = new Box3(new Vector3(-1, -1, -1), new Vector3(1, 1, 1)),\n      _boundingBox = new Box3(),\n      _points3 = new Array(3),\n      _viewMatrix = new Matrix4(),\n      _viewProjectionMatrix = new Matrix4(),\n      _modelViewProjectionMatrix = new Matrix4(),\n      _frustum = new Frustum(),\n      _objectPool = [],\n      _vertexPool = [],\n      _facePool = [],\n      _linePool = [],\n      _spritePool = [];\n    function RenderList() {\n      const normals = [];\n      const colors = [];\n      const uvs = [];\n      let object = null;\n      const normalMatrix = new Matrix3();\n      function setObject(value) {\n        object = value;\n        normalMatrix.getNormalMatrix(object.matrixWorld);\n        normals.length = 0;\n        colors.length = 0;\n        uvs.length = 0;\n      }\n      function projectVertex(vertex) {\n        const position = vertex.position;\n        const positionWorld = vertex.positionWorld;\n        const positionScreen = vertex.positionScreen;\n        positionWorld.copy(position).applyMatrix4(_modelMatrix);\n        positionScreen.copy(positionWorld).applyMatrix4(_viewProjectionMatrix);\n        const invW = 1 / positionScreen.w;\n        positionScreen.x *= invW;\n        positionScreen.y *= invW;\n        positionScreen.z *= invW;\n        vertex.visible = positionScreen.x >= -1 && positionScreen.x <= 1 && positionScreen.y >= -1 && positionScreen.y <= 1 && positionScreen.z >= -1 && positionScreen.z <= 1;\n      }\n      function pushVertex(x, y, z) {\n        _vertex = getNextVertexInPool();\n        _vertex.position.set(x, y, z);\n        projectVertex(_vertex);\n      }\n      function pushNormal(x, y, z) {\n        normals.push(x, y, z);\n      }\n      function pushColor(r, g, b) {\n        colors.push(r, g, b);\n      }\n      function pushUv(x, y) {\n        uvs.push(x, y);\n      }\n      function checkTriangleVisibility(v1, v2, v3) {\n        if (v1.visible === true || v2.visible === true || v3.visible === true) return true;\n        _points3[0] = v1.positionScreen;\n        _points3[1] = v2.positionScreen;\n        _points3[2] = v3.positionScreen;\n        return _clipBox.intersectsBox(_boundingBox.setFromPoints(_points3));\n      }\n      function checkBackfaceCulling(v1, v2, v3) {\n        return (v3.positionScreen.x - v1.positionScreen.x) * (v2.positionScreen.y - v1.positionScreen.y) - (v3.positionScreen.y - v1.positionScreen.y) * (v2.positionScreen.x - v1.positionScreen.x) < 0;\n      }\n      function pushLine(a, b) {\n        const v1 = _vertexPool[a];\n        const v2 = _vertexPool[b];\n        v1.positionScreen.copy(v1.position).applyMatrix4(_modelViewProjectionMatrix);\n        v2.positionScreen.copy(v2.position).applyMatrix4(_modelViewProjectionMatrix);\n        if (clipLine(v1.positionScreen, v2.positionScreen) === true) {\n          v1.positionScreen.multiplyScalar(1 / v1.positionScreen.w);\n          v2.positionScreen.multiplyScalar(1 / v2.positionScreen.w);\n          _line = getNextLineInPool();\n          _line.id = object.id;\n          _line.v1.copy(v1);\n          _line.v2.copy(v2);\n          _line.z = Math.max(v1.positionScreen.z, v2.positionScreen.z);\n          _line.renderOrder = object.renderOrder;\n          _line.material = object.material;\n          if (object.material.vertexColors) {\n            _line.vertexColors[0].fromArray(colors, a * 3);\n            _line.vertexColors[1].fromArray(colors, b * 3);\n          }\n          _renderData.elements.push(_line);\n        }\n      }\n      function pushTriangle(a, b, c, material) {\n        const v1 = _vertexPool[a];\n        const v2 = _vertexPool[b];\n        const v3 = _vertexPool[c];\n        if (checkTriangleVisibility(v1, v2, v3) === false) return;\n        if (material.side === DoubleSide || checkBackfaceCulling(v1, v2, v3) === true) {\n          _face = getNextFaceInPool();\n          _face.id = object.id;\n          _face.v1.copy(v1);\n          _face.v2.copy(v2);\n          _face.v3.copy(v3);\n          _face.z = (v1.positionScreen.z + v2.positionScreen.z + v3.positionScreen.z) / 3;\n          _face.renderOrder = object.renderOrder;\n          _vector3.subVectors(v3.position, v2.position);\n          _vector4.subVectors(v1.position, v2.position);\n          _vector3.cross(_vector4);\n          _face.normalModel.copy(_vector3);\n          _face.normalModel.applyMatrix3(normalMatrix).normalize();\n          for (let i = 0; i < 3; i++) {\n            const normal = _face.vertexNormalsModel[i];\n            normal.fromArray(normals, arguments[i] * 3);\n            normal.applyMatrix3(normalMatrix).normalize();\n            const uv = _face.uvs[i];\n            uv.fromArray(uvs, arguments[i] * 2);\n          }\n          _face.vertexNormalsLength = 3;\n          _face.material = material;\n          if (material.vertexColors) {\n            _face.color.fromArray(colors, a * 3);\n          }\n          _renderData.elements.push(_face);\n        }\n      }\n      return {\n        setObject,\n        projectVertex,\n        checkTriangleVisibility,\n        checkBackfaceCulling,\n        pushVertex,\n        pushNormal,\n        pushColor,\n        pushUv,\n        pushLine,\n        pushTriangle\n      };\n    }\n    const renderList = new RenderList();\n    function projectObject(object) {\n      if (object.visible === false) return;\n      if (object.isLight) {\n        _renderData.lights.push(object);\n      } else if (object.isMesh || object.isLine || object.isPoints) {\n        if (object.material.visible === false) return;\n        if (object.frustumCulled === true && _frustum.intersectsObject(object) === false) return;\n        addObject(object);\n      } else if (object.isSprite) {\n        if (object.material.visible === false) return;\n        if (object.frustumCulled === true && _frustum.intersectsSprite(object) === false) return;\n        addObject(object);\n      }\n      const children = object.children;\n      for (let i = 0, l = children.length; i < l; i++) {\n        projectObject(children[i]);\n      }\n    }\n    function addObject(object) {\n      _object = getNextObjectInPool();\n      _object.id = object.id;\n      _object.object = object;\n      _vector3.setFromMatrixPosition(object.matrixWorld);\n      _vector3.applyMatrix4(_viewProjectionMatrix);\n      _object.z = _vector3.z;\n      _object.renderOrder = object.renderOrder;\n      _renderData.objects.push(_object);\n    }\n    this.projectScene = function (scene, camera, sortObjects, sortElements) {\n      _faceCount = 0;\n      _lineCount = 0;\n      _spriteCount = 0;\n      _renderData.elements.length = 0;\n      if (scene.matrixWorldAutoUpdate === true) scene.updateMatrixWorld();\n      if (camera.parent === null && camera.matrixWorldAutoUpdate === true) camera.updateMatrixWorld();\n      _viewMatrix.copy(camera.matrixWorldInverse);\n      _viewProjectionMatrix.multiplyMatrices(camera.projectionMatrix, _viewMatrix);\n      _frustum.setFromProjectionMatrix(_viewProjectionMatrix);\n      _objectCount = 0;\n      _renderData.objects.length = 0;\n      _renderData.lights.length = 0;\n      projectObject(scene);\n      if (sortObjects === true) {\n        _renderData.objects.sort(painterSort);\n      }\n      const objects = _renderData.objects;\n      for (let o = 0, ol = objects.length; o < ol; o++) {\n        const object = objects[o].object;\n        const geometry = object.geometry;\n        renderList.setObject(object);\n        _modelMatrix = object.matrixWorld;\n        _vertexCount = 0;\n        if (object.isMesh) {\n          let material = object.material;\n          const isMultiMaterial = Array.isArray(material);\n          const attributes = geometry.attributes;\n          const groups = geometry.groups;\n          if (attributes.position === void 0) continue;\n          const positions = attributes.position.array;\n          for (let i = 0, l = positions.length; i < l; i += 3) {\n            let x = positions[i];\n            let y = positions[i + 1];\n            let z = positions[i + 2];\n            const morphTargets = geometry.morphAttributes.position;\n            if (morphTargets !== void 0) {\n              const morphTargetsRelative = geometry.morphTargetsRelative;\n              const morphInfluences = object.morphTargetInfluences;\n              for (let t = 0, tl = morphTargets.length; t < tl; t++) {\n                const influence = morphInfluences[t];\n                if (influence === 0) continue;\n                const target = morphTargets[t];\n                if (morphTargetsRelative) {\n                  x += target.getX(i / 3) * influence;\n                  y += target.getY(i / 3) * influence;\n                  z += target.getZ(i / 3) * influence;\n                } else {\n                  x += (target.getX(i / 3) - positions[i]) * influence;\n                  y += (target.getY(i / 3) - positions[i + 1]) * influence;\n                  z += (target.getZ(i / 3) - positions[i + 2]) * influence;\n                }\n              }\n            }\n            renderList.pushVertex(x, y, z);\n          }\n          if (attributes.normal !== void 0) {\n            const normals = attributes.normal.array;\n            for (let i = 0, l = normals.length; i < l; i += 3) {\n              renderList.pushNormal(normals[i], normals[i + 1], normals[i + 2]);\n            }\n          }\n          if (attributes.color !== void 0) {\n            const colors = attributes.color.array;\n            for (let i = 0, l = colors.length; i < l; i += 3) {\n              renderList.pushColor(colors[i], colors[i + 1], colors[i + 2]);\n            }\n          }\n          if (attributes.uv !== void 0) {\n            const uvs = attributes.uv.array;\n            for (let i = 0, l = uvs.length; i < l; i += 2) {\n              renderList.pushUv(uvs[i], uvs[i + 1]);\n            }\n          }\n          if (geometry.index !== null) {\n            const indices = geometry.index.array;\n            if (groups.length > 0) {\n              for (let g = 0; g < groups.length; g++) {\n                const group = groups[g];\n                material = isMultiMaterial === true ? object.material[group.materialIndex] : object.material;\n                if (material === void 0) continue;\n                for (let i = group.start, l = group.start + group.count; i < l; i += 3) {\n                  renderList.pushTriangle(indices[i], indices[i + 1], indices[i + 2], material);\n                }\n              }\n            } else {\n              for (let i = 0, l = indices.length; i < l; i += 3) {\n                renderList.pushTriangle(indices[i], indices[i + 1], indices[i + 2], material);\n              }\n            }\n          } else {\n            if (groups.length > 0) {\n              for (let g = 0; g < groups.length; g++) {\n                const group = groups[g];\n                material = isMultiMaterial === true ? object.material[group.materialIndex] : object.material;\n                if (material === void 0) continue;\n                for (let i = group.start, l = group.start + group.count; i < l; i += 3) {\n                  renderList.pushTriangle(i, i + 1, i + 2, material);\n                }\n              }\n            } else {\n              for (let i = 0, l = positions.length / 3; i < l; i += 3) {\n                renderList.pushTriangle(i, i + 1, i + 2, material);\n              }\n            }\n          }\n        } else if (object.isLine) {\n          _modelViewProjectionMatrix.multiplyMatrices(_viewProjectionMatrix, _modelMatrix);\n          const attributes = geometry.attributes;\n          if (attributes.position !== void 0) {\n            const positions = attributes.position.array;\n            for (let i = 0, l = positions.length; i < l; i += 3) {\n              renderList.pushVertex(positions[i], positions[i + 1], positions[i + 2]);\n            }\n            if (attributes.color !== void 0) {\n              const colors = attributes.color.array;\n              for (let i = 0, l = colors.length; i < l; i += 3) {\n                renderList.pushColor(colors[i], colors[i + 1], colors[i + 2]);\n              }\n            }\n            if (geometry.index !== null) {\n              const indices = geometry.index.array;\n              for (let i = 0, l = indices.length; i < l; i += 2) {\n                renderList.pushLine(indices[i], indices[i + 1]);\n              }\n            } else {\n              const step = object.isLineSegments ? 2 : 1;\n              for (let i = 0, l = positions.length / 3 - 1; i < l; i += step) {\n                renderList.pushLine(i, i + 1);\n              }\n            }\n          }\n        } else if (object.isPoints) {\n          _modelViewProjectionMatrix.multiplyMatrices(_viewProjectionMatrix, _modelMatrix);\n          const attributes = geometry.attributes;\n          if (attributes.position !== void 0) {\n            const positions = attributes.position.array;\n            for (let i = 0, l = positions.length; i < l; i += 3) {\n              _vector4.set(positions[i], positions[i + 1], positions[i + 2], 1);\n              _vector4.applyMatrix4(_modelViewProjectionMatrix);\n              pushPoint(_vector4, object, camera);\n            }\n          }\n        } else if (object.isSprite) {\n          object.modelViewMatrix.multiplyMatrices(camera.matrixWorldInverse, object.matrixWorld);\n          _vector4.set(_modelMatrix.elements[12], _modelMatrix.elements[13], _modelMatrix.elements[14], 1);\n          _vector4.applyMatrix4(_viewProjectionMatrix);\n          pushPoint(_vector4, object, camera);\n        }\n      }\n      if (sortElements === true) {\n        _renderData.elements.sort(painterSort);\n      }\n      return _renderData;\n    };\n    function pushPoint(_vector42, object, camera) {\n      const invW = 1 / _vector42.w;\n      _vector42.z *= invW;\n      if (_vector42.z >= -1 && _vector42.z <= 1) {\n        _sprite = getNextSpriteInPool();\n        _sprite.id = object.id;\n        _sprite.x = _vector42.x * invW;\n        _sprite.y = _vector42.y * invW;\n        _sprite.z = _vector42.z;\n        _sprite.renderOrder = object.renderOrder;\n        _sprite.object = object;\n        _sprite.rotation = object.rotation;\n        _sprite.scale.x = object.scale.x * Math.abs(_sprite.x - (_vector42.x + camera.projectionMatrix.elements[0]) / (_vector42.w + camera.projectionMatrix.elements[12]));\n        _sprite.scale.y = object.scale.y * Math.abs(_sprite.y - (_vector42.y + camera.projectionMatrix.elements[5]) / (_vector42.w + camera.projectionMatrix.elements[13]));\n        _sprite.material = object.material;\n        _renderData.elements.push(_sprite);\n      }\n    }\n    function getNextObjectInPool() {\n      if (_objectCount === _objectPoolLength) {\n        const object = new RenderableObject();\n        _objectPool.push(object);\n        _objectPoolLength++;\n        _objectCount++;\n        return object;\n      }\n      return _objectPool[_objectCount++];\n    }\n    function getNextVertexInPool() {\n      if (_vertexCount === _vertexPoolLength) {\n        const vertex = new RenderableVertex();\n        _vertexPool.push(vertex);\n        _vertexPoolLength++;\n        _vertexCount++;\n        return vertex;\n      }\n      return _vertexPool[_vertexCount++];\n    }\n    function getNextFaceInPool() {\n      if (_faceCount === _facePoolLength) {\n        const face = new RenderableFace();\n        _facePool.push(face);\n        _facePoolLength++;\n        _faceCount++;\n        return face;\n      }\n      return _facePool[_faceCount++];\n    }\n    function getNextLineInPool() {\n      if (_lineCount === _linePoolLength) {\n        const line = new RenderableLine();\n        _linePool.push(line);\n        _linePoolLength++;\n        _lineCount++;\n        return line;\n      }\n      return _linePool[_lineCount++];\n    }\n    function getNextSpriteInPool() {\n      if (_spriteCount === _spritePoolLength) {\n        const sprite = new RenderableSprite();\n        _spritePool.push(sprite);\n        _spritePoolLength++;\n        _spriteCount++;\n        return sprite;\n      }\n      return _spritePool[_spriteCount++];\n    }\n    function painterSort(a, b) {\n      if (a.renderOrder !== b.renderOrder) {\n        return a.renderOrder - b.renderOrder;\n      } else if (a.z !== b.z) {\n        return b.z - a.z;\n      } else if (a.id !== b.id) {\n        return a.id - b.id;\n      } else {\n        return 0;\n      }\n    }\n    function clipLine(s1, s2) {\n      let alpha1 = 0,\n        alpha2 = 1;\n      const bc1near = s1.z + s1.w,\n        bc2near = s2.z + s2.w,\n        bc1far = -s1.z + s1.w,\n        bc2far = -s2.z + s2.w;\n      if (bc1near >= 0 && bc2near >= 0 && bc1far >= 0 && bc2far >= 0) {\n        return true;\n      } else if (bc1near < 0 && bc2near < 0 || bc1far < 0 && bc2far < 0) {\n        return false;\n      } else {\n        if (bc1near < 0) {\n          alpha1 = Math.max(alpha1, bc1near / (bc1near - bc2near));\n        } else if (bc2near < 0) {\n          alpha2 = Math.min(alpha2, bc1near / (bc1near - bc2near));\n        }\n        if (bc1far < 0) {\n          alpha1 = Math.max(alpha1, bc1far / (bc1far - bc2far));\n        } else if (bc2far < 0) {\n          alpha2 = Math.min(alpha2, bc1far / (bc1far - bc2far));\n        }\n        if (alpha2 < alpha1) {\n          return false;\n        } else {\n          s1.lerp(s2, alpha1);\n          s2.lerp(s1, 1 - alpha2);\n          return true;\n        }\n      }\n    }\n  }\n}\nexport { Projector, RenderableFace, RenderableLine, RenderableObject, RenderableSprite, RenderableVertex };","map":{"version":3,"names":["Vector3","Color","Vector2","Vector4","Box3","Matrix4","Frustum","Matrix3","DoubleSide","RenderableObject","constructor","id","object","z","renderOrder","RenderableFace","v1","RenderableVertex","v2","v3","normalModel","vertexNormalsModel","vertexNormalsLength","color","material","uvs","position","positionWorld","positionScreen","visible","copy","vertex","RenderableLine","vertexColors","RenderableSprite","x","y","rotation","scale","Projector","_object","_objectCount","_objectPoolLength","_vertex","_vertexCount","_vertexPoolLength","_face","_faceCount","_facePoolLength","_line","_lineCount","_linePoolLength","_sprite","_spriteCount","_spritePoolLength","_modelMatrix","_renderData","objects","lights","elements","_vector3","_vector4","_clipBox","_boundingBox","_points3","Array","_viewMatrix","_viewProjectionMatrix","_modelViewProjectionMatrix","_frustum","_objectPool","_vertexPool","_facePool","_linePool","_spritePool","RenderList","normals","colors","normalMatrix","setObject","value","getNormalMatrix","matrixWorld","length","projectVertex","applyMatrix4","invW","w","pushVertex","getNextVertexInPool","set","pushNormal","push","pushColor","r","g","b","pushUv","checkTriangleVisibility","intersectsBox","setFromPoints","checkBackfaceCulling","pushLine","a","clipLine","multiplyScalar","getNextLineInPool","Math","max","fromArray","pushTriangle","c","side","getNextFaceInPool","subVectors","cross","applyMatrix3","normalize","i","normal","arguments","uv","renderList","projectObject","isLight","isMesh","isLine","isPoints","frustumCulled","intersectsObject","addObject","isSprite","intersectsSprite","children","l","getNextObjectInPool","setFromMatrixPosition","projectScene","scene","camera","sortObjects","sortElements","matrixWorldAutoUpdate","updateMatrixWorld","parent","matrixWorldInverse","multiplyMatrices","projectionMatrix","setFromProjectionMatrix","sort","painterSort","o","ol","geometry","isMultiMaterial","isArray","attributes","groups","positions","array","morphTargets","morphAttributes","morphTargetsRelative","morphInfluences","morphTargetInfluences","t","tl","influence","target","getX","getY","getZ","index","indices","group","materialIndex","start","count","step","isLineSegments","pushPoint","modelViewMatrix","_vector42","getNextSpriteInPool","abs","face","line","sprite","s1","s2","alpha1","alpha2","bc1near","bc2near","bc1far","bc2far","min","lerp"],"sources":["/home/krug/Coding/JavaScript/Websites/Personal/personal/node_modules/.pnpm/three-stdlib@2.23.7_three@0.151.3/node_modules/three-stdlib/renderers/Projector.js"],"sourcesContent":["import { Vector3, Color, Vector2, Vector4, Box3, Matrix4, Frustum, Matrix3, DoubleSide } from \"three\";\nclass RenderableObject {\n  constructor() {\n    this.id = 0;\n    this.object = null;\n    this.z = 0;\n    this.renderOrder = 0;\n  }\n}\nclass RenderableFace {\n  constructor() {\n    this.id = 0;\n    this.v1 = new RenderableVertex();\n    this.v2 = new RenderableVertex();\n    this.v3 = new RenderableVertex();\n    this.normalModel = new Vector3();\n    this.vertexNormalsModel = [new Vector3(), new Vector3(), new Vector3()];\n    this.vertexNormalsLength = 0;\n    this.color = new Color();\n    this.material = null;\n    this.uvs = [new Vector2(), new Vector2(), new Vector2()];\n    this.z = 0;\n    this.renderOrder = 0;\n  }\n}\nclass RenderableVertex {\n  constructor() {\n    this.position = new Vector3();\n    this.positionWorld = new Vector3();\n    this.positionScreen = new Vector4();\n    this.visible = true;\n  }\n  copy(vertex) {\n    this.positionWorld.copy(vertex.positionWorld);\n    this.positionScreen.copy(vertex.positionScreen);\n  }\n}\nclass RenderableLine {\n  constructor() {\n    this.id = 0;\n    this.v1 = new RenderableVertex();\n    this.v2 = new RenderableVertex();\n    this.vertexColors = [new Color(), new Color()];\n    this.material = null;\n    this.z = 0;\n    this.renderOrder = 0;\n  }\n}\nclass RenderableSprite {\n  constructor() {\n    this.id = 0;\n    this.object = null;\n    this.x = 0;\n    this.y = 0;\n    this.z = 0;\n    this.rotation = 0;\n    this.scale = new Vector2();\n    this.material = null;\n    this.renderOrder = 0;\n  }\n}\nclass Projector {\n  constructor() {\n    let _object, _objectCount, _objectPoolLength = 0, _vertex, _vertexCount, _vertexPoolLength = 0, _face, _faceCount, _facePoolLength = 0, _line, _lineCount, _linePoolLength = 0, _sprite, _spriteCount, _spritePoolLength = 0, _modelMatrix;\n    const _renderData = { objects: [], lights: [], elements: [] }, _vector3 = new Vector3(), _vector4 = new Vector4(), _clipBox = new Box3(new Vector3(-1, -1, -1), new Vector3(1, 1, 1)), _boundingBox = new Box3(), _points3 = new Array(3), _viewMatrix = new Matrix4(), _viewProjectionMatrix = new Matrix4(), _modelViewProjectionMatrix = new Matrix4(), _frustum = new Frustum(), _objectPool = [], _vertexPool = [], _facePool = [], _linePool = [], _spritePool = [];\n    function RenderList() {\n      const normals = [];\n      const colors = [];\n      const uvs = [];\n      let object = null;\n      const normalMatrix = new Matrix3();\n      function setObject(value) {\n        object = value;\n        normalMatrix.getNormalMatrix(object.matrixWorld);\n        normals.length = 0;\n        colors.length = 0;\n        uvs.length = 0;\n      }\n      function projectVertex(vertex) {\n        const position = vertex.position;\n        const positionWorld = vertex.positionWorld;\n        const positionScreen = vertex.positionScreen;\n        positionWorld.copy(position).applyMatrix4(_modelMatrix);\n        positionScreen.copy(positionWorld).applyMatrix4(_viewProjectionMatrix);\n        const invW = 1 / positionScreen.w;\n        positionScreen.x *= invW;\n        positionScreen.y *= invW;\n        positionScreen.z *= invW;\n        vertex.visible = positionScreen.x >= -1 && positionScreen.x <= 1 && positionScreen.y >= -1 && positionScreen.y <= 1 && positionScreen.z >= -1 && positionScreen.z <= 1;\n      }\n      function pushVertex(x, y, z) {\n        _vertex = getNextVertexInPool();\n        _vertex.position.set(x, y, z);\n        projectVertex(_vertex);\n      }\n      function pushNormal(x, y, z) {\n        normals.push(x, y, z);\n      }\n      function pushColor(r, g, b) {\n        colors.push(r, g, b);\n      }\n      function pushUv(x, y) {\n        uvs.push(x, y);\n      }\n      function checkTriangleVisibility(v1, v2, v3) {\n        if (v1.visible === true || v2.visible === true || v3.visible === true)\n          return true;\n        _points3[0] = v1.positionScreen;\n        _points3[1] = v2.positionScreen;\n        _points3[2] = v3.positionScreen;\n        return _clipBox.intersectsBox(_boundingBox.setFromPoints(_points3));\n      }\n      function checkBackfaceCulling(v1, v2, v3) {\n        return (v3.positionScreen.x - v1.positionScreen.x) * (v2.positionScreen.y - v1.positionScreen.y) - (v3.positionScreen.y - v1.positionScreen.y) * (v2.positionScreen.x - v1.positionScreen.x) < 0;\n      }\n      function pushLine(a, b) {\n        const v1 = _vertexPool[a];\n        const v2 = _vertexPool[b];\n        v1.positionScreen.copy(v1.position).applyMatrix4(_modelViewProjectionMatrix);\n        v2.positionScreen.copy(v2.position).applyMatrix4(_modelViewProjectionMatrix);\n        if (clipLine(v1.positionScreen, v2.positionScreen) === true) {\n          v1.positionScreen.multiplyScalar(1 / v1.positionScreen.w);\n          v2.positionScreen.multiplyScalar(1 / v2.positionScreen.w);\n          _line = getNextLineInPool();\n          _line.id = object.id;\n          _line.v1.copy(v1);\n          _line.v2.copy(v2);\n          _line.z = Math.max(v1.positionScreen.z, v2.positionScreen.z);\n          _line.renderOrder = object.renderOrder;\n          _line.material = object.material;\n          if (object.material.vertexColors) {\n            _line.vertexColors[0].fromArray(colors, a * 3);\n            _line.vertexColors[1].fromArray(colors, b * 3);\n          }\n          _renderData.elements.push(_line);\n        }\n      }\n      function pushTriangle(a, b, c, material) {\n        const v1 = _vertexPool[a];\n        const v2 = _vertexPool[b];\n        const v3 = _vertexPool[c];\n        if (checkTriangleVisibility(v1, v2, v3) === false)\n          return;\n        if (material.side === DoubleSide || checkBackfaceCulling(v1, v2, v3) === true) {\n          _face = getNextFaceInPool();\n          _face.id = object.id;\n          _face.v1.copy(v1);\n          _face.v2.copy(v2);\n          _face.v3.copy(v3);\n          _face.z = (v1.positionScreen.z + v2.positionScreen.z + v3.positionScreen.z) / 3;\n          _face.renderOrder = object.renderOrder;\n          _vector3.subVectors(v3.position, v2.position);\n          _vector4.subVectors(v1.position, v2.position);\n          _vector3.cross(_vector4);\n          _face.normalModel.copy(_vector3);\n          _face.normalModel.applyMatrix3(normalMatrix).normalize();\n          for (let i = 0; i < 3; i++) {\n            const normal = _face.vertexNormalsModel[i];\n            normal.fromArray(normals, arguments[i] * 3);\n            normal.applyMatrix3(normalMatrix).normalize();\n            const uv = _face.uvs[i];\n            uv.fromArray(uvs, arguments[i] * 2);\n          }\n          _face.vertexNormalsLength = 3;\n          _face.material = material;\n          if (material.vertexColors) {\n            _face.color.fromArray(colors, a * 3);\n          }\n          _renderData.elements.push(_face);\n        }\n      }\n      return {\n        setObject,\n        projectVertex,\n        checkTriangleVisibility,\n        checkBackfaceCulling,\n        pushVertex,\n        pushNormal,\n        pushColor,\n        pushUv,\n        pushLine,\n        pushTriangle\n      };\n    }\n    const renderList = new RenderList();\n    function projectObject(object) {\n      if (object.visible === false)\n        return;\n      if (object.isLight) {\n        _renderData.lights.push(object);\n      } else if (object.isMesh || object.isLine || object.isPoints) {\n        if (object.material.visible === false)\n          return;\n        if (object.frustumCulled === true && _frustum.intersectsObject(object) === false)\n          return;\n        addObject(object);\n      } else if (object.isSprite) {\n        if (object.material.visible === false)\n          return;\n        if (object.frustumCulled === true && _frustum.intersectsSprite(object) === false)\n          return;\n        addObject(object);\n      }\n      const children = object.children;\n      for (let i = 0, l = children.length; i < l; i++) {\n        projectObject(children[i]);\n      }\n    }\n    function addObject(object) {\n      _object = getNextObjectInPool();\n      _object.id = object.id;\n      _object.object = object;\n      _vector3.setFromMatrixPosition(object.matrixWorld);\n      _vector3.applyMatrix4(_viewProjectionMatrix);\n      _object.z = _vector3.z;\n      _object.renderOrder = object.renderOrder;\n      _renderData.objects.push(_object);\n    }\n    this.projectScene = function(scene, camera, sortObjects, sortElements) {\n      _faceCount = 0;\n      _lineCount = 0;\n      _spriteCount = 0;\n      _renderData.elements.length = 0;\n      if (scene.matrixWorldAutoUpdate === true)\n        scene.updateMatrixWorld();\n      if (camera.parent === null && camera.matrixWorldAutoUpdate === true)\n        camera.updateMatrixWorld();\n      _viewMatrix.copy(camera.matrixWorldInverse);\n      _viewProjectionMatrix.multiplyMatrices(camera.projectionMatrix, _viewMatrix);\n      _frustum.setFromProjectionMatrix(_viewProjectionMatrix);\n      _objectCount = 0;\n      _renderData.objects.length = 0;\n      _renderData.lights.length = 0;\n      projectObject(scene);\n      if (sortObjects === true) {\n        _renderData.objects.sort(painterSort);\n      }\n      const objects = _renderData.objects;\n      for (let o = 0, ol = objects.length; o < ol; o++) {\n        const object = objects[o].object;\n        const geometry = object.geometry;\n        renderList.setObject(object);\n        _modelMatrix = object.matrixWorld;\n        _vertexCount = 0;\n        if (object.isMesh) {\n          let material = object.material;\n          const isMultiMaterial = Array.isArray(material);\n          const attributes = geometry.attributes;\n          const groups = geometry.groups;\n          if (attributes.position === void 0)\n            continue;\n          const positions = attributes.position.array;\n          for (let i = 0, l = positions.length; i < l; i += 3) {\n            let x = positions[i];\n            let y = positions[i + 1];\n            let z = positions[i + 2];\n            const morphTargets = geometry.morphAttributes.position;\n            if (morphTargets !== void 0) {\n              const morphTargetsRelative = geometry.morphTargetsRelative;\n              const morphInfluences = object.morphTargetInfluences;\n              for (let t = 0, tl = morphTargets.length; t < tl; t++) {\n                const influence = morphInfluences[t];\n                if (influence === 0)\n                  continue;\n                const target = morphTargets[t];\n                if (morphTargetsRelative) {\n                  x += target.getX(i / 3) * influence;\n                  y += target.getY(i / 3) * influence;\n                  z += target.getZ(i / 3) * influence;\n                } else {\n                  x += (target.getX(i / 3) - positions[i]) * influence;\n                  y += (target.getY(i / 3) - positions[i + 1]) * influence;\n                  z += (target.getZ(i / 3) - positions[i + 2]) * influence;\n                }\n              }\n            }\n            renderList.pushVertex(x, y, z);\n          }\n          if (attributes.normal !== void 0) {\n            const normals = attributes.normal.array;\n            for (let i = 0, l = normals.length; i < l; i += 3) {\n              renderList.pushNormal(normals[i], normals[i + 1], normals[i + 2]);\n            }\n          }\n          if (attributes.color !== void 0) {\n            const colors = attributes.color.array;\n            for (let i = 0, l = colors.length; i < l; i += 3) {\n              renderList.pushColor(colors[i], colors[i + 1], colors[i + 2]);\n            }\n          }\n          if (attributes.uv !== void 0) {\n            const uvs = attributes.uv.array;\n            for (let i = 0, l = uvs.length; i < l; i += 2) {\n              renderList.pushUv(uvs[i], uvs[i + 1]);\n            }\n          }\n          if (geometry.index !== null) {\n            const indices = geometry.index.array;\n            if (groups.length > 0) {\n              for (let g = 0; g < groups.length; g++) {\n                const group = groups[g];\n                material = isMultiMaterial === true ? object.material[group.materialIndex] : object.material;\n                if (material === void 0)\n                  continue;\n                for (let i = group.start, l = group.start + group.count; i < l; i += 3) {\n                  renderList.pushTriangle(indices[i], indices[i + 1], indices[i + 2], material);\n                }\n              }\n            } else {\n              for (let i = 0, l = indices.length; i < l; i += 3) {\n                renderList.pushTriangle(indices[i], indices[i + 1], indices[i + 2], material);\n              }\n            }\n          } else {\n            if (groups.length > 0) {\n              for (let g = 0; g < groups.length; g++) {\n                const group = groups[g];\n                material = isMultiMaterial === true ? object.material[group.materialIndex] : object.material;\n                if (material === void 0)\n                  continue;\n                for (let i = group.start, l = group.start + group.count; i < l; i += 3) {\n                  renderList.pushTriangle(i, i + 1, i + 2, material);\n                }\n              }\n            } else {\n              for (let i = 0, l = positions.length / 3; i < l; i += 3) {\n                renderList.pushTriangle(i, i + 1, i + 2, material);\n              }\n            }\n          }\n        } else if (object.isLine) {\n          _modelViewProjectionMatrix.multiplyMatrices(_viewProjectionMatrix, _modelMatrix);\n          const attributes = geometry.attributes;\n          if (attributes.position !== void 0) {\n            const positions = attributes.position.array;\n            for (let i = 0, l = positions.length; i < l; i += 3) {\n              renderList.pushVertex(positions[i], positions[i + 1], positions[i + 2]);\n            }\n            if (attributes.color !== void 0) {\n              const colors = attributes.color.array;\n              for (let i = 0, l = colors.length; i < l; i += 3) {\n                renderList.pushColor(colors[i], colors[i + 1], colors[i + 2]);\n              }\n            }\n            if (geometry.index !== null) {\n              const indices = geometry.index.array;\n              for (let i = 0, l = indices.length; i < l; i += 2) {\n                renderList.pushLine(indices[i], indices[i + 1]);\n              }\n            } else {\n              const step = object.isLineSegments ? 2 : 1;\n              for (let i = 0, l = positions.length / 3 - 1; i < l; i += step) {\n                renderList.pushLine(i, i + 1);\n              }\n            }\n          }\n        } else if (object.isPoints) {\n          _modelViewProjectionMatrix.multiplyMatrices(_viewProjectionMatrix, _modelMatrix);\n          const attributes = geometry.attributes;\n          if (attributes.position !== void 0) {\n            const positions = attributes.position.array;\n            for (let i = 0, l = positions.length; i < l; i += 3) {\n              _vector4.set(positions[i], positions[i + 1], positions[i + 2], 1);\n              _vector4.applyMatrix4(_modelViewProjectionMatrix);\n              pushPoint(_vector4, object, camera);\n            }\n          }\n        } else if (object.isSprite) {\n          object.modelViewMatrix.multiplyMatrices(camera.matrixWorldInverse, object.matrixWorld);\n          _vector4.set(_modelMatrix.elements[12], _modelMatrix.elements[13], _modelMatrix.elements[14], 1);\n          _vector4.applyMatrix4(_viewProjectionMatrix);\n          pushPoint(_vector4, object, camera);\n        }\n      }\n      if (sortElements === true) {\n        _renderData.elements.sort(painterSort);\n      }\n      return _renderData;\n    };\n    function pushPoint(_vector42, object, camera) {\n      const invW = 1 / _vector42.w;\n      _vector42.z *= invW;\n      if (_vector42.z >= -1 && _vector42.z <= 1) {\n        _sprite = getNextSpriteInPool();\n        _sprite.id = object.id;\n        _sprite.x = _vector42.x * invW;\n        _sprite.y = _vector42.y * invW;\n        _sprite.z = _vector42.z;\n        _sprite.renderOrder = object.renderOrder;\n        _sprite.object = object;\n        _sprite.rotation = object.rotation;\n        _sprite.scale.x = object.scale.x * Math.abs(\n          _sprite.x - (_vector42.x + camera.projectionMatrix.elements[0]) / (_vector42.w + camera.projectionMatrix.elements[12])\n        );\n        _sprite.scale.y = object.scale.y * Math.abs(\n          _sprite.y - (_vector42.y + camera.projectionMatrix.elements[5]) / (_vector42.w + camera.projectionMatrix.elements[13])\n        );\n        _sprite.material = object.material;\n        _renderData.elements.push(_sprite);\n      }\n    }\n    function getNextObjectInPool() {\n      if (_objectCount === _objectPoolLength) {\n        const object = new RenderableObject();\n        _objectPool.push(object);\n        _objectPoolLength++;\n        _objectCount++;\n        return object;\n      }\n      return _objectPool[_objectCount++];\n    }\n    function getNextVertexInPool() {\n      if (_vertexCount === _vertexPoolLength) {\n        const vertex = new RenderableVertex();\n        _vertexPool.push(vertex);\n        _vertexPoolLength++;\n        _vertexCount++;\n        return vertex;\n      }\n      return _vertexPool[_vertexCount++];\n    }\n    function getNextFaceInPool() {\n      if (_faceCount === _facePoolLength) {\n        const face = new RenderableFace();\n        _facePool.push(face);\n        _facePoolLength++;\n        _faceCount++;\n        return face;\n      }\n      return _facePool[_faceCount++];\n    }\n    function getNextLineInPool() {\n      if (_lineCount === _linePoolLength) {\n        const line = new RenderableLine();\n        _linePool.push(line);\n        _linePoolLength++;\n        _lineCount++;\n        return line;\n      }\n      return _linePool[_lineCount++];\n    }\n    function getNextSpriteInPool() {\n      if (_spriteCount === _spritePoolLength) {\n        const sprite = new RenderableSprite();\n        _spritePool.push(sprite);\n        _spritePoolLength++;\n        _spriteCount++;\n        return sprite;\n      }\n      return _spritePool[_spriteCount++];\n    }\n    function painterSort(a, b) {\n      if (a.renderOrder !== b.renderOrder) {\n        return a.renderOrder - b.renderOrder;\n      } else if (a.z !== b.z) {\n        return b.z - a.z;\n      } else if (a.id !== b.id) {\n        return a.id - b.id;\n      } else {\n        return 0;\n      }\n    }\n    function clipLine(s1, s2) {\n      let alpha1 = 0, alpha2 = 1;\n      const bc1near = s1.z + s1.w, bc2near = s2.z + s2.w, bc1far = -s1.z + s1.w, bc2far = -s2.z + s2.w;\n      if (bc1near >= 0 && bc2near >= 0 && bc1far >= 0 && bc2far >= 0) {\n        return true;\n      } else if (bc1near < 0 && bc2near < 0 || bc1far < 0 && bc2far < 0) {\n        return false;\n      } else {\n        if (bc1near < 0) {\n          alpha1 = Math.max(alpha1, bc1near / (bc1near - bc2near));\n        } else if (bc2near < 0) {\n          alpha2 = Math.min(alpha2, bc1near / (bc1near - bc2near));\n        }\n        if (bc1far < 0) {\n          alpha1 = Math.max(alpha1, bc1far / (bc1far - bc2far));\n        } else if (bc2far < 0) {\n          alpha2 = Math.min(alpha2, bc1far / (bc1far - bc2far));\n        }\n        if (alpha2 < alpha1) {\n          return false;\n        } else {\n          s1.lerp(s2, alpha1);\n          s2.lerp(s1, 1 - alpha2);\n          return true;\n        }\n      }\n    }\n  }\n}\nexport {\n  Projector,\n  RenderableFace,\n  RenderableLine,\n  RenderableObject,\n  RenderableSprite,\n  RenderableVertex\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}