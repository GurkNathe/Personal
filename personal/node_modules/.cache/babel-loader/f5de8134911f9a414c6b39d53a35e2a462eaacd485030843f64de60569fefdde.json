{"ast":null,"code":"async function AmmoPhysics() {\n  if (\"Ammo\" in window === false) {\n    console.error(\"AmmoPhysics: Couldn't find Ammo.js\");\n    return;\n  }\n  const AmmoLib = await Ammo();\n  const frameRate = 60;\n  const collisionConfiguration = new AmmoLib.btDefaultCollisionConfiguration();\n  const dispatcher = new AmmoLib.btCollisionDispatcher(collisionConfiguration);\n  const broadphase = new AmmoLib.btDbvtBroadphase();\n  const solver = new AmmoLib.btSequentialImpulseConstraintSolver();\n  const world = new AmmoLib.btDiscreteDynamicsWorld(dispatcher, broadphase, solver, collisionConfiguration);\n  world.setGravity(new AmmoLib.btVector3(0, -9.8, 0));\n  const worldTransform = new AmmoLib.btTransform();\n  function getShape(geometry) {\n    const parameters = geometry.parameters;\n    if (geometry.type === \"BoxGeometry\") {\n      const sx = parameters.width !== void 0 ? parameters.width / 2 : 0.5;\n      const sy = parameters.height !== void 0 ? parameters.height / 2 : 0.5;\n      const sz = parameters.depth !== void 0 ? parameters.depth / 2 : 0.5;\n      const shape = new AmmoLib.btBoxShape(new AmmoLib.btVector3(sx, sy, sz));\n      shape.setMargin(0.05);\n      return shape;\n    } else if (geometry.type === \"SphereGeometry\" || geometry.type === \"IcosahedronGeometry\") {\n      const radius = parameters.radius !== void 0 ? parameters.radius : 1;\n      const shape = new AmmoLib.btSphereShape(radius);\n      shape.setMargin(0.05);\n      return shape;\n    }\n    return null;\n  }\n  const meshes = [];\n  const meshMap = /* @__PURE__ */new WeakMap();\n  function addMesh(mesh) {\n    let mass = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n    const shape = getShape(mesh.geometry);\n    if (shape !== null) {\n      if (mesh.isInstancedMesh) {\n        handleInstancedMesh(mesh, mass, shape);\n      } else if (mesh.isMesh) {\n        handleMesh(mesh, mass, shape);\n      }\n    }\n  }\n  function handleMesh(mesh, mass, shape) {\n    const position = mesh.position;\n    const quaternion = mesh.quaternion;\n    const transform = new AmmoLib.btTransform();\n    transform.setIdentity();\n    transform.setOrigin(new AmmoLib.btVector3(position.x, position.y, position.z));\n    transform.setRotation(new AmmoLib.btQuaternion(quaternion.x, quaternion.y, quaternion.z, quaternion.w));\n    const motionState = new AmmoLib.btDefaultMotionState(transform);\n    const localInertia = new AmmoLib.btVector3(0, 0, 0);\n    shape.calculateLocalInertia(mass, localInertia);\n    const rbInfo = new AmmoLib.btRigidBodyConstructionInfo(mass, motionState, shape, localInertia);\n    const body = new AmmoLib.btRigidBody(rbInfo);\n    world.addRigidBody(body);\n    if (mass > 0) {\n      meshes.push(mesh);\n      meshMap.set(mesh, body);\n    }\n  }\n  function handleInstancedMesh(mesh, mass, shape) {\n    const array = mesh.instanceMatrix.array;\n    const bodies = [];\n    for (let i = 0; i < mesh.count; i++) {\n      const index = i * 16;\n      const transform = new AmmoLib.btTransform();\n      transform.setFromOpenGLMatrix(array.slice(index, index + 16));\n      const motionState = new AmmoLib.btDefaultMotionState(transform);\n      const localInertia = new AmmoLib.btVector3(0, 0, 0);\n      shape.calculateLocalInertia(mass, localInertia);\n      const rbInfo = new AmmoLib.btRigidBodyConstructionInfo(mass, motionState, shape, localInertia);\n      const body = new AmmoLib.btRigidBody(rbInfo);\n      world.addRigidBody(body);\n      bodies.push(body);\n    }\n    if (mass > 0) {\n      mesh.instanceMatrix.setUsage(35048);\n      meshes.push(mesh);\n      meshMap.set(mesh, bodies);\n    }\n  }\n  function setMeshPosition(mesh, position) {\n    let index = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n    if (mesh.isInstancedMesh) {\n      const bodies = meshMap.get(mesh);\n      const body = bodies[index];\n      body.setAngularVelocity(new AmmoLib.btVector3(0, 0, 0));\n      body.setLinearVelocity(new AmmoLib.btVector3(0, 0, 0));\n      worldTransform.setIdentity();\n      worldTransform.setOrigin(new AmmoLib.btVector3(position.x, position.y, position.z));\n      body.setWorldTransform(worldTransform);\n    } else if (mesh.isMesh) {\n      const body = meshMap.get(mesh);\n      body.setAngularVelocity(new AmmoLib.btVector3(0, 0, 0));\n      body.setLinearVelocity(new AmmoLib.btVector3(0, 0, 0));\n      worldTransform.setIdentity();\n      worldTransform.setOrigin(new AmmoLib.btVector3(position.x, position.y, position.z));\n      body.setWorldTransform(worldTransform);\n    }\n  }\n  let lastTime = 0;\n  function step() {\n    const time = performance.now();\n    if (lastTime > 0) {\n      const delta = (time - lastTime) / 1e3;\n      world.stepSimulation(delta, 10);\n    }\n    lastTime = time;\n    for (let i = 0, l = meshes.length; i < l; i++) {\n      const mesh = meshes[i];\n      if (mesh.isInstancedMesh) {\n        const array = mesh.instanceMatrix.array;\n        const bodies = meshMap.get(mesh);\n        for (let j = 0; j < bodies.length; j++) {\n          const body = bodies[j];\n          const motionState = body.getMotionState();\n          motionState.getWorldTransform(worldTransform);\n          const position = worldTransform.getOrigin();\n          const quaternion = worldTransform.getRotation();\n          compose(position, quaternion, array, j * 16);\n        }\n        mesh.instanceMatrix.needsUpdate = true;\n      } else if (mesh.isMesh) {\n        const body = meshMap.get(mesh);\n        const motionState = body.getMotionState();\n        motionState.getWorldTransform(worldTransform);\n        const position = worldTransform.getOrigin();\n        const quaternion = worldTransform.getRotation();\n        mesh.position.set(position.x(), position.y(), position.z());\n        mesh.quaternion.set(quaternion.x(), quaternion.y(), quaternion.z(), quaternion.w());\n      }\n    }\n  }\n  setInterval(step, 1e3 / frameRate);\n  return {\n    addMesh,\n    setMeshPosition\n    // addCompoundMesh\n  };\n}\n\nfunction compose(position, quaternion, array, index) {\n  const x = quaternion.x(),\n    y = quaternion.y(),\n    z = quaternion.z(),\n    w = quaternion.w();\n  const x2 = x + x,\n    y2 = y + y,\n    z2 = z + z;\n  const xx = x * x2,\n    xy = x * y2,\n    xz = x * z2;\n  const yy = y * y2,\n    yz = y * z2,\n    zz = z * z2;\n  const wx = w * x2,\n    wy = w * y2,\n    wz = w * z2;\n  array[index + 0] = 1 - (yy + zz);\n  array[index + 1] = xy + wz;\n  array[index + 2] = xz - wy;\n  array[index + 3] = 0;\n  array[index + 4] = xy - wz;\n  array[index + 5] = 1 - (xx + zz);\n  array[index + 6] = yz + wx;\n  array[index + 7] = 0;\n  array[index + 8] = xz + wy;\n  array[index + 9] = yz - wx;\n  array[index + 10] = 1 - (xx + yy);\n  array[index + 11] = 0;\n  array[index + 12] = position.x();\n  array[index + 13] = position.y();\n  array[index + 14] = position.z();\n  array[index + 15] = 1;\n}\nexport { AmmoPhysics };","map":{"version":3,"names":["AmmoPhysics","window","console","error","AmmoLib","Ammo","frameRate","collisionConfiguration","btDefaultCollisionConfiguration","dispatcher","btCollisionDispatcher","broadphase","btDbvtBroadphase","solver","btSequentialImpulseConstraintSolver","world","btDiscreteDynamicsWorld","setGravity","btVector3","worldTransform","btTransform","getShape","geometry","parameters","type","sx","width","sy","height","sz","depth","shape","btBoxShape","setMargin","radius","btSphereShape","meshes","meshMap","WeakMap","addMesh","mesh","mass","arguments","length","undefined","isInstancedMesh","handleInstancedMesh","isMesh","handleMesh","position","quaternion","transform","setIdentity","setOrigin","x","y","z","setRotation","btQuaternion","w","motionState","btDefaultMotionState","localInertia","calculateLocalInertia","rbInfo","btRigidBodyConstructionInfo","body","btRigidBody","addRigidBody","push","set","array","instanceMatrix","bodies","i","count","index","setFromOpenGLMatrix","slice","setUsage","setMeshPosition","get","setAngularVelocity","setLinearVelocity","setWorldTransform","lastTime","step","time","performance","now","delta","stepSimulation","l","j","getMotionState","getWorldTransform","getOrigin","getRotation","compose","needsUpdate","setInterval","x2","y2","z2","xx","xy","xz","yy","yz","zz","wx","wy","wz"],"sources":["/home/krug/Coding/JavaScript/Websites/Personal/personal/node_modules/.pnpm/three-stdlib@2.23.7_three@0.151.3/node_modules/three-stdlib/physics/AmmoPhysics.js"],"sourcesContent":["async function AmmoPhysics() {\n  if (\"Ammo\" in window === false) {\n    console.error(\"AmmoPhysics: Couldn't find Ammo.js\");\n    return;\n  }\n  const AmmoLib = await Ammo();\n  const frameRate = 60;\n  const collisionConfiguration = new AmmoLib.btDefaultCollisionConfiguration();\n  const dispatcher = new AmmoLib.btCollisionDispatcher(collisionConfiguration);\n  const broadphase = new AmmoLib.btDbvtBroadphase();\n  const solver = new AmmoLib.btSequentialImpulseConstraintSolver();\n  const world = new AmmoLib.btDiscreteDynamicsWorld(dispatcher, broadphase, solver, collisionConfiguration);\n  world.setGravity(new AmmoLib.btVector3(0, -9.8, 0));\n  const worldTransform = new AmmoLib.btTransform();\n  function getShape(geometry) {\n    const parameters = geometry.parameters;\n    if (geometry.type === \"BoxGeometry\") {\n      const sx = parameters.width !== void 0 ? parameters.width / 2 : 0.5;\n      const sy = parameters.height !== void 0 ? parameters.height / 2 : 0.5;\n      const sz = parameters.depth !== void 0 ? parameters.depth / 2 : 0.5;\n      const shape = new AmmoLib.btBoxShape(new AmmoLib.btVector3(sx, sy, sz));\n      shape.setMargin(0.05);\n      return shape;\n    } else if (geometry.type === \"SphereGeometry\" || geometry.type === \"IcosahedronGeometry\") {\n      const radius = parameters.radius !== void 0 ? parameters.radius : 1;\n      const shape = new AmmoLib.btSphereShape(radius);\n      shape.setMargin(0.05);\n      return shape;\n    }\n    return null;\n  }\n  const meshes = [];\n  const meshMap = /* @__PURE__ */ new WeakMap();\n  function addMesh(mesh, mass = 0) {\n    const shape = getShape(mesh.geometry);\n    if (shape !== null) {\n      if (mesh.isInstancedMesh) {\n        handleInstancedMesh(mesh, mass, shape);\n      } else if (mesh.isMesh) {\n        handleMesh(mesh, mass, shape);\n      }\n    }\n  }\n  function handleMesh(mesh, mass, shape) {\n    const position = mesh.position;\n    const quaternion = mesh.quaternion;\n    const transform = new AmmoLib.btTransform();\n    transform.setIdentity();\n    transform.setOrigin(new AmmoLib.btVector3(position.x, position.y, position.z));\n    transform.setRotation(new AmmoLib.btQuaternion(quaternion.x, quaternion.y, quaternion.z, quaternion.w));\n    const motionState = new AmmoLib.btDefaultMotionState(transform);\n    const localInertia = new AmmoLib.btVector3(0, 0, 0);\n    shape.calculateLocalInertia(mass, localInertia);\n    const rbInfo = new AmmoLib.btRigidBodyConstructionInfo(mass, motionState, shape, localInertia);\n    const body = new AmmoLib.btRigidBody(rbInfo);\n    world.addRigidBody(body);\n    if (mass > 0) {\n      meshes.push(mesh);\n      meshMap.set(mesh, body);\n    }\n  }\n  function handleInstancedMesh(mesh, mass, shape) {\n    const array = mesh.instanceMatrix.array;\n    const bodies = [];\n    for (let i = 0; i < mesh.count; i++) {\n      const index = i * 16;\n      const transform = new AmmoLib.btTransform();\n      transform.setFromOpenGLMatrix(array.slice(index, index + 16));\n      const motionState = new AmmoLib.btDefaultMotionState(transform);\n      const localInertia = new AmmoLib.btVector3(0, 0, 0);\n      shape.calculateLocalInertia(mass, localInertia);\n      const rbInfo = new AmmoLib.btRigidBodyConstructionInfo(mass, motionState, shape, localInertia);\n      const body = new AmmoLib.btRigidBody(rbInfo);\n      world.addRigidBody(body);\n      bodies.push(body);\n    }\n    if (mass > 0) {\n      mesh.instanceMatrix.setUsage(35048);\n      meshes.push(mesh);\n      meshMap.set(mesh, bodies);\n    }\n  }\n  function setMeshPosition(mesh, position, index = 0) {\n    if (mesh.isInstancedMesh) {\n      const bodies = meshMap.get(mesh);\n      const body = bodies[index];\n      body.setAngularVelocity(new AmmoLib.btVector3(0, 0, 0));\n      body.setLinearVelocity(new AmmoLib.btVector3(0, 0, 0));\n      worldTransform.setIdentity();\n      worldTransform.setOrigin(new AmmoLib.btVector3(position.x, position.y, position.z));\n      body.setWorldTransform(worldTransform);\n    } else if (mesh.isMesh) {\n      const body = meshMap.get(mesh);\n      body.setAngularVelocity(new AmmoLib.btVector3(0, 0, 0));\n      body.setLinearVelocity(new AmmoLib.btVector3(0, 0, 0));\n      worldTransform.setIdentity();\n      worldTransform.setOrigin(new AmmoLib.btVector3(position.x, position.y, position.z));\n      body.setWorldTransform(worldTransform);\n    }\n  }\n  let lastTime = 0;\n  function step() {\n    const time = performance.now();\n    if (lastTime > 0) {\n      const delta = (time - lastTime) / 1e3;\n      world.stepSimulation(delta, 10);\n    }\n    lastTime = time;\n    for (let i = 0, l = meshes.length; i < l; i++) {\n      const mesh = meshes[i];\n      if (mesh.isInstancedMesh) {\n        const array = mesh.instanceMatrix.array;\n        const bodies = meshMap.get(mesh);\n        for (let j = 0; j < bodies.length; j++) {\n          const body = bodies[j];\n          const motionState = body.getMotionState();\n          motionState.getWorldTransform(worldTransform);\n          const position = worldTransform.getOrigin();\n          const quaternion = worldTransform.getRotation();\n          compose(position, quaternion, array, j * 16);\n        }\n        mesh.instanceMatrix.needsUpdate = true;\n      } else if (mesh.isMesh) {\n        const body = meshMap.get(mesh);\n        const motionState = body.getMotionState();\n        motionState.getWorldTransform(worldTransform);\n        const position = worldTransform.getOrigin();\n        const quaternion = worldTransform.getRotation();\n        mesh.position.set(position.x(), position.y(), position.z());\n        mesh.quaternion.set(quaternion.x(), quaternion.y(), quaternion.z(), quaternion.w());\n      }\n    }\n  }\n  setInterval(step, 1e3 / frameRate);\n  return {\n    addMesh,\n    setMeshPosition\n    // addCompoundMesh\n  };\n}\nfunction compose(position, quaternion, array, index) {\n  const x = quaternion.x(), y = quaternion.y(), z = quaternion.z(), w = quaternion.w();\n  const x2 = x + x, y2 = y + y, z2 = z + z;\n  const xx = x * x2, xy = x * y2, xz = x * z2;\n  const yy = y * y2, yz = y * z2, zz = z * z2;\n  const wx = w * x2, wy = w * y2, wz = w * z2;\n  array[index + 0] = 1 - (yy + zz);\n  array[index + 1] = xy + wz;\n  array[index + 2] = xz - wy;\n  array[index + 3] = 0;\n  array[index + 4] = xy - wz;\n  array[index + 5] = 1 - (xx + zz);\n  array[index + 6] = yz + wx;\n  array[index + 7] = 0;\n  array[index + 8] = xz + wy;\n  array[index + 9] = yz - wx;\n  array[index + 10] = 1 - (xx + yy);\n  array[index + 11] = 0;\n  array[index + 12] = position.x();\n  array[index + 13] = position.y();\n  array[index + 14] = position.z();\n  array[index + 15] = 1;\n}\nexport {\n  AmmoPhysics\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}