{"ast":null,"code":"import { Object3D, MeshLambertMaterial, Mesh, TextureLoader, UVMapping, Box3, AnimationMixer } from \"three\";\nimport { MD2Loader } from \"../loaders/MD2Loader.js\";\nclass MD2Character {\n  constructor() {\n    this.scale = 1;\n    this.animationFPS = 6;\n    this.root = new Object3D();\n    this.meshBody = null;\n    this.meshWeapon = null;\n    this.skinsBody = [];\n    this.skinsWeapon = [];\n    this.weapons = [];\n    this.activeAnimation = null;\n    this.mixer = null;\n    this.onLoadComplete = function () {};\n    this.loadCounter = 0;\n  }\n  loadParts(config) {\n    const scope = this;\n    function createPart(geometry, skinMap) {\n      const materialWireframe = new MeshLambertMaterial({\n        color: 16755200,\n        wireframe: true,\n        morphTargets: true,\n        morphNormals: true\n      });\n      const materialTexture = new MeshLambertMaterial({\n        color: 16777215,\n        wireframe: false,\n        map: skinMap,\n        morphTargets: true,\n        morphNormals: true\n      });\n      const mesh = new Mesh(geometry, materialTexture);\n      mesh.rotation.y = -Math.PI / 2;\n      mesh.castShadow = true;\n      mesh.receiveShadow = true;\n      mesh.materialTexture = materialTexture;\n      mesh.materialWireframe = materialWireframe;\n      return mesh;\n    }\n    function loadTextures(baseUrl, textureUrls) {\n      const textureLoader = new TextureLoader();\n      const textures = [];\n      for (let i = 0; i < textureUrls.length; i++) {\n        textures[i] = textureLoader.load(baseUrl + textureUrls[i], checkLoadingComplete);\n        textures[i].mapping = UVMapping;\n        textures[i].name = textureUrls[i];\n        if (\"colorSpace\" in textures[i]) textures[i].colorSpace = \"srgb\";else textures[i].encoding = 3001;\n      }\n      return textures;\n    }\n    function checkLoadingComplete() {\n      scope.loadCounter -= 1;\n      if (scope.loadCounter === 0) scope.onLoadComplete();\n    }\n    this.loadCounter = config.weapons.length * 2 + config.skins.length + 1;\n    const weaponsTextures = [];\n    for (let i = 0; i < config.weapons.length; i++) weaponsTextures[i] = config.weapons[i][1];\n    this.skinsBody = loadTextures(config.baseUrl + \"skins/\", config.skins);\n    this.skinsWeapon = loadTextures(config.baseUrl + \"skins/\", weaponsTextures);\n    const loader = new MD2Loader();\n    loader.load(config.baseUrl + config.body, function (geo) {\n      const boundingBox = new Box3();\n      boundingBox.setFromBufferAttribute(geo.attributes.position);\n      scope.root.position.y = -scope.scale * boundingBox.min.y;\n      const mesh = createPart(geo, scope.skinsBody[0]);\n      mesh.scale.set(scope.scale, scope.scale, scope.scale);\n      scope.root.add(mesh);\n      scope.meshBody = mesh;\n      scope.meshBody.clipOffset = 0;\n      scope.activeAnimationClipName = mesh.geometry.animations[0].name;\n      scope.mixer = new AnimationMixer(mesh);\n      checkLoadingComplete();\n    });\n    const generateCallback = function (index, name) {\n      return function (geo) {\n        const mesh = createPart(geo, scope.skinsWeapon[index]);\n        mesh.scale.set(scope.scale, scope.scale, scope.scale);\n        mesh.visible = false;\n        mesh.name = name;\n        scope.root.add(mesh);\n        scope.weapons[index] = mesh;\n        scope.meshWeapon = mesh;\n        checkLoadingComplete();\n      };\n    };\n    for (let i = 0; i < config.weapons.length; i++) {\n      loader.load(config.baseUrl + config.weapons[i][0], generateCallback(i, config.weapons[i][0]));\n    }\n  }\n  setPlaybackRate(rate) {\n    if (rate !== 0) {\n      this.mixer.timeScale = 1 / rate;\n    } else {\n      this.mixer.timeScale = 0;\n    }\n  }\n  setWireframe(wireframeEnabled) {\n    if (wireframeEnabled) {\n      if (this.meshBody) this.meshBody.material = this.meshBody.materialWireframe;\n      if (this.meshWeapon) this.meshWeapon.material = this.meshWeapon.materialWireframe;\n    } else {\n      if (this.meshBody) this.meshBody.material = this.meshBody.materialTexture;\n      if (this.meshWeapon) this.meshWeapon.material = this.meshWeapon.materialTexture;\n    }\n  }\n  setSkin(index) {\n    if (this.meshBody && this.meshBody.material.wireframe === false) {\n      this.meshBody.material.map = this.skinsBody[index];\n    }\n  }\n  setWeapon(index) {\n    for (let i = 0; i < this.weapons.length; i++) this.weapons[i].visible = false;\n    const activeWeapon = this.weapons[index];\n    if (activeWeapon) {\n      activeWeapon.visible = true;\n      this.meshWeapon = activeWeapon;\n      this.syncWeaponAnimation();\n    }\n  }\n  setAnimation(clipName) {\n    if (this.meshBody) {\n      if (this.meshBody.activeAction) {\n        this.meshBody.activeAction.stop();\n        this.meshBody.activeAction = null;\n      }\n      const action = this.mixer.clipAction(clipName, this.meshBody);\n      if (action) {\n        this.meshBody.activeAction = action.play();\n      }\n    }\n    this.activeClipName = clipName;\n    this.syncWeaponAnimation();\n  }\n  syncWeaponAnimation() {\n    const clipName = this.activeClipName;\n    if (this.meshWeapon) {\n      if (this.meshWeapon.activeAction) {\n        this.meshWeapon.activeAction.stop();\n        this.meshWeapon.activeAction = null;\n      }\n      const action = this.mixer.clipAction(clipName, this.meshWeapon);\n      if (action) {\n        this.meshWeapon.activeAction = action.syncWith(this.meshBody.activeAction).play();\n      }\n    }\n  }\n  update(delta) {\n    if (this.mixer) this.mixer.update(delta);\n  }\n}\nexport { MD2Character };","map":{"version":3,"names":["Object3D","MeshLambertMaterial","Mesh","TextureLoader","UVMapping","Box3","AnimationMixer","MD2Loader","MD2Character","constructor","scale","animationFPS","root","meshBody","meshWeapon","skinsBody","skinsWeapon","weapons","activeAnimation","mixer","onLoadComplete","loadCounter","loadParts","config","scope","createPart","geometry","skinMap","materialWireframe","color","wireframe","morphTargets","morphNormals","materialTexture","map","mesh","rotation","y","Math","PI","castShadow","receiveShadow","loadTextures","baseUrl","textureUrls","textureLoader","textures","i","length","load","checkLoadingComplete","mapping","name","colorSpace","encoding","skins","weaponsTextures","loader","body","geo","boundingBox","setFromBufferAttribute","attributes","position","min","set","add","clipOffset","activeAnimationClipName","animations","generateCallback","index","visible","setPlaybackRate","rate","timeScale","setWireframe","wireframeEnabled","material","setSkin","setWeapon","activeWeapon","syncWeaponAnimation","setAnimation","clipName","activeAction","stop","action","clipAction","play","activeClipName","syncWith","update","delta"],"sources":["/home/krug/Coding/JavaScript/Websites/Personal/personal/node_modules/.pnpm/three-stdlib@2.23.7_three@0.151.3/node_modules/three-stdlib/misc/MD2Character.js"],"sourcesContent":["import { Object3D, MeshLambertMaterial, Mesh, TextureLoader, UVMapping, Box3, AnimationMixer } from \"three\";\nimport { MD2Loader } from \"../loaders/MD2Loader.js\";\nclass MD2Character {\n  constructor() {\n    this.scale = 1;\n    this.animationFPS = 6;\n    this.root = new Object3D();\n    this.meshBody = null;\n    this.meshWeapon = null;\n    this.skinsBody = [];\n    this.skinsWeapon = [];\n    this.weapons = [];\n    this.activeAnimation = null;\n    this.mixer = null;\n    this.onLoadComplete = function() {\n    };\n    this.loadCounter = 0;\n  }\n  loadParts(config) {\n    const scope = this;\n    function createPart(geometry, skinMap) {\n      const materialWireframe = new MeshLambertMaterial({\n        color: 16755200,\n        wireframe: true,\n        morphTargets: true,\n        morphNormals: true\n      });\n      const materialTexture = new MeshLambertMaterial({\n        color: 16777215,\n        wireframe: false,\n        map: skinMap,\n        morphTargets: true,\n        morphNormals: true\n      });\n      const mesh = new Mesh(geometry, materialTexture);\n      mesh.rotation.y = -Math.PI / 2;\n      mesh.castShadow = true;\n      mesh.receiveShadow = true;\n      mesh.materialTexture = materialTexture;\n      mesh.materialWireframe = materialWireframe;\n      return mesh;\n    }\n    function loadTextures(baseUrl, textureUrls) {\n      const textureLoader = new TextureLoader();\n      const textures = [];\n      for (let i = 0; i < textureUrls.length; i++) {\n        textures[i] = textureLoader.load(baseUrl + textureUrls[i], checkLoadingComplete);\n        textures[i].mapping = UVMapping;\n        textures[i].name = textureUrls[i];\n        if (\"colorSpace\" in textures[i])\n          textures[i].colorSpace = \"srgb\";\n        else\n          textures[i].encoding = 3001;\n      }\n      return textures;\n    }\n    function checkLoadingComplete() {\n      scope.loadCounter -= 1;\n      if (scope.loadCounter === 0)\n        scope.onLoadComplete();\n    }\n    this.loadCounter = config.weapons.length * 2 + config.skins.length + 1;\n    const weaponsTextures = [];\n    for (let i = 0; i < config.weapons.length; i++)\n      weaponsTextures[i] = config.weapons[i][1];\n    this.skinsBody = loadTextures(config.baseUrl + \"skins/\", config.skins);\n    this.skinsWeapon = loadTextures(config.baseUrl + \"skins/\", weaponsTextures);\n    const loader = new MD2Loader();\n    loader.load(config.baseUrl + config.body, function(geo) {\n      const boundingBox = new Box3();\n      boundingBox.setFromBufferAttribute(geo.attributes.position);\n      scope.root.position.y = -scope.scale * boundingBox.min.y;\n      const mesh = createPart(geo, scope.skinsBody[0]);\n      mesh.scale.set(scope.scale, scope.scale, scope.scale);\n      scope.root.add(mesh);\n      scope.meshBody = mesh;\n      scope.meshBody.clipOffset = 0;\n      scope.activeAnimationClipName = mesh.geometry.animations[0].name;\n      scope.mixer = new AnimationMixer(mesh);\n      checkLoadingComplete();\n    });\n    const generateCallback = function(index, name) {\n      return function(geo) {\n        const mesh = createPart(geo, scope.skinsWeapon[index]);\n        mesh.scale.set(scope.scale, scope.scale, scope.scale);\n        mesh.visible = false;\n        mesh.name = name;\n        scope.root.add(mesh);\n        scope.weapons[index] = mesh;\n        scope.meshWeapon = mesh;\n        checkLoadingComplete();\n      };\n    };\n    for (let i = 0; i < config.weapons.length; i++) {\n      loader.load(config.baseUrl + config.weapons[i][0], generateCallback(i, config.weapons[i][0]));\n    }\n  }\n  setPlaybackRate(rate) {\n    if (rate !== 0) {\n      this.mixer.timeScale = 1 / rate;\n    } else {\n      this.mixer.timeScale = 0;\n    }\n  }\n  setWireframe(wireframeEnabled) {\n    if (wireframeEnabled) {\n      if (this.meshBody)\n        this.meshBody.material = this.meshBody.materialWireframe;\n      if (this.meshWeapon)\n        this.meshWeapon.material = this.meshWeapon.materialWireframe;\n    } else {\n      if (this.meshBody)\n        this.meshBody.material = this.meshBody.materialTexture;\n      if (this.meshWeapon)\n        this.meshWeapon.material = this.meshWeapon.materialTexture;\n    }\n  }\n  setSkin(index) {\n    if (this.meshBody && this.meshBody.material.wireframe === false) {\n      this.meshBody.material.map = this.skinsBody[index];\n    }\n  }\n  setWeapon(index) {\n    for (let i = 0; i < this.weapons.length; i++)\n      this.weapons[i].visible = false;\n    const activeWeapon = this.weapons[index];\n    if (activeWeapon) {\n      activeWeapon.visible = true;\n      this.meshWeapon = activeWeapon;\n      this.syncWeaponAnimation();\n    }\n  }\n  setAnimation(clipName) {\n    if (this.meshBody) {\n      if (this.meshBody.activeAction) {\n        this.meshBody.activeAction.stop();\n        this.meshBody.activeAction = null;\n      }\n      const action = this.mixer.clipAction(clipName, this.meshBody);\n      if (action) {\n        this.meshBody.activeAction = action.play();\n      }\n    }\n    this.activeClipName = clipName;\n    this.syncWeaponAnimation();\n  }\n  syncWeaponAnimation() {\n    const clipName = this.activeClipName;\n    if (this.meshWeapon) {\n      if (this.meshWeapon.activeAction) {\n        this.meshWeapon.activeAction.stop();\n        this.meshWeapon.activeAction = null;\n      }\n      const action = this.mixer.clipAction(clipName, this.meshWeapon);\n      if (action) {\n        this.meshWeapon.activeAction = action.syncWith(this.meshBody.activeAction).play();\n      }\n    }\n  }\n  update(delta) {\n    if (this.mixer)\n      this.mixer.update(delta);\n  }\n}\nexport {\n  MD2Character\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}