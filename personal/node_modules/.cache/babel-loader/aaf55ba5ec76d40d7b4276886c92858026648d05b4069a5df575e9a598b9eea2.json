{"ast":null,"code":"import _classCallCheck from \"/home/krug/Coding/JavaScript/Websites/Personal/personal/node_modules/.pnpm/@babel+runtime@7.22.3/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/home/krug/Coding/JavaScript/Websites/Personal/personal/node_modules/.pnpm/@babel+runtime@7.22.3/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"/home/krug/Coding/JavaScript/Websites/Personal/personal/node_modules/.pnpm/@babel+runtime@7.22.3/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/home/krug/Coding/JavaScript/Websites/Personal/personal/node_modules/.pnpm/@babel+runtime@7.22.3/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { CompressedTextureLoader, RGBA_PVRTC_4BPPV1_Format, RGB_PVRTC_4BPPV1_Format, RGBA_PVRTC_2BPPV1_Format, RGB_PVRTC_2BPPV1_Format } from \"three\";\nvar PVRLoader = /*#__PURE__*/function (_CompressedTextureLoa) {\n  _inherits(PVRLoader, _CompressedTextureLoa);\n  var _super = _createSuper(PVRLoader);\n  function PVRLoader(manager) {\n    _classCallCheck(this, PVRLoader);\n    return _super.call(this, manager);\n  }\n  _createClass(PVRLoader, [{\n    key: \"parse\",\n    value: function parse(buffer, loadMipmaps) {\n      var headerLengthInt = 13;\n      var header = new Uint32Array(buffer, 0, headerLengthInt);\n      var pvrDatas = {\n        buffer: buffer,\n        header: header,\n        loadMipmaps: loadMipmaps\n      };\n      if (header[0] === 55727696) {\n        return _parseV3(pvrDatas);\n      } else if (header[11] === 559044176) {\n        return _parseV2(pvrDatas);\n      } else {\n        console.error(\"THREE.PVRLoader: Unknown PVR format.\");\n      }\n    }\n  }]);\n  return PVRLoader;\n}(CompressedTextureLoader);\nfunction _parseV3(pvrDatas) {\n  var header = pvrDatas.header;\n  var bpp, format;\n  var metaLen = header[12],\n    pixelFormat = header[2],\n    height = header[6],\n    width = header[7],\n    numFaces = header[10],\n    numMipmaps = header[11];\n  switch (pixelFormat) {\n    case 0:\n      bpp = 2;\n      format = RGB_PVRTC_2BPPV1_Format;\n      break;\n    case 1:\n      bpp = 2;\n      format = RGBA_PVRTC_2BPPV1_Format;\n      break;\n    case 2:\n      bpp = 4;\n      format = RGB_PVRTC_4BPPV1_Format;\n      break;\n    case 3:\n      bpp = 4;\n      format = RGBA_PVRTC_4BPPV1_Format;\n      break;\n    default:\n      console.error(\"THREE.PVRLoader: Unsupported PVR format:\", pixelFormat);\n  }\n  pvrDatas.dataPtr = 52 + metaLen;\n  pvrDatas.bpp = bpp;\n  pvrDatas.format = format;\n  pvrDatas.width = width;\n  pvrDatas.height = height;\n  pvrDatas.numSurfaces = numFaces;\n  pvrDatas.numMipmaps = numMipmaps;\n  pvrDatas.isCubemap = numFaces === 6;\n  return _extract(pvrDatas);\n}\nfunction _parseV2(pvrDatas) {\n  var header = pvrDatas.header;\n  var headerLength = header[0],\n    height = header[1],\n    width = header[2],\n    numMipmaps = header[3],\n    flags = header[4],\n    bitmaskAlpha = header[10],\n    numSurfs = header[12];\n  var TYPE_MASK = 255;\n  var PVRTC_2 = 24,\n    PVRTC_4 = 25;\n  var formatFlags = flags & TYPE_MASK;\n  var bpp, format;\n  var _hasAlpha = bitmaskAlpha > 0;\n  if (formatFlags === PVRTC_4) {\n    format = _hasAlpha ? RGBA_PVRTC_4BPPV1_Format : RGB_PVRTC_4BPPV1_Format;\n    bpp = 4;\n  } else if (formatFlags === PVRTC_2) {\n    format = _hasAlpha ? RGBA_PVRTC_2BPPV1_Format : RGB_PVRTC_2BPPV1_Format;\n    bpp = 2;\n  } else {\n    console.error(\"THREE.PVRLoader: Unknown PVR format:\", formatFlags);\n  }\n  pvrDatas.dataPtr = headerLength;\n  pvrDatas.bpp = bpp;\n  pvrDatas.format = format;\n  pvrDatas.width = width;\n  pvrDatas.height = height;\n  pvrDatas.numSurfaces = numSurfs;\n  pvrDatas.numMipmaps = numMipmaps + 1;\n  pvrDatas.isCubemap = numSurfs === 6;\n  return _extract(pvrDatas);\n}\nfunction _extract(pvrDatas) {\n  var pvr = {\n    mipmaps: [],\n    width: pvrDatas.width,\n    height: pvrDatas.height,\n    format: pvrDatas.format,\n    mipmapCount: pvrDatas.numMipmaps,\n    isCubemap: pvrDatas.isCubemap\n  };\n  var buffer = pvrDatas.buffer;\n  var dataOffset = pvrDatas.dataPtr,\n    dataSize = 0,\n    blockSize = 0,\n    blockWidth = 0,\n    blockHeight = 0,\n    widthBlocks = 0,\n    heightBlocks = 0;\n  var bpp = pvrDatas.bpp,\n    numSurfs = pvrDatas.numSurfaces;\n  if (bpp === 2) {\n    blockWidth = 8;\n    blockHeight = 4;\n  } else {\n    blockWidth = 4;\n    blockHeight = 4;\n  }\n  blockSize = blockWidth * blockHeight * bpp / 8;\n  pvr.mipmaps.length = pvrDatas.numMipmaps * numSurfs;\n  var mipLevel = 0;\n  while (mipLevel < pvrDatas.numMipmaps) {\n    var sWidth = pvrDatas.width >> mipLevel,\n      sHeight = pvrDatas.height >> mipLevel;\n    widthBlocks = sWidth / blockWidth;\n    heightBlocks = sHeight / blockHeight;\n    if (widthBlocks < 2) widthBlocks = 2;\n    if (heightBlocks < 2) heightBlocks = 2;\n    dataSize = widthBlocks * heightBlocks * blockSize;\n    for (var surfIndex = 0; surfIndex < numSurfs; surfIndex++) {\n      var byteArray = new Uint8Array(buffer, dataOffset, dataSize);\n      var mipmap = {\n        data: byteArray,\n        width: sWidth,\n        height: sHeight\n      };\n      pvr.mipmaps[surfIndex * pvrDatas.numMipmaps + mipLevel] = mipmap;\n      dataOffset += dataSize;\n    }\n    mipLevel++;\n  }\n  return pvr;\n}\nexport { PVRLoader };","map":{"version":3,"names":["CompressedTextureLoader","RGBA_PVRTC_4BPPV1_Format","RGB_PVRTC_4BPPV1_Format","RGBA_PVRTC_2BPPV1_Format","RGB_PVRTC_2BPPV1_Format","PVRLoader","_CompressedTextureLoa","_inherits","_super","_createSuper","manager","_classCallCheck","call","_createClass","key","value","parse","buffer","loadMipmaps","headerLengthInt","header","Uint32Array","pvrDatas","_parseV3","_parseV2","console","error","bpp","format","metaLen","pixelFormat","height","width","numFaces","numMipmaps","dataPtr","numSurfaces","isCubemap","_extract","headerLength","flags","bitmaskAlpha","numSurfs","TYPE_MASK","PVRTC_2","PVRTC_4","formatFlags","_hasAlpha","pvr","mipmaps","mipmapCount","dataOffset","dataSize","blockSize","blockWidth","blockHeight","widthBlocks","heightBlocks","length","mipLevel","sWidth","sHeight","surfIndex","byteArray","Uint8Array","mipmap","data"],"sources":["/home/krug/Coding/JavaScript/Websites/Personal/personal/node_modules/.pnpm/three-stdlib@2.23.7_three@0.151.3/node_modules/three-stdlib/loaders/PVRLoader.js"],"sourcesContent":["import { CompressedTextureLoader, RGBA_PVRTC_4BPPV1_Format, RGB_PVRTC_4BPPV1_Format, RGBA_PVRTC_2BPPV1_Format, RGB_PVRTC_2BPPV1_Format } from \"three\";\nclass PVRLoader extends CompressedTextureLoader {\n  constructor(manager) {\n    super(manager);\n  }\n  parse(buffer, loadMipmaps) {\n    const headerLengthInt = 13;\n    const header = new Uint32Array(buffer, 0, headerLengthInt);\n    const pvrDatas = {\n      buffer,\n      header,\n      loadMipmaps\n    };\n    if (header[0] === 55727696) {\n      return _parseV3(pvrDatas);\n    } else if (header[11] === 559044176) {\n      return _parseV2(pvrDatas);\n    } else {\n      console.error(\"THREE.PVRLoader: Unknown PVR format.\");\n    }\n  }\n}\nfunction _parseV3(pvrDatas) {\n  const header = pvrDatas.header;\n  let bpp, format;\n  const metaLen = header[12], pixelFormat = header[2], height = header[6], width = header[7], numFaces = header[10], numMipmaps = header[11];\n  switch (pixelFormat) {\n    case 0:\n      bpp = 2;\n      format = RGB_PVRTC_2BPPV1_Format;\n      break;\n    case 1:\n      bpp = 2;\n      format = RGBA_PVRTC_2BPPV1_Format;\n      break;\n    case 2:\n      bpp = 4;\n      format = RGB_PVRTC_4BPPV1_Format;\n      break;\n    case 3:\n      bpp = 4;\n      format = RGBA_PVRTC_4BPPV1_Format;\n      break;\n    default:\n      console.error(\"THREE.PVRLoader: Unsupported PVR format:\", pixelFormat);\n  }\n  pvrDatas.dataPtr = 52 + metaLen;\n  pvrDatas.bpp = bpp;\n  pvrDatas.format = format;\n  pvrDatas.width = width;\n  pvrDatas.height = height;\n  pvrDatas.numSurfaces = numFaces;\n  pvrDatas.numMipmaps = numMipmaps;\n  pvrDatas.isCubemap = numFaces === 6;\n  return _extract(pvrDatas);\n}\nfunction _parseV2(pvrDatas) {\n  const header = pvrDatas.header;\n  const headerLength = header[0], height = header[1], width = header[2], numMipmaps = header[3], flags = header[4], bitmaskAlpha = header[10], numSurfs = header[12];\n  const TYPE_MASK = 255;\n  const PVRTC_2 = 24, PVRTC_4 = 25;\n  const formatFlags = flags & TYPE_MASK;\n  let bpp, format;\n  const _hasAlpha = bitmaskAlpha > 0;\n  if (formatFlags === PVRTC_4) {\n    format = _hasAlpha ? RGBA_PVRTC_4BPPV1_Format : RGB_PVRTC_4BPPV1_Format;\n    bpp = 4;\n  } else if (formatFlags === PVRTC_2) {\n    format = _hasAlpha ? RGBA_PVRTC_2BPPV1_Format : RGB_PVRTC_2BPPV1_Format;\n    bpp = 2;\n  } else {\n    console.error(\"THREE.PVRLoader: Unknown PVR format:\", formatFlags);\n  }\n  pvrDatas.dataPtr = headerLength;\n  pvrDatas.bpp = bpp;\n  pvrDatas.format = format;\n  pvrDatas.width = width;\n  pvrDatas.height = height;\n  pvrDatas.numSurfaces = numSurfs;\n  pvrDatas.numMipmaps = numMipmaps + 1;\n  pvrDatas.isCubemap = numSurfs === 6;\n  return _extract(pvrDatas);\n}\nfunction _extract(pvrDatas) {\n  const pvr = {\n    mipmaps: [],\n    width: pvrDatas.width,\n    height: pvrDatas.height,\n    format: pvrDatas.format,\n    mipmapCount: pvrDatas.numMipmaps,\n    isCubemap: pvrDatas.isCubemap\n  };\n  const buffer = pvrDatas.buffer;\n  let dataOffset = pvrDatas.dataPtr, dataSize = 0, blockSize = 0, blockWidth = 0, blockHeight = 0, widthBlocks = 0, heightBlocks = 0;\n  const bpp = pvrDatas.bpp, numSurfs = pvrDatas.numSurfaces;\n  if (bpp === 2) {\n    blockWidth = 8;\n    blockHeight = 4;\n  } else {\n    blockWidth = 4;\n    blockHeight = 4;\n  }\n  blockSize = blockWidth * blockHeight * bpp / 8;\n  pvr.mipmaps.length = pvrDatas.numMipmaps * numSurfs;\n  let mipLevel = 0;\n  while (mipLevel < pvrDatas.numMipmaps) {\n    const sWidth = pvrDatas.width >> mipLevel, sHeight = pvrDatas.height >> mipLevel;\n    widthBlocks = sWidth / blockWidth;\n    heightBlocks = sHeight / blockHeight;\n    if (widthBlocks < 2)\n      widthBlocks = 2;\n    if (heightBlocks < 2)\n      heightBlocks = 2;\n    dataSize = widthBlocks * heightBlocks * blockSize;\n    for (let surfIndex = 0; surfIndex < numSurfs; surfIndex++) {\n      const byteArray = new Uint8Array(buffer, dataOffset, dataSize);\n      const mipmap = {\n        data: byteArray,\n        width: sWidth,\n        height: sHeight\n      };\n      pvr.mipmaps[surfIndex * pvrDatas.numMipmaps + mipLevel] = mipmap;\n      dataOffset += dataSize;\n    }\n    mipLevel++;\n  }\n  return pvr;\n}\nexport {\n  PVRLoader\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}