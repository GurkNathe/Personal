{"ast":null,"code":"var __defProp = Object.defineProperty;\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value\n}) : obj[key] = value;\nvar __publicField = (obj, key, value) => {\n  __defNormalProp(obj, typeof key !== \"symbol\" ? key + \"\" : key, value);\n  return value;\n};\nimport { Vector3, Mesh, SkinnedMesh } from \"three\";\nclass STLExporter {\n  constructor() {\n    __publicField(this, \"binary\");\n    __publicField(this, \"output\");\n    __publicField(this, \"offset\");\n    __publicField(this, \"objects\");\n    __publicField(this, \"triangles\");\n    __publicField(this, \"vA\");\n    __publicField(this, \"vB\");\n    __publicField(this, \"vC\");\n    __publicField(this, \"cb\");\n    __publicField(this, \"ab\");\n    __publicField(this, \"normal\");\n    this.binary = false;\n    this.output = \"\";\n    this.offset = 80;\n    this.objects = [];\n    this.triangles = 0;\n    this.vA = new Vector3();\n    this.vB = new Vector3();\n    this.vC = new Vector3();\n    this.cb = new Vector3();\n    this.ab = new Vector3();\n    this.normal = new Vector3();\n  }\n  parse(scene, options) {\n    this.binary = options.binary !== void 0 ? options.binary : false;\n    scene.traverse(object => {\n      if (object instanceof Mesh && object.isMesh) {\n        const geometry = object.geometry;\n        if (!geometry.isBufferGeometry) {\n          throw new Error(\"THREE.STLExporter: Geometry is not of type THREE.BufferGeometry.\");\n        }\n        const index = geometry.index;\n        const positionAttribute = geometry.getAttribute(\"position\");\n        this.triangles += index !== null ? index.count / 3 : positionAttribute.count / 3;\n        this.objects.push({\n          object3d: object,\n          geometry\n        });\n      }\n    });\n    if (this.binary) {\n      const bufferLength = this.triangles * 2 + this.triangles * 3 * 4 * 4 + 80 + 4;\n      const arrayBuffer = new ArrayBuffer(bufferLength);\n      this.output = new DataView(arrayBuffer);\n      this.output.setUint32(this.offset, this.triangles, true);\n      this.offset += 4;\n    } else {\n      this.output = \"\";\n      this.output += \"solid exported\\n\";\n    }\n    for (let i = 0, il = this.objects.length; i < il; i++) {\n      const object = this.objects[i].object3d;\n      const geometry = this.objects[i].geometry;\n      const index = geometry.index;\n      const positionAttribute = geometry.getAttribute(\"position\");\n      if (object instanceof SkinnedMesh) {\n        if (index !== null) {\n          for (let j = 0; j < index.count; j += 3) {\n            const a = index.getX(j + 0);\n            const b = index.getX(j + 1);\n            const c = index.getX(j + 2);\n            this.writeFace(a, b, c, positionAttribute, object);\n          }\n        } else {\n          for (let j = 0; j < positionAttribute.count; j += 3) {\n            const a = j + 0;\n            const b = j + 1;\n            const c = j + 2;\n            this.writeFace(a, b, c, positionAttribute, object);\n          }\n        }\n      }\n    }\n    if (!this.binary) {\n      this.output += \"endsolid exported\\n\";\n    }\n    return this.output;\n  }\n  writeFace(a, b, c, positionAttribute, object) {\n    this.vA.fromBufferAttribute(positionAttribute, a);\n    this.vB.fromBufferAttribute(positionAttribute, b);\n    this.vC.fromBufferAttribute(positionAttribute, c);\n    if (object.isSkinnedMesh) {\n      object.boneTransform(a, this.vA);\n      object.boneTransform(b, this.vB);\n      object.boneTransform(c, this.vC);\n    }\n    this.vA.applyMatrix4(object.matrixWorld);\n    this.vB.applyMatrix4(object.matrixWorld);\n    this.vC.applyMatrix4(object.matrixWorld);\n    this.writeNormal(this.vA, this.vB, this.vC);\n    this.writeVertex(this.vA);\n    this.writeVertex(this.vB);\n    this.writeVertex(this.vC);\n    if (this.binary && this.output instanceof DataView) {\n      this.output.setUint16(this.offset, 0, true);\n      this.offset += 2;\n    } else {\n      this.output += \"\t\tendloop\\n\";\n      this.output += \"\tendfacet\\n\";\n    }\n  }\n  writeNormal(vA, vB, vC) {\n    this.cb.subVectors(vC, vB);\n    this.ab.subVectors(vA, vB);\n    this.cb.cross(this.ab).normalize();\n    this.normal.copy(this.cb).normalize();\n    if (this.binary && this.output instanceof DataView) {\n      this.output.setFloat32(this.offset, this.normal.x, true);\n      this.offset += 4;\n      this.output.setFloat32(this.offset, this.normal.y, true);\n      this.offset += 4;\n      this.output.setFloat32(this.offset, this.normal.z, true);\n      this.offset += 4;\n    } else {\n      this.output += `\tfacet normal ${this.normal.x} ${this.normal.y} ${this.normal.z}\n`;\n      this.output += \"\t\touter loop\\n\";\n    }\n  }\n  writeVertex(vertex) {\n    if (this.binary && this.output instanceof DataView) {\n      this.output.setFloat32(this.offset, vertex.x, true);\n      this.offset += 4;\n      this.output.setFloat32(this.offset, vertex.y, true);\n      this.offset += 4;\n      this.output.setFloat32(this.offset, vertex.z, true);\n      this.offset += 4;\n    } else {\n      this.output += `\t\t\tvertex vertex.x vertex.y vertex.z\n`;\n    }\n  }\n}\nexport { STLExporter };","map":{"version":3,"names":["__defProp","Object","defineProperty","__defNormalProp","obj","key","value","enumerable","configurable","writable","__publicField","Vector3","Mesh","SkinnedMesh","STLExporter","constructor","binary","output","offset","objects","triangles","vA","vB","vC","cb","ab","normal","parse","scene","options","traverse","object","isMesh","geometry","isBufferGeometry","Error","index","positionAttribute","getAttribute","count","push","object3d","bufferLength","arrayBuffer","ArrayBuffer","DataView","setUint32","i","il","length","j","a","getX","b","c","writeFace","fromBufferAttribute","isSkinnedMesh","boneTransform","applyMatrix4","matrixWorld","writeNormal","writeVertex","setUint16","subVectors","cross","normalize","copy","setFloat32","x","y","z","vertex"],"sources":["/home/krug/Coding/JavaScript/Websites/Personal/personal/node_modules/.pnpm/three-stdlib@2.23.7_three@0.151.3/node_modules/three-stdlib/exporters/STLExporter.js"],"sourcesContent":["var __defProp = Object.defineProperty;\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;\nvar __publicField = (obj, key, value) => {\n  __defNormalProp(obj, typeof key !== \"symbol\" ? key + \"\" : key, value);\n  return value;\n};\nimport { Vector3, Mesh, SkinnedMesh } from \"three\";\nclass STLExporter {\n  constructor() {\n    __publicField(this, \"binary\");\n    __publicField(this, \"output\");\n    __publicField(this, \"offset\");\n    __publicField(this, \"objects\");\n    __publicField(this, \"triangles\");\n    __publicField(this, \"vA\");\n    __publicField(this, \"vB\");\n    __publicField(this, \"vC\");\n    __publicField(this, \"cb\");\n    __publicField(this, \"ab\");\n    __publicField(this, \"normal\");\n    this.binary = false;\n    this.output = \"\";\n    this.offset = 80;\n    this.objects = [];\n    this.triangles = 0;\n    this.vA = new Vector3();\n    this.vB = new Vector3();\n    this.vC = new Vector3();\n    this.cb = new Vector3();\n    this.ab = new Vector3();\n    this.normal = new Vector3();\n  }\n  parse(scene, options) {\n    this.binary = options.binary !== void 0 ? options.binary : false;\n    scene.traverse((object) => {\n      if (object instanceof Mesh && object.isMesh) {\n        const geometry = object.geometry;\n        if (!geometry.isBufferGeometry) {\n          throw new Error(\"THREE.STLExporter: Geometry is not of type THREE.BufferGeometry.\");\n        }\n        const index = geometry.index;\n        const positionAttribute = geometry.getAttribute(\"position\");\n        this.triangles += index !== null ? index.count / 3 : positionAttribute.count / 3;\n        this.objects.push({\n          object3d: object,\n          geometry\n        });\n      }\n    });\n    if (this.binary) {\n      const bufferLength = this.triangles * 2 + this.triangles * 3 * 4 * 4 + 80 + 4;\n      const arrayBuffer = new ArrayBuffer(bufferLength);\n      this.output = new DataView(arrayBuffer);\n      this.output.setUint32(this.offset, this.triangles, true);\n      this.offset += 4;\n    } else {\n      this.output = \"\";\n      this.output += \"solid exported\\n\";\n    }\n    for (let i = 0, il = this.objects.length; i < il; i++) {\n      const object = this.objects[i].object3d;\n      const geometry = this.objects[i].geometry;\n      const index = geometry.index;\n      const positionAttribute = geometry.getAttribute(\"position\");\n      if (object instanceof SkinnedMesh) {\n        if (index !== null) {\n          for (let j = 0; j < index.count; j += 3) {\n            const a = index.getX(j + 0);\n            const b = index.getX(j + 1);\n            const c = index.getX(j + 2);\n            this.writeFace(a, b, c, positionAttribute, object);\n          }\n        } else {\n          for (let j = 0; j < positionAttribute.count; j += 3) {\n            const a = j + 0;\n            const b = j + 1;\n            const c = j + 2;\n            this.writeFace(a, b, c, positionAttribute, object);\n          }\n        }\n      }\n    }\n    if (!this.binary) {\n      this.output += \"endsolid exported\\n\";\n    }\n    return this.output;\n  }\n  writeFace(a, b, c, positionAttribute, object) {\n    this.vA.fromBufferAttribute(positionAttribute, a);\n    this.vB.fromBufferAttribute(positionAttribute, b);\n    this.vC.fromBufferAttribute(positionAttribute, c);\n    if (object.isSkinnedMesh) {\n      object.boneTransform(a, this.vA);\n      object.boneTransform(b, this.vB);\n      object.boneTransform(c, this.vC);\n    }\n    this.vA.applyMatrix4(object.matrixWorld);\n    this.vB.applyMatrix4(object.matrixWorld);\n    this.vC.applyMatrix4(object.matrixWorld);\n    this.writeNormal(this.vA, this.vB, this.vC);\n    this.writeVertex(this.vA);\n    this.writeVertex(this.vB);\n    this.writeVertex(this.vC);\n    if (this.binary && this.output instanceof DataView) {\n      this.output.setUint16(this.offset, 0, true);\n      this.offset += 2;\n    } else {\n      this.output += \"\t\tendloop\\n\";\n      this.output += \"\tendfacet\\n\";\n    }\n  }\n  writeNormal(vA, vB, vC) {\n    this.cb.subVectors(vC, vB);\n    this.ab.subVectors(vA, vB);\n    this.cb.cross(this.ab).normalize();\n    this.normal.copy(this.cb).normalize();\n    if (this.binary && this.output instanceof DataView) {\n      this.output.setFloat32(this.offset, this.normal.x, true);\n      this.offset += 4;\n      this.output.setFloat32(this.offset, this.normal.y, true);\n      this.offset += 4;\n      this.output.setFloat32(this.offset, this.normal.z, true);\n      this.offset += 4;\n    } else {\n      this.output += `\tfacet normal ${this.normal.x} ${this.normal.y} ${this.normal.z}\n`;\n      this.output += \"\t\touter loop\\n\";\n    }\n  }\n  writeVertex(vertex) {\n    if (this.binary && this.output instanceof DataView) {\n      this.output.setFloat32(this.offset, vertex.x, true);\n      this.offset += 4;\n      this.output.setFloat32(this.offset, vertex.y, true);\n      this.offset += 4;\n      this.output.setFloat32(this.offset, vertex.z, true);\n      this.offset += 4;\n    } else {\n      this.output += `\t\t\tvertex vertex.x vertex.y vertex.z\n`;\n    }\n  }\n}\nexport {\n  STLExporter\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}