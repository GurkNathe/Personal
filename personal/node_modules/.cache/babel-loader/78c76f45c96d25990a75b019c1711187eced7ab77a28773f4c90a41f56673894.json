{"ast":null,"code":"import _classCallCheck from \"/home/krug/Coding/JavaScript/Websites/Personal/personal/node_modules/.pnpm/@babel+runtime@7.22.3/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/home/krug/Coding/JavaScript/Websites/Personal/personal/node_modules/.pnpm/@babel+runtime@7.22.3/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"/home/krug/Coding/JavaScript/Websites/Personal/personal/node_modules/.pnpm/@babel+runtime@7.22.3/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/home/krug/Coding/JavaScript/Websites/Personal/personal/node_modules/.pnpm/@babel+runtime@7.22.3/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nvar __defProp = Object.defineProperty;\nvar __defNormalProp = function __defNormalProp(obj, key, value) {\n  return key in obj ? __defProp(obj, key, {\n    enumerable: true,\n    configurable: true,\n    writable: true,\n    value: value\n  }) : obj[key] = value;\n};\nvar __publicField = function __publicField(obj, key, value) {\n  __defNormalProp(obj, typeof key !== \"symbol\" ? key + \"\" : key, value);\n  return value;\n};\nimport { DepthTexture, DepthStencilFormat, UnsignedInt248Type, WebGLRenderTarget, NearestFilter, ShaderMaterial, UniformsUtils, NoBlending, MeshNormalMaterial, DstColorFactor, ZeroFactor, AddEquation, DstAlphaFactor, Color, LuminanceFormat, CustomBlending, Vector3, MathUtils, DataTexture, RedFormat, FloatType, RepeatWrapping } from \"three\";\nimport { Pass, FullScreenQuad } from \"./Pass.js\";\nimport { SimplexNoise } from \"../math/SimplexNoise.js\";\nimport { SSAOShader, SSAOBlurShader, SSAODepthShader } from \"../shaders/SSAOShader.js\";\nimport { CopyShader } from \"../shaders/CopyShader.js\";\nvar _SSAOPass = /*#__PURE__*/function (_Pass) {\n  _inherits(_SSAOPass, _Pass);\n  var _super = _createSuper(_SSAOPass);\n  function _SSAOPass(scene, camera, width, height) {\n    var _this;\n    _classCallCheck(this, _SSAOPass);\n    _this = _super.call(this);\n    _this.width = width !== void 0 ? width : 512;\n    _this.height = height !== void 0 ? height : 512;\n    _this.clear = true;\n    _this.camera = camera;\n    _this.scene = scene;\n    _this.kernelRadius = 8;\n    _this.kernelSize = 32;\n    _this.kernel = [];\n    _this.noiseTexture = null;\n    _this.output = 0;\n    _this.minDistance = 5e-3;\n    _this.maxDistance = 0.1;\n    _this._visibilityCache = /* @__PURE__ */new Map();\n    _this.generateSampleKernel();\n    _this.generateRandomKernelRotations();\n    var depthTexture = new DepthTexture();\n    depthTexture.format = DepthStencilFormat;\n    depthTexture.type = UnsignedInt248Type;\n    _this.beautyRenderTarget = new WebGLRenderTarget(_this.width, _this.height);\n    _this.normalRenderTarget = new WebGLRenderTarget(_this.width, _this.height, {\n      minFilter: NearestFilter,\n      magFilter: NearestFilter,\n      depthTexture: depthTexture\n    });\n    _this.ssaoRenderTarget = new WebGLRenderTarget(_this.width, _this.height);\n    _this.blurRenderTarget = _this.ssaoRenderTarget.clone();\n    if (SSAOShader === void 0) {\n      console.error(\"THREE.SSAOPass: The pass relies on SSAOShader.\");\n    }\n    _this.ssaoMaterial = new ShaderMaterial({\n      defines: Object.assign({}, SSAOShader.defines),\n      uniforms: UniformsUtils.clone(SSAOShader.uniforms),\n      vertexShader: SSAOShader.vertexShader,\n      fragmentShader: SSAOShader.fragmentShader,\n      blending: NoBlending\n    });\n    _this.ssaoMaterial.uniforms[\"tDiffuse\"].value = _this.beautyRenderTarget.texture;\n    _this.ssaoMaterial.uniforms[\"tNormal\"].value = _this.normalRenderTarget.texture;\n    _this.ssaoMaterial.uniforms[\"tDepth\"].value = _this.normalRenderTarget.depthTexture;\n    _this.ssaoMaterial.uniforms[\"tNoise\"].value = _this.noiseTexture;\n    _this.ssaoMaterial.uniforms[\"kernel\"].value = _this.kernel;\n    _this.ssaoMaterial.uniforms[\"cameraNear\"].value = _this.camera.near;\n    _this.ssaoMaterial.uniforms[\"cameraFar\"].value = _this.camera.far;\n    _this.ssaoMaterial.uniforms[\"resolution\"].value.set(_this.width, _this.height);\n    _this.ssaoMaterial.uniforms[\"cameraProjectionMatrix\"].value.copy(_this.camera.projectionMatrix);\n    _this.ssaoMaterial.uniforms[\"cameraInverseProjectionMatrix\"].value.copy(_this.camera.projectionMatrixInverse);\n    _this.normalMaterial = new MeshNormalMaterial();\n    _this.normalMaterial.blending = NoBlending;\n    _this.blurMaterial = new ShaderMaterial({\n      defines: Object.assign({}, SSAOBlurShader.defines),\n      uniforms: UniformsUtils.clone(SSAOBlurShader.uniforms),\n      vertexShader: SSAOBlurShader.vertexShader,\n      fragmentShader: SSAOBlurShader.fragmentShader\n    });\n    _this.blurMaterial.uniforms[\"tDiffuse\"].value = _this.ssaoRenderTarget.texture;\n    _this.blurMaterial.uniforms[\"resolution\"].value.set(_this.width, _this.height);\n    _this.depthRenderMaterial = new ShaderMaterial({\n      defines: Object.assign({}, SSAODepthShader.defines),\n      uniforms: UniformsUtils.clone(SSAODepthShader.uniforms),\n      vertexShader: SSAODepthShader.vertexShader,\n      fragmentShader: SSAODepthShader.fragmentShader,\n      blending: NoBlending\n    });\n    _this.depthRenderMaterial.uniforms[\"tDepth\"].value = _this.normalRenderTarget.depthTexture;\n    _this.depthRenderMaterial.uniforms[\"cameraNear\"].value = _this.camera.near;\n    _this.depthRenderMaterial.uniforms[\"cameraFar\"].value = _this.camera.far;\n    _this.copyMaterial = new ShaderMaterial({\n      uniforms: UniformsUtils.clone(CopyShader.uniforms),\n      vertexShader: CopyShader.vertexShader,\n      fragmentShader: CopyShader.fragmentShader,\n      transparent: true,\n      depthTest: false,\n      depthWrite: false,\n      blendSrc: DstColorFactor,\n      blendDst: ZeroFactor,\n      blendEquation: AddEquation,\n      blendSrcAlpha: DstAlphaFactor,\n      blendDstAlpha: ZeroFactor,\n      blendEquationAlpha: AddEquation\n    });\n    _this.fsQuad = new FullScreenQuad(null);\n    _this.originalClearColor = new Color();\n    return _this;\n  }\n  _createClass(_SSAOPass, [{\n    key: \"dispose\",\n    value: function dispose() {\n      this.beautyRenderTarget.dispose();\n      this.normalRenderTarget.dispose();\n      this.ssaoRenderTarget.dispose();\n      this.blurRenderTarget.dispose();\n      this.normalMaterial.dispose();\n      this.blurMaterial.dispose();\n      this.copyMaterial.dispose();\n      this.depthRenderMaterial.dispose();\n      this.fsQuad.dispose();\n    }\n  }, {\n    key: \"render\",\n    value: function render(renderer, writeBuffer) {\n      if (renderer.capabilities.isWebGL2 === false) this.noiseTexture.format = LuminanceFormat;\n      renderer.setRenderTarget(this.beautyRenderTarget);\n      renderer.clear();\n      renderer.render(this.scene, this.camera);\n      this.overrideVisibility();\n      this.renderOverride(renderer, this.normalMaterial, this.normalRenderTarget, 7829503, 1);\n      this.restoreVisibility();\n      this.ssaoMaterial.uniforms[\"kernelRadius\"].value = this.kernelRadius;\n      this.ssaoMaterial.uniforms[\"minDistance\"].value = this.minDistance;\n      this.ssaoMaterial.uniforms[\"maxDistance\"].value = this.maxDistance;\n      this.renderPass(renderer, this.ssaoMaterial, this.ssaoRenderTarget);\n      this.renderPass(renderer, this.blurMaterial, this.blurRenderTarget);\n      switch (this.output) {\n        case _SSAOPass.OUTPUT.SSAO:\n          this.copyMaterial.uniforms[\"tDiffuse\"].value = this.ssaoRenderTarget.texture;\n          this.copyMaterial.blending = NoBlending;\n          this.renderPass(renderer, this.copyMaterial, this.renderToScreen ? null : writeBuffer);\n          break;\n        case _SSAOPass.OUTPUT.Blur:\n          this.copyMaterial.uniforms[\"tDiffuse\"].value = this.blurRenderTarget.texture;\n          this.copyMaterial.blending = NoBlending;\n          this.renderPass(renderer, this.copyMaterial, this.renderToScreen ? null : writeBuffer);\n          break;\n        case _SSAOPass.OUTPUT.Beauty:\n          this.copyMaterial.uniforms[\"tDiffuse\"].value = this.beautyRenderTarget.texture;\n          this.copyMaterial.blending = NoBlending;\n          this.renderPass(renderer, this.copyMaterial, this.renderToScreen ? null : writeBuffer);\n          break;\n        case _SSAOPass.OUTPUT.Depth:\n          this.renderPass(renderer, this.depthRenderMaterial, this.renderToScreen ? null : writeBuffer);\n          break;\n        case _SSAOPass.OUTPUT.Normal:\n          this.copyMaterial.uniforms[\"tDiffuse\"].value = this.normalRenderTarget.texture;\n          this.copyMaterial.blending = NoBlending;\n          this.renderPass(renderer, this.copyMaterial, this.renderToScreen ? null : writeBuffer);\n          break;\n        case _SSAOPass.OUTPUT.Default:\n          this.copyMaterial.uniforms[\"tDiffuse\"].value = this.beautyRenderTarget.texture;\n          this.copyMaterial.blending = NoBlending;\n          this.renderPass(renderer, this.copyMaterial, this.renderToScreen ? null : writeBuffer);\n          this.copyMaterial.uniforms[\"tDiffuse\"].value = this.blurRenderTarget.texture;\n          this.copyMaterial.blending = CustomBlending;\n          this.renderPass(renderer, this.copyMaterial, this.renderToScreen ? null : writeBuffer);\n          break;\n        default:\n          console.warn(\"THREE.SSAOPass: Unknown output type.\");\n      }\n    }\n  }, {\n    key: \"renderPass\",\n    value: function renderPass(renderer, passMaterial, renderTarget, clearColor, clearAlpha) {\n      renderer.getClearColor(this.originalClearColor);\n      var originalClearAlpha = renderer.getClearAlpha();\n      var originalAutoClear = renderer.autoClear;\n      renderer.setRenderTarget(renderTarget);\n      renderer.autoClear = false;\n      if (clearColor !== void 0 && clearColor !== null) {\n        renderer.setClearColor(clearColor);\n        renderer.setClearAlpha(clearAlpha || 0);\n        renderer.clear();\n      }\n      this.fsQuad.material = passMaterial;\n      this.fsQuad.render(renderer);\n      renderer.autoClear = originalAutoClear;\n      renderer.setClearColor(this.originalClearColor);\n      renderer.setClearAlpha(originalClearAlpha);\n    }\n  }, {\n    key: \"renderOverride\",\n    value: function renderOverride(renderer, overrideMaterial, renderTarget, clearColor, clearAlpha) {\n      renderer.getClearColor(this.originalClearColor);\n      var originalClearAlpha = renderer.getClearAlpha();\n      var originalAutoClear = renderer.autoClear;\n      renderer.setRenderTarget(renderTarget);\n      renderer.autoClear = false;\n      clearColor = overrideMaterial.clearColor || clearColor;\n      clearAlpha = overrideMaterial.clearAlpha || clearAlpha;\n      if (clearColor !== void 0 && clearColor !== null) {\n        renderer.setClearColor(clearColor);\n        renderer.setClearAlpha(clearAlpha || 0);\n        renderer.clear();\n      }\n      this.scene.overrideMaterial = overrideMaterial;\n      renderer.render(this.scene, this.camera);\n      this.scene.overrideMaterial = null;\n      renderer.autoClear = originalAutoClear;\n      renderer.setClearColor(this.originalClearColor);\n      renderer.setClearAlpha(originalClearAlpha);\n    }\n  }, {\n    key: \"setSize\",\n    value: function setSize(width, height) {\n      this.width = width;\n      this.height = height;\n      this.beautyRenderTarget.setSize(width, height);\n      this.ssaoRenderTarget.setSize(width, height);\n      this.normalRenderTarget.setSize(width, height);\n      this.blurRenderTarget.setSize(width, height);\n      this.ssaoMaterial.uniforms[\"resolution\"].value.set(width, height);\n      this.ssaoMaterial.uniforms[\"cameraProjectionMatrix\"].value.copy(this.camera.projectionMatrix);\n      this.ssaoMaterial.uniforms[\"cameraInverseProjectionMatrix\"].value.copy(this.camera.projectionMatrixInverse);\n      this.blurMaterial.uniforms[\"resolution\"].value.set(width, height);\n    }\n  }, {\n    key: \"generateSampleKernel\",\n    value: function generateSampleKernel() {\n      var kernelSize = this.kernelSize;\n      var kernel = this.kernel;\n      for (var i = 0; i < kernelSize; i++) {\n        var sample = new Vector3();\n        sample.x = Math.random() * 2 - 1;\n        sample.y = Math.random() * 2 - 1;\n        sample.z = Math.random();\n        sample.normalize();\n        var scale = i / kernelSize;\n        scale = MathUtils.lerp(0.1, 1, scale * scale);\n        sample.multiplyScalar(scale);\n        kernel.push(sample);\n      }\n    }\n  }, {\n    key: \"generateRandomKernelRotations\",\n    value: function generateRandomKernelRotations() {\n      var width = 4,\n        height = 4;\n      if (SimplexNoise === void 0) {\n        console.error(\"THREE.SSAOPass: The pass relies on SimplexNoise.\");\n      }\n      var simplex = new SimplexNoise();\n      var size = width * height;\n      var data = new Float32Array(size);\n      for (var i = 0; i < size; i++) {\n        var x = Math.random() * 2 - 1;\n        var y = Math.random() * 2 - 1;\n        var z = 0;\n        data[i] = simplex.noise3d(x, y, z);\n      }\n      this.noiseTexture = new DataTexture(data, width, height, RedFormat, FloatType);\n      this.noiseTexture.wrapS = RepeatWrapping;\n      this.noiseTexture.wrapT = RepeatWrapping;\n      this.noiseTexture.needsUpdate = true;\n    }\n  }, {\n    key: \"overrideVisibility\",\n    value: function overrideVisibility() {\n      var scene = this.scene;\n      var cache = this._visibilityCache;\n      scene.traverse(function (object) {\n        cache.set(object, object.visible);\n        if (object.isPoints || object.isLine) object.visible = false;\n      });\n    }\n  }, {\n    key: \"restoreVisibility\",\n    value: function restoreVisibility() {\n      var scene = this.scene;\n      var cache = this._visibilityCache;\n      scene.traverse(function (object) {\n        var visible = cache.get(object);\n        object.visible = visible;\n      });\n      cache.clear();\n    }\n  }]);\n  return _SSAOPass;\n}(Pass);\nvar SSAOPass = _SSAOPass;\n__publicField(SSAOPass, \"OUTPUT\", {\n  Default: 0,\n  SSAO: 1,\n  Blur: 2,\n  Beauty: 3,\n  Depth: 4,\n  Normal: 5\n});\nexport { SSAOPass };","map":{"version":3,"names":["__defProp","Object","defineProperty","__defNormalProp","obj","key","value","enumerable","configurable","writable","__publicField","DepthTexture","DepthStencilFormat","UnsignedInt248Type","WebGLRenderTarget","NearestFilter","ShaderMaterial","UniformsUtils","NoBlending","MeshNormalMaterial","DstColorFactor","ZeroFactor","AddEquation","DstAlphaFactor","Color","LuminanceFormat","CustomBlending","Vector3","MathUtils","DataTexture","RedFormat","FloatType","RepeatWrapping","Pass","FullScreenQuad","SimplexNoise","SSAOShader","SSAOBlurShader","SSAODepthShader","CopyShader","_SSAOPass","_Pass","_inherits","_super","_createSuper","scene","camera","width","height","_this","_classCallCheck","call","clear","kernelRadius","kernelSize","kernel","noiseTexture","output","minDistance","maxDistance","_visibilityCache","Map","generateSampleKernel","generateRandomKernelRotations","depthTexture","format","type","beautyRenderTarget","normalRenderTarget","minFilter","magFilter","ssaoRenderTarget","blurRenderTarget","clone","console","error","ssaoMaterial","defines","assign","uniforms","vertexShader","fragmentShader","blending","texture","near","far","set","copy","projectionMatrix","projectionMatrixInverse","normalMaterial","blurMaterial","depthRenderMaterial","copyMaterial","transparent","depthTest","depthWrite","blendSrc","blendDst","blendEquation","blendSrcAlpha","blendDstAlpha","blendEquationAlpha","fsQuad","originalClearColor","_createClass","dispose","render","renderer","writeBuffer","capabilities","isWebGL2","setRenderTarget","overrideVisibility","renderOverride","restoreVisibility","renderPass","OUTPUT","SSAO","renderToScreen","Blur","Beauty","Depth","Normal","Default","warn","passMaterial","renderTarget","clearColor","clearAlpha","getClearColor","originalClearAlpha","getClearAlpha","originalAutoClear","autoClear","setClearColor","setClearAlpha","material","overrideMaterial","setSize","i","sample","x","Math","random","y","z","normalize","scale","lerp","multiplyScalar","push","simplex","size","data","Float32Array","noise3d","wrapS","wrapT","needsUpdate","cache","traverse","object","visible","isPoints","isLine","get","SSAOPass"],"sources":["/home/krug/Coding/JavaScript/Websites/Personal/personal/node_modules/.pnpm/three-stdlib@2.23.7_three@0.151.3/node_modules/three-stdlib/postprocessing/SSAOPass.js"],"sourcesContent":["var __defProp = Object.defineProperty;\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;\nvar __publicField = (obj, key, value) => {\n  __defNormalProp(obj, typeof key !== \"symbol\" ? key + \"\" : key, value);\n  return value;\n};\nimport { DepthTexture, DepthStencilFormat, UnsignedInt248Type, WebGLRenderTarget, NearestFilter, ShaderMaterial, UniformsUtils, NoBlending, MeshNormalMaterial, DstColorFactor, ZeroFactor, AddEquation, DstAlphaFactor, Color, LuminanceFormat, CustomBlending, Vector3, MathUtils, DataTexture, RedFormat, FloatType, RepeatWrapping } from \"three\";\nimport { Pass, FullScreenQuad } from \"./Pass.js\";\nimport { SimplexNoise } from \"../math/SimplexNoise.js\";\nimport { SSAOShader, SSAOBlurShader, SSAODepthShader } from \"../shaders/SSAOShader.js\";\nimport { CopyShader } from \"../shaders/CopyShader.js\";\nconst _SSAOPass = class extends Pass {\n  constructor(scene, camera, width, height) {\n    super();\n    this.width = width !== void 0 ? width : 512;\n    this.height = height !== void 0 ? height : 512;\n    this.clear = true;\n    this.camera = camera;\n    this.scene = scene;\n    this.kernelRadius = 8;\n    this.kernelSize = 32;\n    this.kernel = [];\n    this.noiseTexture = null;\n    this.output = 0;\n    this.minDistance = 5e-3;\n    this.maxDistance = 0.1;\n    this._visibilityCache = /* @__PURE__ */ new Map();\n    this.generateSampleKernel();\n    this.generateRandomKernelRotations();\n    const depthTexture = new DepthTexture();\n    depthTexture.format = DepthStencilFormat;\n    depthTexture.type = UnsignedInt248Type;\n    this.beautyRenderTarget = new WebGLRenderTarget(this.width, this.height);\n    this.normalRenderTarget = new WebGLRenderTarget(this.width, this.height, {\n      minFilter: NearestFilter,\n      magFilter: NearestFilter,\n      depthTexture\n    });\n    this.ssaoRenderTarget = new WebGLRenderTarget(this.width, this.height);\n    this.blurRenderTarget = this.ssaoRenderTarget.clone();\n    if (SSAOShader === void 0) {\n      console.error(\"THREE.SSAOPass: The pass relies on SSAOShader.\");\n    }\n    this.ssaoMaterial = new ShaderMaterial({\n      defines: Object.assign({}, SSAOShader.defines),\n      uniforms: UniformsUtils.clone(SSAOShader.uniforms),\n      vertexShader: SSAOShader.vertexShader,\n      fragmentShader: SSAOShader.fragmentShader,\n      blending: NoBlending\n    });\n    this.ssaoMaterial.uniforms[\"tDiffuse\"].value = this.beautyRenderTarget.texture;\n    this.ssaoMaterial.uniforms[\"tNormal\"].value = this.normalRenderTarget.texture;\n    this.ssaoMaterial.uniforms[\"tDepth\"].value = this.normalRenderTarget.depthTexture;\n    this.ssaoMaterial.uniforms[\"tNoise\"].value = this.noiseTexture;\n    this.ssaoMaterial.uniforms[\"kernel\"].value = this.kernel;\n    this.ssaoMaterial.uniforms[\"cameraNear\"].value = this.camera.near;\n    this.ssaoMaterial.uniforms[\"cameraFar\"].value = this.camera.far;\n    this.ssaoMaterial.uniforms[\"resolution\"].value.set(this.width, this.height);\n    this.ssaoMaterial.uniforms[\"cameraProjectionMatrix\"].value.copy(this.camera.projectionMatrix);\n    this.ssaoMaterial.uniforms[\"cameraInverseProjectionMatrix\"].value.copy(this.camera.projectionMatrixInverse);\n    this.normalMaterial = new MeshNormalMaterial();\n    this.normalMaterial.blending = NoBlending;\n    this.blurMaterial = new ShaderMaterial({\n      defines: Object.assign({}, SSAOBlurShader.defines),\n      uniforms: UniformsUtils.clone(SSAOBlurShader.uniforms),\n      vertexShader: SSAOBlurShader.vertexShader,\n      fragmentShader: SSAOBlurShader.fragmentShader\n    });\n    this.blurMaterial.uniforms[\"tDiffuse\"].value = this.ssaoRenderTarget.texture;\n    this.blurMaterial.uniforms[\"resolution\"].value.set(this.width, this.height);\n    this.depthRenderMaterial = new ShaderMaterial({\n      defines: Object.assign({}, SSAODepthShader.defines),\n      uniforms: UniformsUtils.clone(SSAODepthShader.uniforms),\n      vertexShader: SSAODepthShader.vertexShader,\n      fragmentShader: SSAODepthShader.fragmentShader,\n      blending: NoBlending\n    });\n    this.depthRenderMaterial.uniforms[\"tDepth\"].value = this.normalRenderTarget.depthTexture;\n    this.depthRenderMaterial.uniforms[\"cameraNear\"].value = this.camera.near;\n    this.depthRenderMaterial.uniforms[\"cameraFar\"].value = this.camera.far;\n    this.copyMaterial = new ShaderMaterial({\n      uniforms: UniformsUtils.clone(CopyShader.uniforms),\n      vertexShader: CopyShader.vertexShader,\n      fragmentShader: CopyShader.fragmentShader,\n      transparent: true,\n      depthTest: false,\n      depthWrite: false,\n      blendSrc: DstColorFactor,\n      blendDst: ZeroFactor,\n      blendEquation: AddEquation,\n      blendSrcAlpha: DstAlphaFactor,\n      blendDstAlpha: ZeroFactor,\n      blendEquationAlpha: AddEquation\n    });\n    this.fsQuad = new FullScreenQuad(null);\n    this.originalClearColor = new Color();\n  }\n  dispose() {\n    this.beautyRenderTarget.dispose();\n    this.normalRenderTarget.dispose();\n    this.ssaoRenderTarget.dispose();\n    this.blurRenderTarget.dispose();\n    this.normalMaterial.dispose();\n    this.blurMaterial.dispose();\n    this.copyMaterial.dispose();\n    this.depthRenderMaterial.dispose();\n    this.fsQuad.dispose();\n  }\n  render(renderer, writeBuffer) {\n    if (renderer.capabilities.isWebGL2 === false)\n      this.noiseTexture.format = LuminanceFormat;\n    renderer.setRenderTarget(this.beautyRenderTarget);\n    renderer.clear();\n    renderer.render(this.scene, this.camera);\n    this.overrideVisibility();\n    this.renderOverride(renderer, this.normalMaterial, this.normalRenderTarget, 7829503, 1);\n    this.restoreVisibility();\n    this.ssaoMaterial.uniforms[\"kernelRadius\"].value = this.kernelRadius;\n    this.ssaoMaterial.uniforms[\"minDistance\"].value = this.minDistance;\n    this.ssaoMaterial.uniforms[\"maxDistance\"].value = this.maxDistance;\n    this.renderPass(renderer, this.ssaoMaterial, this.ssaoRenderTarget);\n    this.renderPass(renderer, this.blurMaterial, this.blurRenderTarget);\n    switch (this.output) {\n      case _SSAOPass.OUTPUT.SSAO:\n        this.copyMaterial.uniforms[\"tDiffuse\"].value = this.ssaoRenderTarget.texture;\n        this.copyMaterial.blending = NoBlending;\n        this.renderPass(renderer, this.copyMaterial, this.renderToScreen ? null : writeBuffer);\n        break;\n      case _SSAOPass.OUTPUT.Blur:\n        this.copyMaterial.uniforms[\"tDiffuse\"].value = this.blurRenderTarget.texture;\n        this.copyMaterial.blending = NoBlending;\n        this.renderPass(renderer, this.copyMaterial, this.renderToScreen ? null : writeBuffer);\n        break;\n      case _SSAOPass.OUTPUT.Beauty:\n        this.copyMaterial.uniforms[\"tDiffuse\"].value = this.beautyRenderTarget.texture;\n        this.copyMaterial.blending = NoBlending;\n        this.renderPass(renderer, this.copyMaterial, this.renderToScreen ? null : writeBuffer);\n        break;\n      case _SSAOPass.OUTPUT.Depth:\n        this.renderPass(renderer, this.depthRenderMaterial, this.renderToScreen ? null : writeBuffer);\n        break;\n      case _SSAOPass.OUTPUT.Normal:\n        this.copyMaterial.uniforms[\"tDiffuse\"].value = this.normalRenderTarget.texture;\n        this.copyMaterial.blending = NoBlending;\n        this.renderPass(renderer, this.copyMaterial, this.renderToScreen ? null : writeBuffer);\n        break;\n      case _SSAOPass.OUTPUT.Default:\n        this.copyMaterial.uniforms[\"tDiffuse\"].value = this.beautyRenderTarget.texture;\n        this.copyMaterial.blending = NoBlending;\n        this.renderPass(renderer, this.copyMaterial, this.renderToScreen ? null : writeBuffer);\n        this.copyMaterial.uniforms[\"tDiffuse\"].value = this.blurRenderTarget.texture;\n        this.copyMaterial.blending = CustomBlending;\n        this.renderPass(renderer, this.copyMaterial, this.renderToScreen ? null : writeBuffer);\n        break;\n      default:\n        console.warn(\"THREE.SSAOPass: Unknown output type.\");\n    }\n  }\n  renderPass(renderer, passMaterial, renderTarget, clearColor, clearAlpha) {\n    renderer.getClearColor(this.originalClearColor);\n    const originalClearAlpha = renderer.getClearAlpha();\n    const originalAutoClear = renderer.autoClear;\n    renderer.setRenderTarget(renderTarget);\n    renderer.autoClear = false;\n    if (clearColor !== void 0 && clearColor !== null) {\n      renderer.setClearColor(clearColor);\n      renderer.setClearAlpha(clearAlpha || 0);\n      renderer.clear();\n    }\n    this.fsQuad.material = passMaterial;\n    this.fsQuad.render(renderer);\n    renderer.autoClear = originalAutoClear;\n    renderer.setClearColor(this.originalClearColor);\n    renderer.setClearAlpha(originalClearAlpha);\n  }\n  renderOverride(renderer, overrideMaterial, renderTarget, clearColor, clearAlpha) {\n    renderer.getClearColor(this.originalClearColor);\n    const originalClearAlpha = renderer.getClearAlpha();\n    const originalAutoClear = renderer.autoClear;\n    renderer.setRenderTarget(renderTarget);\n    renderer.autoClear = false;\n    clearColor = overrideMaterial.clearColor || clearColor;\n    clearAlpha = overrideMaterial.clearAlpha || clearAlpha;\n    if (clearColor !== void 0 && clearColor !== null) {\n      renderer.setClearColor(clearColor);\n      renderer.setClearAlpha(clearAlpha || 0);\n      renderer.clear();\n    }\n    this.scene.overrideMaterial = overrideMaterial;\n    renderer.render(this.scene, this.camera);\n    this.scene.overrideMaterial = null;\n    renderer.autoClear = originalAutoClear;\n    renderer.setClearColor(this.originalClearColor);\n    renderer.setClearAlpha(originalClearAlpha);\n  }\n  setSize(width, height) {\n    this.width = width;\n    this.height = height;\n    this.beautyRenderTarget.setSize(width, height);\n    this.ssaoRenderTarget.setSize(width, height);\n    this.normalRenderTarget.setSize(width, height);\n    this.blurRenderTarget.setSize(width, height);\n    this.ssaoMaterial.uniforms[\"resolution\"].value.set(width, height);\n    this.ssaoMaterial.uniforms[\"cameraProjectionMatrix\"].value.copy(this.camera.projectionMatrix);\n    this.ssaoMaterial.uniforms[\"cameraInverseProjectionMatrix\"].value.copy(this.camera.projectionMatrixInverse);\n    this.blurMaterial.uniforms[\"resolution\"].value.set(width, height);\n  }\n  generateSampleKernel() {\n    const kernelSize = this.kernelSize;\n    const kernel = this.kernel;\n    for (let i = 0; i < kernelSize; i++) {\n      const sample = new Vector3();\n      sample.x = Math.random() * 2 - 1;\n      sample.y = Math.random() * 2 - 1;\n      sample.z = Math.random();\n      sample.normalize();\n      let scale = i / kernelSize;\n      scale = MathUtils.lerp(0.1, 1, scale * scale);\n      sample.multiplyScalar(scale);\n      kernel.push(sample);\n    }\n  }\n  generateRandomKernelRotations() {\n    const width = 4, height = 4;\n    if (SimplexNoise === void 0) {\n      console.error(\"THREE.SSAOPass: The pass relies on SimplexNoise.\");\n    }\n    const simplex = new SimplexNoise();\n    const size = width * height;\n    const data = new Float32Array(size);\n    for (let i = 0; i < size; i++) {\n      const x = Math.random() * 2 - 1;\n      const y = Math.random() * 2 - 1;\n      const z = 0;\n      data[i] = simplex.noise3d(x, y, z);\n    }\n    this.noiseTexture = new DataTexture(data, width, height, RedFormat, FloatType);\n    this.noiseTexture.wrapS = RepeatWrapping;\n    this.noiseTexture.wrapT = RepeatWrapping;\n    this.noiseTexture.needsUpdate = true;\n  }\n  overrideVisibility() {\n    const scene = this.scene;\n    const cache = this._visibilityCache;\n    scene.traverse(function(object) {\n      cache.set(object, object.visible);\n      if (object.isPoints || object.isLine)\n        object.visible = false;\n    });\n  }\n  restoreVisibility() {\n    const scene = this.scene;\n    const cache = this._visibilityCache;\n    scene.traverse(function(object) {\n      const visible = cache.get(object);\n      object.visible = visible;\n    });\n    cache.clear();\n  }\n};\nlet SSAOPass = _SSAOPass;\n__publicField(SSAOPass, \"OUTPUT\", {\n  Default: 0,\n  SSAO: 1,\n  Blur: 2,\n  Beauty: 3,\n  Depth: 4,\n  Normal: 5\n});\nexport {\n  SSAOPass\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}